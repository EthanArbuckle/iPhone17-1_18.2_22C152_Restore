const char *_outIntoClause_0(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  double node__init;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  double v17;
  unsigned int v18;
  int v19;
  const char *result;
  uint64_t v21;
  double v22;

  if (*(void *)(a2 + 8))
  {
    v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    _outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *(void *)(a1 + 24) = v4;
  }
  v5 = *(void *)(a2 + 16);
  if (v5)
  {
    v6 = *(int *)(v5 + 4);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = palloc(8 * v6);
    if (*(void *)(a1 + 32))
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = palloc(0x28uLL);
        node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(a1 + 40) + 8 * v7) = v9;
        _outNode_0(*(void *)(*(void *)(a1 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        v7 = v8++;
      }
      while (*(void *)(a1 + 32) > v7);
    }
  }
  v11 = *(const char **)(a2 + 24);
  if (v11) {
    *(void *)(a1 + 48) = pstrdup(v11);
  }
  v12 = *(void *)(a2 + 32);
  if (v12)
  {
    v13 = *(int *)(v12 + 4);
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = palloc(8 * v13);
    if (*(void *)(a1 + 56))
    {
      v14 = 0;
      v15 = 1;
      do
      {
        v16 = palloc(0x28uLL);
        v17 = pg_query__node__init(v16);
        *(void *)(*(void *)(a1 + 64) + 8 * v14) = v16;
        _outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v14), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v14), v17);
        v14 = v15++;
      }
      while (*(void *)(a1 + 56) > v14);
    }
  }
  v18 = *(_DWORD *)(a2 + 40);
  if (v18 < 4) {
    v19 = v18 + 1;
  }
  else {
    v19 = -1;
  }
  *(_DWORD *)(a1 + 72) = v19;
  result = *(const char **)(a2 + 48);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 80) = result;
  }
  if (*(void *)(a2 + 56))
  {
    v21 = palloc(0x28uLL);
    v22 = pg_query__node__init(v21);
    *(void *)(a1 + 88) = v21;
    result = (const char *)_outNode_0(v21, *(void *)(a2 + 56), v22);
  }
  *(_DWORD *)(a1 + 96) = *(unsigned __int8 *)(a2 + 64);
  return result;
}

_DWORD *_outQuery_0(_DWORD *result, uint64_t a2)
{
  v3 = result;
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 7) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  result[6] = v5;
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  if (v6 < 5) {
    int v7 = v6 + 1;
  }
  else {
    int v7 = -1;
  }
  result[7] = v7;
  result[8] = *(unsigned __int8 *)(a2 + 24);
  if (*(void *)(a2 + 32))
  {
    uint64_t v8 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v8);
    *((void *)v3 + 5) = v8;
    result = (_DWORD *)_outNode_0(v8, *(void *)(a2 + 32), node__init);
  }
  v3[12] = *(_DWORD *)(a2 + 40);
  v3[13] = *(unsigned __int8 *)(a2 + 44);
  v3[14] = *(unsigned __int8 *)(a2 + 45);
  v3[15] = *(unsigned __int8 *)(a2 + 46);
  v3[16] = *(unsigned __int8 *)(a2 + 47);
  v3[17] = *(unsigned __int8 *)(a2 + 48);
  v3[18] = *(unsigned __int8 *)(a2 + 49);
  v3[19] = *(unsigned __int8 *)(a2 + 50);
  v3[20] = *(unsigned __int8 *)(a2 + 51);
  v3[21] = *(unsigned __int8 *)(a2 + 52);
  uint64_t v10 = *(void *)(a2 + 56);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    *((void *)v3 + 11) = v11;
    result = (_DWORD *)palloc(8 * v11);
    *((void *)v3 + 12) = result;
    if (*((void *)v3 + 11))
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double v15 = pg_query__node__init(v14);
        *(void *)(*((void *)v3 + 12) + 8 * v12) = v14;
        result = (_DWORD *)_outNode_0(*(void *)(*((void *)v3 + 12) + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 56) + 16) + 8 * v12), v15);
        unint64_t v12 = v13++;
      }
      while (*((void *)v3 + 11) > v12);
    }
  }
  uint64_t v16 = *(void *)(a2 + 64);
  if (v16)
  {
    uint64_t v17 = *(int *)(v16 + 4);
    *((void *)v3 + 13) = v17;
    result = (_DWORD *)palloc(8 * v17);
    *((void *)v3 + 14) = result;
    if (*((void *)v3 + 13))
    {
      unint64_t v18 = 0;
      int v19 = 1;
      do
      {
        uint64_t v20 = palloc(0x28uLL);
        double v21 = pg_query__node__init(v20);
        *(void *)(*((void *)v3 + 14) + 8 * v18) = v20;
        result = (_DWORD *)_outNode_0(*(void *)(*((void *)v3 + 14) + 8 * v18), *(void *)(*(void *)(*(void *)(a2 + 64) + 16) + 8 * v18), v21);
        unint64_t v18 = v19++;
      }
      while (*((void *)v3 + 13) > v18);
    }
  }
  if (*(void *)(a2 + 72))
  {
    v22 = (_OWORD *)palloc(0x30uLL);
    pg_query__from_expr__init(v22);
    result = (_DWORD *)_outFromExpr_0((uint64_t)v22, *(void *)(a2 + 72));
    *((void *)v3 + 15) = v22;
  }
  uint64_t v23 = *(void *)(a2 + 80);
  if (v23)
  {
    uint64_t v24 = *(int *)(v23 + 4);
    *((void *)v3 + 16) = v24;
    result = (_DWORD *)palloc(8 * v24);
    *((void *)v3 + 17) = result;
    if (*((void *)v3 + 16))
    {
      unint64_t v25 = 0;
      int v26 = 1;
      do
      {
        uint64_t v27 = palloc(0x28uLL);
        double v28 = pg_query__node__init(v27);
        *(void *)(*((void *)v3 + 17) + 8 * v25) = v27;
        result = (_DWORD *)_outNode_0(*(void *)(*((void *)v3 + 17) + 8 * v25), *(void *)(*(void *)(*(void *)(a2 + 80) + 16) + 8 * v25), v28);
        unint64_t v25 = v26++;
      }
      while (*((void *)v3 + 16) > v25);
    }
  }
  unsigned int v29 = *(_DWORD *)(a2 + 88);
  if (v29 < 3) {
    int v30 = v29 + 1;
  }
  else {
    int v30 = -1;
  }
  v3[36] = v30;
  if (*(void *)(a2 + 96))
  {
    v31 = (_OWORD *)palloc(0x70uLL);
    pg_query__on_conflict_expr__init(v31);
    result = (_DWORD *)_outOnConflictExpr_0((uint64_t)v31, *(void *)(a2 + 96));
    *((void *)v3 + 19) = v31;
  }
  uint64_t v32 = *(void *)(a2 + 104);
  if (v32)
  {
    uint64_t v33 = *(int *)(v32 + 4);
    *((void *)v3 + 20) = v33;
    result = (_DWORD *)palloc(8 * v33);
    *((void *)v3 + 21) = result;
    if (*((void *)v3 + 20))
    {
      unint64_t v34 = 0;
      int v35 = 1;
      do
      {
        uint64_t v36 = palloc(0x28uLL);
        double v37 = pg_query__node__init(v36);
        *(void *)(*((void *)v3 + 21) + 8 * v34) = v36;
        result = (_DWORD *)_outNode_0(*(void *)(*((void *)v3 + 21) + 8 * v34), *(void *)(*(void *)(*(void *)(a2 + 104) + 16) + 8 * v34), v37);
        unint64_t v34 = v35++;
      }
      while (*((void *)v3 + 20) > v34);
    }
  }
  uint64_t v38 = *(void *)(a2 + 112);
  if (v38)
  {
    uint64_t v39 = *(int *)(v38 + 4);
    *((void *)v3 + 22) = v39;
    result = (_DWORD *)palloc(8 * v39);
    *((void *)v3 + 23) = result;
    if (*((void *)v3 + 22))
    {
      unint64_t v40 = 0;
      int v41 = 1;
      do
      {
        uint64_t v42 = palloc(0x28uLL);
        double v43 = pg_query__node__init(v42);
        *(void *)(*((void *)v3 + 23) + 8 * v40) = v42;
        result = (_DWORD *)_outNode_0(*(void *)(*((void *)v3 + 23) + 8 * v40), *(void *)(*(void *)(*(void *)(a2 + 112) + 16) + 8 * v40), v43);
        unint64_t v40 = v41++;
      }
      while (*((void *)v3 + 22) > v40);
    }
  }
  uint64_t v44 = *(void *)(a2 + 120);
  if (v44)
  {
    uint64_t v45 = *(int *)(v44 + 4);
    *((void *)v3 + 24) = v45;
    result = (_DWORD *)palloc(8 * v45);
    *((void *)v3 + 25) = result;
    if (*((void *)v3 + 24))
    {
      unint64_t v46 = 0;
      int v47 = 1;
      do
      {
        uint64_t v48 = palloc(0x28uLL);
        double v49 = pg_query__node__init(v48);
        *(void *)(*((void *)v3 + 25) + 8 * v46) = v48;
        result = (_DWORD *)_outNode_0(*(void *)(*((void *)v3 + 25) + 8 * v46), *(void *)(*(void *)(*(void *)(a2 + 120) + 16) + 8 * v46), v49);
        unint64_t v46 = v47++;
      }
      while (*((void *)v3 + 24) > v46);
    }
  }
  if (*(void *)(a2 + 128))
  {
    uint64_t v50 = palloc(0x28uLL);
    double v51 = pg_query__node__init(v50);
    *((void *)v3 + 26) = v50;
    result = (_DWORD *)_outNode_0(v50, *(void *)(a2 + 128), v51);
  }
  uint64_t v52 = *(void *)(a2 + 136);
  if (v52)
  {
    uint64_t v53 = *(int *)(v52 + 4);
    *((void *)v3 + 27) = v53;
    result = (_DWORD *)palloc(8 * v53);
    *((void *)v3 + 28) = result;
    if (*((void *)v3 + 27))
    {
      unint64_t v54 = 0;
      int v55 = 1;
      do
      {
        uint64_t v56 = palloc(0x28uLL);
        double v57 = pg_query__node__init(v56);
        *(void *)(*((void *)v3 + 28) + 8 * v54) = v56;
        result = (_DWORD *)_outNode_0(*(void *)(*((void *)v3 + 28) + 8 * v54), *(void *)(*(void *)(*(void *)(a2 + 136) + 16) + 8 * v54), v57);
        unint64_t v54 = v55++;
      }
      while (*((void *)v3 + 27) > v54);
    }
  }
  uint64_t v58 = *(void *)(a2 + 144);
  if (v58)
  {
    uint64_t v59 = *(int *)(v58 + 4);
    *((void *)v3 + 29) = v59;
    result = (_DWORD *)palloc(8 * v59);
    *((void *)v3 + 30) = result;
    if (*((void *)v3 + 29))
    {
      unint64_t v60 = 0;
      int v61 = 1;
      do
      {
        uint64_t v62 = palloc(0x28uLL);
        double v63 = pg_query__node__init(v62);
        *(void *)(*((void *)v3 + 30) + 8 * v60) = v62;
        result = (_DWORD *)_outNode_0(*(void *)(*((void *)v3 + 30) + 8 * v60), *(void *)(*(void *)(*(void *)(a2 + 144) + 16) + 8 * v60), v63);
        unint64_t v60 = v61++;
      }
      while (*((void *)v3 + 29) > v60);
    }
  }
  uint64_t v64 = *(void *)(a2 + 152);
  if (v64)
  {
    uint64_t v65 = *(int *)(v64 + 4);
    *((void *)v3 + 31) = v65;
    result = (_DWORD *)palloc(8 * v65);
    *((void *)v3 + 32) = result;
    if (*((void *)v3 + 31))
    {
      unint64_t v66 = 0;
      int v67 = 1;
      do
      {
        uint64_t v68 = palloc(0x28uLL);
        double v69 = pg_query__node__init(v68);
        *(void *)(*((void *)v3 + 32) + 8 * v66) = v68;
        result = (_DWORD *)_outNode_0(*(void *)(*((void *)v3 + 32) + 8 * v66), *(void *)(*(void *)(*(void *)(a2 + 152) + 16) + 8 * v66), v69);
        unint64_t v66 = v67++;
      }
      while (*((void *)v3 + 31) > v66);
    }
  }
  if (*(void *)(a2 + 160))
  {
    uint64_t v70 = palloc(0x28uLL);
    double v71 = pg_query__node__init(v70);
    *((void *)v3 + 33) = v70;
    result = (_DWORD *)_outNode_0(v70, *(void *)(a2 + 160), v71);
  }
  if (*(void *)(a2 + 168))
  {
    uint64_t v72 = palloc(0x28uLL);
    double v73 = pg_query__node__init(v72);
    *((void *)v3 + 34) = v72;
    result = (_DWORD *)_outNode_0(v72, *(void *)(a2 + 168), v73);
  }
  unsigned int v74 = *(_DWORD *)(a2 + 176);
  if (v74 < 3) {
    int v75 = v74 + 1;
  }
  else {
    int v75 = -1;
  }
  v3[70] = v75;
  uint64_t v76 = *(void *)(a2 + 184);
  if (v76)
  {
    uint64_t v77 = *(int *)(v76 + 4);
    *((void *)v3 + 36) = v77;
    result = (_DWORD *)palloc(8 * v77);
    *((void *)v3 + 37) = result;
    if (*((void *)v3 + 36))
    {
      unint64_t v78 = 0;
      int v79 = 1;
      do
      {
        uint64_t v80 = palloc(0x28uLL);
        double v81 = pg_query__node__init(v80);
        *(void *)(*((void *)v3 + 37) + 8 * v78) = v80;
        result = (_DWORD *)_outNode_0(*(void *)(*((void *)v3 + 37) + 8 * v78), *(void *)(*(void *)(*(void *)(a2 + 184) + 16) + 8 * v78), v81);
        unint64_t v78 = v79++;
      }
      while (*((void *)v3 + 36) > v78);
    }
  }
  if (*(void *)(a2 + 192))
  {
    uint64_t v82 = palloc(0x28uLL);
    double v83 = pg_query__node__init(v82);
    *((void *)v3 + 38) = v82;
    result = (_DWORD *)_outNode_0(v82, *(void *)(a2 + 192), v83);
  }
  uint64_t v84 = *(void *)(a2 + 200);
  if (v84)
  {
    uint64_t v85 = *(int *)(v84 + 4);
    *((void *)v3 + 39) = v85;
    result = (_DWORD *)palloc(8 * v85);
    *((void *)v3 + 40) = result;
    if (*((void *)v3 + 39))
    {
      unint64_t v86 = 0;
      int v87 = 1;
      do
      {
        uint64_t v88 = palloc(0x28uLL);
        double v89 = pg_query__node__init(v88);
        *(void *)(*((void *)v3 + 40) + 8 * v86) = v88;
        result = (_DWORD *)_outNode_0(*(void *)(*((void *)v3 + 40) + 8 * v86), *(void *)(*(void *)(*(void *)(a2 + 200) + 16) + 8 * v86), v89);
        unint64_t v86 = v87++;
      }
      while (*((void *)v3 + 39) > v86);
    }
  }
  uint64_t v90 = *(void *)(a2 + 208);
  if (v90)
  {
    uint64_t v91 = *(int *)(v90 + 4);
    *((void *)v3 + 41) = v91;
    result = (_DWORD *)palloc(8 * v91);
    *((void *)v3 + 42) = result;
    if (*((void *)v3 + 41))
    {
      unint64_t v92 = 0;
      int v93 = 1;
      do
      {
        uint64_t v94 = palloc(0x28uLL);
        double v95 = pg_query__node__init(v94);
        *(void *)(*((void *)v3 + 42) + 8 * v92) = v94;
        result = (_DWORD *)_outNode_0(*(void *)(*((void *)v3 + 42) + 8 * v92), *(void *)(*(void *)(*(void *)(a2 + 208) + 16) + 8 * v92), v95);
        unint64_t v92 = v93++;
      }
      while (*((void *)v3 + 41) > v92);
    }
  }
  v3[86] = *(_DWORD *)(a2 + 216);
  v3[87] = *(_DWORD *)(a2 + 220);
  return result;
}

uint64_t _outInsertStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    unsigned int v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    result = (uint64_t)_outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *(void *)(v3 + 24) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(v3 + 32) = v6;
    result = palloc(8 * v6);
    *(void *)(v3 + 40) = result;
    if (*(void *)(v3 + 32))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(v3 + 40) + 8 * v7) = v9;
        result = _outNode_0(*(void *)(*(void *)(v3 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(v3 + 32) > v7);
    }
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v11 = palloc(0x28uLL);
    double v12 = pg_query__node__init(v11);
    *(void *)(v3 + 48) = v11;
    result = _outNode_0(v11, *(void *)(a2 + 24), v12);
  }
  if (*(void *)(a2 + 32))
  {
    uint64_t v13 = palloc(0x48uLL);
    pg_query__on_conflict_clause__init(v13);
    result = _outOnConflictClause_0(v13, *(void *)(a2 + 32));
    *(void *)(v3 + 56) = v13;
  }
  uint64_t v14 = *(void *)(a2 + 40);
  if (v14)
  {
    uint64_t v15 = *(int *)(v14 + 4);
    *(void *)(v3 + 64) = v15;
    result = palloc(8 * v15);
    *(void *)(v3 + 72) = result;
    if (*(void *)(v3 + 64))
    {
      unint64_t v16 = 0;
      int v17 = 1;
      do
      {
        uint64_t v18 = palloc(0x28uLL);
        double v19 = pg_query__node__init(v18);
        *(void *)(*(void *)(v3 + 72) + 8 * v16) = v18;
        result = _outNode_0(*(void *)(*(void *)(v3 + 72) + 8 * v16), *(void *)(*(void *)(*(void *)(a2 + 40) + 16) + 8 * v16), v19);
        unint64_t v16 = v17++;
      }
      while (*(void *)(v3 + 64) > v16);
    }
  }
  if (*(void *)(a2 + 48))
  {
    uint64_t v20 = (_OWORD *)palloc(0x30uLL);
    pg_query__with_clause__init(v20);
    result = _outWithClause_0((uint64_t)v20, *(void *)(a2 + 48));
    *(void *)(v3 + 80) = v20;
  }
  unsigned int v21 = *(_DWORD *)(a2 + 56);
  if (v21 < 3) {
    int v22 = v21 + 1;
  }
  else {
    int v22 = -1;
  }
  *(_DWORD *)(v3 + 88) = v22;
  return result;
}

uint64_t _outDeleteStmt_0(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = (void *)result;
  if (a2[1])
  {
    unsigned int v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    result = (uint64_t)_outRangeVar_0((uint64_t)v4, a2[1]);
    v3[3] = v4;
  }
  uint64_t v5 = a2[2];
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    v3[4] = v6;
    result = palloc(8 * v6);
    v3[5] = result;
    if (v3[4])
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(v3[5] + 8 * v7) = v9;
        result = _outNode_0(*(void *)(v3[5] + 8 * v7), *(void *)(*(void *)(a2[2] + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (v3[4] > v7);
    }
  }
  if (a2[3])
  {
    uint64_t v11 = palloc(0x28uLL);
    double v12 = pg_query__node__init(v11);
    v3[6] = v11;
    result = _outNode_0(v11, a2[3], v12);
  }
  uint64_t v13 = a2[4];
  if (v13)
  {
    uint64_t v14 = *(int *)(v13 + 4);
    v3[7] = v14;
    result = palloc(8 * v14);
    v3[8] = result;
    if (v3[7])
    {
      unint64_t v15 = 0;
      int v16 = 1;
      do
      {
        uint64_t v17 = palloc(0x28uLL);
        double v18 = pg_query__node__init(v17);
        *(void *)(v3[8] + 8 * v15) = v17;
        result = _outNode_0(*(void *)(v3[8] + 8 * v15), *(void *)(*(void *)(a2[4] + 16) + 8 * v15), v18);
        unint64_t v15 = v16++;
      }
      while (v3[7] > v15);
    }
  }
  if (a2[5])
  {
    double v19 = (_OWORD *)palloc(0x30uLL);
    pg_query__with_clause__init(v19);
    result = _outWithClause_0((uint64_t)v19, a2[5]);
    v3[9] = v19;
  }
  return result;
}

uint64_t _outUpdateStmt_0(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = (void *)result;
  if (a2[1])
  {
    unsigned int v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    result = (uint64_t)_outRangeVar_0((uint64_t)v4, a2[1]);
    v3[3] = v4;
  }
  uint64_t v5 = a2[2];
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    v3[4] = v6;
    result = palloc(8 * v6);
    v3[5] = result;
    if (v3[4])
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(v3[5] + 8 * v7) = v9;
        result = _outNode_0(*(void *)(v3[5] + 8 * v7), *(void *)(*(void *)(a2[2] + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (v3[4] > v7);
    }
  }
  if (a2[3])
  {
    uint64_t v11 = palloc(0x28uLL);
    double v12 = pg_query__node__init(v11);
    v3[6] = v11;
    result = _outNode_0(v11, a2[3], v12);
  }
  uint64_t v13 = a2[4];
  if (v13)
  {
    uint64_t v14 = *(int *)(v13 + 4);
    v3[7] = v14;
    result = palloc(8 * v14);
    v3[8] = result;
    if (v3[7])
    {
      unint64_t v15 = 0;
      int v16 = 1;
      do
      {
        uint64_t v17 = palloc(0x28uLL);
        double v18 = pg_query__node__init(v17);
        *(void *)(v3[8] + 8 * v15) = v17;
        result = _outNode_0(*(void *)(v3[8] + 8 * v15), *(void *)(*(void *)(a2[4] + 16) + 8 * v15), v18);
        unint64_t v15 = v16++;
      }
      while (v3[7] > v15);
    }
  }
  uint64_t v19 = a2[5];
  if (v19)
  {
    uint64_t v20 = *(int *)(v19 + 4);
    v3[9] = v20;
    result = palloc(8 * v20);
    v3[10] = result;
    if (v3[9])
    {
      unint64_t v21 = 0;
      int v22 = 1;
      do
      {
        uint64_t v23 = palloc(0x28uLL);
        double v24 = pg_query__node__init(v23);
        *(void *)(v3[10] + 8 * v21) = v23;
        result = _outNode_0(*(void *)(v3[10] + 8 * v21), *(void *)(*(void *)(a2[5] + 16) + 8 * v21), v24);
        unint64_t v21 = v22++;
      }
      while (v3[9] > v21);
    }
  }
  if (a2[6])
  {
    unint64_t v25 = (_OWORD *)palloc(0x30uLL);
    pg_query__with_clause__init(v25);
    result = _outWithClause_0((uint64_t)v25, a2[6]);
    v3[11] = v25;
  }
  return result;
}

uint64_t _outSelectStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    *(void *)(v3 + 32) = result;
    if (*(void *)(v3 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v3 + 32) + 8 * v6) = v8;
        result = _outNode_0(*(void *)(*(void *)(v3 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v3 + 24) > v6);
    }
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v10 = palloc(0x68uLL);
    pg_query__into_clause__init(v10);
    result = (uint64_t)_outIntoClause_0(v10, *(void *)(a2 + 16));
    *(void *)(v3 + 40) = v10;
  }
  uint64_t v11 = *(void *)(a2 + 24);
  if (v11)
  {
    uint64_t v12 = *(int *)(v11 + 4);
    *(void *)(v3 + 48) = v12;
    result = palloc(8 * v12);
    *(void *)(v3 + 56) = result;
    if (*(void *)(v3 + 48))
    {
      unint64_t v13 = 0;
      int v14 = 1;
      do
      {
        uint64_t v15 = palloc(0x28uLL);
        double v16 = pg_query__node__init(v15);
        *(void *)(*(void *)(v3 + 56) + 8 * v13) = v15;
        result = _outNode_0(*(void *)(*(void *)(v3 + 56) + 8 * v13), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v13), v16);
        unint64_t v13 = v14++;
      }
      while (*(void *)(v3 + 48) > v13);
    }
  }
  uint64_t v17 = *(void *)(a2 + 32);
  if (v17)
  {
    uint64_t v18 = *(int *)(v17 + 4);
    *(void *)(v3 + 64) = v18;
    result = palloc(8 * v18);
    *(void *)(v3 + 72) = result;
    if (*(void *)(v3 + 64))
    {
      unint64_t v19 = 0;
      int v20 = 1;
      do
      {
        uint64_t v21 = palloc(0x28uLL);
        double v22 = pg_query__node__init(v21);
        *(void *)(*(void *)(v3 + 72) + 8 * v19) = v21;
        result = _outNode_0(*(void *)(*(void *)(v3 + 72) + 8 * v19), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v19), v22);
        unint64_t v19 = v20++;
      }
      while (*(void *)(v3 + 64) > v19);
    }
  }
  if (*(void *)(a2 + 40))
  {
    uint64_t v23 = palloc(0x28uLL);
    double v24 = pg_query__node__init(v23);
    *(void *)(v3 + 80) = v23;
    result = _outNode_0(v23, *(void *)(a2 + 40), v24);
  }
  uint64_t v25 = *(void *)(a2 + 48);
  if (v25)
  {
    uint64_t v26 = *(int *)(v25 + 4);
    *(void *)(v3 + 88) = v26;
    result = palloc(8 * v26);
    *(void *)(v3 + 96) = result;
    if (*(void *)(v3 + 88))
    {
      unint64_t v27 = 0;
      int v28 = 1;
      do
      {
        uint64_t v29 = palloc(0x28uLL);
        double v30 = pg_query__node__init(v29);
        *(void *)(*(void *)(v3 + 96) + 8 * v27) = v29;
        result = _outNode_0(*(void *)(*(void *)(v3 + 96) + 8 * v27), *(void *)(*(void *)(*(void *)(a2 + 48) + 16) + 8 * v27), v30);
        unint64_t v27 = v28++;
      }
      while (*(void *)(v3 + 88) > v27);
    }
  }
  if (*(void *)(a2 + 56))
  {
    uint64_t v31 = palloc(0x28uLL);
    double v32 = pg_query__node__init(v31);
    *(void *)(v3 + 104) = v31;
    result = _outNode_0(v31, *(void *)(a2 + 56), v32);
  }
  uint64_t v33 = *(void *)(a2 + 64);
  if (v33)
  {
    uint64_t v34 = *(int *)(v33 + 4);
    *(void *)(v3 + 112) = v34;
    result = palloc(8 * v34);
    *(void *)(v3 + 120) = result;
    if (*(void *)(v3 + 112))
    {
      unint64_t v35 = 0;
      int v36 = 1;
      do
      {
        uint64_t v37 = palloc(0x28uLL);
        double v38 = pg_query__node__init(v37);
        *(void *)(*(void *)(v3 + 120) + 8 * v35) = v37;
        result = _outNode_0(*(void *)(*(void *)(v3 + 120) + 8 * v35), *(void *)(*(void *)(*(void *)(a2 + 64) + 16) + 8 * v35), v38);
        unint64_t v35 = v36++;
      }
      while (*(void *)(v3 + 112) > v35);
    }
  }
  uint64_t v39 = *(void *)(a2 + 72);
  if (v39)
  {
    uint64_t v40 = *(int *)(v39 + 4);
    *(void *)(v3 + 128) = v40;
    result = palloc(8 * v40);
    *(void *)(v3 + 136) = result;
    if (*(void *)(v3 + 128))
    {
      unint64_t v41 = 0;
      int v42 = 1;
      do
      {
        uint64_t v43 = palloc(0x28uLL);
        double v44 = pg_query__node__init(v43);
        *(void *)(*(void *)(v3 + 136) + 8 * v41) = v43;
        result = _outNode_0(*(void *)(*(void *)(v3 + 136) + 8 * v41), *(void *)(*(void *)(*(void *)(a2 + 72) + 16) + 8 * v41), v44);
        unint64_t v41 = v42++;
      }
      while (*(void *)(v3 + 128) > v41);
    }
  }
  uint64_t v45 = *(void *)(a2 + 80);
  if (v45)
  {
    uint64_t v46 = *(int *)(v45 + 4);
    *(void *)(v3 + 144) = v46;
    result = palloc(8 * v46);
    *(void *)(v3 + 152) = result;
    if (*(void *)(v3 + 144))
    {
      unint64_t v47 = 0;
      int v48 = 1;
      do
      {
        uint64_t v49 = palloc(0x28uLL);
        double v50 = pg_query__node__init(v49);
        *(void *)(*(void *)(v3 + 152) + 8 * v47) = v49;
        result = _outNode_0(*(void *)(*(void *)(v3 + 152) + 8 * v47), *(void *)(*(void *)(*(void *)(a2 + 80) + 16) + 8 * v47), v50);
        unint64_t v47 = v48++;
      }
      while (*(void *)(v3 + 144) > v47);
    }
  }
  if (*(void *)(a2 + 88))
  {
    uint64_t v51 = palloc(0x28uLL);
    double v52 = pg_query__node__init(v51);
    *(void *)(v3 + 160) = v51;
    result = _outNode_0(v51, *(void *)(a2 + 88), v52);
  }
  if (*(void *)(a2 + 96))
  {
    uint64_t v53 = palloc(0x28uLL);
    double v54 = pg_query__node__init(v53);
    *(void *)(v3 + 168) = v53;
    result = _outNode_0(v53, *(void *)(a2 + 96), v54);
  }
  unsigned int v55 = *(_DWORD *)(a2 + 104);
  if (v55 < 3) {
    int v56 = v55 + 1;
  }
  else {
    int v56 = -1;
  }
  *(_DWORD *)(v3 + 176) = v56;
  uint64_t v57 = *(void *)(a2 + 112);
  if (v57)
  {
    uint64_t v58 = *(int *)(v57 + 4);
    *(void *)(v3 + 184) = v58;
    result = palloc(8 * v58);
    *(void *)(v3 + 192) = result;
    if (*(void *)(v3 + 184))
    {
      unint64_t v59 = 0;
      int v60 = 1;
      do
      {
        uint64_t v61 = palloc(0x28uLL);
        double v62 = pg_query__node__init(v61);
        *(void *)(*(void *)(v3 + 192) + 8 * v59) = v61;
        result = _outNode_0(*(void *)(*(void *)(v3 + 192) + 8 * v59), *(void *)(*(void *)(*(void *)(a2 + 112) + 16) + 8 * v59), v62);
        unint64_t v59 = v60++;
      }
      while (*(void *)(v3 + 184) > v59);
    }
  }
  if (*(void *)(a2 + 120))
  {
    double v63 = (_OWORD *)palloc(0x30uLL);
    pg_query__with_clause__init(v63);
    result = _outWithClause_0((uint64_t)v63, *(void *)(a2 + 120));
    *(void *)(v3 + 200) = v63;
  }
  unsigned int v64 = *(_DWORD *)(a2 + 128);
  if (v64 < 4) {
    int v65 = v64 + 1;
  }
  else {
    int v65 = -1;
  }
  *(_DWORD *)(v3 + 208) = v65;
  *(_DWORD *)(v3 + 212) = *(unsigned __int8 *)(a2 + 132);
  if (*(void *)(a2 + 136))
  {
    uint64_t v66 = palloc(0xE8uLL);
    double select_stmt__init = pg_query__select_stmt__init(v66);
    result = _outSelectStmt_0(v66, *(void *)(a2 + 136), select_stmt__init);
    *(void *)(v3 + 216) = v66;
  }
  if (*(void *)(a2 + 144))
  {
    uint64_t v68 = palloc(0xE8uLL);
    double v69 = pg_query__select_stmt__init(v68);
    result = _outSelectStmt_0(v68, *(void *)(a2 + 144), v69);
    *(void *)(v3 + 224) = v68;
  }
  return result;
}

uint64_t _outAlterTableStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    result = (uint64_t)_outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *(void *)(v3 + 24) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(v3 + 32) = v6;
    result = palloc(8 * v6);
    *(void *)(v3 + 40) = result;
    if (*(void *)(v3 + 32))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(v3 + 40) + 8 * v7) = v9;
        result = _outNode_0(*(void *)(*(void *)(v3 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(v3 + 32) > v7);
    }
  }
  unsigned int v11 = *(_DWORD *)(a2 + 24);
  if (v11 < 0x32) {
    int v12 = v11 + 1;
  }
  else {
    int v12 = -1;
  }
  *(_DWORD *)(v3 + 48) = v12;
  *(_DWORD *)(v3 + 52) = *(unsigned __int8 *)(a2 + 28);
  return result;
}

const char *_outAlterTableCmd_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0x43) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  *(_DWORD *)(a1 + 40) = *(__int16 *)(a2 + 16);
  if (*(void *)(a2 + 24))
  {
    uint64_t v7 = palloc(0x30uLL);
    pg_query__role_spec__init((_OWORD *)v7);
    uint64_t v8 = *(void *)(a2 + 24);
    unsigned int v9 = *(_DWORD *)(v8 + 4);
    if (v9 < 4) {
      int v10 = v9 + 1;
    }
    else {
      int v10 = -1;
    }
    *(_DWORD *)(v7 + 24) = v10;
    result = *(const char **)(v8 + 8);
    if (result)
    {
      result = (const char *)pstrdup(result);
      *(void *)(v7 + 32) = result;
    }
    *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 16);
    *(void *)(a1 + 48) = v7;
  }
  if (*(void *)(a2 + 32))
  {
    uint64_t v11 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v11);
    *(void *)(a1 + 56) = v11;
    result = (const char *)_outNode_0(v11, *(void *)(a2 + 32), node__init);
  }
  int v13 = *(_DWORD *)(a2 + 40);
  if (v13 == 1) {
    int v14 = 2;
  }
  else {
    int v14 = -1;
  }
  if (v13) {
    int v15 = v14;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(a1 + 64) = v15;
  *(_DWORD *)(a1 + 68) = *(unsigned __int8 *)(a2 + 44);
  return result;
}

const char *_outAlterDomainStmt_0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 4))
  {
    unsigned int v4 = (unsigned char *)palloc(2uLL);
    *(void *)(a1 + 24) = v4;
    *unsigned int v4 = *(unsigned char *)(a2 + 4);
    *(unsigned char *)(*(void *)(a1 + 24) + 1) = 0;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = palloc(8 * v6);
    if (*(void *)(a1 + 32))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(a1 + 40) + 8 * v7) = v9;
        _outNode_0(*(void *)(*(void *)(a1 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(a1 + 32) > v7);
    }
  }
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 48) = result;
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v12 = palloc(0x28uLL);
    double v13 = pg_query__node__init(v12);
    *(void *)(a1 + 56) = v12;
    result = (const char *)_outNode_0(v12, *(void *)(a2 + 24), v13);
  }
  int v14 = *(_DWORD *)(a2 + 32);
  if (v14 == 1) {
    int v15 = 2;
  }
  else {
    int v15 = -1;
  }
  if (v14) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  *(_DWORD *)(a1 + 64) = v16;
  *(_DWORD *)(a1 + 68) = *(unsigned __int8 *)(a2 + 36);
  return result;
}

uint64_t _outSetOperationStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 4) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(result + 24) = v5;
  *(_DWORD *)(result + 28) = *(unsigned __int8 *)(a2 + 8);
  if (*(void *)(a2 + 16))
  {
    uint64_t v6 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v6);
    v3[4] = v6;
    result = _outNode_0(v6, *(void *)(a2 + 16), node__init);
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v8 = palloc(0x28uLL);
    double v9 = pg_query__node__init(v8);
    v3[5] = v8;
    result = _outNode_0(v8, *(void *)(a2 + 24), v9);
  }
  uint64_t v10 = *(void *)(a2 + 32);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    v3[6] = v11;
    result = palloc(8 * v11);
    v3[7] = result;
    if (v3[6])
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double v15 = pg_query__node__init(v14);
        *(void *)(v3[7] + 8 * v12) = v14;
        result = _outNode_0(*(void *)(v3[7] + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v12), v15);
        unint64_t v12 = v13++;
      }
      while (v3[6] > v12);
    }
  }
  uint64_t v16 = *(void *)(a2 + 40);
  if (v16)
  {
    uint64_t v17 = *(int *)(v16 + 4);
    v3[8] = v17;
    result = palloc(8 * v17);
    v3[9] = result;
    if (v3[8])
    {
      unint64_t v18 = 0;
      int v19 = 1;
      do
      {
        uint64_t v20 = palloc(0x28uLL);
        double v21 = pg_query__node__init(v20);
        *(void *)(v3[9] + 8 * v18) = v20;
        result = _outNode_0(*(void *)(v3[9] + 8 * v18), *(void *)(*(void *)(*(void *)(a2 + 40) + 16) + 8 * v18), v21);
        unint64_t v18 = v19++;
      }
      while (v3[8] > v18);
    }
  }
  uint64_t v22 = *(void *)(a2 + 48);
  if (v22)
  {
    uint64_t v23 = *(int *)(v22 + 4);
    v3[10] = v23;
    result = palloc(8 * v23);
    v3[11] = result;
    if (v3[10])
    {
      unint64_t v24 = 0;
      int v25 = 1;
      do
      {
        uint64_t v26 = palloc(0x28uLL);
        double v27 = pg_query__node__init(v26);
        *(void *)(v3[11] + 8 * v24) = v26;
        result = _outNode_0(*(void *)(v3[11] + 8 * v24), *(void *)(*(void *)(*(void *)(a2 + 48) + 16) + 8 * v24), v27);
        unint64_t v24 = v25++;
      }
      while (v3[10] > v24);
    }
  }
  uint64_t v28 = *(void *)(a2 + 56);
  if (v28)
  {
    uint64_t v29 = *(int *)(v28 + 4);
    v3[12] = v29;
    result = palloc(8 * v29);
    v3[13] = result;
    if (v3[12])
    {
      unint64_t v30 = 0;
      int v31 = 1;
      do
      {
        uint64_t v32 = palloc(0x28uLL);
        double v33 = pg_query__node__init(v32);
        *(void *)(v3[13] + 8 * v30) = v32;
        result = _outNode_0(*(void *)(v3[13] + 8 * v30), *(void *)(*(void *)(*(void *)(a2 + 56) + 16) + 8 * v30), v33);
        unint64_t v30 = v31++;
      }
      while (v3[12] > v30);
    }
  }
  return result;
}

uint64_t _outGrantStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  *(_DWORD *)(result + 24) = *(unsigned __int8 *)(a2 + 4);
  unsigned int v4 = *(_DWORD *)(a2 + 8);
  if (v4 < 3) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(result + 28) = v5;
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  if (v6 < 0x32) {
    int v7 = v6 + 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(result + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = *(int *)(v8 + 4);
    *(void *)(result + 40) = v9;
    result = palloc(8 * v9);
    *(void *)(v3 + 48) = result;
    if (*(void *)(v3 + 40))
    {
      unint64_t v10 = 0;
      int v11 = 1;
      do
      {
        uint64_t v12 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v12);
        *(void *)(*(void *)(v3 + 48) + 8 * v10) = v12;
        result = _outNode_0(*(void *)(*(void *)(v3 + 48) + 8 * v10), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v10), node__init);
        unint64_t v10 = v11++;
      }
      while (*(void *)(v3 + 40) > v10);
    }
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (v14)
  {
    uint64_t v15 = *(int *)(v14 + 4);
    *(void *)(v3 + 56) = v15;
    result = palloc(8 * v15);
    *(void *)(v3 + 64) = result;
    if (*(void *)(v3 + 56))
    {
      unint64_t v16 = 0;
      int v17 = 1;
      do
      {
        uint64_t v18 = palloc(0x28uLL);
        double v19 = pg_query__node__init(v18);
        *(void *)(*(void *)(v3 + 64) + 8 * v16) = v18;
        result = _outNode_0(*(void *)(*(void *)(v3 + 64) + 8 * v16), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v16), v19);
        unint64_t v16 = v17++;
      }
      while (*(void *)(v3 + 56) > v16);
    }
  }
  uint64_t v20 = *(void *)(a2 + 32);
  if (v20)
  {
    uint64_t v21 = *(int *)(v20 + 4);
    *(void *)(v3 + 72) = v21;
    result = palloc(8 * v21);
    *(void *)(v3 + 80) = result;
    if (*(void *)(v3 + 72))
    {
      unint64_t v22 = 0;
      int v23 = 1;
      do
      {
        uint64_t v24 = palloc(0x28uLL);
        double v25 = pg_query__node__init(v24);
        *(void *)(*(void *)(v3 + 80) + 8 * v22) = v24;
        result = _outNode_0(*(void *)(*(void *)(v3 + 80) + 8 * v22), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v22), v25);
        unint64_t v22 = v23++;
      }
      while (*(void *)(v3 + 72) > v22);
    }
  }
  *(_DWORD *)(v3 + 88) = *(unsigned __int8 *)(a2 + 40);
  int v26 = *(_DWORD *)(a2 + 44);
  if (v26 == 1) {
    int v27 = 2;
  }
  else {
    int v27 = -1;
  }
  if (v26) {
    int v28 = v27;
  }
  else {
    int v28 = 1;
  }
  *(_DWORD *)(v3 + 92) = v28;
  return result;
}

uint64_t _outGrantRoleStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    *(void *)(v3 + 32) = result;
    if (*(void *)(v3 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v3 + 32) + 8 * v6) = v8;
        result = _outNode_0(*(void *)(*(void *)(v3 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v3 + 24) > v6);
    }
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    *(void *)(v3 + 40) = v11;
    result = palloc(8 * v11);
    *(void *)(v3 + 48) = result;
    if (*(void *)(v3 + 40))
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double v15 = pg_query__node__init(v14);
        *(void *)(*(void *)(v3 + 48) + 8 * v12) = v14;
        result = _outNode_0(*(void *)(*(void *)(v3 + 48) + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v12), v15);
        unint64_t v12 = v13++;
      }
      while (*(void *)(v3 + 40) > v12);
    }
  }
  *(_DWORD *)(v3 + 56) = *(unsigned __int8 *)(a2 + 24);
  *(_DWORD *)(v3 + 60) = *(unsigned __int8 *)(a2 + 25);
  if (*(void *)(a2 + 32))
  {
    uint64_t v16 = palloc(0x30uLL);
    pg_query__role_spec__init((_OWORD *)v16);
    uint64_t v17 = *(void *)(a2 + 32);
    unsigned int v18 = *(_DWORD *)(v17 + 4);
    if (v18 < 4) {
      int v19 = v18 + 1;
    }
    else {
      int v19 = -1;
    }
    *(_DWORD *)(v16 + 24) = v19;
    result = *(void *)(v17 + 8);
    if (result)
    {
      result = (uint64_t)pstrdup((const char *)result);
      *(void *)(v16 + 32) = result;
    }
    *(_DWORD *)(v16 + 40) = *(_DWORD *)(v17 + 16);
    *(void *)(v3 + 64) = v16;
  }
  int v20 = *(_DWORD *)(a2 + 40);
  if (v20 == 1) {
    int v21 = 2;
  }
  else {
    int v21 = -1;
  }
  if (v20) {
    int v22 = v21;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v3 + 72) = v22;
  return result;
}

uint64_t _outAlterDefaultPrivilegesStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    v3[4] = result;
    if (v3[3])
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(v3[4] + 8 * v6) = v8;
        result = _outNode_0(*(void *)(v3[4] + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (v3[3] > v6);
    }
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v10 = (_OWORD *)palloc(0x60uLL);
    pg_query__grant_stmt__init(v10);
    result = _outGrantStmt_0((uint64_t)v10, *(void *)(a2 + 16));
    v3[5] = v10;
  }
  return result;
}

const char *_outClusterStmt_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    _outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *(void *)(a1 + 24) = v4;
  }
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 24);
  return result;
}

const char *_outCopyStmt_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    _outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *(void *)(a1 + 24) = v4;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v5 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v5);
    *(void *)(a1 + 32) = v5;
    _outNode_0(v5, *(void *)(a2 + 16), node__init);
  }
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    uint64_t v8 = *(int *)(v7 + 4);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = palloc(8 * v8);
    if (*(void *)(a1 + 40))
    {
      unint64_t v9 = 0;
      int v10 = 1;
      do
      {
        uint64_t v11 = palloc(0x28uLL);
        double v12 = pg_query__node__init(v11);
        *(void *)(*(void *)(a1 + 48) + 8 * v9) = v11;
        _outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v9), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v9), v12);
        unint64_t v9 = v10++;
      }
      while (*(void *)(a1 + 40) > v9);
    }
  }
  *(_DWORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 32);
  *(_DWORD *)(a1 + 60) = *(unsigned __int8 *)(a2 + 33);
  result = *(const char **)(a2 + 40);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 64) = result;
  }
  uint64_t v14 = *(void *)(a2 + 48);
  if (v14)
  {
    uint64_t v15 = *(int *)(v14 + 4);
    *(void *)(a1 + 72) = v15;
    result = (const char *)palloc(8 * v15);
    *(void *)(a1 + 80) = result;
    if (*(void *)(a1 + 72))
    {
      unint64_t v16 = 0;
      int v17 = 1;
      do
      {
        uint64_t v18 = palloc(0x28uLL);
        double v19 = pg_query__node__init(v18);
        *(void *)(*(void *)(a1 + 80) + 8 * v16) = v18;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 80) + 8 * v16), *(void *)(*(void *)(*(void *)(a2 + 48) + 16) + 8 * v16), v19);
        unint64_t v16 = v17++;
      }
      while (*(void *)(a1 + 72) > v16);
    }
  }
  if (*(void *)(a2 + 56))
  {
    uint64_t v20 = palloc(0x28uLL);
    double v21 = pg_query__node__init(v20);
    *(void *)(a1 + 88) = v20;
    uint64_t v22 = *(void *)(a2 + 56);
    return (const char *)_outNode_0(v20, v22, v21);
  }
  return result;
}

const char *_outCreateStmt_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    _outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *(void *)(a1 + 24) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = palloc(8 * v6);
    if (*(void *)(a1 + 32))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(a1 + 40) + 8 * v7) = v9;
        _outNode_0(*(void *)(*(void *)(a1 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(a1 + 32) > v7);
    }
  }
  uint64_t v11 = *(void *)(a2 + 24);
  if (v11)
  {
    uint64_t v12 = *(int *)(v11 + 4);
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = palloc(8 * v12);
    if (*(void *)(a1 + 48))
    {
      unint64_t v13 = 0;
      int v14 = 1;
      do
      {
        uint64_t v15 = palloc(0x28uLL);
        double v16 = pg_query__node__init(v15);
        *(void *)(*(void *)(a1 + 56) + 8 * v13) = v15;
        _outNode_0(*(void *)(*(void *)(a1 + 56) + 8 * v13), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v13), v16);
        unint64_t v13 = v14++;
      }
      while (*(void *)(a1 + 48) > v13);
    }
  }
  if (*(void *)(a2 + 32))
  {
    int v17 = (unsigned char *)palloc(0x68uLL);
    pg_query__partition_bound_spec__init((uint64_t)v17);
    _outPartitionBoundSpec_0(v17, *(void *)(a2 + 32));
    *(void *)(a1 + 64) = v17;
  }
  if (*(void *)(a2 + 40))
  {
    uint64_t v18 = palloc(0x38uLL);
    pg_query__partition_spec__init(v18);
    _outPartitionSpec_0(v18, *(void *)(a2 + 40));
    *(void *)(a1 + 72) = v18;
  }
  if (*(void *)(a2 + 48))
  {
    uint64_t v19 = palloc(0x68uLL);
    pg_query__type_name__init(v19);
    _outTypeName_0(v19, *(void *)(a2 + 48));
    *(void *)(a1 + 80) = v19;
  }
  uint64_t v20 = *(void *)(a2 + 56);
  if (v20)
  {
    uint64_t v21 = *(int *)(v20 + 4);
    *(void *)(a1 + 88) = v21;
    *(void *)(a1 + 96) = palloc(8 * v21);
    if (*(void *)(a1 + 88))
    {
      unint64_t v22 = 0;
      int v23 = 1;
      do
      {
        uint64_t v24 = palloc(0x28uLL);
        double v25 = pg_query__node__init(v24);
        *(void *)(*(void *)(a1 + 96) + 8 * v22) = v24;
        _outNode_0(*(void *)(*(void *)(a1 + 96) + 8 * v22), *(void *)(*(void *)(*(void *)(a2 + 56) + 16) + 8 * v22), v25);
        unint64_t v22 = v23++;
      }
      while (*(void *)(a1 + 88) > v22);
    }
  }
  uint64_t v26 = *(void *)(a2 + 64);
  if (v26)
  {
    uint64_t v27 = *(int *)(v26 + 4);
    *(void *)(a1 + 104) = v27;
    *(void *)(a1 + 112) = palloc(8 * v27);
    if (*(void *)(a1 + 104))
    {
      unint64_t v28 = 0;
      int v29 = 1;
      do
      {
        uint64_t v30 = palloc(0x28uLL);
        double v31 = pg_query__node__init(v30);
        *(void *)(*(void *)(a1 + 112) + 8 * v28) = v30;
        _outNode_0(*(void *)(*(void *)(a1 + 112) + 8 * v28), *(void *)(*(void *)(*(void *)(a2 + 64) + 16) + 8 * v28), v31);
        unint64_t v28 = v29++;
      }
      while (*(void *)(a1 + 104) > v28);
    }
  }
  unsigned int v32 = *(_DWORD *)(a2 + 72);
  if (v32 < 4) {
    int v33 = v32 + 1;
  }
  else {
    int v33 = -1;
  }
  *(_DWORD *)(a1 + 120) = v33;
  uint64_t v34 = *(const char **)(a2 + 80);
  if (v34) {
    *(void *)(a1 + 128) = pstrdup(v34);
  }
  result = *(const char **)(a2 + 88);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 136) = result;
  }
  *(_DWORD *)(a1 + 144) = *(unsigned __int8 *)(a2 + 96);
  return result;
}

uint64_t _outDefineStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0x32) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(result + 24) = v5;
  *(_DWORD *)(result + 28) = *(unsigned __int8 *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    *(void *)(result + 32) = v7;
    result = palloc(8 * v7);
    *(void *)(v3 + 40) = result;
    if (*(void *)(v3 + 32))
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v10);
        *(void *)(*(void *)(v3 + 40) + 8 * v8) = v10;
        result = _outNode_0(*(void *)(*(void *)(v3 + 40) + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v8), node__init);
        unint64_t v8 = v9++;
      }
      while (*(void *)(v3 + 32) > v8);
    }
  }
  uint64_t v12 = *(void *)(a2 + 24);
  if (v12)
  {
    uint64_t v13 = *(int *)(v12 + 4);
    *(void *)(v3 + 48) = v13;
    result = palloc(8 * v13);
    *(void *)(v3 + 56) = result;
    if (*(void *)(v3 + 48))
    {
      unint64_t v14 = 0;
      int v15 = 1;
      do
      {
        uint64_t v16 = palloc(0x28uLL);
        double v17 = pg_query__node__init(v16);
        *(void *)(*(void *)(v3 + 56) + 8 * v14) = v16;
        result = _outNode_0(*(void *)(*(void *)(v3 + 56) + 8 * v14), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v14), v17);
        unint64_t v14 = v15++;
      }
      while (*(void *)(v3 + 48) > v14);
    }
  }
  uint64_t v18 = *(void *)(a2 + 32);
  if (v18)
  {
    uint64_t v19 = *(int *)(v18 + 4);
    *(void *)(v3 + 64) = v19;
    result = palloc(8 * v19);
    *(void *)(v3 + 72) = result;
    if (*(void *)(v3 + 64))
    {
      unint64_t v20 = 0;
      int v21 = 1;
      do
      {
        uint64_t v22 = palloc(0x28uLL);
        double v23 = pg_query__node__init(v22);
        *(void *)(*(void *)(v3 + 72) + 8 * v20) = v22;
        result = _outNode_0(*(void *)(*(void *)(v3 + 72) + 8 * v20), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v20), v23);
        unint64_t v20 = v21++;
      }
      while (*(void *)(v3 + 64) > v20);
    }
  }
  *(_DWORD *)(v3 + 80) = *(unsigned __int8 *)(a2 + 40);
  *(_DWORD *)(v3 + 84) = *(unsigned __int8 *)(a2 + 41);
  return result;
}

uint64_t _outDropStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    *(void *)(v3 + 32) = result;
    if (*(void *)(v3 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v3 + 32) + 8 * v6) = v8;
        result = _outNode_0(*(void *)(*(void *)(v3 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v3 + 24) > v6);
    }
  }
  unsigned int v10 = *(_DWORD *)(a2 + 16);
  if (v10 < 0x32) {
    int v11 = v10 + 1;
  }
  else {
    int v11 = -1;
  }
  *(_DWORD *)(v3 + 40) = v11;
  int v12 = *(_DWORD *)(a2 + 20);
  if (v12 == 1) {
    int v13 = 2;
  }
  else {
    int v13 = -1;
  }
  if (v12) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  *(_DWORD *)(v3 + 44) = v14;
  *(_DWORD *)(v3 + 48) = *(unsigned __int8 *)(a2 + 24);
  *(_DWORD *)(v3 + 52) = *(unsigned __int8 *)(a2 + 25);
  return result;
}

uint64_t _outTruncateStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    *(void *)(v3 + 32) = result;
    if (*(void *)(v3 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v3 + 32) + 8 * v6) = v8;
        result = _outNode_0(*(void *)(*(void *)(v3 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v3 + 24) > v6);
    }
  }
  *(_DWORD *)(v3 + 40) = *(unsigned __int8 *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 20);
  if (v10 == 1) {
    int v11 = 2;
  }
  else {
    int v11 = -1;
  }
  if (v10) {
    int v12 = v11;
  }
  else {
    int v12 = 1;
  }
  *(_DWORD *)(v3 + 44) = v12;
  return result;
}

const char *_outCommentStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0x32) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  if (*(void *)(a2 + 8))
  {
    uint64_t v6 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v6);
    *(void *)(a1 + 32) = v6;
    _outNode_0(v6, *(void *)(a2 + 8), node__init);
  }
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 40) = result;
  }
  return result;
}

const char *_outFetchStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 4) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 8);
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 40) = result;
  }
  *(_DWORD *)(a1 + 48) = *(unsigned __int8 *)(a2 + 24);
  return result;
}

const char *_outIndexStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(const char **)(a2 + 8);
  if (v4) {
    *(void *)(a1 + 24) = pstrdup(v4);
  }
  if (*(void *)(a2 + 16))
  {
    int v5 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v5);
    _outRangeVar_0((uint64_t)v5, *(void *)(a2 + 16));
    *(void *)(a1 + 32) = v5;
  }
  uint64_t v6 = *(const char **)(a2 + 24);
  if (v6) {
    *(void *)(a1 + 40) = pstrdup(v6);
  }
  int v7 = *(const char **)(a2 + 32);
  if (v7) {
    *(void *)(a1 + 48) = pstrdup(v7);
  }
  uint64_t v8 = *(void *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = *(int *)(v8 + 4);
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = palloc(8 * v9);
    if (*(void *)(a1 + 56))
    {
      unint64_t v10 = 0;
      int v11 = 1;
      do
      {
        uint64_t v12 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v12);
        *(void *)(*(void *)(a1 + 64) + 8 * v10) = v12;
        _outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v10), *(void *)(*(void *)(*(void *)(a2 + 40) + 16) + 8 * v10), node__init);
        unint64_t v10 = v11++;
      }
      while (*(void *)(a1 + 56) > v10);
    }
  }
  uint64_t v14 = *(void *)(a2 + 48);
  if (v14)
  {
    uint64_t v15 = *(int *)(v14 + 4);
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = palloc(8 * v15);
    if (*(void *)(a1 + 72))
    {
      unint64_t v16 = 0;
      int v17 = 1;
      do
      {
        uint64_t v18 = palloc(0x28uLL);
        double v19 = pg_query__node__init(v18);
        *(void *)(*(void *)(a1 + 80) + 8 * v16) = v18;
        _outNode_0(*(void *)(*(void *)(a1 + 80) + 8 * v16), *(void *)(*(void *)(*(void *)(a2 + 48) + 16) + 8 * v16), v19);
        unint64_t v16 = v17++;
      }
      while (*(void *)(a1 + 72) > v16);
    }
  }
  uint64_t v20 = *(void *)(a2 + 56);
  if (v20)
  {
    uint64_t v21 = *(int *)(v20 + 4);
    *(void *)(a1 + 88) = v21;
    *(void *)(a1 + 96) = palloc(8 * v21);
    if (*(void *)(a1 + 88))
    {
      unint64_t v22 = 0;
      int v23 = 1;
      do
      {
        uint64_t v24 = palloc(0x28uLL);
        double v25 = pg_query__node__init(v24);
        *(void *)(*(void *)(a1 + 96) + 8 * v22) = v24;
        _outNode_0(*(void *)(*(void *)(a1 + 96) + 8 * v22), *(void *)(*(void *)(*(void *)(a2 + 56) + 16) + 8 * v22), v25);
        unint64_t v22 = v23++;
      }
      while (*(void *)(a1 + 88) > v22);
    }
  }
  if (*(void *)(a2 + 64))
  {
    uint64_t v26 = palloc(0x28uLL);
    double v27 = pg_query__node__init(v26);
    *(void *)(a1 + 104) = v26;
    _outNode_0(v26, *(void *)(a2 + 64), v27);
  }
  uint64_t v28 = *(void *)(a2 + 72);
  if (v28)
  {
    uint64_t v29 = *(int *)(v28 + 4);
    *(void *)(a1 + 112) = v29;
    *(void *)(a1 + 120) = palloc(8 * v29);
    if (*(void *)(a1 + 112))
    {
      unint64_t v30 = 0;
      int v31 = 1;
      do
      {
        uint64_t v32 = palloc(0x28uLL);
        double v33 = pg_query__node__init(v32);
        *(void *)(*(void *)(a1 + 120) + 8 * v30) = v32;
        _outNode_0(*(void *)(*(void *)(a1 + 120) + 8 * v30), *(void *)(*(void *)(*(void *)(a2 + 72) + 16) + 8 * v30), v33);
        unint64_t v30 = v31++;
      }
      while (*(void *)(a1 + 112) > v30);
    }
  }
  result = *(const char **)(a2 + 80);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 128) = result;
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 152) = *(unsigned __int8 *)(a2 + 104);
  *(_DWORD *)(a1 + 156) = *(unsigned __int8 *)(a2 + 105);
  *(_DWORD *)(a1 + 160) = *(unsigned __int8 *)(a2 + 106);
  *(_DWORD *)(a1 + 164) = *(unsigned __int8 *)(a2 + 107);
  *(_DWORD *)(a1 + 168) = *(unsigned __int8 *)(a2 + 108);
  *(_DWORD *)(a1 + 172) = *(unsigned __int8 *)(a2 + 109);
  *(_DWORD *)(a1 + 176) = *(unsigned __int8 *)(a2 + 110);
  *(_DWORD *)(a1 + 180) = *(unsigned __int8 *)(a2 + 111);
  *(_DWORD *)(a1 + 184) = *(unsigned __int8 *)(a2 + 112);
  return result;
}

uint64_t _outCreateFunctionStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  *(_DWORD *)(result + 24) = *(unsigned __int8 *)(a2 + 4);
  *(_DWORD *)(result + 28) = *(unsigned __int8 *)(a2 + 5);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 32) = v5;
    result = palloc(8 * v5);
    v3[5] = result;
    if (v3[4])
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(v3[5] + 8 * v6) = v8;
        result = _outNode_0(*(void *)(v3[5] + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (v3[4] > v6);
    }
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    v3[6] = v11;
    result = palloc(8 * v11);
    v3[7] = result;
    if (v3[6])
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double v15 = pg_query__node__init(v14);
        *(void *)(v3[7] + 8 * v12) = v14;
        result = _outNode_0(*(void *)(v3[7] + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v12), v15);
        unint64_t v12 = v13++;
      }
      while (v3[6] > v12);
    }
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v16 = palloc(0x68uLL);
    pg_query__type_name__init(v16);
    result = _outTypeName_0(v16, *(void *)(a2 + 24));
    v3[8] = v16;
  }
  uint64_t v17 = *(void *)(a2 + 32);
  if (v17)
  {
    uint64_t v18 = *(int *)(v17 + 4);
    v3[9] = v18;
    result = palloc(8 * v18);
    v3[10] = result;
    if (v3[9])
    {
      unint64_t v19 = 0;
      int v20 = 1;
      do
      {
        uint64_t v21 = palloc(0x28uLL);
        double v22 = pg_query__node__init(v21);
        *(void *)(v3[10] + 8 * v19) = v21;
        result = _outNode_0(*(void *)(v3[10] + 8 * v19), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v19), v22);
        unint64_t v19 = v20++;
      }
      while (v3[9] > v19);
    }
  }
  return result;
}

uint64_t _outAlterFunctionStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0x32) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(result + 24) = v5;
  if (*(void *)(a2 + 8))
  {
    unint64_t v6 = (_OWORD *)palloc(0x40uLL);
    pg_query__object_with_args__init(v6);
    result = _outVacuumStmt_0((uint64_t)v6, *(void *)(a2 + 8));
    v3[4] = v6;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = *(int *)(v7 + 4);
    v3[5] = v8;
    result = palloc(8 * v8);
    v3[6] = result;
    if (v3[5])
    {
      unint64_t v9 = 0;
      int v10 = 1;
      do
      {
        uint64_t v11 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v11);
        *(void *)(v3[6] + 8 * v9) = v11;
        result = _outNode_0(*(void *)(v3[6] + 8 * v9), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v9), node__init);
        unint64_t v9 = v10++;
      }
      while (v3[5] > v9);
    }
  }
  return result;
}

uint64_t _outDoStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(int *)(v2 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    *(void *)(v4 + 32) = result;
    if (*(void *)(v4 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v4 + 32) + 8 * v6) = v8;
        result = _outNode_0(*(void *)(*(void *)(v4 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v4 + 24) > v6);
    }
  }
  return result;
}

const char *_outRenameStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0x32) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  if (v6 < 0x32) {
    int v7 = v6 + 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(a1 + 28) = v7;
  if (*(void *)(a2 + 16))
  {
    uint64_t v8 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v8);
    _outRangeVar_0((uint64_t)v8, *(void *)(a2 + 16));
    *(void *)(a1 + 32) = v8;
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v9 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v9);
    *(void *)(a1 + 40) = v9;
    _outNode_0(v9, *(void *)(a2 + 24), node__init);
  }
  uint64_t v11 = *(const char **)(a2 + 32);
  if (v11) {
    *(void *)(a1 + 48) = pstrdup(v11);
  }
  result = *(const char **)(a2 + 40);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 56) = result;
  }
  int v13 = *(_DWORD *)(a2 + 48);
  if (v13 == 1) {
    int v14 = 2;
  }
  else {
    int v14 = -1;
  }
  if (v13) {
    int v15 = v14;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(a1 + 64) = v15;
  *(_DWORD *)(a1 + 68) = *(unsigned __int8 *)(a2 + 52);
  return result;
}

const char *_outRuleStmt_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    unsigned int v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    _outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *(void *)(a1 + 24) = v4;
  }
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v6 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v6);
    *(void *)(a1 + 40) = v6;
    result = (const char *)_outNode_0(v6, *(void *)(a2 + 24), node__init);
  }
  unsigned int v8 = *(_DWORD *)(a2 + 32);
  if (v8 < 7) {
    int v9 = v8 + 1;
  }
  else {
    int v9 = -1;
  }
  *(_DWORD *)(a1 + 48) = v9;
  *(_DWORD *)(a1 + 52) = *(unsigned __int8 *)(a2 + 36);
  uint64_t v10 = *(void *)(a2 + 40);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    *(void *)(a1 + 56) = v11;
    result = (const char *)palloc(8 * v11);
    *(void *)(a1 + 64) = result;
    if (*(void *)(a1 + 56))
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double v15 = pg_query__node__init(v14);
        *(void *)(*(void *)(a1 + 64) + 8 * v12) = v14;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 40) + 16) + 8 * v12), v15);
        unint64_t v12 = v13++;
      }
      while (*(void *)(a1 + 56) > v12);
    }
  }
  *(_DWORD *)(a1 + 72) = *(unsigned __int8 *)(a2 + 48);
  return result;
}

const char *_outNotifyStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(const char **)(a2 + 8);
  if (v4) {
    *(void *)(a1 + 24) = pstrdup(v4);
  }
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  return result;
}

const char *_outTransactionStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0xA) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = palloc(8 * v7);
    if (*(void *)(a1 + 32))
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v10);
        *(void *)(*(void *)(a1 + 40) + 8 * v8) = v10;
        _outNode_0(*(void *)(*(void *)(a1 + 40) + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v8), node__init);
        unint64_t v8 = v9++;
      }
      while (*(void *)(a1 + 32) > v8);
    }
  }
  unint64_t v12 = *(const char **)(a2 + 16);
  if (v12) {
    *(void *)(a1 + 48) = pstrdup(v12);
  }
  result = *(const char **)(a2 + 24);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 56) = result;
  }
  *(_DWORD *)(a1 + 64) = *(unsigned __int8 *)(a2 + 32);
  return result;
}

uint64_t _outViewStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    unsigned int v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    result = (uint64_t)_outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *(void *)(v3 + 24) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(v3 + 32) = v6;
    result = palloc(8 * v6);
    *(void *)(v3 + 40) = result;
    if (*(void *)(v3 + 32))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(v3 + 40) + 8 * v7) = v9;
        result = _outNode_0(*(void *)(*(void *)(v3 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(v3 + 32) > v7);
    }
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v11 = palloc(0x28uLL);
    double v12 = pg_query__node__init(v11);
    *(void *)(v3 + 48) = v11;
    result = _outNode_0(v11, *(void *)(a2 + 24), v12);
  }
  *(_DWORD *)(v3 + 56) = *(unsigned __int8 *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 40);
  if (v13)
  {
    uint64_t v14 = *(int *)(v13 + 4);
    *(void *)(v3 + 64) = v14;
    result = palloc(8 * v14);
    *(void *)(v3 + 72) = result;
    if (*(void *)(v3 + 64))
    {
      unint64_t v15 = 0;
      int v16 = 1;
      do
      {
        uint64_t v17 = palloc(0x28uLL);
        double v18 = pg_query__node__init(v17);
        *(void *)(*(void *)(v3 + 72) + 8 * v15) = v17;
        result = _outNode_0(*(void *)(*(void *)(v3 + 72) + 8 * v15), *(void *)(*(void *)(*(void *)(a2 + 40) + 16) + 8 * v15), v18);
        unint64_t v15 = v16++;
      }
      while (*(void *)(v3 + 64) > v15);
    }
  }
  unsigned int v19 = *(_DWORD *)(a2 + 48);
  if (v19 < 3) {
    int v20 = v19 + 1;
  }
  else {
    int v20 = -1;
  }
  *(_DWORD *)(v3 + 80) = v20;
  return result;
}

uint64_t _outCreateDomainStmt_0(uint64_t result, void *a2)
{
  uint64_t v3 = (void *)result;
  uint64_t v4 = a2[1];
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    v3[4] = result;
    if (v3[3])
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(v3[4] + 8 * v6) = v8;
        result = _outNode_0(*(void *)(v3[4] + 8 * v6), *(void *)(*(void *)(a2[1] + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (v3[3] > v6);
    }
  }
  if (a2[2])
  {
    uint64_t v10 = palloc(0x68uLL);
    pg_query__type_name__init(v10);
    result = _outTypeName_0(v10, a2[2]);
    v3[5] = v10;
  }
  if (a2[3])
  {
    uint64_t v11 = palloc(0x38uLL);
    pg_query__collate_clause__init(v11);
    result = _outCollateClause_0(v11, a2[3]);
    v3[6] = v11;
  }
  uint64_t v12 = a2[4];
  if (v12)
  {
    uint64_t v13 = *(int *)(v12 + 4);
    v3[7] = v13;
    result = palloc(8 * v13);
    v3[8] = result;
    if (v3[7])
    {
      unint64_t v14 = 0;
      int v15 = 1;
      do
      {
        uint64_t v16 = palloc(0x28uLL);
        double v17 = pg_query__node__init(v16);
        *(void *)(v3[8] + 8 * v14) = v16;
        result = _outNode_0(*(void *)(v3[8] + 8 * v14), *(void *)(*(void *)(a2[4] + 16) + 8 * v14), v17);
        unint64_t v14 = v15++;
      }
      while (v3[7] > v14);
    }
  }
  return result;
}

const char *_outDropdbStmt_0(uint64_t a1, uint64_t a2)
{
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  *(_DWORD *)(a1 + 32) = *(unsigned __int8 *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(a1 + 40) = v6;
    result = (const char *)palloc(8 * v6);
    *(void *)(a1 + 48) = result;
    if (*(void *)(a1 + 40))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(a1 + 48) + 8 * v7) = v9;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(a1 + 40) > v7);
    }
  }
  return result;
}

uint64_t _outVacuumStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    *(void *)(v3 + 32) = result;
    if (*(void *)(v3 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v3 + 32) + 8 * v6) = v8;
        result = _outNode_0(*(void *)(*(void *)(v3 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v3 + 24) > v6);
    }
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    *(void *)(v3 + 40) = v11;
    result = palloc(8 * v11);
    *(void *)(v3 + 48) = result;
    if (*(void *)(v3 + 40))
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double v15 = pg_query__node__init(v14);
        *(void *)(*(void *)(v3 + 48) + 8 * v12) = v14;
        result = _outNode_0(*(void *)(*(void *)(v3 + 48) + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v12), v15);
        unint64_t v12 = v13++;
      }
      while (*(void *)(v3 + 40) > v12);
    }
  }
  *(_DWORD *)(v3 + 56) = *(unsigned __int8 *)(a2 + 24);
  return result;
}

uint64_t _outExplainStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v4);
    v3[3] = v4;
    result = _outNode_0(v4, *(void *)(a2 + 8), node__init);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    v3[4] = v7;
    result = palloc(8 * v7);
    v3[5] = result;
    if (v3[4])
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double v11 = pg_query__node__init(v10);
        *(void *)(v3[5] + 8 * v8) = v10;
        result = _outNode_0(*(void *)(v3[5] + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v8), v11);
        unint64_t v8 = v9++;
      }
      while (v3[4] > v8);
    }
  }
  return result;
}

const char *_outCreateTableAsStmt_0(const char *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v4);
    *((void *)v3 + 3) = v4;
    result = (const char *)_outNode_0(v4, *(void *)(a2 + 8), node__init);
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v6 = palloc(0x68uLL);
    pg_query__into_clause__init(v6);
    result = _outIntoClause_0(v6, *(void *)(a2 + 16));
    *((void *)v3 + 4) = v6;
  }
  unsigned int v7 = *(_DWORD *)(a2 + 24);
  if (v7 < 0x32) {
    int v8 = v7 + 1;
  }
  else {
    int v8 = -1;
  }
  *((_DWORD *)v3 + 10) = v8;
  *((_DWORD *)v3 + 11) = *(unsigned __int8 *)(a2 + 28);
  *((_DWORD *)v3 + 12) = *(unsigned __int8 *)(a2 + 29);
  return result;
}

uint64_t _outCreateSeqStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    result = (uint64_t)_outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *(void *)(v3 + 24) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(v3 + 32) = v6;
    result = palloc(8 * v6);
    *(void *)(v3 + 40) = result;
    if (*(void *)(v3 + 32))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(v3 + 40) + 8 * v7) = v9;
        result = _outNode_0(*(void *)(*(void *)(v3 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(v3 + 32) > v7);
    }
  }
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v3 + 52) = *(unsigned __int8 *)(a2 + 28);
  *(_DWORD *)(v3 + 56) = *(unsigned __int8 *)(a2 + 29);
  return result;
}

uint64_t _outAlterSeqStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    result = (uint64_t)_outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *(void *)(v3 + 24) = v4;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(v3 + 32) = v6;
    result = palloc(8 * v6);
    *(void *)(v3 + 40) = result;
    if (*(void *)(v3 + 32))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(v3 + 40) + 8 * v7) = v9;
        result = _outNode_0(*(void *)(*(void *)(v3 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(v3 + 32) > v7);
    }
  }
  *(_DWORD *)(v3 + 48) = *(unsigned __int8 *)(a2 + 24);
  *(_DWORD *)(v3 + 52) = *(unsigned __int8 *)(a2 + 25);
  return result;
}

const char *_outVariableSetStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 6) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = *(int *)(v7 + 4);
    *(void *)(a1 + 40) = v8;
    result = (const char *)palloc(8 * v8);
    *(void *)(a1 + 48) = result;
    if (*(void *)(a1 + 40))
    {
      unint64_t v9 = 0;
      int v10 = 1;
      do
      {
        uint64_t v11 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v11);
        *(void *)(*(void *)(a1 + 48) + 8 * v9) = v11;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v9), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v9), node__init);
        unint64_t v9 = v10++;
      }
      while (*(void *)(a1 + 40) > v9);
    }
  }
  *(_DWORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 24);
  return result;
}

const char *_outCreateTrigStmt_0(uint64_t a1, uint64_t a2)
{
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  if (*(void *)(a2 + 16))
  {
    int v5 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v5);
    result = _outRangeVar_0((uint64_t)v5, *(void *)(a2 + 16));
    *(void *)(a1 + 32) = v5;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    *(void *)(a1 + 40) = v7;
    result = (const char *)palloc(8 * v7);
    *(void *)(a1 + 48) = result;
    if (*(void *)(a1 + 40))
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v10);
        *(void *)(*(void *)(a1 + 48) + 8 * v8) = v10;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v8), node__init);
        unint64_t v8 = v9++;
      }
      while (*(void *)(a1 + 40) > v8);
    }
  }
  uint64_t v12 = *(void *)(a2 + 32);
  if (v12)
  {
    uint64_t v13 = *(int *)(v12 + 4);
    *(void *)(a1 + 56) = v13;
    result = (const char *)palloc(8 * v13);
    *(void *)(a1 + 64) = result;
    if (*(void *)(a1 + 56))
    {
      unint64_t v14 = 0;
      int v15 = 1;
      do
      {
        uint64_t v16 = palloc(0x28uLL);
        double v17 = pg_query__node__init(v16);
        *(void *)(*(void *)(a1 + 64) + 8 * v14) = v16;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v14), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v14), v17);
        unint64_t v14 = v15++;
      }
      while (*(void *)(a1 + 56) > v14);
    }
  }
  *(_DWORD *)(a1 + 72) = *(unsigned __int8 *)(a2 + 40);
  *(_DWORD *)(a1 + 76) = *(__int16 *)(a2 + 42);
  *(_DWORD *)(a1 + 80) = *(__int16 *)(a2 + 44);
  uint64_t v18 = *(void *)(a2 + 48);
  if (v18)
  {
    uint64_t v19 = *(int *)(v18 + 4);
    *(void *)(a1 + 88) = v19;
    result = (const char *)palloc(8 * v19);
    *(void *)(a1 + 96) = result;
    if (*(void *)(a1 + 88))
    {
      unint64_t v20 = 0;
      int v21 = 1;
      do
      {
        uint64_t v22 = palloc(0x28uLL);
        double v23 = pg_query__node__init(v22);
        *(void *)(*(void *)(a1 + 96) + 8 * v20) = v22;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 96) + 8 * v20), *(void *)(*(void *)(*(void *)(a2 + 48) + 16) + 8 * v20), v23);
        unint64_t v20 = v21++;
      }
      while (*(void *)(a1 + 88) > v20);
    }
  }
  if (*(void *)(a2 + 56))
  {
    uint64_t v24 = palloc(0x28uLL);
    double v25 = pg_query__node__init(v24);
    *(void *)(a1 + 104) = v24;
    result = (const char *)_outNode_0(v24, *(void *)(a2 + 56), v25);
  }
  *(_DWORD *)(a1 + 112) = *(unsigned __int8 *)(a2 + 64);
  uint64_t v26 = *(void *)(a2 + 72);
  if (v26)
  {
    uint64_t v27 = *(int *)(v26 + 4);
    *(void *)(a1 + 120) = v27;
    result = (const char *)palloc(8 * v27);
    *(void *)(a1 + 128) = result;
    if (*(void *)(a1 + 120))
    {
      unint64_t v28 = 0;
      int v29 = 1;
      do
      {
        uint64_t v30 = palloc(0x28uLL);
        double v31 = pg_query__node__init(v30);
        *(void *)(*(void *)(a1 + 128) + 8 * v28) = v30;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 128) + 8 * v28), *(void *)(*(void *)(*(void *)(a2 + 72) + 16) + 8 * v28), v31);
        unint64_t v28 = v29++;
      }
      while (*(void *)(a1 + 120) > v28);
    }
  }
  *(_DWORD *)(a1 + 136) = *(unsigned __int8 *)(a2 + 80);
  *(_DWORD *)(a1 + 140) = *(unsigned __int8 *)(a2 + 81);
  if (*(void *)(a2 + 88))
  {
    uint64_t v32 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v32);
    result = _outRangeVar_0((uint64_t)v32, *(void *)(a2 + 88));
    *(void *)(a1 + 144) = v32;
  }
  return result;
}

const char *_outCreatePLangStmt_0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(unsigned __int8 *)(a2 + 4);
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(a1 + 40) = v6;
    result = (const char *)palloc(8 * v6);
    *(void *)(a1 + 48) = result;
    if (*(void *)(a1 + 40))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(a1 + 48) + 8 * v7) = v9;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(a1 + 40) > v7);
    }
  }
  uint64_t v11 = *(void *)(a2 + 24);
  if (v11)
  {
    uint64_t v12 = *(int *)(v11 + 4);
    *(void *)(a1 + 56) = v12;
    result = (const char *)palloc(8 * v12);
    *(void *)(a1 + 64) = result;
    if (*(void *)(a1 + 56))
    {
      unint64_t v13 = 0;
      int v14 = 1;
      do
      {
        uint64_t v15 = palloc(0x28uLL);
        double v16 = pg_query__node__init(v15);
        *(void *)(*(void *)(a1 + 64) + 8 * v13) = v15;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v13), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v13), v16);
        unint64_t v13 = v14++;
      }
      while (*(void *)(a1 + 56) > v13);
    }
  }
  uint64_t v17 = *(void *)(a2 + 32);
  if (v17)
  {
    uint64_t v18 = *(int *)(v17 + 4);
    *(void *)(a1 + 72) = v18;
    result = (const char *)palloc(8 * v18);
    *(void *)(a1 + 80) = result;
    if (*(void *)(a1 + 72))
    {
      unint64_t v19 = 0;
      int v20 = 1;
      do
      {
        uint64_t v21 = palloc(0x28uLL);
        double v22 = pg_query__node__init(v21);
        *(void *)(*(void *)(a1 + 80) + 8 * v19) = v21;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 80) + 8 * v19), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v19), v22);
        unint64_t v19 = v20++;
      }
      while (*(void *)(a1 + 72) > v19);
    }
  }
  *(_DWORD *)(a1 + 88) = *(unsigned __int8 *)(a2 + 40);
  return result;
}

const char *_outCreateRoleStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 3) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = *(int *)(v7 + 4);
    *(void *)(a1 + 40) = v8;
    result = (const char *)palloc(8 * v8);
    *(void *)(a1 + 48) = result;
    if (*(void *)(a1 + 40))
    {
      unint64_t v9 = 0;
      int v10 = 1;
      do
      {
        uint64_t v11 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v11);
        *(void *)(*(void *)(a1 + 48) + 8 * v9) = v11;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v9), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v9), node__init);
        unint64_t v9 = v10++;
      }
      while (*(void *)(a1 + 40) > v9);
    }
  }
  return result;
}

const char *_outAlterRoleStmt_0(const char *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x30uLL);
    pg_query__role_spec__init((_OWORD *)v4);
    uint64_t v5 = *(void *)(a2 + 8);
    unsigned int v6 = *(_DWORD *)(v5 + 4);
    if (v6 < 4) {
      int v7 = v6 + 1;
    }
    else {
      int v7 = -1;
    }
    *(_DWORD *)(v4 + 24) = v7;
    result = *(const char **)(v5 + 8);
    if (result)
    {
      result = (const char *)pstrdup(result);
      *(void *)(v4 + 32) = result;
    }
    *(_DWORD *)(v4 + 40) = *(_DWORD *)(v5 + 16);
    *((void *)v3 + 3) = v4;
  }
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = *(int *)(v8 + 4);
    *((void *)v3 + 4) = v9;
    result = (const char *)palloc(8 * v9);
    *((void *)v3 + 5) = result;
    if (*((void *)v3 + 4))
    {
      unint64_t v10 = 0;
      int v11 = 1;
      do
      {
        uint64_t v12 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v12);
        *(void *)(*((void *)v3 + 5) + 8 * v10) = v12;
        result = (const char *)_outNode_0(*(void *)(*((void *)v3 + 5) + 8 * v10), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v10), node__init);
        unint64_t v10 = v11++;
      }
      while (*((void *)v3 + 4) > v10);
    }
  }
  *((_DWORD *)v3 + 12) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t _outDropRoleStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    *(void *)(v3 + 32) = result;
    if (*(void *)(v3 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v3 + 32) + 8 * v6) = v8;
        result = _outNode_0(*(void *)(*(void *)(v3 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v3 + 24) > v6);
    }
  }
  *(_DWORD *)(v3 + 40) = *(unsigned __int8 *)(a2 + 16);
  return result;
}

uint64_t _outLockStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    *(void *)(v3 + 32) = result;
    if (*(void *)(v3 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v3 + 32) + 8 * v6) = v8;
        result = _outNode_0(*(void *)(*(void *)(v3 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v3 + 24) > v6);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v3 + 44) = *(unsigned __int8 *)(a2 + 20);
  return result;
}

const char *_outReindexStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 5) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  if (*(void *)(a2 + 8))
  {
    unint64_t v6 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v6);
    _outRangeVar_0((uint64_t)v6, *(void *)(a2 + 8));
    *(void *)(a1 + 32) = v6;
  }
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 40) = result;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 52) = *(unsigned __int8 *)(a2 + 28);
  return result;
}

const char *_outCreateSchemaStmt_0(uint64_t a1, uint64_t a2)
{
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v5 = palloc(0x30uLL);
    pg_query__role_spec__init((_OWORD *)v5);
    uint64_t v6 = *(void *)(a2 + 16);
    unsigned int v7 = *(_DWORD *)(v6 + 4);
    if (v7 < 4) {
      int v8 = v7 + 1;
    }
    else {
      int v8 = -1;
    }
    *(_DWORD *)(v5 + 24) = v8;
    result = *(const char **)(v6 + 8);
    if (result)
    {
      result = (const char *)pstrdup(result);
      *(void *)(v5 + 32) = result;
    }
    *(_DWORD *)(v5 + 40) = *(_DWORD *)(v6 + 16);
    *(void *)(a1 + 32) = v5;
  }
  uint64_t v9 = *(void *)(a2 + 24);
  if (v9)
  {
    uint64_t v10 = *(int *)(v9 + 4);
    *(void *)(a1 + 40) = v10;
    result = (const char *)palloc(8 * v10);
    *(void *)(a1 + 48) = result;
    if (*(void *)(a1 + 40))
    {
      unint64_t v11 = 0;
      int v12 = 1;
      do
      {
        uint64_t v13 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v13);
        *(void *)(*(void *)(a1 + 48) + 8 * v11) = v13;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v11), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v11), node__init);
        unint64_t v11 = v12++;
      }
      while (*(void *)(a1 + 40) > v11);
    }
  }
  *(_DWORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 32);
  return result;
}

const char *_outAlterDatabaseSetStmt_0(uint64_t a1, uint64_t a2)
{
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v5 = (_OWORD *)palloc(0x40uLL);
    pg_query__variable_set_stmt__init(v5);
    result = _outVariableSetStmt_0((uint64_t)v5, *(void *)(a2 + 16));
    *(void *)(a1 + 32) = v5;
  }
  return result;
}

const char *_outAlterRoleSetStmt_0(void *a1, void *a2)
{
  if (a2[1])
  {
    uint64_t v4 = palloc(0x30uLL);
    pg_query__role_spec__init((_OWORD *)v4);
    uint64_t v5 = a2[1];
    unsigned int v6 = *(_DWORD *)(v5 + 4);
    if (v6 < 4) {
      int v7 = v6 + 1;
    }
    else {
      int v7 = -1;
    }
    *(_DWORD *)(v4 + 24) = v7;
    int v8 = *(const char **)(v5 + 8);
    if (v8) {
      *(void *)(v4 + 32) = pstrdup(v8);
    }
    *(_DWORD *)(v4 + 40) = *(_DWORD *)(v5 + 16);
    a1[3] = v4;
  }
  result = (const char *)a2[2];
  if (result)
  {
    result = (const char *)pstrdup(result);
    a1[4] = result;
  }
  if (a2[3])
  {
    uint64_t v10 = (_OWORD *)palloc(0x40uLL);
    pg_query__variable_set_stmt__init(v10);
    result = _outVariableSetStmt_0((uint64_t)v10, a2[3]);
    a1[5] = v10;
  }
  return result;
}

const char *_outCreateConversionStmt_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = palloc(8 * v5);
    if (*(void *)(a1 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(a1 + 32) + 8 * v6) = v8;
        _outNode_0(*(void *)(*(void *)(a1 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(a1 + 24) > v6);
    }
  }
  uint64_t v10 = *(const char **)(a2 + 16);
  if (v10) {
    *(void *)(a1 + 40) = pstrdup(v10);
  }
  result = *(const char **)(a2 + 24);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 48) = result;
  }
  uint64_t v12 = *(void *)(a2 + 32);
  if (v12)
  {
    uint64_t v13 = *(int *)(v12 + 4);
    *(void *)(a1 + 56) = v13;
    result = (const char *)palloc(8 * v13);
    *(void *)(a1 + 64) = result;
    if (*(void *)(a1 + 56))
    {
      unint64_t v14 = 0;
      int v15 = 1;
      do
      {
        uint64_t v16 = palloc(0x28uLL);
        double v17 = pg_query__node__init(v16);
        *(void *)(*(void *)(a1 + 64) + 8 * v14) = v16;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v14), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v14), v17);
        unint64_t v14 = v15++;
      }
      while (*(void *)(a1 + 56) > v14);
    }
  }
  *(_DWORD *)(a1 + 72) = *(unsigned __int8 *)(a2 + 40);
  return result;
}

uint64_t _outCreateCastStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x68uLL);
    pg_query__type_name__init(v4);
    result = _outTypeName_0(v4, *(void *)(a2 + 8));
    *(void *)(v3 + 24) = v4;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v5 = palloc(0x68uLL);
    pg_query__type_name__init(v5);
    result = _outTypeName_0(v5, *(void *)(a2 + 16));
    *(void *)(v3 + 32) = v5;
  }
  if (*(void *)(a2 + 24))
  {
    unint64_t v6 = (_OWORD *)palloc(0x40uLL);
    pg_query__object_with_args__init(v6);
    result = _outVacuumStmt_0((uint64_t)v6, *(void *)(a2 + 24));
    *(void *)(v3 + 40) = v6;
  }
  unsigned int v7 = *(_DWORD *)(a2 + 32);
  if (v7 < 3) {
    int v8 = v7 + 1;
  }
  else {
    int v8 = -1;
  }
  *(_DWORD *)(v3 + 48) = v8;
  *(_DWORD *)(v3 + 52) = *(unsigned __int8 *)(a2 + 36);
  return result;
}

const char *_outCreateOpClassStmt_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = palloc(8 * v5);
    if (*(void *)(a1 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(a1 + 32) + 8 * v6) = v8;
        _outNode_0(*(void *)(*(void *)(a1 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(a1 + 24) > v6);
    }
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = palloc(8 * v11);
    if (*(void *)(a1 + 40))
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double v15 = pg_query__node__init(v14);
        *(void *)(*(void *)(a1 + 48) + 8 * v12) = v14;
        _outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v12), v15);
        unint64_t v12 = v13++;
      }
      while (*(void *)(a1 + 40) > v12);
    }
  }
  result = *(const char **)(a2 + 24);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 56) = result;
  }
  if (*(void *)(a2 + 32))
  {
    uint64_t v17 = palloc(0x68uLL);
    pg_query__type_name__init(v17);
    result = (const char *)_outTypeName_0(v17, *(void *)(a2 + 32));
    *(void *)(a1 + 64) = v17;
  }
  uint64_t v18 = *(void *)(a2 + 40);
  if (v18)
  {
    uint64_t v19 = *(int *)(v18 + 4);
    *(void *)(a1 + 72) = v19;
    result = (const char *)palloc(8 * v19);
    *(void *)(a1 + 80) = result;
    if (*(void *)(a1 + 72))
    {
      unint64_t v20 = 0;
      int v21 = 1;
      do
      {
        uint64_t v22 = palloc(0x28uLL);
        double v23 = pg_query__node__init(v22);
        *(void *)(*(void *)(a1 + 80) + 8 * v20) = v22;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 80) + 8 * v20), *(void *)(*(void *)(*(void *)(a2 + 40) + 16) + 8 * v20), v23);
        unint64_t v20 = v21++;
      }
      while (*(void *)(a1 + 72) > v20);
    }
  }
  *(_DWORD *)(a1 + 88) = *(unsigned __int8 *)(a2 + 48);
  return result;
}

const char *_outCreateOpFamilyStmt_0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    a1[3] = v5;
    a1[4] = palloc(8 * v5);
    if (a1[3])
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(a1[4] + 8 * v6) = v8;
        _outNode_0(*(void *)(a1[4] + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (a1[3] > v6);
    }
  }
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    a1[5] = result;
  }
  return result;
}

const char *_outAlterOpFamilyStmt_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = palloc(8 * v5);
    if (*(void *)(a1 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(a1 + 32) + 8 * v6) = v8;
        _outNode_0(*(void *)(*(void *)(a1 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(a1 + 24) > v6);
    }
  }
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 40) = result;
  }
  *(_DWORD *)(a1 + 48) = *(unsigned __int8 *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  if (v11)
  {
    uint64_t v12 = *(int *)(v11 + 4);
    *(void *)(a1 + 56) = v12;
    result = (const char *)palloc(8 * v12);
    *(void *)(a1 + 64) = result;
    if (*(void *)(a1 + 56))
    {
      unint64_t v13 = 0;
      int v14 = 1;
      do
      {
        uint64_t v15 = palloc(0x28uLL);
        double v16 = pg_query__node__init(v15);
        *(void *)(*(void *)(a1 + 64) + 8 * v13) = v15;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v13), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v13), v16);
        unint64_t v13 = v14++;
      }
      while (*(void *)(a1 + 56) > v13);
    }
  }
  return result;
}

const char *_outPrepareStmt_0(void *a1, void *a2)
{
  result = (const char *)a2[1];
  if (result)
  {
    result = (const char *)pstrdup(result);
    a1[3] = result;
  }
  uint64_t v5 = a2[2];
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    a1[4] = v6;
    result = (const char *)palloc(8 * v6);
    a1[5] = result;
    if (a1[4])
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(a1[5] + 8 * v7) = v9;
        result = (const char *)_outNode_0(*(void *)(a1[5] + 8 * v7), *(void *)(*(void *)(a2[2] + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (a1[4] > v7);
    }
  }
  if (a2[3])
  {
    uint64_t v11 = palloc(0x28uLL);
    double v12 = pg_query__node__init(v11);
    a1[6] = v11;
    uint64_t v13 = a2[3];
    return (const char *)_outNode_0(v11, v13, v12);
  }
  return result;
}

const char *_outDeclareCursorStmt_0(uint64_t a1, uint64_t a2)
{
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 16);
  if (*(void *)(a2 + 24))
  {
    uint64_t v5 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v5);
    *(void *)(a1 + 40) = v5;
    uint64_t v7 = *(void *)(a2 + 24);
    return (const char *)_outNode_0(v5, v7, node__init);
  }
  return result;
}

const char *_outCreateTableSpaceStmt_0(void *a1, void *a2)
{
  uint64_t v4 = (const char *)a2[1];
  if (v4) {
    a1[3] = pstrdup(v4);
  }
  if (a2[2])
  {
    uint64_t v5 = palloc(0x30uLL);
    pg_query__role_spec__init((_OWORD *)v5);
    uint64_t v6 = a2[2];
    unsigned int v7 = *(_DWORD *)(v6 + 4);
    if (v7 < 4) {
      int v8 = v7 + 1;
    }
    else {
      int v8 = -1;
    }
    *(_DWORD *)(v5 + 24) = v8;
    uint64_t v9 = *(const char **)(v6 + 8);
    if (v9) {
      *(void *)(v5 + 32) = pstrdup(v9);
    }
    *(_DWORD *)(v5 + 40) = *(_DWORD *)(v6 + 16);
    a1[4] = v5;
  }
  result = (const char *)a2[3];
  if (result)
  {
    result = (const char *)pstrdup(result);
    a1[5] = result;
  }
  uint64_t v11 = a2[4];
  if (v11)
  {
    uint64_t v12 = *(int *)(v11 + 4);
    a1[6] = v12;
    result = (const char *)palloc(8 * v12);
    a1[7] = result;
    if (a1[6])
    {
      unint64_t v13 = 0;
      int v14 = 1;
      do
      {
        uint64_t v15 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v15);
        *(void *)(a1[7] + 8 * v13) = v15;
        result = (const char *)_outNode_0(*(void *)(a1[7] + 8 * v13), *(void *)(*(void *)(a2[4] + 16) + 8 * v13), node__init);
        unint64_t v13 = v14++;
      }
      while (a1[6] > v13);
    }
  }
  return result;
}

char *_outAlterObjectDependsStmt_0(char *result, uint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0x32) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *((_DWORD *)result + 6) = v5;
  if (*(void *)(a2 + 8))
  {
    uint64_t v6 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v6);
    result = _outRangeVar_0((uint64_t)v6, *(void *)(a2 + 8));
    *((void *)v3 + 4) = v6;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v7 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v7);
    *((void *)v3 + 5) = v7;
    result = (char *)_outNode_0(v7, *(void *)(a2 + 16), node__init);
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v9 = palloc(0x28uLL);
    double v10 = pg_query__node__init(v9);
    *((void *)v3 + 6) = v9;
    result = (char *)_outNode_0(v9, *(void *)(a2 + 24), v10);
  }
  *((_DWORD *)v3 + 14) = *(unsigned __int8 *)(a2 + 32);
  return result;
}

const char *_outAlterObjectSchemaStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0x32) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  if (*(void *)(a2 + 8))
  {
    uint64_t v6 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v6);
    _outRangeVar_0((uint64_t)v6, *(void *)(a2 + 8));
    *(void *)(a1 + 32) = v6;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v7 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v7);
    *(void *)(a1 + 40) = v7;
    _outNode_0(v7, *(void *)(a2 + 16), node__init);
  }
  result = *(const char **)(a2 + 24);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 48) = result;
  }
  *(_DWORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 32);
  return result;
}

void *_outAlterOwnerStmt_0(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0x32) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *((_DWORD *)result + 6) = v5;
  if (*(void *)(a2 + 8))
  {
    uint64_t v6 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v6);
    result = _outRangeVar_0((uint64_t)v6, *(void *)(a2 + 8));
    v3[4] = v6;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v7 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v7);
    v3[5] = v7;
    result = (void *)_outNode_0(v7, *(void *)(a2 + 16), node__init);
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v9 = palloc(0x30uLL);
    pg_query__role_spec__init((_OWORD *)v9);
    uint64_t v10 = *(void *)(a2 + 24);
    unsigned int v11 = *(_DWORD *)(v10 + 4);
    if (v11 < 4) {
      int v12 = v11 + 1;
    }
    else {
      int v12 = -1;
    }
    *(_DWORD *)(v9 + 24) = v12;
    result = *(void **)(v10 + 8);
    if (result)
    {
      result = pstrdup((const char *)result);
      *(void *)(v9 + 32) = result;
    }
    *(_DWORD *)(v9 + 40) = *(_DWORD *)(v10 + 16);
    v3[6] = v9;
  }
  return result;
}

uint64_t _outAlterOperatorStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  if (*(void *)(a2 + 8))
  {
    unsigned int v4 = (_OWORD *)palloc(0x40uLL);
    pg_query__object_with_args__init(v4);
    result = _outVacuumStmt_0((uint64_t)v4, *(void *)(a2 + 8));
    v3[3] = v4;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    v3[4] = v6;
    result = palloc(8 * v6);
    v3[5] = result;
    if (v3[4])
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(v3[5] + 8 * v7) = v9;
        result = _outNode_0(*(void *)(v3[5] + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (v3[4] > v7);
    }
  }
  return result;
}

uint64_t _outAlterTypeStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    v3[4] = result;
    if (v3[3])
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(v3[4] + 8 * v6) = v8;
        result = _outNode_0(*(void *)(v3[4] + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (v3[3] > v6);
    }
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    v3[5] = v11;
    result = palloc(8 * v11);
    v3[6] = result;
    if (v3[5])
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double v15 = pg_query__node__init(v14);
        *(void *)(v3[6] + 8 * v12) = v14;
        result = _outNode_0(*(void *)(v3[6] + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v12), v15);
        unint64_t v12 = v13++;
      }
      while (v3[5] > v12);
    }
  }
  return result;
}

uint64_t _outDropOwnedStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    *(void *)(v3 + 32) = result;
    if (*(void *)(v3 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v3 + 32) + 8 * v6) = v8;
        result = _outNode_0(*(void *)(*(void *)(v3 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v3 + 24) > v6);
    }
  }
  int v10 = *(_DWORD *)(a2 + 16);
  if (v10 == 1) {
    int v11 = 2;
  }
  else {
    int v11 = -1;
  }
  if (v10) {
    int v12 = v11;
  }
  else {
    int v12 = 1;
  }
  *(_DWORD *)(v3 + 40) = v12;
  return result;
}

uint64_t _outReassignOwnedStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    v3[4] = result;
    if (v3[3])
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(v3[4] + 8 * v6) = v8;
        result = _outNode_0(*(void *)(v3[4] + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (v3[3] > v6);
    }
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v10 = palloc(0x30uLL);
    pg_query__role_spec__init((_OWORD *)v10);
    uint64_t v11 = *(void *)(a2 + 16);
    unsigned int v12 = *(_DWORD *)(v11 + 4);
    if (v12 < 4) {
      int v13 = v12 + 1;
    }
    else {
      int v13 = -1;
    }
    *(_DWORD *)(v10 + 24) = v13;
    result = *(void *)(v11 + 8);
    if (result)
    {
      result = (uint64_t)pstrdup((const char *)result);
      *(void *)(v10 + 32) = result;
    }
    *(_DWORD *)(v10 + 40) = *(_DWORD *)(v11 + 16);
    v3[5] = v10;
  }
  return result;
}

uint64_t _outCompositeTypeStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    result = (uint64_t)_outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    v3[3] = v4;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    v3[4] = v6;
    result = palloc(8 * v6);
    v3[5] = result;
    if (v3[4])
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(v3[5] + 8 * v7) = v9;
        result = _outNode_0(*(void *)(v3[5] + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (v3[4] > v7);
    }
  }
  return result;
}

const char *_outAlterEnumStmt_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = palloc(8 * v5);
    if (*(void *)(a1 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(a1 + 32) + 8 * v6) = v8;
        _outNode_0(*(void *)(*(void *)(a1 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(a1 + 24) > v6);
    }
  }
  uint64_t v10 = *(const char **)(a2 + 16);
  if (v10) {
    *(void *)(a1 + 40) = pstrdup(v10);
  }
  uint64_t v11 = *(const char **)(a2 + 24);
  if (v11) {
    *(void *)(a1 + 48) = pstrdup(v11);
  }
  result = *(const char **)(a2 + 32);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 56) = result;
  }
  *(_DWORD *)(a1 + 64) = *(unsigned __int8 *)(a2 + 40);
  *(_DWORD *)(a1 + 68) = *(unsigned __int8 *)(a2 + 41);
  return result;
}

uint64_t _outAlterTSConfigurationStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 5) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(result + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    *(void *)(result + 32) = v7;
    result = palloc(8 * v7);
    *(void *)(v3 + 40) = result;
    if (*(void *)(v3 + 32))
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v10);
        *(void *)(*(void *)(v3 + 40) + 8 * v8) = v10;
        result = _outNode_0(*(void *)(*(void *)(v3 + 40) + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v8), node__init);
        unint64_t v8 = v9++;
      }
      while (*(void *)(v3 + 32) > v8);
    }
  }
  uint64_t v12 = *(void *)(a2 + 16);
  if (v12)
  {
    uint64_t v13 = *(int *)(v12 + 4);
    *(void *)(v3 + 48) = v13;
    result = palloc(8 * v13);
    *(void *)(v3 + 56) = result;
    if (*(void *)(v3 + 48))
    {
      unint64_t v14 = 0;
      int v15 = 1;
      do
      {
        uint64_t v16 = palloc(0x28uLL);
        double v17 = pg_query__node__init(v16);
        *(void *)(*(void *)(v3 + 56) + 8 * v14) = v16;
        result = _outNode_0(*(void *)(*(void *)(v3 + 56) + 8 * v14), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v14), v17);
        unint64_t v14 = v15++;
      }
      while (*(void *)(v3 + 48) > v14);
    }
  }
  uint64_t v18 = *(void *)(a2 + 24);
  if (v18)
  {
    uint64_t v19 = *(int *)(v18 + 4);
    *(void *)(v3 + 64) = v19;
    result = palloc(8 * v19);
    *(void *)(v3 + 72) = result;
    if (*(void *)(v3 + 64))
    {
      unint64_t v20 = 0;
      int v21 = 1;
      do
      {
        uint64_t v22 = palloc(0x28uLL);
        double v23 = pg_query__node__init(v22);
        *(void *)(*(void *)(v3 + 72) + 8 * v20) = v22;
        result = _outNode_0(*(void *)(*(void *)(v3 + 72) + 8 * v20), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v20), v23);
        unint64_t v20 = v21++;
      }
      while (*(void *)(v3 + 64) > v20);
    }
  }
  *(_DWORD *)(v3 + 80) = *(unsigned __int8 *)(a2 + 32);
  *(_DWORD *)(v3 + 84) = *(unsigned __int8 *)(a2 + 33);
  *(_DWORD *)(v3 + 88) = *(unsigned __int8 *)(a2 + 34);
  return result;
}

const char *_outCreateFdwStmt_0(void *a1, void *a2)
{
  result = (const char *)a2[1];
  if (result)
  {
    result = (const char *)pstrdup(result);
    a1[3] = result;
  }
  uint64_t v5 = a2[2];
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    a1[4] = v6;
    result = (const char *)palloc(8 * v6);
    a1[5] = result;
    if (a1[4])
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(a1[5] + 8 * v7) = v9;
        result = (const char *)_outNode_0(*(void *)(a1[5] + 8 * v7), *(void *)(*(void *)(a2[2] + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (a1[4] > v7);
    }
  }
  uint64_t v11 = a2[3];
  if (v11)
  {
    uint64_t v12 = *(int *)(v11 + 4);
    a1[6] = v12;
    result = (const char *)palloc(8 * v12);
    a1[7] = result;
    if (a1[6])
    {
      unint64_t v13 = 0;
      int v14 = 1;
      do
      {
        uint64_t v15 = palloc(0x28uLL);
        double v16 = pg_query__node__init(v15);
        *(void *)(a1[7] + 8 * v13) = v15;
        result = (const char *)_outNode_0(*(void *)(a1[7] + 8 * v13), *(void *)(*(void *)(a2[3] + 16) + 8 * v13), v16);
        unint64_t v13 = v14++;
      }
      while (a1[6] > v13);
    }
  }
  return result;
}

const char *_outCreateForeignServerStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(const char **)(a2 + 8);
  if (v4) {
    *(void *)(a1 + 24) = pstrdup(v4);
  }
  uint64_t v5 = *(const char **)(a2 + 16);
  if (v5) {
    *(void *)(a1 + 32) = pstrdup(v5);
  }
  uint64_t v6 = *(const char **)(a2 + 24);
  if (v6) {
    *(void *)(a1 + 40) = pstrdup(v6);
  }
  result = *(const char **)(a2 + 32);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 48) = result;
  }
  *(_DWORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  if (v8)
  {
    uint64_t v9 = *(int *)(v8 + 4);
    *(void *)(a1 + 64) = v9;
    result = (const char *)palloc(8 * v9);
    *(void *)(a1 + 72) = result;
    if (*(void *)(a1 + 64))
    {
      unint64_t v10 = 0;
      int v11 = 1;
      do
      {
        uint64_t v12 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v12);
        *(void *)(*(void *)(a1 + 72) + 8 * v10) = v12;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 72) + 8 * v10), *(void *)(*(void *)(*(void *)(a2 + 48) + 16) + 8 * v10), node__init);
        unint64_t v10 = v11++;
      }
      while (*(void *)(a1 + 64) > v10);
    }
  }
  return result;
}

const char *_outAlterForeignServerStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(const char **)(a2 + 8);
  if (v4) {
    *(void *)(a1 + 24) = pstrdup(v4);
  }
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    *(void *)(a1 + 40) = v7;
    result = (const char *)palloc(8 * v7);
    *(void *)(a1 + 48) = result;
    if (*(void *)(a1 + 40))
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v10);
        *(void *)(*(void *)(a1 + 48) + 8 * v8) = v10;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v8), node__init);
        unint64_t v8 = v9++;
      }
      while (*(void *)(a1 + 40) > v8);
    }
  }
  *(_DWORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 32);
  return result;
}

const char *_outCreateUserMappingStmt_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x30uLL);
    pg_query__role_spec__init((_OWORD *)v4);
    uint64_t v5 = *(void *)(a2 + 8);
    unsigned int v6 = *(_DWORD *)(v5 + 4);
    if (v6 < 4) {
      int v7 = v6 + 1;
    }
    else {
      int v7 = -1;
    }
    *(_DWORD *)(v4 + 24) = v7;
    unint64_t v8 = *(const char **)(v5 + 8);
    if (v8) {
      *(void *)(v4 + 32) = pstrdup(v8);
    }
    *(_DWORD *)(v4 + 40) = *(_DWORD *)(v5 + 16);
    *(void *)(a1 + 24) = v4;
  }
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  *(_DWORD *)(a1 + 40) = *(unsigned __int8 *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    *(void *)(a1 + 48) = v11;
    result = (const char *)palloc(8 * v11);
    *(void *)(a1 + 56) = result;
    if (*(void *)(a1 + 48))
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v14);
        *(void *)(*(void *)(a1 + 56) + 8 * v12) = v14;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 56) + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v12), node__init);
        unint64_t v12 = v13++;
      }
      while (*(void *)(a1 + 48) > v12);
    }
  }
  return result;
}

const char *_outAlterUserMappingStmt_0(void *a1, void *a2)
{
  if (a2[1])
  {
    uint64_t v4 = palloc(0x30uLL);
    pg_query__role_spec__init((_OWORD *)v4);
    uint64_t v5 = a2[1];
    unsigned int v6 = *(_DWORD *)(v5 + 4);
    if (v6 < 4) {
      int v7 = v6 + 1;
    }
    else {
      int v7 = -1;
    }
    *(_DWORD *)(v4 + 24) = v7;
    unint64_t v8 = *(const char **)(v5 + 8);
    if (v8) {
      *(void *)(v4 + 32) = pstrdup(v8);
    }
    *(_DWORD *)(v4 + 40) = *(_DWORD *)(v5 + 16);
    a1[3] = v4;
  }
  result = (const char *)a2[2];
  if (result)
  {
    result = (const char *)pstrdup(result);
    a1[4] = result;
  }
  uint64_t v10 = a2[3];
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    a1[5] = v11;
    result = (const char *)palloc(8 * v11);
    a1[6] = result;
    if (a1[5])
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v14);
        *(void *)(a1[6] + 8 * v12) = v14;
        result = (const char *)_outNode_0(*(void *)(a1[6] + 8 * v12), *(void *)(*(void *)(a2[3] + 16) + 8 * v12), node__init);
        unint64_t v12 = v13++;
      }
      while (a1[5] > v12);
    }
  }
  return result;
}

const char *_outDropUserMappingStmt_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x30uLL);
    pg_query__role_spec__init((_OWORD *)v4);
    uint64_t v5 = *(void *)(a2 + 8);
    unsigned int v6 = *(_DWORD *)(v5 + 4);
    if (v6 < 4) {
      int v7 = v6 + 1;
    }
    else {
      int v7 = -1;
    }
    *(_DWORD *)(v4 + 24) = v7;
    unint64_t v8 = *(const char **)(v5 + 8);
    if (v8) {
      *(void *)(v4 + 32) = pstrdup(v8);
    }
    *(_DWORD *)(v4 + 40) = *(_DWORD *)(v5 + 16);
    *(void *)(a1 + 24) = v4;
  }
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  *(_DWORD *)(a1 + 40) = *(unsigned __int8 *)(a2 + 24);
  return result;
}

const char *_outAlterTableSpaceOptionsStmt_0(uint64_t a1, uint64_t a2)
{
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(a1 + 32) = v6;
    result = (const char *)palloc(8 * v6);
    *(void *)(a1 + 40) = result;
    if (*(void *)(a1 + 32))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(a1 + 40) + 8 * v7) = v9;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(a1 + 32) > v7);
    }
  }
  *(_DWORD *)(a1 + 48) = *(unsigned __int8 *)(a2 + 24);
  return result;
}

const char *_outAlterTableMoveAllStmt_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a2 + 8);
  if (v4) {
    *(void *)(a1 + 24) = pstrdup(v4);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 16);
  if (v5 < 0x32) {
    int v6 = v5 + 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    uint64_t v8 = *(int *)(v7 + 4);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = palloc(8 * v8);
    if (*(void *)(a1 + 40))
    {
      unint64_t v9 = 0;
      int v10 = 1;
      do
      {
        uint64_t v11 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v11);
        *(void *)(*(void *)(a1 + 48) + 8 * v9) = v11;
        _outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v9), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v9), node__init);
        unint64_t v9 = v10++;
      }
      while (*(void *)(a1 + 40) > v9);
    }
  }
  result = *(const char **)(a2 + 32);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 56) = result;
  }
  *(_DWORD *)(a1 + 64) = *(unsigned __int8 *)(a2 + 40);
  return result;
}

const char *_outSecLabelStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0x32) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  if (*(void *)(a2 + 8))
  {
    uint64_t v6 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v6);
    *(void *)(a1 + 32) = v6;
    _outNode_0(v6, *(void *)(a2 + 8), node__init);
  }
  uint64_t v8 = *(const char **)(a2 + 16);
  if (v8) {
    *(void *)(a1 + 40) = pstrdup(v8);
  }
  result = *(const char **)(a2 + 24);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 48) = result;
  }
  return result;
}

const char *_outCreateForeignTableStmt_0(void *a1, uint64_t a2)
{
  uint64_t v4 = palloc(0x98uLL);
  pg_query__create_stmt__init(v4);
  _outCreateStmt_0(v4, a2);
  a1[3] = v4;
  result = *(const char **)(a2 + 104);
  if (result)
  {
    result = (const char *)pstrdup(result);
    a1[4] = result;
  }
  uint64_t v6 = *(void *)(a2 + 112);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    a1[5] = v7;
    result = (const char *)palloc(8 * v7);
    a1[6] = result;
    if (a1[5])
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v10);
        *(void *)(a1[6] + 8 * v8) = v10;
        result = (const char *)_outNode_0(*(void *)(a1[6] + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 112) + 16) + 8 * v8), node__init);
        unint64_t v8 = v9++;
      }
      while (a1[5] > v8);
    }
  }
  return result;
}

const char *_outImportForeignSchemaStmt_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a2 + 8);
  if (v4) {
    *(void *)(a1 + 24) = pstrdup(v4);
  }
  int v5 = *(const char **)(a2 + 16);
  if (v5) {
    *(void *)(a1 + 32) = pstrdup(v5);
  }
  result = *(const char **)(a2 + 24);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 40) = result;
  }
  unsigned int v7 = *(_DWORD *)(a2 + 32);
  if (v7 < 3) {
    int v8 = v7 + 1;
  }
  else {
    int v8 = -1;
  }
  *(_DWORD *)(a1 + 48) = v8;
  uint64_t v9 = *(void *)(a2 + 40);
  if (v9)
  {
    uint64_t v10 = *(int *)(v9 + 4);
    *(void *)(a1 + 56) = v10;
    result = (const char *)palloc(8 * v10);
    *(void *)(a1 + 64) = result;
    if (*(void *)(a1 + 56))
    {
      unint64_t v11 = 0;
      int v12 = 1;
      do
      {
        uint64_t v13 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v13);
        *(void *)(*(void *)(a1 + 64) + 8 * v11) = v13;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v11), *(void *)(*(void *)(*(void *)(a2 + 40) + 16) + 8 * v11), node__init);
        unint64_t v11 = v12++;
      }
      while (*(void *)(a1 + 56) > v11);
    }
  }
  uint64_t v15 = *(void *)(a2 + 48);
  if (v15)
  {
    uint64_t v16 = *(int *)(v15 + 4);
    *(void *)(a1 + 72) = v16;
    result = (const char *)palloc(8 * v16);
    *(void *)(a1 + 80) = result;
    if (*(void *)(a1 + 72))
    {
      unint64_t v17 = 0;
      int v18 = 1;
      do
      {
        uint64_t v19 = palloc(0x28uLL);
        double v20 = pg_query__node__init(v19);
        *(void *)(*(void *)(a1 + 80) + 8 * v17) = v19;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 80) + 8 * v17), *(void *)(*(void *)(*(void *)(a2 + 48) + 16) + 8 * v17), v20);
        unint64_t v17 = v18++;
      }
      while (*(void *)(a1 + 72) > v17);
    }
  }
  return result;
}

const char *_outAlterExtensionContentsStmt_0(uint64_t a1, uint64_t a2)
{
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 20);
  if (v5 < 0x32) {
    int v6 = v5 + 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(a1 + 36) = v6;
  if (*(void *)(a2 + 24))
  {
    uint64_t v7 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v7);
    *(void *)(a1 + 40) = v7;
    uint64_t v9 = *(void *)(a2 + 24);
    return (const char *)_outNode_0(v7, v9, node__init);
  }
  return result;
}

const char *_outCreateEventTrigStmt_0(void *a1, void *a2)
{
  uint64_t v4 = (const char *)a2[1];
  if (v4) {
    a1[3] = pstrdup(v4);
  }
  result = (const char *)a2[2];
  if (result)
  {
    result = (const char *)pstrdup(result);
    a1[4] = result;
  }
  uint64_t v6 = a2[3];
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    a1[5] = v7;
    result = (const char *)palloc(8 * v7);
    a1[6] = result;
    if (a1[5])
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v10);
        *(void *)(a1[6] + 8 * v8) = v10;
        result = (const char *)_outNode_0(*(void *)(a1[6] + 8 * v8), *(void *)(*(void *)(a2[3] + 16) + 8 * v8), node__init);
        unint64_t v8 = v9++;
      }
      while (a1[5] > v8);
    }
  }
  uint64_t v12 = a2[4];
  if (v12)
  {
    uint64_t v13 = *(int *)(v12 + 4);
    a1[7] = v13;
    result = (const char *)palloc(8 * v13);
    a1[8] = result;
    if (a1[7])
    {
      unint64_t v14 = 0;
      int v15 = 1;
      do
      {
        uint64_t v16 = palloc(0x28uLL);
        double v17 = pg_query__node__init(v16);
        *(void *)(a1[8] + 8 * v14) = v16;
        result = (const char *)_outNode_0(*(void *)(a1[8] + 8 * v14), *(void *)(*(void *)(a2[4] + 16) + 8 * v14), v17);
        unint64_t v14 = v15++;
      }
      while (a1[7] > v14);
    }
  }
  return result;
}

char *_outAlterEventTrigStmt_0(uint64_t a1, uint64_t a2)
{
  result = *(char **)(a2 + 8);
  if (result)
  {
    result = (char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    result = (char *)palloc(2uLL);
    *(void *)(a1 + 32) = result;
    char *result = *(unsigned char *)(a2 + 16);
    *(unsigned char *)(*(void *)(a1 + 32) + 1) = 0;
  }
  return result;
}

char *_outRefreshMatViewStmt_0(char *result, uint64_t a2)
{
  *((_DWORD *)result + 6) = *(unsigned __int8 *)(a2 + 4);
  *((_DWORD *)result + 7) = *(unsigned __int8 *)(a2 + 5);
  if (*(void *)(a2 + 8))
  {
    uint64_t v3 = result;
    uint64_t v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    result = _outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *((void *)v3 + 4) = v4;
  }
  return result;
}

const char *_outReplicaIdentityStmt_0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 4))
  {
    uint64_t v4 = (unsigned char *)palloc(2uLL);
    *(void *)(a1 + 24) = v4;
    *uint64_t v4 = *(unsigned char *)(a2 + 4);
    *(unsigned char *)(*(void *)(a1 + 24) + 1) = 0;
  }
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  return result;
}

const char *_outAlterSystemStmt_0(const char *result, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    uint64_t v3 = result;
    uint64_t v4 = (_OWORD *)palloc(0x40uLL);
    pg_query__variable_set_stmt__init(v4);
    result = _outVariableSetStmt_0((uint64_t)v4, *(void *)(a2 + 8));
    *((void *)v3 + 3) = v4;
  }
  return result;
}

const char *_outCreatePolicyStmt_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a2 + 8);
  if (v4) {
    *(void *)(a1 + 24) = pstrdup(v4);
  }
  if (*(void *)(a2 + 16))
  {
    unsigned int v5 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v5);
    _outRangeVar_0((uint64_t)v5, *(void *)(a2 + 16));
    *(void *)(a1 + 32) = v5;
  }
  result = *(const char **)(a2 + 24);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 40) = result;
  }
  *(_DWORD *)(a1 + 48) = *(unsigned __int8 *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  if (v7)
  {
    uint64_t v8 = *(int *)(v7 + 4);
    *(void *)(a1 + 56) = v8;
    result = (const char *)palloc(8 * v8);
    *(void *)(a1 + 64) = result;
    if (*(void *)(a1 + 56))
    {
      unint64_t v9 = 0;
      int v10 = 1;
      do
      {
        uint64_t v11 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v11);
        *(void *)(*(void *)(a1 + 64) + 8 * v9) = v11;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v9), *(void *)(*(void *)(*(void *)(a2 + 40) + 16) + 8 * v9), node__init);
        unint64_t v9 = v10++;
      }
      while (*(void *)(a1 + 56) > v9);
    }
  }
  if (*(void *)(a2 + 48))
  {
    uint64_t v13 = palloc(0x28uLL);
    double v14 = pg_query__node__init(v13);
    *(void *)(a1 + 72) = v13;
    result = (const char *)_outNode_0(v13, *(void *)(a2 + 48), v14);
  }
  if (*(void *)(a2 + 56))
  {
    uint64_t v15 = palloc(0x28uLL);
    double v16 = pg_query__node__init(v15);
    *(void *)(a1 + 80) = v15;
    uint64_t v17 = *(void *)(a2 + 56);
    return (const char *)_outNode_0(v15, v17, v16);
  }
  return result;
}

const char *_outAlterPolicyStmt_0(void *a1, void *a2)
{
  result = (const char *)a2[1];
  if (result)
  {
    result = (const char *)pstrdup(result);
    a1[3] = result;
  }
  if (a2[2])
  {
    unsigned int v5 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v5);
    result = _outRangeVar_0((uint64_t)v5, a2[2]);
    a1[4] = v5;
  }
  uint64_t v6 = a2[3];
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    a1[5] = v7;
    result = (const char *)palloc(8 * v7);
    a1[6] = result;
    if (a1[5])
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v10);
        *(void *)(a1[6] + 8 * v8) = v10;
        result = (const char *)_outNode_0(*(void *)(a1[6] + 8 * v8), *(void *)(*(void *)(a2[3] + 16) + 8 * v8), node__init);
        unint64_t v8 = v9++;
      }
      while (a1[5] > v8);
    }
  }
  if (a2[4])
  {
    uint64_t v12 = palloc(0x28uLL);
    double v13 = pg_query__node__init(v12);
    a1[7] = v12;
    result = (const char *)_outNode_0(v12, a2[4], v13);
  }
  if (a2[5])
  {
    uint64_t v14 = palloc(0x28uLL);
    double v15 = pg_query__node__init(v14);
    a1[8] = v14;
    uint64_t v16 = a2[5];
    return (const char *)_outNode_0(v14, v16, v15);
  }
  return result;
}

const char *_outCreateTransformStmt_0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(unsigned __int8 *)(a2 + 4);
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x68uLL);
    pg_query__type_name__init(v4);
    _outTypeName_0(v4, *(void *)(a2 + 8));
    *(void *)(a1 + 32) = v4;
  }
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 40) = result;
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v6 = (_OWORD *)palloc(0x40uLL);
    pg_query__object_with_args__init(v6);
    result = (const char *)_outVacuumStmt_0((uint64_t)v6, *(void *)(a2 + 24));
    *(void *)(a1 + 48) = v6;
  }
  if (*(void *)(a2 + 32))
  {
    uint64_t v7 = (_OWORD *)palloc(0x40uLL);
    pg_query__object_with_args__init(v7);
    result = (const char *)_outVacuumStmt_0((uint64_t)v7, *(void *)(a2 + 32));
    *(void *)(a1 + 56) = v7;
  }
  return result;
}

char *_outCreateAmStmt_0(void *a1, uint64_t a2)
{
  result = *(char **)(a2 + 8);
  if (result)
  {
    result = (char *)pstrdup(result);
    a1[3] = result;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    a1[4] = v6;
    result = (char *)palloc(8 * v6);
    a1[5] = result;
    if (a1[4])
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(a1[5] + 8 * v7) = v9;
        result = (char *)_outNode_0(*(void *)(a1[5] + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (a1[4] > v7);
    }
  }
  if (*(unsigned char *)(a2 + 24))
  {
    result = (char *)palloc(2uLL);
    a1[6] = result;
    char *result = *(unsigned char *)(a2 + 24);
    *(unsigned char *)(a1[6] + 1) = 0;
  }
  return result;
}

const char *_outCreatePublicationStmt_0(uint64_t a1, uint64_t a2)
{
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(a1 + 32) = v6;
    result = (const char *)palloc(8 * v6);
    *(void *)(a1 + 40) = result;
    if (*(void *)(a1 + 32))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(a1 + 40) + 8 * v7) = v9;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(a1 + 32) > v7);
    }
  }
  uint64_t v11 = *(void *)(a2 + 24);
  if (v11)
  {
    uint64_t v12 = *(int *)(v11 + 4);
    *(void *)(a1 + 48) = v12;
    result = (const char *)palloc(8 * v12);
    *(void *)(a1 + 56) = result;
    if (*(void *)(a1 + 48))
    {
      unint64_t v13 = 0;
      int v14 = 1;
      do
      {
        uint64_t v15 = palloc(0x28uLL);
        double v16 = pg_query__node__init(v15);
        *(void *)(*(void *)(a1 + 56) + 8 * v13) = v15;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 56) + 8 * v13), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v13), v16);
        unint64_t v13 = v14++;
      }
      while (*(void *)(a1 + 48) > v13);
    }
  }
  *(_DWORD *)(a1 + 64) = *(unsigned __int8 *)(a2 + 32);
  return result;
}

const char *_outAlterPublicationStmt_0(uint64_t a1, uint64_t a2)
{
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(a1 + 32) = v6;
    result = (const char *)palloc(8 * v6);
    *(void *)(a1 + 40) = result;
    if (*(void *)(a1 + 32))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(a1 + 40) + 8 * v7) = v9;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(a1 + 32) > v7);
    }
  }
  uint64_t v11 = *(void *)(a2 + 24);
  if (v11)
  {
    uint64_t v12 = *(int *)(v11 + 4);
    *(void *)(a1 + 48) = v12;
    result = (const char *)palloc(8 * v12);
    *(void *)(a1 + 56) = result;
    if (*(void *)(a1 + 48))
    {
      unint64_t v13 = 0;
      int v14 = 1;
      do
      {
        uint64_t v15 = palloc(0x28uLL);
        double v16 = pg_query__node__init(v15);
        *(void *)(*(void *)(a1 + 56) + 8 * v13) = v15;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 56) + 8 * v13), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v13), v16);
        unint64_t v13 = v14++;
      }
      while (*(void *)(a1 + 48) > v13);
    }
  }
  *(_DWORD *)(a1 + 64) = *(unsigned __int8 *)(a2 + 32);
  unsigned int v17 = *(_DWORD *)(a2 + 36);
  if (v17 < 4) {
    int v18 = v17 + 1;
  }
  else {
    int v18 = -1;
  }
  *(_DWORD *)(a1 + 68) = v18;
  return result;
}

const char *_outAlterSubscriptionStmt_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 5) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  uint64_t v6 = *(const char **)(a2 + 8);
  if (v6) {
    *(void *)(a1 + 32) = pstrdup(v6);
  }
  result = *(const char **)(a2 + 16);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 40) = result;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  if (v8)
  {
    uint64_t v9 = *(int *)(v8 + 4);
    *(void *)(a1 + 48) = v9;
    result = (const char *)palloc(8 * v9);
    *(void *)(a1 + 56) = result;
    if (*(void *)(a1 + 48))
    {
      unint64_t v10 = 0;
      int v11 = 1;
      do
      {
        uint64_t v12 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v12);
        *(void *)(*(void *)(a1 + 56) + 8 * v10) = v12;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 56) + 8 * v10), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v10), node__init);
        unint64_t v10 = v11++;
      }
      while (*(void *)(a1 + 48) > v10);
    }
  }
  uint64_t v14 = *(void *)(a2 + 32);
  if (v14)
  {
    uint64_t v15 = *(int *)(v14 + 4);
    *(void *)(a1 + 64) = v15;
    result = (const char *)palloc(8 * v15);
    *(void *)(a1 + 72) = result;
    if (*(void *)(a1 + 64))
    {
      unint64_t v16 = 0;
      int v17 = 1;
      do
      {
        uint64_t v18 = palloc(0x28uLL);
        double v19 = pg_query__node__init(v18);
        *(void *)(*(void *)(a1 + 72) + 8 * v16) = v18;
        result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 72) + 8 * v16), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v16), v19);
        unint64_t v16 = v17++;
      }
      while (*(void *)(a1 + 64) > v16);
    }
  }
  return result;
}

const char *_outDropSubscriptionStmt_0(uint64_t a1, uint64_t a2)
{
  result = *(const char **)(a2 + 8);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  *(_DWORD *)(a1 + 32) = *(unsigned __int8 *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 20);
  if (v5 == 1) {
    int v6 = 2;
  }
  else {
    int v6 = -1;
  }
  if (v5) {
    int v7 = v6;
  }
  else {
    int v7 = 1;
  }
  *(_DWORD *)(a1 + 36) = v7;
  return result;
}

const char *_outCreateStatsStmt_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = palloc(8 * v5);
    if (*(void *)(a1 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(a1 + 32) + 8 * v6) = v8;
        _outNode_0(*(void *)(*(void *)(a1 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(a1 + 24) > v6);
    }
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = palloc(8 * v11);
    if (*(void *)(a1 + 40))
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double v15 = pg_query__node__init(v14);
        *(void *)(*(void *)(a1 + 48) + 8 * v12) = v14;
        _outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v12), v15);
        unint64_t v12 = v13++;
      }
      while (*(void *)(a1 + 40) > v12);
    }
  }
  uint64_t v16 = *(void *)(a2 + 24);
  if (v16)
  {
    uint64_t v17 = *(int *)(v16 + 4);
    *(void *)(a1 + 56) = v17;
    *(void *)(a1 + 64) = palloc(8 * v17);
    if (*(void *)(a1 + 56))
    {
      unint64_t v18 = 0;
      int v19 = 1;
      do
      {
        uint64_t v20 = palloc(0x28uLL);
        double v21 = pg_query__node__init(v20);
        *(void *)(*(void *)(a1 + 64) + 8 * v18) = v20;
        _outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v18), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v18), v21);
        unint64_t v18 = v19++;
      }
      while (*(void *)(a1 + 56) > v18);
    }
  }
  uint64_t v22 = *(void *)(a2 + 32);
  if (v22)
  {
    uint64_t v23 = *(int *)(v22 + 4);
    *(void *)(a1 + 72) = v23;
    *(void *)(a1 + 80) = palloc(8 * v23);
    if (*(void *)(a1 + 72))
    {
      unint64_t v24 = 0;
      int v25 = 1;
      do
      {
        uint64_t v26 = palloc(0x28uLL);
        double v27 = pg_query__node__init(v26);
        *(void *)(*(void *)(a1 + 80) + 8 * v24) = v26;
        _outNode_0(*(void *)(*(void *)(a1 + 80) + 8 * v24), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v24), v27);
        unint64_t v24 = v25++;
      }
      while (*(void *)(a1 + 72) > v24);
    }
  }
  result = *(const char **)(a2 + 40);
  if (result)
  {
    result = (const char *)pstrdup(result);
    *(void *)(a1 + 88) = result;
  }
  *(_DWORD *)(a1 + 96) = *(unsigned __int8 *)(a2 + 48);
  return result;
}

uint64_t _outCallStmt_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = (_OWORD *)palloc(0x70uLL);
    pg_query__func_call__init(v4);
    result = _outFuncCall_0((uint64_t)v4, *(void *)(a2 + 8));
    *(void *)(v3 + 24) = v4;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v5 = palloc(0x58uLL);
    pg_query__func_expr__init(v5);
    result = _outFuncExpr_0(v5, *(void *)(a2 + 16));
    *(void *)(v3 + 32) = v5;
  }
  return result;
}

uint64_t _outAExpr_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0x10) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(result + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    *(void *)(result + 32) = v7;
    result = palloc(8 * v7);
    *(void *)(v3 + 40) = result;
    if (*(void *)(v3 + 32))
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v10);
        *(void *)(*(void *)(v3 + 40) + 8 * v8) = v10;
        result = _outNode_0(*(void *)(*(void *)(v3 + 40) + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v8), node__init);
        unint64_t v8 = v9++;
      }
      while (*(void *)(v3 + 32) > v8);
    }
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v12 = palloc(0x28uLL);
    double v13 = pg_query__node__init(v12);
    *(void *)(v3 + 48) = v12;
    result = _outNode_0(v12, *(void *)(a2 + 16), v13);
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v14 = palloc(0x28uLL);
    double v15 = pg_query__node__init(v14);
    *(void *)(v3 + 56) = v14;
    result = _outNode_0(v14, *(void *)(a2 + 24), v15);
  }
  *(_DWORD *)(v3 + 64) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t _outColumnRef_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    result = palloc(8 * v5);
    *(void *)(v3 + 32) = result;
    if (*(void *)(v3 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v3 + 32) + 8 * v6) = v8;
        result = _outNode_0(*(void *)(*(void *)(v3 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v3 + 24) > v6);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t _outAConst_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = palloc(0x28uLL);
  double node__init = pg_query__node__init(v4);
  *(void *)(a1 + 24) = v4;
  uint64_t result = _outNode_0(v4, a2 + 8, node__init);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t _outFuncCall_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    uint64_t result = palloc(8 * v5);
    *(void *)(v3 + 32) = result;
    if (*(void *)(v3 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v3 + 32) + 8 * v6) = v8;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v3 + 24) > v6);
    }
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    *(void *)(v3 + 40) = v11;
    uint64_t result = palloc(8 * v11);
    *(void *)(v3 + 48) = result;
    if (*(void *)(v3 + 40))
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double v15 = pg_query__node__init(v14);
        *(void *)(*(void *)(v3 + 48) + 8 * v12) = v14;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 48) + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v12), v15);
        unint64_t v12 = v13++;
      }
      while (*(void *)(v3 + 40) > v12);
    }
  }
  uint64_t v16 = *(void *)(a2 + 24);
  if (v16)
  {
    uint64_t v17 = *(int *)(v16 + 4);
    *(void *)(v3 + 56) = v17;
    uint64_t result = palloc(8 * v17);
    *(void *)(v3 + 64) = result;
    if (*(void *)(v3 + 56))
    {
      unint64_t v18 = 0;
      int v19 = 1;
      do
      {
        uint64_t v20 = palloc(0x28uLL);
        double v21 = pg_query__node__init(v20);
        *(void *)(*(void *)(v3 + 64) + 8 * v18) = v20;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 64) + 8 * v18), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v18), v21);
        unint64_t v18 = v19++;
      }
      while (*(void *)(v3 + 56) > v18);
    }
  }
  if (*(void *)(a2 + 32))
  {
    uint64_t v22 = palloc(0x28uLL);
    double v23 = pg_query__node__init(v22);
    *(void *)(v3 + 72) = v22;
    uint64_t result = _outNode_0(v22, *(void *)(a2 + 32), v23);
  }
  *(_DWORD *)(v3 + 80) = *(unsigned __int8 *)(a2 + 40);
  *(_DWORD *)(v3 + 84) = *(unsigned __int8 *)(a2 + 41);
  *(_DWORD *)(v3 + 88) = *(unsigned __int8 *)(a2 + 42);
  *(_DWORD *)(v3 + 92) = *(unsigned __int8 *)(a2 + 43);
  if (*(void *)(a2 + 48))
  {
    uint64_t v24 = palloc(0x68uLL);
    pg_query__window_def__init(v24);
    uint64_t result = (uint64_t)_outWindowDef_0(v24, *(void *)(a2 + 48));
    *(void *)(v3 + 96) = v24;
  }
  *(_DWORD *)(v3 + 104) = *(_DWORD *)(a2 + 56);
  return result;
}

uint64_t _outAIndices_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  *(_DWORD *)(result + 24) = *(unsigned __int8 *)(a2 + 4);
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v4);
    *(void *)(v3 + 32) = v4;
    uint64_t result = _outNode_0(v4, *(void *)(a2 + 8), node__init);
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v6 = palloc(0x28uLL);
    double v7 = pg_query__node__init(v6);
    *(void *)(v3 + 40) = v6;
    uint64_t v8 = *(void *)(a2 + 16);
    return _outNode_0(v6, v8, v7);
  }
  return result;
}

const char *_outResTarget_0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(const char **)(a2 + 8);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(a1 + 32) = v6;
    uint64_t result = (const char *)palloc(8 * v6);
    *(void *)(a1 + 40) = result;
    if (*(void *)(a1 + 32))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(a1 + 40) + 8 * v7) = v9;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(a1 + 32) > v7);
    }
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v11 = palloc(0x28uLL);
    double v12 = pg_query__node__init(v11);
    *(void *)(a1 + 48) = v11;
    uint64_t result = (const char *)_outNode_0(v11, *(void *)(a2 + 24), v12);
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t _outTypeCast_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v4);
    *(void *)(v3 + 24) = v4;
    uint64_t result = _outNode_0(v4, *(void *)(a2 + 8), node__init);
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v6 = palloc(0x68uLL);
    pg_query__type_name__init(v6);
    uint64_t result = _outTypeName_0(v6, *(void *)(a2 + 16));
    *(void *)(v3 + 32) = v6;
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t _outCollateClause_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v4);
    *(void *)(v3 + 24) = v4;
    uint64_t result = _outNode_0(v4, *(void *)(a2 + 8), node__init);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    *(void *)(v3 + 32) = v7;
    uint64_t result = palloc(8 * v7);
    *(void *)(v3 + 40) = result;
    if (*(void *)(v3 + 32))
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double v11 = pg_query__node__init(v10);
        *(void *)(*(void *)(v3 + 40) + 8 * v8) = v10;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 40) + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v8), v11);
        unint64_t v8 = v9++;
      }
      while (*(void *)(v3 + 32) > v8);
    }
  }
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t _outSortBy_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v4);
    *(void *)(v3 + 24) = v4;
    uint64_t result = _outNode_0(v4, *(void *)(a2 + 8), node__init);
  }
  unsigned int v6 = *(_DWORD *)(a2 + 16);
  if (v6 < 4) {
    int v7 = v6 + 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v3 + 32) = v7;
  unsigned int v8 = *(_DWORD *)(a2 + 20);
  if (v8 < 3) {
    int v9 = v8 + 1;
  }
  else {
    int v9 = -1;
  }
  *(_DWORD *)(v3 + 36) = v9;
  uint64_t v10 = *(void *)(a2 + 24);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    *(void *)(v3 + 40) = v11;
    uint64_t result = palloc(8 * v11);
    *(void *)(v3 + 48) = result;
    if (*(void *)(v3 + 40))
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double v15 = pg_query__node__init(v14);
        *(void *)(*(void *)(v3 + 48) + 8 * v12) = v14;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 48) + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v12), v15);
        unint64_t v12 = v13++;
      }
      while (*(void *)(v3 + 40) > v12);
    }
  }
  *(_DWORD *)(v3 + 56) = *(_DWORD *)(a2 + 32);
  return result;
}

const char *_outWindowDef_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a2 + 8);
  if (v4) {
    *(void *)(a1 + 24) = pstrdup(v4);
  }
  uint64_t result = *(const char **)(a2 + 16);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    *(void *)(a1 + 40) = v7;
    uint64_t result = (const char *)palloc(8 * v7);
    *(void *)(a1 + 48) = result;
    if (*(void *)(a1 + 40))
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v10);
        *(void *)(*(void *)(a1 + 48) + 8 * v8) = v10;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v8), node__init);
        unint64_t v8 = v9++;
      }
      while (*(void *)(a1 + 40) > v8);
    }
  }
  uint64_t v12 = *(void *)(a2 + 32);
  if (v12)
  {
    uint64_t v13 = *(int *)(v12 + 4);
    *(void *)(a1 + 56) = v13;
    uint64_t result = (const char *)palloc(8 * v13);
    *(void *)(a1 + 64) = result;
    if (*(void *)(a1 + 56))
    {
      unint64_t v14 = 0;
      int v15 = 1;
      do
      {
        uint64_t v16 = palloc(0x28uLL);
        double v17 = pg_query__node__init(v16);
        *(void *)(*(void *)(a1 + 64) + 8 * v14) = v16;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v14), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v14), v17);
        unint64_t v14 = v15++;
      }
      while (*(void *)(a1 + 56) > v14);
    }
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 40);
  if (*(void *)(a2 + 48))
  {
    uint64_t v18 = palloc(0x28uLL);
    double v19 = pg_query__node__init(v18);
    *(void *)(a1 + 80) = v18;
    uint64_t result = (const char *)_outNode_0(v18, *(void *)(a2 + 48), v19);
  }
  if (*(void *)(a2 + 56))
  {
    uint64_t v20 = palloc(0x28uLL);
    double v21 = pg_query__node__init(v20);
    *(void *)(a1 + 88) = v20;
    uint64_t result = (const char *)_outNode_0(v20, *(void *)(a2 + 56), v21);
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 64);
  return result;
}

const char *_outRangeSubselect_0(const char *result, uint64_t a2)
{
  uint64_t v3 = result;
  *((_DWORD *)result + 6) = *(unsigned __int8 *)(a2 + 4);
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v4);
    *((void *)v3 + 4) = v4;
    uint64_t result = (const char *)_outNode_0(v4, *(void *)(a2 + 8), node__init);
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v6 = (_OWORD *)palloc(0x30uLL);
    pg_query__alias__init(v6);
    uint64_t result = _outAlias_0(v6, *(void *)(a2 + 16));
    *((void *)v3 + 5) = v6;
  }
  return result;
}

uint64_t _outRangeFunction_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  *(_DWORD *)(result + 24) = *(unsigned __int8 *)(a2 + 4);
  *(_DWORD *)(result + 28) = *(unsigned __int8 *)(a2 + 5);
  *(_DWORD *)(result + 32) = *(unsigned __int8 *)(a2 + 6);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 40) = v5;
    uint64_t result = palloc(8 * v5);
    v3[6] = result;
    if (v3[5])
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(v3[6] + 8 * v6) = v8;
        uint64_t result = _outNode_0(*(void *)(v3[6] + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (v3[5] > v6);
    }
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v10 = (_OWORD *)palloc(0x30uLL);
    pg_query__alias__init(v10);
    uint64_t result = (uint64_t)_outAlias_0(v10, *(void *)(a2 + 16));
    v3[7] = v10;
  }
  uint64_t v11 = *(void *)(a2 + 24);
  if (v11)
  {
    uint64_t v12 = *(int *)(v11 + 4);
    v3[8] = v12;
    uint64_t result = palloc(8 * v12);
    v3[9] = result;
    if (v3[8])
    {
      unint64_t v13 = 0;
      int v14 = 1;
      do
      {
        uint64_t v15 = palloc(0x28uLL);
        double v16 = pg_query__node__init(v15);
        *(void *)(v3[9] + 8 * v13) = v15;
        uint64_t result = _outNode_0(*(void *)(v3[9] + 8 * v13), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v13), v16);
        unint64_t v13 = v14++;
      }
      while (v3[8] > v13);
    }
  }
  return result;
}

uint64_t _outRangeTableSample_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v4);
    *(void *)(v3 + 24) = v4;
    uint64_t result = _outNode_0(v4, *(void *)(a2 + 8), node__init);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    *(void *)(v3 + 32) = v7;
    uint64_t result = palloc(8 * v7);
    *(void *)(v3 + 40) = result;
    if (*(void *)(v3 + 32))
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double v11 = pg_query__node__init(v10);
        *(void *)(*(void *)(v3 + 40) + 8 * v8) = v10;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 40) + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v8), v11);
        unint64_t v8 = v9++;
      }
      while (*(void *)(v3 + 32) > v8);
    }
  }
  uint64_t v12 = *(void *)(a2 + 24);
  if (v12)
  {
    uint64_t v13 = *(int *)(v12 + 4);
    *(void *)(v3 + 48) = v13;
    uint64_t result = palloc(8 * v13);
    *(void *)(v3 + 56) = result;
    if (*(void *)(v3 + 48))
    {
      unint64_t v14 = 0;
      int v15 = 1;
      do
      {
        uint64_t v16 = palloc(0x28uLL);
        double v17 = pg_query__node__init(v16);
        *(void *)(*(void *)(v3 + 56) + 8 * v14) = v16;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 56) + 8 * v14), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v14), v17);
        unint64_t v14 = v15++;
      }
      while (*(void *)(v3 + 48) > v14);
    }
  }
  if (*(void *)(a2 + 32))
  {
    uint64_t v18 = palloc(0x28uLL);
    double v19 = pg_query__node__init(v18);
    *(void *)(v3 + 64) = v18;
    uint64_t result = _outNode_0(v18, *(void *)(a2 + 32), v19);
  }
  *(_DWORD *)(v3 + 72) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t _outRangeTableFunc_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  *(_DWORD *)(result + 24) = *(unsigned __int8 *)(a2 + 4);
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v4);
    *(void *)(v3 + 32) = v4;
    uint64_t result = _outNode_0(v4, *(void *)(a2 + 8), node__init);
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v6 = palloc(0x28uLL);
    double v7 = pg_query__node__init(v6);
    *(void *)(v3 + 40) = v6;
    uint64_t result = _outNode_0(v6, *(void *)(a2 + 16), v7);
  }
  uint64_t v8 = *(void *)(a2 + 24);
  if (v8)
  {
    uint64_t v9 = *(int *)(v8 + 4);
    *(void *)(v3 + 48) = v9;
    uint64_t result = palloc(8 * v9);
    *(void *)(v3 + 56) = result;
    if (*(void *)(v3 + 48))
    {
      unint64_t v10 = 0;
      int v11 = 1;
      do
      {
        uint64_t v12 = palloc(0x28uLL);
        double v13 = pg_query__node__init(v12);
        *(void *)(*(void *)(v3 + 56) + 8 * v10) = v12;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 56) + 8 * v10), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v10), v13);
        unint64_t v10 = v11++;
      }
      while (*(void *)(v3 + 48) > v10);
    }
  }
  uint64_t v14 = *(void *)(a2 + 32);
  if (v14)
  {
    uint64_t v15 = *(int *)(v14 + 4);
    *(void *)(v3 + 64) = v15;
    uint64_t result = palloc(8 * v15);
    *(void *)(v3 + 72) = result;
    if (*(void *)(v3 + 64))
    {
      unint64_t v16 = 0;
      int v17 = 1;
      do
      {
        uint64_t v18 = palloc(0x28uLL);
        double v19 = pg_query__node__init(v18);
        *(void *)(*(void *)(v3 + 72) + 8 * v16) = v18;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 72) + 8 * v16), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v16), v19);
        unint64_t v16 = v17++;
      }
      while (*(void *)(v3 + 64) > v16);
    }
  }
  if (*(void *)(a2 + 40))
  {
    uint64_t v20 = (_OWORD *)palloc(0x30uLL);
    pg_query__alias__init(v20);
    uint64_t result = (uint64_t)_outAlias_0(v20, *(void *)(a2 + 40));
    *(void *)(v3 + 80) = v20;
  }
  *(_DWORD *)(v3 + 88) = *(_DWORD *)(a2 + 48);
  return result;
}

const char *_outRangeTableFuncCol_0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(const char **)(a2 + 8);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v5 = palloc(0x68uLL);
    pg_query__type_name__init(v5);
    uint64_t result = (const char *)_outTypeName_0(v5, *(void *)(a2 + 16));
    *(void *)(a1 + 32) = v5;
  }
  *(_DWORD *)(a1 + 40) = *(unsigned __int8 *)(a2 + 24);
  *(_DWORD *)(a1 + 44) = *(unsigned __int8 *)(a2 + 25);
  if (*(void *)(a2 + 32))
  {
    uint64_t v6 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v6);
    *(void *)(a1 + 48) = v6;
    uint64_t result = (const char *)_outNode_0(v6, *(void *)(a2 + 32), node__init);
  }
  if (*(void *)(a2 + 40))
  {
    uint64_t v8 = palloc(0x28uLL);
    double v9 = pg_query__node__init(v8);
    *(void *)(a1 + 56) = v8;
    uint64_t result = (const char *)_outNode_0(v8, *(void *)(a2 + 40), v9);
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t _outTypeName_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    uint64_t result = palloc(8 * v5);
    *(void *)(v3 + 32) = result;
    if (*(void *)(v3 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v3 + 32) + 8 * v6) = v8;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v3 + 24) > v6);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v3 + 44) = *(unsigned __int8 *)(a2 + 20);
  *(_DWORD *)(v3 + 48) = *(unsigned __int8 *)(a2 + 21);
  uint64_t v10 = *(void *)(a2 + 24);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    *(void *)(v3 + 56) = v11;
    uint64_t result = palloc(8 * v11);
    *(void *)(v3 + 64) = result;
    if (*(void *)(v3 + 56))
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double v15 = pg_query__node__init(v14);
        *(void *)(*(void *)(v3 + 64) + 8 * v12) = v14;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 64) + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v12), v15);
        unint64_t v12 = v13++;
      }
      while (*(void *)(v3 + 56) > v12);
    }
  }
  *(_DWORD *)(v3 + 72) = *(_DWORD *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 40);
  if (v16)
  {
    uint64_t v17 = *(int *)(v16 + 4);
    *(void *)(v3 + 80) = v17;
    uint64_t result = palloc(8 * v17);
    *(void *)(v3 + 88) = result;
    if (*(void *)(v3 + 80))
    {
      unint64_t v18 = 0;
      int v19 = 1;
      do
      {
        uint64_t v20 = palloc(0x28uLL);
        double v21 = pg_query__node__init(v20);
        *(void *)(*(void *)(v3 + 88) + 8 * v18) = v20;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 88) + 8 * v18), *(void *)(*(void *)(*(void *)(a2 + 40) + 16) + 8 * v18), v21);
        unint64_t v18 = v19++;
      }
      while (*(void *)(v3 + 80) > v18);
    }
  }
  *(_DWORD *)(v3 + 96) = *(_DWORD *)(a2 + 48);
  return result;
}

char *_outColumnDef_0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(char **)(a2 + 8);
  if (result)
  {
    uint64_t result = (char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v5 = palloc(0x68uLL);
    pg_query__type_name__init(v5);
    uint64_t result = (char *)_outTypeName_0(v5, *(void *)(a2 + 16));
    *(void *)(a1 + 32) = v5;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 44) = *(unsigned __int8 *)(a2 + 28);
  *(_DWORD *)(a1 + 48) = *(unsigned __int8 *)(a2 + 29);
  *(_DWORD *)(a1 + 52) = *(unsigned __int8 *)(a2 + 30);
  if (*(unsigned char *)(a2 + 31))
  {
    uint64_t result = (char *)palloc(2uLL);
    *(void *)(a1 + 56) = result;
    char *result = *(unsigned char *)(a2 + 31);
    *(unsigned char *)(*(void *)(a1 + 56) + 1) = 0;
  }
  if (*(void *)(a2 + 32))
  {
    uint64_t v6 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v6);
    *(void *)(a1 + 64) = v6;
    uint64_t result = (char *)_outNode_0(v6, *(void *)(a2 + 32), node__init);
  }
  if (*(void *)(a2 + 40))
  {
    uint64_t v8 = palloc(0x28uLL);
    double v9 = pg_query__node__init(v8);
    *(void *)(a1 + 72) = v8;
    uint64_t result = (char *)_outNode_0(v8, *(void *)(a2 + 40), v9);
  }
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t result = (char *)palloc(2uLL);
    *(void *)(a1 + 80) = result;
    char *result = *(unsigned char *)(a2 + 48);
    *(unsigned char *)(*(void *)(a1 + 80) + 1) = 0;
  }
  if (*(void *)(a2 + 56))
  {
    uint64_t v10 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v10);
    uint64_t result = _outRangeVar_0((uint64_t)v10, *(void *)(a2 + 56));
    *(void *)(a1 + 88) = v10;
  }
  if (*(unsigned char *)(a2 + 64))
  {
    uint64_t result = (char *)palloc(2uLL);
    *(void *)(a1 + 96) = result;
    char *result = *(unsigned char *)(a2 + 64);
    *(unsigned char *)(*(void *)(a1 + 96) + 1) = 0;
  }
  if (*(void *)(a2 + 72))
  {
    uint64_t v11 = palloc(0x38uLL);
    pg_query__collate_clause__init(v11);
    uint64_t result = (char *)_outCollateClause_0(v11, *(void *)(a2 + 72));
    *(void *)(a1 + 104) = v11;
  }
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 88);
  if (v12)
  {
    uint64_t v13 = *(int *)(v12 + 4);
    *(void *)(a1 + 120) = v13;
    uint64_t result = (char *)palloc(8 * v13);
    *(void *)(a1 + 128) = result;
    if (*(void *)(a1 + 120))
    {
      unint64_t v14 = 0;
      int v15 = 1;
      do
      {
        uint64_t v16 = palloc(0x28uLL);
        double v17 = pg_query__node__init(v16);
        *(void *)(*(void *)(a1 + 128) + 8 * v14) = v16;
        uint64_t result = (char *)_outNode_0(*(void *)(*(void *)(a1 + 128) + 8 * v14), *(void *)(*(void *)(*(void *)(a2 + 88) + 16) + 8 * v14), v17);
        unint64_t v14 = v15++;
      }
      while (*(void *)(a1 + 120) > v14);
    }
  }
  uint64_t v18 = *(void *)(a2 + 96);
  if (v18)
  {
    uint64_t v19 = *(int *)(v18 + 4);
    *(void *)(a1 + 136) = v19;
    uint64_t result = (char *)palloc(8 * v19);
    *(void *)(a1 + 144) = result;
    if (*(void *)(a1 + 136))
    {
      unint64_t v20 = 0;
      int v21 = 1;
      do
      {
        uint64_t v22 = palloc(0x28uLL);
        double v23 = pg_query__node__init(v22);
        *(void *)(*(void *)(a1 + 144) + 8 * v20) = v22;
        uint64_t result = (char *)_outNode_0(*(void *)(*(void *)(a1 + 144) + 8 * v20), *(void *)(*(void *)(*(void *)(a2 + 96) + 16) + 8 * v20), v23);
        unint64_t v20 = v21++;
      }
      while (*(void *)(a1 + 136) > v20);
    }
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 104);
  return result;
}

const char *_outIndexElem_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a2 + 8);
  if (v4) {
    *(void *)(a1 + 24) = pstrdup(v4);
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v5 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v5);
    *(void *)(a1 + 32) = v5;
    _outNode_0(v5, *(void *)(a2 + 16), node__init);
  }
  uint64_t result = *(const char **)(a2 + 24);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 40) = result;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  if (v8)
  {
    uint64_t v9 = *(int *)(v8 + 4);
    *(void *)(a1 + 48) = v9;
    uint64_t result = (const char *)palloc(8 * v9);
    *(void *)(a1 + 56) = result;
    if (*(void *)(a1 + 48))
    {
      unint64_t v10 = 0;
      int v11 = 1;
      do
      {
        uint64_t v12 = palloc(0x28uLL);
        double v13 = pg_query__node__init(v12);
        *(void *)(*(void *)(a1 + 56) + 8 * v10) = v12;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 56) + 8 * v10), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v10), v13);
        unint64_t v10 = v11++;
      }
      while (*(void *)(a1 + 48) > v10);
    }
  }
  uint64_t v14 = *(void *)(a2 + 40);
  if (v14)
  {
    uint64_t v15 = *(int *)(v14 + 4);
    *(void *)(a1 + 64) = v15;
    uint64_t result = (const char *)palloc(8 * v15);
    *(void *)(a1 + 72) = result;
    if (*(void *)(a1 + 64))
    {
      unint64_t v16 = 0;
      int v17 = 1;
      do
      {
        uint64_t v18 = palloc(0x28uLL);
        double v19 = pg_query__node__init(v18);
        *(void *)(*(void *)(a1 + 72) + 8 * v16) = v18;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 72) + 8 * v16), *(void *)(*(void *)(*(void *)(a2 + 40) + 16) + 8 * v16), v19);
        unint64_t v16 = v17++;
      }
      while (*(void *)(a1 + 64) > v16);
    }
  }
  uint64_t v20 = *(void *)(a2 + 48);
  if (v20)
  {
    uint64_t v21 = *(int *)(v20 + 4);
    *(void *)(a1 + 80) = v21;
    uint64_t result = (const char *)palloc(8 * v21);
    *(void *)(a1 + 88) = result;
    if (*(void *)(a1 + 80))
    {
      unint64_t v22 = 0;
      int v23 = 1;
      do
      {
        uint64_t v24 = palloc(0x28uLL);
        double v25 = pg_query__node__init(v24);
        *(void *)(*(void *)(a1 + 88) + 8 * v22) = v24;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 88) + 8 * v22), *(void *)(*(void *)(*(void *)(a2 + 48) + 16) + 8 * v22), v25);
        unint64_t v22 = v23++;
      }
      while (*(void *)(a1 + 80) > v22);
    }
  }
  unsigned int v26 = *(_DWORD *)(a2 + 56);
  if (v26 < 4) {
    int v27 = v26 + 1;
  }
  else {
    int v27 = -1;
  }
  *(_DWORD *)(a1 + 96) = v27;
  unsigned int v28 = *(_DWORD *)(a2 + 60);
  if (v28 < 3) {
    int v29 = v28 + 1;
  }
  else {
    int v29 = -1;
  }
  *(_DWORD *)(a1 + 100) = v29;
  return result;
}

char *_outConstraint_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0xE) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  uint64_t v6 = *(const char **)(a2 + 8);
  if (v6) {
    *(void *)(a1 + 32) = pstrdup(v6);
  }
  *(_DWORD *)(a1 + 40) = *(unsigned __int8 *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(unsigned __int8 *)(a2 + 17);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 52) = *(unsigned __int8 *)(a2 + 24);
  if (*(void *)(a2 + 32))
  {
    uint64_t v7 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v7);
    *(void *)(a1 + 56) = v7;
    _outNode_0(v7, *(void *)(a2 + 32), node__init);
  }
  uint64_t v9 = *(const char **)(a2 + 40);
  if (v9) {
    *(void *)(a1 + 64) = pstrdup(v9);
  }
  if (*(unsigned char *)(a2 + 48))
  {
    unint64_t v10 = (unsigned char *)palloc(2uLL);
    *(void *)(a1 + 72) = v10;
    *unint64_t v10 = *(unsigned char *)(a2 + 48);
    *(unsigned char *)(*(void *)(a1 + 72) + 1) = 0;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (v11)
  {
    uint64_t v12 = *(int *)(v11 + 4);
    *(void *)(a1 + 80) = v12;
    *(void *)(a1 + 88) = palloc(8 * v12);
    if (*(void *)(a1 + 80))
    {
      unint64_t v13 = 0;
      int v14 = 1;
      do
      {
        uint64_t v15 = palloc(0x28uLL);
        double v16 = pg_query__node__init(v15);
        *(void *)(*(void *)(a1 + 88) + 8 * v13) = v15;
        _outNode_0(*(void *)(*(void *)(a1 + 88) + 8 * v13), *(void *)(*(void *)(*(void *)(a2 + 56) + 16) + 8 * v13), v16);
        unint64_t v13 = v14++;
      }
      while (*(void *)(a1 + 80) > v13);
    }
  }
  uint64_t v17 = *(void *)(a2 + 64);
  if (v17)
  {
    uint64_t v18 = *(int *)(v17 + 4);
    *(void *)(a1 + 96) = v18;
    *(void *)(a1 + 104) = palloc(8 * v18);
    if (*(void *)(a1 + 96))
    {
      unint64_t v19 = 0;
      int v20 = 1;
      do
      {
        uint64_t v21 = palloc(0x28uLL);
        double v22 = pg_query__node__init(v21);
        *(void *)(*(void *)(a1 + 104) + 8 * v19) = v21;
        _outNode_0(*(void *)(*(void *)(a1 + 104) + 8 * v19), *(void *)(*(void *)(*(void *)(a2 + 64) + 16) + 8 * v19), v22);
        unint64_t v19 = v20++;
      }
      while (*(void *)(a1 + 96) > v19);
    }
  }
  uint64_t v23 = *(void *)(a2 + 72);
  if (v23)
  {
    uint64_t v24 = *(int *)(v23 + 4);
    *(void *)(a1 + 112) = v24;
    *(void *)(a1 + 120) = palloc(8 * v24);
    if (*(void *)(a1 + 112))
    {
      unint64_t v25 = 0;
      int v26 = 1;
      do
      {
        uint64_t v27 = palloc(0x28uLL);
        double v28 = pg_query__node__init(v27);
        *(void *)(*(void *)(a1 + 120) + 8 * v25) = v27;
        _outNode_0(*(void *)(*(void *)(a1 + 120) + 8 * v25), *(void *)(*(void *)(*(void *)(a2 + 72) + 16) + 8 * v25), v28);
        unint64_t v25 = v26++;
      }
      while (*(void *)(a1 + 112) > v25);
    }
  }
  uint64_t v29 = *(void *)(a2 + 80);
  if (v29)
  {
    uint64_t v30 = *(int *)(v29 + 4);
    *(void *)(a1 + 128) = v30;
    *(void *)(a1 + 136) = palloc(8 * v30);
    if (*(void *)(a1 + 128))
    {
      unint64_t v31 = 0;
      int v32 = 1;
      do
      {
        uint64_t v33 = palloc(0x28uLL);
        double v34 = pg_query__node__init(v33);
        *(void *)(*(void *)(a1 + 136) + 8 * v31) = v33;
        _outNode_0(*(void *)(*(void *)(a1 + 136) + 8 * v31), *(void *)(*(void *)(*(void *)(a2 + 80) + 16) + 8 * v31), v34);
        unint64_t v31 = v32++;
      }
      while (*(void *)(a1 + 128) > v31);
    }
  }
  unint64_t v35 = *(const char **)(a2 + 88);
  if (v35) {
    *(void *)(a1 + 144) = pstrdup(v35);
  }
  int v36 = *(const char **)(a2 + 96);
  if (v36) {
    *(void *)(a1 + 152) = pstrdup(v36);
  }
  *(_DWORD *)(a1 + 160) = *(unsigned __int8 *)(a2 + 104);
  uint64_t result = *(char **)(a2 + 112);
  if (result)
  {
    uint64_t result = (char *)pstrdup(result);
    *(void *)(a1 + 168) = result;
  }
  if (*(void *)(a2 + 120))
  {
    uint64_t v38 = palloc(0x28uLL);
    double v39 = pg_query__node__init(v38);
    *(void *)(a1 + 176) = v38;
    uint64_t result = (char *)_outNode_0(v38, *(void *)(a2 + 120), v39);
  }
  if (*(void *)(a2 + 128))
  {
    uint64_t v40 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v40);
    uint64_t result = _outRangeVar_0((uint64_t)v40, *(void *)(a2 + 128));
    *(void *)(a1 + 184) = v40;
  }
  uint64_t v41 = *(void *)(a2 + 136);
  if (v41)
  {
    uint64_t v42 = *(int *)(v41 + 4);
    *(void *)(a1 + 192) = v42;
    uint64_t result = (char *)palloc(8 * v42);
    *(void *)(a1 + 200) = result;
    if (*(void *)(a1 + 192))
    {
      unint64_t v43 = 0;
      int v44 = 1;
      do
      {
        uint64_t v45 = palloc(0x28uLL);
        double v46 = pg_query__node__init(v45);
        *(void *)(*(void *)(a1 + 200) + 8 * v43) = v45;
        uint64_t result = (char *)_outNode_0(*(void *)(*(void *)(a1 + 200) + 8 * v43), *(void *)(*(void *)(*(void *)(a2 + 136) + 16) + 8 * v43), v46);
        unint64_t v43 = v44++;
      }
      while (*(void *)(a1 + 192) > v43);
    }
  }
  uint64_t v47 = *(void *)(a2 + 144);
  if (v47)
  {
    uint64_t v48 = *(int *)(v47 + 4);
    *(void *)(a1 + 208) = v48;
    uint64_t result = (char *)palloc(8 * v48);
    *(void *)(a1 + 216) = result;
    if (*(void *)(a1 + 208))
    {
      unint64_t v49 = 0;
      int v50 = 1;
      do
      {
        uint64_t v51 = palloc(0x28uLL);
        double v52 = pg_query__node__init(v51);
        *(void *)(*(void *)(a1 + 216) + 8 * v49) = v51;
        uint64_t result = (char *)_outNode_0(*(void *)(*(void *)(a1 + 216) + 8 * v49), *(void *)(*(void *)(*(void *)(a2 + 144) + 16) + 8 * v49), v52);
        unint64_t v49 = v50++;
      }
      while (*(void *)(a1 + 208) > v49);
    }
  }
  if (*(unsigned char *)(a2 + 152))
  {
    uint64_t result = (char *)palloc(2uLL);
    *(void *)(a1 + 224) = result;
    char *result = *(unsigned char *)(a2 + 152);
    *(unsigned char *)(*(void *)(a1 + 224) + 1) = 0;
  }
  if (*(unsigned char *)(a2 + 153))
  {
    uint64_t result = (char *)palloc(2uLL);
    *(void *)(a1 + 232) = result;
    char *result = *(unsigned char *)(a2 + 153);
    *(unsigned char *)(*(void *)(a1 + 232) + 1) = 0;
  }
  if (*(unsigned char *)(a2 + 154))
  {
    uint64_t result = (char *)palloc(2uLL);
    *(void *)(a1 + 240) = result;
    char *result = *(unsigned char *)(a2 + 154);
    *(unsigned char *)(*(void *)(a1 + 240) + 1) = 0;
  }
  uint64_t v53 = *(void *)(a2 + 160);
  if (v53)
  {
    uint64_t v54 = *(int *)(v53 + 4);
    *(void *)(a1 + 248) = v54;
    uint64_t result = (char *)palloc(8 * v54);
    *(void *)(a1 + 256) = result;
    if (*(void *)(a1 + 248))
    {
      unint64_t v55 = 0;
      int v56 = 1;
      do
      {
        uint64_t v57 = palloc(0x28uLL);
        double v58 = pg_query__node__init(v57);
        *(void *)(*(void *)(a1 + 256) + 8 * v55) = v57;
        uint64_t result = (char *)_outNode_0(*(void *)(*(void *)(a1 + 256) + 8 * v55), *(void *)(*(void *)(*(void *)(a2 + 160) + 16) + 8 * v55), v58);
        unint64_t v55 = v56++;
      }
      while (*(void *)(a1 + 248) > v55);
    }
  }
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 268) = *(unsigned __int8 *)(a2 + 172);
  *(_DWORD *)(a1 + 272) = *(unsigned __int8 *)(a2 + 173);
  return result;
}

const char *_outDefElem_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(const char **)(a2 + 8);
  if (v4) {
    *(void *)(a1 + 24) = pstrdup(v4);
  }
  uint64_t result = *(const char **)(a2 + 16);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v6 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v6);
    *(void *)(a1 + 40) = v6;
    uint64_t result = (const char *)_outNode_0(v6, *(void *)(a2 + 24), node__init);
  }
  unsigned int v8 = *(_DWORD *)(a2 + 32);
  if (v8 < 4) {
    int v9 = v8 + 1;
  }
  else {
    int v9 = -1;
  }
  *(_DWORD *)(a1 + 48) = v9;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 36);
  return result;
}

uint64_t _outRangeTblEntry_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 9) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 8);
  if (*(unsigned char *)(a2 + 12))
  {
    uint64_t v6 = (unsigned char *)palloc(2uLL);
    *(void *)(a1 + 32) = v6;
    *uint64_t v6 = *(unsigned char *)(a2 + 12);
    *(unsigned char *)(*(void *)(a1 + 32) + 1) = 0;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 16);
  if (*(void *)(a2 + 24))
  {
    uint64_t v7 = palloc(0x38uLL);
    pg_query__table_sample_clause__init(v7);
    _outTableSampleClause_0(v7, *(void *)(a2 + 24));
    *(void *)(a1 + 48) = v7;
  }
  if (*(void *)(a2 + 32))
  {
    unsigned int v8 = (_DWORD *)palloc(0x160uLL);
    pg_query__query__init(v8);
    _outQuery_0(v8, *(void *)(a2 + 32));
    *(void *)(a1 + 56) = v8;
  }
  *(_DWORD *)(a1 + 64) = *(unsigned __int8 *)(a2 + 40);
  unsigned int v9 = *(_DWORD *)(a2 + 44);
  if (v9 < 8) {
    int v10 = v9 + 1;
  }
  else {
    int v10 = -1;
  }
  *(_DWORD *)(a1 + 68) = v10;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  if (v11)
  {
    uint64_t v12 = *(int *)(v11 + 4);
    *(void *)(a1 + 80) = v12;
    *(void *)(a1 + 88) = palloc(8 * v12);
    if (*(void *)(a1 + 80))
    {
      unint64_t v13 = 0;
      int v14 = 1;
      do
      {
        uint64_t v15 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v15);
        *(void *)(*(void *)(a1 + 88) + 8 * v13) = v15;
        _outNode_0(*(void *)(*(void *)(a1 + 88) + 8 * v13), *(void *)(*(void *)(*(void *)(a2 + 56) + 16) + 8 * v13), node__init);
        unint64_t v13 = v14++;
      }
      while (*(void *)(a1 + 80) > v13);
    }
  }
  uint64_t v17 = *(void *)(a2 + 64);
  if (v17)
  {
    uint64_t v18 = *(int *)(v17 + 4);
    *(void *)(a1 + 96) = v18;
    *(void *)(a1 + 104) = palloc(8 * v18);
    if (*(void *)(a1 + 96))
    {
      unint64_t v19 = 0;
      int v20 = 1;
      do
      {
        uint64_t v21 = palloc(0x28uLL);
        double v22 = pg_query__node__init(v21);
        *(void *)(*(void *)(a1 + 104) + 8 * v19) = v21;
        _outNode_0(*(void *)(*(void *)(a1 + 104) + 8 * v19), *(void *)(*(void *)(*(void *)(a2 + 64) + 16) + 8 * v19), v22);
        unint64_t v19 = v20++;
      }
      while (*(void *)(a1 + 96) > v19);
    }
  }
  uint64_t v23 = *(void *)(a2 + 72);
  if (v23)
  {
    uint64_t v24 = *(int *)(v23 + 4);
    *(void *)(a1 + 112) = v24;
    *(void *)(a1 + 120) = palloc(8 * v24);
    if (*(void *)(a1 + 112))
    {
      unint64_t v25 = 0;
      int v26 = 1;
      do
      {
        uint64_t v27 = palloc(0x28uLL);
        double v28 = pg_query__node__init(v27);
        *(void *)(*(void *)(a1 + 120) + 8 * v25) = v27;
        _outNode_0(*(void *)(*(void *)(a1 + 120) + 8 * v25), *(void *)(*(void *)(*(void *)(a2 + 72) + 16) + 8 * v25), v28);
        unint64_t v25 = v26++;
      }
      while (*(void *)(a1 + 112) > v25);
    }
  }
  uint64_t v29 = *(void *)(a2 + 80);
  if (v29)
  {
    uint64_t v30 = *(int *)(v29 + 4);
    *(void *)(a1 + 128) = v30;
    *(void *)(a1 + 136) = palloc(8 * v30);
    if (*(void *)(a1 + 128))
    {
      unint64_t v31 = 0;
      int v32 = 1;
      do
      {
        uint64_t v33 = palloc(0x28uLL);
        double v34 = pg_query__node__init(v33);
        *(void *)(*(void *)(a1 + 136) + 8 * v31) = v33;
        _outNode_0(*(void *)(*(void *)(a1 + 136) + 8 * v31), *(void *)(*(void *)(*(void *)(a2 + 80) + 16) + 8 * v31), v34);
        unint64_t v31 = v32++;
      }
      while (*(void *)(a1 + 128) > v31);
    }
  }
  *(_DWORD *)(a1 + 144) = *(unsigned __int8 *)(a2 + 88);
  if (*(void *)(a2 + 96))
  {
    unint64_t v35 = (_OWORD *)palloc(0xC0uLL);
    pg_query__table_func__init(v35);
    _outTableFunc_0((uint64_t)v35, *(void *)(a2 + 96));
    *(void *)(a1 + 152) = v35;
  }
  uint64_t v36 = *(void *)(a2 + 104);
  if (v36)
  {
    uint64_t v37 = *(int *)(v36 + 4);
    *(void *)(a1 + 160) = v37;
    *(void *)(a1 + 168) = palloc(8 * v37);
    if (*(void *)(a1 + 160))
    {
      unint64_t v38 = 0;
      int v39 = 1;
      do
      {
        uint64_t v40 = palloc(0x28uLL);
        double v41 = pg_query__node__init(v40);
        *(void *)(*(void *)(a1 + 168) + 8 * v38) = v40;
        _outNode_0(*(void *)(*(void *)(a1 + 168) + 8 * v38), *(void *)(*(void *)(*(void *)(a2 + 104) + 16) + 8 * v38), v41);
        unint64_t v38 = v39++;
      }
      while (*(void *)(a1 + 160) > v38);
    }
  }
  uint64_t v42 = *(const char **)(a2 + 112);
  if (v42) {
    *(void *)(a1 + 176) = pstrdup(v42);
  }
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 188) = *(unsigned __int8 *)(a2 + 124);
  uint64_t v43 = *(void *)(a2 + 128);
  if (v43)
  {
    uint64_t v44 = *(int *)(v43 + 4);
    *(void *)(a1 + 192) = v44;
    *(void *)(a1 + 200) = palloc(8 * v44);
    if (*(void *)(a1 + 192))
    {
      unint64_t v45 = 0;
      int v46 = 1;
      do
      {
        uint64_t v47 = palloc(0x28uLL);
        double v48 = pg_query__node__init(v47);
        *(void *)(*(void *)(a1 + 200) + 8 * v45) = v47;
        _outNode_0(*(void *)(*(void *)(a1 + 200) + 8 * v45), *(void *)(*(void *)(*(void *)(a2 + 128) + 16) + 8 * v45), v48);
        unint64_t v45 = v46++;
      }
      while (*(void *)(a1 + 192) > v45);
    }
  }
  uint64_t v49 = *(void *)(a2 + 136);
  if (v49)
  {
    uint64_t v50 = *(int *)(v49 + 4);
    *(void *)(a1 + 208) = v50;
    *(void *)(a1 + 216) = palloc(8 * v50);
    if (*(void *)(a1 + 208))
    {
      unint64_t v51 = 0;
      int v52 = 1;
      do
      {
        uint64_t v53 = palloc(0x28uLL);
        double v54 = pg_query__node__init(v53);
        *(void *)(*(void *)(a1 + 216) + 8 * v51) = v53;
        _outNode_0(*(void *)(*(void *)(a1 + 216) + 8 * v51), *(void *)(*(void *)(*(void *)(a2 + 136) + 16) + 8 * v51), v54);
        unint64_t v51 = v52++;
      }
      while (*(void *)(a1 + 208) > v51);
    }
  }
  uint64_t v55 = *(void *)(a2 + 144);
  if (v55)
  {
    uint64_t v56 = *(int *)(v55 + 4);
    *(void *)(a1 + 224) = v56;
    *(void *)(a1 + 232) = palloc(8 * v56);
    if (*(void *)(a1 + 224))
    {
      unint64_t v57 = 0;
      int v58 = 1;
      do
      {
        uint64_t v59 = palloc(0x28uLL);
        double v60 = pg_query__node__init(v59);
        *(void *)(*(void *)(a1 + 232) + 8 * v57) = v59;
        _outNode_0(*(void *)(*(void *)(a1 + 232) + 8 * v57), *(void *)(*(void *)(*(void *)(a2 + 144) + 16) + 8 * v57), v60);
        unint64_t v57 = v58++;
      }
      while (*(void *)(a1 + 224) > v57);
    }
  }
  uint64_t v61 = *(const char **)(a2 + 152);
  if (v61) {
    *(void *)(a1 + 240) = pstrdup(v61);
  }
  *(void *)(a1 + 248) = *(void *)(a2 + 160);
  if (*(void *)(a2 + 168))
  {
    double v62 = (_OWORD *)palloc(0x30uLL);
    pg_query__alias__init(v62);
    _outAlias_0(v62, *(void *)(a2 + 168));
    *(void *)(a1 + 256) = v62;
  }
  if (*(void *)(a2 + 176))
  {
    double v63 = (_OWORD *)palloc(0x30uLL);
    pg_query__alias__init(v63);
    _outAlias_0(v63, *(void *)(a2 + 176));
    *(void *)(a1 + 264) = v63;
  }
  *(_DWORD *)(a1 + 272) = *(unsigned __int8 *)(a2 + 184);
  *(_DWORD *)(a1 + 276) = *(unsigned __int8 *)(a2 + 185);
  *(_DWORD *)(a1 + 280) = *(unsigned __int8 *)(a2 + 186);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 192);
  if (!bms_is_empty(*(unsigned int **)(a2 + 200)))
  {
    int v64 = bms_num_members(*(unsigned int **)(a2 + 200));
    *(void *)(a1 + 296) = v64;
    *(void *)(a1 + 304) = palloc(8 * v64);
    unsigned int member = bms_first_member(*(_DWORD **)(a2 + 200));
    if ((member & 0x80000000) == 0)
    {
      int v66 = 0;
      do
      {
        int v67 = v66 + 1;
        *(void *)(*(void *)(a1 + 304) + 8 * v66) = member;
        unsigned int member = bms_first_member(*(_DWORD **)(a2 + 200));
        int v66 = v67;
      }
      while ((member & 0x80000000) == 0);
    }
  }
  if (!bms_is_empty(*(unsigned int **)(a2 + 208)))
  {
    int v68 = bms_num_members(*(unsigned int **)(a2 + 208));
    *(void *)(a1 + 312) = v68;
    *(void *)(a1 + 320) = palloc(8 * v68);
    unsigned int v69 = bms_first_member(*(_DWORD **)(a2 + 208));
    if ((v69 & 0x80000000) == 0)
    {
      int v70 = 0;
      do
      {
        int v71 = v70 + 1;
        *(void *)(*(void *)(a1 + 320) + 8 * v70) = v69;
        unsigned int v69 = bms_first_member(*(_DWORD **)(a2 + 208));
        int v70 = v71;
      }
      while ((v69 & 0x80000000) == 0);
    }
  }
  if (!bms_is_empty(*(unsigned int **)(a2 + 216)))
  {
    int v72 = bms_num_members(*(unsigned int **)(a2 + 216));
    *(void *)(a1 + 328) = v72;
    *(void *)(a1 + 336) = palloc(8 * v72);
    unsigned int v73 = bms_first_member(*(_DWORD **)(a2 + 216));
    if ((v73 & 0x80000000) == 0)
    {
      int v74 = 0;
      do
      {
        int v75 = v74 + 1;
        *(void *)(*(void *)(a1 + 336) + 8 * v74) = v73;
        unsigned int v73 = bms_first_member(*(_DWORD **)(a2 + 216));
        int v74 = v75;
      }
      while ((v73 & 0x80000000) == 0);
    }
  }
  uint64_t result = bms_is_empty(*(unsigned int **)(a2 + 224));
  if ((result & 1) == 0)
  {
    int v77 = bms_num_members(*(unsigned int **)(a2 + 224));
    *(void *)(a1 + 344) = v77;
    *(void *)(a1 + 352) = palloc(8 * v77);
    uint64_t result = bms_first_member(*(_DWORD **)(a2 + 224));
    if ((result & 0x80000000) == 0)
    {
      int v78 = 0;
      do
      {
        int v79 = v78 + 1;
        *(void *)(*(void *)(a1 + 352) + 8 * v78) = result;
        uint64_t result = bms_first_member(*(_DWORD **)(a2 + 224));
        int v78 = v79;
      }
      while ((result & 0x80000000) == 0);
    }
  }
  uint64_t v80 = *(void *)(a2 + 232);
  if (v80)
  {
    uint64_t v81 = *(int *)(v80 + 4);
    *(void *)(a1 + 360) = v81;
    uint64_t result = palloc(8 * v81);
    *(void *)(a1 + 368) = result;
    if (*(void *)(a1 + 360))
    {
      unint64_t v82 = 0;
      int v83 = 1;
      do
      {
        uint64_t v84 = palloc(0x28uLL);
        double v85 = pg_query__node__init(v84);
        *(void *)(*(void *)(a1 + 368) + 8 * v82) = v84;
        uint64_t result = _outNode_0(*(void *)(*(void *)(a1 + 368) + 8 * v82), *(void *)(*(void *)(*(void *)(a2 + 232) + 16) + 8 * v82), v85);
        unint64_t v82 = v83++;
      }
      while (*(void *)(a1 + 360) > v82);
    }
  }
  return result;
}

uint64_t _outRangeTblFunction_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    uint64_t v4 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v4);
    *(void *)(a1 + 24) = v4;
    _outNode_0(v4, *(void *)(a2 + 8), node__init);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = palloc(8 * v7);
    if (*(void *)(a1 + 40))
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double v11 = pg_query__node__init(v10);
        *(void *)(*(void *)(a1 + 48) + 8 * v8) = v10;
        _outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v8), v11);
        unint64_t v8 = v9++;
      }
      while (*(void *)(a1 + 40) > v8);
    }
  }
  uint64_t v12 = *(void *)(a2 + 32);
  if (v12)
  {
    uint64_t v13 = *(int *)(v12 + 4);
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = palloc(8 * v13);
    if (*(void *)(a1 + 56))
    {
      unint64_t v14 = 0;
      int v15 = 1;
      do
      {
        uint64_t v16 = palloc(0x28uLL);
        double v17 = pg_query__node__init(v16);
        *(void *)(*(void *)(a1 + 64) + 8 * v14) = v16;
        _outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v14), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v14), v17);
        unint64_t v14 = v15++;
      }
      while (*(void *)(a1 + 56) > v14);
    }
  }
  uint64_t v18 = *(void *)(a2 + 40);
  if (v18)
  {
    uint64_t v19 = *(int *)(v18 + 4);
    *(void *)(a1 + 72) = v19;
    *(void *)(a1 + 80) = palloc(8 * v19);
    if (*(void *)(a1 + 72))
    {
      unint64_t v20 = 0;
      int v21 = 1;
      do
      {
        uint64_t v22 = palloc(0x28uLL);
        double v23 = pg_query__node__init(v22);
        *(void *)(*(void *)(a1 + 80) + 8 * v20) = v22;
        _outNode_0(*(void *)(*(void *)(a1 + 80) + 8 * v20), *(void *)(*(void *)(*(void *)(a2 + 40) + 16) + 8 * v20), v23);
        unint64_t v20 = v21++;
      }
      while (*(void *)(a1 + 72) > v20);
    }
  }
  uint64_t v24 = *(void *)(a2 + 48);
  if (v24)
  {
    uint64_t v25 = *(int *)(v24 + 4);
    *(void *)(a1 + 88) = v25;
    *(void *)(a1 + 96) = palloc(8 * v25);
    if (*(void *)(a1 + 88))
    {
      unint64_t v26 = 0;
      int v27 = 1;
      do
      {
        uint64_t v28 = palloc(0x28uLL);
        double v29 = pg_query__node__init(v28);
        *(void *)(*(void *)(a1 + 96) + 8 * v26) = v28;
        _outNode_0(*(void *)(*(void *)(a1 + 96) + 8 * v26), *(void *)(*(void *)(*(void *)(a2 + 48) + 16) + 8 * v26), v29);
        unint64_t v26 = v27++;
      }
      while (*(void *)(a1 + 88) > v26);
    }
  }
  uint64_t result = bms_is_empty(*(unsigned int **)(a2 + 56));
  if ((result & 1) == 0)
  {
    int v31 = bms_num_members(*(unsigned int **)(a2 + 56));
    *(void *)(a1 + 104) = v31;
    *(void *)(a1 + 112) = palloc(8 * v31);
    uint64_t result = bms_first_member(*(_DWORD **)(a2 + 56));
    if ((result & 0x80000000) == 0)
    {
      int v32 = 0;
      do
      {
        int v33 = v32 + 1;
        *(void *)(*(void *)(a1 + 112) + 8 * v32) = result;
        uint64_t result = bms_first_member(*(_DWORD **)(a2 + 56));
        int v32 = v33;
      }
      while ((result & 0x80000000) == 0);
    }
  }
  return result;
}

uint64_t _outTableSampleClause_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 32) = v5;
    uint64_t result = palloc(8 * v5);
    v3[5] = result;
    if (v3[4])
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(v3[5] + 8 * v6) = v8;
        uint64_t result = _outNode_0(*(void *)(v3[5] + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (v3[4] > v6);
    }
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v10 = palloc(0x28uLL);
    double v11 = pg_query__node__init(v10);
    v3[6] = v10;
    uint64_t v12 = *(void *)(a2 + 16);
    return _outNode_0(v10, v12, v11);
  }
  return result;
}

const char *_outWithCheckOption_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 4) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  unint64_t v6 = *(const char **)(a2 + 8);
  if (v6) {
    *(void *)(a1 + 32) = pstrdup(v6);
  }
  uint64_t result = *(const char **)(a2 + 16);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 40) = result;
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v8 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v8);
    *(void *)(a1 + 48) = v8;
    uint64_t result = (const char *)_outNode_0(v8, *(void *)(a2 + 24), node__init);
  }
  *(_DWORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 32);
  return result;
}

uint64_t _outGroupingSet_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 5) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(result + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    *(void *)(result + 32) = v7;
    uint64_t result = palloc(8 * v7);
    *(void *)(v3 + 40) = result;
    if (*(void *)(v3 + 32))
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v10);
        *(void *)(*(void *)(v3 + 40) + 8 * v8) = v10;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 40) + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v8), node__init);
        unint64_t v8 = v9++;
      }
      while (*(void *)(v3 + 32) > v8);
    }
  }
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a2 + 16);
  return result;
}

const char *_outWindowClause_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(const char **)(a2 + 8);
  if (v4) {
    *(void *)(a1 + 24) = pstrdup(v4);
  }
  uint64_t result = *(const char **)(a2 + 16);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(int *)(v6 + 4);
    *(void *)(a1 + 40) = v7;
    uint64_t result = (const char *)palloc(8 * v7);
    *(void *)(a1 + 48) = result;
    if (*(void *)(a1 + 40))
    {
      unint64_t v8 = 0;
      int v9 = 1;
      do
      {
        uint64_t v10 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v10);
        *(void *)(*(void *)(a1 + 48) + 8 * v8) = v10;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v8), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v8), node__init);
        unint64_t v8 = v9++;
      }
      while (*(void *)(a1 + 40) > v8);
    }
  }
  uint64_t v12 = *(void *)(a2 + 32);
  if (v12)
  {
    uint64_t v13 = *(int *)(v12 + 4);
    *(void *)(a1 + 56) = v13;
    uint64_t result = (const char *)palloc(8 * v13);
    *(void *)(a1 + 64) = result;
    if (*(void *)(a1 + 56))
    {
      unint64_t v14 = 0;
      int v15 = 1;
      do
      {
        uint64_t v16 = palloc(0x28uLL);
        double v17 = pg_query__node__init(v16);
        *(void *)(*(void *)(a1 + 64) + 8 * v14) = v16;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v14), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v14), v17);
        unint64_t v14 = v15++;
      }
      while (*(void *)(a1 + 56) > v14);
    }
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 40);
  if (*(void *)(a2 + 48))
  {
    uint64_t v18 = palloc(0x28uLL);
    double v19 = pg_query__node__init(v18);
    *(void *)(a1 + 80) = v18;
    uint64_t result = (const char *)_outNode_0(v18, *(void *)(a2 + 48), v19);
  }
  if (*(void *)(a2 + 56))
  {
    uint64_t v20 = palloc(0x28uLL);
    double v21 = pg_query__node__init(v20);
    *(void *)(a1 + 88) = v20;
    uint64_t result = (const char *)_outNode_0(v20, *(void *)(a2 + 56), v21);
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 108) = *(unsigned __int8 *)(a2 + 76);
  *(_DWORD *)(a1 + 112) = *(unsigned __int8 *)(a2 + 77);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 120) = *(unsigned __int8 *)(a2 + 84);
  return result;
}

uint64_t _outCreateOpClassItem_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 4);
  if (*(void *)(a2 + 8))
  {
    unsigned int v4 = (_OWORD *)palloc(0x40uLL);
    pg_query__object_with_args__init(v4);
    uint64_t result = _outVacuumStmt_0((uint64_t)v4, *(void *)(a2 + 8));
    *(void *)(v3 + 32) = v4;
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(v3 + 48) = v6;
    uint64_t result = palloc(8 * v6);
    *(void *)(v3 + 56) = result;
    if (*(void *)(v3 + 48))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(v3 + 56) + 8 * v7) = v9;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 56) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(v3 + 48) > v7);
    }
  }
  uint64_t v11 = *(void *)(a2 + 32);
  if (v11)
  {
    uint64_t v12 = *(int *)(v11 + 4);
    *(void *)(v3 + 64) = v12;
    uint64_t result = palloc(8 * v12);
    *(void *)(v3 + 72) = result;
    if (*(void *)(v3 + 64))
    {
      unint64_t v13 = 0;
      int v14 = 1;
      do
      {
        uint64_t v15 = palloc(0x28uLL);
        double v16 = pg_query__node__init(v15);
        *(void *)(*(void *)(v3 + 72) + 8 * v13) = v15;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 72) + 8 * v13), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v13), v16);
        unint64_t v13 = v14++;
      }
      while (*(void *)(v3 + 64) > v13);
    }
  }
  if (*(void *)(a2 + 40))
  {
    uint64_t v17 = palloc(0x68uLL);
    pg_query__type_name__init(v17);
    uint64_t result = _outTypeName_0(v17, *(void *)(a2 + 40));
    *(void *)(v3 + 80) = v17;
  }
  return result;
}

char *_outTableLikeClause_0(char *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    unsigned int v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    uint64_t result = _outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *((void *)v3 + 3) = v4;
  }
  *((_DWORD *)v3 + 8) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)v3 + 9) = *(_DWORD *)(a2 + 20);
  return result;
}

const char *_outFunctionParameter_0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(const char **)(a2 + 8);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v5 = palloc(0x68uLL);
    pg_query__type_name__init(v5);
    uint64_t result = (const char *)_outTypeName_0(v5, *(void *)(a2 + 16));
    *(void *)(a1 + 32) = v5;
  }
  int v6 = 1;
  switch(*(_DWORD *)(a2 + 24))
  {
    case 'b':
      *(_DWORD *)(a1 + 40) = 3;
      if (*(void *)(a2 + 32)) {
        goto LABEL_14;
      }
      return result;
    case 'i':
      goto LABEL_13;
    case 'o':
      *(_DWORD *)(a1 + 40) = 2;
      if (!*(void *)(a2 + 32)) {
        return result;
      }
      goto LABEL_14;
    case 't':
      int v6 = 5;
LABEL_13:
      *(_DWORD *)(a1 + 40) = v6;
      if (*(void *)(a2 + 32)) {
        goto LABEL_14;
      }
      return result;
    case 'v':
      *(_DWORD *)(a1 + 40) = 4;
      if (!*(void *)(a2 + 32)) {
        return result;
      }
      goto LABEL_14;
    default:
      *(_DWORD *)(a1 + 40) = -1;
      if (!*(void *)(a2 + 32)) {
        return result;
      }
LABEL_14:
      uint64_t v7 = palloc(0x28uLL);
      double node__init = pg_query__node__init(v7);
      *(void *)(a1 + 48) = v7;
      uint64_t v9 = *(void *)(a2 + 32);
      return (const char *)_outNode_0(v7, v9, node__init);
  }
}

uint64_t _outLockingClause_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    uint64_t result = palloc(8 * v5);
    *(void *)(v3 + 32) = result;
    if (*(void *)(v3 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v3 + 32) + 8 * v6) = v8;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v3 + 24) > v6);
    }
  }
  unsigned int v10 = *(_DWORD *)(a2 + 16);
  if (v10 < 5) {
    int v11 = v10 + 1;
  }
  else {
    int v11 = -1;
  }
  *(_DWORD *)(v3 + 40) = v11;
  unsigned int v12 = *(_DWORD *)(a2 + 20);
  if (v12 < 3) {
    int v13 = v12 + 1;
  }
  else {
    int v13 = -1;
  }
  *(_DWORD *)(v3 + 44) = v13;
  return result;
}

_DWORD *_outRowMarkClause_0(_DWORD *result, uint64_t a2)
{
  result[6] = *(_DWORD *)(a2 + 4);
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  if (v2 < 5) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = -1;
  }
  result[7] = v3;
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 3) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  result[8] = v5;
  result[9] = *(unsigned __int8 *)(a2 + 16);
  return result;
}

uint64_t _outXmlSerialize_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4 == 1) {
    int v5 = 2;
  }
  else {
    int v5 = -1;
  }
  if (v4) {
    int v6 = v5;
  }
  else {
    int v6 = 1;
  }
  *(_DWORD *)(result + 24) = v6;
  if (*(void *)(a2 + 8))
  {
    uint64_t v7 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v7);
    *(void *)(v3 + 32) = v7;
    uint64_t result = _outNode_0(v7, *(void *)(a2 + 8), node__init);
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v9 = palloc(0x68uLL);
    pg_query__type_name__init(v9);
    uint64_t result = _outTypeName_0(v9, *(void *)(a2 + 16));
    *(void *)(v3 + 40) = v9;
  }
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t _outWithClause_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(result + 24) = v5;
    uint64_t result = palloc(8 * v5);
    *(void *)(v3 + 32) = result;
    if (*(void *)(v3 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(v3 + 32) + 8 * v6) = v8;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(v3 + 24) > v6);
    }
  }
  *(_DWORD *)(v3 + 40) = *(unsigned __int8 *)(a2 + 16);
  *(_DWORD *)(v3 + 44) = *(_DWORD *)(a2 + 20);
  return result;
}

const char *_outInferClause_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = palloc(8 * v5);
    if (*(void *)(a1 + 24))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*(void *)(a1 + 32) + 8 * v6) = v8;
        _outNode_0(*(void *)(*(void *)(a1 + 32) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 8) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*(void *)(a1 + 24) > v6);
    }
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v10 = palloc(0x28uLL);
    double v11 = pg_query__node__init(v10);
    *(void *)(a1 + 40) = v10;
    _outNode_0(v10, *(void *)(a2 + 16), v11);
  }
  uint64_t result = *(const char **)(a2 + 24);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 48) = result;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t _outOnConflictClause_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 3) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(result + 24) = v5;
  if (*(void *)(a2 + 8))
  {
    unint64_t v6 = (_OWORD *)palloc(0x40uLL);
    pg_query__infer_clause__init(v6);
    uint64_t result = (uint64_t)_outInferClause_0((uint64_t)v6, *(void *)(a2 + 8));
    *(void *)(v3 + 32) = v6;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = *(int *)(v7 + 4);
    *(void *)(v3 + 40) = v8;
    uint64_t result = palloc(8 * v8);
    *(void *)(v3 + 48) = result;
    if (*(void *)(v3 + 40))
    {
      unint64_t v9 = 0;
      int v10 = 1;
      do
      {
        uint64_t v11 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v11);
        *(void *)(*(void *)(v3 + 48) + 8 * v9) = v11;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 48) + 8 * v9), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v9), node__init);
        unint64_t v9 = v10++;
      }
      while (*(void *)(v3 + 40) > v9);
    }
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v13 = palloc(0x28uLL);
    double v14 = pg_query__node__init(v13);
    *(void *)(v3 + 56) = v13;
    uint64_t result = _outNode_0(v13, *(void *)(a2 + 24), v14);
  }
  *(_DWORD *)(v3 + 64) = *(_DWORD *)(a2 + 32);
  return result;
}

const char *_outCommonTableExpr_0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(const char **)(a2 + 8);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(a1 + 32) = v6;
    uint64_t result = (const char *)palloc(8 * v6);
    *(void *)(a1 + 40) = result;
    if (*(void *)(a1 + 32))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(a1 + 40) + 8 * v7) = v9;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(a1 + 32) > v7);
    }
  }
  unsigned int v11 = *(_DWORD *)(a2 + 24);
  if (v11 < 3) {
    int v12 = v11 + 1;
  }
  else {
    int v12 = -1;
  }
  *(_DWORD *)(a1 + 48) = v12;
  if (*(void *)(a2 + 32))
  {
    uint64_t v13 = palloc(0x28uLL);
    double v14 = pg_query__node__init(v13);
    *(void *)(a1 + 56) = v13;
    uint64_t result = (const char *)_outNode_0(v13, *(void *)(a2 + 32), v14);
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 68) = *(unsigned __int8 *)(a2 + 44);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 56);
  if (v15)
  {
    uint64_t v16 = *(int *)(v15 + 4);
    *(void *)(a1 + 80) = v16;
    uint64_t result = (const char *)palloc(8 * v16);
    *(void *)(a1 + 88) = result;
    if (*(void *)(a1 + 80))
    {
      unint64_t v17 = 0;
      int v18 = 1;
      do
      {
        uint64_t v19 = palloc(0x28uLL);
        double v20 = pg_query__node__init(v19);
        *(void *)(*(void *)(a1 + 88) + 8 * v17) = v19;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 88) + 8 * v17), *(void *)(*(void *)(*(void *)(a2 + 56) + 16) + 8 * v17), v20);
        unint64_t v17 = v18++;
      }
      while (*(void *)(a1 + 80) > v17);
    }
  }
  uint64_t v21 = *(void *)(a2 + 64);
  if (v21)
  {
    uint64_t v22 = *(int *)(v21 + 4);
    *(void *)(a1 + 96) = v22;
    uint64_t result = (const char *)palloc(8 * v22);
    *(void *)(a1 + 104) = result;
    if (*(void *)(a1 + 96))
    {
      unint64_t v23 = 0;
      int v24 = 1;
      do
      {
        uint64_t v25 = palloc(0x28uLL);
        double v26 = pg_query__node__init(v25);
        *(void *)(*(void *)(a1 + 104) + 8 * v23) = v25;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 104) + 8 * v23), *(void *)(*(void *)(*(void *)(a2 + 64) + 16) + 8 * v23), v26);
        unint64_t v23 = v24++;
      }
      while (*(void *)(a1 + 96) > v23);
    }
  }
  uint64_t v27 = *(void *)(a2 + 72);
  if (v27)
  {
    uint64_t v28 = *(int *)(v27 + 4);
    *(void *)(a1 + 112) = v28;
    uint64_t result = (const char *)palloc(8 * v28);
    *(void *)(a1 + 120) = result;
    if (*(void *)(a1 + 112))
    {
      unint64_t v29 = 0;
      int v30 = 1;
      do
      {
        uint64_t v31 = palloc(0x28uLL);
        double v32 = pg_query__node__init(v31);
        *(void *)(*(void *)(a1 + 120) + 8 * v29) = v31;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 120) + 8 * v29), *(void *)(*(void *)(*(void *)(a2 + 72) + 16) + 8 * v29), v32);
        unint64_t v29 = v30++;
      }
      while (*(void *)(a1 + 112) > v29);
    }
  }
  uint64_t v33 = *(void *)(a2 + 80);
  if (v33)
  {
    uint64_t v34 = *(int *)(v33 + 4);
    *(void *)(a1 + 128) = v34;
    uint64_t result = (const char *)palloc(8 * v34);
    *(void *)(a1 + 136) = result;
    if (*(void *)(a1 + 128))
    {
      unint64_t v35 = 0;
      int v36 = 1;
      do
      {
        uint64_t v37 = palloc(0x28uLL);
        double v38 = pg_query__node__init(v37);
        *(void *)(*(void *)(a1 + 136) + 8 * v35) = v37;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 136) + 8 * v35), *(void *)(*(void *)(*(void *)(a2 + 80) + 16) + 8 * v35), v38);
        unint64_t v35 = v36++;
      }
      while (*(void *)(a1 + 128) > v35);
    }
  }
  return result;
}

const char *_outRoleSpec_0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 4) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(a1 + 24) = v5;
  uint64_t result = *(const char **)(a2 + 8);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 32) = result;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 16);
  return result;
}

const char *_outPartitionElem_0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(const char **)(a2 + 8);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v5 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v5);
    *(void *)(a1 + 32) = v5;
    uint64_t result = (const char *)_outNode_0(v5, *(void *)(a2 + 16), node__init);
  }
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    uint64_t v8 = *(int *)(v7 + 4);
    *(void *)(a1 + 40) = v8;
    uint64_t result = (const char *)palloc(8 * v8);
    *(void *)(a1 + 48) = result;
    if (*(void *)(a1 + 40))
    {
      unint64_t v9 = 0;
      int v10 = 1;
      do
      {
        uint64_t v11 = palloc(0x28uLL);
        double v12 = pg_query__node__init(v11);
        *(void *)(*(void *)(a1 + 48) + 8 * v9) = v11;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 48) + 8 * v9), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v9), v12);
        unint64_t v9 = v10++;
      }
      while (*(void *)(a1 + 40) > v9);
    }
  }
  uint64_t v13 = *(void *)(a2 + 32);
  if (v13)
  {
    uint64_t v14 = *(int *)(v13 + 4);
    *(void *)(a1 + 56) = v14;
    uint64_t result = (const char *)palloc(8 * v14);
    *(void *)(a1 + 64) = result;
    if (*(void *)(a1 + 56))
    {
      unint64_t v15 = 0;
      int v16 = 1;
      do
      {
        uint64_t v17 = palloc(0x28uLL);
        double v18 = pg_query__node__init(v17);
        *(void *)(*(void *)(a1 + 64) + 8 * v15) = v17;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 64) + 8 * v15), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v15), v18);
        unint64_t v15 = v16++;
      }
      while (*(void *)(a1 + 56) > v15);
    }
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 40);
  return result;
}

const char *_outPartitionSpec_0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(const char **)(a2 + 8);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(a1 + 32) = v6;
    uint64_t result = (const char *)palloc(8 * v6);
    *(void *)(a1 + 40) = result;
    if (*(void *)(a1 + 32))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(a1 + 40) + 8 * v7) = v9;
        uint64_t result = (const char *)_outNode_0(*(void *)(*(void *)(a1 + 40) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(a1 + 32) > v7);
    }
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 24);
  return result;
}

unsigned char *_outPartitionBoundSpec_0(unsigned char *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(a2 + 4))
  {
    uint64_t result = (unsigned char *)palloc(2uLL);
    *((void *)v3 + 3) = result;
    const char *result = *(unsigned char *)(a2 + 4);
    *(unsigned char *)(*((void *)v3 + 3) + 1) = 0;
  }
  *((_DWORD *)v3 + 8) = *(unsigned __int8 *)(a2 + 5);
  *((_DWORD *)v3 + 9) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v3 + 10) = *(_DWORD *)(a2 + 12);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(int *)(v4 + 4);
    *((void *)v3 + 6) = v5;
    uint64_t result = (unsigned char *)palloc(8 * v5);
    *((void *)v3 + 7) = result;
    if (*((void *)v3 + 6))
    {
      unint64_t v6 = 0;
      int v7 = 1;
      do
      {
        uint64_t v8 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v8);
        *(void *)(*((void *)v3 + 7) + 8 * v6) = v8;
        uint64_t result = (unsigned char *)_outNode_0(*(void *)(*((void *)v3 + 7) + 8 * v6), *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8 * v6), node__init);
        unint64_t v6 = v7++;
      }
      while (*((void *)v3 + 6) > v6);
    }
  }
  uint64_t v10 = *(void *)(a2 + 24);
  if (v10)
  {
    uint64_t v11 = *(int *)(v10 + 4);
    *((void *)v3 + 8) = v11;
    uint64_t result = (unsigned char *)palloc(8 * v11);
    *((void *)v3 + 9) = result;
    if (*((void *)v3 + 8))
    {
      unint64_t v12 = 0;
      int v13 = 1;
      do
      {
        uint64_t v14 = palloc(0x28uLL);
        double v15 = pg_query__node__init(v14);
        *(void *)(*((void *)v3 + 9) + 8 * v12) = v14;
        uint64_t result = (unsigned char *)_outNode_0(*(void *)(*((void *)v3 + 9) + 8 * v12), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v12), v15);
        unint64_t v12 = v13++;
      }
      while (*((void *)v3 + 8) > v12);
    }
  }
  uint64_t v16 = *(void *)(a2 + 32);
  if (v16)
  {
    uint64_t v17 = *(int *)(v16 + 4);
    *((void *)v3 + 10) = v17;
    uint64_t result = (unsigned char *)palloc(8 * v17);
    *((void *)v3 + 11) = result;
    if (*((void *)v3 + 10))
    {
      unint64_t v18 = 0;
      int v19 = 1;
      do
      {
        uint64_t v20 = palloc(0x28uLL);
        double v21 = pg_query__node__init(v20);
        *(void *)(*((void *)v3 + 11) + 8 * v18) = v20;
        uint64_t result = (unsigned char *)_outNode_0(*(void *)(*((void *)v3 + 11) + 8 * v18), *(void *)(*(void *)(*(void *)(a2 + 32) + 16) + 8 * v18), v21);
        unint64_t v18 = v19++;
      }
      while (*((void *)v3 + 10) > v18);
    }
  }
  *((_DWORD *)v3 + 24) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t _outPartitionRangeDatum_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 4);
  unsigned int v5 = v4 + 1;
  int v6 = v4 + 2;
  if (v5 >= 3) {
    int v6 = -1;
  }
  *(_DWORD *)(result + 24) = v6;
  if (*(void *)(a2 + 8))
  {
    uint64_t v7 = palloc(0x28uLL);
    double node__init = pg_query__node__init(v7);
    *(void *)(v3 + 32) = v7;
    uint64_t result = _outNode_0(v7, *(void *)(a2 + 8), node__init);
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a2 + 16);
  return result;
}

char *_outPartitionCmd_0(char *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    int v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    uint64_t result = _outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *((void *)v3 + 3) = v4;
  }
  if (*(void *)(a2 + 16))
  {
    unsigned int v5 = (unsigned char *)palloc(0x68uLL);
    pg_query__partition_bound_spec__init((uint64_t)v5);
    uint64_t result = _outPartitionBoundSpec_0(v5, *(void *)(a2 + 16));
    *((void *)v3 + 4) = v5;
  }
  return result;
}

uint64_t _outVacuumRelation_0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(a2 + 8))
  {
    int v4 = (_OWORD *)palloc(0x50uLL);
    pg_query__range_var__init(v4);
    uint64_t result = (uint64_t)_outRangeVar_0((uint64_t)v4, *(void *)(a2 + 8));
    *(void *)(v3 + 24) = v4;
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = *(int *)(v5 + 4);
    *(void *)(v3 + 40) = v6;
    uint64_t result = palloc(8 * v6);
    *(void *)(v3 + 48) = result;
    if (*(void *)(v3 + 40))
    {
      unint64_t v7 = 0;
      int v8 = 1;
      do
      {
        uint64_t v9 = palloc(0x28uLL);
        double node__init = pg_query__node__init(v9);
        *(void *)(*(void *)(v3 + 48) + 8 * v7) = v9;
        uint64_t result = _outNode_0(*(void *)(*(void *)(v3 + 48) + 8 * v7), *(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 8 * v7), node__init);
        unint64_t v7 = v8++;
      }
      while (*(void *)(v3 + 40) > v7);
    }
  }
  return result;
}

const char *_outInlineCodeBlock_0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(const char **)(a2 + 8);
  if (result)
  {
    uint64_t result = (const char *)pstrdup(result);
    *(void *)(a1 + 24) = result;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(unsigned __int8 *)(a2 + 20);
  *(_DWORD *)(a1 + 40) = *(unsigned __int8 *)(a2 + 21);
  return result;
}

uint64_t pg_query_raw_parse(uint64_t a1)
{
  v1 = (const char *)MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *unsigned int v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  uint64_t v5 = (uint64_t *)CurrentMemoryContext(v4);
  uint64_t v6 = *v5;
  bzero(__s1, 0x1001uLL);
  unint64_t v7 = (void *)PG_exception_stack();
  uint64_t v8 = *v7;
  uint64_t v9 = v7;
  uint64_t v10 = (void *)error_context_stack();
  uint64_t v11 = *v10;
  unint64_t v12 = v10;
  int v17 = 0;
  memset(v16, 0, sizeof(v16));
  if (sigsetjmp((int *)v16, 0))
  {
    *uint64_t v9 = v8;
    *unint64_t v12 = v11;
    *uint64_t v5 = v6;
    uint64_t v13 = CopyErrorData();
    uint64_t v14 = malloc_type_malloc(0x28uLL, 0x1010040E871EB1AuLL);
    *uint64_t v14 = strdup(*(const char **)(v13 + 64));
    v14[2] = strdup(*(const char **)(v13 + 16));
    v14[1] = strdup(*(const char **)(v13 + 32));
    v14[4] = 0;
    *((_DWORD *)v14 + 6) = *(_DWORD *)(v13 + 24);
    *((_DWORD *)v14 + 7) = *(_DWORD *)(v13 + 160);
    v3[2] = (uint64_t)v14;
    uint64_t result = FlushErrorState();
  }
  else
  {
    *uint64_t v9 = v16;
    uint64_t *v3 = raw_parser(v1);
    uint64_t result = (uint64_t)strdup(__s1);
    v3[1] = result;
  }
  *uint64_t v9 = v8;
  *unint64_t v12 = v11;
  return result;
}

uint64_t pg_query_parse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pg_query_enter_memory_context();
  pg_query_raw_parse(a1);
  *(_OWORD *)(a2 + 8) = v7;
  nodes_to_json = (const char *)pg_query_nodes_to_json(v6);
  *(void *)a2 = strdup(nodes_to_json);
  pfree((uint64_t)nodes_to_json);

  return pg_query_exit_memory_context();
}

uint64_t pg_query_parse_protobuf@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pg_query_enter_memory_context();
  pg_query_raw_parse(a1);
  *(_OWORD *)(a2 + 16) = v7;
  *(void *)a2 = pg_query_nodes_to_protobuf(v6);
  *(void *)(a2 + 8) = v4;

  return pg_query_exit_memory_context();
}

void pg_query_free_parse_result(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    pg_query_free_error(v2);
  }
  free(*(void **)a1);
  uint64_t v3 = *(void **)(a1 + 8);

  free(v3);
}

void pg_query_free_protobuf_parse_result(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    pg_query_free_error(v2);
  }
  free(*(void **)(a1 + 8));
  uint64_t v3 = *(void **)(a1 + 16);

  free(v3);
}

uint64_t pg_query_protobuf_to_nodes(unsigned int a1, unsigned __int8 *a2)
{
  uint64_t parse_result__unpack = pg_query__parse_result__unpack(0, a1, a2);
  uint64_t v3 = parse_result__unpack;
  if (*(void *)(parse_result__unpack + 32))
  {
    uint64_t v4 = **(void **)(parse_result__unpack + 40);
    uint64_t v5 = (uint64_t *)CurrentMemoryContext();
    unint64_t v6 = MemoryContextAllocZeroAligned(*v5, 0x18uLL);
    *(_DWORD *)unint64_t v6 = 230;
    uint64_t v7 = *(void *)(v4 + 24);
    if (v7) {
      *(void *)(v6 + 8) = _readNode(v7);
    }
    *(_DWORD *)(v6 + 16) = *(_DWORD *)(v4 + 32);
    *(_DWORD *)(v6 + 20) = *(_DWORD *)(v4 + 36);
    list_make1_impl(226, v6);
    uint64_t v9 = v8;
    if (*(void *)(v3 + 32) >= 2uLL)
    {
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = *(void *)(*(void *)(v3 + 40) + 8 * v10);
        unint64_t v12 = MemoryContextAllocZeroAligned(*v5, 0x18uLL);
        *(_DWORD *)unint64_t v12 = 230;
        uint64_t v13 = *(void *)(v11 + 24);
        if (v13) {
          *(void *)(v12 + 8) = _readNode(v13);
        }
        *(_DWORD *)(v12 + 16) = *(_DWORD *)(v11 + 32);
        *(_DWORD *)(v12 + 20) = *(_DWORD *)(v11 + 36);
        uint64_t v9 = lappend(v9, v12);
        ++v10;
      }
      while (v10 < *(void *)(v3 + 32));
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  pg_query__parse_result__free_unpacked((void **)v3, 0);
  return v9;
}

unint64_t _readRawStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 230;
  if (*(void *)(a1 + 24)) {
    *(void *)(v3 + 8) = _readNode();
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 36);
  return v3;
}

_DWORD *_readNode(uint64_t a1)
{
  v1 = 0;
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      goto LABEL_511;
    case 1:
      uint64_t v2 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlias(v2);
    case 2:
      uint64_t v4 = *(void *)(a1 + 32);
      return (_DWORD *)_readRangeVar(v4);
    case 3:
      uint64_t v5 = *(void *)(a1 + 32);
      return (_DWORD *)_readTableFunc(v5);
    case 4:
      unint64_t v6 = (uint64_t *)CurrentMemoryContext();
      uint64_t v7 = (_DWORD *)MemoryContextAllocZero(*v6, 4uLL);
      v1 = v7;
      int v8 = 105;
      goto LABEL_510;
    case 5:
      uint64_t v9 = *(_DWORD **)(a1 + 32);
      return (_DWORD *)_readVar(v9);
    case 6:
      unint64_t v10 = *(_DWORD **)(a1 + 32);
      return _readParam(v10);
    case 7:
      uint64_t v183 = *(void *)(a1 + 32);
      return (_DWORD *)_readAggref(v183);
    case 8:
      uint64_t v184 = *(void *)(a1 + 32);
      return (_DWORD *)_readGroupingFunc(v184);
    case 9:
      uint64_t v185 = *(void *)(a1 + 32);
      return (_DWORD *)_readWindowFunc(v185);
    case 0xA:
      uint64_t v11 = *(void *)(a1 + 32);
      return (_DWORD *)_readSubscriptingRef(v11);
    case 0xB:
      uint64_t v12 = *(void *)(a1 + 32);
      return (_DWORD *)_readFuncExpr(v12);
    case 0xC:
      uint64_t v13 = *(void *)(a1 + 32);
      return (_DWORD *)_readNamedArgExpr(v13);
    case 0xD:
      uint64_t v186 = *(void *)(a1 + 32);
      return (_DWORD *)_readOpExpr(v186);
    case 0xE:
      uint64_t v14 = *(void *)(a1 + 32);
      return (_DWORD *)_readDistinctExpr(v14);
    case 0xF:
      uint64_t v15 = *(void *)(a1 + 32);
      return (_DWORD *)_readNullIfExpr(v15);
    case 0x10:
      uint64_t v16 = *(void *)(a1 + 32);
      return (_DWORD *)_readScalarArrayOpExpr(v16);
    case 0x11:
      uint64_t v17 = *(void *)(a1 + 32);
      return _readBoolExpr(v17);
    case 0x12:
      uint64_t v187 = *(void *)(a1 + 32);
      return _readSubLink(v187);
    case 0x13:
      uint64_t v18 = *(void *)(a1 + 32);
      return _readSubPlan(v18);
    case 0x14:
      uint64_t v188 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlternativeSubPlan(v188);
    case 0x15:
      uint64_t v19 = *(void *)(a1 + 32);
      return (_DWORD *)_readFieldSelect(v19);
    case 0x16:
      uint64_t v20 = *(void *)(a1 + 32);
      return (_DWORD *)_readFieldStore(v20);
    case 0x17:
      uint64_t v21 = *(void *)(a1 + 32);
      return (_DWORD *)_readRelabelType(v21);
    case 0x18:
      uint64_t v189 = *(void *)(a1 + 32);
      return (_DWORD *)_readCoerceViaIO(v189);
    case 0x19:
      uint64_t v190 = *(void *)(a1 + 32);
      return (_DWORD *)_readArrayCoerceExpr(v190);
    case 0x1A:
      uint64_t v191 = *(void *)(a1 + 32);
      return (_DWORD *)_readConvertRowtypeExpr(v191);
    case 0x1B:
      uint64_t v192 = *(void *)(a1 + 32);
      return (_DWORD *)_readCollateExpr(v192);
    case 0x1C:
      uint64_t v193 = *(void *)(a1 + 32);
      return (_DWORD *)_readCaseExpr(v193);
    case 0x1D:
      uint64_t v22 = *(void *)(a1 + 32);
      return (_DWORD *)_readCaseWhen(v22);
    case 0x1E:
      v194 = *(_DWORD **)(a1 + 32);
      return _readCaseTestExpr(v194);
    case 0x1F:
      uint64_t v195 = *(void *)(a1 + 32);
      return (_DWORD *)_readArrayExpr(v195);
    case 0x20:
      uint64_t v23 = *(void *)(a1 + 32);
      return (_DWORD *)_readRowExpr(v23);
    case 0x21:
      uint64_t v196 = *(void *)(a1 + 32);
      return _readRowCompareExpr(v196);
    case 0x22:
      uint64_t v197 = *(void *)(a1 + 32);
      return (_DWORD *)_readCoalesceExpr(v197);
    case 0x23:
      uint64_t v24 = *(void *)(a1 + 32);
      return (_DWORD *)_readMinMaxExpr(v24);
    case 0x24:
      uint64_t v25 = *(_DWORD **)(a1 + 32);
      return _readSQLValueFunction(v25);
    case 0x25:
      uint64_t v26 = *(void *)(a1 + 32);
      return _readXmlExpr(v26);
    case 0x26:
      uint64_t v198 = *(void *)(a1 + 32);
      return (_DWORD *)_readNullTest(v198);
    case 0x27:
      uint64_t v199 = *(void *)(a1 + 32);
      return (_DWORD *)_readBooleanTest(v199);
    case 0x28:
      uint64_t v27 = *(void *)(a1 + 32);
      return (_DWORD *)_readCoerceToDomain(v27);
    case 0x29:
      uint64_t v28 = *(_DWORD **)(a1 + 32);
      return _readCoerceToDomainValue(v28);
    case 0x2A:
      unint64_t v29 = *(_DWORD **)(a1 + 32);
      return _readSetToDefault(v29);
    case 0x2B:
      uint64_t v30 = *(void *)(a1 + 32);
      return (_DWORD *)_readCurrentOfExpr(v30);
    case 0x2C:
      uint64_t v200 = *(void *)(a1 + 32);
      v201 = (uint64_t *)CurrentMemoryContext();
      uint64_t result = (_DWORD *)MemoryContextAllocZero(*v201, 0xCuLL);
      _DWORD *result = 146;
      result[1] = *(_DWORD *)(v200 + 32);
      result[2] = *(_DWORD *)(v200 + 36);
      return result;
    case 0x2D:
      uint64_t v31 = *(void *)(a1 + 32);
      return (_DWORD *)_readInferenceElem(v31);
    case 0x2E:
      uint64_t v32 = *(void *)(a1 + 32);
      return (_DWORD *)_readTargetEntry(v32);
    case 0x2F:
      uint64_t v33 = *(void *)(a1 + 32);
      uint64_t v34 = (uint64_t *)CurrentMemoryContext();
      uint64_t result = (_DWORD *)MemoryContextAllocZeroAligned(*v34, 8uLL);
      _DWORD *result = 149;
      result[1] = *(_DWORD *)(v33 + 24);
      return result;
    case 0x30:
      uint64_t v202 = *(void *)(a1 + 32);
      return (_DWORD *)_readJoinExpr(v202);
    case 0x31:
      uint64_t v35 = *(void *)(a1 + 32);
      return (_DWORD *)_readFromExpr(v35);
    case 0x32:
      uint64_t v36 = *(void *)(a1 + 32);
      return _readOnConflictExpr(v36);
    case 0x33:
      uint64_t v37 = *(void *)(a1 + 32);
      return (_DWORD *)_readIntoClause(v37);
    case 0x34:
      uint64_t v203 = *(void *)(a1 + 32);
      return (_DWORD *)_readRawStmt(v203);
    case 0x35:
      uint64_t v38 = *(void *)(a1 + 32);
      return (_DWORD *)_readQuery(v38);
    case 0x36:
      uint64_t v204 = *(void *)(a1 + 32);
      return (_DWORD *)_readInsertStmt(v204);
    case 0x37:
      uint64_t v39 = *(void *)(a1 + 32);
      return (_DWORD *)_readDeleteStmt(v39);
    case 0x38:
      uint64_t v40 = *(void *)(a1 + 32);
      return (_DWORD *)_readUpdateStmt(v40);
    case 0x39:
      uint64_t v41 = *(void *)(a1 + 32);
      return (_DWORD *)_readSelectStmt(v41);
    case 0x3A:
      uint64_t v42 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterTableStmt(v42);
    case 0x3B:
      uint64_t v43 = *(void *)(a1 + 32);
      return _readAlterTableCmd(v43);
    case 0x3C:
      uint64_t v44 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterDomainStmt(v44);
    case 0x3D:
      uint64_t v205 = *(void *)(a1 + 32);
      return _readSetOperationStmt(v205);
    case 0x3E:
      uint64_t v206 = *(void *)(a1 + 32);
      return (_DWORD *)_readGrantStmt(v206);
    case 0x3F:
      uint64_t v207 = *(void *)(a1 + 32);
      return (_DWORD *)_readGrantRoleStmt(v207);
    case 0x40:
      uint64_t v208 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterDefaultPrivilegesStmt(v208);
    case 0x41:
      uint64_t v45 = *(void *)(a1 + 32);
      return (_DWORD *)_readClosePortalStmt(v45);
    case 0x42:
      uint64_t v46 = *(void *)(a1 + 32);
      return (_DWORD *)_readClusterStmt(v46);
    case 0x43:
      uint64_t v47 = *(void *)(a1 + 32);
      return (_DWORD *)_readCopyStmt(v47);
    case 0x44:
      uint64_t v209 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateStmt(v209);
    case 0x45:
      uint64_t v48 = *(void *)(a1 + 32);
      return (_DWORD *)_readDefineStmt(v48);
    case 0x46:
      uint64_t v49 = *(void *)(a1 + 32);
      return (_DWORD *)_readDropStmt(v49);
    case 0x47:
      uint64_t v50 = *(void *)(a1 + 32);
      return (_DWORD *)_readTruncateStmt(v50);
    case 0x48:
      uint64_t v210 = *(void *)(a1 + 32);
      return _readCommentStmt(v210);
    case 0x49:
      uint64_t v51 = *(void *)(a1 + 32);
      return (_DWORD *)_readFetchStmt(v51);
    case 0x4A:
      uint64_t v52 = *(void *)(a1 + 32);
      return (_DWORD *)_readIndexStmt(v52);
    case 0x4B:
      uint64_t v53 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateFunctionStmt(v53);
    case 0x4C:
      uint64_t v54 = *(void *)(a1 + 32);
      return _readAlterFunctionStmt(v54);
    case 0x4D:
      uint64_t v55 = *(void *)(a1 + 32);
      return (_DWORD *)_readDoStmt(v55);
    case 0x4E:
      uint64_t v56 = *(void *)(a1 + 32);
      return _readRenameStmt(v56);
    case 0x4F:
      uint64_t v57 = *(void *)(a1 + 32);
      return (_DWORD *)_readRuleStmt(v57);
    case 0x50:
      uint64_t v211 = *(void *)(a1 + 32);
      return (_DWORD *)_readNotifyStmt(v211);
    case 0x51:
      uint64_t v58 = *(void *)(a1 + 32);
      return (_DWORD *)_readListenStmt(v58);
    case 0x52:
      uint64_t v59 = *(void *)(a1 + 32);
      return (_DWORD *)_readUnlistenStmt(v59);
    case 0x53:
      uint64_t v60 = *(void *)(a1 + 32);
      return _readTransactionStmt(v60);
    case 0x54:
      uint64_t v212 = *(void *)(a1 + 32);
      return (_DWORD *)_readViewStmt(v212);
    case 0x55:
      uint64_t v213 = *(void *)(a1 + 32);
      return (_DWORD *)_readLoadStmt(v213);
    case 0x56:
      uint64_t v214 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateDomainStmt(v214);
    case 0x57:
      uint64_t v61 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreatedbStmt(v61);
    case 0x58:
      uint64_t v62 = *(void *)(a1 + 32);
      return (_DWORD *)_readDropdbStmt(v62);
    case 0x59:
      uint64_t v63 = *(void *)(a1 + 32);
      return (_DWORD *)_readVacuumStmt(v63);
    case 0x5A:
      uint64_t v64 = *(void *)(a1 + 32);
      return (_DWORD *)_readExplainStmt(v64);
    case 0x5B:
      uint64_t v65 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateTableAsStmt(v65);
    case 0x5C:
      uint64_t v215 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateSeqStmt(v215);
    case 0x5D:
      uint64_t v216 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterSeqStmt(v216);
    case 0x5E:
      uint64_t v66 = *(void *)(a1 + 32);
      return _readVariableSetStmt(v66);
    case 0x5F:
      uint64_t v67 = *(void *)(a1 + 32);
      return (_DWORD *)_readVariableShowStmt(v67);
    case 0x60:
      uint64_t v68 = *(void *)(a1 + 32);
      return _readDiscardStmt(v68);
    case 0x61:
      uint64_t v69 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateTrigStmt(v69);
    case 0x62:
      uint64_t v70 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreatePLangStmt(v70);
    case 0x63:
      uint64_t v71 = *(void *)(a1 + 32);
      return _readCreateRoleStmt(v71);
    case 0x64:
      uint64_t v72 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterRoleStmt(v72);
    case 0x65:
      uint64_t v73 = *(void *)(a1 + 32);
      return (_DWORD *)_readDropRoleStmt(v73);
    case 0x66:
      uint64_t v217 = *(void *)(a1 + 32);
      return (_DWORD *)_readLockStmt(v217);
    case 0x67:
      uint64_t v74 = *(void *)(a1 + 32);
      return (_DWORD *)_readConstraintsSetStmt(v74);
    case 0x68:
      uint64_t v75 = *(void *)(a1 + 32);
      return _readReindexStmt(v75);
    case 0x69:
      uint64_t v76 = (uint64_t *)CurrentMemoryContext();
      uint64_t v7 = (_DWORD *)MemoryContextAllocZero(*v76, 4uLL);
      v1 = v7;
      int v8 = 284;
      goto LABEL_510;
    case 0x6A:
      uint64_t v77 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateSchemaStmt(v77);
    case 0x6B:
      uint64_t v78 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterDatabaseStmt(v78);
    case 0x6C:
      uint64_t v79 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterDatabaseSetStmt(v79);
    case 0x6D:
      uint64_t v80 = *(void **)(a1 + 32);
      return (_DWORD *)_readAlterRoleSetStmt(v80);
    case 0x6E:
      uint64_t v81 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateConversionStmt(v81);
    case 0x6F:
      uint64_t v82 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateCastStmt(v82);
    case 0x70:
      uint64_t v83 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateOpClassStmt(v83);
    case 0x71:
      uint64_t v84 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateOpFamilyStmt(v84);
    case 0x72:
      uint64_t v85 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterOpFamilyStmt(v85);
    case 0x73:
      uint64_t v86 = *(void *)(a1 + 32);
      return (_DWORD *)_readPrepareStmt(v86);
    case 0x74:
      uint64_t v87 = *(void *)(a1 + 32);
      return (_DWORD *)_readExecuteStmt(v87);
    case 0x75:
      uint64_t v88 = *(void *)(a1 + 32);
      return (_DWORD *)_readDeallocateStmt(v88);
    case 0x76:
      uint64_t v89 = *(void *)(a1 + 32);
      return (_DWORD *)_readDeclareCursorStmt(v89);
    case 0x77:
      uint64_t v90 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateTableSpaceStmt(v90);
    case 0x78:
      uint64_t v91 = *(void *)(a1 + 32);
      return (_DWORD *)_readDropTableSpaceStmt(v91);
    case 0x79:
      uint64_t v92 = *(void *)(a1 + 32);
      return _readAlterObjectDependsStmt(v92);
    case 0x7A:
      uint64_t v218 = *(void *)(a1 + 32);
      return _readAlterObjectSchemaStmt(v218);
    case 0x7B:
      uint64_t v219 = *(void *)(a1 + 32);
      return _readAlterOwnerStmt(v219);
    case 0x7C:
      uint64_t v93 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterOperatorStmt(v93);
    case 0x7D:
      uint64_t v220 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterTypeStmt(v220);
    case 0x7E:
      uint64_t v221 = *(void *)(a1 + 32);
      return (_DWORD *)_readDropOwnedStmt(v221);
    case 0x7F:
      uint64_t v222 = *(void *)(a1 + 32);
      return (_DWORD *)_readReassignOwnedStmt(v222);
    case 0x80:
      uint64_t v94 = *(void *)(a1 + 32);
      return (_DWORD *)_readCompositeTypeStmt(v94);
    case 0x81:
      uint64_t v223 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateEnumStmt(v223);
    case 0x82:
      uint64_t v95 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateRangeStmt(v95);
    case 0x83:
      uint64_t v224 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterEnumStmt(v224);
    case 0x84:
      uint64_t v96 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterTSDictionaryStmt(v96);
    case 0x85:
      uint64_t v97 = *(void *)(a1 + 32);
      return _readAlterTSConfigurationStmt(v97);
    case 0x86:
      uint64_t v98 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateFdwStmt(v98);
    case 0x87:
      uint64_t v99 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterFdwStmt(v99);
    case 0x88:
      uint64_t v225 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateForeignServerStmt(v225);
    case 0x89:
      uint64_t v226 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterForeignServerStmt(v226);
    case 0x8A:
      uint64_t v100 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateUserMappingStmt(v100);
    case 0x8B:
      uint64_t v227 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterUserMappingStmt(v227);
    case 0x8C:
      uint64_t v101 = *(void *)(a1 + 32);
      return (_DWORD *)_readDropUserMappingStmt(v101);
    case 0x8D:
      uint64_t v102 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterTableSpaceOptionsStmt(v102);
    case 0x8E:
      uint64_t v103 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterTableMoveAllStmt(v103);
    case 0x8F:
      uint64_t v104 = *(void *)(a1 + 32);
      return _readSecLabelStmt(v104);
    case 0x90:
      uint64_t v105 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateForeignTableStmt(v105);
    case 0x91:
      uint64_t v106 = *(void *)(a1 + 32);
      return (_DWORD *)_readImportForeignSchemaStmt(v106);
    case 0x92:
      uint64_t v107 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateExtensionStmt(v107);
    case 0x93:
      uint64_t v108 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterExtensionStmt(v108);
    case 0x94:
      uint64_t v228 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterExtensionContentsStmt(v228);
    case 0x95:
      uint64_t v109 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateEventTrigStmt(v109);
    case 0x96:
      uint64_t v110 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterEventTrigStmt(v110);
    case 0x97:
      uint64_t v111 = *(void *)(a1 + 32);
      return (_DWORD *)_readRefreshMatViewStmt(v111);
    case 0x98:
      uint64_t v229 = *(void *)(a1 + 32);
      return (_DWORD *)_readReplicaIdentityStmt(v229);
    case 0x99:
      uint64_t v230 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterSystemStmt(v230);
    case 0x9A:
      uint64_t v112 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreatePolicyStmt(v112);
    case 0x9B:
      uint64_t v113 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterPolicyStmt(v113);
    case 0x9C:
      uint64_t v114 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateTransformStmt(v114);
    case 0x9D:
      uint64_t v115 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateAmStmt(v115);
    case 0x9E:
      uint64_t v231 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreatePublicationStmt(v231);
    case 0x9F:
      uint64_t v116 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterPublicationStmt(v116);
    case 0xA0:
      uint64_t v117 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateSubscriptionStmt(v117);
    case 0xA1:
      uint64_t v118 = *(void *)(a1 + 32);
      return _readAlterSubscriptionStmt(v118);
    case 0xA2:
      uint64_t v119 = *(void *)(a1 + 32);
      return (_DWORD *)_readDropSubscriptionStmt(v119);
    case 0xA3:
      uint64_t v120 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateStatsStmt(v120);
    case 0xA4:
      uint64_t v121 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterCollationStmt(v121);
    case 0xA5:
      uint64_t v122 = *(void *)(a1 + 32);
      return (_DWORD *)_readCallStmt(v122);
    case 0xA6:
      uint64_t v123 = *(void *)(a1 + 32);
      return (_DWORD *)_readAlterStatsStmt(v123);
    case 0xA7:
      uint64_t v124 = *(void *)(a1 + 32);
      return _readAExpr(v124);
    case 0xA8:
      uint64_t v125 = *(void *)(a1 + 32);
      return (_DWORD *)_readColumnRef(v125);
    case 0xA9:
      uint64_t v126 = *(void *)(a1 + 32);
      v127 = (uint64_t *)CurrentMemoryContext();
      uint64_t result = (_DWORD *)MemoryContextAllocZero(*v127, 0xCuLL);
      _DWORD *result = 348;
      result[1] = *(_DWORD *)(v126 + 24);
      result[2] = *(_DWORD *)(v126 + 28);
      return result;
    case 0xAA:
      uint64_t v128 = *(void *)(a1 + 32);
      return (_DWORD *)_readAConst(v128);
    case 0xAB:
      uint64_t v129 = *(void *)(a1 + 32);
      return (_DWORD *)_readFuncCall(v129);
    case 0xAC:
      v130 = (uint64_t *)CurrentMemoryContext();
      uint64_t v7 = (_DWORD *)MemoryContextAllocZero(*v130, 4uLL);
      v1 = v7;
      int v8 = 351;
      goto LABEL_510;
    case 0xAD:
      uint64_t v131 = *(void *)(a1 + 32);
      return (_DWORD *)_readAIndices(v131);
    case 0xAE:
      uint64_t v232 = *(void *)(a1 + 32);
      return (_DWORD *)_readAIndirection(v232);
    case 0xAF:
      uint64_t v233 = *(void *)(a1 + 32);
      return (_DWORD *)_readAArrayExpr(v233);
    case 0xB0:
      uint64_t v132 = *(void *)(a1 + 32);
      return (_DWORD *)_readResTarget(v132);
    case 0xB1:
      uint64_t v133 = *(void *)(a1 + 32);
      return (_DWORD *)_readMultiAssignRef(v133);
    case 0xB2:
      uint64_t v134 = *(void *)(a1 + 32);
      return (_DWORD *)_readTypeCast(v134);
    case 0xB3:
      uint64_t v135 = *(void *)(a1 + 32);
      return (_DWORD *)_readCollateClause(v135);
    case 0xB4:
      uint64_t v234 = *(void *)(a1 + 32);
      return (_DWORD *)_readSortBy(v234);
    case 0xB5:
      uint64_t v136 = *(void *)(a1 + 32);
      return (_DWORD *)_readWindowDef(v136);
    case 0xB6:
      uint64_t v137 = *(void *)(a1 + 32);
      return (_DWORD *)_readRangeSubselect(v137);
    case 0xB7:
      uint64_t v138 = *(void *)(a1 + 32);
      return (_DWORD *)_readRangeFunction(v138);
    case 0xB8:
      uint64_t v139 = *(void *)(a1 + 32);
      return (_DWORD *)_readRangeTableSample(v139);
    case 0xB9:
      uint64_t v140 = *(void *)(a1 + 32);
      return (_DWORD *)_readRangeTableFunc(v140);
    case 0xBA:
      uint64_t v141 = *(void *)(a1 + 32);
      return (_DWORD *)_readRangeTableFuncCol(v141);
    case 0xBB:
      uint64_t v142 = *(void *)(a1 + 32);
      return (_DWORD *)_readTypeName(v142);
    case 0xBC:
      uint64_t v143 = *(void *)(a1 + 32);
      return (_DWORD *)_readColumnDef(v143);
    case 0xBD:
      uint64_t v144 = *(void *)(a1 + 32);
      return (_DWORD *)_readIndexElem(v144);
    case 0xBE:
      uint64_t v145 = *(void *)(a1 + 32);
      return _readConstraint(v145);
    case 0xBF:
      uint64_t v146 = *(void *)(a1 + 32);
      return (_DWORD *)_readDefElem(v146);
    case 0xC0:
      uint64_t v147 = *(void *)(a1 + 32);
      return (_DWORD *)_readRangeTblEntry(v147);
    case 0xC1:
      uint64_t v148 = *(void *)(a1 + 32);
      return (_DWORD *)_readRangeTblFunction(v148);
    case 0xC2:
      uint64_t v149 = *(void *)(a1 + 32);
      return (_DWORD *)_readTableSampleClause(v149);
    case 0xC3:
      uint64_t v150 = *(void *)(a1 + 32);
      return _readWithCheckOption(v150);
    case 0xC4:
      v151 = *(_DWORD **)(a1 + 32);
      return (_DWORD *)_readSortGroupClause(v151);
    case 0xC5:
      uint64_t v152 = *(void *)(a1 + 32);
      return _readGroupingSet(v152);
    case 0xC6:
      uint64_t v153 = *(void *)(a1 + 32);
      return (_DWORD *)_readWindowClause(v153);
    case 0xC7:
      uint64_t v154 = *(void *)(a1 + 32);
      return (_DWORD *)_readObjectWithArgs(v154);
    case 0xC8:
      uint64_t v155 = *(void *)(a1 + 32);
      return (_DWORD *)_readAccessPriv(v155);
    case 0xC9:
      uint64_t v156 = *(void *)(a1 + 32);
      return (_DWORD *)_readCreateOpClassItem(v156);
    case 0xCA:
      uint64_t v157 = *(void *)(a1 + 32);
      return (_DWORD *)_readTableLikeClause(v157);
    case 0xCB:
      uint64_t v158 = *(void *)(a1 + 32);
      return (_DWORD *)_readFunctionParameter(v158);
    case 0xCC:
      uint64_t v159 = *(void *)(a1 + 32);
      return (_DWORD *)_readLockingClause(v159);
    case 0xCD:
      v160 = *(_DWORD **)(a1 + 32);
      return (_DWORD *)_readRowMarkClause(v160);
    case 0xCE:
      uint64_t v161 = *(void *)(a1 + 32);
      return (_DWORD *)_readXmlSerialize(v161);
    case 0xCF:
      uint64_t v162 = *(void *)(a1 + 32);
      return (_DWORD *)_readWithClause(v162);
    case 0xD0:
      uint64_t v163 = *(void *)(a1 + 32);
      return (_DWORD *)_readInferClause(v163);
    case 0xD1:
      uint64_t v164 = *(void *)(a1 + 32);
      return _readOnConflictClause(v164);
    case 0xD2:
      uint64_t v165 = *(void *)(a1 + 32);
      return (_DWORD *)_readCommonTableExpr(v165);
    case 0xD3:
      uint64_t v166 = *(void *)(a1 + 32);
      return _readRoleSpec(v166);
    case 0xD4:
      uint64_t v167 = *(void *)(a1 + 32);
      return (_DWORD *)_readTriggerTransition(v167);
    case 0xD5:
      uint64_t v168 = *(void *)(a1 + 32);
      return (_DWORD *)_readPartitionElem(v168);
    case 0xD6:
      uint64_t v169 = *(void *)(a1 + 32);
      return (_DWORD *)_readPartitionSpec(v169);
    case 0xD7:
      uint64_t v170 = *(void *)(a1 + 32);
      return (_DWORD *)_readPartitionBoundSpec(v170);
    case 0xD8:
      uint64_t v171 = *(void *)(a1 + 32);
      return _readPartitionRangeDatum(v171);
    case 0xD9:
      uint64_t v172 = *(void *)(a1 + 32);
      return (_DWORD *)_readPartitionCmd(v172);
    case 0xDA:
      uint64_t v173 = *(void *)(a1 + 32);
      return (_DWORD *)_readVacuumRelation(v173);
    case 0xDB:
      uint64_t v174 = *(void *)(a1 + 32);
      return (_DWORD *)_readInlineCodeBlock(v174);
    case 0xDC:
      uint64_t v175 = *(void *)(a1 + 32);
      v176 = (uint64_t *)CurrentMemoryContext();
      uint64_t result = (_DWORD *)MemoryContextAllocZeroAligned(*v176, 8uLL);
      _DWORD *result = 416;
      *((unsigned char *)result + 4) = *(_DWORD *)(v175 + 24) != 0;
      return result;
    case 0xDD:
      int v177 = *(_DWORD *)(*(void *)(a1 + 32) + 24);
      return makeInteger(v177);
    case 0xDE:
      v178 = pstrdup(*(const char **)(*(void *)(a1 + 32) + 24));
      return (_DWORD *)makeFloat((uint64_t)v178);
    case 0xDF:
      v179 = pstrdup(*(const char **)(*(void *)(a1 + 32) + 24));
      return (_DWORD *)makeString((uint64_t)v179);
    case 0xE0:
      v180 = pstrdup(*(const char **)(*(void *)(a1 + 32) + 24));
      return (_DWORD *)makeBitString((uint64_t)v180);
    case 0xE1:
      v181 = (uint64_t *)CurrentMemoryContext();
      uint64_t v7 = (_DWORD *)MemoryContextAllocZeroAligned(*v181, 0x10uLL);
      v1 = v7;
      int v8 = 225;
LABEL_510:
      *uint64_t v7 = v8;
LABEL_511:
      uint64_t result = v1;
      break;
    case 0xE2:
      uint64_t v182 = *(void *)(a1 + 32);
      uint64_t result = (_DWORD *)_readList(v182);
      break;
    default:
      _readNode_cold_1((_DWORD *)(a1 + 24));
  }
  return result;
}

unint64_t _readAlias(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 102;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readRangeVar(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t v3 = 103;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(const char **)(a1 + 32);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  uint64_t v6 = *(const char **)(a1 + 40);
  if (v6 && *v6) {
    *(void *)(v3 + 24) = pstrdup(v6);
  }
  *(unsigned char *)(v3 + 32) = *(_DWORD *)(a1 + 48) != 0;
  uint64_t v7 = *(unsigned __int8 **)(a1 + 56);
  if (v7)
  {
    int v8 = *v7;
    if (v8) {
      *(unsigned char *)(v3 + 33) = v8;
    }
  }
  uint64_t v9 = *(void *)(a1 + 64);
  if (v9) {
    *(void *)(v3 + 40) = _readAlias(v9);
  }
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readTableFunc(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x68uLL);
  *(_DWORD *)unint64_t v3 = 104;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, v10);
    *(void *)(v3 + 16) = v11;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 40) > v14);
    }
  }
  uint64_t v16 = *(void *)(a1 + 56);
  if (v16) {
    *(void *)(v3 + 24) = _readNode(v16);
  }
  uint64_t v17 = *(void *)(a1 + 64);
  if (v17) {
    *(void *)(v3 + 32) = _readNode(v17);
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v18 = _readNode(**(void **)(a1 + 80));
    list_make1_impl(226, v18);
    *(void *)(v3 + 40) = v19;
    if (*(void *)(a1 + 72) >= 2uLL)
    {
      uint64_t v20 = v19;
      int v21 = 2;
      unint64_t v22 = 1;
      do
      {
        uint64_t v23 = _readNode(*(void *)(*(void *)(a1 + 80) + 8 * v22));
        uint64_t v20 = lappend(v20, v23);
        *(void *)(v3 + 40) = v20;
        unint64_t v22 = v21++;
      }
      while (*(void *)(a1 + 72) > v22);
    }
  }
  if (*(void *)(a1 + 88))
  {
    uint64_t v24 = _readNode(**(void **)(a1 + 96));
    list_make1_impl(226, v24);
    *(void *)(v3 + 48) = v25;
    if (*(void *)(a1 + 88) >= 2uLL)
    {
      uint64_t v26 = v25;
      int v27 = 2;
      unint64_t v28 = 1;
      do
      {
        uint64_t v29 = _readNode(*(void *)(*(void *)(a1 + 96) + 8 * v28));
        uint64_t v26 = lappend(v26, v29);
        *(void *)(v3 + 48) = v26;
        unint64_t v28 = v27++;
      }
      while (*(void *)(a1 + 88) > v28);
    }
  }
  if (*(void *)(a1 + 104))
  {
    uint64_t v30 = _readNode(**(void **)(a1 + 112));
    list_make1_impl(226, v30);
    *(void *)(v3 + 56) = v31;
    if (*(void *)(a1 + 104) >= 2uLL)
    {
      uint64_t v32 = v31;
      int v33 = 2;
      unint64_t v34 = 1;
      do
      {
        uint64_t v35 = _readNode(*(void *)(*(void *)(a1 + 112) + 8 * v34));
        uint64_t v32 = lappend(v32, v35);
        *(void *)(v3 + 56) = v32;
        unint64_t v34 = v33++;
      }
      while (*(void *)(a1 + 104) > v34);
    }
  }
  if (*(void *)(a1 + 120))
  {
    uint64_t v36 = _readNode(**(void **)(a1 + 128));
    list_make1_impl(226, v36);
    *(void *)(v3 + 64) = v37;
    if (*(void *)(a1 + 120) >= 2uLL)
    {
      uint64_t v38 = v37;
      int v39 = 2;
      unint64_t v40 = 1;
      do
      {
        uint64_t v41 = _readNode(*(void *)(*(void *)(a1 + 128) + 8 * v40));
        uint64_t v38 = lappend(v38, v41);
        *(void *)(v3 + 64) = v38;
        unint64_t v40 = v39++;
      }
      while (*(void *)(a1 + 120) > v40);
    }
  }
  if (*(void *)(a1 + 136))
  {
    uint64_t v42 = _readNode(**(void **)(a1 + 144));
    list_make1_impl(226, v42);
    *(void *)(v3 + 72) = v43;
    if (*(void *)(a1 + 136) >= 2uLL)
    {
      uint64_t v44 = v43;
      int v45 = 2;
      unint64_t v46 = 1;
      do
      {
        uint64_t v47 = _readNode(*(void *)(*(void *)(a1 + 144) + 8 * v46));
        uint64_t v44 = lappend(v44, v47);
        *(void *)(v3 + 72) = v44;
        unint64_t v46 = v45++;
      }
      while (*(void *)(a1 + 136) > v46);
    }
  }
  if (*(void *)(a1 + 152))
  {
    uint64_t v48 = _readNode(**(void **)(a1 + 160));
    list_make1_impl(226, v48);
    *(void *)(v3 + 80) = v49;
    if (*(void *)(a1 + 152) >= 2uLL)
    {
      uint64_t v50 = v49;
      int v51 = 2;
      unint64_t v52 = 1;
      do
      {
        uint64_t v53 = _readNode(*(void *)(*(void *)(a1 + 160) + 8 * v52));
        uint64_t v50 = lappend(v50, v53);
        *(void *)(v3 + 80) = v50;
        unint64_t v52 = v51++;
      }
      while (*(void *)(a1 + 152) > v52);
    }
  }
  *(_DWORD *)(v3 + 96) = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(v3 + 100) = *(_DWORD *)(a1 + 188);
  return v3;
}

unint64_t _readVar(_DWORD *a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t result = 106;
  *(_DWORD *)(result + 4) = a1[8];
  *(_WORD *)(result + 8) = a1[9];
  *(_DWORD *)(result + 12) = a1[10];
  *(_DWORD *)(result + 16) = a1[11];
  *(_DWORD *)(result + 20) = a1[12];
  *(_DWORD *)(result + 24) = a1[13];
  *(_DWORD *)(result + 28) = a1[14];
  *(_WORD *)(result + 32) = a1[15];
  *(_DWORD *)(result + 36) = a1[16];
  return result;
}

_DWORD *_readParam(_DWORD *a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = (_DWORD *)MemoryContextAllocZero(*v2, 0x1CuLL);
  _DWORD *result = 108;
  int v4 = a1[8];
  unsigned int v5 = v4 - 2;
  int v6 = v4 - 1;
  if (v5 >= 3) {
    int v6 = 0;
  }
  result[1] = v6;
  result[2] = a1[9];
  result[3] = a1[10];
  result[4] = a1[11];
  result[5] = a1[12];
  result[6] = a1[13];
  return result;
}

unint64_t _readAggref(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x58uLL);
  *(_DWORD *)unint64_t v3 = 109;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 48);
  if (*(void *)(a1 + 56))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v5;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 24) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 56) > v8);
    }
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 80));
    list_make1_impl(226, v10);
    *(void *)(v3 + 32) = v11;
    if (*(void *)(a1 + 72) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 80) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 32) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 72) > v14);
    }
  }
  if (*(void *)(a1 + 88))
  {
    uint64_t v16 = _readNode(**(void **)(a1 + 96));
    list_make1_impl(226, v16);
    *(void *)(v3 + 40) = v17;
    if (*(void *)(a1 + 88) >= 2uLL)
    {
      uint64_t v18 = v17;
      int v19 = 2;
      unint64_t v20 = 1;
      do
      {
        uint64_t v21 = _readNode(*(void *)(*(void *)(a1 + 96) + 8 * v20));
        uint64_t v18 = lappend(v18, v21);
        *(void *)(v3 + 40) = v18;
        unint64_t v20 = v19++;
      }
      while (*(void *)(a1 + 88) > v20);
    }
  }
  if (*(void *)(a1 + 104))
  {
    uint64_t v22 = _readNode(**(void **)(a1 + 112));
    list_make1_impl(226, v22);
    *(void *)(v3 + 48) = v23;
    if (*(void *)(a1 + 104) >= 2uLL)
    {
      uint64_t v24 = v23;
      int v25 = 2;
      unint64_t v26 = 1;
      do
      {
        uint64_t v27 = _readNode(*(void *)(*(void *)(a1 + 112) + 8 * v26));
        uint64_t v24 = lappend(v24, v27);
        *(void *)(v3 + 48) = v24;
        unint64_t v26 = v25++;
      }
      while (*(void *)(a1 + 104) > v26);
    }
  }
  if (*(void *)(a1 + 120))
  {
    uint64_t v28 = _readNode(**(void **)(a1 + 128));
    list_make1_impl(226, v28);
    *(void *)(v3 + 56) = v29;
    if (*(void *)(a1 + 120) >= 2uLL)
    {
      uint64_t v30 = v29;
      int v31 = 2;
      unint64_t v32 = 1;
      do
      {
        uint64_t v33 = _readNode(*(void *)(*(void *)(a1 + 128) + 8 * v32));
        uint64_t v30 = lappend(v30, v33);
        *(void *)(v3 + 56) = v30;
        unint64_t v32 = v31++;
      }
      while (*(void *)(a1 + 120) > v32);
    }
  }
  uint64_t v34 = *(void *)(a1 + 136);
  if (v34) {
    *(void *)(v3 + 64) = _readNode(v34);
  }
  *(unsigned char *)(v3 + 72) = *(_DWORD *)(a1 + 144) != 0;
  *(unsigned char *)(v3 + 73) = *(_DWORD *)(a1 + 148) != 0;
  uint64_t v35 = *(unsigned __int8 **)(a1 + 152);
  if (v35)
  {
    int v36 = *v35;
    if (v36) {
      *(unsigned char *)(v3 + 74) = v36;
    }
  }
  *(_DWORD *)(v3 + 76) = *(_DWORD *)(a1 + 160);
  int v37 = *(_DWORD *)(a1 + 164);
  if (v37 == 2) {
    int v38 = 6;
  }
  else {
    int v38 = 0;
  }
  if (v37 == 3) {
    int v39 = 9;
  }
  else {
    int v39 = v38;
  }
  *(_DWORD *)(v3 + 80) = v39;
  *(_DWORD *)(v3 + 84) = *(_DWORD *)(a1 + 168);
  return v3;
}

unint64_t _readGroupingFunc(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 110;
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 32) > v8);
    }
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, v10);
    *(void *)(v3 + 16) = v11;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 48) > v14);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v16 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v16);
    *(void *)(v3 + 24) = v17;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v18 = v17;
      int v19 = 2;
      unint64_t v20 = 1;
      do
      {
        uint64_t v21 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v20));
        uint64_t v18 = lappend(v18, v21);
        *(void *)(v3 + 24) = v18;
        unint64_t v20 = v19++;
      }
      while (*(void *)(a1 + 64) > v20);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(v3 + 36) = *(_DWORD *)(a1 + 84);
  return v3;
}

unint64_t _readWindowFunc(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t v3 = 111;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 44);
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v5;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 24) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 48) > v8);
    }
  }
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10) {
    *(void *)(v3 + 32) = _readNode(v10);
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  *(unsigned char *)(v3 + 44) = *(_DWORD *)(a1 + 76) != 0;
  *(unsigned char *)(v3 + 45) = *(_DWORD *)(a1 + 80) != 0;
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 84);
  return v3;
}

unint64_t _readSubscriptingRef(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t v3 = 112;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 44);
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v5;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 24) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 48) > v8);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v10);
    *(void *)(v3 + 32) = v11;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 32) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 64) > v14);
    }
  }
  uint64_t v16 = *(void *)(a1 + 80);
  if (v16) {
    *(void *)(v3 + 40) = _readNode(v16);
  }
  uint64_t v17 = *(void *)(a1 + 88);
  if (v17) {
    *(void *)(v3 + 48) = _readNode(v17);
  }
  return v3;
}

unint64_t _readFuncExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  unint64_t v4 = v3;
  *(_DWORD *)unint64_t v3 = 113;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(unsigned char *)(v3 + 12) = *(_DWORD *)(a1 + 40) != 0;
  *(unsigned char *)(v3 + 13) = *(_DWORD *)(a1 + 44) != 0;
  int v5 = *(_DWORD *)(a1 + 48);
  if (v5 == 3) {
    int v6 = 2;
  }
  else {
    int v6 = v5 == 2;
  }
  *(_DWORD *)(v3 + 16) = v6;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 56);
  if (*(void *)(a1 + 64))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, Node);
    *(void *)(v4 + 32) = v8;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v9 = v8;
      int v10 = 2;
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v11));
        uint64_t v9 = lappend(v9, v12);
        *(void *)(v4 + 32) = v9;
        unint64_t v11 = v10++;
      }
      while (*(void *)(a1 + 64) > v11);
    }
  }
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 80);
  return v4;
}

unint64_t _readNamedArgExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 114;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  int v5 = *(const char **)(a1 + 40);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(a1 + 52);
  return v3;
}

unint64_t _readOpExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 115;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(v3 + 16) = *(_DWORD *)(a1 + 44) != 0;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 52);
  if (*(void *)(a1 + 56))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, Node);
    *(void *)(v3 + 32) = v5;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 32) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 56) > v8);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readDistinctExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 116;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(v3 + 16) = *(_DWORD *)(a1 + 44) != 0;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 52);
  if (*(void *)(a1 + 56))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, Node);
    *(void *)(v3 + 32) = v5;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 32) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 56) > v8);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readNullIfExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 117;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(v3 + 16) = *(_DWORD *)(a1 + 44) != 0;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 52);
  if (*(void *)(a1 + 56))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, Node);
    *(void *)(v3 + 32) = v5;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 32) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 56) > v8);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readScalarArrayOpExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 118;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(unsigned char *)(v3 + 12) = *(_DWORD *)(a1 + 40) != 0;
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 44);
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v5;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 24) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 48) > v8);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 64);
  return v3;
}

_DWORD *_readBoolExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 119;
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 == 3) {
    int v6 = 2;
  }
  else {
    int v6 = v5 == 2;
  }
  v3[1] = v6;
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *((void *)v4 + 1) = v8;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v9 = v8;
      int v10 = 2;
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v11));
        uint64_t v9 = lappend(v9, v12);
        *((void *)v4 + 1) = v9;
        unint64_t v11 = v10++;
      }
      while (*(void *)(a1 + 40) > v11);
    }
  }
  v4[4] = *(_DWORD *)(a1 + 56);
  return v4;
}

_DWORD *_readSubLink(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 120;
  int v5 = *(_DWORD *)(a1 + 32);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 7) {
    int v7 = 0;
  }
  v3[1] = v7;
  v3[2] = *(_DWORD *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    *((void *)v4 + 2) = _readNode(v8);
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *((void *)v4 + 3) = v10;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v11 = v10;
      int v12 = 2;
      unint64_t v13 = 1;
      do
      {
        uint64_t v14 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v13));
        uint64_t v11 = lappend(v11, v14);
        *((void *)v4 + 3) = v11;
        unint64_t v13 = v12++;
      }
      while (*(void *)(a1 + 48) > v13);
    }
  }
  uint64_t v15 = *(void *)(a1 + 64);
  if (v15) {
    *((void *)v4 + 4) = _readNode(v15);
  }
  v4[10] = *(_DWORD *)(a1 + 72);
  return v4;
}

_DWORD *_readSubPlan(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x60uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 121;
  int v5 = *(_DWORD *)(a1 + 32);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 7) {
    int v7 = 0;
  }
  v3[1] = v7;
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    *((void *)v4 + 1) = _readNode(v8);
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *((void *)v4 + 2) = v10;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v11 = v10;
      int v12 = 2;
      unint64_t v13 = 1;
      do
      {
        uint64_t v14 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v13));
        uint64_t v11 = lappend(v11, v14);
        *((void *)v4 + 2) = v11;
        unint64_t v13 = v12++;
      }
      while (*(void *)(a1 + 48) > v13);
    }
  }
  v4[6] = *(_DWORD *)(a1 + 64);
  uint64_t v15 = *(const char **)(a1 + 72);
  if (v15 && *v15) {
    *((void *)v4 + 4) = pstrdup(v15);
  }
  v4[10] = *(_DWORD *)(a1 + 80);
  v4[11] = *(_DWORD *)(a1 + 84);
  v4[12] = *(_DWORD *)(a1 + 88);
  *((unsigned char *)v4 + 52) = *(_DWORD *)(a1 + 92) != 0;
  *((unsigned char *)v4 + 53) = *(_DWORD *)(a1 + 96) != 0;
  *((unsigned char *)v4 + 54) = *(_DWORD *)(a1 + 100) != 0;
  if (*(void *)(a1 + 104))
  {
    uint64_t v16 = _readNode(**(void **)(a1 + 112));
    list_make1_impl(226, v16);
    *((void *)v4 + 7) = v17;
    if (*(void *)(a1 + 104) >= 2uLL)
    {
      uint64_t v18 = v17;
      int v19 = 2;
      unint64_t v20 = 1;
      do
      {
        uint64_t v21 = _readNode(*(void *)(*(void *)(a1 + 112) + 8 * v20));
        uint64_t v18 = lappend(v18, v21);
        *((void *)v4 + 7) = v18;
        unint64_t v20 = v19++;
      }
      while (*(void *)(a1 + 104) > v20);
    }
  }
  if (*(void *)(a1 + 120))
  {
    uint64_t v22 = _readNode(**(void **)(a1 + 128));
    list_make1_impl(226, v22);
    *((void *)v4 + 8) = v23;
    if (*(void *)(a1 + 120) >= 2uLL)
    {
      uint64_t v24 = v23;
      int v25 = 2;
      unint64_t v26 = 1;
      do
      {
        uint64_t v27 = _readNode(*(void *)(*(void *)(a1 + 128) + 8 * v26));
        uint64_t v24 = lappend(v24, v27);
        *((void *)v4 + 8) = v24;
        unint64_t v26 = v25++;
      }
      while (*(void *)(a1 + 120) > v26);
    }
  }
  if (*(void *)(a1 + 136))
  {
    uint64_t v28 = _readNode(**(void **)(a1 + 144));
    list_make1_impl(226, v28);
    *((void *)v4 + 9) = v29;
    if (*(void *)(a1 + 136) >= 2uLL)
    {
      uint64_t v30 = v29;
      int v31 = 2;
      unint64_t v32 = 1;
      do
      {
        uint64_t v33 = _readNode(*(void *)(*(void *)(a1 + 144) + 8 * v32));
        uint64_t v30 = lappend(v30, v33);
        *((void *)v4 + 9) = v30;
        unint64_t v32 = v31++;
      }
      while (*(void *)(a1 + 136) > v32);
    }
  }
  *((void *)v4 + 10) = *(void *)(a1 + 152);
  *((void *)v4 + 11) = *(void *)(a1 + 160);
  return v4;
}

unint64_t _readAlternativeSubPlan(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t v3 = 122;
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 32) > v8);
    }
  }
  return v3;
}

unint64_t _readFieldSelect(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 123;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  *(_WORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(a1 + 52);
  return v3;
}

unint64_t _readFieldStore(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 124;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 40) > v9);
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v11 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v11);
    *(void *)(v3 + 24) = v12;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 24) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 56) > v15);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readRelabelType(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 125;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  int v5 = *(_DWORD *)(a1 + 52);
  if (v5 == 3) {
    int v6 = 2;
  }
  else {
    int v6 = v5 == 2;
  }
  *(_DWORD *)(v3 + 28) = v6;
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  return v3;
}

unint64_t _readCoerceViaIO(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 126;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  int v5 = *(_DWORD *)(a1 + 48);
  if (v5 == 3) {
    int v6 = 2;
  }
  else {
    int v6 = v5 == 2;
  }
  *(_DWORD *)(v3 + 24) = v6;
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(a1 + 52);
  return v3;
}

unint64_t _readArrayCoerceExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 127;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    *(void *)(v3 + 16) = _readNode(v5);
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 60);
  if (v6 == 3) {
    int v7 = 2;
  }
  else {
    int v7 = v6 == 2;
  }
  *(_DWORD *)(v3 + 36) = v7;
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 64);
  return v3;
}

unint64_t _readConvertRowtypeExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 128;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  int v5 = *(_DWORD *)(a1 + 44);
  if (v5 == 3) {
    int v6 = 2;
  }
  else {
    int v6 = v5 == 2;
  }
  *(_DWORD *)(v3 + 20) = v6;
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readCollateExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 129;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  return v3;
}

unint64_t _readCaseExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 130;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    *(void *)(v3 + 16) = _readNode(v4);
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v6;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 24) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 48) > v9);
    }
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (v11) {
    *(void *)(v3 + 32) = _readNode(v11);
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readCaseWhen(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 131;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    *(void *)(v3 + 16) = _readNode(v5);
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

_DWORD *_readCaseTestExpr(_DWORD *a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  _DWORD *result = 132;
  result[1] = a1[8];
  result[2] = a1[9];
  result[3] = a1[10];
  return result;
}

unint64_t _readArrayExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 133;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v5;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 16) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 48) > v8);
    }
  }
  *(unsigned char *)(v3 + 24) = *(_DWORD *)(a1 + 64) != 0;
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(a1 + 68);
  return v3;
}

unint64_t _readRowExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 134;
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 32) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 48);
  int v10 = *(_DWORD *)(a1 + 52);
  if (v10 == 3) {
    int v11 = 2;
  }
  else {
    int v11 = v10 == 2;
  }
  *(_DWORD *)(v3 + 20) = v11;
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v12);
    *(void *)(v3 + 24) = v13;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 24) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 56) > v16);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 72);
  return v3;
}

void *_readRowCompareExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 135;
  int v5 = *(_DWORD *)(a1 + 32);
  if ((v5 - 2) >= 5) {
    int v5 = 1;
  }
  v3[1] = v5;
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    v4[1] = v7;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v8 = v7;
      int v9 = 2;
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v10));
        uint64_t v8 = lappend(v8, v11);
        v4[1] = v8;
        unint64_t v10 = v9++;
      }
      while (*(void *)(a1 + 40) > v10);
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v12);
    v4[2] = v13;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        v4[2] = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 56) > v16);
    }
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v18 = _readNode(**(void **)(a1 + 80));
    list_make1_impl(226, v18);
    v4[3] = v19;
    if (*(void *)(a1 + 72) >= 2uLL)
    {
      uint64_t v20 = v19;
      int v21 = 2;
      unint64_t v22 = 1;
      do
      {
        uint64_t v23 = _readNode(*(void *)(*(void *)(a1 + 80) + 8 * v22));
        uint64_t v20 = lappend(v20, v23);
        v4[3] = v20;
        unint64_t v22 = v21++;
      }
      while (*(void *)(a1 + 72) > v22);
    }
  }
  if (*(void *)(a1 + 88))
  {
    uint64_t v24 = _readNode(**(void **)(a1 + 96));
    list_make1_impl(226, v24);
    v4[4] = v25;
    if (*(void *)(a1 + 88) >= 2uLL)
    {
      uint64_t v26 = v25;
      int v27 = 2;
      unint64_t v28 = 1;
      do
      {
        uint64_t v29 = _readNode(*(void *)(*(void *)(a1 + 96) + 8 * v28));
        uint64_t v26 = lappend(v26, v29);
        v4[4] = v26;
        unint64_t v28 = v27++;
      }
      while (*(void *)(a1 + 88) > v28);
    }
  }
  if (*(void *)(a1 + 104))
  {
    uint64_t v30 = _readNode(**(void **)(a1 + 112));
    list_make1_impl(226, v30);
    v4[5] = v31;
    if (*(void *)(a1 + 104) >= 2uLL)
    {
      uint64_t v32 = v31;
      int v33 = 2;
      unint64_t v34 = 1;
      do
      {
        uint64_t v35 = _readNode(*(void *)(*(void *)(a1 + 112) + 8 * v34));
        uint64_t v32 = lappend(v32, v35);
        v4[5] = v32;
        unint64_t v34 = v33++;
      }
      while (*(void *)(a1 + 104) > v34);
    }
  }
  return v4;
}

unint64_t _readCoalesceExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 136;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v5;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 16) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 40) > v8);
    }
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 56);
  return v3;
}

unint64_t _readMinMaxExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 137;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 44) == 2;
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v5;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 24) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 48) > v8);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 64);
  return v3;
}

_DWORD *_readSQLValueFunction(_DWORD *a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = (_DWORD *)MemoryContextAllocZero(*v2, 0x14uLL);
  _DWORD *result = 138;
  int v4 = a1[8];
  unsigned int v5 = v4 - 2;
  int v6 = v4 - 1;
  if (v5 >= 0xE) {
    int v6 = 0;
  }
  result[1] = v6;
  result[2] = a1[9];
  result[3] = a1[10];
  result[4] = a1[11];
  return result;
}

_DWORD *_readXmlExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  int v4 = v3;
  _DWORD *v3 = 139;
  int v5 = *(_DWORD *)(a1 + 32);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 7) {
    int v7 = 0;
  }
  v3[1] = v7;
  unint64_t v8 = *(const char **)(a1 + 40);
  if (v8 && *v8) {
    *((void *)v4 + 1) = pstrdup(v8);
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *((void *)v4 + 2) = v10;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v11 = v10;
      int v12 = 2;
      unint64_t v13 = 1;
      do
      {
        uint64_t v14 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v13));
        uint64_t v11 = lappend(v11, v14);
        *((void *)v4 + 2) = v11;
        unint64_t v13 = v12++;
      }
      while (*(void *)(a1 + 48) > v13);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v15 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v15);
    *((void *)v4 + 3) = v16;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v17 = v16;
      int v18 = 2;
      unint64_t v19 = 1;
      do
      {
        uint64_t v20 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v19));
        uint64_t v17 = lappend(v17, v20);
        *((void *)v4 + 3) = v17;
        unint64_t v19 = v18++;
      }
      while (*(void *)(a1 + 64) > v19);
    }
  }
  if (*(void *)(a1 + 80))
  {
    uint64_t v21 = _readNode(**(void **)(a1 + 88));
    list_make1_impl(226, v21);
    *((void *)v4 + 4) = v22;
    if (*(void *)(a1 + 80) >= 2uLL)
    {
      uint64_t v23 = v22;
      int v24 = 2;
      unint64_t v25 = 1;
      do
      {
        uint64_t v26 = _readNode(*(void *)(*(void *)(a1 + 88) + 8 * v25));
        uint64_t v23 = lappend(v23, v26);
        *((void *)v4 + 4) = v23;
        unint64_t v25 = v24++;
      }
      while (*(void *)(a1 + 80) > v25);
    }
  }
  v4[10] = *(_DWORD *)(a1 + 96) == 2;
  v4[11] = *(_DWORD *)(a1 + 100);
  v4[12] = *(_DWORD *)(a1 + 104);
  v4[13] = *(_DWORD *)(a1 + 108);
  return v4;
}

unint64_t _readNullTest(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 140;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40) == 2;
  *(unsigned char *)(v3 + 20) = *(_DWORD *)(a1 + 44) != 0;
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readBooleanTest(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 141;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  int v5 = *(_DWORD *)(a1 + 40);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 5) {
    int v7 = 0;
  }
  *(_DWORD *)(v3 + 16) = v7;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  return v3;
}

unint64_t _readCoerceToDomain(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 142;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  int v5 = *(_DWORD *)(a1 + 52);
  if (v5 == 3) {
    int v6 = 2;
  }
  else {
    int v6 = v5 == 2;
  }
  *(_DWORD *)(v3 + 28) = v6;
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  return v3;
}

_DWORD *_readCoerceToDomainValue(_DWORD *a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = (_DWORD *)MemoryContextAllocZero(*v2, 0x14uLL);
  _DWORD *result = 143;
  result[1] = a1[8];
  result[2] = a1[9];
  result[3] = a1[10];
  result[4] = a1[11];
  return result;
}

_DWORD *_readSetToDefault(_DWORD *a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = (_DWORD *)MemoryContextAllocZero(*v2, 0x14uLL);
  _DWORD *result = 144;
  result[1] = a1[8];
  result[2] = a1[9];
  result[3] = a1[10];
  result[4] = a1[11];
  return result;
}

unint64_t _readCurrentOfExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 145;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 32);
  uint64_t v4 = *(const char **)(a1 + 40);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readInferenceElem(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 147;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  return v3;
}

unint64_t _readTargetEntry(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 148;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  *(_WORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  int v5 = *(const char **)(a1 + 48);
  if (v5 && *v5) {
    *(void *)(v3 + 24) = pstrdup(v5);
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(v3 + 36) = *(_DWORD *)(a1 + 60);
  *(_WORD *)(v3 + 40) = *(_DWORD *)(a1 + 64);
  *(unsigned char *)(v3 + 42) = *(_DWORD *)(a1 + 68) != 0;
  return v3;
}

unint64_t _readJoinExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  unint64_t v4 = v3;
  *(_DWORD *)unint64_t v3 = 150;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 7) {
    int v7 = 0;
  }
  *(_DWORD *)(v3 + 4) = v7;
  *(unsigned char *)(v3 + 8) = *(_DWORD *)(a1 + 28) != 0;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    *(void *)(v4 + 16) = _readNode(v8);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    *(void *)(v4 + 24) = _readNode(v9);
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *(void *)(v4 + 32) = v11;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v4 + 32) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 48) > v14);
    }
  }
  uint64_t v16 = *(void *)(a1 + 64);
  if (v16) {
    *(void *)(v4 + 40) = _readNode(v16);
  }
  uint64_t v17 = *(void *)(a1 + 72);
  if (v17) {
    *(void *)(v4 + 48) = _readAlias(v17);
  }
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a1 + 80);
  return v4;
}

unint64_t _readFromExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 151;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    *(void *)(v3 + 16) = _readNode(v10);
  }
  return v3;
}

_DWORD *_readOnConflictExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  unint64_t v4 = v3;
  _DWORD *v3 = 152;
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5 == 3) {
    int v6 = 2;
  }
  else {
    int v6 = v5 == 2;
  }
  v3[1] = v6;
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *((void *)v4 + 1) = v8;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v9 = v8;
      int v10 = 2;
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v11));
        uint64_t v9 = lappend(v9, v12);
        *((void *)v4 + 1) = v9;
        unint64_t v11 = v10++;
      }
      while (*(void *)(a1 + 32) > v11);
    }
  }
  uint64_t v13 = *(void *)(a1 + 48);
  if (v13) {
    *((void *)v4 + 2) = _readNode(v13);
  }
  v4[6] = *(_DWORD *)(a1 + 56);
  if (*(void *)(a1 + 64))
  {
    uint64_t v14 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v14);
    *((void *)v4 + 4) = v15;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v16 = v15;
      int v17 = 2;
      unint64_t v18 = 1;
      do
      {
        uint64_t v19 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v18));
        uint64_t v16 = lappend(v16, v19);
        *((void *)v4 + 4) = v16;
        unint64_t v18 = v17++;
      }
      while (*(void *)(a1 + 64) > v18);
    }
  }
  uint64_t v20 = *(void *)(a1 + 80);
  if (v20) {
    *((void *)v4 + 5) = _readNode(v20);
  }
  v4[12] = *(_DWORD *)(a1 + 88);
  if (*(void *)(a1 + 96))
  {
    uint64_t v21 = _readNode(**(void **)(a1 + 104));
    list_make1_impl(226, v21);
    *((void *)v4 + 7) = v22;
    if (*(void *)(a1 + 96) >= 2uLL)
    {
      uint64_t v23 = v22;
      int v24 = 2;
      unint64_t v25 = 1;
      do
      {
        uint64_t v26 = _readNode(*(void *)(*(void *)(a1 + 104) + 8 * v25));
        uint64_t v23 = lappend(v23, v26);
        *((void *)v4 + 7) = v23;
        unint64_t v25 = v24++;
      }
      while (*(void *)(a1 + 96) > v25);
    }
  }
  return v4;
}

unint64_t _readIntoClause(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x48uLL);
  *(_DWORD *)unint64_t v3 = 153;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  unint64_t v11 = *(const char **)(a1 + 48);
  if (v11 && *v11) {
    *(void *)(v3 + 24) = pstrdup(v11);
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v12);
    *(void *)(v3 + 32) = v13;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 32) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 56) > v16);
    }
  }
  int v18 = *(_DWORD *)(a1 + 72);
  unsigned int v19 = v18 - 2;
  int v20 = v18 - 1;
  if (v19 >= 3) {
    int v20 = 0;
  }
  *(_DWORD *)(v3 + 40) = v20;
  uint64_t v21 = *(const char **)(a1 + 80);
  if (v21 && *v21) {
    *(void *)(v3 + 48) = pstrdup(v21);
  }
  uint64_t v22 = *(void *)(a1 + 88);
  if (v22) {
    *(void *)(v3 + 56) = _readNode(v22);
  }
  *(unsigned char *)(v3 + 64) = *(_DWORD *)(a1 + 96) != 0;
  return v3;
}

unint64_t _readQuery(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0xE0uLL);
  unint64_t v4 = v3;
  *(_DWORD *)unint64_t v3 = 231;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 6) {
    int v7 = 0;
  }
  *(_DWORD *)(v3 + 4) = v7;
  int v8 = *(_DWORD *)(a1 + 28);
  unsigned int v9 = v8 - 2;
  int v10 = v8 - 1;
  if (v9 >= 4) {
    int v10 = 0;
  }
  *(_DWORD *)(v3 + 8) = v10;
  *(unsigned char *)(v3 + 24) = *(_DWORD *)(a1 + 32) != 0;
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    *(void *)(v4 + 32) = _readNode(v11);
  }
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 48);
  *(unsigned char *)(v4 + 44) = *(_DWORD *)(a1 + 52) != 0;
  *(unsigned char *)(v4 + 45) = *(_DWORD *)(a1 + 56) != 0;
  *(unsigned char *)(v4 + 46) = *(_DWORD *)(a1 + 60) != 0;
  *(unsigned char *)(v4 + 47) = *(_DWORD *)(a1 + 64) != 0;
  *(unsigned char *)(v4 + 48) = *(_DWORD *)(a1 + 68) != 0;
  *(unsigned char *)(v4 + 49) = *(_DWORD *)(a1 + 72) != 0;
  *(unsigned char *)(v4 + 50) = *(_DWORD *)(a1 + 76) != 0;
  *(unsigned char *)(v4 + 51) = *(_DWORD *)(a1 + 80) != 0;
  *(unsigned char *)(v4 + 52) = *(_DWORD *)(a1 + 84) != 0;
  if (*(void *)(a1 + 88))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 96));
    list_make1_impl(226, Node);
    *(void *)(v4 + 56) = v13;
    if (*(void *)(a1 + 88) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 96) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v4 + 56) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 88) > v16);
    }
  }
  if (*(void *)(a1 + 104))
  {
    uint64_t v18 = _readNode(**(void **)(a1 + 112));
    list_make1_impl(226, v18);
    *(void *)(v4 + 64) = v19;
    if (*(void *)(a1 + 104) >= 2uLL)
    {
      uint64_t v20 = v19;
      int v21 = 2;
      unint64_t v22 = 1;
      do
      {
        uint64_t v23 = _readNode(*(void *)(*(void *)(a1 + 112) + 8 * v22));
        uint64_t v20 = lappend(v20, v23);
        *(void *)(v4 + 64) = v20;
        unint64_t v22 = v21++;
      }
      while (*(void *)(a1 + 104) > v22);
    }
  }
  uint64_t v24 = *(void *)(a1 + 120);
  if (v24) {
    *(void *)(v4 + 72) = _readFromExpr(v24);
  }
  if (*(void *)(a1 + 128))
  {
    uint64_t v25 = _readNode(**(void **)(a1 + 136));
    list_make1_impl(226, v25);
    *(void *)(v4 + 80) = v26;
    if (*(void *)(a1 + 128) >= 2uLL)
    {
      uint64_t v27 = v26;
      int v28 = 2;
      unint64_t v29 = 1;
      do
      {
        uint64_t v30 = _readNode(*(void *)(*(void *)(a1 + 136) + 8 * v29));
        uint64_t v27 = lappend(v27, v30);
        *(void *)(v4 + 80) = v27;
        unint64_t v29 = v28++;
      }
      while (*(void *)(a1 + 128) > v29);
    }
  }
  int v31 = *(_DWORD *)(a1 + 144);
  if (v31 == 3) {
    int v32 = 2;
  }
  else {
    int v32 = v31 == 2;
  }
  *(_DWORD *)(v4 + 88) = v32;
  uint64_t v33 = *(void *)(a1 + 152);
  if (v33) {
    *(void *)(v4 + 96) = _readOnConflictExpr(v33);
  }
  if (*(void *)(a1 + 160))
  {
    uint64_t v34 = _readNode(**(void **)(a1 + 168));
    list_make1_impl(226, v34);
    *(void *)(v4 + 104) = v35;
    if (*(void *)(a1 + 160) >= 2uLL)
    {
      uint64_t v36 = v35;
      int v37 = 2;
      unint64_t v38 = 1;
      do
      {
        uint64_t v39 = _readNode(*(void *)(*(void *)(a1 + 168) + 8 * v38));
        uint64_t v36 = lappend(v36, v39);
        *(void *)(v4 + 104) = v36;
        unint64_t v38 = v37++;
      }
      while (*(void *)(a1 + 160) > v38);
    }
  }
  if (*(void *)(a1 + 176))
  {
    uint64_t v40 = _readNode(**(void **)(a1 + 184));
    list_make1_impl(226, v40);
    *(void *)(v4 + 112) = v41;
    if (*(void *)(a1 + 176) >= 2uLL)
    {
      uint64_t v42 = v41;
      int v43 = 2;
      unint64_t v44 = 1;
      do
      {
        uint64_t v45 = _readNode(*(void *)(*(void *)(a1 + 184) + 8 * v44));
        uint64_t v42 = lappend(v42, v45);
        *(void *)(v4 + 112) = v42;
        unint64_t v44 = v43++;
      }
      while (*(void *)(a1 + 176) > v44);
    }
  }
  if (*(void *)(a1 + 192))
  {
    uint64_t v46 = _readNode(**(void **)(a1 + 200));
    list_make1_impl(226, v46);
    *(void *)(v4 + 120) = v47;
    if (*(void *)(a1 + 192) >= 2uLL)
    {
      uint64_t v48 = v47;
      int v49 = 2;
      unint64_t v50 = 1;
      do
      {
        uint64_t v51 = _readNode(*(void *)(*(void *)(a1 + 200) + 8 * v50));
        uint64_t v48 = lappend(v48, v51);
        *(void *)(v4 + 120) = v48;
        unint64_t v50 = v49++;
      }
      while (*(void *)(a1 + 192) > v50);
    }
  }
  uint64_t v52 = *(void *)(a1 + 208);
  if (v52) {
    *(void *)(v4 + 128) = _readNode(v52);
  }
  if (*(void *)(a1 + 216))
  {
    uint64_t v53 = _readNode(**(void **)(a1 + 224));
    list_make1_impl(226, v53);
    *(void *)(v4 + 136) = v54;
    if (*(void *)(a1 + 216) >= 2uLL)
    {
      uint64_t v55 = v54;
      int v56 = 2;
      unint64_t v57 = 1;
      do
      {
        uint64_t v58 = _readNode(*(void *)(*(void *)(a1 + 224) + 8 * v57));
        uint64_t v55 = lappend(v55, v58);
        *(void *)(v4 + 136) = v55;
        unint64_t v57 = v56++;
      }
      while (*(void *)(a1 + 216) > v57);
    }
  }
  if (*(void *)(a1 + 232))
  {
    uint64_t v59 = _readNode(**(void **)(a1 + 240));
    list_make1_impl(226, v59);
    *(void *)(v4 + 144) = v60;
    if (*(void *)(a1 + 232) >= 2uLL)
    {
      uint64_t v61 = v60;
      int v62 = 2;
      unint64_t v63 = 1;
      do
      {
        uint64_t v64 = _readNode(*(void *)(*(void *)(a1 + 240) + 8 * v63));
        uint64_t v61 = lappend(v61, v64);
        *(void *)(v4 + 144) = v61;
        unint64_t v63 = v62++;
      }
      while (*(void *)(a1 + 232) > v63);
    }
  }
  if (*(void *)(a1 + 248))
  {
    uint64_t v65 = _readNode(**(void **)(a1 + 256));
    list_make1_impl(226, v65);
    *(void *)(v4 + 152) = v66;
    if (*(void *)(a1 + 248) >= 2uLL)
    {
      uint64_t v67 = v66;
      int v68 = 2;
      unint64_t v69 = 1;
      do
      {
        uint64_t v70 = _readNode(*(void *)(*(void *)(a1 + 256) + 8 * v69));
        uint64_t v67 = lappend(v67, v70);
        *(void *)(v4 + 152) = v67;
        unint64_t v69 = v68++;
      }
      while (*(void *)(a1 + 248) > v69);
    }
  }
  uint64_t v71 = *(void *)(a1 + 264);
  if (v71) {
    *(void *)(v4 + 160) = _readNode(v71);
  }
  uint64_t v72 = *(void *)(a1 + 272);
  if (v72) {
    *(void *)(v4 + 168) = _readNode(v72);
  }
  int v73 = *(_DWORD *)(a1 + 280);
  if (v73 == 3) {
    int v74 = 2;
  }
  else {
    int v74 = v73 == 2;
  }
  *(_DWORD *)(v4 + 176) = v74;
  if (*(void *)(a1 + 288))
  {
    uint64_t v75 = _readNode(**(void **)(a1 + 296));
    list_make1_impl(226, v75);
    *(void *)(v4 + 184) = v76;
    if (*(void *)(a1 + 288) >= 2uLL)
    {
      uint64_t v77 = v76;
      int v78 = 2;
      unint64_t v79 = 1;
      do
      {
        uint64_t v80 = _readNode(*(void *)(*(void *)(a1 + 296) + 8 * v79));
        uint64_t v77 = lappend(v77, v80);
        *(void *)(v4 + 184) = v77;
        unint64_t v79 = v78++;
      }
      while (*(void *)(a1 + 288) > v79);
    }
  }
  uint64_t v81 = *(void *)(a1 + 304);
  if (v81) {
    *(void *)(v4 + 192) = _readNode(v81);
  }
  if (*(void *)(a1 + 312))
  {
    uint64_t v82 = _readNode(**(void **)(a1 + 320));
    list_make1_impl(226, v82);
    *(void *)(v4 + 200) = v83;
    if (*(void *)(a1 + 312) >= 2uLL)
    {
      uint64_t v84 = v83;
      int v85 = 2;
      unint64_t v86 = 1;
      do
      {
        uint64_t v87 = _readNode(*(void *)(*(void *)(a1 + 320) + 8 * v86));
        uint64_t v84 = lappend(v84, v87);
        *(void *)(v4 + 200) = v84;
        unint64_t v86 = v85++;
      }
      while (*(void *)(a1 + 312) > v86);
    }
  }
  if (*(void *)(a1 + 328))
  {
    uint64_t v88 = _readNode(**(void **)(a1 + 336));
    list_make1_impl(226, v88);
    *(void *)(v4 + 208) = v89;
    if (*(void *)(a1 + 328) >= 2uLL)
    {
      uint64_t v90 = v89;
      int v91 = 2;
      unint64_t v92 = 1;
      do
      {
        uint64_t v93 = _readNode(*(void *)(*(void *)(a1 + 336) + 8 * v92));
        uint64_t v90 = lappend(v90, v93);
        *(void *)(v4 + 208) = v90;
        unint64_t v92 = v91++;
      }
      while (*(void *)(a1 + 328) > v92);
    }
  }
  *(_DWORD *)(v4 + 216) = *(_DWORD *)(a1 + 344);
  *(_DWORD *)(v4 + 220) = *(_DWORD *)(a1 + 348);
  return v4;
}

unint64_t _readInsertStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  *(_DWORD *)unint64_t v3 = 233;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    *(void *)(v3 + 24) = _readNode(v11);
  }
  uint64_t v12 = *(void *)(a1 + 56);
  if (v12) {
    *(void *)(v3 + 32) = _readOnConflictClause(v12);
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v13 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v13);
    *(void *)(v3 + 40) = v14;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v15 = v14;
      int v16 = 2;
      unint64_t v17 = 1;
      do
      {
        uint64_t v18 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v17));
        uint64_t v15 = lappend(v15, v18);
        *(void *)(v3 + 40) = v15;
        unint64_t v17 = v16++;
      }
      while (*(void *)(a1 + 64) > v17);
    }
  }
  uint64_t v19 = *(void *)(a1 + 80);
  if (v19) {
    *(void *)(v3 + 48) = _readWithClause(v19);
  }
  int v20 = *(_DWORD *)(a1 + 88);
  if (v20 == 3) {
    int v21 = 2;
  }
  else {
    int v21 = v20 == 2;
  }
  *(_DWORD *)(v3 + 56) = v21;
  return v3;
}

unint64_t _readDeleteStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 234;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    *(void *)(v3 + 24) = _readNode(v11);
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v12);
    *(void *)(v3 + 32) = v13;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 32) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 56) > v16);
    }
  }
  uint64_t v18 = *(void *)(a1 + 72);
  if (v18) {
    *(void *)(v3 + 40) = _readWithClause(v18);
  }
  return v3;
}

unint64_t _readUpdateStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t v3 = 235;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    *(void *)(v3 + 24) = _readNode(v11);
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v12);
    *(void *)(v3 + 32) = v13;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 32) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 56) > v16);
    }
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v18 = _readNode(**(void **)(a1 + 80));
    list_make1_impl(226, v18);
    *(void *)(v3 + 40) = v19;
    if (*(void *)(a1 + 72) >= 2uLL)
    {
      uint64_t v20 = v19;
      int v21 = 2;
      unint64_t v22 = 1;
      do
      {
        uint64_t v23 = _readNode(*(void *)(*(void *)(a1 + 80) + 8 * v22));
        uint64_t v20 = lappend(v20, v23);
        *(void *)(v3 + 40) = v20;
        unint64_t v22 = v21++;
      }
      while (*(void *)(a1 + 72) > v22);
    }
  }
  uint64_t v24 = *(void *)(a1 + 88);
  if (v24) {
    *(void *)(v3 + 48) = _readWithClause(v24);
  }
  return v3;
}

unint64_t _readSelectStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x98uLL);
  *(_DWORD *)unint64_t v3 = 236;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    *(void *)(v3 + 16) = _readIntoClause(v10);
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v11 = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, v11);
    *(void *)(v3 + 24) = v12;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 24) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 48) > v15);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v17 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v17);
    *(void *)(v3 + 32) = v18;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v19 = v18;
      int v20 = 2;
      unint64_t v21 = 1;
      do
      {
        uint64_t v22 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v21));
        uint64_t v19 = lappend(v19, v22);
        *(void *)(v3 + 32) = v19;
        unint64_t v21 = v20++;
      }
      while (*(void *)(a1 + 64) > v21);
    }
  }
  uint64_t v23 = *(void *)(a1 + 80);
  if (v23) {
    *(void *)(v3 + 40) = _readNode(v23);
  }
  if (*(void *)(a1 + 88))
  {
    uint64_t v24 = _readNode(**(void **)(a1 + 96));
    list_make1_impl(226, v24);
    *(void *)(v3 + 48) = v25;
    if (*(void *)(a1 + 88) >= 2uLL)
    {
      uint64_t v26 = v25;
      int v27 = 2;
      unint64_t v28 = 1;
      do
      {
        uint64_t v29 = _readNode(*(void *)(*(void *)(a1 + 96) + 8 * v28));
        uint64_t v26 = lappend(v26, v29);
        *(void *)(v3 + 48) = v26;
        unint64_t v28 = v27++;
      }
      while (*(void *)(a1 + 88) > v28);
    }
  }
  uint64_t v30 = *(void *)(a1 + 104);
  if (v30) {
    *(void *)(v3 + 56) = _readNode(v30);
  }
  if (*(void *)(a1 + 112))
  {
    uint64_t v31 = _readNode(**(void **)(a1 + 120));
    list_make1_impl(226, v31);
    *(void *)(v3 + 64) = v32;
    if (*(void *)(a1 + 112) >= 2uLL)
    {
      uint64_t v33 = v32;
      int v34 = 2;
      unint64_t v35 = 1;
      do
      {
        uint64_t v36 = _readNode(*(void *)(*(void *)(a1 + 120) + 8 * v35));
        uint64_t v33 = lappend(v33, v36);
        *(void *)(v3 + 64) = v33;
        unint64_t v35 = v34++;
      }
      while (*(void *)(a1 + 112) > v35);
    }
  }
  if (*(void *)(a1 + 128))
  {
    uint64_t v37 = _readNode(**(void **)(a1 + 136));
    list_make1_impl(226, v37);
    *(void *)(v3 + 72) = v38;
    if (*(void *)(a1 + 128) >= 2uLL)
    {
      uint64_t v39 = v38;
      int v40 = 2;
      unint64_t v41 = 1;
      do
      {
        uint64_t v42 = _readNode(*(void *)(*(void *)(a1 + 136) + 8 * v41));
        uint64_t v39 = lappend(v39, v42);
        *(void *)(v3 + 72) = v39;
        unint64_t v41 = v40++;
      }
      while (*(void *)(a1 + 128) > v41);
    }
  }
  if (*(void *)(a1 + 144))
  {
    uint64_t v43 = _readNode(**(void **)(a1 + 152));
    list_make1_impl(226, v43);
    *(void *)(v3 + 80) = v44;
    if (*(void *)(a1 + 144) >= 2uLL)
    {
      uint64_t v45 = v44;
      int v46 = 2;
      unint64_t v47 = 1;
      do
      {
        uint64_t v48 = _readNode(*(void *)(*(void *)(a1 + 152) + 8 * v47));
        uint64_t v45 = lappend(v45, v48);
        *(void *)(v3 + 80) = v45;
        unint64_t v47 = v46++;
      }
      while (*(void *)(a1 + 144) > v47);
    }
  }
  uint64_t v49 = *(void *)(a1 + 160);
  if (v49) {
    *(void *)(v3 + 88) = _readNode(v49);
  }
  uint64_t v50 = *(void *)(a1 + 168);
  if (v50) {
    *(void *)(v3 + 96) = _readNode(v50);
  }
  int v51 = *(_DWORD *)(a1 + 176);
  if (v51 == 3) {
    int v52 = 2;
  }
  else {
    int v52 = v51 == 2;
  }
  *(_DWORD *)(v3 + 104) = v52;
  if (*(void *)(a1 + 184))
  {
    uint64_t v53 = _readNode(**(void **)(a1 + 192));
    list_make1_impl(226, v53);
    *(void *)(v3 + 112) = v54;
    if (*(void *)(a1 + 184) >= 2uLL)
    {
      uint64_t v55 = v54;
      int v56 = 2;
      unint64_t v57 = 1;
      do
      {
        uint64_t v58 = _readNode(*(void *)(*(void *)(a1 + 192) + 8 * v57));
        uint64_t v55 = lappend(v55, v58);
        *(void *)(v3 + 112) = v55;
        unint64_t v57 = v56++;
      }
      while (*(void *)(a1 + 184) > v57);
    }
  }
  uint64_t v59 = *(void *)(a1 + 200);
  if (v59) {
    *(void *)(v3 + 120) = _readWithClause(v59);
  }
  int v60 = *(_DWORD *)(a1 + 208);
  unsigned int v61 = v60 - 2;
  int v62 = v60 - 1;
  if (v61 >= 3) {
    int v62 = 0;
  }
  *(_DWORD *)(v3 + 128) = v62;
  *(unsigned char *)(v3 + 132) = *(_DWORD *)(a1 + 212) != 0;
  if (*(void *)(a1 + 216)) {
    *(void *)(v3 + 136) = _readSelectStmt();
  }
  if (*(void *)(a1 + 224)) {
    *(void *)(v3 + 144) = _readSelectStmt();
  }
  return v3;
}

unint64_t _readAlterTableStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 237;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  int v11 = *(_DWORD *)(a1 + 48);
  unsigned int v12 = v11 - 2;
  int v13 = v11 - 1;
  if (v12 >= 0x31) {
    int v13 = 0;
  }
  *(_DWORD *)(v3 + 24) = v13;
  *(unsigned char *)(v3 + 28) = *(_DWORD *)(a1 + 52) != 0;
  return v3;
}

_DWORD *_readAlterTableCmd(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 238;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 0x42) {
    int v7 = 0;
  }
  v3[1] = v7;
  int v8 = *(const char **)(a1 + 32);
  if (v8 && *v8) {
    *((void *)v4 + 1) = pstrdup(v8);
  }
  *((_WORD *)v4 + 8) = *(_DWORD *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    uint64_t v10 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    int v11 = v10;
    *uint64_t v10 = 390;
    int v12 = *(_DWORD *)(v9 + 24);
    unsigned int v13 = v12 - 2;
    int v14 = v12 - 1;
    if (v13 >= 3) {
      int v14 = 0;
    }
    v10[1] = v14;
    unint64_t v15 = *(const char **)(v9 + 32);
    if (v15 && *v15) {
      *((void *)v11 + 1) = pstrdup(v15);
    }
    v11[4] = *(_DWORD *)(v9 + 40);
    *((void *)v4 + 3) = v11;
  }
  uint64_t v16 = *(void *)(a1 + 56);
  if (v16) {
    *((void *)v4 + 4) = _readNode(v16);
  }
  v4[10] = *(_DWORD *)(a1 + 64) == 2;
  *((unsigned char *)v4 + 44) = *(_DWORD *)(a1 + 68) != 0;
  return v4;
}

unint64_t _readAlterDomainStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  unint64_t v4 = v3;
  *(_DWORD *)unint64_t v3 = 239;
  int v5 = *(unsigned __int8 **)(a1 + 24);
  if (v5)
  {
    int v6 = *v5;
    if (v6) {
      *(unsigned char *)(v3 + 4) = v6;
    }
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v4 + 8) = v8;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v9 = v8;
      int v10 = 2;
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v11));
        uint64_t v9 = lappend(v9, v12);
        *(void *)(v4 + 8) = v9;
        unint64_t v11 = v10++;
      }
      while (*(void *)(a1 + 32) > v11);
    }
  }
  unsigned int v13 = *(const char **)(a1 + 48);
  if (v13 && *v13) {
    *(void *)(v4 + 16) = pstrdup(v13);
  }
  uint64_t v14 = *(void *)(a1 + 56);
  if (v14) {
    *(void *)(v4 + 24) = _readNode(v14);
  }
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 64) == 2;
  *(unsigned char *)(v4 + 36) = *(_DWORD *)(a1 + 68) != 0;
  return v4;
}

void *_readSetOperationStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  unint64_t v4 = (void *)v3;
  *(_DWORD *)unint64_t v3 = 240;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 3) {
    int v7 = 0;
  }
  *(_DWORD *)(v3 + 4) = v7;
  *(unsigned char *)(v3 + 8) = *(_DWORD *)(a1 + 28) != 0;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    v4[2] = _readNode(v8);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    v4[3] = _readNode(v9);
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    v4[4] = v11;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        v4[4] = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 48) > v14);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v16 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v16);
    v4[5] = v17;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v18 = v17;
      int v19 = 2;
      unint64_t v20 = 1;
      do
      {
        uint64_t v21 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v20));
        uint64_t v18 = lappend(v18, v21);
        v4[5] = v18;
        unint64_t v20 = v19++;
      }
      while (*(void *)(a1 + 64) > v20);
    }
  }
  if (*(void *)(a1 + 80))
  {
    uint64_t v22 = _readNode(**(void **)(a1 + 88));
    list_make1_impl(226, v22);
    v4[6] = v23;
    if (*(void *)(a1 + 80) >= 2uLL)
    {
      uint64_t v24 = v23;
      int v25 = 2;
      unint64_t v26 = 1;
      do
      {
        uint64_t v27 = _readNode(*(void *)(*(void *)(a1 + 88) + 8 * v26));
        uint64_t v24 = lappend(v24, v27);
        v4[6] = v24;
        unint64_t v26 = v25++;
      }
      while (*(void *)(a1 + 80) > v26);
    }
  }
  if (*(void *)(a1 + 96))
  {
    uint64_t v28 = _readNode(**(void **)(a1 + 104));
    list_make1_impl(226, v28);
    v4[7] = v29;
    if (*(void *)(a1 + 96) >= 2uLL)
    {
      uint64_t v30 = v29;
      int v31 = 2;
      unint64_t v32 = 1;
      do
      {
        uint64_t v33 = _readNode(*(void *)(*(void *)(a1 + 104) + 8 * v32));
        uint64_t v30 = lappend(v30, v33);
        v4[7] = v30;
        unint64_t v32 = v31++;
      }
      while (*(void *)(a1 + 96) > v32);
    }
  }
  return v4;
}

unint64_t _readGrantStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  unint64_t v4 = v3;
  *(_DWORD *)unint64_t v3 = 241;
  *(unsigned char *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  int v5 = *(_DWORD *)(a1 + 28);
  if (v5 == 3) {
    int v6 = 2;
  }
  else {
    int v6 = v5 == 2;
  }
  *(_DWORD *)(v3 + 8) = v6;
  int v7 = *(_DWORD *)(a1 + 32);
  unsigned int v8 = v7 - 2;
  int v9 = v7 - 1;
  if (v8 >= 0x31) {
    int v9 = 0;
  }
  *(_DWORD *)(v3 + 12) = v9;
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v4 + 16) = v11;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v4 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 40) > v14);
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v16 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v16);
    *(void *)(v4 + 24) = v17;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v18 = v17;
      int v19 = 2;
      unint64_t v20 = 1;
      do
      {
        uint64_t v21 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v20));
        uint64_t v18 = lappend(v18, v21);
        *(void *)(v4 + 24) = v18;
        unint64_t v20 = v19++;
      }
      while (*(void *)(a1 + 56) > v20);
    }
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v22 = _readNode(**(void **)(a1 + 80));
    list_make1_impl(226, v22);
    *(void *)(v4 + 32) = v23;
    if (*(void *)(a1 + 72) >= 2uLL)
    {
      uint64_t v24 = v23;
      int v25 = 2;
      unint64_t v26 = 1;
      do
      {
        uint64_t v27 = _readNode(*(void *)(*(void *)(a1 + 80) + 8 * v26));
        uint64_t v24 = lappend(v24, v27);
        *(void *)(v4 + 32) = v24;
        unint64_t v26 = v25++;
      }
      while (*(void *)(a1 + 72) > v26);
    }
  }
  *(unsigned char *)(v4 + 40) = *(_DWORD *)(a1 + 88) != 0;
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a1 + 92) == 2;
  return v4;
}

unint64_t _readGrantRoleStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 242;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, v10);
    *(void *)(v3 + 16) = v11;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 40) > v14);
    }
  }
  *(unsigned char *)(v3 + 24) = *(_DWORD *)(a1 + 56) != 0;
  *(unsigned char *)(v3 + 25) = *(_DWORD *)(a1 + 60) != 0;
  uint64_t v16 = *(void *)(a1 + 64);
  if (v16)
  {
    uint64_t v17 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    uint64_t v18 = v17;
    *uint64_t v17 = 390;
    int v19 = *(_DWORD *)(v16 + 24);
    unsigned int v20 = v19 - 2;
    int v21 = v19 - 1;
    if (v20 >= 3) {
      int v21 = 0;
    }
    v17[1] = v21;
    uint64_t v22 = *(const char **)(v16 + 32);
    if (v22 && *v22) {
      *((void *)v18 + 1) = pstrdup(v22);
    }
    v18[4] = *(_DWORD *)(v16 + 40);
    *(void *)(v3 + 32) = v18;
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72) == 2;
  return v3;
}

unint64_t _readAlterDefaultPrivilegesStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 243;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    *(void *)(v3 + 16) = _readGrantStmt(v10);
  }
  return v3;
}

unint64_t _readClosePortalStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t v3 = 244;
  unint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  return v3;
}

unint64_t _readClusterStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 245;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  uint64_t v5 = *(const char **)(a1 + 32);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 40);
  return v3;
}

unint64_t _readCopyStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  *(_DWORD *)unint64_t v3 = 246;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readNode(v5);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v7;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v8 = v7;
      int v9 = 2;
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v10));
        uint64_t v8 = lappend(v8, v11);
        *(void *)(v3 + 24) = v8;
        unint64_t v10 = v9++;
      }
      while (*(void *)(a1 + 40) > v10);
    }
  }
  *(unsigned char *)(v3 + 32) = *(_DWORD *)(a1 + 56) != 0;
  *(unsigned char *)(v3 + 33) = *(_DWORD *)(a1 + 60) != 0;
  uint64_t v12 = *(const char **)(a1 + 64);
  if (v12 && *v12) {
    *(void *)(v3 + 40) = pstrdup(v12);
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v13 = _readNode(**(void **)(a1 + 80));
    list_make1_impl(226, v13);
    *(void *)(v3 + 48) = v14;
    if (*(void *)(a1 + 72) >= 2uLL)
    {
      uint64_t v15 = v14;
      int v16 = 2;
      unint64_t v17 = 1;
      do
      {
        uint64_t v18 = _readNode(*(void *)(*(void *)(a1 + 80) + 8 * v17));
        uint64_t v15 = lappend(v15, v18);
        *(void *)(v3 + 48) = v15;
        unint64_t v17 = v16++;
      }
      while (*(void *)(a1 + 72) > v17);
    }
  }
  uint64_t v19 = *(void *)(a1 + 88);
  if (v19) {
    *(void *)(v3 + 56) = _readNode(v19);
  }
  return v3;
}

unint64_t _readCreateStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x68uLL);
  *(_DWORD *)unint64_t v3 = 247;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v11 = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, v11);
    *(void *)(v3 + 24) = v12;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 24) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 48) > v15);
    }
  }
  uint64_t v17 = *(void *)(a1 + 64);
  if (v17) {
    *(void *)(v3 + 32) = _readPartitionBoundSpec(v17);
  }
  uint64_t v18 = *(void *)(a1 + 72);
  if (v18) {
    *(void *)(v3 + 40) = _readPartitionSpec(v18);
  }
  uint64_t v19 = *(void *)(a1 + 80);
  if (v19) {
    *(void *)(v3 + 48) = _readTypeName(v19);
  }
  if (*(void *)(a1 + 88))
  {
    uint64_t v20 = _readNode(**(void **)(a1 + 96));
    list_make1_impl(226, v20);
    *(void *)(v3 + 56) = v21;
    if (*(void *)(a1 + 88) >= 2uLL)
    {
      uint64_t v22 = v21;
      int v23 = 2;
      unint64_t v24 = 1;
      do
      {
        uint64_t v25 = _readNode(*(void *)(*(void *)(a1 + 96) + 8 * v24));
        uint64_t v22 = lappend(v22, v25);
        *(void *)(v3 + 56) = v22;
        unint64_t v24 = v23++;
      }
      while (*(void *)(a1 + 88) > v24);
    }
  }
  if (*(void *)(a1 + 104))
  {
    uint64_t v26 = _readNode(**(void **)(a1 + 112));
    list_make1_impl(226, v26);
    *(void *)(v3 + 64) = v27;
    if (*(void *)(a1 + 104) >= 2uLL)
    {
      uint64_t v28 = v27;
      int v29 = 2;
      unint64_t v30 = 1;
      do
      {
        uint64_t v31 = _readNode(*(void *)(*(void *)(a1 + 112) + 8 * v30));
        uint64_t v28 = lappend(v28, v31);
        *(void *)(v3 + 64) = v28;
        unint64_t v30 = v29++;
      }
      while (*(void *)(a1 + 104) > v30);
    }
  }
  int v32 = *(_DWORD *)(a1 + 120);
  unsigned int v33 = v32 - 2;
  int v34 = v32 - 1;
  if (v33 >= 3) {
    int v34 = 0;
  }
  *(_DWORD *)(v3 + 72) = v34;
  unint64_t v35 = *(const char **)(a1 + 128);
  if (v35 && *v35) {
    *(void *)(v3 + 80) = pstrdup(v35);
  }
  uint64_t v36 = *(const char **)(a1 + 136);
  if (v36 && *v36) {
    *(void *)(v3 + 88) = pstrdup(v36);
  }
  *(unsigned char *)(v3 + 96) = *(_DWORD *)(a1 + 144) != 0;
  return v3;
}

unint64_t _readDefineStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  unint64_t v4 = v3;
  *(_DWORD *)unint64_t v3 = 248;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 0x31) {
    int v7 = 0;
  }
  *(_DWORD *)(v3 + 4) = v7;
  *(unsigned char *)(v3 + 8) = *(_DWORD *)(a1 + 28) != 0;
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v4 + 16) = v9;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v10 = v9;
      int v11 = 2;
      unint64_t v12 = 1;
      do
      {
        uint64_t v13 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v12));
        uint64_t v10 = lappend(v10, v13);
        *(void *)(v4 + 16) = v10;
        unint64_t v12 = v11++;
      }
      while (*(void *)(a1 + 32) > v12);
    }
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v14 = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, v14);
    *(void *)(v4 + 24) = v15;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v16 = v15;
      int v17 = 2;
      unint64_t v18 = 1;
      do
      {
        uint64_t v19 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v18));
        uint64_t v16 = lappend(v16, v19);
        *(void *)(v4 + 24) = v16;
        unint64_t v18 = v17++;
      }
      while (*(void *)(a1 + 48) > v18);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v20 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v20);
    *(void *)(v4 + 32) = v21;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v22 = v21;
      int v23 = 2;
      unint64_t v24 = 1;
      do
      {
        uint64_t v25 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v24));
        uint64_t v22 = lappend(v22, v25);
        *(void *)(v4 + 32) = v22;
        unint64_t v24 = v23++;
      }
      while (*(void *)(a1 + 64) > v24);
    }
  }
  *(unsigned char *)(v4 + 40) = *(_DWORD *)(a1 + 80) != 0;
  *(unsigned char *)(v4 + 41) = *(_DWORD *)(a1 + 84) != 0;
  return v4;
}

unint64_t _readDropStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 249;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  int v10 = *(_DWORD *)(a1 + 40);
  unsigned int v11 = v10 - 2;
  int v12 = v10 - 1;
  if (v11 >= 0x31) {
    int v12 = 0;
  }
  *(_DWORD *)(v3 + 16) = v12;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44) == 2;
  *(unsigned char *)(v3 + 24) = *(_DWORD *)(a1 + 48) != 0;
  *(unsigned char *)(v3 + 25) = *(_DWORD *)(a1 + 52) != 0;
  return v3;
}

unint64_t _readTruncateStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 250;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  *(unsigned char *)(v3 + 16) = *(_DWORD *)(a1 + 40) != 0;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44) == 2;
  return v3;
}

_DWORD *_readCommentStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  unint64_t v4 = v3;
  _DWORD *v3 = 251;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 0x31) {
    int v7 = 0;
  }
  v3[1] = v7;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    *((void *)v4 + 1) = _readNode(v8);
  }
  uint64_t v9 = *(const char **)(a1 + 40);
  if (v9 && *v9) {
    *((void *)v4 + 2) = pstrdup(v9);
  }
  return v4;
}

unint64_t _readFetchStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  unint64_t v4 = v3;
  *(_DWORD *)unint64_t v3 = 252;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 3) {
    int v7 = 0;
  }
  *(_DWORD *)(v3 + 4) = v7;
  *(void *)(v3 + 8) = *(void *)(a1 + 32);
  uint64_t v8 = *(const char **)(a1 + 40);
  if (v8 && *v8) {
    *(void *)(v4 + 16) = pstrdup(v8);
  }
  *(unsigned char *)(v4 + 24) = *(_DWORD *)(a1 + 48) != 0;
  return v4;
}

unint64_t _readIndexStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x78uLL);
  *(_DWORD *)unint64_t v3 = 253;
  unint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readRangeVar(v5);
  }
  unsigned int v6 = *(const char **)(a1 + 40);
  if (v6 && *v6) {
    *(void *)(v3 + 24) = pstrdup(v6);
  }
  int v7 = *(const char **)(a1 + 48);
  if (v7 && *v7) {
    *(void *)(v3 + 32) = pstrdup(v7);
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, Node);
    *(void *)(v3 + 40) = v9;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v10 = v9;
      int v11 = 2;
      unint64_t v12 = 1;
      do
      {
        uint64_t v13 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v12));
        uint64_t v10 = lappend(v10, v13);
        *(void *)(v3 + 40) = v10;
        unint64_t v12 = v11++;
      }
      while (*(void *)(a1 + 56) > v12);
    }
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v14 = _readNode(**(void **)(a1 + 80));
    list_make1_impl(226, v14);
    *(void *)(v3 + 48) = v15;
    if (*(void *)(a1 + 72) >= 2uLL)
    {
      uint64_t v16 = v15;
      int v17 = 2;
      unint64_t v18 = 1;
      do
      {
        uint64_t v19 = _readNode(*(void *)(*(void *)(a1 + 80) + 8 * v18));
        uint64_t v16 = lappend(v16, v19);
        *(void *)(v3 + 48) = v16;
        unint64_t v18 = v17++;
      }
      while (*(void *)(a1 + 72) > v18);
    }
  }
  if (*(void *)(a1 + 88))
  {
    uint64_t v20 = _readNode(**(void **)(a1 + 96));
    list_make1_impl(226, v20);
    *(void *)(v3 + 56) = v21;
    if (*(void *)(a1 + 88) >= 2uLL)
    {
      uint64_t v22 = v21;
      int v23 = 2;
      unint64_t v24 = 1;
      do
      {
        uint64_t v25 = _readNode(*(void *)(*(void *)(a1 + 96) + 8 * v24));
        uint64_t v22 = lappend(v22, v25);
        *(void *)(v3 + 56) = v22;
        unint64_t v24 = v23++;
      }
      while (*(void *)(a1 + 88) > v24);
    }
  }
  uint64_t v26 = *(void *)(a1 + 104);
  if (v26) {
    *(void *)(v3 + 64) = _readNode(v26);
  }
  if (*(void *)(a1 + 112))
  {
    uint64_t v27 = _readNode(**(void **)(a1 + 120));
    list_make1_impl(226, v27);
    *(void *)(v3 + 72) = v28;
    if (*(void *)(a1 + 112) >= 2uLL)
    {
      uint64_t v29 = v28;
      int v30 = 2;
      unint64_t v31 = 1;
      do
      {
        uint64_t v32 = _readNode(*(void *)(*(void *)(a1 + 120) + 8 * v31));
        uint64_t v29 = lappend(v29, v32);
        *(void *)(v3 + 72) = v29;
        unint64_t v31 = v30++;
      }
      while (*(void *)(a1 + 112) > v31);
    }
  }
  unsigned int v33 = *(const char **)(a1 + 128);
  if (v33 && *v33) {
    *(void *)(v3 + 80) = pstrdup(v33);
  }
  *(_DWORD *)(v3 + 88) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(v3 + 92) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(v3 + 96) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(v3 + 100) = *(_DWORD *)(a1 + 148);
  *(unsigned char *)(v3 + 104) = *(_DWORD *)(a1 + 152) != 0;
  *(unsigned char *)(v3 + 105) = *(_DWORD *)(a1 + 156) != 0;
  *(unsigned char *)(v3 + 106) = *(_DWORD *)(a1 + 160) != 0;
  *(unsigned char *)(v3 + 107) = *(_DWORD *)(a1 + 164) != 0;
  *(unsigned char *)(v3 + 108) = *(_DWORD *)(a1 + 168) != 0;
  *(unsigned char *)(v3 + 109) = *(_DWORD *)(a1 + 172) != 0;
  *(unsigned char *)(v3 + 110) = *(_DWORD *)(a1 + 176) != 0;
  *(unsigned char *)(v3 + 111) = *(_DWORD *)(a1 + 180) != 0;
  *(unsigned char *)(v3 + 112) = *(_DWORD *)(a1 + 184) != 0;
  return v3;
}

unint64_t _readCreateFunctionStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 254;
  *(unsigned char *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  *(unsigned char *)(v3 + 5) = *(_DWORD *)(a1 + 28) != 0;
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 32) > v8);
    }
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, v10);
    *(void *)(v3 + 16) = v11;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 48) > v14);
    }
  }
  uint64_t v16 = *(void *)(a1 + 64);
  if (v16) {
    *(void *)(v3 + 24) = _readTypeName(v16);
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v17 = _readNode(**(void **)(a1 + 80));
    list_make1_impl(226, v17);
    *(void *)(v3 + 32) = v18;
    if (*(void *)(a1 + 72) >= 2uLL)
    {
      uint64_t v19 = v18;
      int v20 = 2;
      unint64_t v21 = 1;
      do
      {
        uint64_t v22 = _readNode(*(void *)(*(void *)(a1 + 80) + 8 * v21));
        uint64_t v19 = lappend(v19, v22);
        *(void *)(v3 + 32) = v19;
        unint64_t v21 = v20++;
      }
      while (*(void *)(a1 + 72) > v21);
    }
  }
  return v3;
}

_DWORD *_readAlterFunctionStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  unint64_t v4 = v3;
  _DWORD *v3 = 255;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 0x31) {
    int v7 = 0;
  }
  v3[1] = v7;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    *((void *)v4 + 1) = _readObjectWithArgs(v8);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *((void *)v4 + 2) = v10;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v11 = v10;
      int v12 = 2;
      unint64_t v13 = 1;
      do
      {
        uint64_t v14 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v13));
        uint64_t v11 = lappend(v11, v14);
        *((void *)v4 + 2) = v11;
        unint64_t v13 = v12++;
      }
      while (*(void *)(a1 + 40) > v13);
    }
  }
  return v4;
}

unint64_t _readDoStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t v3 = 256;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  return v3;
}

_DWORD *_readRenameStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  unint64_t v4 = v3;
  _DWORD *v3 = 257;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 0x31) {
    int v7 = 0;
  }
  v3[1] = v7;
  int v8 = *(_DWORD *)(a1 + 28);
  unsigned int v9 = v8 - 2;
  int v10 = v8 - 1;
  if (v9 >= 0x31) {
    int v10 = 0;
  }
  v3[2] = v10;
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    *((void *)v4 + 2) = _readRangeVar(v11);
  }
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    *((void *)v4 + 3) = _readNode(v12);
  }
  unint64_t v13 = *(const char **)(a1 + 48);
  if (v13 && *v13) {
    *((void *)v4 + 4) = pstrdup(v13);
  }
  uint64_t v14 = *(const char **)(a1 + 56);
  if (v14 && *v14) {
    *((void *)v4 + 5) = pstrdup(v14);
  }
  v4[12] = *(_DWORD *)(a1 + 64) == 2;
  *((unsigned char *)v4 + 52) = *(_DWORD *)(a1 + 68) != 0;
  return v4;
}

unint64_t _readRuleStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t v3 = 258;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  int v5 = *(const char **)(a1 + 32);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    *(void *)(v3 + 24) = _readNode(v6);
  }
  int v7 = *(_DWORD *)(a1 + 48);
  unsigned int v8 = v7 - 2;
  int v9 = v7 - 1;
  if (v8 >= 6) {
    int v9 = 0;
  }
  *(_DWORD *)(v3 + 32) = v9;
  *(unsigned char *)(v3 + 36) = *(_DWORD *)(a1 + 52) != 0;
  if (*(void *)(a1 + 56))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, Node);
    *(void *)(v3 + 40) = v11;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 40) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 56) > v14);
    }
  }
  *(unsigned char *)(v3 + 48) = *(_DWORD *)(a1 + 72) != 0;
  return v3;
}

unint64_t _readNotifyStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 259;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  int v5 = *(const char **)(a1 + 32);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  return v3;
}

unint64_t _readListenStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t v3 = 260;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  return v3;
}

unint64_t _readUnlistenStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t v3 = 261;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  return v3;
}

_DWORD *_readTransactionStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 262;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 9) {
    int v7 = 0;
  }
  v3[1] = v7;
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *((void *)v4 + 1) = v9;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v10 = v9;
      int v11 = 2;
      unint64_t v12 = 1;
      do
      {
        uint64_t v13 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v12));
        uint64_t v10 = lappend(v10, v13);
        *((void *)v4 + 1) = v10;
        unint64_t v12 = v11++;
      }
      while (*(void *)(a1 + 32) > v12);
    }
  }
  unint64_t v14 = *(const char **)(a1 + 48);
  if (v14 && *v14) {
    *((void *)v4 + 2) = pstrdup(v14);
  }
  uint64_t v15 = *(const char **)(a1 + 56);
  if (v15 && *v15) {
    *((void *)v4 + 3) = pstrdup(v15);
  }
  *((unsigned char *)v4 + 32) = *(_DWORD *)(a1 + 64) != 0;
  return v4;
}

unint64_t _readViewStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t v3 = 263;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    *(void *)(v3 + 24) = _readNode(v11);
  }
  *(unsigned char *)(v3 + 32) = *(_DWORD *)(a1 + 56) != 0;
  if (*(void *)(a1 + 64))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v12);
    *(void *)(v3 + 40) = v13;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 40) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 64) > v16);
    }
  }
  int v18 = *(_DWORD *)(a1 + 80);
  if (v18 == 3) {
    int v19 = 2;
  }
  else {
    int v19 = v18 == 2;
  }
  *(_DWORD *)(v3 + 48) = v19;
  return v3;
}

unint64_t _readLoadStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t v3 = 264;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  return v3;
}

unint64_t _readCreateDomainStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 265;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    *(void *)(v3 + 16) = _readTypeName(v10);
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    *(void *)(v3 + 24) = _readCollateClause(v11);
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v12);
    *(void *)(v3 + 32) = v13;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 32) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 56) > v16);
    }
  }
  return v3;
}

unint64_t _readCreatedbStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 266;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readDropdbStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 267;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  *(unsigned char *)(v3 + 16) = *(_DWORD *)(a1 + 32) != 0;
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v6;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 24) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 40) > v9);
    }
  }
  return v3;
}

unint64_t _readVacuumStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 268;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, v10);
    *(void *)(v3 + 16) = v11;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 40) > v14);
    }
  }
  *(unsigned char *)(v3 + 24) = *(_DWORD *)(a1 + 56) != 0;
  return v3;
}

unint64_t _readExplainStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 269;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readCreateTableAsStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 270;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readIntoClause(v5);
  }
  int v6 = *(_DWORD *)(a1 + 40);
  unsigned int v7 = v6 - 2;
  int v8 = v6 - 1;
  if (v7 >= 0x31) {
    int v8 = 0;
  }
  *(_DWORD *)(v3 + 24) = v8;
  *(unsigned char *)(v3 + 28) = *(_DWORD *)(a1 + 44) != 0;
  *(unsigned char *)(v3 + 29) = *(_DWORD *)(a1 + 48) != 0;
  return v3;
}

unint64_t _readCreateSeqStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 271;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  *(unsigned char *)(v3 + 28) = *(_DWORD *)(a1 + 52) != 0;
  *(unsigned char *)(v3 + 29) = *(_DWORD *)(a1 + 56) != 0;
  return v3;
}

unint64_t _readAlterSeqStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 272;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  *(unsigned char *)(v3 + 24) = *(_DWORD *)(a1 + 48) != 0;
  *(unsigned char *)(v3 + 25) = *(_DWORD *)(a1 + 52) != 0;
  return v3;
}

_DWORD *_readVariableSetStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 273;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 5) {
    int v7 = 0;
  }
  v3[1] = v7;
  int v8 = *(const char **)(a1 + 32);
  if (v8 && *v8) {
    *((void *)v4 + 1) = pstrdup(v8);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *((void *)v4 + 2) = v10;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v11 = v10;
      int v12 = 2;
      unint64_t v13 = 1;
      do
      {
        uint64_t v14 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v13));
        uint64_t v11 = lappend(v11, v14);
        *((void *)v4 + 2) = v11;
        unint64_t v13 = v12++;
      }
      while (*(void *)(a1 + 40) > v13);
    }
  }
  *((unsigned char *)v4 + 24) = *(_DWORD *)(a1 + 56) != 0;
  return v4;
}

unint64_t _readVariableShowStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t v3 = 274;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  return v3;
}

_DWORD *_readDiscardStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 8uLL);
  _DWORD *result = 275;
  int v4 = *(_DWORD *)(a1 + 24);
  unsigned int v5 = v4 - 2;
  int v6 = v4 - 1;
  if (v5 >= 3) {
    int v6 = 0;
  }
  result[1] = v6;
  return result;
}

unint64_t _readCreateTrigStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x60uLL);
  *(_DWORD *)unint64_t v3 = 276;
  int v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readRangeVar(v5);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v7;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v8 = v7;
      int v9 = 2;
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v10));
        uint64_t v8 = lappend(v8, v11);
        *(void *)(v3 + 24) = v8;
        unint64_t v10 = v9++;
      }
      while (*(void *)(a1 + 40) > v10);
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v12);
    *(void *)(v3 + 32) = v13;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 32) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 56) > v16);
    }
  }
  *(unsigned char *)(v3 + 40) = *(_DWORD *)(a1 + 72) != 0;
  *(_WORD *)(v3 + 42) = *(_DWORD *)(a1 + 76);
  *(_WORD *)(v3 + 44) = *(_DWORD *)(a1 + 80);
  if (*(void *)(a1 + 88))
  {
    uint64_t v18 = _readNode(**(void **)(a1 + 96));
    list_make1_impl(226, v18);
    *(void *)(v3 + 48) = v19;
    if (*(void *)(a1 + 88) >= 2uLL)
    {
      uint64_t v20 = v19;
      int v21 = 2;
      unint64_t v22 = 1;
      do
      {
        uint64_t v23 = _readNode(*(void *)(*(void *)(a1 + 96) + 8 * v22));
        uint64_t v20 = lappend(v20, v23);
        *(void *)(v3 + 48) = v20;
        unint64_t v22 = v21++;
      }
      while (*(void *)(a1 + 88) > v22);
    }
  }
  uint64_t v24 = *(void *)(a1 + 104);
  if (v24) {
    *(void *)(v3 + 56) = _readNode(v24);
  }
  *(unsigned char *)(v3 + 64) = *(_DWORD *)(a1 + 112) != 0;
  if (*(void *)(a1 + 120))
  {
    uint64_t v25 = _readNode(**(void **)(a1 + 128));
    list_make1_impl(226, v25);
    *(void *)(v3 + 72) = v26;
    if (*(void *)(a1 + 120) >= 2uLL)
    {
      uint64_t v27 = v26;
      int v28 = 2;
      unint64_t v29 = 1;
      do
      {
        uint64_t v30 = _readNode(*(void *)(*(void *)(a1 + 128) + 8 * v29));
        uint64_t v27 = lappend(v27, v30);
        *(void *)(v3 + 72) = v27;
        unint64_t v29 = v28++;
      }
      while (*(void *)(a1 + 120) > v29);
    }
  }
  *(unsigned char *)(v3 + 80) = *(_DWORD *)(a1 + 136) != 0;
  *(unsigned char *)(v3 + 81) = *(_DWORD *)(a1 + 140) != 0;
  uint64_t v31 = *(void *)(a1 + 144);
  if (v31) {
    *(void *)(v3 + 88) = _readRangeVar(v31);
  }
  return v3;
}

unint64_t _readCreatePLangStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 277;
  *(unsigned char *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  int v4 = *(const char **)(a1 + 32);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 40) > v9);
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v11 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v11);
    *(void *)(v3 + 24) = v12;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 24) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 56) > v15);
    }
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v17 = _readNode(**(void **)(a1 + 80));
    list_make1_impl(226, v17);
    *(void *)(v3 + 32) = v18;
    if (*(void *)(a1 + 72) >= 2uLL)
    {
      uint64_t v19 = v18;
      int v20 = 2;
      unint64_t v21 = 1;
      do
      {
        uint64_t v22 = _readNode(*(void *)(*(void *)(a1 + 80) + 8 * v21));
        uint64_t v19 = lappend(v19, v22);
        *(void *)(v3 + 32) = v19;
        unint64_t v21 = v20++;
      }
      while (*(void *)(a1 + 72) > v21);
    }
  }
  *(unsigned char *)(v3 + 40) = *(_DWORD *)(a1 + 88) != 0;
  return v3;
}

_DWORD *_readCreateRoleStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  int v4 = v3;
  _DWORD *v3 = 278;
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5 == 3) {
    int v6 = 2;
  }
  else {
    int v6 = v5 == 2;
  }
  v3[1] = v6;
  uint64_t v7 = *(const char **)(a1 + 32);
  if (v7 && *v7) {
    *((void *)v4 + 1) = pstrdup(v7);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *((void *)v4 + 2) = v9;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v10 = v9;
      int v11 = 2;
      unint64_t v12 = 1;
      do
      {
        uint64_t v13 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v12));
        uint64_t v10 = lappend(v10, v13);
        *((void *)v4 + 2) = v10;
        unint64_t v12 = v11++;
      }
      while (*(void *)(a1 + 40) > v12);
    }
  }
  return v4;
}

unint64_t _readAlterRoleStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 279;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    int v5 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    int v6 = v5;
    *int v5 = 390;
    int v7 = *(_DWORD *)(v4 + 24);
    unsigned int v8 = v7 - 2;
    int v9 = v7 - 1;
    if (v8 >= 3) {
      int v9 = 0;
    }
    v5[1] = v9;
    uint64_t v10 = *(const char **)(v4 + 32);
    if (v10 && *v10) {
      *((void *)v6 + 1) = pstrdup(v10);
    }
    v6[4] = *(_DWORD *)(v4 + 40);
    *(void *)(v3 + 8) = v6;
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v12;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 16) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 32) > v15);
    }
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readDropRoleStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 280;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  *(unsigned char *)(v3 + 16) = *(_DWORD *)(a1 + 40) != 0;
  return v3;
}

unint64_t _readLockStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 281;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(v3 + 20) = *(_DWORD *)(a1 + 44) != 0;
  return v3;
}

unint64_t _readConstraintsSetStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 282;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  *(unsigned char *)(v3 + 16) = *(_DWORD *)(a1 + 40) != 0;
  return v3;
}

_DWORD *_readReindexStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 283;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 4) {
    int v7 = 0;
  }
  v3[1] = v7;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    *((void *)v4 + 1) = _readRangeVar(v8);
  }
  uint64_t v9 = *(const char **)(a1 + 40);
  if (v9 && *v9) {
    *((void *)v4 + 2) = pstrdup(v9);
  }
  v4[6] = *(_DWORD *)(a1 + 48);
  *((unsigned char *)v4 + 28) = *(_DWORD *)(a1 + 52) != 0;
  return v4;
}

unint64_t _readCreateSchemaStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 285;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    unsigned int v6 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    int v7 = v6;
    *unsigned int v6 = 390;
    int v8 = *(_DWORD *)(v5 + 24);
    unsigned int v9 = v8 - 2;
    int v10 = v8 - 1;
    if (v9 >= 3) {
      int v10 = 0;
    }
    v6[1] = v10;
    int v11 = *(const char **)(v5 + 32);
    if (v11 && *v11) {
      *((void *)v7 + 1) = pstrdup(v11);
    }
    v7[4] = *(_DWORD *)(v5 + 40);
    *(void *)(v3 + 16) = v7;
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v13;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 24) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 40) > v16);
    }
  }
  *(unsigned char *)(v3 + 32) = *(_DWORD *)(a1 + 56) != 0;
  return v3;
}

unint64_t _readAlterDatabaseStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 286;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readAlterDatabaseSetStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 287;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readVariableSetStmt(v5);
  }
  return v3;
}

unint64_t _readAlterRoleSetStmt(void *a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 288;
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v5 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    uint64_t v6 = v5;
    *uint64_t v5 = 390;
    int v7 = *(_DWORD *)(v4 + 24);
    unsigned int v8 = v7 - 2;
    int v9 = v7 - 1;
    if (v8 >= 3) {
      int v9 = 0;
    }
    v5[1] = v9;
    uint64_t v10 = *(const char **)(v4 + 32);
    if (v10 && *v10) {
      *((void *)v6 + 1) = pstrdup(v10);
    }
    v6[4] = *(_DWORD *)(v4 + 40);
    *(void *)(v3 + 8) = v6;
  }
  int v11 = (const char *)a1[4];
  if (v11 && *v11) {
    *(void *)(v3 + 16) = pstrdup(v11);
  }
  uint64_t v12 = a1[5];
  if (v12) {
    *(void *)(v3 + 24) = _readVariableSetStmt(v12);
  }
  return v3;
}

unint64_t _readCreateConversionStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 289;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  uint64_t v10 = *(const char **)(a1 + 40);
  if (v10 && *v10) {
    *(void *)(v3 + 16) = pstrdup(v10);
  }
  int v11 = *(const char **)(a1 + 48);
  if (v11 && *v11) {
    *(void *)(v3 + 24) = pstrdup(v11);
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v12);
    *(void *)(v3 + 32) = v13;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 32) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 56) > v16);
    }
  }
  *(unsigned char *)(v3 + 40) = *(_DWORD *)(a1 + 72) != 0;
  return v3;
}

unint64_t _readCreateCastStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 290;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readTypeName(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readTypeName(v5);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    *(void *)(v3 + 24) = _readObjectWithArgs(v6);
  }
  int v7 = *(_DWORD *)(a1 + 48);
  if (v7 == 3) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 2;
  }
  *(_DWORD *)(v3 + 32) = v8;
  *(unsigned char *)(v3 + 36) = *(_DWORD *)(a1 + 52) != 0;
  return v3;
}

unint64_t _readCreateOpClassStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t v3 = 291;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, v10);
    *(void *)(v3 + 16) = v11;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 40) > v14);
    }
  }
  unint64_t v16 = *(const char **)(a1 + 56);
  if (v16 && *v16) {
    *(void *)(v3 + 24) = pstrdup(v16);
  }
  uint64_t v17 = *(void *)(a1 + 64);
  if (v17) {
    *(void *)(v3 + 32) = _readTypeName(v17);
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v18 = _readNode(**(void **)(a1 + 80));
    list_make1_impl(226, v18);
    *(void *)(v3 + 40) = v19;
    if (*(void *)(a1 + 72) >= 2uLL)
    {
      uint64_t v20 = v19;
      int v21 = 2;
      unint64_t v22 = 1;
      do
      {
        uint64_t v23 = _readNode(*(void *)(*(void *)(a1 + 80) + 8 * v22));
        uint64_t v20 = lappend(v20, v23);
        *(void *)(v3 + 40) = v20;
        unint64_t v22 = v21++;
      }
      while (*(void *)(a1 + 72) > v22);
    }
  }
  *(unsigned char *)(v3 + 48) = *(_DWORD *)(a1 + 88) != 0;
  return v3;
}

unint64_t _readCreateOpFamilyStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 292;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  uint64_t v10 = *(const char **)(a1 + 40);
  if (v10 && *v10) {
    *(void *)(v3 + 16) = pstrdup(v10);
  }
  return v3;
}

unint64_t _readAlterOpFamilyStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 293;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  uint64_t v10 = *(const char **)(a1 + 40);
  if (v10 && *v10) {
    *(void *)(v3 + 16) = pstrdup(v10);
  }
  *(unsigned char *)(v3 + 24) = *(_DWORD *)(a1 + 48) != 0;
  if (*(void *)(a1 + 56))
  {
    uint64_t v11 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v11);
    *(void *)(v3 + 32) = v12;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 32) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 56) > v15);
    }
  }
  return v3;
}

unint64_t _readPrepareStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 294;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    *(void *)(v3 + 24) = _readNode(v11);
  }
  return v3;
}

unint64_t _readExecuteStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 295;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readDeallocateStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t v3 = 296;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  return v3;
}

unint64_t _readDeclareCursorStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 297;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    *(void *)(v3 + 24) = _readNode(v5);
  }
  return v3;
}

unint64_t _readCreateTableSpaceStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 298;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    uint64_t v7 = v6;
    *uint64_t v6 = 390;
    int v8 = *(_DWORD *)(v5 + 24);
    unsigned int v9 = v8 - 2;
    int v10 = v8 - 1;
    if (v9 >= 3) {
      int v10 = 0;
    }
    v6[1] = v10;
    uint64_t v11 = *(const char **)(v5 + 32);
    if (v11 && *v11) {
      *((void *)v7 + 1) = pstrdup(v11);
    }
    v7[4] = *(_DWORD *)(v5 + 40);
    *(void *)(v3 + 16) = v7;
  }
  uint64_t v12 = *(const char **)(a1 + 40);
  if (v12 && *v12) {
    *(void *)(v3 + 24) = pstrdup(v12);
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *(void *)(v3 + 32) = v14;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v15 = v14;
      int v16 = 2;
      unint64_t v17 = 1;
      do
      {
        uint64_t v18 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v17));
        uint64_t v15 = lappend(v15, v18);
        *(void *)(v3 + 32) = v15;
        unint64_t v17 = v16++;
      }
      while (*(void *)(a1 + 48) > v17);
    }
  }
  return v3;
}

unint64_t _readDropTableSpaceStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 299;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  *(unsigned char *)(v3 + 16) = *(_DWORD *)(a1 + 32) != 0;
  return v3;
}

_DWORD *_readAlterObjectDependsStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 300;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 0x31) {
    int v7 = 0;
  }
  v3[1] = v7;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    *((void *)v4 + 1) = _readRangeVar(v8);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    *((void *)v4 + 2) = _readNode(v9);
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    *((void *)v4 + 3) = _readNode(v10);
  }
  *((unsigned char *)v4 + 32) = *(_DWORD *)(a1 + 56) != 0;
  return v4;
}

_DWORD *_readAlterObjectSchemaStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 301;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 0x31) {
    int v7 = 0;
  }
  v3[1] = v7;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    *((void *)v4 + 1) = _readRangeVar(v8);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    *((void *)v4 + 2) = _readNode(v9);
  }
  uint64_t v10 = *(const char **)(a1 + 48);
  if (v10 && *v10) {
    *((void *)v4 + 3) = pstrdup(v10);
  }
  *((unsigned char *)v4 + 32) = *(_DWORD *)(a1 + 56) != 0;
  return v4;
}

void *_readAlterOwnerStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 302;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 0x31) {
    int v7 = 0;
  }
  v3[1] = v7;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    v4[1] = _readRangeVar(v8);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    v4[2] = _readNode(v9);
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10)
  {
    uint64_t v11 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    uint64_t v12 = v11;
    *uint64_t v11 = 390;
    int v13 = *(_DWORD *)(v10 + 24);
    unsigned int v14 = v13 - 2;
    int v15 = v13 - 1;
    if (v14 >= 3) {
      int v15 = 0;
    }
    v11[1] = v15;
    int v16 = *(const char **)(v10 + 32);
    if (v16 && *v16) {
      *((void *)v12 + 1) = pstrdup(v16);
    }
    v12[4] = *(_DWORD *)(v10 + 40);
    v4[3] = v12;
  }
  return v4;
}

unint64_t _readAlterOperatorStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 303;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readObjectWithArgs(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readAlterTypeStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 304;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, v10);
    *(void *)(v3 + 16) = v11;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 40) > v14);
    }
  }
  return v3;
}

unint64_t _readDropOwnedStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 305;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40) == 2;
  return v3;
}

unint64_t _readReassignOwnedStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 306;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10)
  {
    uint64_t v11 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    uint64_t v12 = v11;
    *uint64_t v11 = 390;
    int v13 = *(_DWORD *)(v10 + 24);
    unsigned int v14 = v13 - 2;
    int v15 = v13 - 1;
    if (v14 >= 3) {
      int v15 = 0;
    }
    v11[1] = v15;
    int v16 = *(const char **)(v10 + 32);
    if (v16 && *v16) {
      *((void *)v12 + 1) = pstrdup(v16);
    }
    v12[4] = *(_DWORD *)(v10 + 40);
    *(void *)(v3 + 16) = v12;
  }
  return v3;
}

unint64_t _readCompositeTypeStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 307;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readCreateEnumStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 308;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, v10);
    *(void *)(v3 + 16) = v11;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 40) > v14);
    }
  }
  return v3;
}

unint64_t _readCreateRangeStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 309;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, v10);
    *(void *)(v3 + 16) = v11;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 40) > v14);
    }
  }
  return v3;
}

unint64_t _readAlterEnumStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 310;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  uint64_t v10 = *(const char **)(a1 + 40);
  if (v10 && *v10) {
    *(void *)(v3 + 16) = pstrdup(v10);
  }
  uint64_t v11 = *(const char **)(a1 + 48);
  if (v11 && *v11) {
    *(void *)(v3 + 24) = pstrdup(v11);
  }
  uint64_t v12 = *(const char **)(a1 + 56);
  if (v12 && *v12) {
    *(void *)(v3 + 32) = pstrdup(v12);
  }
  *(unsigned char *)(v3 + 40) = *(_DWORD *)(a1 + 64) != 0;
  *(unsigned char *)(v3 + 41) = *(_DWORD *)(a1 + 68) != 0;
  return v3;
}

unint64_t _readAlterTSDictionaryStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 311;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, v10);
    *(void *)(v3 + 16) = v11;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 40) > v14);
    }
  }
  return v3;
}

_DWORD *_readAlterTSConfigurationStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 312;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 4) {
    int v7 = 0;
  }
  v3[1] = v7;
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *((void *)v4 + 1) = v9;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v10 = v9;
      int v11 = 2;
      unint64_t v12 = 1;
      do
      {
        uint64_t v13 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v12));
        uint64_t v10 = lappend(v10, v13);
        *((void *)v4 + 1) = v10;
        unint64_t v12 = v11++;
      }
      while (*(void *)(a1 + 32) > v12);
    }
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v14 = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, v14);
    *((void *)v4 + 2) = v15;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v16 = v15;
      int v17 = 2;
      unint64_t v18 = 1;
      do
      {
        uint64_t v19 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v18));
        uint64_t v16 = lappend(v16, v19);
        *((void *)v4 + 2) = v16;
        unint64_t v18 = v17++;
      }
      while (*(void *)(a1 + 48) > v18);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v20 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v20);
    *((void *)v4 + 3) = v21;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v22 = v21;
      int v23 = 2;
      unint64_t v24 = 1;
      do
      {
        uint64_t v25 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v24));
        uint64_t v22 = lappend(v22, v25);
        *((void *)v4 + 3) = v22;
        unint64_t v24 = v23++;
      }
      while (*(void *)(a1 + 64) > v24);
    }
  }
  *((unsigned char *)v4 + 32) = *(_DWORD *)(a1 + 80) != 0;
  *((unsigned char *)v4 + 33) = *(_DWORD *)(a1 + 84) != 0;
  *((unsigned char *)v4 + 34) = *(_DWORD *)(a1 + 88) != 0;
  return v4;
}

unint64_t _readCreateFdwStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 313;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v11 = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, v11);
    *(void *)(v3 + 24) = v12;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 24) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 48) > v15);
    }
  }
  return v3;
}

unint64_t _readAlterFdwStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 314;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v11 = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, v11);
    *(void *)(v3 + 24) = v12;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 24) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 48) > v15);
    }
  }
  return v3;
}

unint64_t _readCreateForeignServerStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t v3 = 315;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  int v5 = *(const char **)(a1 + 32);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  uint64_t v6 = *(const char **)(a1 + 40);
  if (v6 && *v6) {
    *(void *)(v3 + 24) = pstrdup(v6);
  }
  uint64_t v7 = *(const char **)(a1 + 48);
  if (v7 && *v7) {
    *(void *)(v3 + 32) = pstrdup(v7);
  }
  *(unsigned char *)(v3 + 40) = *(_DWORD *)(a1 + 56) != 0;
  if (*(void *)(a1 + 64))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, Node);
    *(void *)(v3 + 48) = v9;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v10 = v9;
      int v11 = 2;
      unint64_t v12 = 1;
      do
      {
        uint64_t v13 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v12));
        uint64_t v10 = lappend(v10, v13);
        *(void *)(v3 + 48) = v10;
        unint64_t v12 = v11++;
      }
      while (*(void *)(a1 + 64) > v12);
    }
  }
  return v3;
}

unint64_t _readAlterForeignServerStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 316;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  int v5 = *(const char **)(a1 + 32);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v7;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v8 = v7;
      int v9 = 2;
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v10));
        uint64_t v8 = lappend(v8, v11);
        *(void *)(v3 + 24) = v8;
        unint64_t v10 = v9++;
      }
      while (*(void *)(a1 + 40) > v10);
    }
  }
  *(unsigned char *)(v3 + 32) = *(_DWORD *)(a1 + 56) != 0;
  return v3;
}

unint64_t _readCreateUserMappingStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 317;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    int v5 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    uint64_t v6 = v5;
    *int v5 = 390;
    int v7 = *(_DWORD *)(v4 + 24);
    unsigned int v8 = v7 - 2;
    int v9 = v7 - 1;
    if (v8 >= 3) {
      int v9 = 0;
    }
    v5[1] = v9;
    unint64_t v10 = *(const char **)(v4 + 32);
    if (v10 && *v10) {
      *((void *)v6 + 1) = pstrdup(v10);
    }
    v6[4] = *(_DWORD *)(v4 + 40);
    *(void *)(v3 + 8) = v6;
  }
  uint64_t v11 = *(const char **)(a1 + 32);
  if (v11 && *v11) {
    *(void *)(v3 + 16) = pstrdup(v11);
  }
  *(unsigned char *)(v3 + 24) = *(_DWORD *)(a1 + 40) != 0;
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *(void *)(v3 + 32) = v13;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 32) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 48) > v16);
    }
  }
  return v3;
}

unint64_t _readAlterUserMappingStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 318;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    int v5 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    uint64_t v6 = v5;
    *int v5 = 390;
    int v7 = *(_DWORD *)(v4 + 24);
    unsigned int v8 = v7 - 2;
    int v9 = v7 - 1;
    if (v8 >= 3) {
      int v9 = 0;
    }
    v5[1] = v9;
    unint64_t v10 = *(const char **)(v4 + 32);
    if (v10 && *v10) {
      *((void *)v6 + 1) = pstrdup(v10);
    }
    v6[4] = *(_DWORD *)(v4 + 40);
    *(void *)(v3 + 8) = v6;
  }
  uint64_t v11 = *(const char **)(a1 + 32);
  if (v11 && *v11) {
    *(void *)(v3 + 16) = pstrdup(v11);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v13;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 24) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 40) > v16);
    }
  }
  return v3;
}

unint64_t _readDropUserMappingStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 319;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    int v5 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
    uint64_t v6 = v5;
    *int v5 = 390;
    int v7 = *(_DWORD *)(v4 + 24);
    unsigned int v8 = v7 - 2;
    int v9 = v7 - 1;
    if (v8 >= 3) {
      int v9 = 0;
    }
    v5[1] = v9;
    unint64_t v10 = *(const char **)(v4 + 32);
    if (v10 && *v10) {
      *((void *)v6 + 1) = pstrdup(v10);
    }
    v6[4] = *(_DWORD *)(v4 + 40);
    *(void *)(v3 + 8) = v6;
  }
  uint64_t v11 = *(const char **)(a1 + 32);
  if (v11 && *v11) {
    *(void *)(v3 + 16) = pstrdup(v11);
  }
  *(unsigned char *)(v3 + 24) = *(_DWORD *)(a1 + 40) != 0;
  return v3;
}

unint64_t _readAlterTableSpaceOptionsStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 320;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  *(unsigned char *)(v3 + 24) = *(_DWORD *)(a1 + 48) != 0;
  return v3;
}

unint64_t _readAlterTableMoveAllStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 321;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  int v5 = *(_DWORD *)(a1 + 32);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 0x31) {
    int v7 = 0;
  }
  *(_DWORD *)(v3 + 16) = v7;
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v9;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v10 = v9;
      int v11 = 2;
      unint64_t v12 = 1;
      do
      {
        uint64_t v13 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v12));
        uint64_t v10 = lappend(v10, v13);
        *(void *)(v3 + 24) = v10;
        unint64_t v12 = v11++;
      }
      while (*(void *)(a1 + 40) > v12);
    }
  }
  uint64_t v14 = *(const char **)(a1 + 56);
  if (v14 && *v14) {
    *(void *)(v3 + 32) = pstrdup(v14);
  }
  *(unsigned char *)(v3 + 40) = *(_DWORD *)(a1 + 64) != 0;
  return v3;
}

void *_readSecLabelStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 322;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 0x31) {
    int v7 = 0;
  }
  v3[1] = v7;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    v4[1] = _readNode(v8);
  }
  uint64_t v9 = *(const char **)(a1 + 40);
  if (v9 && *v9) {
    v4[2] = pstrdup(v9);
  }
  uint64_t v10 = *(const char **)(a1 + 48);
  if (v10 && *v10) {
    v4[3] = pstrdup(v10);
  }
  return v4;
}

unint64_t _readCreateForeignTableStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x78uLL);
  *(_DWORD *)unint64_t v3 = 323;
  unint64_t Stmt = _readCreateStmt(*(void *)(a1 + 24));
  long long v5 = *(_OWORD *)Stmt;
  long long v6 = *(_OWORD *)(Stmt + 32);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(Stmt + 16);
  *(_OWORD *)(v3 + 32) = v6;
  *(_OWORD *)unint64_t v3 = v5;
  long long v7 = *(_OWORD *)(Stmt + 48);
  long long v8 = *(_OWORD *)(Stmt + 64);
  long long v9 = *(_OWORD *)(Stmt + 80);
  *(void *)(v3 + 96) = *(void *)(Stmt + 96);
  *(_OWORD *)(v3 + 64) = v8;
  *(_OWORD *)(v3 + 80) = v9;
  *(_OWORD *)(v3 + 48) = v7;
  uint64_t v10 = *(const char **)(a1 + 32);
  if (v10 && *v10) {
    *(void *)(v3 + 104) = pstrdup(v10);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 112) = v12;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 112) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 40) > v15);
    }
  }
  *(_DWORD *)unint64_t v3 = 323;
  return v3;
}

unint64_t _readImportForeignSchemaStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t v3 = 324;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  long long v5 = *(const char **)(a1 + 32);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  long long v6 = *(const char **)(a1 + 40);
  if (v6 && *v6) {
    *(void *)(v3 + 24) = pstrdup(v6);
  }
  int v7 = *(_DWORD *)(a1 + 48);
  if (v7 == 3) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 2;
  }
  *(_DWORD *)(v3 + 32) = v8;
  if (*(void *)(a1 + 56))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, Node);
    *(void *)(v3 + 40) = v10;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v11 = v10;
      int v12 = 2;
      unint64_t v13 = 1;
      do
      {
        uint64_t v14 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v13));
        uint64_t v11 = lappend(v11, v14);
        *(void *)(v3 + 40) = v11;
        unint64_t v13 = v12++;
      }
      while (*(void *)(a1 + 56) > v13);
    }
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v15 = _readNode(**(void **)(a1 + 80));
    list_make1_impl(226, v15);
    *(void *)(v3 + 48) = v16;
    if (*(void *)(a1 + 72) >= 2uLL)
    {
      uint64_t v17 = v16;
      int v18 = 2;
      unint64_t v19 = 1;
      do
      {
        uint64_t v20 = _readNode(*(void *)(*(void *)(a1 + 80) + 8 * v19));
        uint64_t v17 = lappend(v17, v20);
        *(void *)(v3 + 48) = v17;
        unint64_t v19 = v18++;
      }
      while (*(void *)(a1 + 72) > v19);
    }
  }
  return v3;
}

unint64_t _readCreateExtensionStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 325;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  *(unsigned char *)(v3 + 16) = *(_DWORD *)(a1 + 32) != 0;
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v6;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 24) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 40) > v9);
    }
  }
  return v3;
}

unint64_t _readAlterExtensionStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 326;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readAlterExtensionContentsStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 327;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 36);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 0x31) {
    int v7 = 0;
  }
  *(_DWORD *)(v3 + 20) = v7;
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    *(void *)(v3 + 24) = _readNode(v8);
  }
  return v3;
}

unint64_t _readCreateEventTrigStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 328;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  int v5 = *(const char **)(a1 + 32);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v7;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v8 = v7;
      int v9 = 2;
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v10));
        uint64_t v8 = lappend(v8, v11);
        *(void *)(v3 + 24) = v8;
        unint64_t v10 = v9++;
      }
      while (*(void *)(a1 + 40) > v10);
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v12);
    *(void *)(v3 + 32) = v13;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 32) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 56) > v16);
    }
  }
  return v3;
}

unint64_t _readAlterEventTrigStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 329;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  int v5 = *(unsigned __int8 **)(a1 + 32);
  if (v5)
  {
    int v6 = *v5;
    if (v6) {
      *(unsigned char *)(v3 + 16) = v6;
    }
  }
  return v3;
}

unint64_t _readRefreshMatViewStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t v3 = 330;
  *(unsigned char *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  *(unsigned char *)(v3 + 5) = *(_DWORD *)(a1 + 28) != 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  return v3;
}

unint64_t _readReplicaIdentityStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  unint64_t v4 = v3;
  *(_DWORD *)unint64_t v3 = 331;
  int v5 = *(unsigned __int8 **)(a1 + 24);
  if (v5)
  {
    int v6 = *v5;
    if (v6) {
      *(unsigned char *)(v3 + 4) = v6;
    }
  }
  uint64_t v7 = *(const char **)(a1 + 32);
  if (v7 && *v7) {
    *(void *)(v4 + 8) = pstrdup(v7);
  }
  return v4;
}

unint64_t _readAlterSystemStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t v3 = 332;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readVariableSetStmt(v4);
  }
  return v3;
}

unint64_t _readCreatePolicyStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  *(_DWORD *)unint64_t v3 = 333;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readRangeVar(v5);
  }
  int v6 = *(const char **)(a1 + 40);
  if (v6 && *v6) {
    *(void *)(v3 + 24) = pstrdup(v6);
  }
  *(unsigned char *)(v3 + 32) = *(_DWORD *)(a1 + 48) != 0;
  if (*(void *)(a1 + 56))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, Node);
    *(void *)(v3 + 40) = v8;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v9 = v8;
      int v10 = 2;
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v11));
        uint64_t v9 = lappend(v9, v12);
        *(void *)(v3 + 40) = v9;
        unint64_t v11 = v10++;
      }
      while (*(void *)(a1 + 56) > v11);
    }
  }
  uint64_t v13 = *(void *)(a1 + 72);
  if (v13) {
    *(void *)(v3 + 48) = _readNode(v13);
  }
  uint64_t v14 = *(void *)(a1 + 80);
  if (v14) {
    *(void *)(v3 + 56) = _readNode(v14);
  }
  return v3;
}

unint64_t _readAlterPolicyStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 334;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readRangeVar(v5);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v7;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v8 = v7;
      int v9 = 2;
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v10));
        uint64_t v8 = lappend(v8, v11);
        *(void *)(v3 + 24) = v8;
        unint64_t v10 = v9++;
      }
      while (*(void *)(a1 + 40) > v10);
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  if (v12) {
    *(void *)(v3 + 32) = _readNode(v12);
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13) {
    *(void *)(v3 + 40) = _readNode(v13);
  }
  return v3;
}

unint64_t _readCreateTransformStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 335;
  *(unsigned char *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readTypeName(v4);
  }
  uint64_t v5 = *(const char **)(a1 + 40);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    *(void *)(v3 + 24) = _readObjectWithArgs(v6);
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    *(void *)(v3 + 32) = _readObjectWithArgs(v7);
  }
  return v3;
}

unint64_t _readCreateAmStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 336;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  uint64_t v11 = *(unsigned __int8 **)(a1 + 48);
  if (v11)
  {
    int v12 = *v11;
    if (v12) {
      *(unsigned char *)(v3 + 24) = v12;
    }
  }
  return v3;
}

unint64_t _readCreatePublicationStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 337;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v11 = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, v11);
    *(void *)(v3 + 24) = v12;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 24) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 48) > v15);
    }
  }
  *(unsigned char *)(v3 + 32) = *(_DWORD *)(a1 + 64) != 0;
  return v3;
}

unint64_t _readAlterPublicationStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 338;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v11 = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, v11);
    *(void *)(v3 + 24) = v12;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 24) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 48) > v15);
    }
  }
  *(unsigned char *)(v3 + 32) = *(_DWORD *)(a1 + 64) != 0;
  int v17 = *(_DWORD *)(a1 + 68);
  unsigned int v18 = v17 - 2;
  int v19 = v17 - 1;
  if (v18 >= 3) {
    int v19 = 0;
  }
  *(_DWORD *)(v3 + 36) = v19;
  return v3;
}

unint64_t _readCreateSubscriptionStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 339;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(const char **)(a1 + 32);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v7;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v8 = v7;
      int v9 = 2;
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v10));
        uint64_t v8 = lappend(v8, v11);
        *(void *)(v3 + 24) = v8;
        unint64_t v10 = v9++;
      }
      while (*(void *)(a1 + 40) > v10);
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v12);
    *(void *)(v3 + 32) = v13;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 32) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 56) > v16);
    }
  }
  return v3;
}

void *_readAlterSubscriptionStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 340;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 4) {
    int v7 = 0;
  }
  v3[1] = v7;
  uint64_t v8 = *(const char **)(a1 + 32);
  if (v8 && *v8) {
    v4[1] = pstrdup(v8);
  }
  int v9 = *(const char **)(a1 + 40);
  if (v9 && *v9) {
    v4[2] = pstrdup(v9);
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    v4[3] = v11;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        v4[3] = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 48) > v14);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v16 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v16);
    v4[4] = v17;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v18 = v17;
      int v19 = 2;
      unint64_t v20 = 1;
      do
      {
        uint64_t v21 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v20));
        uint64_t v18 = lappend(v18, v21);
        v4[4] = v18;
        unint64_t v20 = v19++;
      }
      while (*(void *)(a1 + 64) > v20);
    }
  }
  return v4;
}

unint64_t _readDropSubscriptionStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 341;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  *(unsigned char *)(v3 + 16) = *(_DWORD *)(a1 + 32) != 0;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 36) == 2;
  return v3;
}

unint64_t _readCreateStatsStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t v3 = 342;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, v10);
    *(void *)(v3 + 16) = v11;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 40) > v14);
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v16 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v16);
    *(void *)(v3 + 24) = v17;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v18 = v17;
      int v19 = 2;
      unint64_t v20 = 1;
      do
      {
        uint64_t v21 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v20));
        uint64_t v18 = lappend(v18, v21);
        *(void *)(v3 + 24) = v18;
        unint64_t v20 = v19++;
      }
      while (*(void *)(a1 + 56) > v20);
    }
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v22 = _readNode(**(void **)(a1 + 80));
    list_make1_impl(226, v22);
    *(void *)(v3 + 32) = v23;
    if (*(void *)(a1 + 72) >= 2uLL)
    {
      uint64_t v24 = v23;
      int v25 = 2;
      unint64_t v26 = 1;
      do
      {
        uint64_t v27 = _readNode(*(void *)(*(void *)(a1 + 80) + 8 * v26));
        uint64_t v24 = lappend(v24, v27);
        *(void *)(v3 + 32) = v24;
        unint64_t v26 = v25++;
      }
      while (*(void *)(a1 + 72) > v26);
    }
  }
  int v28 = *(const char **)(a1 + 88);
  if (v28 && *v28) {
    *(void *)(v3 + 40) = pstrdup(v28);
  }
  *(unsigned char *)(v3 + 48) = *(_DWORD *)(a1 + 96) != 0;
  return v3;
}

unint64_t _readAlterCollationStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t v3 = 343;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  return v3;
}

unint64_t _readCallStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 344;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readFuncCall(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readFuncExpr(v5);
  }
  return v3;
}

unint64_t _readAlterStatsStmt(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 345;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(v3 + 20) = *(_DWORD *)(a1 + 44) != 0;
  return v3;
}

_DWORD *_readAExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 346;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 0xF) {
    int v7 = 0;
  }
  v3[1] = v7;
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *((void *)v4 + 1) = v9;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v10 = v9;
      int v11 = 2;
      unint64_t v12 = 1;
      do
      {
        uint64_t v13 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v12));
        uint64_t v10 = lappend(v10, v13);
        *((void *)v4 + 1) = v10;
        unint64_t v12 = v11++;
      }
      while (*(void *)(a1 + 32) > v12);
    }
  }
  uint64_t v14 = *(void *)(a1 + 48);
  if (v14) {
    *((void *)v4 + 2) = _readNode(v14);
  }
  uint64_t v15 = *(void *)(a1 + 56);
  if (v15) {
    *((void *)v4 + 3) = _readNode(v15);
  }
  v4[8] = *(_DWORD *)(a1 + 64);
  return v4;
}

unint64_t _readColumnRef(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 347;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  return v3;
}

unint64_t _readAConst(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 349;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(_OWORD *)(v3 + 8) = *(_OWORD *)_readNode(v4);
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 32);
  return v3;
}

unint64_t _readFuncCall(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  *(_DWORD *)unint64_t v3 = 350;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, v10);
    *(void *)(v3 + 16) = v11;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 40) > v14);
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v16 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v16);
    *(void *)(v3 + 24) = v17;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v18 = v17;
      int v19 = 2;
      unint64_t v20 = 1;
      do
      {
        uint64_t v21 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v20));
        uint64_t v18 = lappend(v18, v21);
        *(void *)(v3 + 24) = v18;
        unint64_t v20 = v19++;
      }
      while (*(void *)(a1 + 56) > v20);
    }
  }
  uint64_t v22 = *(void *)(a1 + 72);
  if (v22) {
    *(void *)(v3 + 32) = _readNode(v22);
  }
  *(unsigned char *)(v3 + 40) = *(_DWORD *)(a1 + 80) != 0;
  *(unsigned char *)(v3 + 41) = *(_DWORD *)(a1 + 84) != 0;
  *(unsigned char *)(v3 + 42) = *(_DWORD *)(a1 + 88) != 0;
  *(unsigned char *)(v3 + 43) = *(_DWORD *)(a1 + 92) != 0;
  uint64_t v23 = *(void *)(a1 + 96);
  if (v23) {
    *(void *)(v3 + 48) = _readWindowDef(v23);
  }
  *(_DWORD *)(v3 + 56) = *(_DWORD *)(a1 + 104);
  return v3;
}

unint64_t _readAIndices(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 352;
  *(unsigned char *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    *(void *)(v3 + 16) = _readNode(v5);
  }
  return v3;
}

unint64_t _readAIndirection(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 353;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readAArrayExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 354;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  return v3;
}

unint64_t _readResTarget(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 355;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    *(void *)(v3 + 24) = _readNode(v11);
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  return v3;
}

unint64_t _readMultiAssignRef(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 356;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 36);
  return v3;
}

unint64_t _readTypeCast(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 357;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readTypeName(v5);
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 40);
  return v3;
}

unint64_t _readCollateClause(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 358;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readSortBy(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 359;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  int v5 = *(_DWORD *)(a1 + 32);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 3) {
    int v7 = 0;
  }
  *(_DWORD *)(v3 + 16) = v7;
  int v8 = *(_DWORD *)(a1 + 36);
  if (v8 == 3) {
    int v9 = 2;
  }
  else {
    int v9 = v8 == 2;
  }
  *(_DWORD *)(v3 + 20) = v9;
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v11;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 24) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 40) > v14);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  return v3;
}

unint64_t _readWindowDef(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x48uLL);
  *(_DWORD *)unint64_t v3 = 360;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  int v5 = *(const char **)(a1 + 32);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v7;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v8 = v7;
      int v9 = 2;
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v10));
        uint64_t v8 = lappend(v8, v11);
        *(void *)(v3 + 24) = v8;
        unint64_t v10 = v9++;
      }
      while (*(void *)(a1 + 40) > v10);
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v12);
    *(void *)(v3 + 32) = v13;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 32) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 56) > v16);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  uint64_t v18 = *(void *)(a1 + 80);
  if (v18) {
    *(void *)(v3 + 48) = _readNode(v18);
  }
  uint64_t v19 = *(void *)(a1 + 88);
  if (v19) {
    *(void *)(v3 + 56) = _readNode(v19);
  }
  *(_DWORD *)(v3 + 64) = *(_DWORD *)(a1 + 96);
  return v3;
}

unint64_t _readRangeSubselect(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 361;
  *(unsigned char *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    *(void *)(v3 + 16) = _readAlias(v5);
  }
  return v3;
}

unint64_t _readRangeFunction(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 362;
  *(unsigned char *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  *(unsigned char *)(v3 + 5) = *(_DWORD *)(a1 + 28) != 0;
  *(unsigned char *)(v3 + 6) = *(_DWORD *)(a1 + 32) != 0;
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 40) > v8);
    }
  }
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10) {
    *(void *)(v3 + 16) = _readAlias(v10);
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v11 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v11);
    *(void *)(v3 + 24) = v12;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 24) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 64) > v15);
    }
  }
  return v3;
}

unint64_t _readRangeTableSample(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 363;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t v11 = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, v11);
    *(void *)(v3 + 24) = v12;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 24) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 48) > v15);
    }
  }
  uint64_t v17 = *(void *)(a1 + 64);
  if (v17) {
    *(void *)(v3 + 32) = _readNode(v17);
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readRangeTableFunc(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t v3 = 364;
  *(unsigned char *)(v3 + 4) = *(_DWORD *)(a1 + 24) != 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    *(void *)(v3 + 16) = _readNode(v5);
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v7;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v8 = v7;
      int v9 = 2;
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v10));
        uint64_t v8 = lappend(v8, v11);
        *(void *)(v3 + 24) = v8;
        unint64_t v10 = v9++;
      }
      while (*(void *)(a1 + 48) > v10);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v12);
    *(void *)(v3 + 32) = v13;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 32) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 64) > v16);
    }
  }
  uint64_t v18 = *(void *)(a1 + 80);
  if (v18) {
    *(void *)(v3 + 40) = _readAlias(v18);
  }
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 88);
  return v3;
}

unint64_t _readRangeTableFuncCol(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t v3 = 365;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readTypeName(v5);
  }
  *(unsigned char *)(v3 + 24) = *(_DWORD *)(a1 + 40) != 0;
  *(unsigned char *)(v3 + 25) = *(_DWORD *)(a1 + 44) != 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    *(void *)(v3 + 32) = _readNode(v6);
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    *(void *)(v3 + 40) = _readNode(v7);
  }
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 64);
  return v3;
}

unint64_t _readTypeName(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t v3 = 366;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(v3 + 20) = *(_DWORD *)(a1 + 44) != 0;
  *(unsigned char *)(v3 + 21) = *(_DWORD *)(a1 + 48) != 0;
  if (*(void *)(a1 + 56))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v10);
    *(void *)(v3 + 24) = v11;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 24) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 56) > v14);
    }
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 72);
  if (*(void *)(a1 + 80))
  {
    uint64_t v16 = _readNode(**(void **)(a1 + 88));
    list_make1_impl(226, v16);
    *(void *)(v3 + 40) = v17;
    if (*(void *)(a1 + 80) >= 2uLL)
    {
      uint64_t v18 = v17;
      int v19 = 2;
      unint64_t v20 = 1;
      do
      {
        uint64_t v21 = _readNode(*(void *)(*(void *)(a1 + 88) + 8 * v20));
        uint64_t v18 = lappend(v18, v21);
        *(void *)(v3 + 40) = v18;
        unint64_t v20 = v19++;
      }
      while (*(void *)(a1 + 80) > v20);
    }
  }
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 96);
  return v3;
}

unint64_t _readColumnDef(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x70uLL);
  *(_DWORD *)unint64_t v3 = 367;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readTypeName(v5);
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(v3 + 28) = *(_DWORD *)(a1 + 44) != 0;
  *(unsigned char *)(v3 + 29) = *(_DWORD *)(a1 + 48) != 0;
  *(unsigned char *)(v3 + 30) = *(_DWORD *)(a1 + 52) != 0;
  uint64_t v6 = *(unsigned __int8 **)(a1 + 56);
  if (v6)
  {
    int v7 = *v6;
    if (v7) {
      *(unsigned char *)(v3 + 31) = v7;
    }
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8) {
    *(void *)(v3 + 32) = _readNode(v8);
  }
  uint64_t v9 = *(void *)(a1 + 72);
  if (v9) {
    *(void *)(v3 + 40) = _readNode(v9);
  }
  uint64_t v10 = *(unsigned __int8 **)(a1 + 80);
  if (v10)
  {
    int v11 = *v10;
    if (v11) {
      *(unsigned char *)(v3 + 48) = v11;
    }
  }
  uint64_t v12 = *(void *)(a1 + 88);
  if (v12) {
    *(void *)(v3 + 56) = _readRangeVar(v12);
  }
  int v13 = *(unsigned __int8 **)(a1 + 96);
  if (v13)
  {
    int v14 = *v13;
    if (v14) {
      *(unsigned char *)(v3 + 64) = v14;
    }
  }
  uint64_t v15 = *(void *)(a1 + 104);
  if (v15) {
    *(void *)(v3 + 72) = _readCollateClause(v15);
  }
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 120))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 128));
    list_make1_impl(226, Node);
    *(void *)(v3 + 88) = v17;
    if (*(void *)(a1 + 120) >= 2uLL)
    {
      uint64_t v18 = v17;
      int v19 = 2;
      unint64_t v20 = 1;
      do
      {
        uint64_t v21 = _readNode(*(void *)(*(void *)(a1 + 128) + 8 * v20));
        uint64_t v18 = lappend(v18, v21);
        *(void *)(v3 + 88) = v18;
        unint64_t v20 = v19++;
      }
      while (*(void *)(a1 + 120) > v20);
    }
  }
  if (*(void *)(a1 + 136))
  {
    uint64_t v22 = _readNode(**(void **)(a1 + 144));
    list_make1_impl(226, v22);
    *(void *)(v3 + 96) = v23;
    if (*(void *)(a1 + 136) >= 2uLL)
    {
      uint64_t v24 = v23;
      int v25 = 2;
      unint64_t v26 = 1;
      do
      {
        uint64_t v27 = _readNode(*(void *)(*(void *)(a1 + 144) + 8 * v26));
        uint64_t v24 = lappend(v24, v27);
        *(void *)(v3 + 96) = v24;
        unint64_t v26 = v25++;
      }
      while (*(void *)(a1 + 136) > v26);
    }
  }
  *(_DWORD *)(v3 + 104) = *(_DWORD *)(a1 + 152);
  return v3;
}

unint64_t _readIndexElem(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  *(_DWORD *)unint64_t v3 = 368;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readNode(v5);
  }
  uint64_t v6 = *(const char **)(a1 + 40);
  if (v6 && *v6) {
    *(void *)(v3 + 24) = pstrdup(v6);
  }
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *(void *)(v3 + 32) = v8;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v9 = v8;
      int v10 = 2;
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v11));
        uint64_t v9 = lappend(v9, v12);
        *(void *)(v3 + 32) = v9;
        unint64_t v11 = v10++;
      }
      while (*(void *)(a1 + 48) > v11);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v13 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v13);
    *(void *)(v3 + 40) = v14;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v15 = v14;
      int v16 = 2;
      unint64_t v17 = 1;
      do
      {
        uint64_t v18 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v17));
        uint64_t v15 = lappend(v15, v18);
        *(void *)(v3 + 40) = v15;
        unint64_t v17 = v16++;
      }
      while (*(void *)(a1 + 64) > v17);
    }
  }
  if (*(void *)(a1 + 80))
  {
    uint64_t v19 = _readNode(**(void **)(a1 + 88));
    list_make1_impl(226, v19);
    *(void *)(v3 + 48) = v20;
    if (*(void *)(a1 + 80) >= 2uLL)
    {
      uint64_t v21 = v20;
      int v22 = 2;
      unint64_t v23 = 1;
      do
      {
        uint64_t v24 = _readNode(*(void *)(*(void *)(a1 + 88) + 8 * v23));
        uint64_t v21 = lappend(v21, v24);
        *(void *)(v3 + 48) = v21;
        unint64_t v23 = v22++;
      }
      while (*(void *)(a1 + 80) > v23);
    }
  }
  int v25 = *(_DWORD *)(a1 + 96);
  unsigned int v26 = v25 - 2;
  int v27 = v25 - 1;
  if (v26 >= 3) {
    int v27 = 0;
  }
  *(_DWORD *)(v3 + 56) = v27;
  int v28 = *(_DWORD *)(a1 + 100);
  if (v28 == 3) {
    int v29 = 2;
  }
  else {
    int v29 = v28 == 2;
  }
  *(_DWORD *)(v3 + 60) = v29;
  return v3;
}

_DWORD *_readConstraint(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0xB0uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 369;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 0xD) {
    int v7 = 0;
  }
  v3[1] = v7;
  uint64_t v8 = *(const char **)(a1 + 32);
  if (v8 && *v8) {
    *((void *)v4 + 1) = pstrdup(v8);
  }
  *((unsigned char *)v4 + 16) = *(_DWORD *)(a1 + 40) != 0;
  *((unsigned char *)v4 + 17) = *(_DWORD *)(a1 + 44) != 0;
  v4[5] = *(_DWORD *)(a1 + 48);
  *((unsigned char *)v4 + 24) = *(_DWORD *)(a1 + 52) != 0;
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9) {
    *((void *)v4 + 4) = _readNode(v9);
  }
  int v10 = *(const char **)(a1 + 64);
  if (v10 && *v10) {
    *((void *)v4 + 5) = pstrdup(v10);
  }
  unint64_t v11 = *(unsigned __int8 **)(a1 + 72);
  if (v11)
  {
    int v12 = *v11;
    if (v12) {
      *((unsigned char *)v4 + 48) = v12;
    }
  }
  if (*(void *)(a1 + 80))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 88));
    list_make1_impl(226, Node);
    *((void *)v4 + 7) = v14;
    if (*(void *)(a1 + 80) >= 2uLL)
    {
      uint64_t v15 = v14;
      int v16 = 2;
      unint64_t v17 = 1;
      do
      {
        uint64_t v18 = _readNode(*(void *)(*(void *)(a1 + 88) + 8 * v17));
        uint64_t v15 = lappend(v15, v18);
        *((void *)v4 + 7) = v15;
        unint64_t v17 = v16++;
      }
      while (*(void *)(a1 + 80) > v17);
    }
  }
  if (*(void *)(a1 + 96))
  {
    uint64_t v19 = _readNode(**(void **)(a1 + 104));
    list_make1_impl(226, v19);
    *((void *)v4 + 8) = v20;
    if (*(void *)(a1 + 96) >= 2uLL)
    {
      uint64_t v21 = v20;
      int v22 = 2;
      unint64_t v23 = 1;
      do
      {
        uint64_t v24 = _readNode(*(void *)(*(void *)(a1 + 104) + 8 * v23));
        uint64_t v21 = lappend(v21, v24);
        *((void *)v4 + 8) = v21;
        unint64_t v23 = v22++;
      }
      while (*(void *)(a1 + 96) > v23);
    }
  }
  if (*(void *)(a1 + 112))
  {
    uint64_t v25 = _readNode(**(void **)(a1 + 120));
    list_make1_impl(226, v25);
    *((void *)v4 + 9) = v26;
    if (*(void *)(a1 + 112) >= 2uLL)
    {
      uint64_t v27 = v26;
      int v28 = 2;
      unint64_t v29 = 1;
      do
      {
        uint64_t v30 = _readNode(*(void *)(*(void *)(a1 + 120) + 8 * v29));
        uint64_t v27 = lappend(v27, v30);
        *((void *)v4 + 9) = v27;
        unint64_t v29 = v28++;
      }
      while (*(void *)(a1 + 112) > v29);
    }
  }
  if (*(void *)(a1 + 128))
  {
    uint64_t v31 = _readNode(**(void **)(a1 + 136));
    list_make1_impl(226, v31);
    *((void *)v4 + 10) = v32;
    if (*(void *)(a1 + 128) >= 2uLL)
    {
      uint64_t v33 = v32;
      int v34 = 2;
      unint64_t v35 = 1;
      do
      {
        uint64_t v36 = _readNode(*(void *)(*(void *)(a1 + 136) + 8 * v35));
        uint64_t v33 = lappend(v33, v36);
        *((void *)v4 + 10) = v33;
        unint64_t v35 = v34++;
      }
      while (*(void *)(a1 + 128) > v35);
    }
  }
  uint64_t v37 = *(const char **)(a1 + 144);
  if (v37 && *v37) {
    *((void *)v4 + 11) = pstrdup(v37);
  }
  uint64_t v38 = *(const char **)(a1 + 152);
  if (v38 && *v38) {
    *((void *)v4 + 12) = pstrdup(v38);
  }
  *((unsigned char *)v4 + 104) = *(_DWORD *)(a1 + 160) != 0;
  uint64_t v39 = *(const char **)(a1 + 168);
  if (v39 && *v39) {
    *((void *)v4 + 14) = pstrdup(v39);
  }
  uint64_t v40 = *(void *)(a1 + 176);
  if (v40) {
    *((void *)v4 + 15) = _readNode(v40);
  }
  uint64_t v41 = *(void *)(a1 + 184);
  if (v41) {
    *((void *)v4 + 16) = _readRangeVar(v41);
  }
  if (*(void *)(a1 + 192))
  {
    uint64_t v42 = _readNode(**(void **)(a1 + 200));
    list_make1_impl(226, v42);
    *((void *)v4 + 17) = v43;
    if (*(void *)(a1 + 192) >= 2uLL)
    {
      uint64_t v44 = v43;
      int v45 = 2;
      unint64_t v46 = 1;
      do
      {
        uint64_t v47 = _readNode(*(void *)(*(void *)(a1 + 200) + 8 * v46));
        uint64_t v44 = lappend(v44, v47);
        *((void *)v4 + 17) = v44;
        unint64_t v46 = v45++;
      }
      while (*(void *)(a1 + 192) > v46);
    }
  }
  if (*(void *)(a1 + 208))
  {
    uint64_t v48 = _readNode(**(void **)(a1 + 216));
    list_make1_impl(226, v48);
    *((void *)v4 + 18) = v49;
    if (*(void *)(a1 + 208) >= 2uLL)
    {
      uint64_t v50 = v49;
      int v51 = 2;
      unint64_t v52 = 1;
      do
      {
        uint64_t v53 = _readNode(*(void *)(*(void *)(a1 + 216) + 8 * v52));
        uint64_t v50 = lappend(v50, v53);
        *((void *)v4 + 18) = v50;
        unint64_t v52 = v51++;
      }
      while (*(void *)(a1 + 208) > v52);
    }
  }
  uint64_t v54 = *(unsigned __int8 **)(a1 + 224);
  if (v54)
  {
    int v55 = *v54;
    if (v55) {
      *((unsigned char *)v4 + 152) = v55;
    }
  }
  int v56 = *(unsigned __int8 **)(a1 + 232);
  if (v56)
  {
    int v57 = *v56;
    if (v57) {
      *((unsigned char *)v4 + 153) = v57;
    }
  }
  uint64_t v58 = *(unsigned __int8 **)(a1 + 240);
  if (v58)
  {
    int v59 = *v58;
    if (v59) {
      *((unsigned char *)v4 + 154) = v59;
    }
  }
  if (*(void *)(a1 + 248))
  {
    uint64_t v60 = _readNode(**(void **)(a1 + 256));
    list_make1_impl(226, v60);
    *((void *)v4 + 20) = v61;
    if (*(void *)(a1 + 248) >= 2uLL)
    {
      uint64_t v62 = v61;
      int v63 = 2;
      unint64_t v64 = 1;
      do
      {
        uint64_t v65 = _readNode(*(void *)(*(void *)(a1 + 256) + 8 * v64));
        uint64_t v62 = lappend(v62, v65);
        *((void *)v4 + 20) = v62;
        unint64_t v64 = v63++;
      }
      while (*(void *)(a1 + 248) > v64);
    }
  }
  v4[42] = *(_DWORD *)(a1 + 264);
  *((unsigned char *)v4 + 172) = *(_DWORD *)(a1 + 268) != 0;
  *((unsigned char *)v4 + 173) = *(_DWORD *)(a1 + 272) != 0;
  return v4;
}

unint64_t _readDefElem(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 370;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  int v5 = *(const char **)(a1 + 32);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    *(void *)(v3 + 24) = _readNode(v6);
  }
  int v7 = *(_DWORD *)(a1 + 48);
  unsigned int v8 = v7 - 2;
  int v9 = v7 - 1;
  if (v8 >= 3) {
    int v9 = 0;
  }
  *(_DWORD *)(v3 + 32) = v9;
  *(_DWORD *)(v3 + 36) = *(_DWORD *)(a1 + 52);
  return v3;
}

unint64_t _readRangeTblEntry(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0xF0uLL);
  unint64_t v4 = v3;
  *(_DWORD *)unint64_t v3 = 371;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 8) {
    int v7 = 0;
  }
  *(_DWORD *)(v3 + 4) = v7;
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 28);
  unsigned int v8 = *(unsigned __int8 **)(a1 + 32);
  if (v8)
  {
    int v9 = *v8;
    if (v9) {
      *(unsigned char *)(v3 + 12) = v9;
    }
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    *(void *)(v4 + 24) = _readTableSampleClause(v10);
  }
  uint64_t v11 = *(void *)(a1 + 56);
  if (v11) {
    *(void *)(v4 + 32) = _readQuery(v11);
  }
  *(unsigned char *)(v4 + 40) = *(_DWORD *)(a1 + 64) != 0;
  int v12 = *(_DWORD *)(a1 + 68);
  unsigned int v13 = v12 - 2;
  int v14 = v12 - 1;
  if (v13 >= 7) {
    int v14 = 0;
  }
  *(_DWORD *)(v4 + 44) = v14;
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 72);
  if (*(void *)(a1 + 80))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 88));
    list_make1_impl(226, Node);
    *(void *)(v4 + 56) = v16;
    if (*(void *)(a1 + 80) >= 2uLL)
    {
      uint64_t v17 = v16;
      int v18 = 2;
      unint64_t v19 = 1;
      do
      {
        uint64_t v20 = _readNode(*(void *)(*(void *)(a1 + 88) + 8 * v19));
        uint64_t v17 = lappend(v17, v20);
        *(void *)(v4 + 56) = v17;
        unint64_t v19 = v18++;
      }
      while (*(void *)(a1 + 80) > v19);
    }
  }
  if (*(void *)(a1 + 96))
  {
    uint64_t v21 = _readNode(**(void **)(a1 + 104));
    list_make1_impl(226, v21);
    *(void *)(v4 + 64) = v22;
    if (*(void *)(a1 + 96) >= 2uLL)
    {
      uint64_t v23 = v22;
      int v24 = 2;
      unint64_t v25 = 1;
      do
      {
        uint64_t v26 = _readNode(*(void *)(*(void *)(a1 + 104) + 8 * v25));
        uint64_t v23 = lappend(v23, v26);
        *(void *)(v4 + 64) = v23;
        unint64_t v25 = v24++;
      }
      while (*(void *)(a1 + 96) > v25);
    }
  }
  if (*(void *)(a1 + 112))
  {
    uint64_t v27 = _readNode(**(void **)(a1 + 120));
    list_make1_impl(226, v27);
    *(void *)(v4 + 72) = v28;
    if (*(void *)(a1 + 112) >= 2uLL)
    {
      uint64_t v29 = v28;
      int v30 = 2;
      unint64_t v31 = 1;
      do
      {
        uint64_t v32 = _readNode(*(void *)(*(void *)(a1 + 120) + 8 * v31));
        uint64_t v29 = lappend(v29, v32);
        *(void *)(v4 + 72) = v29;
        unint64_t v31 = v30++;
      }
      while (*(void *)(a1 + 112) > v31);
    }
  }
  if (*(void *)(a1 + 128))
  {
    uint64_t v33 = _readNode(**(void **)(a1 + 136));
    list_make1_impl(226, v33);
    *(void *)(v4 + 80) = v34;
    if (*(void *)(a1 + 128) >= 2uLL)
    {
      uint64_t v35 = v34;
      int v36 = 2;
      unint64_t v37 = 1;
      do
      {
        uint64_t v38 = _readNode(*(void *)(*(void *)(a1 + 136) + 8 * v37));
        uint64_t v35 = lappend(v35, v38);
        *(void *)(v4 + 80) = v35;
        unint64_t v37 = v36++;
      }
      while (*(void *)(a1 + 128) > v37);
    }
  }
  *(unsigned char *)(v4 + 88) = *(_DWORD *)(a1 + 144) != 0;
  uint64_t v39 = *(void *)(a1 + 152);
  if (v39) {
    *(void *)(v4 + 96) = _readTableFunc(v39);
  }
  if (*(void *)(a1 + 160))
  {
    uint64_t v40 = _readNode(**(void **)(a1 + 168));
    list_make1_impl(226, v40);
    *(void *)(v4 + 104) = v41;
    if (*(void *)(a1 + 160) >= 2uLL)
    {
      uint64_t v42 = v41;
      int v43 = 2;
      unint64_t v44 = 1;
      do
      {
        uint64_t v45 = _readNode(*(void *)(*(void *)(a1 + 168) + 8 * v44));
        uint64_t v42 = lappend(v42, v45);
        *(void *)(v4 + 104) = v42;
        unint64_t v44 = v43++;
      }
      while (*(void *)(a1 + 160) > v44);
    }
  }
  unint64_t v46 = *(const char **)(a1 + 176);
  if (v46 && *v46) {
    *(void *)(v4 + 112) = pstrdup(v46);
  }
  *(_DWORD *)(v4 + 120) = *(_DWORD *)(a1 + 184);
  *(unsigned char *)(v4 + 124) = *(_DWORD *)(a1 + 188) != 0;
  if (*(void *)(a1 + 192))
  {
    uint64_t v47 = _readNode(**(void **)(a1 + 200));
    list_make1_impl(226, v47);
    *(void *)(v4 + 128) = v48;
    if (*(void *)(a1 + 192) >= 2uLL)
    {
      uint64_t v49 = v48;
      int v50 = 2;
      unint64_t v51 = 1;
      do
      {
        uint64_t v52 = _readNode(*(void *)(*(void *)(a1 + 200) + 8 * v51));
        uint64_t v49 = lappend(v49, v52);
        *(void *)(v4 + 128) = v49;
        unint64_t v51 = v50++;
      }
      while (*(void *)(a1 + 192) > v51);
    }
  }
  if (*(void *)(a1 + 208))
  {
    uint64_t v53 = _readNode(**(void **)(a1 + 216));
    list_make1_impl(226, v53);
    *(void *)(v4 + 136) = v54;
    if (*(void *)(a1 + 208) >= 2uLL)
    {
      uint64_t v55 = v54;
      int v56 = 2;
      unint64_t v57 = 1;
      do
      {
        uint64_t v58 = _readNode(*(void *)(*(void *)(a1 + 216) + 8 * v57));
        uint64_t v55 = lappend(v55, v58);
        *(void *)(v4 + 136) = v55;
        unint64_t v57 = v56++;
      }
      while (*(void *)(a1 + 208) > v57);
    }
  }
  if (*(void *)(a1 + 224))
  {
    uint64_t v59 = _readNode(**(void **)(a1 + 232));
    list_make1_impl(226, v59);
    *(void *)(v4 + 144) = v60;
    if (*(void *)(a1 + 224) >= 2uLL)
    {
      uint64_t v61 = v60;
      int v62 = 2;
      unint64_t v63 = 1;
      do
      {
        uint64_t v64 = _readNode(*(void *)(*(void *)(a1 + 232) + 8 * v63));
        uint64_t v61 = lappend(v61, v64);
        *(void *)(v4 + 144) = v61;
        unint64_t v63 = v62++;
      }
      while (*(void *)(a1 + 224) > v63);
    }
  }
  uint64_t v65 = *(const char **)(a1 + 240);
  if (v65 && *v65) {
    *(void *)(v4 + 152) = pstrdup(v65);
  }
  *(void *)(v4 + 160) = *(void *)(a1 + 248);
  uint64_t v66 = *(void *)(a1 + 256);
  if (v66) {
    *(void *)(v4 + 168) = _readAlias(v66);
  }
  uint64_t v67 = *(void *)(a1 + 264);
  if (v67) {
    *(void *)(v4 + 176) = _readAlias(v67);
  }
  *(unsigned char *)(v4 + 184) = *(_DWORD *)(a1 + 272) != 0;
  *(unsigned char *)(v4 + 185) = *(_DWORD *)(a1 + 276) != 0;
  *(unsigned char *)(v4 + 186) = *(_DWORD *)(a1 + 280) != 0;
  *(_DWORD *)(v4 + 188) = *(_DWORD *)(a1 + 284);
  *(_DWORD *)(v4 + 192) = *(_DWORD *)(a1 + 288);
  if (*(void *)(a1 + 360))
  {
    uint64_t v68 = _readNode(**(void **)(a1 + 368));
    list_make1_impl(226, v68);
    *(void *)(v4 + 232) = v69;
    if (*(void *)(a1 + 360) >= 2uLL)
    {
      uint64_t v70 = v69;
      int v71 = 2;
      unint64_t v72 = 1;
      do
      {
        uint64_t v73 = _readNode(*(void *)(*(void *)(a1 + 368) + 8 * v72));
        uint64_t v70 = lappend(v70, v73);
        *(void *)(v4 + 232) = v70;
        unint64_t v72 = v71++;
      }
      while (*(void *)(a1 + 360) > v72);
    }
  }
  return v4;
}

unint64_t _readRangeTblFunction(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x40uLL);
  *(_DWORD *)unint64_t v3 = 372;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v6;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 24) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 40) > v9);
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v11 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v11);
    *(void *)(v3 + 32) = v12;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 32) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 56) > v15);
    }
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v17 = _readNode(**(void **)(a1 + 80));
    list_make1_impl(226, v17);
    *(void *)(v3 + 40) = v18;
    if (*(void *)(a1 + 72) >= 2uLL)
    {
      uint64_t v19 = v18;
      int v20 = 2;
      unint64_t v21 = 1;
      do
      {
        uint64_t v22 = _readNode(*(void *)(*(void *)(a1 + 80) + 8 * v21));
        uint64_t v19 = lappend(v19, v22);
        *(void *)(v3 + 40) = v19;
        unint64_t v21 = v20++;
      }
      while (*(void *)(a1 + 72) > v21);
    }
  }
  if (*(void *)(a1 + 88))
  {
    uint64_t v23 = _readNode(**(void **)(a1 + 96));
    list_make1_impl(226, v23);
    *(void *)(v3 + 48) = v24;
    if (*(void *)(a1 + 88) >= 2uLL)
    {
      uint64_t v25 = v24;
      int v26 = 2;
      unint64_t v27 = 1;
      do
      {
        uint64_t v28 = _readNode(*(void *)(*(void *)(a1 + 96) + 8 * v27));
        uint64_t v25 = lappend(v25, v28);
        *(void *)(v3 + 48) = v25;
        unint64_t v27 = v26++;
      }
      while (*(void *)(a1 + 88) > v27);
    }
  }
  return v3;
}

unint64_t _readTableSampleClause(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 373;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 32) > v8);
    }
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    *(void *)(v3 + 16) = _readNode(v10);
  }
  return v3;
}

_DWORD *_readWithCheckOption(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 374;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 3) {
    int v7 = 0;
  }
  v3[1] = v7;
  unint64_t v8 = *(const char **)(a1 + 32);
  if (v8 && *v8) {
    *((void *)v4 + 1) = pstrdup(v8);
  }
  uint64_t v9 = *(const char **)(a1 + 40);
  if (v9 && *v9) {
    *((void *)v4 + 2) = pstrdup(v9);
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    *((void *)v4 + 3) = _readNode(v10);
  }
  *((unsigned char *)v4 + 32) = *(_DWORD *)(a1 + 56) != 0;
  return v4;
}

unint64_t _readSortGroupClause(_DWORD *a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = MemoryContextAllocZero(*v2, 0x14uLL);
  *(_DWORD *)unint64_t result = 375;
  *(_DWORD *)(result + 4) = a1[6];
  *(_DWORD *)(result + 8) = a1[7];
  *(_DWORD *)(result + 12) = a1[8];
  *(unsigned char *)(result + 16) = a1[9] != 0;
  *(unsigned char *)(result + 17) = a1[10] != 0;
  return result;
}

_DWORD *_readGroupingSet(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 376;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 4) {
    int v7 = 0;
  }
  v3[1] = v7;
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *((void *)v4 + 1) = v9;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v10 = v9;
      int v11 = 2;
      unint64_t v12 = 1;
      do
      {
        uint64_t v13 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v12));
        uint64_t v10 = lappend(v10, v13);
        *((void *)v4 + 1) = v10;
        unint64_t v12 = v11++;
      }
      while (*(void *)(a1 + 32) > v12);
    }
  }
  v4[4] = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _readWindowClause(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x58uLL);
  *(_DWORD *)unint64_t v3 = 377;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  int v5 = *(const char **)(a1 + 32);
  if (v5 && *v5) {
    *(void *)(v3 + 16) = pstrdup(v5);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v7;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v8 = v7;
      int v9 = 2;
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v10));
        uint64_t v8 = lappend(v8, v11);
        *(void *)(v3 + 24) = v8;
        unint64_t v10 = v9++;
      }
      while (*(void *)(a1 + 40) > v10);
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v12);
    *(void *)(v3 + 32) = v13;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 32) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 56) > v16);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  uint64_t v18 = *(void *)(a1 + 80);
  if (v18) {
    *(void *)(v3 + 48) = _readNode(v18);
  }
  uint64_t v19 = *(void *)(a1 + 88);
  if (v19) {
    *(void *)(v3 + 56) = _readNode(v19);
  }
  *(_DWORD *)(v3 + 64) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(v3 + 68) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(v3 + 72) = *(_DWORD *)(a1 + 104);
  *(unsigned char *)(v3 + 76) = *(_DWORD *)(a1 + 108) != 0;
  *(unsigned char *)(v3 + 77) = *(_DWORD *)(a1 + 112) != 0;
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(a1 + 116);
  *(unsigned char *)(v3 + 84) = *(_DWORD *)(a1 + 120) != 0;
  return v3;
}

unint64_t _readObjectWithArgs(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 378;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, v10);
    *(void *)(v3 + 16) = v11;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v12 = v11;
      int v13 = 2;
      unint64_t v14 = 1;
      do
      {
        uint64_t v15 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v14));
        uint64_t v12 = lappend(v12, v15);
        *(void *)(v3 + 16) = v12;
        unint64_t v14 = v13++;
      }
      while (*(void *)(a1 + 40) > v14);
    }
  }
  *(unsigned char *)(v3 + 24) = *(_DWORD *)(a1 + 56) != 0;
  return v3;
}

unint64_t _readAccessPriv(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 379;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  return v3;
}

unint64_t _readCreateOpClassItem(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 380;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readObjectWithArgs(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 40);
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v6;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 24) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 48) > v9);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v11 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v11);
    *(void *)(v3 + 32) = v12;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v13 = v12;
      int v14 = 2;
      unint64_t v15 = 1;
      do
      {
        uint64_t v16 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v15));
        uint64_t v13 = lappend(v13, v16);
        *(void *)(v3 + 32) = v13;
        unint64_t v15 = v14++;
      }
      while (*(void *)(a1 + 64) > v15);
    }
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (v17) {
    *(void *)(v3 + 40) = _readTypeName(v17);
  }
  return v3;
}

unint64_t _readTableLikeClause(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 381;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 36);
  return v3;
}

unint64_t _readFunctionParameter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 382;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readTypeName(v5);
  }
  unsigned int v6 = *(_DWORD *)(a1 + 40) - 2;
  if (v6 <= 3)
  {
    *(_DWORD *)(v3 + 24) = *(_DWORD *)&aO[4 * v6];
    uint64_t v7 = *(void *)(a1 + 48);
    if (!v7) {
      return v3;
    }
    goto LABEL_10;
  }
  *(_DWORD *)(v3 + 24) = 105;
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
LABEL_10:
  }
    *(void *)(v3 + 32) = _readNode(v7);
  return v3;
}

unint64_t _readLockingClause(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 383;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  int v10 = *(_DWORD *)(a1 + 40);
  unsigned int v11 = v10 - 2;
  int v12 = v10 - 1;
  if (v11 >= 4) {
    int v12 = 0;
  }
  *(_DWORD *)(v3 + 16) = v12;
  int v13 = *(_DWORD *)(a1 + 44);
  if (v13 == 3) {
    int v14 = 2;
  }
  else {
    int v14 = v13 == 2;
  }
  *(_DWORD *)(v3 + 20) = v14;
  return v3;
}

unint64_t _readRowMarkClause(_DWORD *a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = MemoryContextAllocZero(*v2, 0x14uLL);
  *(_DWORD *)unint64_t result = 384;
  *(_DWORD *)(result + 4) = a1[6];
  int v4 = a1[7];
  unsigned int v5 = v4 - 2;
  int v6 = v4 - 1;
  if (v5 >= 4) {
    int v6 = 0;
  }
  *(_DWORD *)(result + 8) = v6;
  int v7 = a1[8];
  if (v7 == 3) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 2;
  }
  *(_DWORD *)(result + 12) = v8;
  *(unsigned char *)(result + 16) = a1[9] != 0;
  return result;
}

unint64_t _readXmlSerialize(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 385;
  *(_DWORD *)(v3 + 4) = *(_DWORD *)(a1 + 24) == 2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    *(void *)(v3 + 8) = _readNode(v4);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    *(void *)(v3 + 16) = _readTypeName(v5);
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readWithClause(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 386;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  *(unsigned char *)(v3 + 16) = *(_DWORD *)(a1 + 40) != 0;
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 44);
  return v3;
}

unint64_t _readInferClause(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  *(_DWORD *)unint64_t v3 = 387;
  if (*(void *)(a1 + 24))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 32));
    list_make1_impl(226, Node);
    *(void *)(v3 + 8) = v5;
    if (*(void *)(a1 + 24) >= 2uLL)
    {
      uint64_t v6 = v5;
      int v7 = 2;
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v8));
        uint64_t v6 = lappend(v6, v9);
        *(void *)(v3 + 8) = v6;
        unint64_t v8 = v7++;
      }
      while (*(void *)(a1 + 24) > v8);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    *(void *)(v3 + 16) = _readNode(v10);
  }
  unsigned int v11 = *(const char **)(a1 + 48);
  if (v11 && *v11) {
    *(void *)(v3 + 24) = pstrdup(v11);
  }
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(a1 + 56);
  return v3;
}

_DWORD *_readOnConflictClause(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x28uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 388;
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5 == 3) {
    int v6 = 2;
  }
  else {
    int v6 = v5 == 2;
  }
  v3[1] = v6;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    *((void *)v4 + 1) = _readInferClause(v7);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *((void *)v4 + 2) = v9;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v10 = v9;
      int v11 = 2;
      unint64_t v12 = 1;
      do
      {
        uint64_t v13 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v12));
        uint64_t v10 = lappend(v10, v13);
        *((void *)v4 + 2) = v10;
        unint64_t v12 = v11++;
      }
      while (*(void *)(a1 + 40) > v12);
    }
  }
  uint64_t v14 = *(void *)(a1 + 56);
  if (v14) {
    *((void *)v4 + 3) = _readNode(v14);
  }
  v4[8] = *(_DWORD *)(a1 + 64);
  return v4;
}

unint64_t _readCommonTableExpr(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x58uLL);
  *(_DWORD *)unint64_t v3 = 389;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  int v11 = *(_DWORD *)(a1 + 48);
  if (v11 == 3) {
    int v12 = 2;
  }
  else {
    int v12 = v11 == 2;
  }
  *(_DWORD *)(v3 + 24) = v12;
  uint64_t v13 = *(void *)(a1 + 56);
  if (v13) {
    *(void *)(v3 + 32) = _readNode(v13);
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 64);
  *(unsigned char *)(v3 + 44) = *(_DWORD *)(a1 + 68) != 0;
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 72);
  if (*(void *)(a1 + 80))
  {
    uint64_t v14 = _readNode(**(void **)(a1 + 88));
    list_make1_impl(226, v14);
    *(void *)(v3 + 56) = v15;
    if (*(void *)(a1 + 80) >= 2uLL)
    {
      uint64_t v16 = v15;
      int v17 = 2;
      unint64_t v18 = 1;
      do
      {
        uint64_t v19 = _readNode(*(void *)(*(void *)(a1 + 88) + 8 * v18));
        uint64_t v16 = lappend(v16, v19);
        *(void *)(v3 + 56) = v16;
        unint64_t v18 = v17++;
      }
      while (*(void *)(a1 + 80) > v18);
    }
  }
  if (*(void *)(a1 + 96))
  {
    uint64_t v20 = _readNode(**(void **)(a1 + 104));
    list_make1_impl(226, v20);
    *(void *)(v3 + 64) = v21;
    if (*(void *)(a1 + 96) >= 2uLL)
    {
      uint64_t v22 = v21;
      int v23 = 2;
      unint64_t v24 = 1;
      do
      {
        uint64_t v25 = _readNode(*(void *)(*(void *)(a1 + 104) + 8 * v24));
        uint64_t v22 = lappend(v22, v25);
        *(void *)(v3 + 64) = v22;
        unint64_t v24 = v23++;
      }
      while (*(void *)(a1 + 96) > v24);
    }
  }
  if (*(void *)(a1 + 112))
  {
    uint64_t v26 = _readNode(**(void **)(a1 + 120));
    list_make1_impl(226, v26);
    *(void *)(v3 + 72) = v27;
    if (*(void *)(a1 + 112) >= 2uLL)
    {
      uint64_t v28 = v27;
      int v29 = 2;
      unint64_t v30 = 1;
      do
      {
        uint64_t v31 = _readNode(*(void *)(*(void *)(a1 + 120) + 8 * v30));
        uint64_t v28 = lappend(v28, v31);
        *(void *)(v3 + 72) = v28;
        unint64_t v30 = v29++;
      }
      while (*(void *)(a1 + 112) > v30);
    }
  }
  if (*(void *)(a1 + 128))
  {
    uint64_t v32 = _readNode(**(void **)(a1 + 136));
    list_make1_impl(226, v32);
    *(void *)(v3 + 80) = v33;
    if (*(void *)(a1 + 128) >= 2uLL)
    {
      uint64_t v34 = v33;
      int v35 = 2;
      unint64_t v36 = 1;
      do
      {
        uint64_t v37 = _readNode(*(void *)(*(void *)(a1 + 136) + 8 * v36));
        uint64_t v34 = lappend(v34, v37);
        *(void *)(v3 + 80) = v34;
        unint64_t v36 = v35++;
      }
      while (*(void *)(a1 + 128) > v36);
    }
  }
  return v3;
}

_DWORD *_readRoleSpec(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  uint64_t v4 = v3;
  _DWORD *v3 = 390;
  int v5 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = v5 - 2;
  int v7 = v5 - 1;
  if (v6 >= 3) {
    int v7 = 0;
  }
  v3[1] = v7;
  int v8 = *(const char **)(a1 + 32);
  if (v8 && *v8) {
    *((void *)v4 + 1) = pstrdup(v8);
  }
  v4[4] = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _readTriggerTransition(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 391;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  *(unsigned char *)(v3 + 16) = *(_DWORD *)(a1 + 32) != 0;
  *(unsigned char *)(v3 + 17) = *(_DWORD *)(a1 + 36) != 0;
  return v3;
}

unint64_t _readPartitionElem(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  *(_DWORD *)unint64_t v3 = 392;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readNode(v5);
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v7;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v8 = v7;
      int v9 = 2;
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v10));
        uint64_t v8 = lappend(v8, v11);
        *(void *)(v3 + 24) = v8;
        unint64_t v10 = v9++;
      }
      while (*(void *)(a1 + 40) > v10);
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v12 = _readNode(**(void **)(a1 + 64));
    list_make1_impl(226, v12);
    *(void *)(v3 + 32) = v13;
    if (*(void *)(a1 + 56) >= 2uLL)
    {
      uint64_t v14 = v13;
      int v15 = 2;
      unint64_t v16 = 1;
      do
      {
        uint64_t v17 = _readNode(*(void *)(*(void *)(a1 + 64) + 8 * v16));
        uint64_t v14 = lappend(v14, v17);
        *(void *)(v3 + 32) = v14;
        unint64_t v16 = v15++;
      }
      while (*(void *)(a1 + 56) > v16);
    }
  }
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(a1 + 72);
  return v3;
}

unint64_t _readPartitionSpec(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 393;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 40));
    list_make1_impl(226, Node);
    *(void *)(v3 + 16) = v6;
    if (*(void *)(a1 + 32) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 40) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 16) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 32) > v9);
    }
  }
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a1 + 48);
  return v3;
}

unint64_t _readPartitionBoundSpec(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x30uLL);
  unint64_t v4 = v3;
  *(_DWORD *)unint64_t v3 = 394;
  uint64_t v5 = *(unsigned __int8 **)(a1 + 24);
  if (v5)
  {
    int v6 = *v5;
    if (v6) {
      *(unsigned char *)(v3 + 4) = v6;
    }
  }
  *(unsigned char *)(v3 + 5) = *(_DWORD *)(a1 + 32) != 0;
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a1 + 40);
  if (*(void *)(a1 + 48))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 56));
    list_make1_impl(226, Node);
    *(void *)(v4 + 16) = v8;
    if (*(void *)(a1 + 48) >= 2uLL)
    {
      uint64_t v9 = v8;
      int v10 = 2;
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = _readNode(*(void *)(*(void *)(a1 + 56) + 8 * v11));
        uint64_t v9 = lappend(v9, v12);
        *(void *)(v4 + 16) = v9;
        unint64_t v11 = v10++;
      }
      while (*(void *)(a1 + 48) > v11);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v13 = _readNode(**(void **)(a1 + 72));
    list_make1_impl(226, v13);
    *(void *)(v4 + 24) = v14;
    if (*(void *)(a1 + 64) >= 2uLL)
    {
      uint64_t v15 = v14;
      int v16 = 2;
      unint64_t v17 = 1;
      do
      {
        uint64_t v18 = _readNode(*(void *)(*(void *)(a1 + 72) + 8 * v17));
        uint64_t v15 = lappend(v15, v18);
        *(void *)(v4 + 24) = v15;
        unint64_t v17 = v16++;
      }
      while (*(void *)(a1 + 64) > v17);
    }
  }
  if (*(void *)(a1 + 80))
  {
    uint64_t v19 = _readNode(**(void **)(a1 + 88));
    list_make1_impl(226, v19);
    *(void *)(v4 + 32) = v20;
    if (*(void *)(a1 + 80) >= 2uLL)
    {
      uint64_t v21 = v20;
      int v22 = 2;
      unint64_t v23 = 1;
      do
      {
        uint64_t v24 = _readNode(*(void *)(*(void *)(a1 + 88) + 8 * v23));
        uint64_t v21 = lappend(v21, v24);
        *(void *)(v4 + 32) = v21;
        unint64_t v23 = v22++;
      }
      while (*(void *)(a1 + 80) > v23);
    }
  }
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a1 + 96);
  return v4;
}

_DWORD *_readPartitionRangeDatum(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  unint64_t v4 = v3;
  _DWORD *v3 = 395;
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5 == 2) {
    int v6 = 0;
  }
  else {
    int v6 = -1;
  }
  if (v5 == 3) {
    int v7 = 1;
  }
  else {
    int v7 = v6;
  }
  v3[1] = v7;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    *((void *)v4 + 1) = _readNode(v8);
  }
  v4[4] = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _readPartitionCmd(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 396;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v3 + 16) = _readPartitionBoundSpec(v5);
  }
  return v3;
}

unint64_t _readVacuumRelation(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x20uLL);
  *(_DWORD *)unint64_t v3 = 397;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    *(void *)(v3 + 8) = _readRangeVar(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  if (*(void *)(a1 + 40))
  {
    uint64_t Node = _readNode(**(void **)(a1 + 48));
    list_make1_impl(226, Node);
    *(void *)(v3 + 24) = v6;
    if (*(void *)(a1 + 40) >= 2uLL)
    {
      uint64_t v7 = v6;
      int v8 = 2;
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = _readNode(*(void *)(*(void *)(a1 + 48) + 8 * v9));
        uint64_t v7 = lappend(v7, v10);
        *(void *)(v3 + 24) = v7;
        unint64_t v9 = v8++;
      }
      while (*(void *)(a1 + 40) > v9);
    }
  }
  return v3;
}

unint64_t _readInlineCodeBlock(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t v3 = MemoryContextAllocZeroAligned(*v2, 0x18uLL);
  *(_DWORD *)unint64_t v3 = 410;
  uint64_t v4 = *(const char **)(a1 + 24);
  if (v4 && *v4) {
    *(void *)(v3 + 8) = pstrdup(v4);
  }
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v3 + 20) = *(_DWORD *)(a1 + 36) != 0;
  *(unsigned char *)(v3 + 21) = *(_DWORD *)(a1 + 40) != 0;
  return v3;
}

uint64_t _readList(uint64_t a1)
{
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t Node = _readNode(**(void **)(a1 + 32));
  list_make1_impl(226, Node);
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24) >= 2uLL)
  {
    int v5 = 2;
    unint64_t v6 = 1;
    do
    {
      uint64_t v7 = _readNode(*(void *)(*(void *)(a1 + 32) + 8 * v6));
      uint64_t v4 = lappend(v4, v7);
      unint64_t v6 = v5++;
    }
    while (*(void *)(a1 + 24) > v6);
  }
  return v4;
}

void _readNode_cold_1(_DWORD *a1)
{
}

uint64_t pg_query_scan(uint64_t a1)
{
  v1 = (const char *)MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  uint64_t v46 = 0;
  memset(v45, 0, sizeof(v45));
  unint64_t v44 = 0;
  int v43 = 0;
  long long v40 = xmmword_1E55D9A00;
  long long v41 = *(_OWORD *)algn_1E55D9A10;
  long long v42 = xmmword_1E55D9A20;
  pg_query_enter_memory_context();
  int v5 = (uint64_t *)CurrentMemoryContext(v4);
  uint64_t v6 = *v5;
  bzero(__s1, 0x1001uLL);
  uint64_t v7 = (int **)PG_exception_stack();
  int v8 = *v7;
  unint64_t v9 = v7;
  uint64_t v10 = (void *)error_context_stack();
  uint64_t v11 = *v10;
  memset(v47, 0, 196);
  if (sigsetjmp(v47, 0))
  {
    *unint64_t v9 = v8;
    *uint64_t v10 = v11;
    *int v5 = v6;
    uint64_t v12 = CopyErrorData();
    uint64_t v13 = malloc_type_malloc(0x28uLL, 0x1010040E871EB1AuLL);
    *uint64_t v13 = strdup(*(const char **)(v12 + 64));
    v13[2] = strdup(*(const char **)(v12 + 16));
    v13[1] = strdup(*(const char **)(v12 + 32));
    v13[4] = 0;
    *((_DWORD *)v13 + 6) = *(_DWORD *)(v12 + 24);
    *((_DWORD *)v13 + 7) = *(_DWORD *)(v12 + 160);
    *((void *)v3 + 3) = v13;
    FlushErrorState();
  }
  else
  {
    uint64_t v37 = v10;
    uint64_t v38 = v11;
    uint64_t v39 = v3;
    *unint64_t v9 = v47;
    uint64_t v14 = (unsigned char ***)scanner_init(v1, (uint64_t)v45, (uint64_t)&ScanKeywords, (uint64_t)&ScanKeywordTokens);
    uint64_t v15 = -1;
    uint64_t v16 = -8;
    do
    {
      uint64_t v17 = v15;
      uint64_t v18 = v16;
      int v19 = core_yylex(&v44, (unsigned char **)&v43, v14);
      uint64_t v20 = v17 + 1;
      size_t v21 = v18 + 8;
      uint64_t v16 = v21;
      uint64_t v15 = v17 + 1;
    }
    while (v19);
    scanner_finish((uint64_t)v14);
    int v22 = (void **)malloc_type_malloc(v21, 0x2004093837F09uLL);
    uint64_t v23 = scanner_init(v1, (uint64_t)v45, (uint64_t)&ScanKeywords, (uint64_t)&ScanKeywordTokens);
    int v24 = core_yylex(&v44, (unsigned char **)&v43, (unsigned char ***)v23);
    if (v24)
    {
      int v25 = v24;
      uint64_t v26 = v22;
      do
      {
        int v29 = malloc_type_malloc(0x28uLL, 0x10600401BE82CDFuLL);
        *uint64_t v26 = v29;
        pg_query__scan_token__init((uint64_t)v29);
        int v30 = v43;
        *((_DWORD *)*v26 + 6) = v43;
        if ((v25 - 258) <= 0x12 && ((1 << (v25 - 2)) & 0x40069) != 0) {
          int v31 = HIDWORD(v46);
        }
        else {
          int v31 = v30 + *(_DWORD *)(v23 + 64);
        }
        *((_DWORD *)*v26 + 7) = v31;
        *((_DWORD *)*v26 + 8) = v25;
        if ((v25 - 277) <= 0x1C1) {
          int v27 = dword_18EB57800[v25 - 277];
        }
        else {
          int v27 = 0;
        }
        uint64_t v28 = (uint64_t)*v26++;
        *(_DWORD *)(v28 + 36) = v27;
        int v25 = core_yylex(&v44, (unsigned char **)&v43, (unsigned char ***)v23);
      }
      while (v25);
    }
    scanner_finish(v23);
    DWORD2(v41) = 130003;
    *(void *)&long long v42 = v20;
    *((void *)&v42 + 1) = v22;
    unsigned int packed_size = pg_query__scan_result__get_packed_size((void **)&v40);
    *(_DWORD *)uint64_t v39 = packed_size;
    uint64_t v33 = malloc_type_malloc(packed_size, 0x1FB95764uLL);
    *((void *)v39 + 1) = v33;
    pg_query__scan_result__pack((void **)&v40, (uint64_t)v33);
    if (v20)
    {
      uint64_t v34 = 0;
      do
      {
        uint64_t v35 = v34;
        free(v22[v34]);
        uint64_t v34 = v35 + 1;
      }
      while (v20 != v35 + 1);
    }
    free(v22);
    *((void *)v39 + 2) = strdup(__s1);
    uint64_t v10 = v37;
    uint64_t v11 = v38;
  }
  *unint64_t v9 = v8;
  *uint64_t v10 = v11;
  return pg_query_exit_memory_context();
}

void pg_query_free_scan_result(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    pg_query_free_error(v2);
  }
  free(*(void **)(a1 + 8));
  uint64_t v3 = *(void **)(a1 + 16);

  free(v3);
}

uint64_t pg_query_split_with_scanner(uint64_t a1)
{
  v1 = (const char *)MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v38 = 0;
  unint64_t v36 = 0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  memset(v37, 0, sizeof(v37));
  int v35 = 0;
  pg_query_enter_memory_context();
  int v5 = (uint64_t *)CurrentMemoryContext(v4);
  uint64_t v6 = *v5;
  bzero(__s1, 0x1001uLL);
  uint64_t v7 = (int **)PG_exception_stack();
  int v8 = *v7;
  unint64_t v9 = (uint64_t *)error_context_stack();
  uint64_t v10 = *v9;
  memset(v39, 0, sizeof(v39));
  if (sigsetjmp(v39, 0))
  {
    *uint64_t v7 = v8;
    *unint64_t v9 = v10;
    *int v5 = v6;
    uint64_t v11 = CopyErrorData();
    uint64_t v12 = malloc_type_malloc(0x28uLL, 0x1010040E871EB1AuLL);
    *uint64_t v12 = strdup(*(const char **)(v11 + 64));
    v12[2] = strdup(*(const char **)(v11 + 16));
    v12[1] = strdup(*(const char **)(v11 + 32));
    v12[4] = 0;
    *((_DWORD *)v12 + 6) = *(_DWORD *)(v11 + 24);
    *((_DWORD *)v12 + 7) = *(_DWORD *)(v11 + 160);
    *((void *)v3 + 3) = v12;
    FlushErrorState();
  }
  else
  {
    int v31 = v3;
    uint64_t v32 = v10;
    uint64_t v34 = v8;
    uint64_t v13 = v7;
    *uint64_t v7 = v39;
    uint64_t v14 = (unsigned char ***)scanner_init(v1, (uint64_t)v37, (uint64_t)&ScanKeywords, (uint64_t)&ScanKeywordTokens);
    char v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = v16;
      int v19 = core_yylex(&v36, (unsigned char **)&v35, v14);
      if ((v19 - 277) < 0x1C2)
      {
        char v15 = 1;
      }
      else if (v19 == 41)
      {
        --v17;
      }
      else if (v19 == 40)
      {
        ++v17;
      }
      else if ((v15 & (v17 == 0)) == 1)
      {
        if (v19 != 59 && v19)
        {
          char v15 = 1;
        }
        else
        {
          *((_DWORD *)v3 + 2) = v18 + 1;
          uint64_t v18 = (v18 + 1);
          char v15 = 0;
        }
        uint64_t v17 = 0;
      }
      uint64_t v16 = v18;
    }
    while (v19);
    uint64_t v33 = v13;
    scanner_finish((uint64_t)v14);
    uint64_t v20 = malloc_type_malloc(8 * (int)v18, 0x2004093837F09uLL);
    *(void *)uint64_t v3 = v20;
    size_t v21 = (unsigned char ***)scanner_init(v1, (uint64_t)v37, (uint64_t)&ScanKeywords, (uint64_t)&ScanKeywordTokens);
    char v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = 0;
    do
    {
      int v26 = core_yylex(&v36, (unsigned char **)&v35, v21);
      int v27 = v26;
      if ((v26 - 277) < 0x1C2)
      {
        char v22 = 1;
      }
      else if (v26 == 41)
      {
        --v24;
      }
      else if (v26 == 40)
      {
        ++v24;
      }
      else if ((v22 & (v24 == 0)) == 1 && (v26 == 59 || !v26))
      {
        uint64_t v28 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
        uint64_t v24 = 0;
        char v22 = 0;
        v20[v23] = v28;
        *uint64_t v28 = v25;
        int v29 = v35;
        *(_DWORD *)(v20[v23] + 4) = v35 - v25;
        int v25 = v29 + 1;
        ++v23;
      }
      else if (!v24 && v26 == 59)
      {
        uint64_t v24 = 0;
        int v25 = v35 + 1;
      }
    }
    while (v27);
    scanner_finish((uint64_t)v21);
    uint64_t v10 = v32;
    *((void *)v31 + 2) = strdup(__s1);
    int v8 = v34;
    uint64_t v7 = v33;
  }
  *uint64_t v7 = v8;
  *unint64_t v9 = v10;
  return pg_query_exit_memory_context();
}

uint64_t pg_query_split_with_parser@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  pg_query_enter_memory_context();
  pg_query_raw_parse((uint64_t)a1);
  *(_OWORD *)(a2 + 16) = v13;
  if (v12)
  {
    uint64_t v4 = *(int *)(v12 + 4);
    *(_DWORD *)(a2 + 8) = v4;
    int v5 = malloc_type_malloc(8 * v4, 0x2004093837F09uLL);
    *(void *)a2 = v5;
    if (*(int *)(v12 + 4) >= 1)
    {
      uint64_t v6 = v5;
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)(v12 + 16) + 8 * v7);
        unint64_t v9 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
        v6[v7] = v9;
        *unint64_t v9 = *(_DWORD *)(v8 + 16);
        int v10 = *(_DWORD *)(v8 + 20);
        if (!v10) {
          int v10 = strlen(a1) - *(_DWORD *)(v8 + 16);
        }
        *(_DWORD *)(v6[v7++] + 4) = v10;
      }
      while (v7 < *(int *)(v12 + 4));
    }
  }
  else
  {
    *(_DWORD *)(a2 + 8) = 0;
    *(void *)a2 = 0;
  }
  return pg_query_exit_memory_context();
}

void pg_query_free_split_result(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    pg_query_free_error(v2);
  }
  free(*(void **)(a1 + 16));
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*(int *)(a1 + 8) >= 1)
    {
      uint64_t v4 = 0;
      do
        free(*(void **)(*(void *)a1 + 8 * v4++));
      while (v4 < *(int *)(a1 + 8));
      uint64_t v3 = *(void **)a1;
    }
    free(v3);
  }
}

uint64_t NameListToString(uint64_t a1)
{
  memset(v5, 0, sizeof(v5));
  initStringInfo((uint64_t)v5);
  if (a1 && *(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = **(void **)(a1 + 16);
    if (*(_DWORD *)v2 != 223)
    {
      if (*(_DWORD *)v2 != 351) {
        goto LABEL_14;
      }
      appendStringInfoChar((uint64_t)v5, 42);
      if (*(int *)(a1 + 4) < 2) {
        return v5[0];
      }
LABEL_8:
      uint64_t v3 = 1;
      while (1)
      {
        while (1)
        {
          uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8 * v3);
          appendStringInfoChar((uint64_t)v5, 46);
          if (*(_DWORD *)v2 != 351) {
            break;
          }
          appendStringInfoChar((uint64_t)v5, 42);
          if (++v3 >= *(int *)(a1 + 4)) {
            return v5[0];
          }
        }
        if (*(_DWORD *)v2 != 223) {
          break;
        }
        appendStringInfoString((uint64_t)v5, *(char **)(v2 + 8));
        if (++v3 >= *(int *)(a1 + 4)) {
          return v5[0];
        }
      }
LABEL_14:
      NameListToString_cold_1((_DWORD *)v2);
    }
    appendStringInfoString((uint64_t)v5, *(char **)(v2 + 8));
    if (*(int *)(a1 + 4) >= 2) {
      goto LABEL_8;
    }
  }
  return v5[0];
}

uint64_t get_collation_oid()
{
  return 0xFFFFFFFFLL;
}

void NameListToString_cold_1(_DWORD *a1)
{
}

uint64_t defGetInt32(uint64_t a1)
{
  v1 = *(_DWORD **)(a1 + 24);
  if (!v1) {
    defGetInt32_cold_1(a1);
  }
  if (*v1 != 221) {
    defGetInt32_cold_2(a1);
  }
  return v1[2];
}

void defGetInt32_cold_1(uint64_t a1)
{
  errstart(20, 0);
  errcode();
  errmsg("%s requires an integer value", v2, v3, v4, v5, v6, v7, v8, *(void *)(a1 + 16));
  errfinish("src/postgres/src_backend_commands_define.c", 76, (uint64_t)"defGetInt32");
  __break(1u);
}

void defGetInt32_cold_2(uint64_t a1)
{
  errstart(20, 0);
  errcode();
  errmsg("%s requires an integer value", v2, v3, v4, v5, v6, v7, v8, *(void *)(a1 + 16));
  errfinish("src/postgres/src_backend_commands_define.c", 85, (uint64_t)"defGetInt32");
  __break(1u);
}

void *bms_copy(int *a1)
{
  if (!a1) {
    return 0;
  }
  size_t v2 = 8 * *a1 + 8;
  uint64_t v3 = (void *)palloc(v2);
  memcpy(v3, a1, v2);
  return v3;
}

BOOL bms_equal(unsigned int *a1, unsigned int *a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (a2)
    {
      int v3 = *a2;
      if ((int)v2 >= (int)*a2) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = v2;
      }
      if ((int)v2 <= v3) {
        uint64_t v5 = a1;
      }
      else {
        uint64_t v5 = a2;
      }
      if ((int)v2 > v3) {
        int v3 = *a1;
      }
      if ((int)v2 <= (int)*a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = a1;
      }
      if ((int)v4 >= 1)
      {
        uint64_t v7 = (uint64_t *)(v6 + 2);
        uint64_t v8 = (uint64_t *)(v5 + 2);
        uint64_t v9 = v4;
        do
        {
          uint64_t v11 = *v8++;
          uint64_t v10 = v11;
          uint64_t v12 = *v7++;
          if (v10 != v12) {
            return 0;
          }
          --v9;
        }
        while (v9);
        if ((int)v4 >= v3) {
          return 1;
        }
        goto LABEL_38;
      }
      LODWORD(v4) = 0;
      if (v3 > 0)
      {
LABEL_38:
        unint64_t v26 = ~(unint64_t)v4 + v3;
        int v27 = &v6[2 * v4 + 2];
        do
        {
          uint64_t v29 = *(void *)v27;
          v27 += 2;
          uint64_t v28 = v29;
          BOOL result = v29 == 0;
          BOOL v19 = v26-- != 0;
          char v30 = v19;
        }
        while (!v28 && (v30 & 1) != 0);
        return result;
      }
      return 1;
    }
    if ((int)v2 < 1) {
      return 1;
    }
    uint64_t v21 = v2 - 1;
    char v22 = (uint64_t *)(a1 + 2);
    do
    {
      uint64_t v24 = *v22++;
      uint64_t v23 = v24;
      BOOL result = v24 == 0;
      BOOL v19 = v21-- != 0;
      char v25 = v19;
    }
    while (!v23 && (v25 & 1) != 0);
  }
  else
  {
    if (!a2) {
      return 1;
    }
    uint64_t v13 = *a2;
    if ((int)v13 < 1) {
      return 1;
    }
    uint64_t v14 = v13 - 1;
    char v15 = (uint64_t *)(a2 + 2);
    do
    {
      uint64_t v17 = *v15++;
      uint64_t v16 = v17;
      BOOL result = v17 == 0;
      BOOL v19 = v14-- != 0;
      char v20 = v19;
    }
    while (!v16 && (v20 & 1) != 0);
  }
  return result;
}

BOOL bms_is_empty(unsigned int *a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t v1 = *a1;
  if ((int)v1 < 1) {
    return 1;
  }
  uint64_t v2 = v1 - 1;
  int v3 = (uint64_t *)(a1 + 2);
  do
  {
    uint64_t v5 = *v3++;
    uint64_t v4 = v5;
    BOOL result = v5 == 0;
    BOOL v8 = v2-- != 0;
  }
  while (!v4 && v8);
  return result;
}

uint64_t bms_free(uint64_t a1)
{
  if (a1) {
    return pfree(a1);
  }
  return a1;
}

uint64_t bms_num_members(unsigned int *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *a1;
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    int v3 = (uint64_t *)(a1 + 2);
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v4 = v5;
      if (v5) {
        uint64_t v2 = pg_popcount64(v4) + v2;
      }
      --v1;
    }
    while (v1);
    return v2;
  }
  return 0;
}

uint64_t bms_first_member(_DWORD *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v1 = *a1;
  if ((int)*a1 < 1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = 0;
  for (i = (unint64_t *)(a1 + 2); ; ++i)
  {
    unint64_t v4 = *i;
    if (*i) {
      break;
    }
    v2 -= 64;
    if (!--v1) {
      return 0xFFFFFFFFLL;
    }
  }
  unint64_t *i = (v4 - 1) & v4;
  return __clz(__rbit64(v4)) - v2;
}

uint64_t bms_next_member(int *a1, int a2)
{
  if (!a1) {
    return 4294967294;
  }
  int v2 = *a1;
  int v3 = a2 + 64;
  if (a2 + 1 >= 0) {
    int v3 = a2 + 1;
  }
  LODWORD(v4) = v3 >> 6;
  if ((int)v4 >= v2) {
    return 4294967294;
  }
  unint64_t v5 = *(void *)&a1[2 * (int)v4 + 2] & (-1 << (a2 + 1 - ((_BYTE)v4 << 6)));
  if (v5) {
    return __clz(__rbit64(v5)) | (v4 << 6);
  }
  if (v4 + 1 == v2) {
    return 4294967294;
  }
  uint64_t v4 = (int)v4;
  int v7 = v2 - 1;
  BOOL v8 = a1 + 4;
  uint64_t result = 4294967294;
  while (1)
  {
    unint64_t v9 = *(void *)&v8[2 * v4];
    if (v9) {
      break;
    }
    if (v7 == ++v4) {
      return result;
    }
  }
  return __clz(__rbit64(v9)) | ((v4 + 1) << 6);
}

void copyObjectImpl(int *a1)
{
  if (a1)
  {
    check_stack_depth();
    switch(*a1)
    {
      case 9:
        _copyPlan((uint64_t)a1, v2);
        return;
      case 10:
        _copyResult((uint64_t)a1, v2);
        return;
      case 11:
        _copyProjectSet((uint64_t)a1, v2);
        return;
      case 12:
        _copyModifyTable((uint64_t)a1, v2);
        return;
      case 13:
        _copyAppend((uint64_t)a1, v2);
        return;
      case 14:
        _copyMergeAppend((uint64_t)a1, v2);
        return;
      case 15:
        _copyRecursiveUnion((uint64_t)a1, v2);
        return;
      case 16:
        _copyBitmapAnd((uint64_t)a1, v2);
        return;
      case 17:
        _copyBitmapOr((uint64_t)a1, v2);
        return;
      case 18:
        _copyScan((uint64_t)a1, v2);
        return;
      case 19:
        _copySeqScan((uint64_t)a1, v2);
        return;
      case 20:
        _copySampleScan((uint64_t)a1, v2);
        return;
      case 21:
        _copyIndexScan((uint64_t)a1, v2);
        return;
      case 22:
        _copyIndexOnlyScan((uint64_t)a1, v2);
        return;
      case 23:
        _copyBitmapIndexScan((uint64_t)a1, v2);
        return;
      case 24:
        _copyBitmapHeapScan((uint64_t)a1, v2);
        return;
      case 25:
        _copyTidScan((uint64_t)a1, v2);
        return;
      case 26:
        _copySubqueryScan((uint64_t)a1, v2);
        return;
      case 27:
        _copyFunctionScan((uint64_t)a1, v2);
        return;
      case 28:
        _copyValuesScan((uint64_t)a1, v2);
        return;
      case 29:
        _copyTableFuncScan((uint64_t)a1, v2);
        return;
      case 30:
        _copyCteScan((uint64_t)a1, v2);
        return;
      case 31:
        _copyNamedTuplestoreScan((uint64_t)a1, v2);
        return;
      case 32:
        _copyWorkTableScan((uint64_t)a1, v2);
        return;
      case 33:
        _copyForeignScan((uint64_t)a1, v2);
        return;
      case 34:
        _copyCustomScan((uint64_t)a1, v2);
        return;
      case 35:
        _copyJoin((uint64_t)a1, v2);
        return;
      case 36:
        _copyNestLoop((uint64_t)a1, v2);
        return;
      case 37:
        _copyMergeJoin((uint64_t)a1, v2);
        return;
      case 38:
        _copyHashJoin((uint64_t)a1, v2);
        return;
      case 39:
        _copyMaterial((uint64_t)a1, v2);
        return;
      case 40:
        _copySort((uint64_t)a1, v2);
        return;
      case 41:
        _copyIncrementalSort((uint64_t)a1, v2);
        return;
      case 42:
        _copyGroup((uint64_t)a1, v2);
        return;
      case 43:
        _copyAgg((uint64_t)a1, v2);
        return;
      case 44:
        _copyWindowAgg((uint64_t)a1, v2);
        return;
      case 45:
        _copyUnique((uint64_t)a1, v2);
        return;
      case 46:
        _copyGather((uint64_t)a1, v2);
        return;
      case 47:
        _copyGatherMerge((uint64_t)a1, v2);
        return;
      case 48:
        _copyHash((uint64_t)a1, v2);
        return;
      case 49:
        _copySetOp((uint64_t)a1, v2);
        return;
      case 50:
        _copyLockRows((uint64_t)a1, v2);
        return;
      case 51:
        _copyLimit((uint64_t)a1, v2);
        return;
      case 52:
        _copyNestLoopParam((uint64_t)a1, v2);
        return;
      case 53:
        _copyPlanRowMark((uint64_t)a1, v2);
        return;
      case 54:
        _copyPartitionPruneInfo((uint64_t)a1, v2);
        return;
      case 55:
        _copyPartitionedRelPruneInfo((uint64_t)a1, v2);
        return;
      case 56:
        _copyPartitionPruneStepOp((uint64_t)a1, v2);
        return;
      case 57:
        _copyPartitionPruneStepCombine((uint64_t)a1, v2);
        return;
      case 58:
        int v3 = (uint64_t *)CurrentMemoryContext(v2);
        uint64_t v4 = (_DWORD *)MemoryContextAllocZero(*v3, 0xCuLL);
        int v5 = 58;
        goto LABEL_649;
      case 102:
        _copyAlias((uint64_t)a1, v2);
        return;
      case 103:
        _copyRangeVar((uint64_t)a1, v2);
        return;
      case 104:
        _copyTableFunc((uint64_t)a1, v2);
        return;
      case 106:
        _copyVar((uint64_t)a1, v2);
        return;
      case 107:
        _copyConst((uint64_t)a1, v2);
        return;
      case 108:
        _copyParam(a1, v2);
        return;
      case 109:
        _copyAggref((uint64_t)a1, v2);
        return;
      case 110:
        _copyGroupingFunc((uint64_t)a1, v2);
        return;
      case 111:
        _copyWindowFunc((uint64_t)a1, v2);
        return;
      case 112:
        _copySubscriptingRef((uint64_t)a1, v2);
        return;
      case 113:
        _copyFuncExpr((uint64_t)a1, v2);
        return;
      case 114:
        _copyNamedArgExpr((uint64_t)a1, v2);
        return;
      case 115:
        _copyOpExpr((uint64_t)a1, v2);
        return;
      case 116:
        _copyDistinctExpr((uint64_t)a1, v2);
        return;
      case 117:
        _copyNullIfExpr((uint64_t)a1, v2);
        return;
      case 118:
        _copyScalarArrayOpExpr((uint64_t)a1, v2);
        return;
      case 119:
        _copyBoolExpr((uint64_t)a1, v2);
        return;
      case 120:
        _copySubLink((uint64_t)a1, v2);
        return;
      case 121:
        _copySubPlan((uint64_t)a1, v2);
        return;
      case 122:
        _copyAlternativeSubPlan((uint64_t)a1, v2);
        return;
      case 123:
        _copyFieldSelect((uint64_t)a1, v2);
        return;
      case 124:
        _copyFieldStore((uint64_t)a1, v2);
        return;
      case 125:
        _copyRelabelType((uint64_t)a1, v2);
        return;
      case 126:
        _copyCoerceViaIO((uint64_t)a1, v2);
        return;
      case 127:
        _copyArrayCoerceExpr((uint64_t)a1, v2);
        return;
      case 128:
        _copyConvertRowtypeExpr((uint64_t)a1, v2);
        return;
      case 129:
        _copyCollateExpr((uint64_t)a1, v2);
        return;
      case 130:
        _copyCaseExpr((uint64_t)a1, v2);
        return;
      case 131:
        _copyCaseWhen((uint64_t)a1, v2);
        return;
      case 132:
        _copyCaseTestExpr(a1, v2);
        return;
      case 133:
        _copyArrayExpr((uint64_t)a1, v2);
        return;
      case 134:
        _copyRowExpr((uint64_t)a1, v2);
        return;
      case 135:
        _copyRowCompareExpr((uint64_t)a1, v2);
        return;
      case 136:
        _copyCoalesceExpr((uint64_t)a1, v2);
        return;
      case 137:
        _copyMinMaxExpr((uint64_t)a1, v2);
        return;
      case 138:
        _copySQLValueFunction(a1, v2);
        return;
      case 139:
        _copyXmlExpr((uint64_t)a1, v2);
        return;
      case 140:
        _copyNullTest((uint64_t)a1, v2);
        return;
      case 141:
        _copyBooleanTest((uint64_t)a1, v2);
        return;
      case 142:
        _copyCoerceToDomain((uint64_t)a1, v2);
        return;
      case 143:
        _copyCoerceToDomainValue(a1, v2);
        return;
      case 144:
        _copySetToDefault(a1, v2);
        return;
      case 145:
        _copyCurrentOfExpr((uint64_t)a1, v2);
        return;
      case 146:
        uint64_t v6 = (uint64_t *)CurrentMemoryContext(v2);
        uint64_t v4 = (_DWORD *)MemoryContextAllocZero(*v6, 0xCuLL);
        int v5 = 146;
        goto LABEL_649;
      case 147:
        _copyInferenceElem((uint64_t)a1, v2);
        return;
      case 148:
        _copyTargetEntry((uint64_t)a1, v2);
        return;
      case 149:
        int v7 = (uint64_t *)CurrentMemoryContext(v2);
        BOOL v8 = (_DWORD *)MemoryContextAllocZeroAligned(*v7, 8uLL);
        int v9 = 149;
        goto LABEL_433;
      case 150:
        _copyJoinExpr((uint64_t)a1, v2);
        return;
      case 151:
        _copyFromExpr((uint64_t)a1, v2);
        return;
      case 152:
        _copyOnConflictExpr((uint64_t)a1, v2);
        return;
      case 153:
        _copyIntoClause((uint64_t)a1, v2);
        return;
      case 203:
        _copyPathKey((uint64_t)a1, v2);
        return;
      case 205:
        _copyRestrictInfo((uint64_t)a1, v2);
        return;
      case 207:
        _copyPlaceHolderVar((uint64_t)a1, v2);
        return;
      case 208:
        _copySpecialJoinInfo((uint64_t)a1, v2);
        return;
      case 209:
        _copyAppendRelInfo((uint64_t)a1, v2);
        return;
      case 210:
        _copyPlaceHolderInfo((uint64_t)a1, v2);
        return;
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
        _copyValue(a1, v2);
        return;
      case 226:
        list_copy_deep(a1);
        return;
      case 227:
      case 228:
        list_copy((const void **)a1);
        return;
      case 229:
        _copyExtensibleNode((uint64_t)a1);
        return;
      case 230:
        _copyRawStmt((uint64_t)a1, v2);
        return;
      case 231:
        _copyQuery((uint64_t)a1, v2);
        return;
      case 232:
        _copyPlannedStmt((uint64_t)a1, v2);
        return;
      case 233:
        _copyInsertStmt((uint64_t)a1, v2);
        return;
      case 234:
        _copyDeleteStmt(a1, v2);
        return;
      case 235:
        _copyUpdateStmt(a1, v2);
        return;
      case 236:
        _copySelectStmt((uint64_t)a1, v2);
        return;
      case 237:
        _copyAlterTableStmt((uint64_t)a1, v2);
        return;
      case 238:
        _copyAlterTableCmd((uint64_t)a1, v2);
        return;
      case 239:
        _copyAlterDomainStmt((uint64_t)a1, v2);
        return;
      case 240:
        _copySetOperationStmt((uint64_t)a1, v2);
        return;
      case 241:
        _copyGrantStmt((uint64_t)a1, v2);
        return;
      case 242:
        _copyGrantRoleStmt((uint64_t)a1, v2);
        return;
      case 243:
        _copyAlterDefaultPrivilegesStmt((uint64_t)a1, v2);
        return;
      case 244:
        _copyClosePortalStmt((uint64_t)a1, v2);
        return;
      case 245:
        _copyClusterStmt((uint64_t)a1, v2);
        return;
      case 246:
        _copyCopyStmt((uint64_t)a1, v2);
        return;
      case 247:
        _copyCreateStmt((uint64_t)a1, v2);
        return;
      case 248:
        _copyDefineStmt((uint64_t)a1, v2);
        return;
      case 249:
        _copyDropStmt((uint64_t)a1, v2);
        return;
      case 250:
        _copyTruncateStmt((uint64_t)a1, v2);
        return;
      case 251:
        _copyCommentStmt((uint64_t)a1, v2);
        return;
      case 252:
        _copyFetchStmt((uint64_t)a1, v2);
        return;
      case 253:
        _copyIndexStmt((uint64_t)a1, v2);
        return;
      case 254:
        _copyCreateFunctionStmt((uint64_t)a1, v2);
        return;
      case 255:
        _copyAlterFunctionStmt((uint64_t)a1, v2);
        return;
      case 256:
        _copyDoStmt((uint64_t)a1, v2);
        return;
      case 257:
        _copyRenameStmt((uint64_t)a1, v2);
        return;
      case 258:
        _copyRuleStmt((uint64_t)a1, v2);
        return;
      case 259:
        _copyNotifyStmt((uint64_t)a1, v2);
        return;
      case 260:
        _copyListenStmt((uint64_t)a1, v2);
        return;
      case 261:
        _copyUnlistenStmt((uint64_t)a1, v2);
        return;
      case 262:
        _copyTransactionStmt((uint64_t)a1, v2);
        return;
      case 263:
        _copyViewStmt((uint64_t)a1, v2);
        return;
      case 264:
        _copyLoadStmt((uint64_t)a1, v2);
        return;
      case 265:
        _copyCreateDomainStmt(a1, v2);
        return;
      case 266:
        _copyCreatedbStmt((uint64_t)a1, v2);
        return;
      case 267:
        _copyDropdbStmt((uint64_t)a1, v2);
        return;
      case 268:
        _copyVacuumStmt((uint64_t)a1, v2);
        return;
      case 269:
        _copyExplainStmt((uint64_t)a1, v2);
        return;
      case 270:
        _copyCreateTableAsStmt((uint64_t)a1, v2);
        return;
      case 271:
        _copyCreateSeqStmt((uint64_t)a1, v2);
        return;
      case 272:
        _copyAlterSeqStmt((uint64_t)a1, v2);
        return;
      case 273:
        _copyVariableSetStmt((uint64_t)a1, v2);
        return;
      case 274:
        _copyVariableShowStmt((uint64_t)a1, v2);
        return;
      case 275:
        uint64_t v10 = (uint64_t *)CurrentMemoryContext(v2);
        BOOL v8 = (_DWORD *)MemoryContextAllocZeroAligned(*v10, 8uLL);
        int v9 = 275;
LABEL_433:
        *BOOL v8 = v9;
        v8[1] = a1[1];
        return;
      case 276:
        _copyCreateTrigStmt((uint64_t)a1, v2);
        return;
      case 277:
        _copyCreatePLangStmt((uint64_t)a1, v2);
        return;
      case 278:
        _copyCreateRoleStmt((uint64_t)a1, v2);
        return;
      case 279:
        _copyAlterRoleStmt((uint64_t)a1, v2);
        return;
      case 280:
        _copyDropRoleStmt((uint64_t)a1, v2);
        return;
      case 281:
        _copyLockStmt((uint64_t)a1, v2);
        return;
      case 282:
        _copyConstraintsSetStmt((uint64_t)a1, v2);
        return;
      case 283:
        _copyReindexStmt((uint64_t)a1, v2);
        return;
      case 284:
        uint64_t v11 = (uint64_t *)CurrentMemoryContext(v2);
        uint64_t v12 = (_DWORD *)MemoryContextAllocZero(*v11, 4uLL);
        int v13 = 284;
        goto LABEL_657;
      case 285:
        _copyCreateSchemaStmt((uint64_t)a1, v2);
        return;
      case 286:
        _copyAlterDatabaseStmt((uint64_t)a1, v2);
        return;
      case 287:
        _copyAlterDatabaseSetStmt((uint64_t)a1, v2);
        return;
      case 288:
        _copyAlterRoleSetStmt(a1, v2);
        return;
      case 289:
        _copyCreateConversionStmt((uint64_t)a1, v2);
        return;
      case 290:
        _copyCreateCastStmt((uint64_t)a1, v2);
        return;
      case 291:
        _copyCreateOpClassStmt((uint64_t)a1, v2);
        return;
      case 292:
        _copyCreateOpFamilyStmt((uint64_t)a1, v2);
        return;
      case 293:
        _copyAlterOpFamilyStmt((uint64_t)a1, v2);
        return;
      case 294:
        _copyPrepareStmt(a1, v2);
        return;
      case 295:
        _copyExecuteStmt((uint64_t)a1, v2);
        return;
      case 296:
        _copyDeallocateStmt((uint64_t)a1, v2);
        return;
      case 297:
        _copyDeclareCursorStmt((uint64_t)a1, v2);
        return;
      case 298:
        _copyCreateTableSpaceStmt(a1, v2);
        return;
      case 299:
        _copyDropTableSpaceStmt((uint64_t)a1, v2);
        return;
      case 300:
        _copyAlterObjectDependsStmt((uint64_t)a1, v2);
        return;
      case 301:
        _copyAlterObjectSchemaStmt((uint64_t)a1, v2);
        return;
      case 302:
        _copyAlterOwnerStmt((uint64_t)a1, v2);
        return;
      case 303:
        _copyAlterOperatorStmt((uint64_t)a1, v2);
        return;
      case 304:
        _copyAlterTypeStmt((uint64_t)a1, v2);
        return;
      case 305:
        _copyDropOwnedStmt((uint64_t)a1, v2);
        return;
      case 306:
        _copyReassignOwnedStmt((uint64_t)a1, v2);
        return;
      case 307:
        _copyCompositeTypeStmt((uint64_t)a1, v2);
        return;
      case 308:
        _copyCreateEnumStmt((uint64_t)a1, v2);
        return;
      case 309:
        _copyCreateRangeStmt((uint64_t)a1, v2);
        return;
      case 310:
        _copyAlterEnumStmt((uint64_t)a1, v2);
        return;
      case 311:
        _copyAlterTSDictionaryStmt((uint64_t)a1, v2);
        return;
      case 312:
        _copyAlterTSConfigurationStmt((uint64_t)a1, v2);
        return;
      case 313:
        _copyCreateFdwStmt(a1, v2);
        return;
      case 314:
        _copyAlterFdwStmt(a1, v2);
        return;
      case 315:
        _copyCreateForeignServerStmt((uint64_t)a1, v2);
        return;
      case 316:
        _copyAlterForeignServerStmt((uint64_t)a1, v2);
        return;
      case 317:
        _copyCreateUserMappingStmt((uint64_t)a1, v2);
        return;
      case 318:
        _copyAlterUserMappingStmt(a1, v2);
        return;
      case 319:
        _copyDropUserMappingStmt((uint64_t)a1, v2);
        return;
      case 320:
        _copyAlterTableSpaceOptionsStmt((uint64_t)a1, v2);
        return;
      case 321:
        _copyAlterTableMoveAllStmt((uint64_t)a1, v2);
        return;
      case 322:
        _copySecLabelStmt((uint64_t)a1, v2);
        return;
      case 323:
        _copyCreateForeignTableStmt((uint64_t)a1, v2);
        return;
      case 324:
        _copyImportForeignSchemaStmt((uint64_t)a1, v2);
        return;
      case 325:
        _copyCreateExtensionStmt((uint64_t)a1, v2);
        return;
      case 326:
        _copyAlterExtensionStmt((uint64_t)a1, v2);
        return;
      case 327:
        _copyAlterExtensionContentsStmt((uint64_t)a1, v2);
        return;
      case 328:
        _copyCreateEventTrigStmt(a1, v2);
        return;
      case 329:
        _copyAlterEventTrigStmt((uint64_t)a1, v2);
        return;
      case 330:
        _copyRefreshMatViewStmt((uint64_t)a1, v2);
        return;
      case 331:
        _copyReplicaIdentityStmt((uint64_t)a1, v2);
        return;
      case 332:
        _copyAlterSystemStmt((uint64_t)a1, v2);
        return;
      case 333:
        _copyCreatePolicyStmt((uint64_t)a1, v2);
        return;
      case 334:
        _copyAlterPolicyStmt(a1, v2);
        return;
      case 335:
        _copyCreateTransformStmt((uint64_t)a1, v2);
        return;
      case 336:
        _copyCreateAmStmt((uint64_t)a1, v2);
        return;
      case 337:
        _copyCreatePublicationStmt((uint64_t)a1, v2);
        return;
      case 338:
        _copyAlterPublicationStmt((uint64_t)a1, v2);
        return;
      case 339:
        _copyCreateSubscriptionStmt(a1, v2);
        return;
      case 340:
        _copyAlterSubscriptionStmt((uint64_t)a1, v2);
        return;
      case 341:
        _copyDropSubscriptionStmt((uint64_t)a1, v2);
        return;
      case 342:
        _copyCreateStatsStmt((uint64_t)a1, v2);
        return;
      case 343:
        _copyAlterCollationStmt((uint64_t)a1, v2);
        return;
      case 344:
        _copyCallStmt((uint64_t)a1, v2);
        return;
      case 345:
        _copyAlterStatsStmt((uint64_t)a1, v2);
        return;
      case 346:
        _copyAExpr((uint64_t)a1, v2);
        return;
      case 347:
        _copyColumnRef((uint64_t)a1, v2);
        return;
      case 348:
        uint64_t v14 = (uint64_t *)CurrentMemoryContext(v2);
        uint64_t v4 = (_DWORD *)MemoryContextAllocZero(*v14, 0xCuLL);
        int v5 = 348;
LABEL_649:
        *uint64_t v4 = v5;
        v4[1] = a1[1];
        v4[2] = a1[2];
        return;
      case 349:
        _copyAConst((uint64_t)a1, v2);
        return;
      case 350:
        _copyFuncCall((uint64_t)a1, v2);
        return;
      case 351:
        char v15 = (uint64_t *)CurrentMemoryContext(v2);
        uint64_t v12 = (_DWORD *)MemoryContextAllocZero(*v15, 4uLL);
        int v13 = 351;
LABEL_657:
        *uint64_t v12 = v13;
        break;
      case 352:
        _copyAIndices((uint64_t)a1, v2);
        break;
      case 353:
        _copyA_Indirection((uint64_t)a1, v2);
        break;
      case 354:
        _copyA_ArrayExpr((uint64_t)a1, v2);
        break;
      case 355:
        _copyResTarget((uint64_t)a1, v2);
        break;
      case 356:
        _copyMultiAssignRef((uint64_t)a1, v2);
        break;
      case 357:
        _copyTypeCast((uint64_t)a1, v2);
        break;
      case 358:
        _copyCollateClause((uint64_t)a1, v2);
        break;
      case 359:
        _copySortBy((uint64_t)a1, v2);
        break;
      case 360:
        _copyWindowDef((uint64_t)a1, v2);
        break;
      case 361:
        _copyRangeSubselect((uint64_t)a1, v2);
        break;
      case 362:
        _copyRangeFunction((uint64_t)a1, v2);
        break;
      case 363:
        _copyRangeTableSample((uint64_t)a1, v2);
        break;
      case 364:
        _copyRangeTableFunc((uint64_t)a1, v2);
        break;
      case 365:
        _copyRangeTableFuncCol((uint64_t)a1, v2);
        break;
      case 366:
        _copyTypeName((uint64_t)a1, v2);
        break;
      case 367:
        _copyColumnDef((uint64_t)a1, v2);
        break;
      case 368:
        _copyIndexElem((uint64_t)a1, v2);
        break;
      case 369:
        _copyConstraint((uint64_t)a1, v2);
        break;
      case 370:
        _copyDefElem((uint64_t)a1, v2);
        break;
      case 371:
        _copyRangeTblEntry((uint64_t)a1, v2);
        break;
      case 372:
        _copyRangeTblFunction((uint64_t)a1, v2);
        break;
      case 373:
        _copyTableSampleClause((uint64_t)a1, v2);
        break;
      case 374:
        _copyWithCheckOption((uint64_t)a1, v2);
        break;
      case 375:
        _copySortGroupClause((uint64_t)a1, v2);
        break;
      case 376:
        _copyGroupingSet((uint64_t)a1, v2);
        break;
      case 377:
        _copyWindowClause((uint64_t)a1, v2);
        break;
      case 378:
        _copyObjectWithArgs((uint64_t)a1, v2);
        break;
      case 379:
        _copyAccessPriv((uint64_t)a1, v2);
        break;
      case 380:
        _copyCreateOpClassItem((uint64_t)a1, v2);
        break;
      case 381:
        _copyTableLikeClause((uint64_t)a1, v2);
        break;
      case 382:
        _copyFunctionParameter((uint64_t)a1, v2);
        break;
      case 383:
        _copyLockingClause((uint64_t)a1, v2);
        break;
      case 384:
        _copyRowMarkClause((uint64_t)a1, v2);
        break;
      case 385:
        _copyXmlSerialize((uint64_t)a1, v2);
        break;
      case 386:
        _copyWithClause((uint64_t)a1, v2);
        break;
      case 387:
        _copyInferClause((uint64_t)a1, v2);
        break;
      case 388:
        _copyOnConflictClause((uint64_t)a1, v2);
        break;
      case 389:
        _copyCommonTableExpr((uint64_t)a1, v2);
        break;
      case 390:
        _copyRoleSpec((uint64_t)a1, v2);
        break;
      case 391:
        _copyTriggerTransition((uint64_t)a1, v2);
        break;
      case 392:
        _copyPartitionElem((uint64_t)a1, v2);
        break;
      case 393:
        _copyPartitionSpec((uint64_t)a1, v2);
        break;
      case 394:
        _copyPartitionBoundSpec((uint64_t)a1, v2);
        break;
      case 395:
        _copyPartitionRangeDatum((uint64_t)a1, v2);
        break;
      case 396:
        _copyPartitionCmd((uint64_t)a1, v2);
        break;
      case 397:
        _copyVacuumRelation((uint64_t)a1, v2);
        break;
      case 415:
        _copyForeignKeyCacheInfo((uint64_t)a1, v2);
        break;
      default:
        copyObjectImpl_cold_1();
    }
  }
}

unint64_t _copyPlannedStmt(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x88uLL);
  *(_DWORD *)unint64_t v4 = 232;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(v4 + 17) = *(unsigned char *)(a1 + 17);
  *(unsigned char *)(v4 + 18) = *(unsigned char *)(a1 + 18);
  *(unsigned char *)(v4 + 19) = *(unsigned char *)(a1 + 19);
  *(unsigned char *)(v4 + 2errstart(20, 0) = *(unsigned char *)(a1 + 20);
  *(unsigned char *)(v4 + 21) = *(unsigned char *)(a1 + 21);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = bms_copy(*(int **)(a1 + 80));
  *(void *)(v4 + 88) = copyObjectImpl(*(void *)(a1 + 88));
  *(void *)(v4 + 96) = copyObjectImpl(*(void *)(a1 + 96));
  *(void *)(v4 + 104) = copyObjectImpl(*(void *)(a1 + 104));
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  *(void *)(v4 + 12errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 120));
  *(_DWORD *)(v4 + 128) = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(v4 + 132) = *(_DWORD *)(a1 + 132);
  return v4;
}

unint64_t _copyPlan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x68uLL);
  *(_DWORD *)unint64_t v4 = 9;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  return v4;
}

unint64_t _copyResult(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x70uLL);
  *(_DWORD *)unint64_t v4 = 10;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(void *)(v4 + 104) = copyObjectImpl(*(void *)(a1 + 104));
  return v4;
}

unint64_t _copyProjectSet(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x68uLL);
  *(_DWORD *)unint64_t v4 = 11;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  return v4;
}

unint64_t _copyModifyTable(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xF0uLL);
  *(_DWORD *)unint64_t v4 = 12;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(unsigned char *)(v4 + 108) = *(unsigned char *)(a1 + 108);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(v4 + 116) = *(_DWORD *)(a1 + 116);
  *(unsigned char *)(v4 + 12errstart(20, 0) = *(unsigned char *)(a1 + 120);
  *(void *)(v4 + 128) = copyObjectImpl(*(void *)(a1 + 128));
  *(_DWORD *)(v4 + 136) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(v4 + 14errstart(20, 0) = *(_DWORD *)(a1 + 140);
  *(void *)(v4 + 144) = copyObjectImpl(*(void *)(a1 + 144));
  *(void *)(v4 + 152) = copyObjectImpl(*(void *)(a1 + 152));
  *(void *)(v4 + 16errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 160));
  *(void *)(v4 + 168) = copyObjectImpl(*(void *)(a1 + 168));
  *(void *)(v4 + 176) = bms_copy(*(int **)(a1 + 176));
  *(void *)(v4 + 184) = copyObjectImpl(*(void *)(a1 + 184));
  *(_DWORD *)(v4 + 192) = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(v4 + 196) = *(_DWORD *)(a1 + 196);
  *(void *)(v4 + 20errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 200));
  *(void *)(v4 + 208) = copyObjectImpl(*(void *)(a1 + 208));
  *(void *)(v4 + 216) = copyObjectImpl(*(void *)(a1 + 216));
  *(_DWORD *)(v4 + 224) = *(_DWORD *)(a1 + 224);
  *(void *)(v4 + 232) = copyObjectImpl(*(void *)(a1 + 232));
  return v4;
}

unint64_t _copyAppend(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x88uLL);
  *(_DWORD *)unint64_t v4 = 13;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(void *)(v4 + 104) = bms_copy(*(int **)(a1 + 104));
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  *(_DWORD *)(v4 + 12errstart(20, 0) = *(_DWORD *)(a1 + 120);
  *(void *)(v4 + 128) = copyObjectImpl(*(void *)(a1 + 128));
  return v4;
}

unint64_t _copyMergeAppend(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xA8uLL);
  *(_DWORD *)unint64_t v4 = 14;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(void *)(v4 + 104) = bms_copy(*(int **)(a1 + 104));
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  *(_DWORD *)(v4 + 12errstart(20, 0) = *(_DWORD *)(a1 + 120);
  size_t v5 = 2 * *(int *)(a1 + 120);
  uint64_t v6 = (void *)palloc(v5);
  *(void *)(v4 + 128) = v6;
  memcpy(v6, *(const void **)(a1 + 128), v5);
  size_t v7 = 4 * *(int *)(a1 + 120);
  BOOL v8 = (void *)palloc(v7);
  *(void *)(v4 + 136) = v8;
  memcpy(v8, *(const void **)(a1 + 136), v7);
  size_t v9 = 4 * *(int *)(a1 + 120);
  uint64_t v10 = (void *)palloc(v9);
  *(void *)(v4 + 144) = v10;
  memcpy(v10, *(const void **)(a1 + 144), v9);
  size_t v11 = *(int *)(a1 + 120);
  uint64_t v12 = (void *)palloc(v11);
  *(void *)(v4 + 152) = v12;
  memcpy(v12, *(const void **)(a1 + 152), v11);
  *(void *)(v4 + 16errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 160));
  return v4;
}

unint64_t _copyRecursiveUnion(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x90uLL);
  *(_DWORD *)unint64_t v4 = 15;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 108) = *(_DWORD *)(a1 + 108);
  uint64_t v5 = *(unsigned int *)(a1 + 108);
  if ((int)v5 >= 1)
  {
    size_t v6 = 2 * v5;
    size_t v7 = (void *)palloc(2 * v5);
    *(void *)(v4 + 112) = v7;
    memcpy(v7, *(const void **)(a1 + 112), v6);
    size_t v8 = 4 * *(int *)(a1 + 108);
    size_t v9 = (void *)palloc(v8);
    *(void *)(v4 + 12errstart(20, 0) = v9;
    memcpy(v9, *(const void **)(a1 + 120), v8);
    size_t v10 = 4 * *(int *)(a1 + 108);
    size_t v11 = (void *)palloc(v10);
    *(void *)(v4 + 128) = v11;
    memcpy(v11, *(const void **)(a1 + 128), v10);
  }
  *(void *)(v4 + 136) = *(void *)(a1 + 136);
  return v4;
}

unint64_t _copyBitmapAnd(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x70uLL);
  *(_DWORD *)unint64_t v4 = 16;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(void *)(v4 + 104) = copyObjectImpl(*(void *)(a1 + 104));
  return v4;
}

unint64_t _copyBitmapOr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 17;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(unsigned char *)(v4 + 104) = *(unsigned char *)(a1 + 104);
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  return v4;
}

unint64_t _copyScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x70uLL);
  *(_DWORD *)unint64_t v4 = 18;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  return v4;
}

unint64_t _copyGather(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x80uLL);
  *(_DWORD *)unint64_t v4 = 46;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 108) = *(_DWORD *)(a1 + 108);
  *(unsigned char *)(v4 + 112) = *(unsigned char *)(a1 + 112);
  *(unsigned char *)(v4 + 113) = *(unsigned char *)(a1 + 113);
  *(void *)(v4 + 12errstart(20, 0) = bms_copy(*(int **)(a1 + 120));
  return v4;
}

unint64_t _copyGatherMerge(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xA0uLL);
  *(_DWORD *)unint64_t v4 = 47;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 108) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  size_t v5 = 2 * *(int *)(a1 + 112);
  size_t v6 = (void *)palloc(v5);
  *(void *)(v4 + 12errstart(20, 0) = v6;
  memcpy(v6, *(const void **)(a1 + 120), v5);
  size_t v7 = 4 * *(int *)(a1 + 112);
  size_t v8 = (void *)palloc(v7);
  *(void *)(v4 + 128) = v8;
  memcpy(v8, *(const void **)(a1 + 128), v7);
  size_t v9 = 4 * *(int *)(a1 + 112);
  size_t v10 = (void *)palloc(v9);
  *(void *)(v4 + 136) = v10;
  memcpy(v10, *(const void **)(a1 + 136), v9);
  size_t v11 = *(int *)(a1 + 112);
  uint64_t v12 = (void *)palloc(v11);
  *(void *)(v4 + 144) = v12;
  memcpy(v12, *(const void **)(a1 + 144), v11);
  *(void *)(v4 + 152) = bms_copy(*(int **)(a1 + 152));
  return v4;
}

unint64_t _copySeqScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x70uLL);
  *(_DWORD *)unint64_t v4 = 19;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  return v4;
}

unint64_t _copySampleScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 20;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  return v4;
}

unint64_t _copyIndexScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xA8uLL);
  *(_DWORD *)unint64_t v4 = 21;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(void *)(v4 + 12errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 120));
  *(void *)(v4 + 128) = copyObjectImpl(*(void *)(a1 + 128));
  *(void *)(v4 + 136) = copyObjectImpl(*(void *)(a1 + 136));
  *(void *)(v4 + 144) = copyObjectImpl(*(void *)(a1 + 144));
  *(void *)(v4 + 152) = copyObjectImpl(*(void *)(a1 + 152));
  *(_DWORD *)(v4 + 16errstart(20, 0) = *(_DWORD *)(a1 + 160);
  return v4;
}

unint64_t _copyIndexOnlyScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x98uLL);
  *(_DWORD *)unint64_t v4 = 22;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(void *)(v4 + 12errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 120));
  *(void *)(v4 + 128) = copyObjectImpl(*(void *)(a1 + 128));
  *(void *)(v4 + 136) = copyObjectImpl(*(void *)(a1 + 136));
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a1 + 144);
  return v4;
}

unint64_t _copyBitmapIndexScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x88uLL);
  *(_DWORD *)unint64_t v4 = 23;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(unsigned char *)(v4 + 116) = *(unsigned char *)(a1 + 116);
  *(void *)(v4 + 12errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 120));
  *(void *)(v4 + 128) = copyObjectImpl(*(void *)(a1 + 128));
  return v4;
}

unint64_t _copyBitmapHeapScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 24;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  return v4;
}

unint64_t _copyTidScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 25;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  return v4;
}

unint64_t _copySubqueryScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 26;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  return v4;
}

unint64_t _copyFunctionScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x80uLL);
  *(_DWORD *)unint64_t v4 = 27;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  *(unsigned char *)(v4 + 12errstart(20, 0) = *(unsigned char *)(a1 + 120);
  return v4;
}

unint64_t _copyTableFuncScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 29;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  return v4;
}

unint64_t _copyValuesScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 28;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  return v4;
}

unint64_t _copyCteScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 30;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(v4 + 116) = *(_DWORD *)(a1 + 116);
  return v4;
}

unint64_t _copyNamedTuplestoreScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 31;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  size_t v5 = *(const char **)(a1 + 112);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 112) = v5;
  return v4;
}

unint64_t _copyWorkTableScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 32;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  return v4;
}

unint64_t _copyForeignScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xA8uLL);
  *(_DWORD *)unint64_t v4 = 33;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(v4 + 116) = *(_DWORD *)(a1 + 116);
  *(void *)(v4 + 12errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 120));
  *(void *)(v4 + 128) = copyObjectImpl(*(void *)(a1 + 128));
  *(void *)(v4 + 136) = copyObjectImpl(*(void *)(a1 + 136));
  *(void *)(v4 + 144) = copyObjectImpl(*(void *)(a1 + 144));
  *(void *)(v4 + 152) = bms_copy(*(int **)(a1 + 152));
  *(unsigned char *)(v4 + 16errstart(20, 0) = *(unsigned char *)(a1 + 160);
  return v4;
}

unint64_t _copyCustomScan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xA8uLL);
  *(_DWORD *)unint64_t v4 = 34;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(void *)(v4 + 12errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 120));
  *(void *)(v4 + 128) = copyObjectImpl(*(void *)(a1 + 128));
  *(void *)(v4 + 136) = copyObjectImpl(*(void *)(a1 + 136));
  *(void *)(v4 + 144) = copyObjectImpl(*(void *)(a1 + 144));
  *(void *)(v4 + 152) = bms_copy(*(int **)(a1 + 152));
  *(void *)(v4 + 16errstart(20, 0) = *(void *)(a1 + 160);
  return v4;
}

unint64_t _copyJoin(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 35;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(unsigned char *)(v4 + 108) = *(unsigned char *)(a1 + 108);
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  return v4;
}

unint64_t _copyNestLoop(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x80uLL);
  *(_DWORD *)unint64_t v4 = 36;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(unsigned char *)(v4 + 108) = *(unsigned char *)(a1 + 108);
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  *(void *)(v4 + 12errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 120));
  return v4;
}

unint64_t _copyMergeJoin(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xA8uLL);
  *(_DWORD *)unint64_t v4 = 37;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(unsigned char *)(v4 + 108) = *(unsigned char *)(a1 + 108);
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  *(unsigned char *)(v4 + 12errstart(20, 0) = *(unsigned char *)(a1 + 120);
  *(void *)(v4 + 128) = copyObjectImpl(*(void *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 128);
  if (v5)
  {
    size_t v6 = *(unsigned int *)(v5 + 4);
    if ((int)v6 >= 1)
    {
      size_t v7 = (void *)palloc(4 * v6);
      *(void *)(v4 + 136) = v7;
      memcpy(v7, *(const void **)(a1 + 136), 4 * v6);
      size_t v8 = (void *)palloc(4 * v6);
      *(void *)(v4 + 144) = v8;
      memcpy(v8, *(const void **)(a1 + 144), 4 * v6);
      size_t v9 = (void *)palloc(4 * v6);
      *(void *)(v4 + 152) = v9;
      memcpy(v9, *(const void **)(a1 + 152), 4 * v6);
      size_t v10 = (void *)palloc(v6);
      *(void *)(v4 + 16errstart(20, 0) = v10;
      memcpy(v10, *(const void **)(a1 + 160), v6);
    }
  }
  return v4;
}

unint64_t _copyHashJoin(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x98uLL);
  *(_DWORD *)unint64_t v4 = 38;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(unsigned char *)(v4 + 108) = *(unsigned char *)(a1 + 108);
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  *(void *)(v4 + 12errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 120));
  *(void *)(v4 + 128) = copyObjectImpl(*(void *)(a1 + 128));
  *(void *)(v4 + 136) = copyObjectImpl(*(void *)(a1 + 136));
  *(void *)(v4 + 144) = copyObjectImpl(*(void *)(a1 + 144));
  return v4;
}

unint64_t _copyMaterial(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x68uLL);
  *(_DWORD *)unint64_t v4 = 39;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  return v4;
}

_DWORD *_copySort(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = (_DWORD *)MemoryContextAllocZeroAligned(*v3, 0x90uLL);
  *unint64_t v4 = 40;
  CopySortFields(a1, (uint64_t)v4);
  return v4;
}

_DWORD *_copyIncrementalSort(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = (_DWORD *)MemoryContextAllocZeroAligned(*v3, 0x98uLL);
  *unint64_t v4 = 41;
  CopySortFields(a1, (uint64_t)v4);
  v4[36] = *(_DWORD *)(a1 + 144);
  return v4;
}

unint64_t _copyGroup(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x88uLL);
  *(_DWORD *)unint64_t v4 = 42;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  size_t v5 = 2 * *(int *)(a1 + 104);
  size_t v6 = (void *)palloc(v5);
  *(void *)(v4 + 112) = v6;
  memcpy(v6, *(const void **)(a1 + 112), v5);
  size_t v7 = 4 * *(int *)(a1 + 104);
  size_t v8 = (void *)palloc(v7);
  *(void *)(v4 + 12errstart(20, 0) = v8;
  memcpy(v8, *(const void **)(a1 + 120), v7);
  size_t v9 = 4 * *(int *)(a1 + 104);
  size_t v10 = (void *)palloc(v9);
  *(void *)(v4 + 128) = v10;
  memcpy(v10, *(const void **)(a1 + 128), v9);
  return v4;
}

unint64_t _copyAgg(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xB8uLL);
  *(_DWORD *)unint64_t v4 = 43;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 108) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  uint64_t v5 = *(unsigned int *)(a1 + 112);
  if ((int)v5 >= 1)
  {
    size_t v6 = 2 * v5;
    size_t v7 = (void *)palloc(2 * v5);
    *(void *)(v4 + 12errstart(20, 0) = v7;
    memcpy(v7, *(const void **)(a1 + 120), v6);
    size_t v8 = 4 * *(int *)(a1 + 112);
    size_t v9 = (void *)palloc(v8);
    *(void *)(v4 + 128) = v9;
    memcpy(v9, *(const void **)(a1 + 128), v8);
    size_t v10 = 4 * *(int *)(a1 + 112);
    size_t v11 = (void *)palloc(v10);
    *(void *)(v4 + 136) = v11;
    memcpy(v11, *(const void **)(a1 + 136), v10);
  }
  *(void *)(v4 + 144) = *(void *)(a1 + 144);
  *(void *)(v4 + 152) = *(void *)(a1 + 152);
  *(void *)(v4 + 16errstart(20, 0) = bms_copy(*(int **)(a1 + 160));
  *(void *)(v4 + 168) = copyObjectImpl(*(void *)(a1 + 168));
  *(void *)(v4 + 176) = copyObjectImpl(*(void *)(a1 + 176));
  return v4;
}

unint64_t _copyWindowAgg(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xD0uLL);
  *(_DWORD *)unint64_t v4 = 44;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 108) = *(_DWORD *)(a1 + 108);
  uint64_t v5 = *(unsigned int *)(a1 + 108);
  if ((int)v5 >= 1)
  {
    size_t v6 = 2 * v5;
    size_t v7 = (void *)palloc(2 * v5);
    *(void *)(v4 + 112) = v7;
    memcpy(v7, *(const void **)(a1 + 112), v6);
    size_t v8 = 4 * *(int *)(a1 + 108);
    size_t v9 = (void *)palloc(v8);
    *(void *)(v4 + 12errstart(20, 0) = v9;
    memcpy(v9, *(const void **)(a1 + 120), v8);
    size_t v10 = 4 * *(int *)(a1 + 108);
    size_t v11 = (void *)palloc(v10);
    *(void *)(v4 + 128) = v11;
    memcpy(v11, *(const void **)(a1 + 128), v10);
  }
  *(_DWORD *)(v4 + 136) = *(_DWORD *)(a1 + 136);
  uint64_t v12 = *(unsigned int *)(a1 + 136);
  if ((int)v12 >= 1)
  {
    size_t v13 = 2 * v12;
    uint64_t v14 = (void *)palloc(2 * v12);
    *(void *)(v4 + 144) = v14;
    memcpy(v14, *(const void **)(a1 + 144), v13);
    size_t v15 = 4 * *(int *)(a1 + 136);
    uint64_t v16 = (void *)palloc(v15);
    *(void *)(v4 + 152) = v16;
    memcpy(v16, *(const void **)(a1 + 152), v15);
    size_t v17 = 4 * *(int *)(a1 + 136);
    uint64_t v18 = (void *)palloc(v17);
    *(void *)(v4 + 16errstart(20, 0) = v18;
    memcpy(v18, *(const void **)(a1 + 160), v17);
  }
  *(_DWORD *)(v4 + 168) = *(_DWORD *)(a1 + 168);
  *(void *)(v4 + 176) = copyObjectImpl(*(void *)(a1 + 176));
  *(void *)(v4 + 184) = copyObjectImpl(*(void *)(a1 + 184));
  *(_DWORD *)(v4 + 192) = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(v4 + 196) = *(_DWORD *)(a1 + 196);
  *(_DWORD *)(v4 + 20errstart(20, 0) = *(_DWORD *)(a1 + 200);
  *(unsigned char *)(v4 + 204) = *(unsigned char *)(a1 + 204);
  *(unsigned char *)(v4 + 205) = *(unsigned char *)(a1 + 205);
  return v4;
}

unint64_t _copyUnique(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x88uLL);
  *(_DWORD *)unint64_t v4 = 45;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  size_t v5 = 2 * *(int *)(a1 + 104);
  size_t v6 = (void *)palloc(v5);
  *(void *)(v4 + 112) = v6;
  memcpy(v6, *(const void **)(a1 + 112), v5);
  size_t v7 = 4 * *(int *)(a1 + 104);
  size_t v8 = (void *)palloc(v7);
  *(void *)(v4 + 12errstart(20, 0) = v8;
  memcpy(v8, *(const void **)(a1 + 120), v7);
  size_t v9 = 4 * *(int *)(a1 + 104);
  size_t v10 = (void *)palloc(v9);
  *(void *)(v4 + 128) = v10;
  memcpy(v10, *(const void **)(a1 + 128), v9);
  return v4;
}

unint64_t _copyHash(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x80uLL);
  *(_DWORD *)unint64_t v4 = 48;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(void *)(v4 + 104) = copyObjectImpl(*(void *)(a1 + 104));
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  *(_WORD *)(v4 + 116) = *(_WORD *)(a1 + 116);
  *(unsigned char *)(v4 + 118) = *(unsigned char *)(a1 + 118);
  *(void *)(v4 + 12errstart(20, 0) = *(void *)(a1 + 120);
  return v4;
}

unint64_t _copySetOp(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xA0uLL);
  *(_DWORD *)unint64_t v4 = 49;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v4 + 108) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  size_t v5 = 2 * *(int *)(a1 + 112);
  size_t v6 = (void *)palloc(v5);
  *(void *)(v4 + 12errstart(20, 0) = v6;
  memcpy(v6, *(const void **)(a1 + 120), v5);
  size_t v7 = 4 * *(int *)(a1 + 112);
  size_t v8 = (void *)palloc(v7);
  *(void *)(v4 + 128) = v8;
  memcpy(v8, *(const void **)(a1 + 128), v7);
  size_t v9 = 4 * *(int *)(a1 + 112);
  size_t v10 = (void *)palloc(v9);
  *(void *)(v4 + 136) = v10;
  memcpy(v10, *(const void **)(a1 + 136), v9);
  *(_WORD *)(v4 + 144) = *(_WORD *)(a1 + 144);
  *(_DWORD *)(v4 + 148) = *(_DWORD *)(a1 + 148);
  *(void *)(v4 + 152) = *(void *)(a1 + 152);
  return v4;
}

unint64_t _copyLockRows(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 50;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(void *)(v4 + 104) = copyObjectImpl(*(void *)(a1 + 104));
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + 112);
  return v4;
}

unint64_t _copyLimit(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x98uLL);
  *(_DWORD *)unint64_t v4 = 51;
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(void *)(v4 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(v4 + 96) = bms_copy(*(int **)(a1 + 96));
  *(void *)(v4 + 104) = copyObjectImpl(*(void *)(a1 + 104));
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  *(_DWORD *)(v4 + 12errstart(20, 0) = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(v4 + 124) = *(_DWORD *)(a1 + 124);
  size_t v5 = 2 * *(int *)(a1 + 124);
  size_t v6 = (void *)palloc(v5);
  *(void *)(v4 + 128) = v6;
  memcpy(v6, *(const void **)(a1 + 128), v5);
  size_t v7 = 4 * *(int *)(a1 + 124);
  size_t v8 = (void *)palloc(v7);
  *(void *)(v4 + 136) = v8;
  memcpy(v8, *(const void **)(a1 + 136), v7);
  size_t v9 = 4 * *(int *)(a1 + 124);
  size_t v10 = (void *)palloc(v9);
  *(void *)(v4 + 144) = v10;
  memcpy(v10, *(const void **)(a1 + 144), v9);
  return v4;
}

unint64_t _copyNestLoopParam(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)unint64_t v4 = 52;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  return v4;
}

unint64_t _copyPlanRowMark(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t result = MemoryContextAllocZero(*v3, 0x24uLL);
  *(_DWORD *)unint64_t result = 53;
  *(_DWORD *)(result + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(result + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a1 + 28);
  *(unsigned char *)(result + 32) = *(unsigned char *)(a1 + 32);
  return result;
}

unint64_t _copyPartitionPruneInfo(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 54;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = bms_copy(*(int **)(a1 + 16));
  return v4;
}

unint64_t _copyPartitionedRelPruneInfo(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x48uLL);
  *(_DWORD *)unint64_t v4 = 55;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = bms_copy(*(int **)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  size_t v5 = 4 * *(int *)(a1 + 16);
  size_t v6 = (void *)palloc(v5);
  *(void *)(v4 + 24) = v6;
  memcpy(v6, *(const void **)(a1 + 24), v5);
  size_t v7 = 4 * *(int *)(a1 + 16);
  size_t v8 = (void *)palloc(v7);
  *(void *)(v4 + 32) = v8;
  memcpy(v8, *(const void **)(a1 + 32), v7);
  size_t v9 = 4 * *(int *)(a1 + 16);
  size_t v10 = (void *)palloc(v9);
  *(void *)(v4 + 4errstart(20, 0) = v10;
  memcpy(v10, *(const void **)(a1 + 40), v9);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = bms_copy(*(int **)(a1 + 64));
  return v4;
}

unint64_t _copyPartitionPruneStepOp(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 56;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_WORD *)(v4 + 8) = *(_WORD *)(a1 + 8);
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = bms_copy(*(int **)(a1 + 32));
  return v4;
}

unint64_t _copyPartitionPruneStepCombine(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 57;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyAlias(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 102;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyRangeVar(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 103;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  size_t v6 = *(const char **)(a1 + 16);
  if (v6) {
    size_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 16) = v6;
  size_t v7 = *(const char **)(a1 + 24);
  if (v7) {
    size_t v7 = (const char *)pstrdup(v7);
  }
  *(void *)(v4 + 24) = v7;
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(v4 + 33) = *(unsigned char *)(a1 + 33);
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copyTableFunc(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x68uLL);
  *(_DWORD *)unint64_t v4 = 104;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = bms_copy(*(int **)(a1 + 88));
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(v4 + 10errstart(20, 0) = *(_DWORD *)(a1 + 100);
  return v4;
}

unint64_t _copyIntoClause(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x48uLL);
  *(_DWORD *)unint64_t v4 = 153;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  size_t v5 = *(const char **)(a1 + 24);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 24) = v5;
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  size_t v6 = *(const char **)(a1 + 48);
  if (v6) {
    size_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 48) = v6;
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(unsigned char *)(v4 + 64) = *(unsigned char *)(a1 + 64);
  return v4;
}

unint64_t _copyVar(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t result = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t result = 106;
  *(_DWORD *)(result + 4) = *(_DWORD *)(a1 + 4);
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(result + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a1 + 28);
  *(_WORD *)(result + 32) = *(_WORD *)(a1 + 32);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a1 + 36);
  return result;
}

unint64_t _copyConst(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 107;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  if (*(unsigned char *)(a1 + 33) || *(unsigned char *)(a1 + 32)) {
    size_t v5 = *(unsigned __int8 **)(a1 + 24);
  }
  else {
    size_t v5 = datumCopy(*(unsigned __int8 **)(a1 + 24), 0, *(_DWORD *)(a1 + 16));
  }
  *(void *)(v4 + 24) = v5;
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(v4 + 33) = *(unsigned char *)(a1 + 33);
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a1 + 36);
  return v4;
}

_DWORD *_copyParam(_DWORD *a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t result = (_DWORD *)MemoryContextAllocZero(*v3, 0x1CuLL);
  _DWORD *result = 108;
  result[1] = a1[1];
  result[2] = a1[2];
  result[3] = a1[3];
  result[4] = a1[4];
  result[5] = a1[5];
  result[6] = a1[6];
  return result;
}

unint64_t _copyAggref(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x58uLL);
  *(_DWORD *)unint64_t v4 = 109;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(unsigned char *)(v4 + 72) = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(v4 + 73) = *(unsigned char *)(a1 + 73);
  *(unsigned char *)(v4 + 74) = *(unsigned char *)(a1 + 74);
  *(_DWORD *)(v4 + 76) = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(v4 + 8errstart(20, 0) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(v4 + 84) = *(_DWORD *)(a1 + 84);
  return v4;
}

unint64_t _copyGroupingFunc(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 110;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a1 + 36);
  return v4;
}

unint64_t _copyWindowFunc(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 111;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(v4 + 44) = *(unsigned char *)(a1 + 44);
  *(unsigned char *)(v4 + 45) = *(unsigned char *)(a1 + 45);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copySubscriptingRef(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 112;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  return v4;
}

unint64_t _copyFuncExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 113;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(unsigned char *)(v4 + 12) = *(unsigned char *)(a1 + 12);
  *(unsigned char *)(v4 + 13) = *(unsigned char *)(a1 + 13);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyNamedArgExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 114;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  return v4;
}

unint64_t _copyOpExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 115;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyDistinctExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 116;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyNullIfExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 117;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyScalarArrayOpExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 118;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(unsigned char *)(v4 + 12) = *(unsigned char *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyBoolExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 119;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copySubLink(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 120;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copySubPlan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x60uLL);
  *(_DWORD *)unint64_t v4 = 121;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  size_t v5 = *(const char **)(a1 + 32);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 32) = v5;
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  *(unsigned char *)(v4 + 52) = *(unsigned char *)(a1 + 52);
  *(unsigned char *)(v4 + 53) = *(unsigned char *)(a1 + 53);
  *(unsigned char *)(v4 + 54) = *(unsigned char *)(a1 + 54);
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = *(void *)(a1 + 80);
  *(void *)(v4 + 88) = *(void *)(a1 + 88);
  return v4;
}

unint64_t _copyAlternativeSubPlan(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)unint64_t v4 = 122;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  return v4;
}

unint64_t _copyFieldSelect(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 123;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_WORD *)(v4 + 16) = *(_WORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  return v4;
}

unint64_t _copyFieldStore(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 124;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyRelabelType(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 125;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyCoerceViaIO(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 126;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  return v4;
}

unint64_t _copyArrayCoerceExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 127;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyConvertRowtypeExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 128;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyCollateExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 129;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyCaseExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 130;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyCaseWhen(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 131;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

_DWORD *_copyCaseTestExpr(_DWORD *a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t result = (_DWORD *)MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  _DWORD *result = 132;
  result[1] = a1[1];
  result[2] = a1[2];
  result[3] = a1[3];
  return result;
}

unint64_t _copyArrayExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 133;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  return v4;
}

unint64_t _copyRowExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 134;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyRowCompareExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 135;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  return v4;
}

unint64_t _copyCoalesceExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 136;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyMinMaxExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 137;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

_DWORD *_copySQLValueFunction(_DWORD *a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t result = (_DWORD *)MemoryContextAllocZero(*v3, 0x14uLL);
  _DWORD *result = 138;
  result[1] = a1[1];
  result[2] = a1[2];
  result[3] = a1[3];
  result[4] = a1[4];
  return result;
}

unint64_t _copyXmlExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 139;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 52) = *(_DWORD *)(a1 + 52);
  return v4;
}

unint64_t _copyNullTest(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 140;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(v4 + 2errstart(20, 0) = *(unsigned char *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyBooleanTest(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 141;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyCoerceToDomain(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 142;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

_DWORD *_copyCoerceToDomainValue(_DWORD *a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t result = (_DWORD *)MemoryContextAllocZero(*v3, 0x14uLL);
  _DWORD *result = 143;
  result[1] = a1[1];
  result[2] = a1[2];
  result[3] = a1[3];
  result[4] = a1[4];
  return result;
}

_DWORD *_copySetToDefault(_DWORD *a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t result = (_DWORD *)MemoryContextAllocZero(*v3, 0x14uLL);
  _DWORD *result = 144;
  result[1] = a1[1];
  result[2] = a1[2];
  result[3] = a1[3];
  result[4] = a1[4];
  return result;
}

unint64_t _copyCurrentOfExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 145;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copyInferenceElem(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 147;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyTargetEntry(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 148;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_WORD *)(v4 + 16) = *(_WORD *)(a1 + 16);
  size_t v5 = *(const char **)(a1 + 24);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 24) = v5;
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a1 + 36);
  *(_WORD *)(v4 + 4errstart(20, 0) = *(_WORD *)(a1 + 40);
  *(unsigned char *)(v4 + 42) = *(unsigned char *)(a1 + 42);
  return v4;
}

unint64_t _copyJoinExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)unint64_t v4 = 150;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(a1 + 8);
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a1 + 56);
  return v4;
}

unint64_t _copyFromExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 151;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyOnConflictExpr(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)unint64_t v4 = 152;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  return v4;
}

unint64_t _copyPathKey(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t result = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t result = 203;
  *(void *)(result + 8) = *(void *)(a1 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(result + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(unsigned char *)(result + 24) = *(unsigned char *)(a1 + 24);
  return result;
}

unint64_t _copyRestrictInfo(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xD8uLL);
  *(_DWORD *)unint64_t v4 = 205;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(v4 + 17) = *(unsigned char *)(a1 + 17);
  *(unsigned char *)(v4 + 18) = *(unsigned char *)(a1 + 18);
  *(unsigned char *)(v4 + 19) = *(unsigned char *)(a1 + 19);
  *(unsigned char *)(v4 + 2errstart(20, 0) = *(unsigned char *)(a1 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(void *)(v4 + 32) = bms_copy(*(int **)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = bms_copy(*(int **)(a1 + 40));
  *(void *)(v4 + 48) = bms_copy(*(int **)(a1 + 48));
  *(void *)(v4 + 56) = bms_copy(*(int **)(a1 + 56));
  *(void *)(v4 + 64) = bms_copy(*(int **)(a1 + 64));
  *(void *)(v4 + 72) = bms_copy(*(int **)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = *(void *)(a1 + 88);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a1 + 96);
  *(void *)(v4 + 112) = *(void *)(a1 + 112);
  *(void *)(v4 + 12errstart(20, 0) = *(void *)(a1 + 120);
  *(void *)(v4 + 128) = copyObjectImpl(*(void *)(a1 + 128));
  *(void *)(v4 + 136) = *(void *)(a1 + 136);
  *(void *)(v4 + 144) = *(void *)(a1 + 144);
  *(void *)(v4 + 152) = *(void *)(a1 + 152);
  *(void *)(v4 + 16errstart(20, 0) = *(void *)(a1 + 160);
  *(void *)(v4 + 168) = 0;
  *(unsigned char *)(v4 + 176) = *(unsigned char *)(a1 + 176);
  *(_DWORD *)(v4 + 18errstart(20, 0) = *(_DWORD *)(a1 + 180);
  *(void *)(v4 + 184) = *(void *)(a1 + 184);
  *(void *)(v4 + 192) = *(void *)(a1 + 192);
  *(void *)(v4 + 20errstart(20, 0) = *(void *)(a1 + 200);
  *(void *)(v4 + 208) = *(void *)(a1 + 208);
  return v4;
}

unint64_t _copyPlaceHolderVar(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 207;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = bms_copy(*(int **)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a1 + 28);
  return v4;
}

unint64_t _copySpecialJoinInfo(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)unint64_t v4 = 208;
  *(void *)(v4 + 8) = bms_copy(*(int **)(a1 + 8));
  *(void *)(v4 + 16) = bms_copy(*(int **)(a1 + 16));
  *(void *)(v4 + 24) = bms_copy(*(int **)(a1 + 24));
  *(void *)(v4 + 32) = bms_copy(*(int **)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(v4 + 44) = *(unsigned char *)(a1 + 44);
  *(unsigned char *)(v4 + 45) = *(unsigned char *)(a1 + 45);
  *(unsigned char *)(v4 + 46) = *(unsigned char *)(a1 + 46);
  *(unsigned char *)(v4 + 47) = *(unsigned char *)(a1 + 47);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  return v4;
}

unint64_t _copyAppendRelInfo(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 209;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  size_t v5 = 2 * *(int *)(a1 + 32);
  size_t v6 = (void *)palloc(v5);
  *(void *)(v4 + 4errstart(20, 0) = v6;
  memcpy(v6, *(const void **)(a1 + 40), v5);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copyPlaceHolderInfo(uint64_t a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 210;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = bms_copy(*(int **)(a1 + 16));
  *(void *)(v4 + 24) = bms_copy(*(int **)(a1 + 24));
  *(void *)(v4 + 32) = bms_copy(*(int **)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  return v4;
}

_DWORD *_copyValue(int *a1, double a2)
{
  int v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t result = (_DWORD *)MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  size_t v5 = result;
  _DWORD *result = 220;
  _DWORD *result = *a1;
  int v6 = *a1;
  if ((*a1 - 222) < 3)
  {
    size_t v7 = (const char *)*((void *)a1 + 1);
    if (v7) {
      size_t v7 = (const char *)pstrdup(v7);
    }
    *((void *)v5 + 1) = v7;
    return v5;
  }
  if (v6 == 225) {
    return v5;
  }
  if (v6 != 221) {
    _copyValue_cold_1();
  }
  result[2] = a1[2];
  return result;
}

unint64_t _copyExtensibleNode(uint64_t a1)
{
  uint64_t ExtensibleNodeMethods = GetExtensibleNodeMethods(*(char **)(a1 + 8), 0);
  uint64_t v4 = *(void *)CurrentMemoryContext(v3);
  if (v5 > 0x400 || v6 != 0)
  {
    unint64_t v8 = MemoryContextAllocZero(v4, v5);
    *(_DWORD *)unint64_t v8 = 229;
    size_t v9 = *(const char **)(a1 + 8);
    if (!v9) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  unint64_t v8 = MemoryContextAllocZeroAligned(v4, v5);
  *(_DWORD *)unint64_t v8 = 229;
  size_t v9 = *(const char **)(a1 + 8);
  if (v9) {
LABEL_8:
  }
    size_t v9 = (const char *)pstrdup(v9);
LABEL_9:
  *(void *)(v8 + 8) = v9;
  (*(void (**)(unint64_t, uint64_t))(ExtensibleNodeMethods + 16))(v8, a1);
  return v8;
}

unint64_t _copyQuery(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xE0uLL);
  *(_DWORD *)unint64_t v4 = 231;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(void *)(v4 + 16) = *(void *)(a1 + 16);
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(v4 + 44) = *(unsigned char *)(a1 + 44);
  *(unsigned char *)(v4 + 45) = *(unsigned char *)(a1 + 45);
  *(unsigned char *)(v4 + 46) = *(unsigned char *)(a1 + 46);
  *(unsigned char *)(v4 + 47) = *(unsigned char *)(a1 + 47);
  *(unsigned char *)(v4 + 48) = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(v4 + 49) = *(unsigned char *)(a1 + 49);
  *(unsigned char *)(v4 + 5errstart(20, 0) = *(unsigned char *)(a1 + 50);
  *(unsigned char *)(v4 + 51) = *(unsigned char *)(a1 + 51);
  *(unsigned char *)(v4 + 52) = *(unsigned char *)(a1 + 52);
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(_DWORD *)(v4 + 88) = *(_DWORD *)(a1 + 88);
  *(void *)(v4 + 96) = copyObjectImpl(*(void *)(a1 + 96));
  *(void *)(v4 + 104) = copyObjectImpl(*(void *)(a1 + 104));
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  *(void *)(v4 + 12errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 120));
  *(void *)(v4 + 128) = copyObjectImpl(*(void *)(a1 + 128));
  *(void *)(v4 + 136) = copyObjectImpl(*(void *)(a1 + 136));
  *(void *)(v4 + 144) = copyObjectImpl(*(void *)(a1 + 144));
  *(void *)(v4 + 152) = copyObjectImpl(*(void *)(a1 + 152));
  *(void *)(v4 + 16errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 160));
  *(void *)(v4 + 168) = copyObjectImpl(*(void *)(a1 + 168));
  *(_DWORD *)(v4 + 176) = *(_DWORD *)(a1 + 176);
  *(void *)(v4 + 184) = copyObjectImpl(*(void *)(a1 + 184));
  *(void *)(v4 + 192) = copyObjectImpl(*(void *)(a1 + 192));
  *(void *)(v4 + 20errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 200));
  *(void *)(v4 + 208) = copyObjectImpl(*(void *)(a1 + 208));
  *(_DWORD *)(v4 + 216) = *(_DWORD *)(a1 + 216);
  *(_DWORD *)(v4 + 22errstart(20, 0) = *(_DWORD *)(a1 + 220);
  return v4;
}

unint64_t _copyRawStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 230;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyInsertStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)unint64_t v4 = 233;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a1 + 56);
  return v4;
}

unint64_t _copyDeleteStmt(void *a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 234;
  *(void *)(v4 + 8) = copyObjectImpl(a1[1]);
  *(void *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(void *)(v4 + 24) = copyObjectImpl(a1[3]);
  *(void *)(v4 + 32) = copyObjectImpl(a1[4]);
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(a1[5]);
  return v4;
}

unint64_t _copyUpdateStmt(void *a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 235;
  *(void *)(v4 + 8) = copyObjectImpl(a1[1]);
  *(void *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(void *)(v4 + 24) = copyObjectImpl(a1[3]);
  *(void *)(v4 + 32) = copyObjectImpl(a1[4]);
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(a1[5]);
  *(void *)(v4 + 48) = copyObjectImpl(a1[6]);
  return v4;
}

unint64_t _copySelectStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x98uLL);
  *(_DWORD *)unint64_t v4 = 236;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(v4 + 88) = copyObjectImpl(*(void *)(a1 + 88));
  *(void *)(v4 + 96) = copyObjectImpl(*(void *)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  *(void *)(v4 + 12errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 120));
  *(_DWORD *)(v4 + 128) = *(_DWORD *)(a1 + 128);
  *(unsigned char *)(v4 + 132) = *(unsigned char *)(a1 + 132);
  *(void *)(v4 + 136) = copyObjectImpl(*(void *)(a1 + 136));
  *(void *)(v4 + 144) = copyObjectImpl(*(void *)(a1 + 144));
  return v4;
}

unint64_t _copySetOperationStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)unint64_t v4 = 240;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(a1 + 8);
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  return v4;
}

unint64_t _copyAlterTableStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 237;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(unsigned char *)(v4 + 28) = *(unsigned char *)(a1 + 28);
  return v4;
}

unint64_t _copyAlterTableCmd(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 238;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(_WORD *)(v4 + 16) = *(_WORD *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(v4 + 44) = *(unsigned char *)(a1 + 44);
  return v4;
}

unint64_t _copyAlterCollationStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)unint64_t v4 = 343;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  return v4;
}

unint64_t _copyAlterDomainStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 239;
  *(unsigned char *)(v4 + 4) = *(unsigned char *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  return v4;
}

unint64_t _copyGrantStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 241;
  *(unsigned char *)(v4 + 4) = *(unsigned char *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(unsigned char *)(v4 + 4errstart(20, 0) = *(unsigned char *)(a1 + 40);
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a1 + 44);
  return v4;
}

unint64_t _copyGrantRoleStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 242;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(v4 + 25) = *(unsigned char *)(a1 + 25);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyAlterDefaultPrivilegesStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 243;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyDeclareCursorStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 297;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  return v4;
}

unint64_t _copyClosePortalStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)unint64_t v4 = 244;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyCallStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 344;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyClusterStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 245;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyCopyStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)unint64_t v4 = 246;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(v4 + 33) = *(unsigned char *)(a1 + 33);
  size_t v5 = *(const char **)(a1 + 40);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 4errstart(20, 0) = v5;
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  return v4;
}

_DWORD *_copyCreateStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = (_DWORD *)MemoryContextAllocZeroAligned(*v3, 0x68uLL);
  *unint64_t v4 = 247;
  CopyCreateStmtFields(a1, (uint64_t)v4);
  return v4;
}

unint64_t _copyTableLikeClause(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 381;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyDefineStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 248;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(a1 + 8);
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(unsigned char *)(v4 + 4errstart(20, 0) = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(v4 + 41) = *(unsigned char *)(a1 + 41);
  return v4;
}

unint64_t _copyDropStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 249;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(v4 + 25) = *(unsigned char *)(a1 + 25);
  return v4;
}

unint64_t _copyTruncateStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 250;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyCommentStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 251;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  return v4;
}

unint64_t _copySecLabelStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 322;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = *(const char **)(a1 + 24);
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 24) = v6;
  return v4;
}

unint64_t _copyFetchStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 252;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = *(void *)(a1 + 8);
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  return v4;
}

unint64_t _copyIndexStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 253;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  uint64_t v6 = *(const char **)(a1 + 24);
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 24) = v6;
  size_t v7 = *(const char **)(a1 + 32);
  if (v7) {
    size_t v7 = (const char *)pstrdup(v7);
  }
  *(void *)(v4 + 32) = v7;
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  unint64_t v8 = *(const char **)(a1 + 80);
  if (v8) {
    unint64_t v8 = (const char *)pstrdup(v8);
  }
  *(void *)(v4 + 8errstart(20, 0) = v8;
  *(_DWORD *)(v4 + 88) = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(v4 + 92) = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(v4 + 10errstart(20, 0) = *(_DWORD *)(a1 + 100);
  *(unsigned char *)(v4 + 104) = *(unsigned char *)(a1 + 104);
  *(unsigned char *)(v4 + 105) = *(unsigned char *)(a1 + 105);
  *(unsigned char *)(v4 + 106) = *(unsigned char *)(a1 + 106);
  *(unsigned char *)(v4 + 107) = *(unsigned char *)(a1 + 107);
  *(unsigned char *)(v4 + 108) = *(unsigned char *)(a1 + 108);
  *(unsigned char *)(v4 + 109) = *(unsigned char *)(a1 + 109);
  *(unsigned char *)(v4 + 11errstart(20, 0) = *(unsigned char *)(a1 + 110);
  *(unsigned char *)(v4 + 111) = *(unsigned char *)(a1 + 111);
  *(unsigned char *)(v4 + 112) = *(unsigned char *)(a1 + 112);
  return v4;
}

unint64_t _copyCreateStatsStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 342;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  size_t v5 = *(const char **)(a1 + 40);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 4errstart(20, 0) = v5;
  *(unsigned char *)(v4 + 48) = *(unsigned char *)(a1 + 48);
  return v4;
}

unint64_t _copyAlterStatsStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 345;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(v4 + 2errstart(20, 0) = *(unsigned char *)(a1 + 20);
  return v4;
}

unint64_t _copyCreateFunctionStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 254;
  *(unsigned char *)(v4 + 4) = *(unsigned char *)(a1 + 4);
  *(unsigned char *)(v4 + 5) = *(unsigned char *)(a1 + 5);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  return v4;
}

unint64_t _copyFunctionParameter(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 382;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  return v4;
}

unint64_t _copyAlterFunctionStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 255;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyDoStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)unint64_t v4 = 256;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  return v4;
}

unint64_t _copyRenameStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 257;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  size_t v5 = *(const char **)(a1 + 32);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 32) = v5;
  uint64_t v6 = *(const char **)(a1 + 40);
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 4errstart(20, 0) = v6;
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  *(unsigned char *)(v4 + 52) = *(unsigned char *)(a1 + 52);
  return v4;
}

unint64_t _copyAlterObjectDependsStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 300;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  return v4;
}

unint64_t _copyAlterObjectSchemaStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 301;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  size_t v5 = *(const char **)(a1 + 24);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 24) = v5;
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  return v4;
}

unint64_t _copyAlterOwnerStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 302;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  return v4;
}

unint64_t _copyAlterOperatorStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 303;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterTypeStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 304;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyRuleStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 258;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(unsigned char *)(v4 + 48) = *(unsigned char *)(a1 + 48);
  return v4;
}

unint64_t _copyNotifyStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 259;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = *(const char **)(a1 + 16);
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 16) = v6;
  return v4;
}

unint64_t _copyListenStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)unint64_t v4 = 260;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyUnlistenStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)unint64_t v4 = 261;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyTransactionStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 262;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = *(const char **)(a1 + 24);
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 24) = v6;
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  return v4;
}

unint64_t _copyCompositeTypeStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 307;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyCreateEnumStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 308;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyCreateRangeStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 309;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterEnumStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 310;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = *(const char **)(a1 + 24);
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 24) = v6;
  size_t v7 = *(const char **)(a1 + 32);
  if (v7) {
    size_t v7 = (const char *)pstrdup(v7);
  }
  *(void *)(v4 + 32) = v7;
  *(unsigned char *)(v4 + 4errstart(20, 0) = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(v4 + 41) = *(unsigned char *)(a1 + 41);
  return v4;
}

unint64_t _copyViewStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 263;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copyLoadStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)unint64_t v4 = 264;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyCreateDomainStmt(void *a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 265;
  *(void *)(v4 + 8) = copyObjectImpl(a1[1]);
  *(void *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(void *)(v4 + 24) = copyObjectImpl(a1[3]);
  *(void *)(v4 + 32) = copyObjectImpl(a1[4]);
  return v4;
}

unint64_t _copyCreateOpClassStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 291;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  size_t v5 = *(const char **)(a1 + 24);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 24) = v5;
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(unsigned char *)(v4 + 48) = *(unsigned char *)(a1 + 48);
  return v4;
}

unint64_t _copyCreateOpClassItem(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 380;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  return v4;
}

unint64_t _copyCreateOpFamilyStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 292;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  return v4;
}

unint64_t _copyAlterOpFamilyStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 293;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  return v4;
}

unint64_t _copyCreatedbStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 266;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterDatabaseStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 286;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterDatabaseSetStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 287;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyDropdbStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 267;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  return v4;
}

unint64_t _copyVacuumStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 268;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  return v4;
}

unint64_t _copyVacuumRelation(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 397;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  return v4;
}

unint64_t _copyExplainStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 269;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyCreateTableAsStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 270;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(unsigned char *)(v4 + 28) = *(unsigned char *)(a1 + 28);
  *(unsigned char *)(v4 + 29) = *(unsigned char *)(a1 + 29);
  return v4;
}

unint64_t _copyRefreshMatViewStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)unint64_t v4 = 330;
  *(unsigned char *)(v4 + 4) = *(unsigned char *)(a1 + 4);
  *(unsigned char *)(v4 + 5) = *(unsigned char *)(a1 + 5);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  return v4;
}

unint64_t _copyReplicaIdentityStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)unint64_t v4 = 331;
  *(unsigned char *)(v4 + 4) = *(unsigned char *)(a1 + 4);
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyAlterSystemStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)unint64_t v4 = 332;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  return v4;
}

unint64_t _copyCreateSeqStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 271;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(unsigned char *)(v4 + 28) = *(unsigned char *)(a1 + 28);
  *(unsigned char *)(v4 + 29) = *(unsigned char *)(a1 + 29);
  return v4;
}

unint64_t _copyAlterSeqStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 272;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(v4 + 25) = *(unsigned char *)(a1 + 25);
  return v4;
}

unint64_t _copyVariableSetStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 273;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  return v4;
}

unint64_t _copyVariableShowStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)unint64_t v4 = 274;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyCreateTableSpaceStmt(void *a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 298;
  size_t v5 = (const char *)a1[1];
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(a1[2]);
  uint64_t v6 = (const char *)a1[3];
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 24) = v6;
  *(void *)(v4 + 32) = copyObjectImpl(a1[4]);
  return v4;
}

unint64_t _copyDropTableSpaceStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 299;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  return v4;
}

unint64_t _copyAlterTableSpaceOptionsStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 320;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  return v4;
}

unint64_t _copyAlterTableMoveAllStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 321;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  uint64_t v6 = *(const char **)(a1 + 32);
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 32) = v6;
  *(unsigned char *)(v4 + 4errstart(20, 0) = *(unsigned char *)(a1 + 40);
  return v4;
}

unint64_t _copyCreateExtensionStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 325;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  return v4;
}

unint64_t _copyAlterExtensionStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 326;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterExtensionContentsStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 327;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  return v4;
}

unint64_t _copyCreateFdwStmt(void *a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 313;
  size_t v5 = (const char *)a1[1];
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(void *)(v4 + 24) = copyObjectImpl(a1[3]);
  return v4;
}

unint64_t _copyAlterFdwStmt(void *a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 314;
  size_t v5 = (const char *)a1[1];
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(void *)(v4 + 24) = copyObjectImpl(a1[3]);
  return v4;
}

unint64_t _copyCreateForeignServerStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 315;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = *(const char **)(a1 + 16);
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 16) = v6;
  size_t v7 = *(const char **)(a1 + 24);
  if (v7) {
    size_t v7 = (const char *)pstrdup(v7);
  }
  *(void *)(v4 + 24) = v7;
  unint64_t v8 = *(const char **)(a1 + 32);
  if (v8) {
    unint64_t v8 = (const char *)pstrdup(v8);
  }
  *(void *)(v4 + 32) = v8;
  *(unsigned char *)(v4 + 4errstart(20, 0) = *(unsigned char *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  return v4;
}

unint64_t _copyAlterForeignServerStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 316;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = *(const char **)(a1 + 16);
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 16) = v6;
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  return v4;
}

unint64_t _copyCreateUserMappingStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 317;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  return v4;
}

unint64_t _copyAlterUserMappingStmt(void *a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 318;
  *(void *)(v4 + 8) = copyObjectImpl(a1[1]);
  size_t v5 = (const char *)a1[2];
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  *(void *)(v4 + 24) = copyObjectImpl(a1[3]);
  return v4;
}

unint64_t _copyDropUserMappingStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 319;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  return v4;
}

unint64_t _copyCreateForeignTableStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x78uLL);
  *(_DWORD *)unint64_t v4 = 323;
  CopyCreateStmtFields(a1, v4);
  size_t v5 = *(const char **)(a1 + 104);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 104) = v5;
  *(void *)(v4 + 112) = copyObjectImpl(*(void *)(a1 + 112));
  return v4;
}

unint64_t _copyImportForeignSchemaStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 324;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = *(const char **)(a1 + 16);
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 16) = v6;
  size_t v7 = *(const char **)(a1 + 24);
  if (v7) {
    size_t v7 = (const char *)pstrdup(v7);
  }
  *(void *)(v4 + 24) = v7;
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  return v4;
}

unint64_t _copyCreateTransformStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 335;
  *(unsigned char *)(v4 + 4) = *(unsigned char *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  return v4;
}

unint64_t _copyCreateAmStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 336;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  return v4;
}

unint64_t _copyCreateTrigStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x60uLL);
  *(_DWORD *)unint64_t v4 = 276;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(unsigned char *)(v4 + 4errstart(20, 0) = *(unsigned char *)(a1 + 40);
  *(_WORD *)(v4 + 42) = *(_WORD *)(a1 + 42);
  *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(unsigned char *)(v4 + 64) = *(unsigned char *)(a1 + 64);
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(unsigned char *)(v4 + 8errstart(20, 0) = *(unsigned char *)(a1 + 80);
  *(unsigned char *)(v4 + 81) = *(unsigned char *)(a1 + 81);
  *(void *)(v4 + 88) = copyObjectImpl(*(void *)(a1 + 88));
  return v4;
}

unint64_t _copyCreateEventTrigStmt(void *a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 328;
  size_t v5 = (const char *)a1[1];
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = (const char *)a1[2];
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 16) = v6;
  *(void *)(v4 + 24) = copyObjectImpl(a1[3]);
  *(void *)(v4 + 32) = copyObjectImpl(a1[4]);
  return v4;
}

unint64_t _copyAlterEventTrigStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 329;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  return v4;
}

unint64_t _copyCreatePLangStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 277;
  *(unsigned char *)(v4 + 4) = *(unsigned char *)(a1 + 4);
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(unsigned char *)(v4 + 4errstart(20, 0) = *(unsigned char *)(a1 + 40);
  return v4;
}

unint64_t _copyCreateRoleStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 278;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterRoleStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 279;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyAlterRoleSetStmt(void *a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 288;
  *(void *)(v4 + 8) = copyObjectImpl(a1[1]);
  size_t v5 = (const char *)a1[2];
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  *(void *)(v4 + 24) = copyObjectImpl(a1[3]);
  return v4;
}

unint64_t _copyDropRoleStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 280;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  return v4;
}

unint64_t _copyLockStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 281;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(v4 + 2errstart(20, 0) = *(unsigned char *)(a1 + 20);
  return v4;
}

unint64_t _copyConstraintsSetStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 282;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  return v4;
}

unint64_t _copyReindexStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 283;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(unsigned char *)(v4 + 28) = *(unsigned char *)(a1 + 28);
  return v4;
}

unint64_t _copyCreateSchemaStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 285;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  return v4;
}

unint64_t _copyCreateConversionStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 289;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  size_t v5 = *(const char **)(a1 + 16);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = *(const char **)(a1 + 24);
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 24) = v6;
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(unsigned char *)(v4 + 4errstart(20, 0) = *(unsigned char *)(a1 + 40);
  return v4;
}

unint64_t _copyCreateCastStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 290;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 36);
  return v4;
}

unint64_t _copyPrepareStmt(void *a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 294;
  size_t v5 = (const char *)a1[1];
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(void *)(v4 + 24) = copyObjectImpl(a1[3]);
  return v4;
}

unint64_t _copyExecuteStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 295;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyDeallocateStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x10uLL);
  *(_DWORD *)unint64_t v4 = 296;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  return v4;
}

unint64_t _copyDropOwnedStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 305;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copyReassignOwnedStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 306;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterTSDictionaryStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 311;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyAlterTSConfigurationStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 312;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(v4 + 33) = *(unsigned char *)(a1 + 33);
  *(unsigned char *)(v4 + 34) = *(unsigned char *)(a1 + 34);
  return v4;
}

unint64_t _copyCreatePolicyStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)unint64_t v4 = 333;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  uint64_t v6 = *(const char **)(a1 + 24);
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 24) = v6;
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  return v4;
}

unint64_t _copyAlterPolicyStmt(void *a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 334;
  size_t v5 = (const char *)a1[1];
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(a1[2]);
  *(void *)(v4 + 24) = copyObjectImpl(a1[3]);
  *(void *)(v4 + 32) = copyObjectImpl(a1[4]);
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(a1[5]);
  return v4;
}

unint64_t _copyCreatePublicationStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 337;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  return v4;
}

unint64_t _copyAlterPublicationStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 338;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a1 + 36);
  return v4;
}

unint64_t _copyCreateSubscriptionStmt(void *a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 339;
  size_t v5 = (const char *)a1[1];
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = (const char *)a1[2];
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 16) = v6;
  *(void *)(v4 + 24) = copyObjectImpl(a1[3]);
  *(void *)(v4 + 32) = copyObjectImpl(a1[4]);
  return v4;
}

unint64_t _copyAlterSubscriptionStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 340;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = *(const char **)(a1 + 16);
  if (v6) {
    uint64_t v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 16) = v6;
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  return v4;
}

unint64_t _copyDropSubscriptionStmt(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 341;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyAExpr(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 346;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyColumnRef(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 347;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

_DWORD *_copyAConst(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t result = (_DWORD *)MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  size_t v5 = result;
  _DWORD *result = 349;
  result[2] = *(_DWORD *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 8);
  if ((v6 - 222) < 3)
  {
    size_t v7 = *(const char **)(a1 + 16);
    if (v7) {
      size_t v7 = (const char *)pstrdup(v7);
    }
    *((void *)v5 + 2) = v7;
    goto LABEL_5;
  }
  if (v6 == 225)
  {
LABEL_5:
    v5[6] = *(_DWORD *)(a1 + 24);
    return v5;
  }
  if (v6 != 221) {
    _copyAConst_cold_1();
  }
  result[4] = *(_DWORD *)(a1 + 16);
  result[6] = *(_DWORD *)(a1 + 24);
  return result;
}

unint64_t _copyFuncCall(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)unint64_t v4 = 350;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(unsigned char *)(v4 + 4errstart(20, 0) = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(v4 + 41) = *(unsigned char *)(a1 + 41);
  *(unsigned char *)(v4 + 42) = *(unsigned char *)(a1 + 42);
  *(unsigned char *)(v4 + 43) = *(unsigned char *)(a1 + 43);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a1 + 56);
  return v4;
}

unint64_t _copyAIndices(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 352;
  *(unsigned char *)(v4 + 4) = *(unsigned char *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyA_Indirection(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 353;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyA_ArrayExpr(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 354;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copyResTarget(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 355;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyMultiAssignRef(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 356;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyTypeCast(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 357;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyCollateClause(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 358;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copySortBy(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 359;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyWindowDef(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x48uLL);
  *(_DWORD *)unint64_t v4 = 360;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  int v6 = *(const char **)(a1 + 16);
  if (v6) {
    int v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 16) = v6;
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 64);
  return v4;
}

unint64_t _copyRangeSubselect(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 361;
  *(unsigned char *)(v4 + 4) = *(unsigned char *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyRangeFunction(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 362;
  *(unsigned char *)(v4 + 4) = *(unsigned char *)(a1 + 4);
  *(unsigned char *)(v4 + 5) = *(unsigned char *)(a1 + 5);
  *(unsigned char *)(v4 + 6) = *(unsigned char *)(a1 + 6);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  return v4;
}

unint64_t _copyRangeTableSample(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 363;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyRangeTableFunc(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 364;
  *(unsigned char *)(v4 + 4) = *(unsigned char *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copyRangeTableFuncCol(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 365;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(v4 + 25) = *(unsigned char *)(a1 + 25);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copyTypeName(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x38uLL);
  *(_DWORD *)unint64_t v4 = 366;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(v4 + 2errstart(20, 0) = *(unsigned char *)(a1 + 20);
  *(unsigned char *)(v4 + 21) = *(unsigned char *)(a1 + 21);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  return v4;
}

unint64_t _copyIndexElem(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)unint64_t v4 = 368;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  int v6 = *(const char **)(a1 + 24);
  if (v6) {
    int v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 24) = v6;
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 6errstart(20, 0) = *(_DWORD *)(a1 + 60);
  return v4;
}

unint64_t _copyColumnDef(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x70uLL);
  *(_DWORD *)unint64_t v4 = 367;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(unsigned char *)(v4 + 28) = *(unsigned char *)(a1 + 28);
  *(unsigned char *)(v4 + 29) = *(unsigned char *)(a1 + 29);
  *(unsigned char *)(v4 + 3errstart(20, 0) = *(unsigned char *)(a1 + 30);
  *(unsigned char *)(v4 + 31) = *(unsigned char *)(a1 + 31);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(unsigned char *)(v4 + 48) = *(unsigned char *)(a1 + 48);
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(unsigned char *)(v4 + 64) = *(unsigned char *)(a1 + 64);
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(_DWORD *)(v4 + 8errstart(20, 0) = *(_DWORD *)(a1 + 80);
  *(void *)(v4 + 88) = copyObjectImpl(*(void *)(a1 + 88));
  *(void *)(v4 + 96) = copyObjectImpl(*(void *)(a1 + 96));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a1 + 104);
  return v4;
}

unint64_t _copyConstraint(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xB0uLL);
  *(_DWORD *)unint64_t v4 = 369;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(v4 + 17) = *(unsigned char *)(a1 + 17);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  int v6 = *(const char **)(a1 + 40);
  if (v6) {
    int v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 4errstart(20, 0) = v6;
  *(unsigned char *)(v4 + 48) = *(unsigned char *)(a1 + 48);
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  size_t v7 = *(const char **)(a1 + 88);
  if (v7) {
    size_t v7 = (const char *)pstrdup(v7);
  }
  *(void *)(v4 + 88) = v7;
  unint64_t v8 = *(const char **)(a1 + 96);
  if (v8) {
    unint64_t v8 = (const char *)pstrdup(v8);
  }
  *(void *)(v4 + 96) = v8;
  *(unsigned char *)(v4 + 104) = *(unsigned char *)(a1 + 104);
  size_t v9 = *(const char **)(a1 + 112);
  if (v9) {
    size_t v9 = (const char *)pstrdup(v9);
  }
  *(void *)(v4 + 112) = v9;
  *(void *)(v4 + 12errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 120));
  *(void *)(v4 + 128) = copyObjectImpl(*(void *)(a1 + 128));
  *(void *)(v4 + 136) = copyObjectImpl(*(void *)(a1 + 136));
  *(void *)(v4 + 144) = copyObjectImpl(*(void *)(a1 + 144));
  *(unsigned char *)(v4 + 152) = *(unsigned char *)(a1 + 152);
  *(unsigned char *)(v4 + 153) = *(unsigned char *)(a1 + 153);
  *(unsigned char *)(v4 + 154) = *(unsigned char *)(a1 + 154);
  *(void *)(v4 + 16errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 160));
  *(_DWORD *)(v4 + 168) = *(_DWORD *)(a1 + 168);
  *(unsigned char *)(v4 + 172) = *(unsigned char *)(a1 + 172);
  *(unsigned char *)(v4 + 173) = *(unsigned char *)(a1 + 173);
  return v4;
}

unint64_t _copyDefElem(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 370;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  int v6 = *(const char **)(a1 + 16);
  if (v6) {
    int v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 16) = v6;
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a1 + 36);
  return v4;
}

unint64_t _copyLockingClause(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 383;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyRangeTblEntry(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0xF0uLL);
  *(_DWORD *)unint64_t v4 = 371;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(unsigned char *)(v4 + 12) = *(unsigned char *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(unsigned char *)(v4 + 4errstart(20, 0) = *(unsigned char *)(a1 + 40);
  *(_DWORD *)(v4 + 44) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(unsigned char *)(v4 + 88) = *(unsigned char *)(a1 + 88);
  *(void *)(v4 + 96) = copyObjectImpl(*(void *)(a1 + 96));
  *(void *)(v4 + 104) = copyObjectImpl(*(void *)(a1 + 104));
  size_t v5 = *(const char **)(a1 + 112);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 112) = v5;
  *(_DWORD *)(v4 + 12errstart(20, 0) = *(_DWORD *)(a1 + 120);
  *(unsigned char *)(v4 + 124) = *(unsigned char *)(a1 + 124);
  *(void *)(v4 + 128) = copyObjectImpl(*(void *)(a1 + 128));
  *(void *)(v4 + 136) = copyObjectImpl(*(void *)(a1 + 136));
  *(void *)(v4 + 144) = copyObjectImpl(*(void *)(a1 + 144));
  int v6 = *(const char **)(a1 + 152);
  if (v6) {
    int v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 152) = v6;
  *(void *)(v4 + 16errstart(20, 0) = *(void *)(a1 + 160);
  *(void *)(v4 + 168) = copyObjectImpl(*(void *)(a1 + 168));
  *(void *)(v4 + 176) = copyObjectImpl(*(void *)(a1 + 176));
  *(unsigned char *)(v4 + 184) = *(unsigned char *)(a1 + 184);
  *(unsigned char *)(v4 + 185) = *(unsigned char *)(a1 + 185);
  *(unsigned char *)(v4 + 186) = *(unsigned char *)(a1 + 186);
  *(_DWORD *)(v4 + 188) = *(_DWORD *)(a1 + 188);
  *(_DWORD *)(v4 + 192) = *(_DWORD *)(a1 + 192);
  *(void *)(v4 + 20errstart(20, 0) = bms_copy(*(int **)(a1 + 200));
  *(void *)(v4 + 208) = bms_copy(*(int **)(a1 + 208));
  *(void *)(v4 + 216) = bms_copy(*(int **)(a1 + 216));
  *(void *)(v4 + 224) = bms_copy(*(int **)(a1 + 224));
  *(void *)(v4 + 232) = copyObjectImpl(*(void *)(a1 + 232));
  return v4;
}

unint64_t _copyRangeTblFunction(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x40uLL);
  *(_DWORD *)unint64_t v4 = 372;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(v4 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = bms_copy(*(int **)(a1 + 56));
  return v4;
}

unint64_t _copyTableSampleClause(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 373;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyWithCheckOption(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 374;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  int v6 = *(const char **)(a1 + 16);
  if (v6) {
    int v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 16) = v6;
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 32);
  return v4;
}

unint64_t _copySortGroupClause(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t result = MemoryContextAllocZero(*v3, 0x14uLL);
  *(_DWORD *)unint64_t result = 375;
  *(_DWORD *)(result + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(result + 17) = *(unsigned char *)(a1 + 17);
  return result;
}

unint64_t _copyGroupingSet(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 376;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copyWindowClause(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x58uLL);
  *(_DWORD *)unint64_t v4 = 377;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  int v6 = *(const char **)(a1 + 16);
  if (v6) {
    int v6 = (const char *)pstrdup(v6);
  }
  *(void *)(v4 + 16) = v6;
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(v4 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(v4 + 68) = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(v4 + 72) = *(_DWORD *)(a1 + 72);
  *(unsigned char *)(v4 + 76) = *(unsigned char *)(a1 + 76);
  *(unsigned char *)(v4 + 77) = *(unsigned char *)(a1 + 77);
  *(_DWORD *)(v4 + 8errstart(20, 0) = *(_DWORD *)(a1 + 80);
  *(unsigned char *)(v4 + 84) = *(unsigned char *)(a1 + 84);
  return v4;
}

unint64_t _copyRowMarkClause(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t result = MemoryContextAllocZero(*v3, 0x14uLL);
  *(_DWORD *)unint64_t result = 384;
  *(_DWORD *)(result + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a1 + 16);
  return result;
}

unint64_t _copyWithClause(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 386;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  *(_DWORD *)(v4 + 2errstart(20, 0) = *(_DWORD *)(a1 + 20);
  return v4;
}

unint64_t _copyInferClause(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 387;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  size_t v5 = *(const char **)(a1 + 24);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 24) = v5;
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyOnConflictClause(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x28uLL);
  *(_DWORD *)unint64_t v4 = 388;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a1 + 32);
  return v4;
}

unint64_t _copyCommonTableExpr(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x58uLL);
  *(_DWORD *)unint64_t v4 = 389;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(v4 + 44) = *(unsigned char *)(a1 + 44);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a1 + 48);
  *(void *)(v4 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(v4 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(v4 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(v4 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  return v4;
}

unint64_t _copyObjectWithArgs(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 378;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 24);
  return v4;
}

unint64_t _copyAccessPriv(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 379;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

unint64_t _copyXmlSerialize(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 385;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyRoleSpec(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 390;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copyTriggerTransition(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 391;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(v4 + 17) = *(unsigned char *)(a1 + 17);
  return v4;
}

unint64_t _copyPartitionElem(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 392;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyPartitionSpec(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x20uLL);
  *(_DWORD *)unint64_t v4 = 393;
  size_t v5 = *(const char **)(a1 + 8);
  if (v5) {
    size_t v5 = (const char *)pstrdup(v5);
  }
  *(void *)(v4 + 8) = v5;
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + 24);
  return v4;
}

unint64_t _copyPartitionBoundSpec(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x30uLL);
  *(_DWORD *)unint64_t v4 = 394;
  *(unsigned char *)(v4 + 4) = *(unsigned char *)(a1 + 4);
  *(unsigned char *)(v4 + 5) = *(unsigned char *)(a1 + 5);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(v4 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(v4 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(_DWORD *)(v4 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  return v4;
}

unint64_t _copyPartitionRangeDatum(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 395;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  return v4;
}

unint64_t _copyPartitionCmd(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZeroAligned(*v3, 0x18uLL);
  *(_DWORD *)unint64_t v4 = 396;
  *(void *)(v4 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(v4 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  return v4;
}

__n128 _copyForeignKeyCacheInfo(uint64_t a1, double a2)
{
  double v3 = (uint64_t *)CurrentMemoryContext(a2);
  unint64_t v4 = MemoryContextAllocZero(*v3, 0x114uLL);
  *(_DWORD *)unint64_t v4 = 415;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 20);
  long long v6 = *(_OWORD *)(a1 + 36);
  long long v7 = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(v4 + 68) = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(v4 + 52) = v7;
  *(_OWORD *)(v4 + 36) = v6;
  *(_OWORD *)(v4 + 2errstart(20, 0) = v5;
  long long v8 = *(_OWORD *)(a1 + 132);
  long long v9 = *(_OWORD *)(a1 + 116);
  long long v10 = *(_OWORD *)(a1 + 100);
  *(_OWORD *)(v4 + 84) = *(_OWORD *)(a1 + 84);
  *(_OWORD *)(v4 + 10errstart(20, 0) = v10;
  *(_OWORD *)(v4 + 116) = v9;
  *(_OWORD *)(v4 + 132) = v8;
  long long v11 = *(_OWORD *)(a1 + 196);
  long long v12 = *(_OWORD *)(a1 + 180);
  long long v13 = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(v4 + 148) = *(_OWORD *)(a1 + 148);
  *(_OWORD *)(v4 + 164) = v13;
  *(_OWORD *)(v4 + 18errstart(20, 0) = v12;
  *(_OWORD *)(v4 + 196) = v11;
  __n128 result = *(__n128 *)(a1 + 228);
  long long v15 = *(_OWORD *)(a1 + 244);
  long long v16 = *(_OWORD *)(a1 + 260);
  *(_OWORD *)(v4 + 212) = *(_OWORD *)(a1 + 212);
  *(_OWORD *)(v4 + 26errstart(20, 0) = v16;
  *(_OWORD *)(v4 + 244) = v15;
  *(__n128 *)(v4 + 228) = result;
  return result;
}

void *CopySortFields(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(a2 + 36) = *(unsigned char *)(a1 + 36);
  *(unsigned char *)(a2 + 37) = *(unsigned char *)(a1 + 37);
  *(_DWORD *)(a2 + 4errstart(20, 0) = *(_DWORD *)(a1 + 40);
  *(void *)(a2 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(a2 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(a2 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(void *)(a2 + 72) = copyObjectImpl(*(void *)(a1 + 72));
  *(void *)(a2 + 8errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 80));
  *(void *)(a2 + 88) = bms_copy(*(int **)(a1 + 88));
  *(void *)(a2 + 96) = bms_copy(*(int **)(a1 + 96));
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 104);
  size_t v4 = 2 * *(int *)(a1 + 104);
  long long v5 = (void *)palloc(v4);
  *(void *)(a2 + 112) = v5;
  memcpy(v5, *(const void **)(a1 + 112), v4);
  size_t v6 = 4 * *(int *)(a1 + 104);
  long long v7 = (void *)palloc(v6);
  *(void *)(a2 + 12errstart(20, 0) = v7;
  memcpy(v7, *(const void **)(a1 + 120), v6);
  size_t v8 = 4 * *(int *)(a1 + 104);
  long long v9 = (void *)palloc(v8);
  *(void *)(a2 + 128) = v9;
  memcpy(v9, *(const void **)(a1 + 128), v8);
  size_t v10 = *(int *)(a1 + 104);
  long long v11 = (void *)palloc(v10);
  *(void *)(a2 + 136) = v11;
  long long v12 = *(const void **)(a1 + 136);

  return memcpy(v11, v12, v10);
}

const char *CopyCreateStmtFields(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = copyObjectImpl(*(void *)(a1 + 8));
  *(void *)(a2 + 16) = copyObjectImpl(*(void *)(a1 + 16));
  *(void *)(a2 + 24) = copyObjectImpl(*(void *)(a1 + 24));
  *(void *)(a2 + 4errstart(20, 0) = copyObjectImpl(*(void *)(a1 + 40));
  *(void *)(a2 + 32) = copyObjectImpl(*(void *)(a1 + 32));
  *(void *)(a2 + 48) = copyObjectImpl(*(void *)(a1 + 48));
  *(void *)(a2 + 56) = copyObjectImpl(*(void *)(a1 + 56));
  *(void *)(a2 + 64) = copyObjectImpl(*(void *)(a1 + 64));
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 72);
  size_t v4 = *(const char **)(a1 + 80);
  if (v4) {
    size_t v4 = (const char *)pstrdup(v4);
  }
  *(void *)(a2 + 8errstart(20, 0) = v4;
  __n128 result = *(const char **)(a1 + 88);
  if (result) {
    __n128 result = (const char *)pstrdup(result);
  }
  *(void *)(a2 + 88) = result;
  *(unsigned char *)(a2 + 96) = *(unsigned char *)(a1 + 96);
  return result;
}

void copyObjectImpl_cold_1()
{
  OUTLINED_FUNCTION_0_17();
  errmsg_internal("unrecognized node type: %d", *v0);
  errfinish("src/postgres/src_backend_nodes_copyfuncs.c", 6007, (uint64_t)"copyObjectImpl");
  __break(1u);
}

void _copyValue_cold_1()
{
  OUTLINED_FUNCTION_0_17();
  errmsg_internal("unrecognized node type: %d", *v0);
  errfinish("src/postgres/src_backend_nodes_copyfuncs.c", 5080, (uint64_t)"_copyValue");
  __break(1u);
}

void _copyAConst_cold_1()
{
  OUTLINED_FUNCTION_0_17();
  errmsg_internal("unrecognized node type: %d", *v0);
  errfinish("src/postgres/src_backend_nodes_copyfuncs.c", 2957, (uint64_t)"_copyAConst");
  __break(1u);
}

uint64_t equal(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  while (2)
  {
    uint64_t result = 0;
    if (v3 && v2)
    {
      if (*(_DWORD *)v3 == *(_DWORD *)v2)
      {
        check_stack_depth();
        uint64_t result = 1;
        switch(*(_DWORD *)v3)
        {
          case 0x66:
            uint64_t v5 = v3;
            uint64_t v6 = v2;
            return _equalAlias(v5, v6);
          case 0x67:
            return _equalRangeVar(v3, v2);
          case 0x68:
            return _equalTableFunc(v3, v2);
          case 0x6A:
            return _equalVar(v3, v2);
          case 0x6B:
            return _equalConst(v3, v2);
          case 0x6C:
            return _equalParam((_DWORD *)v3, (_DWORD *)v2);
          case 0x6D:
            return _equalAggref(v3, v2);
          case 0x6E:
            uint64_t result = equal(*(void *)(v3 + 8), *(void *)(v2 + 8));
            if (result) {
              return *(_DWORD *)(v3 + 32) == *(_DWORD *)(v2 + 32);
            }
            return result;
          case 0x6F:
            return _equalWindowFunc(v3, v2);
          case 0x70:
            return _equalSubscriptingRef(v3, v2);
          case 0x71:
            return _equalFuncExpr(v3, v2);
          case 0x72:
            uint64_t v7 = v3;
            uint64_t v8 = v2;
            return _equalNamedArgExpr(v7, v8);
          case 0x73:
            uint64_t v9 = v3;
            uint64_t v10 = v2;
            return _equalOpExpr(v9, v10);
          case 0x74:
            uint64_t v9 = v3;
            uint64_t v10 = v2;
            return _equalOpExpr(v9, v10);
          case 0x75:
            uint64_t v9 = v3;
            uint64_t v10 = v2;
            return _equalOpExpr(v9, v10);
          case 0x76:
            return _equalScalarArrayOpExpr(v3, v2);
          case 0x77:
          case 0x178:
            if (*(_DWORD *)(v3 + 4) != *(_DWORD *)(v2 + 4)) {
              return 0;
            }
            goto LABEL_12;
          case 0x78:
            uint64_t v11 = v3;
            uint64_t v12 = v2;
            return _equalSubLink(v11, v12);
          case 0x79:
            return _equalSubPlan(v3, v2);
          case 0x7A:
          case 0x100:
          case 0x14C:
          case 0x157:
          case 0x15B:
          case 0x162:
            goto LABEL_12;
          case 0x7B:
            return _equalFieldSelect(v3, v2);
          case 0x7C:
            return _equalFieldStore(v3, v2);
          case 0x7D:
            uint64_t v13 = v3;
            uint64_t v14 = v2;
            return _equalRelabelType(v13, v14);
          case 0x7E:
            uint64_t v15 = v3;
            uint64_t v16 = v2;
            return _equalCoerceViaIO(v15, v16);
          case 0x7F:
            return _equalArrayCoerceExpr(v3, v2);
          case 0x80:
          case 0x81:
          case 0x8D:
          case 0x131:
            uint64_t result = equal(*(void *)(v3 + 8), *(void *)(v2 + 8));
            if (result) {
              return *(_DWORD *)(v3 + 16) == *(_DWORD *)(v2 + 16);
            }
            return result;
          case 0x82:
            uint64_t v11 = v3;
            uint64_t v12 = v2;
            return _equalSubLink(v11, v12);
          case 0x83:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x84:
          case 0x8A:
          case 0x8F:
            if (*(_DWORD *)(v3 + 4) != *(_DWORD *)(v2 + 4)) {
              return 0;
            }
            if (*(_DWORD *)(v3 + 8) != *(_DWORD *)(v2 + 8)) {
              return 0;
            }
            return *(_DWORD *)(v3 + 12) == *(_DWORD *)(v2 + 12);
          case 0x85:
            return _equalArrayExpr(v3, v2);
          case 0x86:
            uint64_t v19 = v3;
            uint64_t v20 = v2;
            return _equalRowExpr(v19, v20);
          case 0x87:
            return _equalRowCompareExpr(v3, v2);
          case 0x88:
            return _equalCoalesceExpr(v3, v2);
          case 0x89:
            return _equalMinMaxExpr(v3, v2);
          case 0x8B:
            return _equalXmlExpr(v3, v2);
          case 0x8C:
            uint64_t v21 = v3;
            uint64_t v22 = v2;
            return _equalNullTest(v21, v22);
          case 0x8E:
            uint64_t v13 = v3;
            uint64_t v14 = v2;
            return _equalRelabelType(v13, v14);
          case 0x90:
            if (*(_DWORD *)(v3 + 4) == *(_DWORD *)(v2 + 4) && *(_DWORD *)(v3 + 8) == *(_DWORD *)(v2 + 8)) {
              return *(_DWORD *)(v3 + 12) == *(_DWORD *)(v2 + 12);
            }
            return 0;
          case 0x91:
            return _equalCurrentOfExpr(v3, v2);
          case 0x92:
            if (*(_DWORD *)(v3 + 4) != *(_DWORD *)(v2 + 4)) {
              return 0;
            }
            return *(_DWORD *)(v3 + 8) == *(_DWORD *)(v2 + 8);
          case 0x93:
            uint64_t v15 = v3;
            uint64_t v16 = v2;
            return _equalCoerceViaIO(v15, v16);
          case 0x94:
            return _equalTargetEntry(v3, v2);
          case 0x95:
          case 0x113:
          case 0x15C:
            return *(_DWORD *)(v3 + 4) == *(_DWORD *)(v2 + 4);
          case 0x96:
            return _equalJoinExpr(v3, v2);
          case 0x97:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x98:
            return _equalOnConflictExpr(v3, v2);
          case 0x99:
            return _equalIntoClause(v3, v2);
          case 0xCB:
            if (*(void *)(v3 + 8) != *(void *)(v2 + 8)) {
              return 0;
            }
            if (*(_DWORD *)(v3 + 16) != *(_DWORD *)(v2 + 16) || *(_DWORD *)(v3 + 20) != *(_DWORD *)(v2 + 20)) {
              return 0;
            }
            return *(unsigned __int8 *)(v3 + 24) == *(unsigned __int8 *)(v2 + 24);
          case 0xCD:
            return _equalRestrictInfo(v3, v2);
          case 0xCF:
            if (*(_DWORD *)(v3 + 24) != *(_DWORD *)(v2 + 24)) {
              return 0;
            }
            return *(_DWORD *)(v3 + 28) == *(_DWORD *)(v2 + 28);
          case 0xD0:
            return _equalSpecialJoinInfo(v3, v2);
          case 0xD1:
            return _equalAppendRelInfo(v3, v2);
          case 0xD2:
            return _equalPlaceHolderInfo(v3, v2);
          case 0xDD:
          case 0xDE:
          case 0xDF:
          case 0xE0:
          case 0xE1:
            return _equalValue((_DWORD *)v3, (_DWORD *)v2);
          case 0xE2:
          case 0xE3:
          case 0xE4:
            return _equalList((int *)v3, v2);
          case 0xE5:
            return _equalExtensibleNode(v3, v2);
          case 0xE6:
            uint64_t result = equal(*(void *)(v3 + 8), *(void *)(v2 + 8));
            if (result) {
              return *(_DWORD *)(v3 + 20) == *(_DWORD *)(v2 + 20);
            }
            return result;
          case 0xE7:
            return _equalQuery(v3, v2);
          case 0xE9:
            return _equalInsertStmt(v3, v2);
          case 0xEA:
            return _equalDeleteStmt((void *)v3, (void *)v2);
          case 0xEB:
            return _equalUpdateStmt((void *)v3, (void *)v2);
          case 0xEC:
            return _equalSelectStmt(v3, v2);
          case 0xED:
            return _equalAlterTableStmt(v3, v2);
          case 0xEE:
            return _equalAlterTableCmd(v3, v2);
          case 0xEF:
            return _equalAlterDomainStmt(v3, v2);
          case 0xF0:
            return _equalSetOperationStmt(v3, v2);
          case 0xF1:
            return _equalGrantStmt(v3, v2);
          case 0xF2:
            return _equalGrantRoleStmt(v3, v2);
          case 0xF3:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0xF4:
            uint64_t v23 = *(const char **)(v3 + 8);
            uint64_t v24 = v2;
            return _equalClosePortalStmt(v23, v24);
          case 0xF5:
            uint64_t v7 = v3;
            uint64_t v8 = v2;
            return _equalNamedArgExpr(v7, v8);
          case 0xF6:
            return _equalCopyStmt(v3, v2);
          case 0xF7:
            return _equalCreateStmt(v3, v2);
          case 0xF8:
            return _equalDefineStmt(v3, v2);
          case 0xF9:
            return _equalDropStmt(v3, v2);
          case 0xFA:
            return _equalTruncateStmt(v3, v2);
          case 0xFB:
            return _equalCommentStmt(v3, v2);
          case 0xFC:
            return _equalFetchStmt(v3, v2);
          case 0xFD:
            return _equalIndexStmt(v3, v2);
          case 0xFE:
            return _equalCreateFunctionStmt(v3, v2);
          case 0xFF:
            uint64_t v25 = v3;
            uint64_t v26 = v2;
            return _equalAlterFunctionStmt(v25, v26);
          case 0x101:
            return _equalRenameStmt(v3, v2);
          case 0x102:
            return _equalRuleStmt(v3, v2);
          case 0x103:
            return _equalNotifyStmt(v3, v2);
          case 0x104:
            uint64_t v23 = *(const char **)(v3 + 8);
            uint64_t v24 = v2;
            return _equalClosePortalStmt(v23, v24);
          case 0x105:
            uint64_t v23 = *(const char **)(v3 + 8);
            uint64_t v24 = v2;
            return _equalClosePortalStmt(v23, v24);
          case 0x106:
            return _equalTransactionStmt(v3, v2);
          case 0x107:
            return _equalViewStmt(v3, v2);
          case 0x108:
            uint64_t v23 = *(const char **)(v3 + 8);
            uint64_t v24 = v2;
            return _equalClosePortalStmt(v23, v24);
          case 0x109:
            int v27 = (void *)v3;
            uint64_t v28 = (void *)v2;
            return _equalCreateDomainStmt(v27, v28);
          case 0x10A:
            uint64_t v5 = v3;
            uint64_t v6 = v2;
            return _equalAlias(v5, v6);
          case 0x10B:
            uint64_t v29 = v3;
            uint64_t v30 = v2;
            return _equalDropdbStmt(v29, v30);
          case 0x10C:
            uint64_t v31 = v3;
            uint64_t v32 = v2;
            return _equalVacuumStmt(v31, v32);
          case 0x10D:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x10E:
            uint64_t v33 = v3;
            uint64_t v34 = v2;
            return _equalCreateTableAsStmt(v33, v34);
          case 0x10F:
            uint64_t v33 = v3;
            uint64_t v34 = v2;
            return _equalCreateTableAsStmt(v33, v34);
          case 0x110:
            return _equalAlterSeqStmt(v3, v2);
          case 0x111:
            return _equalVariableSetStmt(v3, v2);
          case 0x112:
            uint64_t v23 = *(const char **)(v3 + 8);
            uint64_t v24 = v2;
            return _equalClosePortalStmt(v23, v24);
          case 0x114:
            return _equalCreateTrigStmt(v3, v2);
          case 0x115:
            return _equalCreatePLangStmt(v3, v2);
          case 0x116:
            return _equalCreateRoleStmt(v3, v2);
          case 0x117:
            return _equalAlterRoleStmt(v3, v2);
          case 0x118:
          case 0x11A:
          case 0x182:
            uint64_t result = equal(*(void *)(v3 + 8), *(void *)(v2 + 8));
            if (result) {
              return *(unsigned __int8 *)(v3 + 16) == *(unsigned __int8 *)(v2 + 16);
            }
            return result;
          case 0x119:
            uint64_t v21 = v3;
            uint64_t v22 = v2;
            return _equalNullTest(v21, v22);
          case 0x11B:
            return _equalReindexStmt(v3, v2);
          case 0x11C:
          case 0x15F:
            return result;
          case 0x11D:
            uint64_t v35 = v3;
            uint64_t v36 = v2;
            return _equalCreateSchemaStmt(v35, v36);
          case 0x11E:
            uint64_t v5 = v3;
            uint64_t v6 = v2;
            return _equalAlias(v5, v6);
          case 0x11F:
            uint64_t v5 = v3;
            uint64_t v6 = v2;
            return _equalAlias(v5, v6);
          case 0x120:
            uint64_t v37 = (void *)v3;
            uint64_t v38 = (void *)v2;
            return _equalAlterUserMappingStmt(v37, v38);
          case 0x121:
            return _equalCreateConversionStmt(v3, v2);
          case 0x122:
            return _equalCreateCastStmt(v3, v2);
          case 0x123:
            return _equalCreateOpClassStmt(v3, v2);
          case 0x124:
            return _equalCreateOpFamilyStmt(v3, v2);
          case 0x125:
            uint64_t v39 = v3;
            uint64_t v40 = v2;
            return _equalAlterOpFamilyStmt(v39, v40);
          case 0x126:
            uint64_t v41 = (void *)v3;
            long long v42 = (void *)v2;
            return _equalCreateFdwStmt(v41, v42);
          case 0x127:
            uint64_t v5 = v3;
            uint64_t v6 = v2;
            return _equalAlias(v5, v6);
          case 0x128:
            uint64_t v23 = *(const char **)(v3 + 8);
            uint64_t v24 = v2;
            return _equalClosePortalStmt(v23, v24);
          case 0x129:
            return _equalDeclareCursorStmt(v3, v2);
          case 0x12A:
            return _equalCreateTableSpaceStmt((void *)v3, (void *)v2);
          case 0x12B:
            uint64_t v43 = v3;
            uint64_t v44 = v2;
            return _equalDropTableSpaceStmt(v43, v44);
          case 0x12C:
            return _equalAlterObjectDependsStmt(v3, v2);
          case 0x12D:
            return _equalAlterObjectSchemaStmt(v3, v2);
          case 0x12E:
            uint64_t v45 = v3;
            uint64_t v46 = v2;
            return _equalAlterOwnerStmt(v45, v46);
          case 0x12F:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x130:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x132:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x133:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x134:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x135:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x136:
            return _equalAlterEnumStmt(v3, v2);
          case 0x137:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x138:
            return _equalAlterTSConfigurationStmt(v3, v2);
          case 0x139:
            uint64_t v41 = (void *)v3;
            long long v42 = (void *)v2;
            return _equalCreateFdwStmt(v41, v42);
          case 0x13A:
            uint64_t v41 = (void *)v3;
            long long v42 = (void *)v2;
            return _equalCreateFdwStmt(v41, v42);
          case 0x13B:
            return _equalCreateForeignServerStmt(v3, v2);
          case 0x13C:
            return _equalAlterForeignServerStmt(v3, v2);
          case 0x13D:
            uint64_t v39 = v3;
            uint64_t v40 = v2;
            return _equalAlterOpFamilyStmt(v39, v40);
          case 0x13E:
            uint64_t v37 = (void *)v3;
            uint64_t v38 = (void *)v2;
            return _equalAlterUserMappingStmt(v37, v38);
          case 0x13F:
            return _equalDropUserMappingStmt(v3, v2);
          case 0x140:
            uint64_t v47 = v3;
            uint64_t v48 = v2;
            return _equalAlterTableSpaceOptionsStmt(v47, v48);
          case 0x141:
            return _equalAlterTableMoveAllStmt(v3, v2);
          case 0x142:
            return _equalSecLabelStmt(v3, v2);
          case 0x143:
            return _equalCreateForeignTableStmt(v3, v2);
          case 0x144:
            return _equalImportForeignSchemaStmt(v3, v2);
          case 0x145:
            uint64_t v29 = v3;
            uint64_t v30 = v2;
            return _equalDropdbStmt(v29, v30);
          case 0x146:
            uint64_t v5 = v3;
            uint64_t v6 = v2;
            return _equalAlias(v5, v6);
          case 0x147:
            return _equalAlterExtensionContentsStmt(v3, v2);
          case 0x148:
            uint64_t v49 = (void *)v3;
            int v50 = (void *)v2;
            return _equalCreateEventTrigStmt(v49, v50);
          case 0x149:
            uint64_t v43 = v3;
            uint64_t v44 = v2;
            return _equalDropTableSpaceStmt(v43, v44);
          case 0x14A:
            return _equalRefreshMatViewStmt(v3, v2);
          case 0x14B:
            return _equalReplicaIdentityStmt(v3, v2);
          case 0x14D:
            return _equalCreatePolicyStmt(v3, v2);
          case 0x14E:
            return _equalAlterPolicyStmt((void *)v3, (void *)v2);
          case 0x14F:
            return _equalCreateTransformStmt(v3, v2);
          case 0x150:
            uint64_t v47 = v3;
            uint64_t v48 = v2;
            return _equalAlterTableSpaceOptionsStmt(v47, v48);
          case 0x151:
            uint64_t v35 = v3;
            uint64_t v36 = v2;
            return _equalCreateSchemaStmt(v35, v36);
          case 0x152:
            return _equalAlterPublicationStmt(v3, v2);
          case 0x153:
            uint64_t v49 = (void *)v3;
            int v50 = (void *)v2;
            return _equalCreateEventTrigStmt(v49, v50);
          case 0x154:
            return _equalAlterSubscriptionStmt(v3, v2);
          case 0x155:
            return _equalDropSubscriptionStmt(v3, v2);
          case 0x156:
            return _equalCreateStatsStmt(v3, v2);
          case 0x158:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x159:
            uint64_t v21 = v3;
            uint64_t v22 = v2;
            return _equalNullTest(v21, v22);
          case 0x15A:
            uint64_t v45 = v3;
            uint64_t v46 = v2;
            return _equalAlterOwnerStmt(v45, v46);
          case 0x15D:
            v3 += 8;
            v2 += 8;
            if (v3 == v2) {
              return result;
            }
            continue;
          case 0x15E:
            return _equalFuncCall(v3, v2);
          case 0x160:
            uint64_t v51 = v3;
            uint64_t v52 = v2;
            return _equalAIndices(v51, v52);
          case 0x161:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x163:
            uint64_t v41 = (void *)v3;
            long long v42 = (void *)v2;
            return _equalCreateFdwStmt(v41, v42);
          case 0x164:
            uint64_t v15 = v3;
            uint64_t v16 = v2;
            return _equalCoerceViaIO(v15, v16);
          case 0x165:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x166:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x167:
            return _equalSortBy(v3, v2);
          case 0x168:
            return _equalWindowDef(v3, v2);
          case 0x169:
            uint64_t v51 = v3;
            uint64_t v52 = v2;
            return _equalAIndices(v51, v52);
          case 0x16A:
            return _equalRangeFunction(v3, v2);
          case 0x16B:
            int v27 = (void *)v3;
            uint64_t v28 = (void *)v2;
            return _equalCreateDomainStmt(v27, v28);
          case 0x16C:
            return _equalRangeTableFunc(v3, v2);
          case 0x16D:
            return _equalRangeTableFuncCol(v3, v2);
          case 0x16E:
            return _equalTypeName(v3, v2);
          case 0x16F:
            return _equalColumnDef(v3, v2);
          case 0x170:
            return _equalIndexElem(v3, v2);
          case 0x171:
            return _equalConstraint(v3, v2);
          case 0x172:
            return _equalDefElem(v3, v2);
          case 0x173:
            return _equalRangeTblEntry(v3, v2);
          case 0x174:
            return _equalRangeTblFunction(v3, v2);
          case 0x175:
            uint64_t v25 = v3;
            uint64_t v26 = v2;
            return _equalAlterFunctionStmt(v25, v26);
          case 0x176:
            return _equalWithCheckOption(v3, v2);
          case 0x177:
            return _equalSortGroupClause(v3, v2);
          case 0x179:
            return _equalWindowClause(v3, v2);
          case 0x17A:
            uint64_t v31 = v3;
            uint64_t v32 = v2;
            return _equalVacuumStmt(v31, v32);
          case 0x17B:
            uint64_t v5 = v3;
            uint64_t v6 = v2;
            return _equalAlias(v5, v6);
          case 0x17C:
            return _equalCreateOpClassItem(v3, v2);
          case 0x17D:
            uint64_t v15 = v3;
            uint64_t v16 = v2;
            return _equalCoerceViaIO(v15, v16);
          case 0x17E:
            return _equalFunctionParameter(v3, v2);
          case 0x17F:
            uint64_t v15 = v3;
            uint64_t v16 = v2;
            return _equalCoerceViaIO(v15, v16);
          case 0x180:
            return *(_DWORD *)(v3 + 4) == *(_DWORD *)(v2 + 4)
                && *(_DWORD *)(v3 + 8) == *(_DWORD *)(v2 + 8)
                && *(_DWORD *)(v3 + 12) == *(_DWORD *)(v2 + 12)
                && *(unsigned __int8 *)(v3 + 16) == *(unsigned __int8 *)(v2 + 16);
          case 0x181:
            uint64_t v25 = v3;
            uint64_t v26 = v2;
            return _equalAlterFunctionStmt(v25, v26);
          case 0x183:
            return _equalInferClause((void *)v3, (void *)v2);
          case 0x184:
            uint64_t v45 = v3;
            uint64_t v46 = v2;
            return _equalAlterOwnerStmt(v45, v46);
          case 0x185:
            return _equalCommonTableExpr(v3, v2);
          case 0x186:
            return _equalRoleSpec(v3, v2);
          case 0x187:
            return _equalTriggerTransition(v3, v2);
          case 0x188:
            return _equalPartitionElem((void *)v3, (void *)v2);
          case 0x189:
            uint64_t v5 = v3;
            uint64_t v6 = v2;
            return _equalAlias(v5, v6);
          case 0x18A:
            return _equalPartitionBoundSpec(v3, v2);
          case 0x18B:
            if (*(_DWORD *)(v3 + 4) != *(_DWORD *)(v2 + 4)) {
              return 0;
            }
LABEL_12:
            uint64_t v3 = *(void *)(v3 + 8);
            uint64_t v2 = *(void *)(v2 + 8);
            if (v3 == v2) {
              return result;
            }
            continue;
          case 0x18C:
            uint64_t v17 = v3;
            uint64_t v18 = v2;
            return _equalCaseWhen(v17, v18);
          case 0x18D:
            uint64_t v19 = v3;
            uint64_t v20 = v2;
            return _equalRowExpr(v19, v20);
          default:
            equal_cold_1();
        }
      }
      return 0;
    }
    return result;
  }
}

uint64_t _equalAlias(uint64_t a1, uint64_t a2)
{
  size_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_4;
    }
    return 0;
  }
  if (!v5 || strcmp(v4, v5)) {
    return 0;
  }
LABEL_4:
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a2 + 16);

  return equal(v6, v7);
}

uint64_t _equalRangeVar(uint64_t a1, uint64_t a2)
{
  size_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(const char **)(a1 + 16);
  uint64_t v7 = *(const char **)(a2 + 16);
  if (v6)
  {
    if (!v7 || strcmp(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(const char **)(a1 + 24);
  uint64_t v9 = *(const char **)(a2 + 24);
  if (!v8)
  {
    if (!v9) {
      goto LABEL_16;
    }
    return 0;
  }
  if (!v9 || strcmp(v8, v9)) {
    return 0;
  }
LABEL_16:
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)
    || *(unsigned __int8 *)(a1 + 33) != *(unsigned __int8 *)(a2 + 33))
  {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a2 + 40);

  return equal(v10, v11);
}

uint64_t _equalTableFunc(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
      if (result)
      {
        uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
        if (result)
        {
          uint64_t result = equal(*(void *)(a1 + 40), *(void *)(a2 + 40));
          if (result)
          {
            uint64_t result = equal(*(void *)(a1 + 48), *(void *)(a2 + 48));
            if (result)
            {
              uint64_t result = equal(*(void *)(a1 + 56), *(void *)(a2 + 56));
              if (result)
              {
                uint64_t result = equal(*(void *)(a1 + 64), *(void *)(a2 + 64));
                if (result)
                {
                  uint64_t result = equal(*(void *)(a1 + 72), *(void *)(a2 + 72));
                  if (result)
                  {
                    uint64_t result = equal(*(void *)(a1 + 80), *(void *)(a2 + 80));
                    if (result)
                    {
                      uint64_t result = bms_equal(*(unsigned int **)(a1 + 88), *(unsigned int **)(a2 + 88));
                      if (result) {
                        return *(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _equalIntoClause(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result)
    {
      uint64_t v5 = *(const char **)(a1 + 24);
      uint64_t v6 = *(const char **)(a2 + 24);
      if (v5)
      {
        if (!v6) {
          return 0;
        }
        if (strcmp(v5, v6)) {
          return 0;
        }
      }
      else if (v6)
      {
        return 0;
      }
      uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
      if (!result) {
        return result;
      }
      if (*(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
        return 0;
      }
      uint64_t v7 = *(const char **)(a1 + 48);
      uint64_t v8 = *(const char **)(a2 + 48);
      if (v7)
      {
        if (!v8 || strcmp(v7, v8)) {
          return 0;
        }
        goto LABEL_15;
      }
      if (!v8)
      {
LABEL_15:
        uint64_t result = equal(*(void *)(a1 + 56), *(void *)(a2 + 56));
        if (result) {
          return *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64);
        }
        return result;
      }
      return 0;
    }
  }
  return result;
}

BOOL _equalVar(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

BOOL _equalConst(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2 != *(_DWORD *)(a2 + 16) || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 33);
  if (*(unsigned char *)(a1 + 32) || v3 != *(unsigned __int8 *)(a2 + 33)) {
    return v3 == *(unsigned __int8 *)(a2 + 33);
  }
  else {
    return datumIsEqual(*(const char **)(a1 + 24), *(const char **)(a2 + 24), v3 != 0, v2);
  }
}

BOOL _equalParam(_DWORD *a1, _DWORD *a2)
{
  return a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

uint64_t _equalAggref(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 40), *(void *)(a2 + 40));
      if (result)
      {
        uint64_t result = equal(*(void *)(a1 + 48), *(void *)(a2 + 48));
        if (result)
        {
          uint64_t result = equal(*(void *)(a1 + 56), *(void *)(a2 + 56));
          if (result)
          {
            uint64_t result = equal(*(void *)(a1 + 64), *(void *)(a2 + 64));
            if (result)
            {
              if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72)
                && *(unsigned __int8 *)(a1 + 73) == *(unsigned __int8 *)(a2 + 73)
                && *(unsigned __int8 *)(a1 + 74) == *(unsigned __int8 *)(a2 + 74)
                && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76))
              {
                return *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80);
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _equalWindowFunc(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
    if (result)
    {
      if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
        && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44))
      {
        return *(unsigned __int8 *)(a1 + 45) == *(unsigned __int8 *)(a2 + 45);
      }
      return 0;
    }
  }
  return result;
}

uint64_t _equalSubscriptingRef(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24))
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32))
    || !equal(*(void *)(a1 + 40), *(void *)(a2 + 40)))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a2 + 48);

  return equal(v4, v5);
}

uint64_t _equalFuncExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12)
    && *(unsigned __int8 *)(a1 + 13) == *(unsigned __int8 *)(a2 + 13)
    && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24))
  {
    return equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalNamedArgExpr(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t v5 = *(const char **)(a1 + 16);
    uint64_t v6 = *(const char **)(a2 + 16);
    if (v5)
    {
      if (v6)
      {
        if (strcmp(v5, v6)) {
          return 0;
        }
        return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
      }
    }
    else if (!v6)
    {
      return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
    }
    return 0;
  }
  return result;
}

uint64_t _equalOpExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && ((v2 = *(_DWORD *)(a1 + 8), (v3 = *(_DWORD *)(a2 + 8)) != 0) ? (BOOL v4 = v2 == 0) : (BOOL v4 = 1),
        !v4 ? (BOOL v5 = v2 == v3) : (BOOL v5 = 1),
        v5
     && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
     && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
     && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
     && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)))
  {
    return equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalScalarArrayOpExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && ((v2 = *(_DWORD *)(a1 + 8), (v3 = *(_DWORD *)(a2 + 8)) != 0) ? (BOOL v4 = v2 == 0) : (BOOL v4 = 1),
        !v4 ? (BOOL v5 = v2 == v3) : (BOOL v5 = 1),
        v5
     && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12)
     && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)))
  {
    return equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalSubLink(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || !equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24)))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);

  return equal(v4, v5);
}

uint64_t _equalSubPlan(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result)
    {
      if (*(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24))
      {
        uint64_t v5 = *(const char **)(a1 + 32);
        uint64_t v6 = *(const char **)(a2 + 32);
        if (v5)
        {
          if (!v6 || strcmp(v5, v6)) {
            return 0;
          }
LABEL_12:
          if (*(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)
            || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)
            || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)
            || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52)
            || *(unsigned __int8 *)(a1 + 53) != *(unsigned __int8 *)(a2 + 53)
            || *(unsigned __int8 *)(a1 + 54) != *(unsigned __int8 *)(a2 + 54))
          {
            return 0;
          }
          uint64_t result = equal(*(void *)(a1 + 56), *(void *)(a2 + 56));
          if (result)
          {
            uint64_t result = equal(*(void *)(a1 + 64), *(void *)(a2 + 64));
            if (result)
            {
              uint64_t result = equal(*(void *)(a1 + 72), *(void *)(a2 + 72));
              if (result)
              {
                if (*(double *)(a1 + 80) != *(double *)(a2 + 80)) {
                  return 0;
                }
                return *(double *)(a1 + 88) == *(double *)(a2 + 88);
              }
            }
          }
          return result;
        }
        if (!v6) {
          goto LABEL_12;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t _equalFieldSelect(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result) {
    return *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
  }
        && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
        && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
        && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t _equalFieldStore(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
      if (result) {
        return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
      }
    }
  }
  return result;
}

uint64_t _equalRelabelType(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result) {
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
  }
        && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
        && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t _equalCoerceViaIO(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result) {
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  }
  return result;
}

uint64_t _equalArrayCoerceExpr(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result) {
      return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    }
          && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
          && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  return result;
}

uint64_t _equalCaseWhen(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a2 + 16);
    return equal(v5, v6);
  }
  return result;
}

uint64_t _equalArrayExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
  {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (result) {
    return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  }
  return result;
}

uint64_t _equalRowExpr(uint64_t a1, uint64_t a2)
{
  if (!equal(*(void *)(a1 + 8), *(void *)(a2 + 8)) || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 24);

  return equal(v4, v5);
}

uint64_t _equalRowCompareExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || !equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || !equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24))
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32)))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 40);

  return equal(v4, v5);
}

uint64_t _equalCoalesceExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)) {
    return equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  }
  else {
    return 0;
  }
}

uint64_t _equalMinMaxExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    return equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalXmlExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    if (strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
      if (result)
      {
        if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40) && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)) {
          return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t _equalNullTest(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result) {
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
  }
        && *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20);
  return result;
}

BOOL _equalCurrentOfExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

uint64_t _equalTargetEntry(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    if (*(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16))
    {
      uint64_t v5 = *(const char **)(a1 + 24);
      uint64_t v6 = *(const char **)(a2 + 24);
      if (v5)
      {
        if (v6)
        {
          if (strcmp(v5, v6)) {
            return 0;
          }
          goto LABEL_9;
        }
      }
      else if (!v6)
      {
LABEL_9:
        if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
          && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
          && *(unsigned __int16 *)(a1 + 40) == *(unsigned __int16 *)(a2 + 40))
        {
          return *(unsigned __int8 *)(a1 + 42) == *(unsigned __int8 *)(a2 + 42);
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t _equalOnConflictExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || !equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || !equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32))
    || !equal(*(void *)(a1 + 40), *(void *)(a2 + 40))
    || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a2 + 56);

  return equal(v4, v5);
}

uint64_t _equalJoinExpr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
      if (result)
      {
        uint64_t result = equal(*(void *)(a1 + 40), *(void *)(a2 + 40));
        if (result)
        {
          uint64_t result = equal(*(void *)(a1 + 48), *(void *)(a2 + 48));
          if (result) {
            return *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
          }
        }
      }
    }
  }
  return result;
}

BOOL _equalRestrictInfo(uint64_t a1, uint64_t a2)
{
  if (!equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
    || *(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || !bms_equal(*(unsigned int **)(a1 + 40), *(unsigned int **)(a2 + 40))
    || !bms_equal(*(unsigned int **)(a1 + 48), *(unsigned int **)(a2 + 48)))
  {
    return 0;
  }
  uint64_t v4 = *(unsigned int **)(a1 + 56);
  uint64_t v5 = *(unsigned int **)(a2 + 56);

  return bms_equal(v4, v5);
}

uint64_t _equalSpecialJoinInfo(uint64_t a1, uint64_t a2)
{
  if (!bms_equal(*(unsigned int **)(a1 + 8), *(unsigned int **)(a2 + 8))
    || !bms_equal(*(unsigned int **)(a1 + 16), *(unsigned int **)(a2 + 16))
    || !bms_equal(*(unsigned int **)(a1 + 24), *(unsigned int **)(a2 + 24))
    || !bms_equal(*(unsigned int **)(a1 + 32), *(unsigned int **)(a2 + 32))
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)
    || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)
    || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45)
    || *(unsigned __int8 *)(a1 + 46) != *(unsigned __int8 *)(a2 + 46)
    || *(unsigned __int8 *)(a1 + 47) != *(unsigned __int8 *)(a2 + 47)
    || !equal(*(void *)(a1 + 48), *(void *)(a2 + 48)))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a2 + 56);

  return equal(v4, v5);
}

uint64_t _equalAppendRelInfo(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
  if (result)
  {
    uint64_t v5 = *(int *)(a1 + 32);
    if (v5 != *(_DWORD *)(a2 + 32) || memcmp(*(const void **)(a1 + 40), *(const void **)(a2 + 40), 2 * v5)) {
      return 0;
    }
    return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
  }
  return result;
}

uint64_t _equalPlaceHolderInfo(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = bms_equal(*(unsigned int **)(a1 + 16), *(unsigned int **)(a2 + 16));
    if (result)
    {
      uint64_t result = bms_equal(*(unsigned int **)(a1 + 24), *(unsigned int **)(a2 + 24));
      if (result)
      {
        uint64_t result = bms_equal(*(unsigned int **)(a1 + 32), *(unsigned int **)(a2 + 32));
        if (result) {
          return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
        }
      }
    }
  }
  return result;
}

uint64_t _equalList(int *a1, uint64_t a2)
{
  int v2 = *a1;
  if (*a1 != *(_DWORD *)a2) {
    return 0;
  }
  uint64_t v5 = a1[1];
  if (v5 != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  switch(v2)
  {
    case 226:
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      do
      {
        if (v12 >= a1[1]) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = (void *)(*((void *)a1 + 2) + v11);
        }
        uint64_t result = 1;
        if (v12 >= *(int *)(a2 + 4)) {
          break;
        }
        if (!v13) {
          break;
        }
        uint64_t v14 = (void *)(*(void *)(a2 + 16) + v11);
        if (!v14) {
          break;
        }
        char v15 = equal(*v13, *v14);
        uint64_t result = 0;
        ++v12;
        v11 += 8;
      }
      while ((v15 & 1) != 0);
      break;
    case 227:
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      do
      {
        if (v17 >= v5) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = (_DWORD *)(*((void *)a1 + 2) + v16);
        }
        ++v17;
        uint64_t result = 1;
        if ((v5 & ~((int)v5 >> 31)) + 1 == v17) {
          break;
        }
        if (!v18) {
          break;
        }
        uint64_t v19 = (_DWORD *)(*(void *)(a2 + 16) + v16);
        if (!v19) {
          break;
        }
        uint64_t result = 0;
        v16 += 8;
      }
      while (*v18 == *v19);
      break;
    case 228:
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      do
      {
        if (v7 >= v5) {
          uint64_t v8 = 0;
        }
        else {
          uint64_t v8 = (_DWORD *)(*((void *)a1 + 2) + v6);
        }
        ++v7;
        uint64_t result = 1;
        if ((v5 & ~((int)v5 >> 31)) + 1 == v7) {
          break;
        }
        if (!v8) {
          break;
        }
        uint64_t v10 = (_DWORD *)(*(void *)(a2 + 16) + v6);
        if (!v10) {
          break;
        }
        uint64_t result = 0;
        v6 += 8;
      }
      while (*v8 == *v10);
      break;
    default:
      _equalList_cold_1();
  }
  return result;
}

uint64_t _equalValue(_DWORD *a1, _DWORD *a2)
{
  int v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if ((v2 - 222) >= 3)
  {
    if (v2 != 225)
    {
      if (v2 != 221) {
        _equalValue_cold_1();
      }
      if (a1[2] != a2[2]) {
        return 0;
      }
    }
    return 1;
  }
  int v3 = (const char *)*((void *)a1 + 1);
  uint64_t v4 = (const char *)*((void *)a2 + 1);
  if (v3) {
    return v4 && !strcmp(v3, v4);
  }
  return !v4;
}

uint64_t _equalExtensibleNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_4;
    }
    return 0;
  }
  if (!v5 || strcmp(*(const char **)(a1 + 8), v5)) {
    return 0;
  }
LABEL_4:
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(GetExtensibleNodeMethods(v4, 0) + 24);

  return v6(a1, a2);
}

uint64_t _equalQuery(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
  if (!result) {
    return result;
  }
  if (*(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)
    || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)
    || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45)
    || *(unsigned __int8 *)(a1 + 46) != *(unsigned __int8 *)(a2 + 46)
    || *(unsigned __int8 *)(a1 + 47) != *(unsigned __int8 *)(a2 + 47)
    || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)
    || *(unsigned __int8 *)(a1 + 49) != *(unsigned __int8 *)(a2 + 49)
    || *(unsigned __int8 *)(a1 + 50) != *(unsigned __int8 *)(a2 + 50)
    || *(unsigned __int8 *)(a1 + 51) != *(unsigned __int8 *)(a2 + 51)
    || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52))
  {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 56), *(void *)(a2 + 56));
  if (!result) {
    return result;
  }
  uint64_t result = equal(*(void *)(a1 + 64), *(void *)(a2 + 64));
  if (!result) {
    return result;
  }
  uint64_t result = equal(*(void *)(a1 + 72), *(void *)(a2 + 72));
  if (!result) {
    return result;
  }
  uint64_t result = equal(*(void *)(a1 + 80), *(void *)(a2 + 80));
  if (!result) {
    return result;
  }
  if (*(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 96), *(void *)(a2 + 96));
  if (!result) {
    return result;
  }
  uint64_t result = equal(*(void *)(a1 + 104), *(void *)(a2 + 104));
  if (!result) {
    return result;
  }
  uint64_t result = equal(*(void *)(a1 + 112), *(void *)(a2 + 112));
  if (!result) {
    return result;
  }
  uint64_t result = equal(*(void *)(a1 + 120), *(void *)(a2 + 120));
  if (!result) {
    return result;
  }
  uint64_t result = equal(*(void *)(a1 + 128), *(void *)(a2 + 128));
  if (!result) {
    return result;
  }
  uint64_t result = equal(*(void *)(a1 + 136), *(void *)(a2 + 136));
  if (!result) {
    return result;
  }
  uint64_t result = equal(*(void *)(a1 + 144), *(void *)(a2 + 144));
  if (!result) {
    return result;
  }
  uint64_t result = equal(*(void *)(a1 + 152), *(void *)(a2 + 152));
  if (!result) {
    return result;
  }
  uint64_t result = equal(*(void *)(a1 + 160), *(void *)(a2 + 160));
  if (!result) {
    return result;
  }
  uint64_t result = equal(*(void *)(a1 + 168), *(void *)(a2 + 168));
  if (!result) {
    return result;
  }
  if (*(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 184), *(void *)(a2 + 184));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 192), *(void *)(a2 + 192));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 200), *(void *)(a2 + 200));
      if (result)
      {
        uint64_t result = equal(*(void *)(a1 + 208), *(void *)(a2 + 208));
        if (result) {
          return *(_DWORD *)(a1 + 220) == *(_DWORD *)(a2 + 220);
        }
      }
    }
  }
  return result;
}

uint64_t _equalInsertStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
      if (result)
      {
        uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
        if (result)
        {
          uint64_t result = equal(*(void *)(a1 + 40), *(void *)(a2 + 40));
          if (result)
          {
            uint64_t result = equal(*(void *)(a1 + 48), *(void *)(a2 + 48));
            if (result) {
              return *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _equalDeleteStmt(void *a1, void *a2)
{
  if (!equal(a1[1], a2[1])
    || !equal(a1[2], a2[2])
    || !equal(a1[3], a2[3])
    || !equal(a1[4], a2[4]))
  {
    return 0;
  }
  uint64_t v4 = a1[5];
  uint64_t v5 = a2[5];

  return equal(v4, v5);
}

uint64_t _equalUpdateStmt(void *a1, void *a2)
{
  if (!equal(a1[1], a2[1])
    || !equal(a1[2], a2[2])
    || !equal(a1[3], a2[3])
    || !equal(a1[4], a2[4])
    || !equal(a1[5], a2[5]))
  {
    return 0;
  }
  uint64_t v4 = a1[6];
  uint64_t v5 = a2[6];

  return equal(v4, v5);
}

uint64_t _equalSelectStmt(uint64_t a1, uint64_t a2)
{
  if (!equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || !equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24))
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32))
    || !equal(*(void *)(a1 + 40), *(void *)(a2 + 40))
    || !equal(*(void *)(a1 + 48), *(void *)(a2 + 48))
    || !equal(*(void *)(a1 + 56), *(void *)(a2 + 56))
    || !equal(*(void *)(a1 + 64), *(void *)(a2 + 64))
    || !equal(*(void *)(a1 + 72), *(void *)(a2 + 72))
    || !equal(*(void *)(a1 + 80), *(void *)(a2 + 80))
    || !equal(*(void *)(a1 + 88), *(void *)(a2 + 88))
    || !equal(*(void *)(a1 + 96), *(void *)(a2 + 96))
    || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)
    || !equal(*(void *)(a1 + 112), *(void *)(a2 + 112))
    || !equal(*(void *)(a1 + 120), *(void *)(a2 + 120))
    || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128)
    || *(unsigned __int8 *)(a1 + 132) != *(unsigned __int8 *)(a2 + 132)
    || !equal(*(void *)(a1 + 136), *(void *)(a2 + 136)))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 144);
  uint64_t v5 = *(void *)(a2 + 144);

  return equal(v4, v5);
}

uint64_t _equalSetOperationStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)
    || !equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24))
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32))
    || !equal(*(void *)(a1 + 40), *(void *)(a2 + 40))
    || !equal(*(void *)(a1 + 48), *(void *)(a2 + 48)))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a2 + 56);

  return equal(v4, v5);
}

uint64_t _equalAlterTableStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result) {
      return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    }
          && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28);
  }
  return result;
}

uint64_t _equalAlterTableCmd(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_7;
    }
    return 0;
  }
  if (!v5) {
    return 0;
  }
  if (strcmp(v4, v5)) {
    return 0;
  }
LABEL_7:
  if (*(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
    if (result)
    {
      if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)) {
        return *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
      }
      return 0;
    }
  }
  return result;
}

uint64_t _equalAlterDomainStmt(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (!result) {
    return result;
  }
  uint64_t v5 = *(const char **)(a1 + 16);
  uint64_t v6 = *(const char **)(a2 + 16);
  if (!v5)
  {
    if (!v6) {
      goto LABEL_8;
    }
    return 0;
  }
  if (!v6) {
    return 0;
  }
  if (strcmp(v5, v6)) {
    return 0;
  }
LABEL_8:
  uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
  if (result)
  {
    if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)) {
      return *(unsigned __int8 *)(a1 + 36) == *(unsigned __int8 *)(a2 + 36);
    }
    return 0;
  }
  return result;
}

uint64_t _equalGrantStmt(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
      if (result)
      {
        if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40)) {
          return *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t _equalGrantRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result)
    {
      if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
        && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25))
      {
        uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
        if (result) {
          return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t _equalDeclareCursorStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);

  return equal(v6, v7);
}

uint64_t _equalClosePortalStmt(const char *a1, uint64_t a2)
{
  int v2 = *(const char **)(a2 + 8);
  if (a1 && v2)
  {
    if (strcmp(a1, v2)) {
      return 0;
    }
  }
  else if (v2 != a1)
  {
    return 0;
  }
  return 1;
}

uint64_t _equalCopyStmt(uint64_t a1, uint64_t a2)
{
  if (!equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || !equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24))
    || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)
    || *(unsigned __int8 *)(a1 + 33) != *(unsigned __int8 *)(a2 + 33))
  {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 40);
  uint64_t v5 = *(const char **)(a2 + 40);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (!equal(*(void *)(a1 + 48), *(void *)(a2 + 48))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a2 + 56);

  return equal(v6, v7);
}

uint64_t _equalCreateStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
      if (result)
      {
        uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
        if (result)
        {
          uint64_t result = equal(*(void *)(a1 + 40), *(void *)(a2 + 40));
          if (result)
          {
            uint64_t result = equal(*(void *)(a1 + 48), *(void *)(a2 + 48));
            if (result)
            {
              uint64_t result = equal(*(void *)(a1 + 56), *(void *)(a2 + 56));
              if (result)
              {
                uint64_t result = equal(*(void *)(a1 + 64), *(void *)(a2 + 64));
                if (result)
                {
                  if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72))
                  {
                    uint64_t v5 = *(const char **)(a1 + 80);
                    uint64_t v6 = *(const char **)(a2 + 80);
                    if (v5)
                    {
                      if (!v6 || strcmp(v5, v6)) {
                        return 0;
                      }
                    }
                    else if (v6)
                    {
                      return 0;
                    }
                    uint64_t v7 = *(const char **)(a1 + 88);
                    uint64_t v8 = *(const char **)(a2 + 88);
                    if (v7)
                    {
                      if (!v8 || strcmp(v7, v8)) {
                        return 0;
                      }
                      return *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
                    }
                    if (!v8) {
                      return *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
                    }
                    return 0;
                  }
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _equalDefineStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
      if (result)
      {
        if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40)) {
          return *(unsigned __int8 *)(a1 + 41) == *(unsigned __int8 *)(a2 + 41);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t _equalDropStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result) {
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
  }
        && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
        && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
        && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25);
  return result;
}

uint64_t _equalTruncateStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result) {
    return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
  }
        && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t _equalCommentStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (!result) {
    return result;
  }
  uint64_t v5 = *(const char **)(a1 + 16);
  uint64_t v6 = *(const char **)(a2 + 16);
  if (!v5) {
    return !v6;
  }
  if (!v6) {
    return 0;
  }
  return !strcmp(v5, v6);
}

uint64_t _equalSecLabelStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (!result) {
    return result;
  }
  uint64_t v5 = *(const char **)(a1 + 16);
  uint64_t v6 = *(const char **)(a2 + 16);
  if (!v5)
  {
    if (v6) {
      return 0;
    }
    goto LABEL_9;
  }
  if (!v6) {
    return 0;
  }
  if (!strcmp(v5, v6))
  {
LABEL_9:
    uint64_t v7 = *(const char **)(a1 + 24);
    uint64_t v8 = *(const char **)(a2 + 24);
    if (v7) {
      return v8 && !strcmp(v7, v8);
    }
    return !v8;
  }
  return 0;
}

BOOL _equalFetchStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4) || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 16);
  uint64_t v5 = *(const char **)(a2 + 16);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
}

uint64_t _equalIndexStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    if (strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (result)
  {
    uint64_t v7 = *(const char **)(a1 + 24);
    uint64_t v8 = *(const char **)(a2 + 24);
    if (v7)
    {
      if (!v8 || strcmp(v7, v8)) {
        return 0;
      }
    }
    else if (v8)
    {
      return 0;
    }
    uint64_t v9 = *(const char **)(a1 + 32);
    uint64_t v10 = *(const char **)(a2 + 32);
    if (v9)
    {
      if (!v10 || strcmp(v9, v10)) {
        return 0;
      }
    }
    else if (v10)
    {
      return 0;
    }
    uint64_t result = equal(*(void *)(a1 + 40), *(void *)(a2 + 40));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 48), *(void *)(a2 + 48));
      if (result)
      {
        uint64_t result = equal(*(void *)(a1 + 56), *(void *)(a2 + 56));
        if (result)
        {
          uint64_t result = equal(*(void *)(a1 + 64), *(void *)(a2 + 64));
          if (result)
          {
            uint64_t result = equal(*(void *)(a1 + 72), *(void *)(a2 + 72));
            if (result)
            {
              uint64_t v11 = *(const char **)(a1 + 80);
              uint64_t v12 = *(const char **)(a2 + 80);
              if (v11)
              {
                if (!v12 || strcmp(v11, v12)) {
                  return 0;
                }
              }
              else if (v12)
              {
                return 0;
              }
              if (*(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88)
                && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92)
                && *(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96)
                && *(_DWORD *)(a1 + 100) == *(_DWORD *)(a2 + 100)
                && *(unsigned __int8 *)(a1 + 104) == *(unsigned __int8 *)(a2 + 104)
                && *(unsigned __int8 *)(a1 + 105) == *(unsigned __int8 *)(a2 + 105)
                && *(unsigned __int8 *)(a1 + 106) == *(unsigned __int8 *)(a2 + 106)
                && *(unsigned __int8 *)(a1 + 107) == *(unsigned __int8 *)(a2 + 107)
                && *(unsigned __int8 *)(a1 + 108) == *(unsigned __int8 *)(a2 + 108)
                && *(unsigned __int8 *)(a1 + 109) == *(unsigned __int8 *)(a2 + 109)
                && *(unsigned __int8 *)(a1 + 110) == *(unsigned __int8 *)(a2 + 110)
                && *(unsigned __int8 *)(a1 + 111) == *(unsigned __int8 *)(a2 + 111))
              {
                return *(unsigned __int8 *)(a1 + 112) == *(unsigned __int8 *)(a2 + 112);
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _equalCreateStatsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
      if (result)
      {
        uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
        if (result)
        {
          uint64_t v5 = *(const char **)(a1 + 40);
          uint64_t v6 = *(const char **)(a2 + 40);
          if (!v5)
          {
            if (v6) {
              return 0;
            }
            return *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48);
          }
          if (v6)
          {
            if (strcmp(v5, v6)) {
              return 0;
            }
            return *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48);
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t _equalCreateFunctionStmt(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4)
    || *(unsigned __int8 *)(a1 + 5) != *(unsigned __int8 *)(a2 + 5)
    || !equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || !equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24)))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);

  return equal(v4, v5);
}

uint64_t _equalFunctionParameter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (!equal(*(void *)(a1 + 16), *(void *)(a2 + 16)) || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a2 + 32);

  return equal(v6, v7);
}

uint64_t _equalAlterFunctionStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4) || !equal(*(void *)(a1 + 8), *(void *)(a2 + 8))) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);

  return equal(v4, v5);
}

uint64_t _equalRenameStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
    if (result)
    {
      uint64_t v5 = *(const char **)(a1 + 32);
      uint64_t v6 = *(const char **)(a2 + 32);
      if (v5)
      {
        if (!v6 || strcmp(v5, v6)) {
          return 0;
        }
      }
      else if (v6)
      {
        return 0;
      }
      uint64_t v7 = *(const char **)(a1 + 40);
      uint64_t v8 = *(const char **)(a2 + 40);
      if (v7)
      {
        if (v8 && !strcmp(v7, v8))
        {
LABEL_17:
          if (*(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)) {
            return *(unsigned __int8 *)(a1 + 52) == *(unsigned __int8 *)(a2 + 52);
          }
        }
      }
      else if (!v8)
      {
        goto LABEL_17;
      }
      return 0;
    }
  }
  return result;
}

uint64_t _equalAlterObjectDependsStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
      if (result) {
        return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
      }
    }
  }
  return result;
}

uint64_t _equalAlterObjectSchemaStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result)
    {
      uint64_t v5 = *(const char **)(a1 + 24);
      uint64_t v6 = *(const char **)(a2 + 24);
      if (v5)
      {
        if (v6)
        {
          if (strcmp(v5, v6)) {
            return 0;
          }
          return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
        }
      }
      else if (!v6)
      {
        return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
      }
      return 0;
    }
  }
  return result;
}

uint64_t _equalAlterOwnerStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || !equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || !equal(*(void *)(a1 + 16), *(void *)(a2 + 16)))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 24);

  return equal(v4, v5);
}

uint64_t _equalRuleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t v5 = *(const char **)(a1 + 16);
    uint64_t v6 = *(const char **)(a2 + 16);
    if (v5)
    {
      if (!v6) {
        return 0;
      }
      if (strcmp(v5, v6)) {
        return 0;
      }
    }
    else if (v6)
    {
      return 0;
    }
    uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
    if (!result) {
      return result;
    }
    if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32) && *(unsigned __int8 *)(a1 + 36) == *(unsigned __int8 *)(a2 + 36))
    {
      uint64_t result = equal(*(void *)(a1 + 40), *(void *)(a2 + 40));
      if (result) {
        return *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48);
      }
      return result;
    }
    return 0;
  }
  return result;
}

BOOL _equalNotifyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(const char **)(a1 + 16);
  uint64_t v7 = *(const char **)(a2 + 16);
  if (!v6) {
    return !v7;
  }
  return v7 && !strcmp(v6, v7);
}

uint64_t _equalTransactionStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (!result) {
    return result;
  }
  uint64_t v5 = *(const char **)(a1 + 16);
  uint64_t v6 = *(const char **)(a2 + 16);
  if (!v5)
  {
    if (v6) {
      return 0;
    }
    goto LABEL_9;
  }
  if (!v6) {
    return 0;
  }
  if (!strcmp(v5, v6))
  {
LABEL_9:
    uint64_t v7 = *(const char **)(a1 + 24);
    uint64_t v8 = *(const char **)(a2 + 24);
    if (v7)
    {
      if (!v8 || strcmp(v7, v8)) {
        return 0;
      }
      return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
    }
    if (!v8) {
      return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
    }
    return 0;
  }
  return 0;
}

uint64_t _equalAlterEnumStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t v5 = *(const char **)(a1 + 16);
    uint64_t v6 = *(const char **)(a2 + 16);
    if (v5)
    {
      if (!v6) {
        return 0;
      }
      if (strcmp(v5, v6)) {
        return 0;
      }
    }
    else if (v6)
    {
      return 0;
    }
    uint64_t v7 = *(const char **)(a1 + 24);
    uint64_t v8 = *(const char **)(a2 + 24);
    if (v7)
    {
      if (!v8 || strcmp(v7, v8)) {
        return 0;
      }
    }
    else if (v8)
    {
      return 0;
    }
    uint64_t v9 = *(const char **)(a1 + 32);
    uint64_t v10 = *(const char **)(a2 + 32);
    if (v9)
    {
      if (v10 && !strcmp(v9, v10))
      {
LABEL_18:
        if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40)) {
          return *(unsigned __int8 *)(a1 + 41) == *(unsigned __int8 *)(a2 + 41);
        }
      }
    }
    else if (!v10)
    {
      goto LABEL_18;
    }
    return 0;
  }
  return result;
}

uint64_t _equalViewStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
      if (result)
      {
        if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
        {
          uint64_t result = equal(*(void *)(a1 + 40), *(void *)(a2 + 40));
          if (result) {
            return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t _equalCreateDomainStmt(void *a1, void *a2)
{
  if (!equal(a1[1], a2[1]) || !equal(a1[2], a2[2]) || !equal(a1[3], a2[3])) {
    return 0;
  }
  uint64_t v4 = a1[4];
  uint64_t v5 = a2[4];

  return equal(v4, v5);
}

uint64_t _equalCreateOpClassStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (!result) {
    return result;
  }
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (!result) {
    return result;
  }
  uint64_t v5 = *(const char **)(a1 + 24);
  uint64_t v6 = *(const char **)(a2 + 24);
  if (v5)
  {
    if (v6)
    {
      if (strcmp(v5, v6)) {
        return 0;
      }
      goto LABEL_9;
    }
    return 0;
  }
  if (v6) {
    return 0;
  }
LABEL_9:
  uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 40), *(void *)(a2 + 40));
    if (result) {
      return *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48);
    }
  }
  return result;
}

uint64_t _equalCreateOpClassItem(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || !equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24))
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32)))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 40);

  return equal(v4, v5);
}

uint64_t _equalCreateOpFamilyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t v5 = *(const char **)(a1 + 16);
    uint64_t v6 = *(const char **)(a2 + 16);
    if (v5)
    {
      if (v6) {
        return !strcmp(v5, v6);
      }
    }
    else if (!v6)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _equalAlterOpFamilyStmt(uint64_t a1, uint64_t a2)
{
  if (!equal(*(void *)(a1 + 8), *(void *)(a2 + 8))) {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 16);
  uint64_t v5 = *(const char **)(a2 + 16);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a2 + 32);

  return equal(v6, v7);
}

uint64_t _equalDropdbStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);

  return equal(v6, v7);
}

uint64_t _equalVacuumStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result) {
      return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
    }
  }
  return result;
}

uint64_t _equalCreateTableAsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result) {
      return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    }
          && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28)
          && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29);
  }
  return result;
}

uint64_t _equalRefreshMatViewStmt(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4)
    && *(unsigned __int8 *)(a1 + 5) == *(unsigned __int8 *)(a2 + 5))
  {
    return equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  }
  else
  {
    return 0;
  }
}

uint64_t _equalReplicaIdentityStmt(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4)) {
    return 0;
  }
  int v2 = *(const char **)(a1 + 8);
  int v3 = *(const char **)(a2 + 8);
  if (v2)
  {
    if (!v3 || strcmp(v2, v3)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  return 1;
}

uint64_t _equalAlterSeqStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result) {
      return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
    }
          && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25);
  }
  return result;
}

uint64_t _equalVariableSetStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (v5)
    {
      if (strcmp(v4, v5)) {
        return 0;
      }
      goto LABEL_8;
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_8:
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (result) {
    return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  }
  return result;
}

uint64_t _equalCreateTableSpaceStmt(void *a1, void *a2)
{
  uint64_t v4 = (const char *)a1[1];
  uint64_t v5 = (const char *)a2[1];
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (!equal(a1[2], a2[2])) {
    return 0;
  }
  uint64_t v6 = (const char *)a1[3];
  uint64_t v7 = (const char *)a2[3];
  if (!v6)
  {
    if (!v7) {
      goto LABEL_10;
    }
    return 0;
  }
  if (!v7 || strcmp(v6, v7)) {
    return 0;
  }
LABEL_10:
  uint64_t v8 = a1[4];
  uint64_t v9 = a2[4];

  return equal(v8, v9);
}

BOOL _equalDropTableSpaceStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

uint64_t _equalAlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (v5)
    {
      if (strcmp(v4, v5)) {
        return 0;
      }
      goto LABEL_7;
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_7:
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (result) {
    return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  }
  return result;
}

uint64_t _equalAlterTableMoveAllStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    if (strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
  if (result)
  {
    uint64_t v7 = *(const char **)(a1 + 32);
    uint64_t v8 = *(const char **)(a2 + 32);
    if (v7)
    {
      if (!v8 || strcmp(v7, v8)) {
        return 0;
      }
      return *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
    }
    if (!v8) {
      return *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
    }
    return 0;
  }
  return result;
}

uint64_t _equalAlterExtensionContentsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16) || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);

  return equal(v6, v7);
}

uint64_t _equalCreateFdwStmt(void *a1, void *a2)
{
  uint64_t v4 = (const char *)a1[1];
  uint64_t v5 = (const char *)a2[1];
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (!equal(a1[2], a2[2])) {
    return 0;
  }
  uint64_t v6 = a1[3];
  uint64_t v7 = a2[3];

  return equal(v6, v7);
}

uint64_t _equalCreateForeignServerStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(const char **)(a1 + 16);
  uint64_t v7 = *(const char **)(a2 + 16);
  if (v6)
  {
    if (!v7 || strcmp(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(const char **)(a1 + 24);
  uint64_t v9 = *(const char **)(a2 + 24);
  if (v8)
  {
    if (!v9 || strcmp(v8, v9)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v10 = *(const char **)(a1 + 32);
  uint64_t v11 = *(const char **)(a2 + 32);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_21;
    }
    return 0;
  }
  if (!v11 || strcmp(v10, v11)) {
    return 0;
  }
LABEL_21:
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a2 + 48);

  return equal(v12, v13);
}

uint64_t _equalAlterForeignServerStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    if (strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v7 = *(const char **)(a1 + 16);
  uint64_t v8 = *(const char **)(a2 + 16);
  if (!v7)
  {
    if (!v8) {
      goto LABEL_12;
    }
    return 0;
  }
  if (!v8 || strcmp(v7, v8)) {
    return 0;
  }
LABEL_12:
  uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
  if (result) {
    return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
  }
  return result;
}

uint64_t _equalAlterUserMappingStmt(void *a1, void *a2)
{
  if (!equal(a1[1], a2[1])) {
    return 0;
  }
  uint64_t v4 = (const char *)a1[2];
  uint64_t v5 = (const char *)a2[2];
  if (!v4)
  {
    if (!v5) {
      goto LABEL_5;
    }
    return 0;
  }
  if (!v5 || strcmp(v4, v5)) {
    return 0;
  }
LABEL_5:
  uint64_t v6 = a1[3];
  uint64_t v7 = a2[3];

  return equal(v6, v7);
}

uint64_t _equalDropUserMappingStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t v5 = *(const char **)(a1 + 16);
    uint64_t v6 = *(const char **)(a2 + 16);
    if (v5)
    {
      if (v6)
      {
        if (strcmp(v5, v6)) {
          return 0;
        }
        return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
      }
    }
    else if (!v6)
    {
      return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
    }
    return 0;
  }
  return result;
}

uint64_t _equalCreateForeignTableStmt(uint64_t a1, uint64_t a2)
{
  if (!_equalCreateStmt(a1, a2)) {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 104);
  uint64_t v5 = *(const char **)(a2 + 104);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_5;
    }
    return 0;
  }
  if (!v5 || strcmp(v4, v5)) {
    return 0;
  }
LABEL_5:
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a2 + 112);

  return equal(v6, v7);
}

uint64_t _equalImportForeignSchemaStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(const char **)(a1 + 16);
  uint64_t v7 = *(const char **)(a2 + 16);
  if (v6)
  {
    if (!v7 || strcmp(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(const char **)(a1 + 24);
  uint64_t v9 = *(const char **)(a2 + 24);
  if (!v8)
  {
    if (!v9) {
      goto LABEL_16;
    }
    return 0;
  }
  if (!v9 || strcmp(v8, v9)) {
    return 0;
  }
LABEL_16:
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32) || !equal(*(void *)(a1 + 40), *(void *)(a2 + 40))) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a2 + 48);

  return equal(v10, v11);
}

uint64_t _equalCreateTransformStmt(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4)
    || !equal(*(void *)(a1 + 8), *(void *)(a2 + 8)))
  {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 16);
  uint64_t v5 = *(const char **)(a2 + 16);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (!equal(*(void *)(a1 + 24), *(void *)(a2 + 24))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a2 + 32);

  return equal(v6, v7);
}

uint64_t _equalCreateTrigStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (!equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24))
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32))
    || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)
    || *(unsigned __int16 *)(a1 + 42) != *(unsigned __int16 *)(a2 + 42)
    || *(unsigned __int16 *)(a1 + 44) != *(unsigned __int16 *)(a2 + 44)
    || !equal(*(void *)(a1 + 48), *(void *)(a2 + 48))
    || !equal(*(void *)(a1 + 56), *(void *)(a2 + 56))
    || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64)
    || !equal(*(void *)(a1 + 72), *(void *)(a2 + 72))
    || *(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80)
    || *(unsigned __int8 *)(a1 + 81) != *(unsigned __int8 *)(a2 + 81))
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a2 + 88);

  return equal(v6, v7);
}

uint64_t _equalCreateEventTrigStmt(void *a1, void *a2)
{
  uint64_t v4 = (const char *)a1[1];
  uint64_t v5 = (const char *)a2[1];
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = (const char *)a1[2];
  uint64_t v7 = (const char *)a2[2];
  if (!v6)
  {
    if (!v7) {
      goto LABEL_11;
    }
    return 0;
  }
  if (!v7 || strcmp(v6, v7)) {
    return 0;
  }
LABEL_11:
  if (!equal(a1[3], a2[3])) {
    return 0;
  }
  uint64_t v8 = a1[4];
  uint64_t v9 = a2[4];

  return equal(v8, v9);
}

uint64_t _equalCreatePLangStmt(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4)) {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (v5)
    {
      if (strcmp(v4, v5)) {
        return 0;
      }
      goto LABEL_8;
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_8:
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
      if (result) {
        return *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
      }
    }
  }
  return result;
}

uint64_t _equalCreateRoleStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_5;
    }
    return 0;
  }
  if (!v5 || strcmp(v4, v5)) {
    return 0;
  }
LABEL_5:
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a2 + 16);

  return equal(v6, v7);
}

uint64_t _equalAlterRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result) {
      return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
    }
  }
  return result;
}

uint64_t _equalReindexStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (!result) {
    return result;
  }
  uint64_t v5 = *(const char **)(a1 + 16);
  uint64_t v6 = *(const char **)(a2 + 16);
  if (!v5)
  {
    if (!v6)
    {
LABEL_9:
      if (*(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)) {
        return *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28);
      }
    }
    return 0;
  }
  if (!v6) {
    return 0;
  }
  if (!strcmp(v5, v6)) {
    goto LABEL_9;
  }
  return 0;
}

uint64_t _equalCreateSchemaStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (v5)
    {
      if (strcmp(v4, v5)) {
        return 0;
      }
      goto LABEL_7;
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_7:
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
    if (result) {
      return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
    }
  }
  return result;
}

uint64_t _equalCreateConversionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t v5 = *(const char **)(a1 + 16);
    uint64_t v6 = *(const char **)(a2 + 16);
    if (v5)
    {
      if (!v6) {
        return 0;
      }
      if (strcmp(v5, v6)) {
        return 0;
      }
    }
    else if (v6)
    {
      return 0;
    }
    uint64_t v7 = *(const char **)(a1 + 24);
    uint64_t v8 = *(const char **)(a2 + 24);
    if (v7)
    {
      if (!v8 || strcmp(v7, v8)) {
        return 0;
      }
      goto LABEL_13;
    }
    if (!v8)
    {
LABEL_13:
      uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
      if (result) {
        return *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t _equalCreateCastStmt(uint64_t a1, uint64_t a2)
{
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
      if (result) {
        return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      }
            && *(unsigned __int8 *)(a1 + 36) == *(unsigned __int8 *)(a2 + 36);
    }
  }
  return result;
}

uint64_t _equalAlterTSConfigurationStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 8), *(void *)(a2 + 8));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
      if (result) {
        return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      }
            && *(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33)
            && *(unsigned __int8 *)(a1 + 34) == *(unsigned __int8 *)(a2 + 34);
    }
  }
  return result;
}

uint64_t _equalCreatePolicyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (!equal(*(void *)(a1 + 16), *(void *)(a2 + 16))) {
    return 0;
  }
  uint64_t v6 = *(const char **)(a1 + 24);
  uint64_t v7 = *(const char **)(a2 + 24);
  if (!v6)
  {
    if (!v7) {
      goto LABEL_12;
    }
    return 0;
  }
  if (!v7 || strcmp(v6, v7)) {
    return 0;
  }
LABEL_12:
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)
    || !equal(*(void *)(a1 + 40), *(void *)(a2 + 40))
    || !equal(*(void *)(a1 + 48), *(void *)(a2 + 48)))
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a2 + 56);

  return equal(v8, v9);
}

uint64_t _equalAlterPolicyStmt(void *a1, void *a2)
{
  uint64_t v4 = (const char *)a1[1];
  uint64_t v5 = (const char *)a2[1];
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (!equal(a1[2], a2[2]) || !equal(a1[3], a2[3]) || !equal(a1[4], a2[4])) {
    return 0;
  }
  uint64_t v6 = a1[5];
  uint64_t v7 = a2[5];

  return equal(v6, v7);
}

uint64_t _equalAlterPublicationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    if (strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
    if (result)
    {
      if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)) {
        return *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36);
      }
      return 0;
    }
  }
  return result;
}

uint64_t _equalAlterSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(const char **)(a1 + 16);
  uint64_t v7 = *(const char **)(a2 + 16);
  if (!v6)
  {
    if (!v7) {
      goto LABEL_12;
    }
    return 0;
  }
  if (!v7 || strcmp(v6, v7)) {
    return 0;
  }
LABEL_12:
  if (!equal(*(void *)(a1 + 24), *(void *)(a2 + 24))) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a2 + 32);

  return equal(v8, v9);
}

BOOL _equalDropSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)) {
    return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  }
  return 0;
}

uint64_t _equalFuncCall(uint64_t a1, uint64_t a2)
{
  if (!equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || !equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24))
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32))
    || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)
    || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41)
    || *(unsigned __int8 *)(a1 + 42) != *(unsigned __int8 *)(a2 + 42)
    || *(unsigned __int8 *)(a1 + 43) != *(unsigned __int8 *)(a2 + 43))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a2 + 48);

  return equal(v4, v5);
}

uint64_t _equalAIndices(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4)
    || !equal(*(void *)(a1 + 8), *(void *)(a2 + 8)))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);

  return equal(v4, v5);
}

uint64_t _equalSortBy(uint64_t a1, uint64_t a2)
{
  if (!equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 24);

  return equal(v4, v5);
}

uint64_t _equalWindowDef(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(const char **)(a1 + 16);
  uint64_t v7 = *(const char **)(a2 + 16);
  if (!v6)
  {
    if (!v7) {
      goto LABEL_11;
    }
    return 0;
  }
  if (!v7 || strcmp(v6, v7)) {
    return 0;
  }
LABEL_11:
  if (!equal(*(void *)(a1 + 24), *(void *)(a2 + 24))
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32))
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)
    || !equal(*(void *)(a1 + 48), *(void *)(a2 + 48)))
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a2 + 56);

  return equal(v8, v9);
}

uint64_t _equalRangeFunction(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4)
    || *(unsigned __int8 *)(a1 + 5) != *(unsigned __int8 *)(a2 + 5)
    || *(unsigned __int8 *)(a1 + 6) != *(unsigned __int8 *)(a2 + 6)
    || !equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || !equal(*(void *)(a1 + 16), *(void *)(a2 + 16)))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 24);

  return equal(v4, v5);
}

uint64_t _equalRangeTableFunc(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4)
    || !equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || !equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24))
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32)))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 40);

  return equal(v4, v5);
}

uint64_t _equalRangeTableFuncCol(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (!equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)
    || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25)
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32)))
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a2 + 40);

  return equal(v6, v7);
}

uint64_t _equalTypeName(uint64_t a1, uint64_t a2)
{
  if (!equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    || *(unsigned __int8 *)(a1 + 20) != *(unsigned __int8 *)(a2 + 20)
    || *(unsigned __int8 *)(a1 + 21) != *(unsigned __int8 *)(a2 + 21)
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24))
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 40);

  return equal(v4, v5);
}

uint64_t _equalIndexElem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    if (strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (!result) {
    return result;
  }
  uint64_t v7 = *(const char **)(a1 + 24);
  uint64_t v8 = *(const char **)(a2 + 24);
  if (v7)
  {
    if (!v8 || strcmp(v7, v8)) {
      return 0;
    }
  }
  else if (v8)
  {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 40), *(void *)(a2 + 40));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 48), *(void *)(a2 + 48));
      if (result)
      {
        if (*(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56)) {
          return *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t _equalColumnDef(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (!equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28)
    || *(unsigned __int8 *)(a1 + 29) != *(unsigned __int8 *)(a2 + 29)
    || *(unsigned __int8 *)(a1 + 30) != *(unsigned __int8 *)(a2 + 30)
    || *(unsigned __int8 *)(a1 + 31) != *(unsigned __int8 *)(a2 + 31)
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32))
    || !equal(*(void *)(a1 + 40), *(void *)(a2 + 40))
    || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)
    || !equal(*(void *)(a1 + 56), *(void *)(a2 + 56))
    || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64)
    || !equal(*(void *)(a1 + 72), *(void *)(a2 + 72))
    || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)
    || !equal(*(void *)(a1 + 88), *(void *)(a2 + 88)))
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a2 + 96);

  return equal(v6, v7);
}

uint64_t _equalConstraint(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    if (strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
    || *(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17)
    || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
  {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
  if (result)
  {
    uint64_t v7 = *(const char **)(a1 + 40);
    uint64_t v8 = *(const char **)(a2 + 40);
    if (v7)
    {
      if (!v8 || strcmp(v7, v8)) {
        return 0;
      }
    }
    else if (v8)
    {
      return 0;
    }
    if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)) {
      return 0;
    }
    uint64_t result = equal(*(void *)(a1 + 56), *(void *)(a2 + 56));
    if (result)
    {
      uint64_t result = equal(*(void *)(a1 + 64), *(void *)(a2 + 64));
      if (result)
      {
        uint64_t result = equal(*(void *)(a1 + 72), *(void *)(a2 + 72));
        if (result)
        {
          uint64_t result = equal(*(void *)(a1 + 80), *(void *)(a2 + 80));
          if (result)
          {
            uint64_t v9 = *(const char **)(a1 + 88);
            uint64_t v10 = *(const char **)(a2 + 88);
            if (v9)
            {
              if (!v10 || strcmp(v9, v10)) {
                return 0;
              }
            }
            else if (v10)
            {
              return 0;
            }
            uint64_t v11 = *(const char **)(a1 + 96);
            uint64_t v12 = *(const char **)(a2 + 96);
            if (v11)
            {
              if (!v12 || strcmp(v11, v12)) {
                return 0;
              }
            }
            else if (v12)
            {
              return 0;
            }
            if (*(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104)) {
              return 0;
            }
            uint64_t v13 = *(const char **)(a1 + 112);
            uint64_t v14 = *(const char **)(a2 + 112);
            if (v13)
            {
              if (!v14 || strcmp(v13, v14)) {
                return 0;
              }
            }
            else if (v14)
            {
              return 0;
            }
            uint64_t result = equal(*(void *)(a1 + 120), *(void *)(a2 + 120));
            if (result)
            {
              uint64_t result = equal(*(void *)(a1 + 128), *(void *)(a2 + 128));
              if (result)
              {
                uint64_t result = equal(*(void *)(a1 + 136), *(void *)(a2 + 136));
                if (result)
                {
                  uint64_t result = equal(*(void *)(a1 + 144), *(void *)(a2 + 144));
                  if (result)
                  {
                    if (*(unsigned __int8 *)(a1 + 152) != *(unsigned __int8 *)(a2 + 152)
                      || *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(a2 + 153)
                      || *(unsigned __int8 *)(a1 + 154) != *(unsigned __int8 *)(a2 + 154))
                    {
                      return 0;
                    }
                    uint64_t result = equal(*(void *)(a1 + 160), *(void *)(a2 + 160));
                    if (result)
                    {
                      if (*(_DWORD *)(a1 + 168) == *(_DWORD *)(a2 + 168)
                        && *(unsigned __int8 *)(a1 + 172) == *(unsigned __int8 *)(a2 + 172))
                      {
                        return *(unsigned __int8 *)(a1 + 173) == *(unsigned __int8 *)(a2 + 173);
                      }
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _equalDefElem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    if (strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v7 = *(const char **)(a1 + 16);
  uint64_t v8 = *(const char **)(a2 + 16);
  if (!v7)
  {
    if (!v8) {
      goto LABEL_12;
    }
    return 0;
  }
  if (!v8 || strcmp(v7, v8)) {
    return 0;
  }
LABEL_12:
  uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
  if (result) {
    return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  return result;
}

uint64_t _equalRangeTblEntry(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24))
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32))
    || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)
    || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)
    || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)
    || !equal(*(void *)(a1 + 56), *(void *)(a2 + 56))
    || !equal(*(void *)(a1 + 64), *(void *)(a2 + 64))
    || !equal(*(void *)(a1 + 72), *(void *)(a2 + 72))
    || !equal(*(void *)(a1 + 80), *(void *)(a2 + 80))
    || *(unsigned __int8 *)(a1 + 88) != *(unsigned __int8 *)(a2 + 88)
    || !equal(*(void *)(a1 + 96), *(void *)(a2 + 96))
    || !equal(*(void *)(a1 + 104), *(void *)(a2 + 104)))
  {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 112);
  uint64_t v5 = *(const char **)(a2 + 112);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)
    || *(unsigned __int8 *)(a1 + 124) != *(unsigned __int8 *)(a2 + 124)
    || !equal(*(void *)(a1 + 128), *(void *)(a2 + 128))
    || !equal(*(void *)(a1 + 136), *(void *)(a2 + 136))
    || !equal(*(void *)(a1 + 144), *(void *)(a2 + 144)))
  {
    return 0;
  }
  uint64_t v6 = *(const char **)(a1 + 152);
  uint64_t v7 = *(const char **)(a2 + 152);
  if (!v6)
  {
    if (!v7) {
      goto LABEL_32;
    }
    return 0;
  }
  if (!v7 || strcmp(v6, v7)) {
    return 0;
  }
LABEL_32:
  if (*(double *)(a1 + 160) != *(double *)(a2 + 160)
    || !equal(*(void *)(a1 + 168), *(void *)(a2 + 168))
    || !equal(*(void *)(a1 + 176), *(void *)(a2 + 176))
    || *(unsigned __int8 *)(a1 + 184) != *(unsigned __int8 *)(a2 + 184)
    || *(unsigned __int8 *)(a1 + 185) != *(unsigned __int8 *)(a2 + 185)
    || *(unsigned __int8 *)(a1 + 186) != *(unsigned __int8 *)(a2 + 186)
    || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188)
    || *(_DWORD *)(a1 + 192) != *(_DWORD *)(a2 + 192)
    || !bms_equal(*(unsigned int **)(a1 + 200), *(unsigned int **)(a2 + 200))
    || !bms_equal(*(unsigned int **)(a1 + 208), *(unsigned int **)(a2 + 208))
    || !bms_equal(*(unsigned int **)(a1 + 216), *(unsigned int **)(a2 + 216))
    || !bms_equal(*(unsigned int **)(a1 + 224), *(unsigned int **)(a2 + 224)))
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 232);
  uint64_t v9 = *(void *)(a2 + 232);

  return equal(v8, v9);
}

BOOL _equalRangeTblFunction(uint64_t a1, uint64_t a2)
{
  if (!equal(*(void *)(a1 + 8), *(void *)(a2 + 8))
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24))
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32))
    || !equal(*(void *)(a1 + 40), *(void *)(a2 + 40))
    || !equal(*(void *)(a1 + 48), *(void *)(a2 + 48)))
  {
    return 0;
  }
  uint64_t v4 = *(unsigned int **)(a1 + 56);
  uint64_t v5 = *(unsigned int **)(a2 + 56);

  return bms_equal(v4, v5);
}

uint64_t _equalWithCheckOption(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    if (strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v7 = *(const char **)(a1 + 16);
  uint64_t v8 = *(const char **)(a2 + 16);
  if (!v7)
  {
    if (!v8) {
      goto LABEL_13;
    }
    return 0;
  }
  if (!v8 || strcmp(v7, v8)) {
    return 0;
  }
LABEL_13:
  uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
  if (result) {
    return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
  }
  return result;
}

BOOL _equalSortGroupClause(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17);
}

uint64_t _equalWindowClause(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    if (strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v7 = *(const char **)(a1 + 16);
  uint64_t v8 = *(const char **)(a2 + 16);
  if (v7)
  {
    if (!v8 || strcmp(v7, v8)) {
      return 0;
    }
  }
  else if (v8)
  {
    return 0;
  }
  uint64_t result = equal(*(void *)(a1 + 24), *(void *)(a2 + 24));
  if (result)
  {
    uint64_t result = equal(*(void *)(a1 + 32), *(void *)(a2 + 32));
    if (result)
    {
      if (*(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
        return 0;
      }
      uint64_t result = equal(*(void *)(a1 + 48), *(void *)(a2 + 48));
      if (result)
      {
        uint64_t result = equal(*(void *)(a1 + 56), *(void *)(a2 + 56));
        if (result)
        {
          if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
            && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68)
            && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)
            && *(unsigned __int8 *)(a1 + 76) == *(unsigned __int8 *)(a2 + 76)
            && *(unsigned __int8 *)(a1 + 77) == *(unsigned __int8 *)(a2 + 77)
            && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80))
          {
            return *(unsigned __int8 *)(a1 + 84) == *(unsigned __int8 *)(a2 + 84);
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t _equalInferClause(void *a1, void *a2)
{
  uint64_t result = equal(a1[1], a2[1]);
  if (result)
  {
    uint64_t result = equal(a1[2], a2[2]);
    if (result)
    {
      uint64_t v5 = (const char *)a1[3];
      uint64_t v6 = (const char *)a2[3];
      if (v5)
      {
        if (v6) {
          return !strcmp(v5, v6);
        }
      }
      else if (!v6)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t _equalCommonTableExpr(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (!equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || !equal(*(void *)(a1 + 32), *(void *)(a2 + 32))
    || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)
    || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)
    || !equal(*(void *)(a1 + 56), *(void *)(a2 + 56))
    || !equal(*(void *)(a1 + 64), *(void *)(a2 + 64))
    || !equal(*(void *)(a1 + 72), *(void *)(a2 + 72)))
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a2 + 80);

  return equal(v6, v7);
}

uint64_t _equalRoleSpec(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  int v2 = *(const char **)(a1 + 8);
  int v3 = *(const char **)(a2 + 8);
  if (v2)
  {
    if (!v3 || strcmp(v2, v3)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  return 1;
}

BOOL _equalTriggerTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a1 + 8);
  uint64_t v5 = *(const char **)(a2 + 8);
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)) {
    return *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17);
  }
  return 0;
}

uint64_t _equalPartitionElem(void *a1, void *a2)
{
  uint64_t v4 = (const char *)a1[1];
  uint64_t v5 = (const char *)a2[1];
  if (v4)
  {
    if (!v5 || strcmp(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (!equal(a1[2], a2[2]) || !equal(a1[3], a2[3])) {
    return 0;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a2[4];

  return equal(v6, v7);
}

uint64_t _equalPartitionBoundSpec(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4)
    || *(unsigned __int8 *)(a1 + 5) != *(unsigned __int8 *)(a2 + 5)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || !equal(*(void *)(a1 + 16), *(void *)(a2 + 16))
    || !equal(*(void *)(a1 + 24), *(void *)(a2 + 24)))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);

  return equal(v4, v5);
}

void equal_cold_1()
{
  OUTLINED_FUNCTION_0_17();
  errmsg_internal("unrecognized node type: %d", *v0);
  errfinish("src/postgres/src_backend_nodes_equalfuncs.c", 3997, (uint64_t)"equal");
  __break(1u);
}

void _equalList_cold_1()
{
  OUTLINED_FUNCTION_0_17();
  errmsg_internal("unrecognized list node type: %d", *v0);
  errfinish("src/postgres/src_backend_nodes_equalfuncs.c", 3218, (uint64_t)"_equalList");
  __break(1u);
}

void _equalValue_cold_1()
{
  OUTLINED_FUNCTION_0_17();
  errmsg_internal("unrecognized node type: %d", *v0);
  errfinish("src/postgres/src_backend_nodes_equalfuncs.c", 3254, (uint64_t)"_equalValue");
  __break(1u);
}

uint64_t GetExtensibleNodeMethods(char *a1, char a2)
{
  uint64_t v4 = *(hash_table **)extensible_node_methods();
  if (v4)
  {
    uint64_t v5 = hash_search(v4, a1, 0, 0);
    if (v5) {
      return v5[8];
    }
  }
  if ((a2 & 1) == 0) {
    GetExtensibleNodeMethods_cold_1((size_t)a1);
  }
  return 0;
}

void GetExtensibleNodeMethods_cold_1(size_t a1)
{
  errstart(20, 0);
  errcode();
  errmsg("ExtensibleNodeMethods \"%s\" was not registered", v2, v3, v4, v5, v6, v7, v8, a1);
  errfinish("src/postgres/src_backend_nodes_extensible.c", 78, (uint64_t)"GetExtensibleNodeEntry");
  __break(1u);
}

double list_make2_impl(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = palloc(0x40uLL);
  *(_DWORD *)uint64_t v6 = a1;
  *(void *)&double result = 0x500000002;
  *(void *)(v6 + 4) = 0x500000002;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 16) = v6 + 24;
  *(void *)(v6 + 32) = a3;
  return result;
}

double list_make3_impl(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = palloc(0x40uLL);
  *(_DWORD *)uint64_t v8 = a1;
  *(void *)&double result = 0x500000003;
  *(void *)(v8 + 4) = 0x500000003;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 16) = v8 + 24;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 4errstart(20, 0) = a4;
  return result;
}

double list_make4_impl(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = palloc(0x40uLL);
  *(_DWORD *)uint64_t v10 = a1;
  *(void *)&double result = 0x500000004;
  *(void *)(v10 + 24) = a2;
  *(void *)(v10 + 4) = 0x500000004;
  *(void *)(v10 + 16) = v10 + 24;
  *(void *)(v10 + 32) = a3;
  *(void *)(v10 + 4errstart(20, 0) = a4;
  *(void *)(v10 + 48) = a5;
  return result;
}

uint64_t lcons(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v4 = *(_DWORD *)(a2 + 4);
    if (v4 >= *(_DWORD *)(a2 + 8))
    {
      if (v4 + 1 > 16) {
        unsigned int v5 = v4 + 1;
      }
      else {
        unsigned int v5 = 16;
      }
      int v6 = 1 << -(char)__clz(v5);
      if ((v5 & (v5 - 1)) != 0) {
        signed int v7 = v6;
      }
      else {
        signed int v7 = v5;
      }
      uint64_t v8 = *(const void **)(a2 + 16);
      if (v8 == (const void *)(a2 + 24))
      {
        uint64_t v10 = (void *)MemoryContextAlloc(*(void *)(a2 - 8), 8 * v7);
        *(void *)(a2 + 16) = v10;
        memcpy(v10, v8, 8 * *(int *)(a2 + 4));
      }
      else
      {
        *(void *)(a2 + 16) = repalloc(*(void *)(a2 + 16), 8 * v7);
      }
      *(_DWORD *)(a2 + 8) = v7;
      int v4 = *(_DWORD *)(a2 + 4);
    }
    memmove((void *)(*(void *)(a2 + 16) + 8), *(const void **)(a2 + 16), 8 * v4);
    ++*(_DWORD *)(a2 + 4);
    **(void **)(a2 + 16) = a1;
    return a2;
  }
  else
  {
    uint64_t result = palloc(0x40uLL);
    *(void *)uint64_t result = 0x1000000E2;
    *(_DWORD *)(result + 8) = 5;
    *(void *)(result + 16) = result + 24;
    *(void *)(result + 24) = a1;
  }
  return result;
}

uint64_t list_concat(uint64_t a1, const void **a2)
{
  if (!a1)
  {
    if (!a2) {
      return 0;
    }
    int v11 = *(_DWORD *)a2;
    uint64_t v12 = *((int *)a2 + 1);
    unsigned int v13 = v12 + 3;
    if ((int)v12 + 3 <= 8) {
      unsigned int v13 = 8;
    }
    int v14 = 1 << -(char)__clz(v13);
    if ((v13 & (v13 - 1)) != 0) {
      unsigned int v13 = v14;
    }
    unsigned int v15 = v13 - 3;
    uint64_t v3 = palloc(8 * (v13 - 3) + 24);
    *(_DWORD *)uint64_t v3 = v11;
    *(_DWORD *)(v3 + 4) = v12;
    *(_DWORD *)(v3 + 8) = v15;
    *(void *)(v3 + 16) = v3 + 24;
    memcpy((void *)(v3 + 24), a2[2], 8 * v12);
    return v3;
  }
  uint64_t v3 = a1;
  if (!a2) {
    return v3;
  }
  int v4 = *((_DWORD *)a2 + 1);
  int v5 = *(_DWORD *)(a1 + 4);
  int v6 = v4 + v5;
  if (v4 + v5 > *(_DWORD *)(a1 + 8))
  {
    if (v6 <= 16) {
      unsigned int v7 = 16;
    }
    else {
      unsigned int v7 = v4 + v5;
    }
    int v8 = 1 << -(char)__clz(v7);
    if ((v7 & (v7 - 1)) != 0) {
      signed int v9 = v8;
    }
    else {
      signed int v9 = v7;
    }
    uint64_t v10 = *(const void **)(a1 + 16);
    if (v10 == (const void *)(a1 + 24))
    {
      uint64_t v17 = (void *)MemoryContextAlloc(*(void *)(a1 - 8), 8 * v9);
      *(void *)(v3 + 16) = v17;
      memcpy(v17, v10, 8 * *(int *)(v3 + 4));
    }
    else
    {
      *(void *)(a1 + 16) = repalloc(*(void *)(a1 + 16), 8 * v9);
    }
    *(_DWORD *)(v3 + 8) = v9;
    int v5 = *(_DWORD *)(v3 + 4);
    int v4 = *((_DWORD *)a2 + 1);
  }
  memcpy((void *)(*(void *)(v3 + 16) + 8 * v5), a2[2], 8 * v4);
  *(_DWORD *)(v3 + 4) = v6;
  return v3;
}

uint64_t list_copy(const void **a1)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)a1;
  uint64_t v3 = *((int *)a1 + 1);
  unsigned int v4 = v3 + 3;
  if ((int)v3 + 3 <= 8) {
    unsigned int v4 = 8;
  }
  int v5 = 1 << -(char)__clz(v4);
  if ((v4 & (v4 - 1)) != 0) {
    unsigned int v4 = v5;
  }
  unsigned int v6 = v4 - 3;
  uint64_t v7 = palloc(8 * (v4 - 3) + 24);
  *(_DWORD *)uint64_t v7 = v2;
  *(_DWORD *)(v7 + 4) = v3;
  *(_DWORD *)(v7 + 8) = v6;
  *(void *)(v7 + 16) = v7 + 24;
  memcpy((void *)(v7 + 24), a1[2], 8 * v3);
  return v7;
}

uint64_t list_truncate(uint64_t result, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  if (result)
  {
    if (*(_DWORD *)(result + 4) > a2) {
      *(_DWORD *)(result + 4) = a2;
    }
  }
  return result;
}

uint64_t list_delete_nth_cell(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 4);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3 == 1)
  {
    if (v4 != a1 + 24) {
      pfree(v4);
    }
    pfree(a1);
    return 0;
  }
  else
  {
    memmove((void *)(v4 + 8 * a2), (const void *)(v4 + 8 * (a2 + 1)), 8 * (v3 + ~a2));
    --*(_DWORD *)(a1 + 4);
    return a1;
  }
}

uint64_t list_free(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 16);
    if (v2 != v1 + 24) {
      pfree(v2);
    }
    return pfree(v1);
  }
  return result;
}

uint64_t list_delete_cell(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 4);
  if (v4 == 1)
  {
    if (v3 != a1 + 24) {
      pfree(v3);
    }
    pfree(a1);
    return 0;
  }
  else
  {
    memmove((void *)(v3 + 8 * (int)((unint64_t)(a2 - v3) >> 3)), (const void *)(v3 + 8 * ((((a2 - v3) << 29) + 0x100000000) >> 32)), 8 * (int)(v4 + ~((unint64_t)(a2 - v3) >> 3)));
    --*(_DWORD *)(a1 + 4);
    return a1;
  }
}

uint64_t list_copy_tail(int *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  int v3 = a2 & ~(a2 >> 31);
  int v4 = a1[1];
  int v5 = v4 - v3;
  if (v4 <= v3) {
    return 0;
  }
  int v6 = *a1;
  unsigned int v7 = v5 + 3;
  if (v5 + 3 <= 8) {
    unsigned int v7 = 8;
  }
  int v8 = 1 << -(char)__clz(v7);
  if ((v7 & (v7 - 1)) != 0) {
    unsigned int v7 = v8;
  }
  unsigned int v9 = v7 - 3;
  uint64_t v10 = palloc(8 * (v7 - 3) + 24);
  *(_DWORD *)uint64_t v10 = v6;
  *(_DWORD *)(v10 + 4) = v5;
  *(_DWORD *)(v10 + 8) = v9;
  *(void *)(v10 + 16) = v10 + 24;
  memcpy((void *)(v10 + 24), (const void *)(*((void *)a1 + 2) + 8 * v3), 8 * v5);
  return v10;
}

uint64_t list_copy_deep(int *a1)
{
  if (!a1) {
    return 0;
  }
  int v2 = *a1;
  int v3 = a1[1];
  unsigned int v4 = v3 + 3;
  if (v3 + 3 <= 8) {
    unsigned int v4 = 8;
  }
  int v5 = 1 << -(char)__clz(v4);
  if ((v4 & (v4 - 1)) != 0) {
    unsigned int v4 = v5;
  }
  unsigned int v6 = v4 - 3;
  uint64_t v7 = palloc(8 * (v4 - 3) + 24);
  *(_DWORD *)uint64_t v7 = v2;
  *(_DWORD *)(v7 + 4) = v3;
  *(_DWORD *)(v7 + 8) = v6;
  *(void *)(v7 + 16) = v7 + 24;
  if (v3 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      *(void *)(*(void *)(v7 + 16) + 8 * v8) = copyObjectImpl(*(void *)(*((void *)a1 + 2) + 8 * v8));
      ++v8;
    }
    while (v8 < *(int *)(v7 + 4));
  }
  return v7;
}

unint64_t makeA_Expr(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = MemoryContextAllocZeroAligned(*v10, 0x28uLL);
  *(_DWORD *)unint64_t result = 346;
  *(_DWORD *)(result + 4) = a1;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a4;
  *(_DWORD *)(result + 32) = a5;
  return result;
}

unint64_t makeSimpleA_Expr(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = (uint64_t *)CurrentMemoryContext();
  unint64_t v11 = MemoryContextAllocZeroAligned(*v10, 0x28uLL);
  *(_DWORD *)unint64_t v11 = 346;
  *(_DWORD *)(v11 + 4) = a1;
  unint64_t String = makeString(a2);
  list_make1_impl(226, String);
  *(void *)(v11 + 8) = v13;
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a4;
  *(_DWORD *)(v11 + 32) = a5;
  return v11;
}

unint64_t makeBoolExpr(int a1, uint64_t a2, int a3, double a4)
{
  uint64_t v7 = (uint64_t *)CurrentMemoryContext(a4);
  unint64_t result = MemoryContextAllocZeroAligned(*v7, 0x18uLL);
  *(_DWORD *)unint64_t result = 119;
  *(_DWORD *)(result + 4) = a1;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

unint64_t makeAlias(const char *a1, uint64_t a2)
{
  unsigned int v4 = (uint64_t *)CurrentMemoryContext();
  unint64_t v5 = MemoryContextAllocZeroAligned(*v4, 0x18uLL);
  *(_DWORD *)unint64_t v5 = 102;
  *(void *)(v5 + 8) = pstrdup(a1);
  *(void *)(v5 + 16) = a2;
  return v5;
}

unint64_t makeRangeVar(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v6 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = MemoryContextAllocZeroAligned(*v6, 0x38uLL);
  *(_DWORD *)unint64_t result = 103;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(_WORD *)(result + 32) = 28673;
  *(void *)(result + 4errstart(20, 0) = 0;
  *(_DWORD *)(result + 48) = a3;
  return result;
}

unint64_t makeTypeName(uint64_t a1)
{
  unint64_t String = makeString(a1);
  double v2 = list_make1_impl(226, String);
  uint64_t v4 = v3;
  unint64_t v5 = (uint64_t *)CurrentMemoryContext(v2);
  unint64_t result = MemoryContextAllocZeroAligned(*v5, 0x38uLL);
  *(_DWORD *)unint64_t result = 366;
  *(void *)(result + 8) = v4;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  *(_DWORD *)(result + 48) = -1;
  return result;
}

unint64_t makeDefElemExtended(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, double a6)
{
  unint64_t v11 = (uint64_t *)CurrentMemoryContext(a6);
  unint64_t result = MemoryContextAllocZeroAligned(*v11, 0x28uLL);
  *(_DWORD *)unint64_t result = 370;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  *(_DWORD *)(result + 32) = a4;
  *(_DWORD *)(result + 36) = a5;
  return result;
}

unint64_t makeFuncCall(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v7 = (uint64_t *)CurrentMemoryContext(a4);
  unint64_t result = MemoryContextAllocZeroAligned(*v7, 0x40uLL);
  *(_DWORD *)unint64_t result = 350;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = a2;
  *(void *)(result + 48) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 4errstart(20, 0) = 0;
  *(_DWORD *)(result + 56) = a3;
  return result;
}

unint64_t makeGroupingSet(int a1, uint64_t a2, int a3, double a4)
{
  uint64_t v7 = (uint64_t *)CurrentMemoryContext(a4);
  unint64_t result = MemoryContextAllocZeroAligned(*v7, 0x18uLL);
  *(_DWORD *)unint64_t result = 376;
  *(_DWORD *)(result + 4) = a1;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

unint64_t makeVacuumRelation(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v7 = (uint64_t *)CurrentMemoryContext(a4);
  unint64_t result = MemoryContextAllocZeroAligned(*v7, 0x20uLL);
  *(_DWORD *)unint64_t result = 397;
  *(void *)(result + 8) = a1;
  *(_DWORD *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  return result;
}

uint64_t exprLocation(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t result = 0xFFFFFFFFLL;
    while (2)
    {
      switch(*(_DWORD *)v1)
      {
        case 0x67:
        case 0x6F:
        case 0x16E:
          return *(unsigned int *)(v1 + 48);
        case 0x68:
          return *(unsigned int *)(v1 + 100);
        case 0x6A:
        case 0x6B:
        case 0x6E:
          return *(unsigned int *)(v1 + 36);
        case 0x6C:
        case 0x83:
        case 0x88:
        case 0x15D:
        case 0x181:
        case 0x189:
          return *(unsigned int *)(v1 + 24);
        case 0x6D:
          return *(unsigned int *)(v1 + 84);
        case 0x70:
          uint64_t v3 = (uint64_t *)(v1 + 40);
          goto LABEL_5;
        case 0x71:
        case 0x73:
        case 0x74:
        case 0x75:
          int v4 = *(_DWORD *)(v1 + 40);
          goto LABEL_15;
        case 0x72:
        case 0x7E:
          int v4 = *(_DWORD *)(v1 + 28);
          uint64_t v5 = *(void *)(v1 + 8);
          goto LABEL_49;
        case 0x76:
          int v4 = *(_DWORD *)(v1 + 32);
          uint64_t v5 = *(void *)(v1 + 24);
          goto LABEL_49;
        case 0x77:
          int v4 = *(_DWORD *)(v1 + 16);
          uint64_t v5 = *(void *)(v1 + 8);
          goto LABEL_49;
        case 0x78:
          int v6 = exprLocation(*(void *)(v1 + 16));
          int v7 = *(_DWORD *)(v1 + 40);
          if (v6 >= v7) {
            unsigned int v8 = *(_DWORD *)(v1 + 40);
          }
          else {
            unsigned int v8 = v6;
          }
          if (v7 < 0) {
            unsigned int v8 = v6;
          }
          if (v6 >= 0) {
            return v8;
          }
          else {
            return v7;
          }
        case 0x7B:
        case 0x7C:
        case 0x81:
        case 0x93:
        case 0x94:
        case 0x99:
        case 0xCF:
        case 0x164:
        case 0x166:
        case 0x167:
          uint64_t v3 = (uint64_t *)(v1 + 8);
          goto LABEL_5;
        case 0x7D:
        case 0x8E:
          int v4 = *(_DWORD *)(v1 + 32);
          uint64_t v5 = *(void *)(v1 + 8);
          goto LABEL_49;
        case 0x7F:
          int v4 = *(_DWORD *)(v1 + 40);
          uint64_t v5 = *(void *)(v1 + 8);
          goto LABEL_49;
        case 0x80:
        case 0x8C:
          int v4 = *(_DWORD *)(v1 + 24);
          uint64_t v5 = *(void *)(v1 + 8);
          goto LABEL_49;
        case 0x82:
        case 0x16B:
        case 0x185:
        case 0x188:
        case 0x18A:
          return *(unsigned int *)(v1 + 40);
        case 0x85:
          return *(unsigned int *)(v1 + 28);
        case 0x86:
        case 0x89:
        case 0x163:
        case 0x183:
        case 0x184:
          return *(unsigned int *)(v1 + 32);
        case 0x87:
          uint64_t v3 = (uint64_t *)(v1 + 32);
          goto LABEL_5;
        case 0x8A:
        case 0x8F:
        case 0x90:
        case 0x15B:
        case 0x162:
        case 0x178:
        case 0x18B:
          return *(unsigned int *)(v1 + 16);
        case 0x8B:
          int v4 = *(_DWORD *)(v1 + 52);
LABEL_15:
          uint64_t v5 = *(void *)(v1 + 32);
          goto LABEL_49;
        case 0x8D:
          int v4 = *(_DWORD *)(v1 + 20);
          uint64_t v5 = *(void *)(v1 + 8);
          goto LABEL_49;
        case 0xE2:
          uint64_t v9 = *(unsigned int *)(v1 + 4);
          if ((int)v9 < 1) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v10 = *(uint64_t **)(v1 + 16);
          uint64_t v11 = v9 - 1;
          do
          {
            uint64_t v12 = v11;
            uint64_t v13 = *v10++;
            uint64_t result = exprLocation(v13);
            if ((result & 0x80000000) == 0) {
              break;
            }
            uint64_t v11 = v12 - 1;
          }
          while (v12);
          return result;
        case 0x15A:
          int v4 = *(_DWORD *)(v1 + 32);
          goto LABEL_48;
        case 0x15C:
          return *(unsigned int *)(v1 + 8);
        case 0x15E:
          int v4 = *(_DWORD *)(v1 + 56);
LABEL_48:
          uint64_t v5 = *(void *)(v1 + 16);
LABEL_49:
          LODWORD(result) = exprLocation(v5);
          if (v4 >= (int)result) {
            unsigned int v14 = result;
          }
          else {
            unsigned int v14 = v4;
          }
          if ((int)result < 0) {
            unsigned int v14 = v4;
          }
          if (v4 >= 0) {
            return v14;
          }
          else {
            return result;
          }
        case 0x165:
          int v15 = exprLocation(*(void *)(v1 + 8));
          int v16 = *(_DWORD *)(*(void *)(v1 + 16) + 48);
          if (v15 >= v16) {
            int v17 = *(_DWORD *)(*(void *)(v1 + 16) + 48);
          }
          else {
            int v17 = v15;
          }
          if (v16 < 0) {
            int v17 = v15;
          }
          if (v15 >= 0) {
            int v16 = v17;
          }
          int v18 = *(_DWORD *)(v1 + 24);
          if (v16 >= v18) {
            unsigned int v19 = *(_DWORD *)(v1 + 24);
          }
          else {
            unsigned int v19 = v16;
          }
          if (v18 < 0) {
            unsigned int v19 = v16;
          }
          if (v16 >= 0) {
            return v19;
          }
          else {
            return v18;
          }
        case 0x168:
          return *(unsigned int *)(v1 + 64);
        case 0x16F:
          return *(unsigned int *)(v1 + 104);
        case 0x171:
        case 0x182:
          return *(unsigned int *)(v1 + 20);
        case 0x17E:
          uint64_t v3 = (uint64_t *)(v1 + 16);
LABEL_5:
          uint64_t v1 = *v3;
          if (!*v3) {
            return 0xFFFFFFFFLL;
          }
          continue;
        default:
          return result;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t raw_expression_tree_walker(uint64_t result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    check_stack_depth();
    switch(*(_DWORD *)v4)
    {
      case 0x66:
      case 0x8A:
      case 0x90:
      case 0x91:
      case 0xDD:
      case 0xDE:
      case 0xDF:
      case 0xE0:
      case 0xE1:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15F:
        return 0;
      case 0x67:
        uint64_t v5 = *(void *)(v4 + 40);
        goto LABEL_6;
      case 0x6E:
      case 0x72:
      case 0x86:
      case 0x8C:
      case 0x8D:
      case 0x162:
      case 0x164:
      case 0x166:
      case 0x167:
      case 0x178:
      case 0x17F:
      case 0x182:
        uint64_t v5 = *(void *)(v4 + 8);
        goto LABEL_6;
      case 0x77:
        return (a2(*(void *)(v4 + 8), a3) & 1) != 0;
      case 0x78:
      case 0x8B:
        if (a2(*(void *)(v4 + 16), a3)) {
          return 1;
        }
        return (a2(*(void *)(v4 + 32), a3) & 1) != 0;
      case 0x82:
        if (a2(*(void *)(v4 + 16), a3)) {
          return 1;
        }
        uint64_t v6 = *(void *)(v4 + 24);
        if (!v6 || *(int *)(v6 + 4) < 1) {
          return (a2(*(void *)(v4 + 32), a3) & 1) != 0;
        }
        uint64_t v7 = 0;
        while (1)
        {
          uint64_t v8 = *(void *)(*(void *)(v6 + 16) + 8 * v7);
          if (a2(*(void *)(v8 + 8), a3) & 1) != 0 || (a2(*(void *)(v8 + 16), a3)) {
            break;
          }
          if (++v7 >= *(int *)(v6 + 4)) {
            return (a2(*(void *)(v4 + 32), a3) & 1) != 0;
          }
        }
        return 1;
      case 0x88:
        uint64_t v5 = *(void *)(v4 + 16);
        goto LABEL_6;
      case 0x89:
        uint64_t v5 = *(void *)(v4 + 24);
        goto LABEL_6;
      case 0x96:
        if ((a2(*(void *)(v4 + 16), a3) & 1) == 0 && (a2(*(void *)(v4 + 24), a3) & 1) == 0) {
          goto LABEL_43;
        }
        return 1;
      case 0x99:
        if ((a2(*(void *)(v4 + 8), a3) & 1) == 0) {
          return (a2(*(void *)(v4 + 56), a3) & 1) != 0;
        }
        return 1;
      case 0xE2:
        if (*(int *)(v4 + 4) < 1) {
          return 0;
        }
        uint64_t v9 = 0;
        break;
      case 0xE9:
      case 0xEB:
        if ((a2(*(void *)(v4 + 8), a3) & 1) != 0
          || (a2(*(void *)(v4 + 16), a3) & 1) != 0
          || (a2(*(void *)(v4 + 24), a3) & 1) != 0
          || (a2(*(void *)(v4 + 32), a3) & 1) != 0)
        {
          return 1;
        }
LABEL_43:
        if (a2(*(void *)(v4 + 40), a3)) {
          return 1;
        }
        return (a2(*(void *)(v4 + 48), a3) & 1) != 0;
      case 0xEA:
      case 0x16C:
        if ((a2(*(void *)(v4 + 8), a3) & 1) == 0
          && (a2(*(void *)(v4 + 16), a3) & 1) == 0
          && (a2(*(void *)(v4 + 24), a3) & 1) == 0)
        {
          goto LABEL_26;
        }
        return 1;
      case 0xEC:
        return (a2(*(void *)(v4 + 8), a3) & 1) != 0
            || (a2(*(void *)(v4 + 16), a3) & 1) != 0
            || (a2(*(void *)(v4 + 24), a3) & 1) != 0
            || (a2(*(void *)(v4 + 32), a3) & 1) != 0
            || (a2(*(void *)(v4 + 40), a3) & 1) != 0
            || (a2(*(void *)(v4 + 48), a3) & 1) != 0
            || (a2(*(void *)(v4 + 56), a3) & 1) != 0
            || (a2(*(void *)(v4 + 64), a3) & 1) != 0
            || (a2(*(void *)(v4 + 72), a3) & 1) != 0
            || (a2(*(void *)(v4 + 80), a3) & 1) != 0
            || (a2(*(void *)(v4 + 88), a3) & 1) != 0
            || (a2(*(void *)(v4 + 96), a3) & 1) != 0
            || (a2(*(void *)(v4 + 112), a3) & 1) != 0
            || (a2(*(void *)(v4 + 120), a3) & 1) != 0
            || (a2(*(void *)(v4 + 136), a3) & 1) != 0
            || (a2(*(void *)(v4 + 144), a3) & 1) != 0;
      case 0x15A:
      case 0x163:
        return (a2(*(void *)(v4 + 16), a3) & 1) != 0 || (a2(*(void *)(v4 + 24), a3) & 1) != 0;
      case 0x15E:
        if ((a2(*(void *)(v4 + 16), a3) & 1) == 0
          && (a2(*(void *)(v4 + 24), a3) & 1) == 0
          && (a2(*(void *)(v4 + 32), a3) & 1) == 0)
        {
          return (a2(*(void *)(v4 + 48), a3) & 1) != 0;
        }
        return 1;
      case 0x160:
      case 0x161:
      case 0x165:
      case 0x169:
      case 0x181:
      case 0x183:
        if ((a2(*(void *)(v4 + 8), a3) & 1) == 0) {
          return (a2(*(void *)(v4 + 16), a3) & 1) != 0;
        }
        return 1;
      case 0x168:
        if ((a2(*(void *)(v4 + 24), a3) & 1) != 0
          || (a2(*(void *)(v4 + 32), a3) & 1) != 0
          || (a2(*(void *)(v4 + 48), a3) & 1) != 0)
        {
          return 1;
        }
        return (a2(*(void *)(v4 + 56), a3) & 1) != 0;
      case 0x16A:
      case 0x184:
        if (a2(*(void *)(v4 + 8), a3)) {
          return 1;
        }
        return (a2(*(void *)(v4 + 16), a3) & 1) != 0 || (a2(*(void *)(v4 + 24), a3) & 1) != 0;
      case 0x16B:
        if ((a2(*(void *)(v4 + 8), a3) & 1) == 0 && (a2(*(void *)(v4 + 24), a3) & 1) == 0) {
          return (a2(*(void *)(v4 + 32), a3) & 1) != 0;
        }
        return 1;
      case 0x16D:
LABEL_26:
        if ((a2(*(void *)(v4 + 32), a3) & 1) == 0) {
          return (a2(*(void *)(v4 + 40), a3) & 1) != 0;
        }
        return 1;
      case 0x16E:
        if (a2(*(void *)(v4 + 24), a3)) {
          return 1;
        }
        return (a2(*(void *)(v4 + 40), a3) & 1) != 0;
      case 0x16F:
        return (a2(*(void *)(v4 + 16), a3) & 1) != 0
            || (a2(*(void *)(v4 + 32), a3) & 1) != 0
            || (a2(*(void *)(v4 + 72), a3) & 1) != 0;
      case 0x170:
        return (a2(*(void *)(v4 + 16), a3) & 1) != 0;
      case 0x185:
        uint64_t v5 = *(void *)(v4 + 32);
LABEL_6:
        return a2(v5, a3);
      default:
        raw_expression_tree_walker_cold_1((_DWORD *)v4);
    }
    while ((a2(*(void *)(*(void *)(v4 + 16) + 8 * v9), a3) & 1) == 0)
    {
      if (++v9 >= *(int *)(v4 + 4)) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

void raw_expression_tree_walker_cold_1(_DWORD *a1)
{
}

_DWORD *makeInteger(int a1)
{
  double v2 = (uint64_t *)CurrentMemoryContext();
  uint64_t result = (_DWORD *)MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  _DWORD *result = 221;
  result[2] = a1;
  return result;
}

unint64_t makeFloat(uint64_t a1)
{
  double v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t result = 222;
  *(void *)(result + 8) = a1;
  return result;
}

unint64_t makeBitString(uint64_t a1)
{
  double v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t result = 224;
  *(void *)(result + 8) = a1;
  return result;
}

_DWORD *makeAConst(_DWORD *a1, int a2, double a3)
{
  if (*a1 == 221)
  {
    int v7 = a1[2];
    uint64_t v8 = (uint64_t *)CurrentMemoryContext(a3);
    unint64_t result = (_DWORD *)MemoryContextAllocZeroAligned(*v8, 0x20uLL);
    _DWORD *result = 349;
    result[2] = 221;
    result[4] = v7;
    result[6] = a2;
  }
  else
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (*a1 == 222)
    {
      uint64_t v5 = (uint64_t *)CurrentMemoryContext(a3);
      unint64_t result = (_DWORD *)MemoryContextAllocZeroAligned(*v5, 0x20uLL);
      _DWORD *result = 349;
      result[2] = 222;
    }
    else
    {
      uint64_t v9 = (uint64_t *)CurrentMemoryContext(a3);
      unint64_t result = (_DWORD *)MemoryContextAllocZeroAligned(*v9, 0x20uLL);
      _DWORD *result = 349;
      result[2] = 223;
    }
    *((void *)result + 2) = v4;
    result[6] = a2;
  }
  return result;
}

unint64_t makeStringConstCast(uint64_t a1, int a2, uint64_t a3, double a4)
{
  int v7 = (uint64_t *)CurrentMemoryContext(a4);
  unint64_t v8 = MemoryContextAllocZeroAligned(*v7, 0x20uLL);
  *(_DWORD *)unint64_t v8 = 349;
  *(_DWORD *)(v8 + 8) = 223;
  *(void *)(v8 + 16) = a1;
  *(_DWORD *)(v8 + 24) = a2;
  unint64_t result = MemoryContextAllocZeroAligned(*v7, 0x20uLL);
  *(_DWORD *)unint64_t result = 357;
  *(void *)(result + 8) = v8;
  *(void *)(result + 16) = a3;
  *(_DWORD *)(result + 24) = -1;
  return result;
}

unint64_t makeRangeVarFromAnyName(uint64_t a1, int a2, double a3)
{
  uint64_t v5 = (uint64_t *)CurrentMemoryContext(a3);
  unint64_t result = MemoryContextAllocZeroAligned(*v5, 0x38uLL);
  *(_DWORD *)unint64_t result = 103;
  if (!a1) {
    goto LABEL_9;
  }
  int v7 = *(_DWORD *)(a1 + 4);
  if (v7 == 3)
  {
    *(void *)(result + 8) = *(void *)(**(void **)(a1 + 16) + 8);
    *(void *)(result + 16) = *(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 8);
    uint64_t v8 = *(void *)(a1 + 16) + 16;
    goto LABEL_8;
  }
  if (v7 == 2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = *(void *)(**(void **)(a1 + 16) + 8);
    uint64_t v8 = *(void *)(a1 + 16) + 8;
    goto LABEL_8;
  }
  if (v7 != 1) {
LABEL_9:
  }
    makeRangeVarFromAnyName_cold_1(a1);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  uint64_t v8 = *(void *)(a1 + 16);
LABEL_8:
  *(void *)(result + 24) = *(void *)(*(void *)v8 + 8);
  *(unsigned char *)(result + 33) = 112;
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t SplitColQualList(uint64_t result, uint64_t *a2, int **a3)
{
  *a3 = 0;
  if (result)
  {
    int v5 = 0;
    do
    {
      if (v5 >= *(_DWORD *)(result + 4)) {
        break;
      }
      uint64_t v6 = (int **)(*(void *)(result + 16) + 8 * v5);
      int v7 = **v6;
      if (v7 != 369)
      {
        if (v7 != 358) {
          SplitColQualList_cold_1(*v6);
        }
        if (*a3) {
          SplitColQualList_cold_2();
        }
        *a3 = *v6;
        --v5;
        unint64_t result = list_delete_cell(result, (uint64_t)v6);
      }
      ++v5;
    }
    while (result);
  }
  *a2 = result;
  return result;
}

uint64_t mergeTableFuncParameters(uint64_t a1, const void **a2)
{
  if (a1)
  {
    uint64_t v2 = *(unsigned int *)(a1 + 4);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      do
      {
        int v4 = *(_DWORD *)(*(void *)v3 + 24);
        if (v4 != 105 && v4 != 118) {
          mergeTableFuncParameters_cold_1();
        }
        v3 += 8;
        --v2;
      }
      while (v2);
    }
  }

  return list_concat(a1, a2);
}

void TableFuncTypeName(uint64_t a1)
{
  if (a1 && *(_DWORD *)(a1 + 4) == 1)
  {
    copyObjectImpl(*(int **)(**(void **)(a1 + 16) + 16));
    *(unsigned char *)(v1 + 2errstart(20, 0) = 1;
  }
  else
  {
    unint64_t String = makeString((uint64_t)"pg_catalog");
    unint64_t v3 = makeString((uint64_t)"record");
    list_make2_impl(226, String, v3);
    *(unsigned char *)(makeTypeNameFromNameList(v4) + 2errstart(20, 0) = 1;
  }
}

uint64_t extractArgTypes(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = *(_DWORD *)(result + 4);
    if (v2 < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v3 = 0;
      unint64_t result = 0;
      do
      {
        uint64_t v4 = *(void *)(*(void *)(v1 + 16) + 8 * v3);
        int v5 = *(_DWORD *)(v4 + 24);
        if (v5 != 111 && v5 != 116)
        {
          unint64_t result = lappend(result, *(void *)(v4 + 16));
          int v2 = *(_DWORD *)(v1 + 4);
        }
        ++v3;
      }
      while (v3 < v2);
    }
  }
  return result;
}

uint64_t check_func_name(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = *(unsigned int *)(result + 4);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = *(_DWORD ***)(result + 16);
      do
      {
        if (**v3 != 223) {
          scanner_yyerror((size_t)"syntax error", a2);
        }
        ++v3;
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

double makeOrderedSetArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const void **)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 4);
  uint64_t v6 = *(void *)(v4 + 8 * (v5 - 1));
  if (*(_DWORD *)(v6 + 24) == 118)
  {
    uint64_t v7 = **(void **)(a2 + 16);
    if (*(_DWORD *)(a2 + 4) != 1
      || *(_DWORD *)(v7 + 24) != 118
      || !equal(*(void *)(v6 + 16), *(void *)(v7 + 16)))
    {
      makeOrderedSetArgs_cold_1();
    }
    uint64_t v2 = 0;
    int v5 = *(_DWORD *)(a1 + 4);
  }
  Integer = makeInteger(v5);
  uint64_t v9 = list_concat(a1, v2);

  return list_make2_impl(226, v9, (uint64_t)Integer);
}

uint64_t extractAggrArgTypes(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t result = 0;
  do
  {
    uint64_t v5 = *(void *)(*(void *)(v1 + 16) + 8 * v3);
    int v6 = *(_DWORD *)(v5 + 24);
    if (v6 != 111 && v6 != 116)
    {
      uint64_t result = lappend(result, *(void *)(v5 + 16));
      int v2 = *(_DWORD *)(v1 + 4);
    }
    ++v3;
  }
  while (v3 < v2);
  return result;
}

unint64_t makeRecursiveViewSelect(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7 = (uint64_t *)CurrentMemoryContext(a4);
  unint64_t v8 = MemoryContextAllocZeroAligned(*v7, 0x98uLL);
  *(_DWORD *)unint64_t v8 = 236;
  unint64_t v9 = MemoryContextAllocZeroAligned(*v7, 0x18uLL);
  *(_DWORD *)unint64_t v9 = 386;
  unint64_t v10 = MemoryContextAllocZeroAligned(*v7, 0x58uLL);
  *(_DWORD *)unint64_t v10 = 389;
  *(void *)(v10 + 8) = a1;
  *(void *)(v10 + 16) = a2;
  *(_DWORD *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = a3;
  *(_DWORD *)(v10 + 4errstart(20, 0) = -1;
  *(unsigned char *)(v9 + 16) = 1;
  list_make1_impl(226, v10);
  *(void *)(v9 + 8) = v11;
  *(_DWORD *)(v9 + 2errstart(20, 0) = -1;
  unint64_t v22 = v9;
  if (a2 && *(int *)(a2 + 4) >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(void *)(a2 + 16);
      unint64_t v15 = MemoryContextAllocZeroAligned(*v7, 0x28uLL);
      *(_DWORD *)unint64_t v15 = 355;
      *(void *)(v15 + 8) = 0;
      *(void *)(v15 + 16) = 0;
      uint64_t v16 = *(void *)(*(void *)(v14 + 8 * v12) + 8);
      unint64_t v17 = MemoryContextAllocZeroAligned(*v7, 0x18uLL);
      *(_DWORD *)unint64_t v17 = 347;
      *(_DWORD *)(v17 + 16) = -1;
      unint64_t String = makeString(v16);
      *(void *)(v17 + 8) = lcons(String, 0);
      *(void *)(v15 + 24) = v17;
      *(_DWORD *)(v15 + 32) = -1;
      uint64_t v13 = lappend(v13, v15);
      ++v12;
    }
    while (v12 < *(int *)(a2 + 4));
  }
  else
  {
    uint64_t v13 = 0;
  }
  *(void *)(v8 + 12errstart(20, 0) = v22;
  *(void *)(v8 + 24) = v13;
  unint64_t RangeVar = makeRangeVar(0, a1, -1);
  list_make1_impl(226, RangeVar);
  *(void *)(v8 + 32) = v20;
  return v8;
}

uint64_t check_indirection(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = *(unsigned int *)(result + 4);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = *(void *)(result + 16);
      unint64_t v4 = v3 + 8 * (int)v2;
      unint64_t v5 = v3 + 8;
      do
      {
        if (**(_DWORD **)(v5 - 8) == 351 && v5 != 0 && v5 < v4) {
          scanner_yyerror((size_t)"improper use of \"*\"", a2);
        }
        v5 += 8;
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t insertSelectOptions(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    if (*(void *)(a1 + 80)) {
      insertSelectOptions_cold_6();
    }
    *(void *)(a1 + 8errstart(20, 0) = a2;
  }
  uint64_t result = list_concat(*(void *)(a1 + 112), a3);
  *(void *)(a1 + 112) = result;
  if (a4)
  {
    if (*(void *)a4)
    {
      if (*(void *)(a1 + 88)) {
        insertSelectOptions_cold_5();
      }
      *(void *)(a1 + 88) = *(void *)a4;
    }
    uint64_t v9 = *(void *)(a4 + 8);
    if (v9)
    {
      if (*(void *)(a1 + 96)) {
        insertSelectOptions_cold_4();
      }
      *(void *)(a1 + 96) = v9;
    }
    int v10 = *(_DWORD *)(a4 + 16);
    if (v10)
    {
      if (*(_DWORD *)(a1 + 104)) {
        insertSelectOptions_cold_3();
      }
      if (v10 == 2 && !*(void *)(a1 + 80)) {
        insertSelectOptions_cold_2();
      }
      *(_DWORD *)(a1 + 104) = v10;
    }
  }
  if (a5)
  {
    if (*(void *)(a1 + 120)) {
      insertSelectOptions_cold_1();
    }
    *(void *)(a1 + 12errstart(20, 0) = a5;
  }
  return result;
}

_DWORD *doNegate(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = result;
  if (*result != 349)
  {
LABEL_5:
    return (_DWORD *)makeSimpleA_Expr(0, (uint64_t)"-", 0, (uint64_t)result, a2);
  }
  result[6] = a2;
  int v9 = result[2];
  if (v9 != 222)
  {
    if (v9 == 221)
    {
      result[4] = -result[4];
      return result;
    }
    goto LABEL_5;
  }
  int v10 = (unsigned char *)*((void *)result + 2);
  if (*v10 == 43) {
    ++v10;
  }
  if (*v10 == 45)
  {
    *((void *)result + 2) = v10 + 1;
  }
  else
  {
    *((void *)result + 2) = psprintf("-%s", a2, a3, a4, a2, a6, a7, a8, (size_t)v10);
    return v8;
  }
  return result;
}

unint64_t SystemTypeName(uint64_t a1)
{
  unint64_t String = makeString((uint64_t)"pg_catalog");
  unint64_t v3 = makeString(a1);
  list_make2_impl(226, String, v3);

  return makeTypeNameFromNameList(v4);
}

double SystemFuncName(uint64_t a1)
{
  unint64_t String = makeString((uint64_t)"pg_catalog");
  unint64_t v3 = makeString(a1);

  return list_make2_impl(226, String, v3);
}

unint64_t makeInterval_or_AExprOp(uint64_t a1, uint64_t a2, int a3)
{
  if (a1
    && *(_DWORD *)a1 == 347
    && !strcmp(*(const char **)(**(void **)(*(void *)(a1 + 8) + 16) + 8), "interval"))
  {
    unint64_t String = makeString((uint64_t)"pg_catalog");
    unint64_t v10 = makeString((uint64_t)"interval");
    list_make2_impl(226, String, v10);
    unint64_t TypeNameFromNameList = makeTypeNameFromNameList(v11);
    *(_DWORD *)(TypeNameFromNameList + 48) = *(_DWORD *)(a1 + 16);
    uint64_t v14 = (uint64_t *)CurrentMemoryContext(v13);
    unint64_t v15 = v14;
    if (a2)
    {
      uint64_t v16 = (_DWORD *)MemoryContextAllocZeroAligned(*v14, 0x20uLL);
      *uint64_t v16 = 349;
      v16[2] = 221;
      v16[4] = 0;
      v16[6] = -1;
      list_make1_impl(226, (uint64_t)v16);
      *(void *)(TypeNameFromNameList + 24) = v17;
    }
    unint64_t v18 = MemoryContextAllocZero(*v15, 0xCuLL);
    *(void *)unint64_t v18 = 348;
    *(_DWORD *)(v18 + 8) = a3;
    unint64_t result = MemoryContextAllocZeroAligned(*v15, 0x20uLL);
    *(_DWORD *)unint64_t result = 357;
    *(void *)(result + 8) = v18;
    *(void *)(result + 16) = TypeNameFromNameList;
    *(_DWORD *)(result + 24) = -1;
  }
  else
  {
    unint64_t v6 = makeString((uint64_t)"?");
    list_make1_impl(226, v6);
    return makeA_Expr(0, v7, a1, a2, a3);
  }
  return result;
}

unint64_t makeAndExpr(_DWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4 = a1;
  int v5 = *a1;
  if (*a1 == 346)
  {
    while (v4[1] == 15)
    {
      uint64_t v4 = (_DWORD *)*((void *)v4 + 2);
      int v5 = *v4;
      if (*v4 != 346) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    if (v5 == 119 && !v4[1])
    {
      *((void *)v4 + 1) = lappend(*((void *)v4 + 1), a2);
      return (unint64_t)v4;
    }
  }
  double v7 = list_make2_impl(226, (uint64_t)a1, a2);

  return makeBoolExpr(0, v6, a3, v7);
}

unint64_t makeOrExpr(_DWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4 = a1;
  int v5 = *a1;
  if (*a1 == 346)
  {
    while (v4[1] == 15)
    {
      uint64_t v4 = (_DWORD *)*((void *)v4 + 2);
      int v5 = *v4;
      if (*v4 != 346) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    if (v5 == 119 && v4[1] == 1)
    {
      *((void *)v4 + 1) = lappend(*((void *)v4 + 1), a2);
      return (unint64_t)v4;
    }
  }
  double v8 = list_make2_impl(226, (uint64_t)a1, a2);

  return makeBoolExpr(1, v7, a3, v8);
}

unint64_t makeNotExpr(uint64_t a1, int a2)
{
  double v4 = list_make1_impl(226, a1);

  return makeBoolExpr(2, v3, a2, v4);
}

unint64_t makeBoolAConst(int a1, int a2, double a3)
{
  int v5 = (uint64_t *)CurrentMemoryContext(a3);
  unint64_t v6 = MemoryContextAllocZeroAligned(*v5, 0x20uLL);
  unint64_t v7 = v6;
  *(_DWORD *)unint64_t v6 = 349;
  *(_DWORD *)(v6 + 8) = 223;
  double v8 = "f";
  if (a1) {
    double v8 = "t";
  }
  *(void *)(v6 + 16) = v8;
  *(_DWORD *)(v6 + 24) = a2;
  unint64_t String = makeString((uint64_t)"pg_catalog");
  unint64_t v10 = makeString((uint64_t)"BOOL");
  list_make2_impl(226, String, v10);
  unint64_t TypeNameFromNameList = makeTypeNameFromNameList(v11);
  unint64_t result = MemoryContextAllocZeroAligned(*v5, 0x20uLL);
  *(_DWORD *)unint64_t result = 357;
  *(void *)(result + 8) = v7;
  *(void *)(result + 16) = TypeNameFromNameList;
  *(_DWORD *)(result + 24) = -1;
  return result;
}

unint64_t makeColumnRef(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  int v9 = (uint64_t *)CurrentMemoryContext(a5);
  unint64_t v10 = MemoryContextAllocZeroAligned(*v9, 0x18uLL);
  *(_DWORD *)unint64_t v10 = 347;
  *(_DWORD *)(v10 + 16) = a3;
  if (!a2 || (uint64_t v11 = *(unsigned int *)(a2 + 4), (int)v11 < 1))
  {
LABEL_10:
    unint64_t String = makeString(a1);
    *(void *)(v10 + 8) = lcons(String, a2);
    return v10;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *(void *)(a2 + 16);
  unint64_t v14 = v13 + 8 * (int)v11;
  unint64_t v15 = v13 + 8;
  uint64_t v16 = -v11;
  while (1)
  {
    int v17 = **(_DWORD **)(v15 - 8);
    if (v17 != 351) {
      break;
    }
    if (v15 && v15 < v14) {
      goto LABEL_9;
    }
LABEL_5:
    --v12;
    v15 += 8;
    if (v16 == v12) {
      goto LABEL_10;
    }
  }
  if (v17 != 352) {
    goto LABEL_5;
  }
  unint64_t v20 = MemoryContextAllocZeroAligned(*v9, 0x18uLL);
  *(_DWORD *)unint64_t v20 = 353;
  if (v12)
  {
    uint64_t v21 = -v12;
    uint64_t v22 = list_copy_tail((int *)a2, v21);
    if (v22)
    {
      uint64_t v23 = *(unsigned int *)(v22 + 4);
      if ((int)v23 >= 1)
      {
        uint64_t v24 = *(void *)(v22 + 16);
        unint64_t v25 = v24 + 8 * v23;
        unint64_t v26 = v24 + 8;
        do
        {
          BOOL v27 = **(_DWORD **)(v26 - 8) != 351 || v26 == 0;
          if (!v27 && v26 < v25) {
            goto LABEL_9;
          }
          v26 += 8;
        }
        while (--v23);
      }
    }
    *(void *)(v20 + 16) = v22;
    uint64_t v29 = list_truncate(a2, v21);
    unint64_t v30 = makeString(a1);
    *(void *)(v10 + 8) = lcons(v30, v29);
    *(void *)(v20 + 8) = v10;
    return v20;
  }
  else
  {
    unint64_t v31 = makeString(a1);
    list_make1_impl(226, v31);
    *(void *)(v10 + 8) = v32;
    uint64_t v33 = *(unsigned int *)(a2 + 4);
    if ((int)v33 >= 1)
    {
      uint64_t v34 = *(void *)(a2 + 16);
      unint64_t v35 = v34 + 8 * v33;
      unint64_t v36 = v34 + 8;
      while (1)
      {
        BOOL v37 = **(_DWORD **)(v36 - 8) != 351 || v36 == 0;
        if (!v37 && v36 < v35) {
          break;
        }
        v36 += 8;
        if (!--v33) {
          goto LABEL_36;
        }
      }
LABEL_9:
      scanner_yyerror((size_t)"improper use of \"*\"", a4);
    }
LABEL_36:
    *(void *)(v20 + 8) = v10;
    *(void *)(v20 + 16) = a2;
    return v20;
  }
}

unint64_t makeParamRefCast(int a1, int a2, uint64_t a3, double a4)
{
  unint64_t v7 = (uint64_t *)CurrentMemoryContext(a4);
  double v8 = (_DWORD *)MemoryContextAllocZero(*v7, 0xCuLL);
  *double v8 = 348;
  v8[1] = a1;
  v8[2] = a2;
  unint64_t result = MemoryContextAllocZeroAligned(*v7, 0x20uLL);
  *(_DWORD *)unint64_t result = 357;
  *(void *)(result + 8) = v8;
  *(void *)(result + 16) = a3;
  *(_DWORD *)(result + 24) = -1;
  return result;
}

uint64_t parser_init(uint64_t result)
{
  *(void *)(result + 128) = 0;
  return result;
}

void base_yyparse_cold_1()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("UNENCRYPTED PASSWORD is no longer supported", v0, v1, v2, v3, v4, v5, v6, v14);
  errhint("Remove UNENCRYPTED to store the password in encrypted form instead.", v7, v8, v9, v10, v11, v12, v13, v15);
  OUTLINED_FUNCTION_5_7();
  errfinish("gram.y", 1084, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_2(size_t *a1)
{
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_2_12();
  errmsg("unrecognized role option \"%s\"", v2, v3, v4, v5, v6, v7, v8, *a1);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 1146, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_3()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 1393, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_4()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 1408, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_5()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("current database cannot be changed", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 1554, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_7()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("column number must be in range from 1 to %d", v2, v3, v4, v5, v6, v7, v8, 0x7FFFuLL);
  scanner_errposition(*(unsigned int *)(v1 - 12), v0);
  errfinish("gram.y", 2273, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_8(uint64_t a1)
{
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_2_12();
  errmsg("sequence option \"%s\" not supported here", v2, v3, v4, v5, v6, v7, v8, *(void *)(*(void *)a1 + 16));
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 2805, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_9()
{
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_2_12();
  errmsg("modulus for hash partition must be specified", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("gram.y", 2857, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_11()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("modulus for hash partition provided more than once", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_6_10();
  errfinish("gram.y", 2834, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_14()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("STDIN/STDOUT not allowed with PROGRAM", v2, v3, v4, v5, v6, v7, v8, v9);
  scanner_errposition(*(unsigned int *)(v1 - 12), v0);
  errfinish("gram.y", 3063, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_17()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("for a generated column, GENERATED ALWAYS must be specified", v2, v3, v4, v5, v6, v7, v8, v9);
  scanner_errposition(*(unsigned int *)(v1 - 20), v0);
  errfinish("gram.y", 3648, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_18()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("MATCH PARTIAL not yet implemented", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_4_8();
  errfinish("gram.y", 3915, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_22()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("conflicting constraint properties", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 5697, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_24()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("aggregates cannot have output arguments", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 7928, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_25()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("missing argument", v0, v1, v2, v3, v4, v5, v6, v14);
  errhint("Use NONE to denote the missing argument of a unary operator.", v7, v8, v9, v10, v11, v12, v13, v15);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 8321, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_26()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("WITH CHECK OPTION not supported on recursive views", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 10250, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_27()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("WITH CHECK OPTION not supported on recursive views", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 10268, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_28()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_9_8();
  errmsg("role name \"%s\" is reserved", v0, v1, v2, v3, v4, v5, v6, (size_t)"none");
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 15379, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_30()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_9_8();
  errmsg("%s cannot be used as a role name here", v0, v1, v2, v3, v4, v5, v6, (size_t)"SESSION_USER");
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 15348, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_31()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_9_8();
  errmsg("%s cannot be used as a role name here", v0, v1, v2, v3, v4, v5, v6, (size_t)"CURRENT_USER");
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 15355, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_32()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("LIMIT #,# syntax is not supported", v2, v3, v4, v5, v6, v7, v8, v16);
  errhint("Use separate LIMIT and OFFSET clauses.", v9, v10, v11, v12, v13, v14, v15, v17);
  scanner_errposition(*(unsigned int *)(v1 - 12), v0);
  errfinish("gram.y", 11877, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_33()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("subquery in FROM must have an alias", v0, v1, v2, v3, v4, v5, v6, v14);
  errhint("For example, FROM (SELECT ...) [AS] foo.", v7, v8, v9, v10, v11, v12, v13, v15);
  OUTLINED_FUNCTION_4_8();
  errfinish("gram.y", 12210, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_35()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("subquery in FROM must have an alias", v0, v1, v2, v3, v4, v5, v6, v14);
  errhint("For example, FROM (SELECT ...) [AS] foo.", v7, v8, v9, v10, v11, v12, v13, v15);
  OUTLINED_FUNCTION_4_8();
  errfinish("gram.y", 12235, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_36()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("VALUES in FROM must have an alias", v0, v1, v2, v3, v4, v5, v6, v14);
  errhint("For example, FROM (VALUES ...) [AS] foo.", v7, v8, v9, v10, v11, v12, v13, v15);
  OUTLINED_FUNCTION_4_8();
  errfinish("gram.y", 12229, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_37()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("only one DEFAULT value is allowed", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_6_10();
  errfinish("gram.y", 12688, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_38()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("only one PATH value per column is allowed", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_6_10();
  errfinish("gram.y", 12697, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_39(uint64_t a1)
{
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_2_12();
  errmsg("conflicting or redundant NULL / NOT NULL declarations for column \"%s\"", v2, v3, v4, v5, v6, v7, v8, *(void *)(a1 + 8));
  OUTLINED_FUNCTION_6_10();
  errfinish("gram.y", 12706, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_41()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("precision for type float must be at least 1 bit", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_4_8();
  errfinish("gram.y", 12969, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_42()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("precision for type float must be less than 54 bits", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_4_8();
  errfinish("gram.y", 12978, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_43()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("wrong number of parameters on left side of OVERLAPS expression", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_5_7();
  errfinish("gram.y", 13474, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_44()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("wrong number of parameters on right side of OVERLAPS expression", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 13479, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_45()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("UNIQUE predicate is not yet implemented", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_4_8();
  errfinish("gram.y", 13654, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_46()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("cannot use VARIADIC with WITHIN GROUP", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_5_7();
  errfinish("gram.y", 14046, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_47()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("cannot use DISTINCT with WITHIN GROUP", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_5_7();
  errfinish("gram.y", 14041, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_48()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_5_7();
  errfinish("gram.y", 14036, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_49()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_7_9();
  errmsg("frame starting from following row cannot end with current row", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 14517, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_50()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_7_9();
  errmsg("frame start cannot be UNBOUNDED FOLLOWING", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 14512, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_51()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_7_9();
  errmsg("frame starting from current row cannot have preceding rows", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 14546, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_52()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_7_9();
  errmsg("frame starting from following row cannot have preceding rows", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 14553, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_53()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_7_9();
  errmsg("frame end cannot be UNBOUNDED PRECEDING", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 14540, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_54()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_7_9();
  errmsg("frame start cannot be UNBOUNDED FOLLOWING", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_5_7();
  errfinish("gram.y", 14535, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_55(uint64_t a1, uint64_t *a2, unsigned char ***a3)
{
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_2_12();
  unint64_t String = makeString(*(a2 - 1));
  uint64_t v7 = lcons(String, *a2);
  size_t v8 = NameListToString(v7);
  errmsg("improper qualified name (too many dotted names): %s", v9, v10, v11, v12, v13, v14, v15, v8);
  scanner_errposition(*(unsigned int *)(a1 - 4), a3);
  errfinish("gram.y", 15112, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_56()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("type modifier cannot have ORDER BY", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_5_7();
  errfinish("gram.y", 15218, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_57()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("type modifier cannot have parameter name", v2, v3, v4, v5, v6, v7, v8, v9);
  scanner_errposition(*(unsigned int *)(v1 + 28), v0);
  errfinish("gram.y", 15212, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_58()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("type modifier cannot have ORDER BY", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_5_7();
  errfinish("gram.y", 15257, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_59()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("type modifier cannot have parameter name", v2, v3, v4, v5, v6, v7, v8, v9);
  scanner_errposition(*(unsigned int *)(v1 + 28), v0);
  errfinish("gram.y", 15251, (uint64_t)"base_yyparse");
  __break(1u);
}

void processCASbits_cold_1(size_t a1)
{
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("%s constraints cannot be marked NO INHERIT", v2, v3, v4, v5, v6, v7, v8, a1);
  OUTLINED_FUNCTION_8_7();
  errfinish("gram.y", 16789, (uint64_t)"processCASbits");
  __break(1u);
}

void processCASbits_cold_4(size_t a1)
{
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("%s constraints cannot be marked DEFERRABLE", v2, v3, v4, v5, v6, v7, v8, a1);
  OUTLINED_FUNCTION_8_7();
  errfinish("gram.y", 16750, (uint64_t)"processCASbits");
  __break(1u);
}

void makeRangeVarFromAnyName_cold_1(uint64_t a1)
{
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_2_12();
  size_t v2 = NameListToString(a1);
  errmsg("improper qualified name (too many dotted names): %s", v3, v4, v5, v6, v7, v8, v9, v2);
  OUTLINED_FUNCTION_8_7();
  errfinish("gram.y", 16675, (uint64_t)"makeRangeVarFromAnyName");
  __break(1u);
}

void SplitColQualList_cold_1(_DWORD *a1)
{
}

void SplitColQualList_cold_2()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("multiple COLLATE clauses not allowed", v2, v3, v4, v5, v6, v7, v8, v9);
  scanner_errposition(*(unsigned int *)(v1 + 24), v0);
  errfinish("gram.y", 16711, (uint64_t)"SplitColQualList");
  __break(1u);
}

void mergeTableFuncParameters_cold_1()
{
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_2_12();
  errmsg("OUT and INOUT arguments aren't allowed in TABLE functions", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("gram.y", 16614, (uint64_t)"mergeTableFuncParameters");
  __break(1u);
}

void makeOrderedSetArgs_cold_1()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("an ordered-set aggregate with a VARIADIC direct argument must have one VARIADIC aggregated argument of the same data type", v2, v3, v4, v5, v6, v7, v8, v10);
  uint64_t v9 = exprLocation(v1);
  scanner_errposition(v9, v0);
  errfinish("gram.y", 16333, (uint64_t)"makeOrderedSetArgs");
  __break(1u);
}

void insertSelectOptions_cold_2()
{
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_2_12();
  errmsg("WITH TIES cannot be specified without ORDER BY clause", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("gram.y", 16402, (uint64_t)"insertSelectOptions");
  __break(1u);
}

void insertSelectOptions_cold_3()
{
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_2_12();
  errmsg("multiple limit options not allowed", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("gram.y", 16398, (uint64_t)"insertSelectOptions");
  __break(1u);
}

void insertSelectOptions_cold_4()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("multiple LIMIT clauses not allowed", v2, v3, v4, v5, v6, v7, v8, v10);
  uint64_t v9 = exprLocation(*v1);
  scanner_errposition(v9, v0);
  errfinish("gram.y", 16390, (uint64_t)"insertSelectOptions");
  __break(1u);
}

void insertSelectOptions_cold_5()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("multiple OFFSET clauses not allowed", v2, v3, v4, v5, v6, v7, v8, v10);
  uint64_t v9 = exprLocation(*v1);
  scanner_errposition(v9, v0);
  errfinish("gram.y", 16381, (uint64_t)"insertSelectOptions");
  __break(1u);
}

void insertSelectOptions_cold_6()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("multiple ORDER BY clauses not allowed", v2, v3, v4, v5, v6, v7, v8, v10);
  uint64_t v9 = exprLocation(v1);
  scanner_errposition(v9, v0);
  errfinish("gram.y", 16370, (uint64_t)"insertSelectOptions");
  __break(1u);
}

uint64_t raw_parser(const char *a1)
{
  uint64_t v9 = 0;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v6 = 0u;
  memset(v5, 0, sizeof(v5));
  uint64_t v1 = (unsigned char ***)scanner_init(a1, (uint64_t)v5, (uint64_t)&ScanKeywords, (uint64_t)&ScanKeywordTokens);
  BYTE8(v6) = 0;
  parser_init((uint64_t)v5);
  int v3 = base_yyparse(v1, v2);
  scanner_finish((uint64_t)v1);
  if (v3) {
    return 0;
  }
  else {
    return v9;
  }
}

uint64_t base_yylex(uint64_t *a1, unsigned char **a2, unsigned char ***a3)
{
  do
  {
    while (1)
    {
      long long v7 = *a3;
      if (*((unsigned char *)*a3 + 88)) {
        break;
      }
      uint64_t v6 = core_yylex((unsigned char **)a1, a2, a3);
      if ((v6 - 275) >= 2) {
        goto LABEL_5;
      }
    }
    uint64_t v6 = *((unsigned int *)v7 + 23);
    *a1 = *((void *)v7 + 12);
    *(_DWORD *)a2 = *((_DWORD *)v7 + 26);
    **((unsigned char **)v7 + 14) = v7[120];
    v7[88] = 0;
  }
  while ((v6 - 275) < 2);
LABEL_5:
  if ((int)v6 <= 519)
  {
    if (v6 != 259 && v6 != 262) {
      return v6;
    }
    uint64_t v8 = (int)strlen((const char *)(*(void *)v7 + *(int *)a2));
  }
  else
  {
    switch(v6)
    {
      case 0x208:
        uint64_t v8 = 3;
        break;
      case 0x20F:
        uint64_t v8 = 5;
        break;
      case 0x2C2:
        uint64_t v8 = 4;
        break;
      default:
        return v6;
    }
  }
  *((void *)v7 + 14) = *(void *)v7 + *(int *)a2 + v8;
  int v9 = *(_DWORD *)a2;
  int v10 = core_yylex((unsigned char **)v7 + 12, a2, a3);
  *((_DWORD *)v7 + 23) = v10;
  *((_DWORD *)v7 + 26) = *(_DWORD *)a2;
  *(_DWORD *)a2 = v9;
  uint64_t v11 = (unsigned char *)*((void *)v7 + 14);
  v7[120] = *v11;
  *uint64_t v11 = 0;
  v7[88] = 1;
  if ((int)v6 <= 519)
  {
    if (v10 == 675)
    {
      int v12 = *(_DWORD *)a2;
      **((unsigned char **)v7 + 14) = v7[120];
      if (core_yylex((unsigned char **)v7 + 12, a2, a3) != 261) {
        scanner_yyerror((size_t)"UESCAPE must be followed by a simple string literal", (uint64_t)a3);
      }
      uint64_t v13 = (const char *)*((void *)v7 + 12);
      if (strlen(v13) != 1
        || (uint64_t v14 = *(unsigned __int8 *)v13, (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v14 + 60) & 0x10000) != 0)
        || v14 <= 0x2B && ((1 << v14) & 0x88400000000) != 0
        || scanner_isspace((char)v14))
      {
        scanner_yyerror((size_t)"invalid Unicode escape character", (uint64_t)a3);
      }
      *(_DWORD *)a2 = v12;
      *a1 = str_udeescape((const char *)*a1, *v13, v12, a3);
      v7[88] = 0;
      if (v6 != 259) {
        return 261;
      }
    }
    else
    {
      *a1 = str_udeescape((const char *)*a1, 0x5Cu, *(_DWORD *)a2, a3);
      if (v6 != 259) {
        return 261;
      }
    }
    int v17 = strlen((const char *)*a1);
    truncate_identifier((unsigned char *)*a1, v17, 1);
    return 258;
  }
  if (v6 == 706)
  {
    if (v10 == 542 || v10 == 661) {
      return 729;
    }
    else {
      return 706;
    }
  }
  else if (v6 == 527)
  {
    if (v10 == 477 || v10 == 415) {
      return 728;
    }
    else {
      return 527;
    }
  }
  else if ((v10 - 442) <= 0x2A && ((1 << (v10 + 70)) & 0x40000000021) != 0 {
         || v10 == 627
  }
         || v10 == 306)
  {
    return 727;
  }
  else
  {
    return 520;
  }
}

uint64_t str_udeescape(const char *a1, unsigned __int8 a2, int a3, unsigned char ***a4)
{
  uint64_t v54 = 0;
  memset(v53, 0, sizeof(v53));
  size_t v7 = strlen(a1) + 17;
  uint64_t v8 = palloc(v7);
  int v9 = (char *)v8;
  int v10 = *(unsigned __int8 *)a1;
  if (!*a1) {
    goto LABEL_103;
  }
  int v11 = 0;
  int v12 = a2;
  int v13 = a3 + 3;
  uint64_t v14 = MEMORY[0x1E4F14390];
  uint64_t v15 = a1;
  uint64_t v16 = v8;
  do
  {
    while (1)
    {
      unsigned int v19 = &v9[-v16];
      if ((unint64_t)&v9[-v16] > v7 - 17)
      {
        v7 *= 2;
        uint64_t v16 = repalloc(v16, v7);
        int v9 = &v19[v16];
        int v10 = *(unsigned __int8 *)v15;
      }
      if (v10 != v12) {
        break;
      }
      setup_scanner_errposition_callback((uint64_t)v53, (uint64_t)a4, v13 + v15 - a1);
      uint64_t v20 = *((unsigned __int8 *)v15 + 1);
      if (v20 == v12)
      {
        if (v11) {
          goto LABEL_102;
        }
        LODWORD(v17) = 0;
        *v9++ = v12;
        uint64_t v18 = 2;
        goto LABEL_5;
      }
      if ((*(_DWORD *)(v14 + 4 * v20 + 60) & 0x10000) == 0
        || (int v22 = *((unsigned __int8 *)v15 + 2),
            (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 2) + 60) & 0x10000) == 0)
        || (int v23 = *((unsigned __int8 *)v15 + 3),
            (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 3) + 60) & 0x10000) == 0)
        || (int v24 = *((unsigned __int8 *)v15 + 4),
            (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 4) + 60) & 0x10000) == 0))
      {
        if (v20 != 43
          || (int v25 = *((unsigned __int8 *)v15 + 2),
              (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 2) + 60) & 0x10000) == 0)
          || (int v26 = *((unsigned __int8 *)v15 + 3),
              (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 3) + 60) & 0x10000) == 0)
          || (int v27 = *((unsigned __int8 *)v15 + 4),
              (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 4) + 60) & 0x10000) == 0)
          || (int v28 = *((unsigned __int8 *)v15 + 5),
              (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 5) + 60) & 0x10000) == 0)
          || (int v29 = *((unsigned __int8 *)v15 + 6),
              (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 6) + 60) & 0x10000) == 0)
          || (int v30 = *((unsigned __int8 *)v15 + 7),
              (*(_DWORD *)(v14 + 4 * *((unsigned __int8 *)v15 + 7) + 60) & 0x10000) == 0))
        {
          str_udeescape_cold_1();
        }
        if ((v25 - 48) >= 0xA)
        {
          if ((v25 - 97) < 6)
          {
            int v31 = -87;
            if ((v26 - 48) >= 0xA) {
              goto LABEL_35;
            }
            goto LABEL_31;
          }
          if ((v25 - 65) >= 6) {
            str_udeescape_cold_3();
          }
          int v31 = -55;
          if ((v26 - 48) < 0xA) {
            goto LABEL_31;
          }
LABEL_35:
          if ((v26 - 97) >= 6)
          {
            if ((v26 - 65) >= 6) {
              str_udeescape_cold_3();
            }
            int v32 = -55;
            if ((v27 - 48) >= 0xA) {
              goto LABEL_41;
            }
          }
          else
          {
            int v32 = -87;
            if ((v27 - 48) >= 0xA) {
              goto LABEL_41;
            }
          }
        }
        else
        {
          int v31 = -48;
          if ((v26 - 48) >= 0xA) {
            goto LABEL_35;
          }
LABEL_31:
          int v32 = -48;
          if ((v27 - 48) >= 0xA)
          {
LABEL_41:
            if ((v27 - 97) >= 6)
            {
              if ((v27 - 65) >= 6) {
                str_udeescape_cold_3();
              }
              int v33 = -55;
              if ((v28 - 48) >= 0xA) {
                goto LABEL_47;
              }
LABEL_43:
              int v34 = -48;
              if ((v29 - 48) >= 0xA) {
                goto LABEL_53;
              }
            }
            else
            {
              int v33 = -87;
              if ((v28 - 48) < 0xA) {
                goto LABEL_43;
              }
LABEL_47:
              if ((v28 - 97) < 6)
              {
                int v34 = -87;
                if ((v29 - 48) < 0xA) {
                  goto LABEL_49;
                }
LABEL_53:
                if ((v29 - 97) >= 6)
                {
                  if ((v29 - 65) >= 6) {
                    str_udeescape_cold_3();
                  }
                  int v35 = -55;
                  if ((v30 - 48) >= 0xA) {
                    goto LABEL_58;
                  }
LABEL_55:
                  int v36 = -48;
                }
                else
                {
                  int v35 = -87;
                  if ((v30 - 48) < 0xA) {
                    goto LABEL_55;
                  }
LABEL_58:
                  if ((v30 - 97) >= 6)
                  {
                    if ((v30 - 65) >= 6) {
                      str_udeescape_cold_3();
                    }
                    int v36 = -55;
                  }
                  else
                  {
                    int v36 = -87;
                  }
                }
                uint64_t v17 = ((v31 + v25) << 20) | ((v32 + v26) << 16) | ((v33 + v27) << 12) | ((v34 + v28) << 8) | (16 * (v35 + v29)) | (v36 + v30);
                if ((v17 - 1) >= 0x10FFFF) {
                  str_udeescape_cold_2();
                }
                unsigned int v37 = ((v31 + v25) << 20) | ((v32 + v26) << 16) | ((v33 + v27) << 12) | ((v34 + v28) << 8) & 0xFFFFFC00 | (16 * (v35 + v29)) & 0xFFFFFC00 | (v36 + v30) & 0xFFFFFC00;
                if (v11)
                {
                  if (v37 != 56320) {
                    goto LABEL_102;
                  }
                  uint64_t v17 = (v17 & 0x3FF | ((unsigned __int16)(v11 & 0x3FF) << 10)) + 0x10000;
                  goto LABEL_3;
                }
                if (v37 == 56320) {
                  goto LABEL_102;
                }
                if (v37 != 55296)
                {
LABEL_3:
                  pg_unicode_to_server(v17, v9);
                  LODWORD(v17) = 0;
                  v9 += strlen(v9);
                }
                uint64_t v18 = 8;
                goto LABEL_5;
              }
              if ((v28 - 65) >= 6) {
                str_udeescape_cold_3();
              }
              int v34 = -55;
              if ((v29 - 48) >= 0xA) {
                goto LABEL_53;
              }
            }
LABEL_49:
            int v35 = -48;
            if ((v30 - 48) < 0xA) {
              goto LABEL_55;
            }
            goto LABEL_58;
          }
        }
        int v33 = -48;
        if ((v28 - 48) < 0xA) {
          goto LABEL_43;
        }
        goto LABEL_47;
      }
      if ((v20 - 48) >= 0xA)
      {
        if ((v20 - 97) >= 6)
        {
          if ((v20 - 65) >= 6) {
            str_udeescape_cold_3();
          }
          int v38 = -55;
          if ((v22 - 48) < 0xA)
          {
LABEL_74:
            int v39 = -48;
            if ((v23 - 48) < 0xA) {
              goto LABEL_80;
            }
            goto LABEL_84;
          }
        }
        else
        {
          int v38 = -87;
          if ((v22 - 48) < 0xA) {
            goto LABEL_74;
          }
        }
      }
      else
      {
        int v38 = -48;
        if ((v22 - 48) < 0xA) {
          goto LABEL_74;
        }
      }
      if ((v22 - 97) >= 6)
      {
        if ((v22 - 65) >= 6) {
          str_udeescape_cold_3();
        }
        int v39 = -55;
        if ((v23 - 48) < 0xA)
        {
LABEL_80:
          int v40 = -48;
          if ((v24 - 48) >= 0xA) {
            goto LABEL_89;
          }
          goto LABEL_86;
        }
      }
      else
      {
        int v39 = -87;
        if ((v23 - 48) < 0xA) {
          goto LABEL_80;
        }
      }
LABEL_84:
      if ((v23 - 97) >= 6)
      {
        if ((v23 - 65) >= 6) {
          str_udeescape_cold_3();
        }
        int v40 = -55;
        if ((v24 - 48) >= 0xA)
        {
LABEL_89:
          if ((v24 - 97) >= 6)
          {
            if ((v24 - 65) >= 6) {
              str_udeescape_cold_3();
            }
            int v41 = -55;
          }
          else
          {
            int v41 = -87;
          }
          goto LABEL_93;
        }
      }
      else
      {
        int v40 = -87;
        if ((v24 - 48) >= 0xA) {
          goto LABEL_89;
        }
      }
LABEL_86:
      int v41 = -48;
LABEL_93:
      uint64_t v17 = ((v38 + v20) << 12) | ((v39 + v22) << 8) | (16 * (v40 + v23)) | (v41 + v24);
      if ((v17 - 1) >= 0x10FFFF) {
        str_udeescape_cold_2();
      }
      unsigned int v42 = ((v38 + v20) << 12) | ((v39 + v22) << 8) & 0xFFFFFC00 | (16 * (v40 + v23)) & 0xFFFFFC00 | (v41 + v24) & 0xFFFFFC00;
      if (v11)
      {
        if (v42 != 56320) {
          goto LABEL_102;
        }
        uint64_t v17 = (v17 & 0x3FF | ((unsigned __int16)(v11 & 0x3FF) << 10)) + 0x10000;
LABEL_100:
        pg_unicode_to_server(v17, v9);
        LODWORD(v17) = 0;
        v9 += strlen(v9);
        uint64_t v18 = 5;
        goto LABEL_5;
      }
      if (v42 == 56320) {
        goto LABEL_102;
      }
      if (v42 != 55296) {
        goto LABEL_100;
      }
      uint64_t v18 = 5;
LABEL_5:
      v15 += v18;
      cancel_scanner_errposition_callback();
      int v11 = v17;
      int v10 = *(unsigned __int8 *)v15;
      if (!*v15) {
        goto LABEL_101;
      }
    }
    if (v11) {
      goto LABEL_102;
    }
    *v9++ = v10;
    int v21 = *(unsigned __int8 *)++v15;
    int v10 = v21;
  }
  while (v21);
LABEL_101:
  if (!v11) {
    goto LABEL_104;
  }
LABEL_102:
  errstart(20, 0);
  errcode();
  errmsg("invalid Unicode surrogate pair", v43, v44, v45, v46, v47, v48, v49, v51);
  scanner_errposition((v13 + v15 - a1), a4);
  errfinish("src/postgres/src_backend_parser_parser.c", 495, (uint64_t)"str_udeescape");
  __break(1u);
LABEL_103:
  uint64_t v16 = (uint64_t)v9;
LABEL_104:
  *int v9 = 0;
  return v16;
}

void str_udeescape_cold_1()
{
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("invalid Unicode escape", v0, v1, v2, v3, v4, v5, v6, vars0);
  errhint("Unicode escapes must be \\XXXX or \\+XXXXXX.", v7, v8, v9, v10, v11, v12, v13, vars0a);
  errfinish("src/postgres/src_backend_parser_parser.c", 465, (uint64_t)"str_udeescape");
  __break(1u);
}

void str_udeescape_cold_2()
{
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("invalid Unicode escape value", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("src/postgres/src_backend_parser_parser.c", 317, (uint64_t)"check_unicode_value");
  __break(1u);
}

void str_udeescape_cold_3()
{
}

uint64_t core_yy_create_buffer(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = palloc(0x48uLL);
  if (!v6 || (uint64_t v7 = v6, *(void *)(v6 + 24) = a2, v8 = palloc(a2 + 2), (*(void *)(v7 + 8) = v8) == 0)) {
    fprintf_to_ereport("out of dynamic memory in core_yy_create_buffer()");
  }
  *(_DWORD *)(v7 + 4errstart(20, 0) = 1;
  int v9 = *__error();
  *(void *)(v7 + 32) = 0;
  **(unsigned char **)(v7 + 8) = 0;
  *(unsigned char *)(*(void *)(v7 + 8) + 1) = 0;
  *(void *)(v7 + 16) = *(void *)(v7 + 8);
  *(_DWORD *)(v7 + 48) = 1;
  *(_DWORD *)(v7 + 64) = 0;
  uint64_t v10 = *(void *)(a3 + 40);
  if (v10 && *(void *)(v10 + 8 * *(void *)(a3 + 24)) == v7)
  {
    uint64_t v11 = 8 * *(void *)(a3 + 24);
    *(void *)(a3 + 56) = *(void *)(*(void *)(v10 + v11) + 32);
    uint64_t v12 = *(unsigned char **)(*(void *)(v10 + v11) + 16);
    *(void *)(a3 + 72) = v12;
    *(void *)(a3 + 136) = v12;
    *(void *)(a3 + 8) = **(void **)(v10 + v11);
    *(unsigned char *)(a3 + 48) = *v12;
  }
  *(void *)uint64_t v7 = a1;
  *(_DWORD *)(v7 + 6errstart(20, 0) = 1;
  uint64_t v13 = *(void *)(a3 + 40);
  if (v13) {
    uint64_t v13 = *(void *)(v13 + 8 * *(void *)(a3 + 24));
  }
  if (v13 != v7) {
    *(void *)(v7 + 52) = 1;
  }
  *(_DWORD *)(v7 + 44) = 0;
  *__error() = v9;
  return v7;
}

uint64_t scanner_errposition(uint64_t a1, unsigned char ***a2)
{
  if ((a1 & 0x80000000) != 0) {
    return 0;
  }
  pg_mbstrlen_with_len(**a2, a1);

  return errposition();
}

void *litbufdup(uint64_t a1)
{
  size_t v2 = *(int *)(*(void *)a1 + 48);
  uint64_t v3 = (void *)palloc((int)v2 + 1);
  memcpy(v3, *(const void **)(*(void *)a1 + 40), v2);
  *((unsigned char *)v3 + v2) = 0;
  return v3;
}

uint64_t check_escape_warning(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(*(void *)result + 80))
  {
    if (*(unsigned char *)(*(void *)result + 36))
    {
      unint64_t result = errstart(19, 0);
      if (result)
      {
        errcode();
        errmsg("nonstandard use of escape in a string literal", v2, v3, v4, v5, v6, v7, v8, v17);
        errhint("Use the escape string syntax for escapes, e.g., E'\\r\\n'.", v9, v10, v11, v12, v13, v14, v15, v18);
        uint64_t v16 = **(unsigned int **)(v1 + 160);
        if ((v16 & 0x80000000) == 0)
        {
          pg_mbstrlen_with_len(**(unsigned char ***)v1, v16);
          errposition();
        }
        unint64_t result = (uint64_t)errfinish("scan.l", 1454, (uint64_t)"check_escape_warning");
      }
    }
  }
  *(unsigned char *)(*(void *)v1 + 8errstart(20, 0) = 0;
  return result;
}

void *addunicode(int a1, _DWORD **a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if ((a1 - 1) >= 0x10FFFF) {
    scanner_yyerror((size_t)"invalid Unicode escape value", (uint64_t)a2);
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v3 = *a2[20];
  uint64_t v13 = a2;
  LODWORD(v14) = v3;
  uint64_t v16 = scb_error_callback;
  size_t v17 = &v13;
  uint64_t v4 = (uint64_t *)error_context_stack();
  uint64_t v15 = *v4;
  *uint64_t v4 = v5;
  pg_unicode_to_server(v6, __s);
  *uint64_t v4 = v15;
  int v7 = strlen(__s);
  int v8 = v7;
  uint64_t v9 = *a2;
  int v11 = (*a2)[12];
  int v10 = (*a2)[13];
  if (v11 + v7 >= v10)
  {
    do
    {
      *((_DWORD *)v9 + 13) = 2 * v10;
      uint64_t v9 = *a2;
      int v10 = (*a2)[13];
    }
    while ((*a2)[12] + v7 >= v10);
    *((void *)*a2 + 5) = repalloc(v9[5], v10);
    uint64_t v9 = *a2;
    int v11 = (*a2)[12];
  }
  unint64_t result = memcpy((void *)(v9[5] + v11), __s, v8);
  (*a2)[12] += v8;
  return result;
}

int *core_yyrestart(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4 && *(void *)(v4 + 8 * *(void *)(a2 + 24))
    || (core_yyensure_buffer_stack(a2),
        *(void *)(*(void *)(a2 + 40) + 8 * *(void *)(a2 + 24)) = core_yy_create_buffer(*(void *)(a2 + 8), 0x4000, a2), (uint64_t v4 = *(void *)(a2 + 40)) != 0))
  {
    uint64_t v5 = *(void *)(v4 + 8 * *(void *)(a2 + 24));
    int v6 = *__error();
    if (v5)
    {
      *(void *)(v5 + 32) = 0;
      **(unsigned char **)(v5 + 8) = 0;
      *(unsigned char *)(*(void *)(v5 + 8) + 1) = 0;
      *(void *)(v5 + 16) = *(void *)(v5 + 8);
      *(_DWORD *)(v5 + 48) = 1;
      *(_DWORD *)(v5 + 64) = 0;
      uint64_t v7 = *(void *)(a2 + 40);
      if (v7)
      {
        if (*(void *)(v7 + 8 * *(void *)(a2 + 24)) == v5)
        {
          uint64_t v8 = 8 * *(void *)(a2 + 24);
          *(void *)(a2 + 56) = *(void *)(*(void *)(v7 + v8) + 32);
          uint64_t v9 = *(unsigned char **)(*(void *)(v7 + v8) + 16);
          *(void *)(a2 + 72) = v9;
          *(void *)(a2 + 136) = v9;
          *(void *)(a2 + 8) = **(void **)(v7 + v8);
          *(unsigned char *)(a2 + 48) = *v9;
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = *__error();
  }
  *(void *)uint64_t v5 = a1;
  *(_DWORD *)(v5 + 6errstart(20, 0) = 1;
  uint64_t v10 = *(void *)(a2 + 40);
  if (v10) {
    uint64_t v10 = *(void *)(v10 + 8 * *(void *)(a2 + 24));
  }
  if (v10 != v5) {
    *(void *)(v5 + 52) = 1;
  }
  *(_DWORD *)(v5 + 44) = 0;
  unint64_t result = __error();
  int *result = v6;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = 8 * *(void *)(a2 + 24);
  *(void *)(a2 + 56) = *(void *)(*(void *)(v12 + v13) + 32);
  uint64_t v14 = *(unsigned char **)(*(void *)(v12 + v13) + 16);
  *(void *)(a2 + 72) = v14;
  *(void *)(a2 + 136) = v14;
  *(void *)(a2 + 8) = **(void **)(v12 + v13);
  *(unsigned char *)(a2 + 48) = *v14;
  return result;
}

uint64_t core_yy_flush_buffer(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(void *)(result + 32) = 0;
    **(unsigned char **)(result + 8) = 0;
    *(unsigned char *)(*(void *)(result + 8) + 1) = 0;
    *(void *)(result + 16) = *(void *)(result + 8);
    *(_DWORD *)(result + 48) = 1;
    *(_DWORD *)(result + 64) = 0;
    uint64_t v2 = *(void *)(a2 + 40);
    if (v2)
    {
      if (*(void *)(v2 + 8 * *(void *)(a2 + 24)) == result)
      {
        uint64_t v3 = 8 * *(void *)(a2 + 24);
        *(void *)(a2 + 56) = *(void *)(*(void *)(v2 + v3) + 32);
        uint64_t v4 = *(unsigned char **)(*(void *)(v2 + v3) + 16);
        *(void *)(a2 + 72) = v4;
        *(void *)(a2 + 136) = v4;
        *(void *)(a2 + 8) = **(void **)(v2 + v3);
        *(unsigned char *)(a2 + 48) = *v4;
      }
    }
  }
  return result;
}

uint64_t core_yy_scan_buffer(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 - 2;
  if (a2 < 2) {
    return 0;
  }
  if (*(unsigned char *)(a1 + v3)) {
    return 0;
  }
  if (*(unsigned char *)(a2 + a1 - 1)) {
    return 0;
  }
  uint64_t v8 = palloc(0x48uLL);
  if (!v8) {
    fprintf_to_ereport("out of dynamic memory in core_yy_scan_buffer()");
  }
  uint64_t v4 = v8;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = v3;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = a1;
  *(void *)(v8 + 32) = v3;
  *(void *)(v8 + 4errstart(20, 0) = 0;
  *(_DWORD *)(v8 + 48) = 1;
  *(void *)(v8 + 6errstart(20, 0) = 0;
  core_yyensure_buffer_stack(a3);
  uint64_t v9 = *(void *)(a3 + 40);
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(v9 + 8 * v10);
  if (v11 == v4) {
    return v4;
  }
  if (v11)
  {
    **(unsigned char **)(a3 + 72) = *(unsigned char *)(a3 + 48);
    *(void *)(*(void *)(*(void *)(a3 + 40) + 8 * *(void *)(a3 + 24)) + 16) = *(void *)(a3 + 72);
    *(void *)(*(void *)(*(void *)(a3 + 40) + 8 * *(void *)(a3 + 24)) + 32) = *(void *)(a3 + 56);
    uint64_t v9 = *(void *)(a3 + 40);
    uint64_t v10 = *(void *)(a3 + 24);
  }
  *(void *)(v9 + 8 * v1errstart(20, 0) = v4;
  uint64_t v12 = *(void *)(a3 + 40);
  uint64_t v13 = 8 * *(void *)(a3 + 24);
  *(void *)(a3 + 56) = *(void *)(*(void *)(v12 + v13) + 32);
  uint64_t v14 = *(unsigned char **)(*(void *)(v12 + v13) + 16);
  *(void *)(a3 + 72) = v14;
  *(void *)(a3 + 136) = v14;
  *(void *)(a3 + 8) = **(void **)(v12 + v13);
  *(unsigned char *)(a3 + 48) = *v14;
  *(_DWORD *)(a3 + 88) = 1;
  return v4;
}

uint64_t core_yyset_extra(uint64_t result, void *a2)
{
  *a2 = result;
  return result;
}

uint64_t core_yylex_init(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = palloc(0xA8uLL);
    *a1 = v2;
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t result = 0;
      *(void *)(v3 + 16errstart(20, 0) = 0;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 8errstart(20, 0) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      uint64_t v5 = *a1;
      *(_DWORD *)(v5 + 92) = 0;
      *(_DWORD *)(v5 + 96) = 0;
      *(void *)(v5 + 104) = 0;
      *(_OWORD *)(v5 + 8) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(void *)(v5 + 4errstart(20, 0) = 0;
      *(void *)(v5 + 72) = 0;
      *(void *)(v5 + 8errstart(20, 0) = 0;
    }
    else
    {
      *__error() = 12;
      return 1;
    }
  }
  else
  {
    *__error() = 22;
    return 1;
  }
  return result;
}

void *setup_scanner_errposition_callback(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)(a1 + 24) = scb_error_callback;
  *(void *)(a1 + 32) = a1;
  uint64_t result = (void *)error_context_stack();
  *(void *)(v4 + 16) = *result;
  void *result = v4 + 16;
  return result;
}

uint64_t scb_error_callback(uint64_t a1)
{
  uint64_t result = geterrcode();
  if (result != 67371461)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 8);
    if ((v3 & 0x80000000) == 0)
    {
      pg_mbstrlen_with_len(***(unsigned char ****)a1, v3);
      return errposition();
    }
  }
  return result;
}

void *cancel_scanner_errposition_callback()
{
  uint64_t result = (void *)error_context_stack();
  void *result = v1;
  return result;
}

uint64_t scanner_init(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = strlen(a1);
  uint64_t v9 = palloc(0xA8uLL);
  if (!v9) {
    scanner_init_cold_1();
  }
  uint64_t v10 = v9;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 8errstart(20, 0) = 0u;
  *(void *)(v9 + 16errstart(20, 0) = 0;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_DWORD *)(v9 + 92) = 0;
  *(_DWORD *)(v9 + 96) = 0;
  *(void *)(v9 + 104) = 0;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(void *)(v9 + 4errstart(20, 0) = 0;
  *(void *)(v9 + 72) = 0;
  *(void *)(v9 + 8errstart(20, 0) = 0;
  *(void *)uint64_t v9 = a2;
  *(void *)(a2 + 16) = a3;
  *(void *)(a2 + 24) = a4;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)backslash_quote();
  *(unsigned char *)(a2 + 36) = *(unsigned char *)escape_string_warning();
  *(unsigned char *)(a2 + 37) = *(unsigned char *)standard_conforming_strings();
  uint64_t v11 = (void *)palloc(v8 + 2);
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v8;
  memcpy(v11, a1, v8);
  *(unsigned char *)(v8 + *(void *)a2 + 1) = 0;
  *(unsigned char *)(*(void *)a2 + v8) = 0;
  core_yy_scan_buffer(*(void *)a2, v8 + 2, v10);
  *(_DWORD *)(a2 + 52) = 1024;
  *(void *)(a2 + 4errstart(20, 0) = palloc(0x400uLL);
  *(_DWORD *)(a2 + 48) = 0;
  return v10;
}

uint64_t scanner_finish(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(void *)(*(void *)result + 8) >= 0x2000uLL)
  {
    uint64_t v2 = (uint64_t *)result;
    uint64_t result = pfree(*(void *)v1);
    uint64_t v1 = *v2;
  }
  if (*(int *)(v1 + 52) >= 0x2000)
  {
    uint64_t v3 = *(void *)(v1 + 40);
    return pfree(v3);
  }
  return result;
}

uint64_t core_yyrealloc(uint64_t a1, size_t a2)
{
  if (a1) {
    return repalloc(a1, a2);
  }
  else {
    return palloc(a2);
  }
}

void fprintf_to_ereport(const char *a1)
{
}

void core_yylex_cold_1(unsigned int **a1, unsigned char ***a2)
{
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("unsafe use of string constant with Unicode escapes", v4, v5, v6, v7, v8, v9, v10, v18);
  errdetail("String constants with Unicode escapes cannot be used when standard_conforming_strings is off.", v11, v12, v13, v14, v15, v16, v17, v19);
  scanner_errposition(**a1, a2);
  errfinish("scan.l", 558, (uint64_t)"core_yylex");
  __break(1u);
}

void core_yylex_cold_2(_DWORD *a1, unsigned char ***a2, _DWORD **a3)
{
  **a3 = *a1 - *(_DWORD *)*a2;
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("invalid Unicode escape", v5, v6, v7, v8, v9, v10, v11, v19);
  errhint("Unicode escapes must be \\uXXXX or \\UXXXXXXXX.", v12, v13, v14, v15, v16, v17, v18, v20);
  scanner_errposition(**a3, a2);
  errfinish("scan.l", 697, (uint64_t)"core_yylex");
  __break(1u);
}

void scanner_init_cold_1()
{
  *__error() = 12;
  OUTLINED_FUNCTION_1_16();
  errmsg_internal("core_yylex_init() failed: %m");
  errfinish("scan.l", 1252, (uint64_t)"scanner_init");
  __break(1u);
}

int8x16_t *downcase_identifier(int8x16_t *a1, unsigned int a2, char a3, int a4)
{
  uint64_t v8 = (int8x16_t *)palloc((int)(a2 + 1));
  int v9 = pg_database_encoding_max_length();
  if ((int)a2 <= 0)
  {
    v8->i8[0] = 0;
    return v8;
  }
  if (v9 == 1)
  {
    uint64_t v10 = a2;
    uint64_t v11 = v8;
    do
    {
      __darwin_ct_rune_t v13 = a1->u8[0];
      a1 = (int8x16_t *)((char *)a1 + 1);
      __darwin_ct_rune_t v12 = v13;
      if ((v13 - 65) <= 0x19)
      {
        LOBYTE(v12) = v12 + 32;
      }
      else if ((v12 & 0x80) != 0 && __maskrune(v12, 0x8000uLL))
      {
        LOBYTE(v12) = __tolower(v12);
      }
      v11->i8[0] = v12;
      uint64_t v11 = (int8x16_t *)((char *)v11 + 1);
      --v10;
    }
    while (v10);
    goto LABEL_26;
  }
  uint64_t v14 = 0;
  if (a2 < 8 || (unint64_t)((char *)v8 - (char *)a1) < 0x20)
  {
LABEL_22:
    int v27 = &a1->u8[v14];
    int v28 = &v8->i8[v14];
    uint64_t v29 = a2 - v14;
    do
    {
      int v31 = *v27++;
      char v30 = v31;
      char v32 = v31 + 32;
      if ((v31 - 65) < 0x1A) {
        char v30 = v32;
      }
      *v28++ = v30;
      --v29;
    }
    while (v29);
    goto LABEL_26;
  }
  if (a2 >= 0x20)
  {
    uint64_t v14 = a2 & 0xFFFFFFE0;
    uint64_t v15 = a1 + 1;
    uint64_t v16 = v8 + 1;
    v17.i64[0] = 0xBFBFBFBFBFBFBFBFLL;
    v17.i64[1] = 0xBFBFBFBFBFBFBFBFLL;
    v18.i64[0] = 0x1A1A1A1A1A1A1A1ALL;
    v18.i64[1] = 0x1A1A1A1A1A1A1A1ALL;
    v19.i64[0] = 0x2020202020202020;
    v19.i64[1] = 0x2020202020202020;
    uint64_t v20 = v14;
    do
    {
      int8x16_t v21 = vbslq_s8((int8x16_t)vcgtq_u8(v18, (uint8x16_t)vaddq_s8(*v15, v17)), vaddq_s8(*v15, v19), *v15);
      v16[-1] = vbslq_s8((int8x16_t)vcgtq_u8(v18, (uint8x16_t)vaddq_s8(v15[-1], v17)), vaddq_s8(v15[-1], v19), v15[-1]);
      *uint64_t v16 = v21;
      v15 += 2;
      v16 += 2;
      v20 -= 32;
    }
    while (v20);
    if (v14 == a2) {
      goto LABEL_26;
    }
    if ((a2 & 0x18) == 0) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v22 = v14;
  uint64_t v14 = a2 & 0xFFFFFFF8;
  int v23 = (int8x8_t *)&a1->i8[v22];
  int v24 = (int8x8_t *)&v8->i8[v22];
  uint64_t v25 = v22 - v14;
  do
  {
    int8x8_t v26 = *v23++;
    *v24++ = vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v26, (int8x8_t)0xBFBFBFBFBFBFBFBFLL)), vadd_s8(v26, (int8x8_t)0x2020202020202020), v26);
    v25 += 8;
  }
  while (v25);
  if (v14 != a2) {
    goto LABEL_22;
  }
LABEL_26:
  v8->i8[a2] = 0;
  if (a2 >= 0x40 && a4) {
    truncate_identifier(v8, a2, a3);
  }
  return v8;
}

unsigned char *truncate_identifier(unsigned char *result, int a2, char a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2 >= 64)
  {
    size_t v4 = (size_t)result;
    uint64_t result = (unsigned char *)pg_mbcliplen(result, a2, 63);
    if (a3)
    {
      uint64_t v5 = (int)result;
      __memcpy_chk();
      v13[v5] = 0;
      uint64_t result = (unsigned char *)errstart(18, 0);
      if (result)
      {
        errcode();
        errmsg("identifier \"%s\" will be truncated to \"%s\"", v6, v7, v8, v9, v10, v11, v12, v4);
        uint64_t result = errfinish("src/postgres/src_backend_parser_scansup.c", 134, (uint64_t)"truncate_identifier");
      }
    }
    else
    {
      uint64_t v5 = (int)result;
    }
    *(unsigned char *)(v4 + v5) = 0;
  }
  return result;
}

BOOL scanner_isspace(int a1)
{
  return a1 == 32 || a1 - 9 < 2 || (a1 & 0xFE) == 12;
}

void proc_exit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  pg_printf("Terminating process due to FATAL error\n", a2, a3, a4, a5, a6, a7, a8, vars0);
  exit(1);
}

uint64_t s_lock(atomic_uint *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  long long v10 = 0u;
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  while (atomic_exchange(a1, 1u))
    perform_spin_delay(&v10);
  uint64_t v5 = (int *)spins_per_delay(&spins_per_delay);
  int v6 = *v5;
  if (v7)
  {
    if (v6 >= 11)
    {
      int v8 = v6 - 1;
LABEL_10:
      *uint64_t v5 = v8;
    }
  }
  else if (v6 <= 999)
  {
    if (v6 >= 900) {
      int v8 = 1000;
    }
    else {
      int v8 = v6 + 100;
    }
    goto LABEL_10;
  }
  return DWORD1(v10);
}

_DWORD *perform_spin_delay(_DWORD *a1)
{
  ++*a1;
  uint64_t result = (_DWORD *)spins_per_delay();
  if (v3 >= *result)
  {
    int v4 = a1[1] + 1;
    a1[1] = v4;
    if (v4 >= 1001) {
      perform_spin_delay_cold_1((uint64_t)a1);
    }
    int v5 = a1[2];
    if (!v5)
    {
      int v5 = 1000;
      a1[2] = 1000;
    }
    pg_usleep(v5);
    double v6 = (double)(int)a1[2];
    uint64_t result = (_DWORD *)random();
    int v7 = a1[2] + (int)(v6 * ((double)(uint64_t)result / 2147483650.0) + 0.5);
    if (v7 > 1000000) {
      int v7 = 1000;
    }
    a1[2] = v7;
    *a1 = 0;
  }
  return result;
}

int *finish_spin_delay()
{
  uint64_t result = (int *)spins_per_delay();
  int v1 = *result;
  if (v2)
  {
    if (v1 < 11) {
      return result;
    }
    int v3 = v1 - 1;
  }
  else
  {
    if (v1 > 999) {
      return result;
    }
    if (v1 >= 900) {
      int v3 = 1000;
    }
    else {
      int v3 = v1 + 100;
    }
  }
  int *result = v3;
  return result;
}

void perform_spin_delay_cold_1(uint64_t a1)
{
  int v1 = *(const char **)(a1 + 16);
  if (*(void *)(a1 + 32)) {
    int v2 = *(const char **)(a1 + 32);
  }
  else {
    int v2 = "(unknown)";
  }
  int v3 = *(_DWORD *)(a1 + 24);
  errstart(22, 0);
  errmsg_internal("stuck spinlock detected at %s, %s:%d", v2, v1, v3);
  errfinish("src/postgres/src_backend_storage_lmgr_s_lock.c", 94, (uint64_t)"s_lock_stuck");
  __break(1u);
}

void *check_stack_depth()
{
  stack_base_ptr();
  uint64_t result = (void *)max_stack_depth_bytes();
  if (v2) {
    BOOL v3 = v1 <= *result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    check_stack_depth_cold_1();
  }
  return result;
}

BOOL stack_is_too_deep()
{
  stack_base_ptr();
  uint64_t v1 = *(void *)max_stack_depth_bytes();
  if (v2) {
    BOOL v3 = v0 <= v1;
  }
  else {
    BOOL v3 = 1;
  }
  return !v3;
}

void check_stack_depth_cold_1()
{
  errstart(20, 0);
  errcode();
  errmsg("stack depth limit exceeded", v0, v1, v2, v3, v4, v5, v6, v15);
  int v7 = (unsigned int *)max_stack_depth();
  errhint("Increase the configuration parameter \"max_stack_depth\" (currently %dkB), after ensuring the platform's stack depth limit is adequate.", v8, v9, v10, v11, v12, v13, v14, *v7);
  errfinish("src/postgres/src_backend_tcop_postgres.c", 611, (uint64_t)"check_stack_depth");
  __break(1u);
}

unsigned __int8 *datumCopy(unsigned __int8 *result, char a2, int a3)
{
  uint64_t v3 = result;
  if ((a2 & 1) == 0)
  {
    if (a3 == -1)
    {
      unsigned int v6 = *result;
      if (v6 == 1)
      {
        int v7 = result[1];
        if ((v7 & 0xFE) == 2)
        {
          uint64_t EOHP = DatumGetEOHP((uint64_t)result);
          size_t flat_size = EOH_get_flat_size(EOHP);
          uint64_t v10 = palloc(flat_size);
          EOH_flatten_into(EOHP);
          return (unsigned __int8 *)v10;
        }
        uint64_t v12 = 3;
        if (v7 == 18) {
          uint64_t v12 = 18;
        }
        if (v7 == 1) {
          size_t v5 = 10;
        }
        else {
          size_t v5 = v12;
        }
      }
      else
      {
        if (v6) {
          unsigned int v11 = v6 >> 1;
        }
        else {
          unsigned int v11 = *(_DWORD *)result >> 2;
        }
        size_t v5 = v11;
      }
      size_t Size = v5;
    }
    else
    {
      size_t Size = datumGetSize((const char *)result, 0, a3);
      size_t v5 = Size;
    }
    uint64_t v13 = (void *)palloc(Size);
    memcpy(v13, v3, v5);
    return (unsigned __int8 *)v13;
  }
  return result;
}

BOOL datumIsEqual(const char *a1, const char *a2, int a3, int a4)
{
  if (a3)
  {
    return a1 == a2;
  }
  else
  {
    size_t Size = datumGetSize(a1, 0, a4);
    size_t v9 = datumGetSize(a2, 0, a4);
    BOOL result = 0;
    if (Size != v9) {
      return result;
    }
    return memcmp(a1, a2, Size) == 0;
  }
}

void datumGetSize_cold_2()
{
  errstart(20, 0);
  errcode();
  errmsg("invalid Datum pointer", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("src/postgres/src_backend_utils_adt_datum.c", 97, (uint64_t)"datumGetSize");
  __break(1u);
}

void datumGetSize_cold_3()
{
  errstart(20, 0);
  errcode();
  errmsg("invalid Datum pointer", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("src/postgres/src_backend_utils_adt_datum.c", 109, (uint64_t)"datumGetSize");
  __break(1u);
}

uint64_t DatumGetEOHP(uint64_t a1)
{
  return *(void *)(a1 + 2);
}

uint64_t EOH_get_flat_size(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 8))();
}

uint64_t EOH_flatten_into(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 8))();
}

char *quote_identifier(unsigned char *a1)
{
  uint64_t v1 = a1;
  int v2 = *a1;
  BOOL v4 = v2 == 95 || (v2 - 97) < 0x1A;
  int v5 = 0;
  if (*a1)
  {
    uint64_t v6 = a1 + 1;
    do
    {
      unsigned int v7 = v2 - 97;
      unsigned int v8 = v2 - 48;
      if (v2 == 34) {
        int v9 = v5 + 1;
      }
      else {
        int v9 = v5;
      }
      BOOL v10 = v8 >= 0xA;
      if (v8 >= 0xA) {
        int v11 = v9;
      }
      else {
        int v11 = v5;
      }
      BOOL v12 = !v10 && v4;
      BOOL v13 = v2 == 95;
      if (v2 == 95) {
        int v14 = v5;
      }
      else {
        int v14 = v11;
      }
      if (v13) {
        BOOL v15 = v4;
      }
      else {
        BOOL v15 = v12;
      }
      if (v7 >= 0x1A)
      {
        int v5 = v14;
        BOOL v4 = v15;
      }
      int v16 = *v6++;
      int v2 = v16;
    }
    while (v16);
  }
  if (*(unsigned char *)quote_all_identifiers()
    || (v17 & 1) == 0
    || (unsigned int v18 = ScanKeywordLookup(v1, (uint64_t)&ScanKeywords), (v18 & 0x80000000) == 0) && ScanKeywordCategories[v18])
  {
    size_t v19 = strlen(v1);
    BOOL result = (char *)palloc(v19 + v5 + 3);
    char *result = 34;
    int8x16_t v21 = result;
    while (1)
    {
      int v22 = *(unsigned __int8 *)v1;
      if (v22 == 34)
      {
        v21[1] = 34;
        v21 += 2;
      }
      else
      {
        if (!*v1)
        {
          *(_WORD *)(v21 + 1) = 34;
          return result;
        }
        ++v21;
      }
      *int8x16_t v21 = v22;
      ++v1;
    }
  }
  return (char *)v1;
}

void ExceptionalCondition(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 && a1)
  {
    if (a3)
    {
      write_stderr("TRAP: %s(\"%s\", File: \"%s\", Line: %d)\n", a2, a3, a4, a5, a6, a7, a8, a2);
      fflush((FILE *)*MEMORY[0x1E4F143C8]);
      abort();
    }
  }
  write_stderr("TRAP: ExceptionalCondition: bad arguments\n", a2, a3, a4, a5, a6, a7, a8, v8);
  fflush((FILE *)*MEMORY[0x1E4F143C8]);
  abort();
}

BOOL in_error_recursion_trouble()
{
  return *(_DWORD *)recursion_depth() > 2;
}

uint64_t write_stderr(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  int v9 = (FILE **)MEMORY[0x1E4F143C8];
  pg_vfprintf((FILE *)*MEMORY[0x1E4F143C8], a1, &a9);
  return fflush(*v9);
}

uint64_t errmsg_internal(char *a1, ...)
{
  va_start(va, a1);
  uint64_t v2 = errordata();
  int v3 = *(_DWORD *)errordata_stack_depth();
  BOOL v4 = (_DWORD *)recursion_depth();
  ++*v4;
  if (v3 < 0) {
    errmsg_internal_cold_1(v5);
  }
  uint64_t v6 = v4;
  uint64_t v7 = v2 + 192 * v3;
  size_t v8 = (uint64_t *)CurrentMemoryContext();
  uint64_t v9 = *v8;
  *size_t v8 = v10;
  *(void *)(v7 + 112) = a1;
  memset(v21, 0, sizeof(v21));
  initStringInfo(v21);
  int v12 = *(_DWORD *)(v7 + 176);
  int v11 = (int *)(v7 + 176);
  *__error() = v12;
  unsigned int appended = appendStringInfoVA((uint64_t)v21, a1, (size_t *)va);
  if (appended)
  {
    unsigned int v14 = appended;
    do
    {
      enlargeStringInfo((uint64_t)v21, v14);
      int v15 = *v11;
      *__error() = v15;
      unsigned int v14 = appendStringInfoVA((uint64_t)v21, a1, (size_t *)va);
    }
    while (v14);
  }
  uint64_t v16 = v2 + 192 * v3;
  uint64_t v19 = *(void *)(v16 + 64);
  unsigned int v18 = (void **)(v16 + 64);
  uint64_t v17 = v19;
  if (v19) {
    pfree(v17);
  }
  *unsigned int v18 = pstrdup(v21[0]);
  pfree((uint64_t)v21[0]);
  *size_t v8 = v9;
  --*v6;
  return 0;
}

void *set_backtrace(uint64_t a1)
{
  memset(v3, 0, sizeof(v3));
  initStringInfo((uint64_t)v3);
  BOOL result = appendStringInfoString((uint64_t)v3, "backtrace generation is not supported by this installation");
  *(void *)(a1 + 104) = v3[0];
  return result;
}

void pg_re_throw()
{
  uint64_t v0 = *(int **)PG_exception_stack();
  if (!v0)
  {
    errordata();
    uint64_t v1 = (int *)errordata_stack_depth();
    *(_DWORD *)(v2 + 192 * *v1) = 21;
    BOOL v3 = *(_DWORD *)log_min_messages() < 22;
    *(unsigned char *)(v4 + 4) = v3;
    if (*(_DWORD *)whereToSendOutput() == 2) {
      *(unsigned char *)(v5 + 192 * v6 + 5) = 1;
    }
    *(void *)error_context_stack() = 0;
    errfinish(*(void *)(v7 + 192 * v8 + 16), *(unsigned int *)(v7 + 192 * v8 + 24), *(void *)(v7 + 192 * v8 + 32));
    ExceptionalCondition((uint64_t)"pg_re_throw tried to return", (size_t)"FailedAssertion", (uint64_t)"src/postgres/src_backend_utils_error_elog.c", 1394, v9, v10, v11, v12);
  }
  siglongjmp(v0, 1);
}

void *EmitErrorReport()
{
  errordata();
  errordata_stack_depth();
  uint64_t v0 = (_DWORD *)recursion_depth();
  ++*v0;
  if (v2 < 0) {
    EmitErrorReport_cold_1(v1);
  }
  BOOL v3 = v0;
  BOOL result = (void *)CurrentMemoryContext();
  uint64_t v5 = result;
  int v6 = (uint64_t (*)(void))*result;
  void *result = v7;
  if (*(unsigned char *)(v8 + 4))
  {
    BOOL result = (void *)emit_log_hook();
    if (*result) {
      BOOL result = (void *)((uint64_t (*)(uint64_t))*result)(v9 + 192 * v10);
    }
  }
  *uint64_t v5 = v6;
  --*v3;
  return result;
}

uint64_t errdetail(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  uint64_t v10 = errordata();
  int v11 = *(_DWORD *)errordata_stack_depth();
  uint64_t v12 = (_DWORD *)recursion_depth();
  ++*v12;
  if (v11 < 0) {
    errdetail_cold_1(v13);
  }
  unsigned int v14 = v12;
  uint64_t v15 = v10 + 192 * v11;
  uint64_t v16 = (uint64_t *)CurrentMemoryContext();
  uint64_t v17 = *v16;
  *uint64_t v16 = v18;
  memset(v29, 0, sizeof(v29));
  initStringInfo(v29);
  int v20 = *(_DWORD *)(v15 + 176);
  uint64_t v19 = (int *)(v15 + 176);
  *__error() = v20;
  unint64_t appended = appendStringInfoVA((uint64_t)v29, a1, &a9);
  if (appended)
  {
    unint64_t v22 = appended;
    do
    {
      enlargeStringInfo(v29, v22);
      int v23 = *v19;
      *__error() = v23;
      unint64_t v22 = appendStringInfoVA((uint64_t)v29, a1, &a9);
    }
    while (v22);
  }
  uint64_t v24 = v10 + 192 * v11;
  uint64_t v27 = *(void *)(v24 + 72);
  int8x8_t v26 = (void **)(v24 + 72);
  uint64_t v25 = v27;
  if (v27) {
    pfree(v25);
  }
  *int8x8_t v26 = pstrdup(v29[0]);
  pfree((uint64_t)v29[0]);
  *uint64_t v16 = v17;
  --*v14;
  return 0;
}

uint64_t errhint(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  uint64_t v10 = errordata();
  int v11 = *(_DWORD *)errordata_stack_depth();
  uint64_t v12 = (_DWORD *)recursion_depth();
  ++*v12;
  if (v11 < 0) {
    errhint_cold_1(v13);
  }
  unsigned int v14 = v12;
  uint64_t v15 = v10 + 192 * v11;
  uint64_t v16 = (uint64_t *)CurrentMemoryContext();
  uint64_t v17 = *v16;
  *uint64_t v16 = v18;
  memset(v29, 0, sizeof(v29));
  initStringInfo((uint64_t)v29);
  int v20 = *(_DWORD *)(v15 + 176);
  uint64_t v19 = (int *)(v15 + 176);
  *__error() = v20;
  unsigned int appended = appendStringInfoVA((uint64_t)v29, a1, &a9);
  if (appended)
  {
    unsigned int v22 = appended;
    do
    {
      enlargeStringInfo((uint64_t)v29, v22);
      int v23 = *v19;
      *__error() = v23;
      unsigned int v22 = appendStringInfoVA((uint64_t)v29, a1, &a9);
    }
    while (v22);
  }
  uint64_t v24 = v10 + 192 * v11;
  uint64_t v27 = *(void *)(v24 + 88);
  int8x8_t v26 = (void **)(v24 + 88);
  uint64_t v25 = v27;
  if (v27) {
    pfree(v25);
  }
  *int8x8_t v26 = pstrdup(v29[0]);
  pfree((uint64_t)v29[0]);
  *uint64_t v16 = v17;
  --*v14;
  return 0;
}

uint64_t errcontext_msg(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  uint64_t v10 = errordata();
  int v11 = *(_DWORD *)errordata_stack_depth();
  uint64_t v12 = (_DWORD *)recursion_depth();
  ++*v12;
  if (v11 < 0) {
    errcontext_msg_cold_1(v13);
  }
  uint64_t v15 = v12;
  uint64_t v16 = v10 + 192 * v11;
  uint64_t v17 = (uint64_t *)CurrentMemoryContext(v14);
  uint64_t v18 = *v17;
  *uint64_t v17 = v19;
  memset(v30, 0, sizeof(v30));
  initStringInfo((uint64_t)v30);
  unsigned int v22 = *(char **)(v16 + 96);
  int8x16_t v21 = (uint64_t *)(v16 + 96);
  int v20 = v22;
  if (v22)
  {
    appendStringInfoString((uint64_t)v30, v20);
    appendStringInfoChar((uint64_t)v30, 10);
  }
  uint64_t v23 = v10 + 192 * v11;
  int v25 = *(_DWORD *)(v23 + 176);
  uint64_t v24 = (int *)(v23 + 176);
  *__error() = v25;
  unsigned int appended = appendStringInfoVA((uint64_t)v30, a1, &a9);
  if (appended)
  {
    unsigned int v27 = appended;
    do
    {
      enlargeStringInfo((uint64_t)v30, v27);
      int v28 = *v24;
      *__error() = v28;
      unsigned int v27 = appendStringInfoVA((uint64_t)v30, a1, &a9);
    }
    while (v27);
  }
  if (*v21) {
    pfree(*v21);
  }
  *int8x16_t v21 = (uint64_t)pstrdup(v30[0]);
  pfree((uint64_t)v30[0]);
  *uint64_t v17 = v18;
  --*v15;
  return 0;
}

uint64_t set_errcontext_domain()
{
  uint64_t v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0) {
    set_errcontext_domain_cold_1(v0);
  }
  uint64_t v1 = errordata();
  if (!v2) {
    int v2 = "postgres-13";
  }
  *(void *)(v1 + 192 * v3 + 48) = v2;
  return 0;
}

uint64_t errposition()
{
  uint64_t v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0) {
    errposition_cold_1(v0);
  }
  uint64_t v1 = errordata();
  *(_DWORD *)(v1 + 192 * v2 + 16errstart(20, 0) = v3;
  return 0;
}

uint64_t internalerrposition()
{
  uint64_t v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0) {
    internalerrposition_cold_1(v0);
  }
  uint64_t v1 = errordata();
  *(_DWORD *)(v1 + 192 * v2 + 164) = v3;
  return 0;
}

uint64_t geterrcode()
{
  uint64_t v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0) {
    geterrcode_cold_1(v0);
  }
  uint64_t v1 = errordata();
  return *(unsigned int *)(v1 + 192 * v2 + 56);
}

uint64_t getinternalerrposition()
{
  uint64_t v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0) {
    getinternalerrposition_cold_1(v0);
  }
  uint64_t v1 = errordata();
  return *(unsigned int *)(v1 + 192 * v2 + 164);
}

uint64_t FlushErrorState()
{
  *(_DWORD *)errordata_stack_depth() = -1;
  *(_DWORD *)recursion_depth() = 0;
  uint64_t v0 = *(void *)ErrorContext();

  return MemoryContextReset(v0);
}

void errstart_cold_1(_DWORD *a1)
{
  *a1 = -1;
  errstart(22, 0);
  errmsg_internal("ERRORDATA_STACK_SIZE exceeded");
  errfinish("src/postgres/src_backend_utils_error_elog.c", 403, (uint64_t)"errstart");
  __break(1u);
}

void errmsg_internal_cold_1(_DWORD *a1)
{
}

void errfinish_cold_1(_DWORD *a1)
{
}

void errfinish_cold_2()
{
}

void EmitErrorReport_cold_1(_DWORD *a1)
{
}

void errcode_cold_1(_DWORD *a1)
{
}

void errmsg_cold_1(_DWORD *a1)
{
}

void errdetail_cold_1(_DWORD *a1)
{
}

void errhint_cold_1(_DWORD *a1)
{
}

void errcontext_msg_cold_1(_DWORD *a1)
{
}

void set_errcontext_domain_cold_1(_DWORD *a1)
{
}

void errposition_cold_1(_DWORD *a1)
{
}

void internalerrposition_cold_1(_DWORD *a1)
{
}

void internalerrquery_cold_1(_DWORD *a1)
{
}

void geterrposition_cold_1(_DWORD *a1)
{
}

void CopyErrorData_cold_1(_DWORD *a1)
{
}

uint64_t FunctionCall5Coll(uint64_t (**a1)(void *), int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v11 = 327680;
  uint64_t v13 = 0;
  uint64_t v15 = 0;
  uint64_t v17 = 0;
  uint64_t v19 = 0;
  v9[1] = 0;
  v9[2] = 0;
  v9[0] = a1;
  int v10 = a2;
  uint64_t v12 = a3;
  uint64_t v14 = a4;
  uint64_t v16 = a5;
  uint64_t v18 = a6;
  uint64_t v20 = a7;
  uint64_t v21 = 0;
  uint64_t result = (*a1)(v9);
  if ((_BYTE)v11) {
    FunctionCall5Coll_cold_1((uint64_t)a1);
  }
  return result;
}

void FunctionCall5Coll_cold_1(uint64_t a1)
{
  errmsg_internal("function %u returned NULL", *(_DWORD *)(a1 + 8));
  errfinish("src/postgres/src_backend_utils_fmgr_fmgr.c", 318, (uint64_t)"FunctionCall5Coll");
  __break(1u);
}

void *__cdecl hash_search(hash_table *table, char *key, void *datum, void (__cdecl *replace_func)(void *))
{
  int v5 = (int)datum;
  int v8 = (*(uint64_t (**)(char *, hash_node **))&table[1].size)(key, table[4].buckets);

  return hash_search_with_hash_value((uint64_t)table, (uint64_t)key, v8, v5, replace_func);
}

void hash_search_with_hash_value_cold_1(const char **a1)
{
}

void hash_search_with_hash_value_cold_2(const char **a1)
{
}

void hash_search_with_hash_value_cold_3(int a1)
{
}

void hash_search_with_hash_value_cold_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errmsg("out of memory", a2, a3, a4, a5, a6, a7, a8, vars0);
  errfinish("src/postgres/src_backend_utils_hash_dynahash.c", 605, (uint64_t)"hash_search_with_hash_value");
  __break(1u);
}

void hash_search_with_hash_value_cold_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errmsg("out of shared memory", a2, a3, a4, a5, a6, a7, a8, vars0);
  errfinish("src/postgres/src_backend_utils_hash_dynahash.c", 601, (uint64_t)"hash_search_with_hash_value");
  __break(1u);
}

void hash_search_with_hash_value_cold_6(uint64_t a1)
{
}

uint64_t pg_get_client_encoding()
{
  return *(unsigned int *)(*(void *)ClientEncoding() + 8);
}

uint64_t pg_unicode_to_server(uint64_t result, char *a2)
{
  if ((result - 1) >= 0x10FFFF) {
    pg_unicode_to_server_cold_2();
  }
  if (result > 0x7F)
  {
    uint64_t v4 = *(int *)(*(void *)DatabaseEncoding() + 8);
    if (v4 == 6)
    {
      unicode_to_utf8(v3, a2);
      uint64_t result = pg_utf_mblen(a2);
      a2[(int)result] = 0;
    }
    else
    {
      int v5 = (void *)Utf8ToServerConvProc();
      if (!*v5) {
        pg_unicode_to_server_cold_1();
      }
      uint64_t v7 = (uint64_t (***)(void *))v5;
      unicode_to_utf8(v6, v9);
      int v8 = pg_utf_mblen(v9);
      v9[v8] = 0;
      return FunctionCall5Coll(*v7, 0, 6, v4, (uint64_t)v9, (uint64_t)a2, v8);
    }
  }
  else
  {
    *(_WORD *)a2 = result;
  }
  return result;
}

uint64_t GetDatabaseEncoding()
{
  return *(unsigned int *)(*(void *)DatabaseEncoding() + 8);
}

uint64_t GetDatabaseEncodingName()
{
  return **(void **)DatabaseEncoding();
}

uint64_t pg_mblen()
{
  uint64_t v0 = pg_wchar_table[6 * *(unsigned int *)(*(void *)DatabaseEncoding() + 8) + 2];

  return ((uint64_t (*)(uint64_t))v0)(v1);
}

uint64_t pg_mbstrlen_with_len(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = DatabaseEncoding();
  if (LODWORD(pg_wchar_table[6 * *(int *)(*(void *)v4 + 8) + 5]) == 1) {
    return a2;
  }
  if ((int)a2 >= 1)
  {
    uint64_t v7 = v4;
    uint64_t v5 = 0;
    do
    {
      if (!*a1) {
        break;
      }
      int v8 = ((uint64_t (*)(unsigned char *))pg_wchar_table[6 * *(unsigned int *)(*(void *)v7 + 8) + 2])(a1);
      LODWORD(a2) = a2 - v8;
      a1 += v8;
      uint64_t v5 = (v5 + 1);
    }
    while ((int)a2 > 0);
    return v5;
  }
  return 0;
}

uint64_t pg_database_encoding_max_length()
{
  return LODWORD(pg_wchar_table[6 * *(int *)(*(void *)DatabaseEncoding() + 8) + 5]);
}

uint64_t pg_mbcliplen(unsigned char *a1, int a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(*(void *)DatabaseEncoding() + 8);
  if (pg_encoding_max_length(v6) == 1)
  {
    if (a2 >= (int)a3) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = a2;
    }
    if ((int)v7 >= 1)
    {
      uint64_t v8 = 0;
      while (a1[v8])
      {
        if (v7 == ++v8) {
          return v7;
        }
      }
      return v8;
    }
    return 0;
  }
  if (a2 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v9 = pg_wchar_table[6 * v6 + 2];
  while (1)
  {
    if (!*a1) {
      return v7;
    }
    int v10 = ((uint64_t (*)(unsigned char *))v9)(a1);
    if (v10 + (int)v7 > (int)a3) {
      return v7;
    }
    if (v10 + v7 == a3) {
      break;
    }
    a2 -= v10;
    a1 += v10;
    uint64_t v7 = (v10 + v7);
    if (a2 <= 0) {
      return v7;
    }
  }
  return a3;
}

uint64_t pg_encoding_mbcliplen(int a1, unsigned char *a2, int a3, uint64_t a4)
{
  if (pg_encoding_max_length(a1) == 1)
  {
    if (a3 >= (int)a4) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = a3;
    }
    if ((int)v8 >= 1)
    {
      uint64_t v9 = 0;
      while (a2[v9])
      {
        if (v8 == ++v9) {
          return v8;
        }
      }
      return v9;
    }
    return 0;
  }
  if (a3 < 1) {
    return 0;
  }
  uint64_t v8 = 0;
  int v10 = pg_wchar_table[6 * a1 + 2];
  while (1)
  {
    if (!*a2) {
      return v8;
    }
    int v11 = ((uint64_t (*)(unsigned char *))v10)(a2);
    if (v11 + (int)v8 > (int)a4) {
      return v8;
    }
    if (v11 + v8 == a4) {
      break;
    }
    a3 -= v11;
    a2 += v11;
    uint64_t v8 = (v11 + v8);
    if (a3 <= 0) {
      return v8;
    }
  }
  return a4;
}

BOOL pg_verifymbstr()
{
  uint64_t v0 = DatabaseEncoding();
  return (int)pg_verify_mbstr_len(*(_DWORD *)(*(void *)v0 + 8), v1, v2, v3) >= 0;
}

void pg_unicode_to_server_cold_1()
{
  errstart(20, 0);
  errcode();
  errmsg("conversion between %s and %s is not supported", v0, v1, v2, v3, v4, v5, v6, (size_t)"UTF8");
  errfinish("src/postgres/src_backend_utils_mb_mbutils.c", 300, (uint64_t)"pg_unicode_to_server");
  __break(1u);
}

void pg_unicode_to_server_cold_2()
{
  errstart(20, 0);
  errcode();
  errmsg("invalid Unicode code point", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("src/postgres/src_backend_utils_mb_mbutils.c", 275, (uint64_t)"pg_unicode_to_server");
  __break(1u);
}

uint64_t AllocSetDeleteFreeList(uint64_t result)
{
  if ((*(_DWORD *)(result + 216) & 0x80000000) == 0)
  {
    uint64_t v1 = context_freelists();
    uint64_t v3 = v1 + 16 * v2;
    uint64_t v4 = (uint64_t *)(v3 + 8);
    uint64_t result = *(void *)(v3 + 8);
    if (result)
    {
      do
      {
        *uint64_t v4 = *(void *)(result + 48);
        --*(_DWORD *)v3;
        free((void *)result);
        uint64_t result = *v4;
      }
      while (*v4);
    }
  }
  return result;
}

void *AllocSetAlloc(void *a1, unint64_t a2)
{
  if (a1[25] >= a2)
  {
    unsigned int v10 = 29 - __clz(a2 - 1);
    if (a2 <= 8) {
      unsigned int v11 = 0;
    }
    else {
      unsigned int v11 = v10;
    }
    uint64_t v12 = &a1[v11];
    uint64_t v15 = v12[11];
    uint64_t v14 = v12 + 11;
    uint64_t v13 = v15;
    if (v15)
    {
      *uint64_t v14 = *(void *)(v13 + 8);
      *(void *)(v13 + 8) = a1;
      return (void *)(v13 + 16);
    }
    uint64_t v16 = 8 << v11;
    uint64_t v17 = (void *)a1[10];
    if (v17)
    {
      uint64_t v18 = (void *)v17[3];
      unint64_t v19 = v17[4] - (void)v18;
      uint64_t v20 = v16 + 16;
      if (v19 >= v16 + 16) {
        goto LABEL_40;
      }
      if (v19 >= 0x18)
      {
        do
        {
          uint64_t v21 = v19 - 16;
          unsigned int v22 = 29 - __clz(v19 - 17);
          if (v19 - 16 <= 8) {
            unsigned int v22 = 0;
          }
          uint64_t v23 = 1 << (v22 + 3);
          BOOL v24 = v21 == v23;
          BOOL v25 = v21 != v23;
          if (!v24) {
            uint64_t v21 = 1 << (v22 + 2);
          }
          unsigned int v26 = v22 - v25;
          unsigned int v27 = (uint64_t *)v17[3];
          uint64_t v28 = v21 + 16;
          v17[3] = (char *)v27 + v21 + 16;
          *unsigned int v27 = v21;
          uint64_t v29 = &a1[v26];
          v19 -= v28;
          v27[1] = v29[11];
          v29[11] = v27;
        }
        while (v19 > 0x17);
      }
    }
    unint64_t v31 = a1[23];
    size_t v30 = a1[24];
    if (2 * v30 < v31) {
      unint64_t v31 = 2 * v30;
    }
    a1[24] = v31;
    size_t v32 = v16 + 56;
    do
    {
      size_t v33 = v30;
      v30 *= 2;
    }
    while (v33 < v32);
    uint64_t v17 = malloc_type_malloc(v33, 0xB2ECBD4CuLL);
    BOOL v34 = v17 == 0;
    if (!v17)
    {
      if (v33 > 0x100000)
      {
        while (1)
        {
          size_t v35 = v33 >> 1;
          if (v33 >> 1 < v32) {
            break;
          }
          uint64_t v17 = malloc_type_malloc(v33 >> 1, 0x52C866B4uLL);
          BOOL v34 = v17 == 0;
          if (!v17)
          {
            BOOL v36 = v33 > 0x200001;
            v33 >>= 1;
            if (v36) {
              continue;
            }
          }
          goto LABEL_34;
        }
      }
      return 0;
    }
    size_t v35 = v33;
LABEL_34:
    if (v34) {
      return 0;
    }
    a1[1] += v35;
    v17[3] = v17 + 5;
    v17[4] = (char *)v17 + v35;
    *uint64_t v17 = a1;
    v17[1] = 0;
    uint64_t v37 = a1[10];
    v17[2] = v37;
    if (v37) {
      *(void *)(v37 + 8) = v17;
    }
    a1[10] = v17;
    uint64_t v18 = (void *)v17[3];
    uint64_t v20 = v16 + 16;
LABEL_40:
    v17[3] = (char *)v18 + v20;
    *uint64_t v18 = v16;
    v18[1] = a1;
    return v18 + 2;
  }
  unint64_t v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = v3 + 56;
  uint64_t result = malloc_type_malloc(v3 + 56, 0x2B1819C8uLL);
  if (result)
  {
    a1[1] += v4;
    void *result = a1;
    result[3] = (char *)result + v4;
    result[4] = (char *)result + v4;
    result[5] = v3;
    result[6] = a1;
    uint64_t v8 = a1[10];
    uint64_t v7 = (uint64_t)(a1 + 10);
    uint64_t v6 = v8;
    if (v8)
    {
      result[1] = v6;
      uint64_t v9 = *(void *)(*(void *)v7 + 16);
      result[2] = v9;
      if (v9) {
        *(void *)(v9 + 8) = result;
      }
      uint64_t v7 = *(void *)v7 + 16;
    }
    else
    {
      result[1] = 0;
      result[2] = 0;
    }
    *(void *)uint64_t v7 = result;
    result += 7;
  }
  return result;
}

void AllocSetFree(void *a1, void *a2)
{
  unint64_t v2 = *(a2 - 2);
  if (v2 <= a1[25])
  {
    uint64_t v8 = (int)(29 - __clz(v2 - 1));
    if (v2 <= 8) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = &a1[v8];
    *(a2 - 1) = v9[11];
    v9[11] = a2 - 2;
  }
  else
  {
    if ((void *)*(a2 - 7) != a1
      || ((v3 = (char *)*(a2 - 4), v3 == (char *)a2 + v2) ? (BOOL v4 = v3 == (char *)*(a2 - 3)) : (BOOL v4 = 0), !v4))
    {
      AllocSetFree_cold_1(a2 - 2);
    }
    uint64_t v5 = *(a2 - 6);
    if (v5) {
      uint64_t v6 = (void *)(v5 + 16);
    }
    else {
      uint64_t v6 = a1 + 10;
    }
    *uint64_t v6 = *(a2 - 5);
    uint64_t v7 = *(a2 - 5);
    if (v7) {
      *(void *)(v7 + 8) = *(a2 - 6);
    }
    a1[1] += (char *)a2 - *(a2 - 3) - 56;
    free(a2 - 7);
  }
}

void *AllocSetRealloc(void *a1, void *ptr, unint64_t a3)
{
  unint64_t v3 = ptr;
  size_t v5 = *(ptr - 2);
  size_t v6 = a1[25];
  if (v5 <= v6)
  {
    if (v5 >= a3) {
      return v3;
    }
    uint64_t v17 = AllocSetAlloc(a1, a3);
    if (v17)
    {
      uint64_t v18 = v17;
      memcpy(v17, v3, v5);
      AllocSetFree(a1, v3);
      return v18;
    }
  }
  else
  {
    uint64_t v7 = (char *)(ptr - 7);
    if ((void *)*(ptr - 7) != a1
      || ((uint64_t v8 = (unsigned char *)*(ptr - 4), v8 == (char *)ptr + v5) ? (v9 = v8 == (unsigned char *)*(ptr - 3)) : (v9 = 0), !v9))
    {
      AllocSetRealloc_cold_1(ptr - 2);
    }
    if (v6 + 1 > a3) {
      unint64_t v10 = v6 + 1;
    }
    else {
      unint64_t v10 = a3;
    }
    unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = v11 + 56;
    uint64_t v13 = malloc_type_realloc(v7, v11 + 56, 0x81A86C38uLL);
    if (v13)
    {
      a1[1] += &v7[v12] - v8;
      v13[3] = (char *)v13 + v12;
      v13[4] = (char *)v13 + v12;
      unint64_t v3 = v13 + 7;
      uint64_t v14 = v13[1];
      if (v14) {
        uint64_t v15 = (void *)(v14 + 16);
      }
      else {
        uint64_t v15 = a1 + 10;
      }
      *uint64_t v15 = v13;
      uint64_t v16 = v13[2];
      if (v16) {
        *(void *)(v16 + 8) = v13;
      }
      v13[5] = v11;
      return v3;
    }
  }
  return 0;
}

void AllocSetDelete(void *a1)
{
  if ((a1[27] & 0x80000000) == 0)
  {
    uint64_t v2 = context_freelists();
    uint64_t v4 = v2 + 16 * v3;
    size_t v5 = (int *)v4;
    if (*((unsigned char *)a1 + 4))
    {
      uint64_t v8 = *(void **)(v4 + 8);
      uint64_t v7 = (void *)(v4 + 8);
      size_t v6 = v8;
      if (*v5 < 100) {
        goto LABEL_15;
      }
    }
    else
    {
      MemoryContextResetOnly((uint64_t)a1);
      unint64_t v11 = *(void **)(v4 + 8);
      uint64_t v7 = (void *)(v4 + 8);
      size_t v6 = v11;
      if (*v5 < 100)
      {
LABEL_15:
        a1[6] = v6;
        *uint64_t v7 = a1;
        ++*v5;
        return;
      }
    }
    if (v6)
    {
      do
      {
        *uint64_t v7 = v6[6];
        --*v5;
        free(v6);
        size_t v6 = (void *)*v7;
      }
      while (*v7);
    }
    goto LABEL_15;
  }
  BOOL v9 = (void *)a1[10];
  if (v9)
  {
    do
    {
      unint64_t v10 = (void *)v9[2];
      if (v9 != (void *)a1[26])
      {
        a1[1] += (char *)v9 - v9[4];
        free(v9);
      }
      BOOL v9 = v10;
    }
    while (v10);
  }

  free(a1);
}

uint64_t AllocSetGetChunkSpace(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 - 16) + 16;
}

uint64_t AllocSetIsEmpty(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

void AllocSetContextCreateInternal_cold_1(size_t a1)
{
  uint64_t v2 = *(void *)TopMemoryContext();
  if (v2) {
    MemoryContextStats(v2);
  }
  errstart(20, 0);
  errcode();
  errmsg("out of memory", v3, v4, v5, v6, v7, v8, v9, v17);
  errdetail("Failed while creating memory context \"%s\".", v10, v11, v12, v13, v14, v15, v16, a1);
  errfinish("src/postgres/src_backend_utils_mmgr_aset.c", 497, (uint64_t)"AllocSetContextCreateInternal");
  __break(1u);
}

void AllocSetFree_cold_1(const void *a1)
{
}

void AllocSetRealloc_cold_1(const void *a1)
{
}

uint64_t MemoryContextAllowInCriticalSection(uint64_t result, char a2)
{
  *(unsigned char *)(result + 5) = a2;
  return result;
}

uint64_t MemoryContextReset(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 32)) {
    uint64_t result = MemoryContextDeleteChildren(result);
  }
  if (!*(unsigned char *)(v1 + 4))
  {
    while (1)
    {
      uint64_t v2 = *(void *)(v1 + 72);
      if (!v2) {
        break;
      }
      *(void *)(v1 + 72) = *(void *)(v2 + 16);
      (*(void (**)(void))v2)(*(void *)(v2 + 8));
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 16) + 24))(v1);
    *(unsigned char *)(v1 + 4) = 1;
  }
  return result;
}

uint64_t MemoryContextDeleteChildren(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 32);
  if (v1)
  {
    uint64_t v2 = result;
    do
    {
      if (v1[4]) {
        MemoryContextDeleteChildren(v1);
      }
      while (1)
      {
        uint64_t v3 = v1[9];
        if (!v3) {
          break;
        }
        v1[9] = *(void *)(v3 + 16);
        (*(void (**)(void))v3)(*(void *)(v3 + 8));
      }
      uint64_t v4 = v1[3];
      if (v4)
      {
        uint64_t v6 = v1[5];
        uint64_t v5 = v1 + 5;
        uint64_t v7 = (void *)(v4 + 32);
        if (v6) {
          uint64_t v7 = (void *)(v6 + 48);
        }
        *uint64_t v7 = v1[6];
        uint64_t v8 = v1[6];
        if (v8) {
          *(void *)(v8 + 4errstart(20, 0) = *v5;
        }
        v1[3] = 0;
        *uint64_t v5 = 0;
        v1[6] = 0;
      }
      v1[8] = 0;
      uint64_t result = (*(uint64_t (**)(void *))(v1[2] + 32))(v1);
      uint64_t v1 = *(void **)(v2 + 32);
    }
    while (v1);
  }
  return result;
}

uint64_t MemoryContextResetOnly(uint64_t result)
{
  if (!*(unsigned char *)(result + 4))
  {
    uint64_t v1 = result;
    for (uint64_t i = *(void *)(result + 72); i; uint64_t i = *(void *)(v1 + 72))
    {
      *(void *)(v1 + 72) = *(void *)(i + 16);
      (*(void (**)(void))i)(*(void *)(i + 8));
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 16) + 24))(v1);
    *(unsigned char *)(v1 + 4) = 1;
  }
  return result;
}

uint64_t MemoryContextDelete(void *a1)
{
  if (a1[4]) {
    MemoryContextDeleteChildren((uint64_t)a1);
  }
  while (1)
  {
    uint64_t v2 = a1[9];
    if (!v2) {
      break;
    }
    a1[9] = *(void *)(v2 + 16);
    (*(void (**)(void))v2)(*(void *)(v2 + 8));
  }
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v5 = a1[5];
    uint64_t v4 = a1 + 5;
    uint64_t v6 = (void *)(v3 + 32);
    if (v5) {
      uint64_t v6 = (void *)(v5 + 48);
    }
    *uint64_t v6 = a1[6];
    uint64_t v7 = a1[6];
    if (v7) {
      *(void *)(v7 + 4errstart(20, 0) = *v4;
    }
    a1[3] = 0;
    *uint64_t v4 = 0;
    a1[6] = 0;
  }
  a1[8] = 0;
  uint64_t v8 = *(uint64_t (**)(void *))(a1[2] + 32);

  return v8(a1);
}

void *MemoryContextSetParent(void *result, uint64_t a2)
{
  uint64_t v2 = result[3];
  if (v2 != a2)
  {
    if (v2)
    {
      uint64_t v3 = result[5];
      uint64_t v4 = (void *)(v2 + 32);
      if (v3) {
        uint64_t v4 = (void *)(v3 + 48);
      }
      *uint64_t v4 = result[6];
      uint64_t v5 = result[6];
      if (v5) {
        *(void *)(v5 + 4errstart(20, 0) = result[5];
      }
    }
    if (a2)
    {
      result[3] = a2;
      result[5] = 0;
      result[6] = *(void *)(a2 + 32);
      uint64_t v6 = *(void *)(a2 + 32);
      if (v6) {
        *(void *)(v6 + 4errstart(20, 0) = result;
      }
      *(void *)(a2 + 32) = result;
    }
    else
    {
      result[3] = 0;
      result[5] = 0;
      result[6] = 0;
    }
  }
  return result;
}

uint64_t MemoryContextStatsDetail(uint64_t a1, uint64_t a2)
{
  int64x2_t v9 = 0u;
  long long v10 = 0u;
  MemoryContextStatsInternal(a1, 0, 1, a2, &v9);
  return pg_fprintf((FILE *)*MEMORY[0x1E4F143C8], "Grand total: %zu bytes in %zd blocks; %zu free (%zd chunks); %zu used\n",
           v2,
           v3,
           v4,
           v5,
           v6,
           v7,
           v10);
}

uint64_t MemoryContextAlloc(uint64_t a1, size_t a2)
{
  if (a2 >> 30) {
    MemoryContextAlloc_cold_2(a2);
  }
  *(unsigned char *)(a1 + 4) = 0;
  uint64_t result = (**(uint64_t (***)(void))(a1 + 16))();
  if (!result) {
    MemoryContextAlloc_cold_1(a1, a2);
  }
  return result;
}

unint64_t MemoryContextAllocExtended(uint64_t a1, size_t a2, char a3)
{
  if ((a2 & 0x8000000000000000) != 0 && (a3 & 1) != 0 || a2 >> 30 && (a3 & 1) == 0) {
    MemoryContextAllocExtended_cold_2(a2);
  }
  *(unsigned char *)(a1 + 4) = 0;
  unint64_t v6 = (**(uint64_t (***)(uint64_t, size_t))(a1 + 16))(a1, a2);
  unint64_t v7 = v6;
  if (v6)
  {
    if ((a3 & 4) != 0)
    {
      if (a2 > 0x400 || (a2 & 7) != 0)
      {
        size_t v9 = a2;
LABEL_14:
        bzero((void *)v6, v9);
        return v7;
      }
      unint64_t v8 = v6 + a2;
      if (v6 < v6 + a2)
      {
        if (v8 <= v6 + 8) {
          unint64_t v8 = v6 + 8;
        }
        size_t v9 = ((v8 + ~v6) & 0xFFFFFFFFFFFFFFF8) + 8;
        goto LABEL_14;
      }
    }
  }
  else if ((a3 & 2) == 0)
  {
    MemoryContextAllocExtended_cold_1(a1, a2);
  }
  return v7;
}

unint64_t palloc0(size_t a1, double a2)
{
  uint64_t v3 = (uint64_t *)CurrentMemoryContext(a2);
  if (a1 >> 30) {
    palloc0_cold_2(a1);
  }
  uint64_t v4 = *v3;
  *(unsigned char *)(v4 + 4) = 0;
  unint64_t v5 = (**(uint64_t (***)(uint64_t, size_t))(v4 + 16))(v4, a1);
  if (!v5) {
    palloc0_cold_1(v4, a1);
  }
  unint64_t v6 = v5;
  if (a1 > 0x400 || (a1 & 7) != 0)
  {
    size_t v8 = a1;
LABEL_10:
    bzero((void *)v5, v8);
    return v6;
  }
  unint64_t v7 = v5 + a1;
  if (v5 < v5 + a1)
  {
    if (v7 <= v5 + 8) {
      unint64_t v7 = v5 + 8;
    }
    size_t v8 = ((v7 + ~v5) & 0xFFFFFFFFFFFFFFF8) + 8;
    goto LABEL_10;
  }
  return v6;
}

uint64_t pfree(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 - 8) + 16) + 8))();
}

void MemoryContextAlloc_cold_2(uint64_t a1)
{
}

void MemoryContextAllocExtended_cold_1(uint64_t a1, size_t a2)
{
  uint64_t v3 = (uint64_t *)TopMemoryContext();
  MemoryContextStats(*v3);
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("out of memory", v4, v5, v6, v7, v8, v9, v10, v18);
  errdetail("Failed on request of size %zu in memory context \"%s\".", v11, v12, v13, v14, v15, v16, v17, a2);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 868, (uint64_t)"MemoryContextAllocExtended");
  __break(1u);
}

void MemoryContextAllocExtended_cold_2(uint64_t a1)
{
}

void palloc_cold_1(uint64_t a1, size_t a2)
{
  uint64_t v3 = (uint64_t *)TopMemoryContext();
  uint64_t v4 = MemoryContextStats(*v3);
  OUTLINED_FUNCTION_1_16(v4);
  errcode();
  errmsg("out of memory", v5, v6, v7, v8, v9, v10, v11, v19);
  errdetail("Failed on request of size %zu in memory context \"%s\".", v12, v13, v14, v15, v16, v17, v18, a2);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 904, "palloc");
  __break(1u);
}

void palloc_cold_2(uint64_t a1)
{
}

void palloc0_cold_1(uint64_t a1, size_t a2)
{
  uint64_t v3 = (uint64_t *)TopMemoryContext();
  MemoryContextStats(*v3);
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("out of memory", v4, v5, v6, v7, v8, v9, v10, v18);
  errdetail("Failed on request of size %zu in memory context \"%s\".", v11, v12, v13, v14, v15, v16, v17, a2);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 935, (uint64_t)"palloc0");
  __break(1u);
}

void palloc0_cold_2(uint64_t a1)
{
}

void repalloc_cold_1(uint64_t a1, size_t a2)
{
  uint64_t v3 = (uint64_t *)TopMemoryContext();
  uint64_t v4 = MemoryContextStats(*v3);
  OUTLINED_FUNCTION_1_16(v4);
  errcode();
  errmsg("out of memory");
  errdetail("Failed on request of size %zu in memory context \"%s\".", v5, v6, v7, v8, v9, v10, v11, a2);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 986, "repalloc");
  __break(1u);
}

void repalloc_cold_2(uint64_t a1)
{
}

uint64_t ScanKeywords_hash_func(unsigned __int8 *a1, uint64_t a2)
{
  if (!a2) {
    return (ScanKeywords_hash_func_h[3] + ScanKeywords_hash_func_h[0]);
  }
  unsigned int v2 = 0;
  unsigned int v3 = 3;
  do
  {
    int v4 = *a1++;
    unsigned int v2 = (v4 | 0x20) - v2 + 32 * v2;
    unsigned int v3 = (v4 | 0x20) - v3 + (v3 << 7);
    --a2;
  }
  while (a2);
  return (ScanKeywords_hash_func_h[v3 % 0x385] + ScanKeywords_hash_func_h[v2 % 0x385]);
}

uint64_t ScanKeywordLookup(const char *a1, uint64_t a2)
{
  unsigned int v3 = (char *)a1;
  size_t v4 = strlen(a1);
  if (v4 > *(int *)(a2 + 28)) {
    return 0xFFFFFFFFLL;
  }
  LODWORD(result) = (*(uint64_t (**)(char *, size_t))(a2 + 16))(v3, v4);
  if ((result & 0x80000000) != 0 || (int)result >= *(_DWORD *)(a2 + 24)) {
    return 0xFFFFFFFFLL;
  }
  for (uint64_t i = (unsigned char *)(*(void *)a2 + *(unsigned __int16 *)(*(void *)(a2 + 8) + 2 * result)); ; ++i)
  {
    int v7 = *v3;
    if (!*v3) {
      break;
    }
    ++v3;
    if ((v7 - 65) < 0x1A) {
      LOBYTE(v7) = v7 + 32;
    }
    int v8 = *i;
    if (v8 != v7) {
      return 0xFFFFFFFFLL;
    }
  }
  if (*i) {
    return 0xFFFFFFFFLL;
  }
  else {
    return result;
  }
}

char *psprintf(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  int v10 = *__error();
  uint64_t v11 = (char *)palloc(0x80uLL);
  *__error() = v10;
  unint64_t v12 = pvsnprintf(v11, 0x80uLL, a1, &a9);
  if (v12 >= 0x80)
  {
    size_t v13 = v12;
    do
    {
      pfree((uint64_t)v11);
      uint64_t v11 = (char *)palloc(v13);
      *__error() = v10;
      unint64_t v14 = pvsnprintf(v11, v13, a1, &a9);
      BOOL v15 = v14 >= v13;
      size_t v13 = v14;
    }
    while (v15);
  }
  return v11;
}

uint64_t pvsnprintf(char *a1, unint64_t a2, char *a3, size_t *a4)
{
  unsigned int v6 = pg_vsnprintf(a1, a2, a3, a4);
  if ((v6 & 0x80000000) != 0) {
    pvsnprintf_cold_1(a3);
  }
  uint64_t v7 = v6;
  if (v6 >= a2)
  {
    if (v6 >= 0x3FFFFFFF) {
      pvsnprintf_cold_2();
    }
    return v6 + 1;
  }
  return v7;
}

void pvsnprintf_cold_1(const char *a1)
{
}

uint64_t strtoint(const char *a1, char **a2, int a3)
{
  uint64_t v3 = strtol(a1, a2, a3);
  if (v3 != (int)v3) {
    *__error() = 34;
  }
  return v3;
}

unsigned char *initStringInfo(uint64_t a1)
{
  uint64_t result = (unsigned char *)palloc(0x400uLL);
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 12) = 1024;
  unsigned char *result = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t resetStringInfo(uint64_t result)
{
  **(unsigned char **)uint64_t result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

unint64_t appendStringInfo(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  int v11 = *__error();
  while (1)
  {
    *__error() = v11;
    uint64_t v13 = *(int *)(a1 + 8);
    unint64_t v14 = (*(_DWORD *)(a1 + 12) - v13);
    if ((int)v14 <= 15)
    {
      unsigned int v12 = 32;
      goto LABEL_3;
    }
    unint64_t result = pvsnprintf((char *)(*(void *)a1 + v13), (*(_DWORD *)(a1 + 12) - v13), a2, &a9);
    unsigned int v12 = result;
    uint64_t v16 = *(int *)(a1 + 8);
    if (result < v14) {
      break;
    }
    *(unsigned char *)(*(void *)a1 + v16) = 0;
    if (!result) {
      return result;
    }
LABEL_3:
    enlargeStringInfo(a1, v12);
  }
  *(_DWORD *)(a1 + 8) = v16 + result;
  return result;
}

unint64_t appendStringInfoVA(uint64_t a1, char *a2, size_t *a3)
{
  uint64_t v3 = *(int *)(a1 + 8);
  unint64_t v4 = (*(_DWORD *)(a1 + 12) - v3);
  if ((int)v4 < 16) {
    return 32;
  }
  unint64_t result = pvsnprintf((char *)(*(void *)a1 + v3), v4, a2, a3);
  uint64_t v7 = *(int *)(a1 + 8);
  if (result >= v4)
  {
    *(unsigned char *)(*(void *)a1 + v7) = 0;
  }
  else
  {
    int v8 = v7 + result;
    unint64_t result = 0;
    *(_DWORD *)(a1 + 8) = v8;
  }
  return result;
}

uint64_t enlargeStringInfo(uint64_t result, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    enlargeStringInfo_cold_1(a2);
  }
  uint64_t v2 = result;
  uint64_t v3 = *(int *)(result + 8);
  if (0x3FFFFFFF - v3 <= (unint64_t)a2) {
    enlargeStringInfo_cold_2((unsigned int *)(result + 8));
  }
  int v4 = a2 + v3 + 1;
  int v5 = *(_DWORD *)(result + 12);
  if (v4 > v5)
  {
    do
      v5 *= 2;
    while (v4 > v5);
    if (v5 >= 0x3FFFFFFF) {
      int v6 = 0x3FFFFFFF;
    }
    else {
      int v6 = v5;
    }
    unint64_t result = repalloc(*(void *)result, v6);
    *(void *)uint64_t v2 = result;
    *(_DWORD *)(v2 + 12) = v6;
  }
  return result;
}

void *appendStringInfoString(uint64_t a1, char *__s)
{
  signed int v4 = strlen(__s);
  enlargeStringInfo(a1, v4);
  unint64_t result = memcpy((void *)(*(void *)a1 + *(int *)(a1 + 8)), __s, v4);
  int v6 = *(_DWORD *)(a1 + 8) + v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(unsigned char *)(*(void *)a1 + v6) = 0;
  return result;
}

void *appendBinaryStringInfo(uint64_t a1, const void *a2, signed int a3)
{
  enlargeStringInfo(a1, a3);
  unint64_t result = memcpy((void *)(*(void *)a1 + *(int *)(a1 + 8)), a2, a3);
  int v7 = *(_DWORD *)(a1 + 8) + a3;
  *(_DWORD *)(a1 + 8) = v7;
  *(unsigned char *)(*(void *)a1 + v7) = 0;
  return result;
}

uint64_t appendStringInfoChar(uint64_t result, char a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 8);
  if (v4 + 1 >= *(_DWORD *)(result + 12))
  {
    unint64_t result = enlargeStringInfo(result, 1u);
    int v4 = *(_DWORD *)(v3 + 8);
  }
  *(unsigned char *)(*(void *)v3 + v4) = a2;
  int v5 = *(_DWORD *)(v3 + 8) + 1;
  *(_DWORD *)(v3 + 8) = v5;
  *(unsigned char *)(*(void *)v3 + v5) = 0;
  return result;
}

uint64_t appendStringInfoSpaces(uint64_t result, signed int a2)
{
  if (a2 >= 1)
  {
    uint64_t v3 = result;
    unint64_t result = enlargeStringInfo(result, a2);
    unsigned int v4 = a2 + 1;
    do
    {
      uint64_t v5 = *(void *)v3;
      uint64_t v6 = *(int *)(v3 + 8);
      *(_DWORD *)(v3 + 8) = v6 + 1;
      *(unsigned char *)(v5 + v6) = 32;
      --v4;
    }
    while (v4 > 1);
    *(unsigned char *)(*(void *)v3 + *(int *)(v3 + 8)) = 0;
  }
  return result;
}

void enlargeStringInfo_cold_1(int a1)
{
}

void enlargeStringInfo_cold_2(unsigned int *a1)
{
  errstart(20, 0);
  errcode();
  errmsg("out of memory");
  errdetail("Cannot enlarge string buffer containing %d bytes by %d more bytes.", v2, v3, v4, v5, v6, v7, v8, *a1);
  errfinish("src/postgres/src_common_stringinfo.c", 300, "enlargeStringInfo");
  __break(1u);
}

unsigned char *unicode_to_utf8(unsigned int a1, unsigned char *a2)
{
  if (a1 > 0x7F)
  {
    if (a1 > 0x7FF)
    {
      if (HIWORD(a1))
      {
        *a2 = (a1 >> 18) & 7 | 0xF0;
        a2[1] = (a1 >> 12) & 0x3F | 0x80;
        a2[2] = (a1 >> 6) & 0x3F | 0x80;
        a2[3] = a1 & 0x3F | 0x80;
      }
      else
      {
        *a2 = (a1 >> 12) | 0xE0;
        a2[1] = (a1 >> 6) & 0x3F | 0x80;
        a2[2] = a1 & 0x3F | 0x80;
      }
      return a2;
    }
    else
    {
      *a2 = (a1 >> 6) | 0xC0;
      a2[1] = a1 & 0x3F | 0x80;
      return a2;
    }
  }
  else
  {
    *a2 = a1;
    return a2;
  }
}

uint64_t pg_utf_mblen(char *a1)
{
  int v1 = *a1;
  if ((v1 & 0x80000000) == 0) {
    return 1;
  }
  if ((v1 & 0xE0) == 0xC0) {
    return 2;
  }
  int v3 = v1 & 0xF0;
  if ((v1 & 0xF8) == 0xF0) {
    unsigned int v4 = 4;
  }
  else {
    unsigned int v4 = 1;
  }
  if (v3 == 224) {
    return 3;
  }
  else {
    return v4;
  }
}

uint64_t utf8_to_unicode(unsigned __int8 *a1)
{
  char v1 = *a1;
  if (((char)*a1 & 0x80000000) == 0) {
    return *a1;
  }
  if ((v1 & 0xE0) == 0xC0) {
    return ((v1 & 0x1F) << 6) | a1[1] & 0x3Fu;
  }
  if ((v1 & 0xF0) == 0xE0) {
    return ((v1 & 0xF) << 12) | ((a1[1] & 0x3F) << 6) | a1[2] & 0x3Fu;
  }
  if ((v1 & 0xF8) == 0xF0) {
    return ((v1 & 7) << 18) | ((a1[1] & 0x3F) << 12) | ((a1[2] & 0x3F) << 6) | a1[3] & 0x3Fu;
  }
  return 0xFFFFFFFFLL;
}

uint64_t pg_mule_mblen(unsigned char *a1)
{
  int v1 = *a1 & 0xFE;
  if (v1 == 156) {
    int v2 = 4;
  }
  else {
    int v2 = 1;
  }
  if (v1 != 154 && (*a1 + 112) >= 0xAu) {
    unsigned int v4 = v2;
  }
  else {
    unsigned int v4 = 3;
  }
  if ((*a1 + 127) >= 0xDu) {
    return v4;
  }
  else {
    return 2;
  }
}

BOOL pg_utf8_islegal(unsigned __int8 *a1, int a2)
{
  switch(a2)
  {
    case 1:
      unsigned int v2 = *a1;
LABEL_3:
      if ((char)v2 < -62) {
        return 0;
      }
      return v2 < 0xF5;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      if ((char)a1[3] > -65) {
        return 0;
      }
LABEL_6:
      if ((char)a1[2] > -65) {
        return 0;
      }
LABEL_7:
      int v4 = (char)a1[1];
      unsigned int v2 = *a1;
      switch(*a1)
      {
        case 0xE0u:
          if ((v4 + 64) < 0xE0u) {
            return 0;
          }
          BOOL result = 1;
          break;
        case 0xEDu:
          if (v4 > -97) {
            return 0;
          }
          BOOL result = 1;
          break;
        case 0xF0u:
          if ((v4 + 64) < 0xD0u) {
            return 0;
          }
          BOOL result = 1;
          break;
        case 0xF4u:
          if (v4 > -113) {
            return 0;
          }
          BOOL result = 1;
          break;
        default:
          if (v4 > -65) {
            return 0;
          }
          goto LABEL_3;
      }
      return result;
    default:
      return 0;
  }
}

uint64_t pg_ascii2wchar_with_len(uint64_t a1, _DWORD *a2, int a3)
{
  if (a3 < 1)
  {
    uint64_t result = 0;
    *a2 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t result = a3;
    while (*(unsigned char *)(a1 + v4))
    {
      *a2++ = *(unsigned __int8 *)(a1 + v4);
      if (a3 == ++v4)
      {
        *a2 = 0;
        return result;
      }
    }
    uint64_t result = v4;
    *a2 = 0;
  }
  return result;
}

uint64_t pg_wchar2single_with_len(uint64_t a1, unsigned char *a2, int a3)
{
  if (a3 < 1)
  {
    uint64_t result = 0;
    *a2 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t result = a3;
    while (1)
    {
      int v6 = *(_DWORD *)(a1 + 4 * v4);
      if (!v6) {
        break;
      }
      a2[v4++] = v6;
      if (a3 == v4)
      {
        a2[v4] = 0;
        return result;
      }
    }
    uint64_t result = v4;
    a2[v4] = 0;
  }
  return result;
}

uint64_t pg_ascii_mblen()
{
  return 1;
}

uint64_t pg_ascii_dsplen(unsigned char *a1)
{
  unsigned int v1 = *a1;
  if (v1 != 127 && v1 >= 0x20) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = -1;
  }
  if (*a1) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t pg_ascii_verifier()
{
  return 1;
}

uint64_t pg_eucjp2wchar_with_len(unsigned __int8 *a1, int *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t result = 0;
    while (1)
    {
      int v5 = *a1;
      if (!*a1)
      {
LABEL_16:
        *a2 = 0;
        return result;
      }
      if (a3 >= 2 && v5 == 142)
      {
        int v6 = a1 + 2;
        int v7 = a1[1];
        int v8 = -2;
        int v9 = 36352;
      }
      else if (a3 >= 3 && v5 == 143)
      {
        int v7 = (a1[1] << 8) | 0x8F0000;
        *a2 = v7;
        int v6 = a1 + 3;
        int v9 = a1[2];
        int v8 = -3;
      }
      else
      {
        int v6 = a1 + 1;
        int v8 = -1;
        if (a3 < 2 || ((char)v5 & 0x80000000) == 0) {
          goto LABEL_14;
        }
        int v7 = v5 << 8;
        *a2 = v7;
        int v6 = a1 + 2;
        int v9 = a1[1];
        int v8 = -2;
      }
      int v5 = v7 | v9;
LABEL_14:
      *a2++ = v5;
      uint64_t result = (result + 1);
      a1 = v6;
      BOOL v10 = __OFADD__(v8, a3);
      a3 += v8;
      if ((a3 < 0) ^ v10 | (a3 == 0)) {
        goto LABEL_16;
      }
    }
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_wchar2euc_with_len(unsigned int *a1, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t result = 0;
    int v5 = a3 + 1;
    while (1)
    {
      unsigned int v6 = *a1;
      if (!*a1)
      {
LABEL_14:
        *a2 = 0;
        return result;
      }
      if (HIBYTE(v6))
      {
        *a2 = HIBYTE(v6);
        a2[1] = *((_WORD *)a1 + 1);
        int v7 = a2 + 3;
        a2[2] = BYTE1(*a1);
        uint64_t v8 = 4;
        int v9 = 4;
      }
      else if (BYTE2(v6))
      {
        *a2 = BYTE2(v6);
        int v7 = a2 + 2;
        a2[1] = BYTE1(*a1);
        uint64_t v8 = 3;
        int v9 = 3;
      }
      else
      {
        if (!BYTE1(v6))
        {
          uint64_t v8 = 1;
          int v7 = a2;
          int v9 = 1;
          goto LABEL_11;
        }
        *a2 = BYTE1(v6);
        int v7 = a2 + 1;
        uint64_t v8 = 2;
        int v9 = 2;
      }
      unsigned int v6 = *a1;
LABEL_11:
      a2 += v8;
      *int v7 = v6;
      uint64_t result = (result + v9);
      ++a1;
      if (--v5 <= 1) {
        goto LABEL_14;
      }
    }
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_eucjp_mblen(unsigned __int8 *a1)
{
  int v1 = *a1;
  if ((v1 & 0x80u) == 0) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (v1 == 143) {
    unsigned int v2 = 3;
  }
  if (v1 == 142) {
    return 2;
  }
  else {
    return v2;
  }
}

uint64_t pg_eucjp_dsplen(unsigned char *a1)
{
  unsigned int v1 = *a1;
  if (v1 == 142) {
    return 1;
  }
  if (v1 == 143) {
    return 2;
  }
  if (v1 != 127 && v1 >= 0x20) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = -1;
  }
  if (!*a1) {
    unsigned int v4 = 0;
  }
  if ((v1 & 0x80) != 0) {
    return 2;
  }
  else {
    return v4;
  }
}

uint64_t pg_eucjp_verifier(unsigned __int8 *a1, int a2)
{
  int v3 = *a1;
  if (v3 == 143)
  {
    if (a2 >= 3 && (a1[1] + 95) <= 0x5Du && (a1[2] + 95) < 0x5Eu) {
      return 3;
    }
    return 0xFFFFFFFFLL;
  }
  if (v3 == 142)
  {
    if (a2 >= 2 && (a1[1] + 32) >= 0xC1u) {
      return 2;
    }
    return 0xFFFFFFFFLL;
  }
  if (((char)v3 & 0x80000000) == 0) {
    return 1;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 >= 2 && (v3 + 95) <= 0x5Du && (a1[1] + 95) <= 0x5Du) {
    return 2;
  }
  return result;
}

uint64_t pg_euccn2wchar_with_len(unsigned __int8 *a1, int *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t result = 0;
    while (1)
    {
      int v5 = *a1;
      if (!*a1)
      {
LABEL_18:
        *a2 = 0;
        return result;
      }
      if (a3 >= 3 && v5 == 142) {
        break;
      }
      if (a3 >= 3 && v5 == 143)
      {
        unsigned int v6 = a1 + 2;
        int v7 = (a1[1] << 8) | 0x8F0000;
        goto LABEL_10;
      }
      unsigned int v6 = a1 + 1;
      int v8 = -1;
      if (a3 < 2 || ((char)v5 & 0x80000000) == 0) {
        goto LABEL_12;
      }
      int v7 = v5 << 8;
      int v8 = -2;
      uint64_t v9 = 2;
LABEL_11:
      *a2 = v7;
      int v5 = v7 | *v6;
      unsigned int v6 = &a1[v9];
LABEL_12:
      *a2++ = v5;
      uint64_t result = (result + 1);
      a1 = v6;
      BOOL v10 = __OFADD__(a3, v8);
      a3 += v8;
      if ((a3 < 0) ^ v10 | (a3 == 0)) {
        goto LABEL_18;
      }
    }
    unsigned int v6 = a1 + 2;
    int v7 = (a1[1] << 8) | 0x8E0000;
LABEL_10:
    int v8 = -3;
    uint64_t v9 = 3;
    goto LABEL_11;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_euccn_mblen(char *a1)
{
  if (*a1 >= 0) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t pg_euccn_dsplen(unsigned char *a1)
{
  if ((char)*a1 < 0) {
    return 2;
  }
  unsigned int v1 = *a1;
  if (v1 != 127 && v1 >= 0x20) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = -1;
  }
  if (*a1) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t pg_euckr_verifier(char *a1, int a2)
{
  int v2 = *a1;
  if ((v2 & 0x80000000) == 0) {
    return 1;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 >= 2 && (v2 + 95) <= 0x5Du && (a1[1] + 95) <= 0x5Du) {
    return 2;
  }
  return result;
}

uint64_t pg_euckr2wchar_with_len(unsigned __int8 *a1, int *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t result = 0;
    while (1)
    {
      int v5 = *a1;
      if (!*a1)
      {
LABEL_16:
        *a2 = 0;
        return result;
      }
      if (a3 >= 2 && v5 == 142)
      {
        unsigned int v6 = a1 + 2;
        int v7 = a1[1];
        int v8 = -2;
        int v9 = 36352;
      }
      else if (a3 >= 3 && v5 == 143)
      {
        int v7 = (a1[1] << 8) | 0x8F0000;
        *a2 = v7;
        unsigned int v6 = a1 + 3;
        int v9 = a1[2];
        int v8 = -3;
      }
      else
      {
        unsigned int v6 = a1 + 1;
        int v8 = -1;
        if (a3 < 2 || ((char)v5 & 0x80000000) == 0) {
          goto LABEL_14;
        }
        int v7 = v5 << 8;
        *a2 = v7;
        unsigned int v6 = a1 + 2;
        int v9 = a1[1];
        int v8 = -2;
      }
      int v5 = v7 | v9;
LABEL_14:
      *a2++ = v5;
      uint64_t result = (result + 1);
      a1 = v6;
      BOOL v10 = __OFADD__(v8, a3);
      a3 += v8;
      if ((a3 < 0) ^ v10 | (a3 == 0)) {
        goto LABEL_16;
      }
    }
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_euckr_mblen(unsigned __int8 *a1)
{
  int v1 = *a1;
  if ((v1 & 0x80u) == 0) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (v1 == 143) {
    unsigned int v2 = 3;
  }
  if (v1 == 142) {
    return 2;
  }
  else {
    return v2;
  }
}

uint64_t pg_euckr_dsplen(unsigned char *a1)
{
  if ((char)*a1 < 0) {
    return 2;
  }
  unsigned int v1 = *a1;
  if (v1 != 127 && v1 >= 0x20) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = -1;
  }
  if (*a1) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t pg_euctw2wchar_with_len(unsigned __int8 *a1, int *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t result = 0;
    while (1)
    {
      int v5 = *a1;
      if (!*a1)
      {
LABEL_16:
        *a2 = 0;
        return result;
      }
      if (a3 >= 4 && v5 == 142)
      {
        unsigned int v6 = (a1[1] << 16) | 0x8E000000;
        *a2 = v6;
        int v7 = a1 + 3;
        int v8 = v6 | (a1[2] << 8);
        int v9 = -4;
        uint64_t v10 = 4;
      }
      else if (a3 >= 3 && v5 == 143)
      {
        int v7 = a1 + 2;
        int v8 = (a1[1] << 8) | 0x8F0000;
        int v9 = -3;
        uint64_t v10 = 3;
      }
      else
      {
        int v7 = a1 + 1;
        int v9 = -1;
        if (a3 < 2 || ((char)v5 & 0x80000000) == 0) {
          goto LABEL_14;
        }
        int v8 = v5 << 8;
        int v9 = -2;
        uint64_t v10 = 2;
      }
      *a2 = v8;
      int v5 = v8 | *v7;
      int v7 = &a1[v10];
LABEL_14:
      *a2++ = v5;
      uint64_t result = (result + 1);
      a1 = v7;
      BOOL v11 = __OFADD__(a3, v9);
      a3 += v9;
      if ((a3 < 0) ^ v11 | (a3 == 0)) {
        goto LABEL_16;
      }
    }
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_euctw_mblen(unsigned __int8 *a1)
{
  int v1 = *a1;
  if ((v1 & 0x80u) == 0) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (v1 == 143) {
    unsigned int v2 = 3;
  }
  if (v1 == 142) {
    return 4;
  }
  else {
    return v2;
  }
}

uint64_t pg_euctw_dsplen(unsigned char *a1)
{
  if ((char)*a1 < 0) {
    return 2;
  }
  unsigned int v1 = *a1;
  if (v1 != 127 && v1 >= 0x20) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = -1;
  }
  if (*a1) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t pg_euctw_verifier(unsigned __int8 *a1, int a2)
{
  int v2 = *a1;
  if (v2 != 143)
  {
    if (v2 == 142)
    {
      if (a2 >= 4
        && (a1[1] + 88) >= 0xF9u
        && (a1[2] + 95) <= 0x5Du
        && (a1[3] + 95) < 0x5Eu)
      {
        return 4;
      }
    }
    else
    {
      if (((char)v2 & 0x80000000) == 0) {
        return 1;
      }
      if (a2 >= 2 && (a1[1] + 95) <= 0x5Du) {
        return 2;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t pg_utf2wchar_with_len(unsigned __int8 *a1, int *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t result = 0;
    while (1)
    {
      int v7 = *a1;
      if (!*a1)
      {
LABEL_16:
        *a2 = 0;
        return result;
      }
      if ((v7 & 0x80) == 0) {
        break;
      }
      if ((v7 & 0xE0) == 0xC0)
      {
        if (a3 < 2) {
          goto LABEL_16;
        }
        unsigned __int8 v8 = a1[1];
        a1 += 2;
        int v9 = v8 & 0x3F | ((v7 & 0x1F) << 6);
        int v5 = -2;
        int v7 = v9;
      }
      else if ((v7 & 0xF0) == 0xE0)
      {
        if (a3 < 3) {
          goto LABEL_16;
        }
        unsigned __int8 v10 = a1[1];
        unsigned __int8 v11 = a1[2];
        a1 += 3;
        int v7 = ((v7 & 0xF) << 12) | ((v10 & 0x3F) << 6) | v11 & 0x3F;
        int v5 = -3;
      }
      else
      {
        if ((v7 & 0xF8) != 0xF0) {
          break;
        }
        if (a3 < 4) {
          goto LABEL_16;
        }
        unsigned __int8 v12 = a1[1];
        unsigned __int8 v13 = a1[2];
        unsigned __int8 v14 = a1[3];
        a1 += 4;
        int v7 = ((v7 & 7) << 18) | ((v12 & 0x3F) << 12) | ((v13 & 0x3F) << 6) | v14 & 0x3F;
        int v5 = -4;
      }
LABEL_4:
      *a2++ = v7;
      uint64_t result = (result + 1);
      BOOL v6 = __OFADD__(a3, v5);
      a3 += v5;
      if ((a3 < 0) ^ v6 | (a3 == 0)) {
        goto LABEL_16;
      }
    }
    ++a1;
    int v5 = -1;
    goto LABEL_4;
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_wchar2utf_with_len(unsigned int *a1, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t result = 0;
    int v5 = a3 + 1;
    while (1)
    {
      unsigned int v7 = *a1;
      if (!*a1)
      {
LABEL_18:
        *a2 = 0;
        return result;
      }
      if (v7 <= 0x7F)
      {
        *a2 = v7;
        unsigned int v6 = 1;
      }
      else
      {
        if (v7 > 0x7FF)
        {
          if (HIWORD(v7))
          {
            int v8 = (v7 >> 18) & 7 | 0xF0;
            *a2 = (v7 >> 18) & 7 | 0xF0;
            a2[1] = (v7 >> 12) & 0x3F | 0x80;
            a2[2] = (v7 >> 6) & 0x3F | 0x80;
            a2[3] = v7 & 0x3F | 0x80;
          }
          else
          {
            LOBYTE(v8) = (v7 >> 12) | 0xE0;
            *a2 = v8;
            a2[1] = (v7 >> 6) & 0x3F | 0x80;
            a2[2] = v7 & 0x3F | 0x80;
          }
LABEL_12:
          if ((v8 & 0xF0) == 0xE0)
          {
            unsigned int v6 = 3;
          }
          else if ((v8 & 0xF8) == 0xF0)
          {
            unsigned int v6 = 4;
          }
          else
          {
            unsigned int v6 = 1;
          }
          goto LABEL_4;
        }
        LOBYTE(v8) = (v7 >> 6) | 0xC0;
        *a2 = v8;
        a2[1] = v7 & 0x3F | 0x80;
        if (((v7 >> 6) & 0x20 | 0xC0) != 0xC0) {
          goto LABEL_12;
        }
        unsigned int v6 = 2;
      }
LABEL_4:
      uint64_t result = v6 + result;
      a2 += v6;
      ++a1;
      if (--v5 <= 1) {
        goto LABEL_18;
      }
    }
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_utf_dsplen(char *a1)
{
  unsigned int v1 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    if (*a1) {
      goto LABEL_3;
    }
    return 0;
  }
  if ((v1 & 0xE0) == 0xC0)
  {
    unsigned int v1 = ((v1 & 0x1F) << 6) | a1[1] & 0x3F;
    if (!v1) {
      return 0;
    }
  }
  else
  {
    if ((v1 & 0xF0) != 0xE0)
    {
      if ((v1 & 0xF8) != 0xF0) {
        return 0xFFFFFFFFLL;
      }
      unsigned int v1 = ((v1 & 7) << 18) | ((a1[1] & 0x3F) << 12) | ((a1[2] & 0x3F) << 6) | a1[3] & 0x3F;
      if (v1) {
        goto LABEL_3;
      }
      return 0;
    }
    unsigned int v1 = ((v1 & 0xF) << 12) | ((a1[1] & 0x3F) << 6) | a1[2] & 0x3F;
    if (!v1) {
      return 0;
    }
  }
LABEL_3:
  uint64_t result = 0xFFFFFFFFLL;
  if (v1 < 0x20 || HIWORD(v1) > 0x10u || v1 - 127 < 0x21) {
    return result;
  }
  if (v1 - 65072 >= 0xFFFF04D0)
  {
    int v3 = 0;
    int v4 = 191;
    do
    {
      while (1)
      {
        uint64_t v5 = (uint64_t)(v4 + v3 + (v4 + v3 < 0)) >> 1;
        if (v1 <= ucs_wcwidth_combining[2 * ((v4 + v3) / 2) + 1]) {
          break;
        }
        int v3 = (v4 + v3) / 2 + 1;
        if (v4 < (int)v5 + 1) {
          goto LABEL_16;
        }
      }
      if (ucs_wcwidth_combining[2 * v5] <= (unsigned __int16)v1) {
        return 0;
      }
      int v4 = (v4 + v3) / 2 - 1;
    }
    while ((int)v5 - 1 >= v3);
  }
LABEL_16:
  if (v1 >> 8 < 0x11) {
    return 1;
  }
  if (v1 >> 5 < 0x8B) {
    return 2;
  }
  if ((v1 - 11904) >> 4 <= 0x764)
  {
    if (v1 != 12351 && (v1 & 0x1FFFEE) != 0x300A) {
      return 2;
    }
    goto LABEL_31;
  }
  if ((v1 - 44032) >> 2 < 0xAE9) {
    return 2;
  }
LABEL_31:
  uint64_t result = 2;
  if (v1 - 65504 >= 7 && v1 - 65280 >= 0x60 && v1 - 63744 >= 0x200 && v1 - 65072 >= 0x40)
  {
    if ((v1 & 0x1F0000) == 0x20000) {
      return 2;
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t pg_utf8_verifier(unsigned __int8 *a1, int a2)
{
  int v2 = (char)*a1;
  if (v2 < 0)
  {
    if ((v2 & 0xE0) == 0xC0)
    {
      int v3 = 2;
      if (a2 < 2) {
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      int v5 = v2 & 0xF0;
      if ((v2 & 0xF8) == 0xF0) {
        int v6 = 4;
      }
      else {
        int v6 = 1;
      }
      if (v5 == 224) {
        int v3 = 3;
      }
      else {
        int v3 = v6;
      }
      if (v3 > a2) {
        return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    int v3 = 1;
    if (a2 < 1) {
      return 0xFFFFFFFFLL;
    }
  }
  if (pg_utf8_islegal(a1, v3)) {
    return v3;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t pg_mule2wchar_with_len(unsigned __int8 *a1, unsigned int *a2, unsigned int a3)
{
  if ((int)a3 >= 1)
  {
    uint64_t result = 0;
    while (1)
    {
      unsigned int v7 = *a1;
      if (!*a1)
      {
LABEL_26:
        *a2 = 0;
        return result;
      }
      if (v7 >= 0x81)
      {
        if (a3 >= 2 && v7 <= 0x8D)
        {
          *a2 = v7 << 16;
          int v8 = a1[1];
          a1 += 2;
          int v5 = -2;
          unsigned int v7 = v8 & 0xFF00FFFF | (v7 << 16);
          goto LABEL_4;
        }
        if (v7 == 154)
        {
          if (a3 >= 3) {
            goto LABEL_15;
          }
        }
        else
        {
          if (a3 >= 3 && v7 == 155)
          {
LABEL_15:
            int v9 = a1[1];
            *a2 = v9 << 16;
            int v10 = a1[2];
            a1 += 3;
            unsigned int v7 = v10 & 0xFF00FFFF | (v9 << 16);
            int v5 = -3;
            goto LABEL_4;
          }
          if (v7 >= 0x90)
          {
            if (a3 >= 3 && v7 <= 0x99)
            {
              unsigned int v11 = v7 << 16;
              *a2 = v11;
              int v12 = v11 | (a1[1] << 8);
              *a2 = v12;
              int v13 = a1[2];
              a1 += 3;
              unsigned int v7 = v12 | v13;
              int v5 = -3;
              goto LABEL_4;
            }
            if (v7 == 156)
            {
              if (a3 >= 4) {
                goto LABEL_25;
              }
            }
            else if (a3 >= 4 && v7 == 157)
            {
LABEL_25:
              int v14 = a1[1] << 16;
              *a2 = v14;
              int v15 = v14 | (a1[2] << 8);
              *a2 = v15;
              int v16 = a1[3];
              a1 += 4;
              unsigned int v7 = v15 | v16;
              int v5 = -4;
              goto LABEL_4;
            }
          }
        }
      }
      ++a1;
      int v5 = -1;
LABEL_4:
      *a2++ = v7;
      uint64_t result = (result + 1);
      BOOL v6 = __OFADD__(a3, v5);
      a3 += v5;
      if (((a3 & 0x80000000) != 0) ^ v6 | (a3 == 0)) {
        goto LABEL_26;
      }
    }
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_wchar2mule_with_len(unsigned int *a1, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t result = 0;
    int v5 = a3 + 1;
    while (1)
    {
      unsigned int v6 = *a1;
      if (!*a1)
      {
LABEL_22:
        *a2 = 0;
        return result;
      }
      if (BYTE2(v6) - 129 > 0xC)
      {
        if (BYTE2(v6) - 144 <= 9)
        {
          *a2 = BYTE2(v6);
          unsigned int v10 = *a1 >> 8;
LABEL_12:
          unsigned int v7 = a2 + 2;
          a2[1] = v10;
          uint64_t v8 = 3;
          int v9 = 3;
          goto LABEL_13;
        }
        if (BYTE2(v6) - 160 <= 0x3F)
        {
          unsigned int v10 = HIWORD(v6);
          *a2 = -102;
          goto LABEL_12;
        }
        if ((v6 & 0xF00000) == 0xE00000)
        {
          unsigned int v10 = HIWORD(v6);
          *a2 = -101;
          goto LABEL_12;
        }
        if (BYTE2(v6) - 240 > 4)
        {
          uint64_t v8 = 1;
          int v9 = 1;
          unsigned int v7 = a2;
          if (BYTE2(v6) < 0xF5u || BYTE2(v6) == 255) {
            goto LABEL_14;
          }
          unsigned int v11 = HIWORD(v6);
          *a2 = -99;
        }
        else
        {
          unsigned int v11 = HIWORD(v6);
          *a2 = -100;
        }
        a2[1] = v11;
        unsigned int v7 = a2 + 3;
        a2[2] = BYTE1(*a1);
        uint64_t v8 = 4;
        int v9 = 4;
      }
      else
      {
        *a2 = BYTE2(v6);
        unsigned int v7 = a2 + 1;
        uint64_t v8 = 2;
        int v9 = 2;
      }
LABEL_13:
      unsigned int v6 = *a1;
LABEL_14:
      a2 += v8;
      *unsigned int v7 = v6;
      uint64_t result = (result + v9);
      ++a1;
      if (--v5 <= 1) {
        goto LABEL_22;
      }
    }
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t pg_mule_dsplen(char *a1)
{
  char v1 = *a1;
  unsigned int v2 = (*a1 + 127);
  uint64_t result = 1;
  if (v2 >= 0xD)
  {
    int v4 = v1 & 0xFE;
    unsigned int v5 = (v1 + 112);
    if (v4 == 156) {
      int v6 = 2;
    }
    else {
      int v6 = 1;
    }
    if (v5 >= 0xA) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v4 == 154) {
      return 1;
    }
    else {
      return v7;
    }
  }
  return result;
}

uint64_t pg_latin12wchar_with_len(uint64_t a1, _DWORD *a2, int a3)
{
  if (a3 < 1)
  {
    uint64_t result = 0;
    *a2 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t result = a3;
    while (*(unsigned char *)(a1 + v4))
    {
      *a2++ = *(unsigned __int8 *)(a1 + v4);
      if (a3 == ++v4)
      {
        *a2 = 0;
        return result;
      }
    }
    uint64_t result = v4;
    *a2 = 0;
  }
  return result;
}

uint64_t pg_latin1_mblen()
{
  return 1;
}

uint64_t pg_latin1_dsplen(unsigned char *a1)
{
  unsigned int v1 = *a1;
  if (v1 != 127 && v1 >= 0x20) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = -1;
  }
  if (*a1) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t pg_latin1_verifier()
{
  return 1;
}

uint64_t pg_sjis_mblen(unsigned char *a1)
{
  if ((*a1 + 95) >= 0x3Fu && (char)*a1 <= -1) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t pg_sjis_dsplen(unsigned char *a1)
{
  unsigned int v1 = *a1;
  if ((v1 + 95) < 0x3Fu) {
    return 1;
  }
  if (v1 != 127 && v1 >= 0x20) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = -1;
  }
  if (!*a1) {
    unsigned int v4 = 0;
  }
  if ((v1 & 0x80) != 0) {
    return 2;
  }
  else {
    return v4;
  }
}

uint64_t pg_sjis_verifier(char *a1, int a2)
{
  int v2 = *a1;
  BOOL v4 = v2 >= 0 || (v2 + 95) < 0x3F;
  if (v4) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  if (v5 > a2) {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v6 = 1;
  }
  if (!v4 && v5 <= a2)
  {
    if ((v2 + 127) >= 0x1F && (v2 + 32) > 0x1Cu) {
      return 0xFFFFFFFFLL;
    }
    if (a1[1] - 64 < 0x3F || a1[1] < -3) {
      return 2;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return v6;
}

uint64_t pg_big5_mblen(char *a1)
{
  if (*a1 >= 0) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t pg_big5_dsplen(unsigned char *a1)
{
  if ((char)*a1 < 0) {
    return 2;
  }
  unsigned int v1 = *a1;
  if (v1 != 127 && v1 >= 0x20) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = -1;
  }
  if (*a1) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t pg_big5_verifier(char *a1, int a2)
{
  int v2 = *a1;
  if (v2 >= 0) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  BOOL v4 = v3 <= a2;
  if (v3 > a2) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = 1;
  }
  if (v4 && v2 < 0)
  {
    if (a1[1]) {
      return 2;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t pg_gbk_mblen(char *a1)
{
  if (*a1 >= 0) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t pg_gbk_dsplen(unsigned char *a1)
{
  if ((char)*a1 < 0) {
    return 2;
  }
  unsigned int v1 = *a1;
  if (v1 != 127 && v1 >= 0x20) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = -1;
  }
  if (*a1) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t pg_gbk_verifier(char *a1, int a2)
{
  int v2 = *a1;
  if (v2 >= 0) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  BOOL v4 = v3 <= a2;
  if (v3 > a2) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = 1;
  }
  if (v4 && v2 < 0)
  {
    if (a1[1]) {
      return 2;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t pg_uhc_mblen(char *a1)
{
  if (*a1 >= 0) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t pg_uhc_dsplen(unsigned char *a1)
{
  if ((char)*a1 < 0) {
    return 2;
  }
  unsigned int v1 = *a1;
  if (v1 != 127 && v1 >= 0x20) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = -1;
  }
  if (*a1) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t pg_uhc_verifier(char *a1, int a2)
{
  int v2 = *a1;
  if (v2 >= 0) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  BOOL v4 = v3 <= a2;
  if (v3 > a2) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = 1;
  }
  if (v4 && v2 < 0)
  {
    if (a1[1]) {
      return 2;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t pg_gb18030_mblen(char *a1)
{
  if ((*a1 & 0x80000000) == 0) {
    return 1;
  }
  if (a1[1] - 48 >= 0xA) {
    return 2;
  }
  return 4;
}

uint64_t pg_gb18030_dsplen(unsigned char *a1)
{
  if ((char)*a1 < 0) {
    return 2;
  }
  unsigned int v1 = *a1;
  if (v1 != 127 && v1 >= 0x20) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = -1;
  }
  if (*a1) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t pg_gb18030_verifier(unsigned __int8 *a1, int a2)
{
  int v2 = (char)*a1;
  if ((v2 & 0x80000000) == 0) {
    return 1;
  }
  if (a2 < 4)
  {
    if (a2 < 2 || (v2 + 1) < 0x82u) {
      return 0xFFFFFFFFLL;
    }
    int v4 = a1[1];
  }
  else
  {
    int v4 = a1[1];
    unsigned __int8 v5 = v2 + 1;
    if ((v4 - 48) <= 9)
    {
      if (v5 >= 0x82u && (a1[2] + 1) >= 0x82u && a1[3] - 48 < 0xA) {
        return 4;
      }
      return 0xFFFFFFFFLL;
    }
    if (v5 < 0x82u) {
      return 0xFFFFFFFFLL;
    }
  }
  unsigned int v6 = v4 - 64;
  if ((char)v4 > -2) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 2;
  }
  if (v6 >= 0x3F) {
    return v7;
  }
  else {
    return 2;
  }
}

uint64_t pg_johab_mblen(unsigned __int8 *a1)
{
  int v1 = *a1;
  if ((v1 & 0x80u) == 0) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (v1 == 143) {
    unsigned int v2 = 3;
  }
  if (v1 == 142) {
    return 2;
  }
  else {
    return v2;
  }
}

uint64_t pg_johab_dsplen(unsigned char *a1)
{
  if ((char)*a1 < 0) {
    return 2;
  }
  unsigned int v1 = *a1;
  if (v1 != 127 && v1 >= 0x20) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = -1;
  }
  if (*a1) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t pg_johab_verifier(unsigned __int8 *a1, int a2)
{
  int v3 = *a1;
  if ((v3 & 0x80u) == 0) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3 == 143) {
    unsigned int v4 = 3;
  }
  if (v3 == 142) {
    uint64_t result = 2;
  }
  else {
    uint64_t result = v4;
  }
  if ((int)result > a2) {
    return 0xFFFFFFFFLL;
  }
  if ((char)v3 < 0 && result >= 2)
  {
    if ((a1[1] + 95) > 0x5Du) {
      return 0xFFFFFFFFLL;
    }
    if (result == 3)
    {
      if ((a1[2] + 95) >= 0x5Eu) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 3;
      }
    }
  }
  return result;
}

uint64_t pg_lrand48()
{
  uint64_t v0 = (unsigned __int16 *)_rand48_seed();
  unint64_t v1 = 0x5DEECE66DLL * (*v0 | ((unint64_t)*(unsigned int *)(v0 + 1) << 16)) + 11;
  unsigned __int16 *v0 = -6547 * *v0 + 11;
  v0[1] = WORD1(v1);
  v0[2] = WORD2(v1);
  return (v1 >> 17) & 0x7FFFFFFF;
}

uint64_t pg_popcount32_slow(__int32 a1, int8x8_t a2)
{
  a2.i32[0] = a1;
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(a2);
  v2.i16[0] = vaddlv_u8(v2);
  return v2.u32[0];
}

uint64_t pg_popcount64_slow(uint64_t a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t pg_usleep(uint64_t result)
{
  if (result >= 1)
  {
    uint64_t v4 = v1;
    uint64_t v5 = v2;
    v3.tv_sec = result / 0xF4240uLL;
    *(void *)&v3.tv_usec = result % 0xF4240uLL;
    return select(0, 0, 0, 0, &v3);
  }
  return result;
}

uint64_t pg_toupper(__darwin_ct_rune_t a1)
{
  __darwin_ct_rune_t v1 = a1;
  if ((a1 - 97) <= 0x19)
  {
    LOBYTE(v1) = a1 - 32;
    return v1;
  }
  if ((a1 & 0x80) == 0 || !__maskrune(a1, 0x1000uLL)) {
    return v1;
  }
  return __toupper(v1);
}

uint64_t pg_vsprintf(unsigned char *a1, unsigned char *a2, size_t *a3)
{
  unsigned int v6 = a1;
  unsigned int v7 = a1;
  *(void *)&long long v9 = 0;
  HIDWORD(v9) = 0;
  uint64_t v8 = 0;
  *(void *)((char *)&v9 + 5) = 0;
  dopr((uint64_t)&v6, a2, a3);
  int v3 = (int)v6;
  *unsigned int v6 = 0;
  unsigned int v4 = DWORD2(v9) + v3 - v7;
  if (BYTE12(v9)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4;
  }
}

uint64_t pg_vfprintf(FILE *a1, unsigned char *a2, size_t *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    __stream = a1;
    uint64_t v10 = 0;
    unsigned int v6 = v11;
    unsigned int v7 = v11;
    uint64_t v8 = &v12;
    dopr((uint64_t)&v6, a2, a3);
    if (BYTE4(v10) || (uint64_t v3 = v6 - v7, v6 == v7))
    {
      if (BYTE4(v10)) {
        return 0xFFFFFFFFLL;
      }
      else {
        return v10;
      }
    }
    else
    {
      size_t v4 = fwrite(v7, 1uLL, v6 - v7, __stream);
      if (v4 == v3) {
        return (v10 + v4);
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
}

uint64_t pg_printf(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F143D8])
  {
    __stream = (FILE *)*MEMORY[0x1E4F143D8];
    uint64_t v16 = 0;
    uint64_t v12 = v17;
    int v13 = v17;
    int v14 = &v18;
    dopr((uint64_t)&v12, a1, &a9);
    if (BYTE4(v16) || (uint64_t v9 = v12 - v13, v12 == v13))
    {
      if (BYTE4(v16)) {
        return 0xFFFFFFFFLL;
      }
      else {
        return v16;
      }
    }
    else
    {
      size_t v10 = fwrite(v13, 1uLL, v12 - v13, __stream);
      if (v10 == v9) {
        return (v16 + v10);
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
}

size_t leading_pad(size_t __c, int a2, int *a3, uint64_t a4)
{
  int v7 = *a3;
  if (__c && v7 >= 1)
  {
    size_t v8 = __c;
    if (!a2)
    {
LABEL_13:
      __c = dopr_outchmulti(v8, v7, a4);
      *a3 = 0;
      return __c;
    }
    unint64_t v9 = *(void *)(a4 + 16);
    size_t v10 = *(unsigned char **)a4;
    if (v9 && (unint64_t)v10 >= v9)
    {
      unsigned int v11 = *(FILE **)(a4 + 24);
      if (!v11)
      {
        ++*(_DWORD *)(a4 + 32);
        int v7 = *a3 - 1;
        *a3 = v7;
        if (v7 >= 1) {
          goto LABEL_13;
        }
LABEL_15:
        a2 = 0;
        goto LABEL_16;
      }
      if (!*(unsigned char *)(a4 + 36))
      {
        __c = *(void *)(a4 + 8);
        uint64_t v12 = &v10[-__c];
        if (v10 != (unsigned char *)__c)
        {
          __c = fwrite((const void *)__c, 1uLL, (size_t)&v10[-__c], v11);
          *(_DWORD *)(a4 + 32) += __c;
          if ((unsigned char *)__c != v12) {
            *(unsigned char *)(a4 + 36) = 1;
          }
        }
      }
      size_t v10 = *(unsigned char **)(a4 + 8);
    }
    *(void *)a4 = v10 + 1;
    *size_t v10 = a2;
    int v7 = *a3 - 1;
    *a3 = v7;
    if (v7 >= 1) {
      goto LABEL_13;
    }
    goto LABEL_15;
  }
LABEL_16:
  BOOL v13 = a2 != 0;
  BOOL v14 = __OFSUB__(v7, v13);
  int v15 = v7 - v13;
  if (!((v15 < 0) ^ v14 | (v15 == 0)))
  {
    __c = dopr_outchmulti(0x20uLL, v15, a4);
    *a3 = v13;
  }
  if (a2)
  {
    unint64_t v16 = *(void *)(a4 + 16);
    uint64_t v17 = *(unsigned char **)a4;
    if (v16 && (unint64_t)v17 >= v16)
    {
      uint64_t v18 = *(FILE **)(a4 + 24);
      if (!v18)
      {
        ++*(_DWORD *)(a4 + 32);
        int v20 = *a3;
        int v21 = *a3 - 1;
        if (*a3 < 1)
        {
LABEL_28:
          if (v20 < 0) {
            *a3 = v20 + 1;
          }
          return __c;
        }
LABEL_31:
        *a3 = v21;
        return __c;
      }
      if (!*(unsigned char *)(a4 + 36))
      {
        __c = *(void *)(a4 + 8);
        size_t v19 = &v17[-__c];
        if (v17 != (unsigned char *)__c)
        {
          __c = fwrite((const void *)__c, 1uLL, (size_t)&v17[-__c], v18);
          *(_DWORD *)(a4 + 32) += __c;
          if ((unsigned char *)__c != v19) {
            *(unsigned char *)(a4 + 36) = 1;
          }
        }
      }
      uint64_t v17 = *(unsigned char **)(a4 + 8);
    }
    *(void *)a4 = v17 + 1;
    *uint64_t v17 = a2;
    int v20 = *a3;
    int v21 = *a3 - 1;
    if (*a3 < 1) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }
  return __c;
}

const char *pg_strerror_r(uint64_t a1, char *a2, size_t a3)
{
  int v6 = strerror_r(a1, a2, a3);
  if (a2 && !v6)
  {
    int v12 = *a2;
    if (v12 != 63 && v12 != 0) {
      return a2;
    }
  }
  uint64_t result = "E2BIG";
  switch((int)a1)
  {
    case 1:
      uint64_t result = "EPERM";
      break;
    case 2:
      uint64_t result = "ENOENT";
      break;
    case 3:
      uint64_t result = "ESRCH";
      break;
    case 4:
      uint64_t result = "EINTR";
      break;
    case 5:
      uint64_t result = "EIO";
      break;
    case 6:
      uint64_t result = "ENXIO";
      break;
    case 7:
      return result;
    case 8:
      uint64_t result = "ENOEXEC";
      break;
    case 9:
      uint64_t result = "EBADF";
      break;
    case 10:
      uint64_t result = "ECHILD";
      break;
    case 11:
      uint64_t result = "EDEADLK";
      break;
    case 12:
      uint64_t result = "ENOMEM";
      break;
    case 13:
      uint64_t result = "EACCES";
      break;
    case 14:
      uint64_t result = "EFAULT";
      break;
    case 16:
      uint64_t result = "EBUSY";
      break;
    case 17:
      uint64_t result = "EEXIST";
      break;
    case 18:
      uint64_t result = "EXDEV";
      break;
    case 19:
      uint64_t result = "ENODEV";
      break;
    case 20:
      uint64_t result = "ENOTDIR";
      break;
    case 21:
      uint64_t result = "EISDIR";
      break;
    case 22:
      uint64_t result = "EINVAL";
      break;
    case 23:
      uint64_t result = "ENFILE";
      break;
    case 24:
      uint64_t result = "EMFILE";
      break;
    case 25:
      uint64_t result = "ENOTTY";
      break;
    case 26:
      uint64_t result = "ETXTBSY";
      break;
    case 27:
      uint64_t result = "EFBIG";
      break;
    case 28:
      uint64_t result = "ENOSPC";
      break;
    case 30:
      uint64_t result = "EROFS";
      break;
    case 31:
      uint64_t result = "EMLINK";
      break;
    case 32:
      uint64_t result = "EPIPE";
      break;
    case 33:
      uint64_t result = "EDOM";
      break;
    case 34:
      uint64_t result = "ERANGE";
      break;
    case 35:
      uint64_t result = "EAGAIN";
      break;
    case 36:
      uint64_t result = "EINPROGRESS";
      break;
    case 37:
      uint64_t result = "EALREADY";
      break;
    case 38:
      uint64_t result = "ENOTSOCK";
      break;
    case 40:
      uint64_t result = "EMSGSIZE";
      break;
    case 43:
      uint64_t result = "EPROTONOSUPPORT";
      break;
    case 45:
      uint64_t result = "ENOTSUP";
      break;
    case 47:
      uint64_t result = "EAFNOSUPPORT";
      break;
    case 48:
      uint64_t result = "EADDRINUSE";
      break;
    case 49:
      uint64_t result = "EADDRNOTAVAIL";
      break;
    case 53:
      uint64_t result = "ECONNABORTED";
      break;
    case 54:
      uint64_t result = "ECONNRESET";
      break;
    case 55:
      uint64_t result = "ENOBUFS";
      break;
    case 56:
      uint64_t result = "EISCONN";
      break;
    case 57:
      uint64_t result = "ENOTCONN";
      break;
    case 60:
      uint64_t result = "ETIMEDOUT";
      break;
    case 61:
      uint64_t result = "ECONNREFUSED";
      break;
    case 62:
      uint64_t result = "ELOOP";
      break;
    case 63:
      uint64_t result = "ENAMETOOLONG";
      break;
    case 65:
      uint64_t result = "EHOSTUNREACH";
      break;
    case 66:
      uint64_t result = "ENOTEMPTY";
      break;
    case 78:
      uint64_t result = "ENOSYS";
      break;
    case 84:
      uint64_t result = "EOVERFLOW";
      break;
    case 90:
      uint64_t result = "EIDRM";
      break;
    case 94:
      uint64_t result = "EBADMSG";
      break;
    case 102:
      uint64_t result = "EOPNOTSUPP";
      break;
    default:
      pg_snprintf(a2, a3, (uint64_t)"operating system error %d", v7, v8, v9, v10, v11, a1);
      return a2;
  }
  return result;
}

const char *protobuf_c_version()
{
  return "1.4.0";
}

uint64_t protobuf_c_version_number()
{
  return 1004000;
}

char *protobuf_c_buffer_simple_append(uint64_t a1, size_t __n, void *__src)
{
  size_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  size_t v8 = v6 + __n;
  if (v6 + __n <= v7)
  {
    uint64_t v11 = *(char **)(a1 + 24);
LABEL_13:
    uint64_t result = (char *)memcpy(&v11[v6], __src, __n);
    *(void *)(a1 + 16) = v8;
    return result;
  }
  do
    v7 *= 2;
  while (v7 < v8);
  if (*(void *)(a1 + 40)) {
    uint64_t v9 = *(uint64_t (***)(int, size_t))(a1 + 40);
  }
  else {
    uint64_t v9 = &protobuf_c__allocator;
  }
  uint64_t result = (char *)(*v9)((int)v9[2], v7);
  if (result)
  {
    uint64_t v11 = result;
    memcpy(result, *(const void **)(a1 + 24), *(void *)(a1 + 16));
    if (*(_DWORD *)(a1 + 32))
    {
      if (*(void *)(a1 + 24)) {
        ((void (*)(uint64_t (*)(int, size_t)))v9[1])(v9[2]);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 32) = 1;
    }
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 8) = v7;
    uint64_t v6 = *(void *)(a1 + 16);
    goto LABEL_13;
  }
  return result;
}

uint64_t required_field_get_packed_size(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = 2;
  uint64_t v4 = 3;
  uint64_t v5 = 4;
  if (v2 >> 25) {
    uint64_t v5 = 5;
  }
  if (v2 >= 0x40000) {
    uint64_t v4 = v5;
  }
  if (v2 >= 0x800) {
    uint64_t v3 = v4;
  }
  if (v2 >= 0x10) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = 1;
  }
  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
    case 0xD:
      unsigned int v8 = *a2;
      if ((*a2 & 0x80000000) != 0) {
        return v6 + 10;
      }
      if (v8 < 0x80) {
        return v6 + 1;
      }
LABEL_26:
      uint64_t v12 = 3;
      uint64_t v13 = 4;
      if (v8 >> 28) {
        uint64_t v13 = 5;
      }
      if (v8 >= 0x200000) {
        uint64_t v12 = v13;
      }
      if (v8 >= 0x4000) {
        uint64_t v14 = v12;
      }
      else {
        uint64_t v14 = 2;
      }
      return v14 + v6;
    case 1:
      unsigned int v10 = (2 * *a2) ^ ((int)*a2 >> 31);
      if (v10 < 0x80) {
        return v6 + 1;
      }
      if (v10 < 0x4000) {
        return v6 + 2;
      }
      if (v10 < 0x200000) {
        return v6 + 3;
      }
      unsigned int v31 = v10 >> 28;
      goto LABEL_94;
    case 2:
    case 7:
    case 0xA:
      return v6 + 4;
    case 3:
    case 8:
      unint64_t v9 = *(void *)a2;
      if (HIDWORD(*(void *)a2))
      {
        if (v9 >> 35)
        {
          unint64_t v24 = v9 >> 42;
          unint64_t v25 = v9 >> 49;
          unint64_t v26 = HIBYTE(v9);
          BOOL v27 = (v9 & 0x8000000000000000) != 0;
          uint64_t v28 = 9;
          if (v27) {
            uint64_t v28 = 10;
          }
          if (!v26) {
            uint64_t v28 = 8;
          }
          if (!v25) {
            uint64_t v28 = 7;
          }
          if (!v24) {
            uint64_t v28 = 6;
          }
          return v28 + v6;
        }
        else
        {
          return v6 + 5;
        }
      }
      else if (v9 >= 0x80)
      {
        uint64_t v21 = 3;
        uint64_t v22 = 4;
        if (v9 >> 28) {
          uint64_t v22 = 5;
        }
        if (v9 >= 0x200000) {
          uint64_t v21 = v22;
        }
        if (v9 >= 0x4000) {
          uint64_t v23 = v21;
        }
        else {
          uint64_t v23 = 2;
        }
        return v23 + v6;
      }
      else
      {
        return v6 + 1;
      }
    case 4:
      unint64_t v11 = (2 * *(void *)a2) ^ (*(uint64_t *)a2 >> 63);
      if (HIDWORD(v11))
      {
        if (v11 >> 35)
        {
          if (v11 >> 42)
          {
            if (v11 >> 49)
            {
              if (HIBYTE(v11))
              {
                BOOL v27 = (v11 & 0x8000000000000000) != 0;
                uint64_t v34 = 9;
                if (v27) {
                  uint64_t v34 = 10;
                }
                return v34 + v6;
              }
              else
              {
                return v6 + 8;
              }
            }
            else
            {
              return v6 + 7;
            }
          }
          else
          {
            return v6 + 6;
          }
        }
        else
        {
          return v6 + 5;
        }
      }
      else if (v11 >= 0x80)
      {
        if (v11 >= 0x4000)
        {
          if (v11 >= 0x200000)
          {
            unsigned int v31 = v11 >> 28;
LABEL_94:
            BOOL v32 = v31 == 0;
            uint64_t v33 = 4;
            if (!v32) {
              uint64_t v33 = 5;
            }
            return v33 + v6;
          }
          else
          {
            return v6 + 3;
          }
        }
        else
        {
          return v6 + 2;
        }
      }
      else
      {
        return v6 + 1;
      }
    case 5:
    case 9:
    case 0xB:
      return v6 | 8;
    case 6:
      unsigned int v8 = *a2;
      if (*a2 >= 0x80) {
        goto LABEL_26;
      }
      return v6 + 1;
    case 0xC:
      return v6 + 1;
    case 0xE:
      unsigned int packed_size = *(const char **)a2;
      if (!*(void *)a2) {
        return (uint64_t)&packed_size[v6 + 1];
      }
      unsigned int packed_size = (const char *)strlen(packed_size);
      if (packed_size < 0x80) {
        return (uint64_t)&packed_size[v6 + 1];
      }
      if (packed_size >= 0x4000) {
        goto LABEL_77;
      }
      return (uint64_t)&packed_size[v6 + 2];
    case 0xF:
      unint64_t v16 = *(void *)a2;
      uint64_t v17 = 1;
      uint64_t v18 = 2;
      uint64_t v19 = 3;
      uint64_t v20 = 4;
      if (*(void *)a2 >> 28) {
        uint64_t v20 = 5;
      }
      if (v16 >= 0x200000) {
        uint64_t v19 = v20;
      }
      if (v16 >= 0x4000) {
        uint64_t v18 = v19;
      }
      if (v16 >= 0x80) {
        uint64_t v17 = v18;
      }
      return v16 + v6 + v17;
    case 0x10:
      unsigned int packed_size = *(const char **)a2;
      if (!*(void *)a2) {
        return (uint64_t)&packed_size[v6 + 1];
      }
      unsigned int packed_size = (const char *)protobuf_c_message_get_packed_size();
      if (packed_size < 0x80) {
        return (uint64_t)&packed_size[v6 + 1];
      }
      if (packed_size < 0x4000) {
        return (uint64_t)&packed_size[v6 + 2];
      }
LABEL_77:
      uint64_t v29 = 3;
      uint64_t v30 = 4;
      if (packed_size >> 28) {
        uint64_t v30 = 5;
      }
      if (packed_size >= 0x200000) {
        uint64_t v29 = v30;
      }
      return (uint64_t)&packed_size[v6 + v29];
    default:
      required_field_get_packed_size_cold_1();
  }
}

uint64_t protobuf_c_message_pack(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD **)a1;
  if (**(_DWORD **)a1 != 682290937) {
    protobuf_c_message_pack_cold_4();
  }
  if (v2[12])
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v101 = a2 + 16;
    while (1)
    {
      uint64_t v7 = *((void *)v2 + 7);
      unsigned int v8 = (_DWORD *)(v7 + 72 * v4);
      unint64_t v9 = (unint64_t *)(a1 + v8[6]);
      int v10 = v8[3];
      if (!v10) {
        goto LABEL_5;
      }
      uint64_t v11 = v8[5];
      uint64_t v12 = v7 + 72 * v4;
      if (v10 != 1 && v10 != 3)
      {
        int v16 = *(_DWORD *)(v12 + 48);
LABEL_22:
        unint64_t v17 = *(void *)(a1 + v11);
        uint64_t v18 = (char *)(a2 + v5);
        uint64_t v19 = (unint64_t *)*v9;
        if ((v16 & 1) == 0)
        {
          uint64_t v20 = *(int *)(v7 + 72 * v4 + 16);
          if (v20 >= 0x11) {
            protobuf_c_message_pack_cold_1();
          }
          uint64_t v6 = 0;
          if (v17)
          {
            uint64_t v21 = qword_18EBDE350[v20];
            unsigned int v22 = 1;
            do
            {
              uint64_t v6 = &v6[(void)required_field_pack((uint64_t)v8, v19, &v6[(void)v18])];
              uint64_t v19 = (unint64_t *)((char *)v19 + v21);
            }
            while (v17 > v22++);
          }
          goto LABEL_6;
        }
        if (v17)
        {
          unsigned int v26 = *(_DWORD *)(v7 + 72 * v4 + 8);
          if (v26 >> 29)
          {
            char v30 = (8 * v26) | 0x80;
            v18[1] = (v26 >> 4) | 0x80;
            v18[2] = (v26 >> 11) | 0x80;
            v18[3] = (v26 >> 18) | 0x80;
            HIDWORD(v31) = v26 >> 29;
            LODWORD(v31) = 8 * v26;
            v18[4] = v31 >> 28;
            uint64_t v32 = 5;
          }
          else
          {
            LOBYTE(v27) = 8 * v26;
            if (v26 < 0x10)
            {
              uint64_t v29 = 0;
            }
            else
            {
              *uint64_t v18 = v27 | 0x80;
              unsigned int v27 = v26 >> 4;
              if (v26 < 0x800)
              {
                uint64_t v29 = 1;
              }
              else
              {
                v18[1] = v27 | 0x80;
                unsigned int v27 = v26 >> 11;
                if (v26 < 0x40000)
                {
                  uint64_t v29 = 2;
                }
                else
                {
                  v18[2] = v27 | 0x80;
                  unsigned int v27 = v26 >> 18;
                  unsigned int v28 = v26 >> 25;
                  if (v28)
                  {
                    v18[3] = v27 | 0x80;
                    LOBYTE(v27) = v28;
                    uint64_t v29 = 4;
                  }
                  else
                  {
                    uint64_t v29 = 3;
                  }
                }
              }
            }
            uint64_t v32 = v29 + 1;
            v18[v29] = v27;
            char v30 = *v18;
          }
          *uint64_t v18 = v30 | 2;
          unsigned int v33 = *(_DWORD *)(v7 + 72 * v4 + 16);
          if (v33 - 2 > 9)
          {
            unsigned int v34 = v17;
            if (v17 >= 0x80) {
              goto LABEL_62;
            }
          }
          else
          {
            unsigned int v34 = dword_18EBDE324[v33 - 2] * v17;
            if (v34 >= 0x80)
            {
LABEL_62:
              if (v34 >= 0x4000)
              {
                if (v34 >> 28) {
                  int v36 = 5;
                }
                else {
                  int v36 = 4;
                }
                if (v34 >= 0x200000) {
                  int v35 = v36;
                }
                else {
                  int v35 = 3;
                }
              }
              else
              {
                int v35 = 2;
                if (v33 > 0xD) {
                  goto LABEL_213;
                }
              }
              goto LABEL_74;
            }
          }
          int v35 = 1;
          if (v33 > 0xD) {
LABEL_213:
          }
            protobuf_c_message_pack_cold_2();
LABEL_74:
          uint64_t v37 = (v35 + v32);
          unint64_t v38 = (unint64_t)&v18[v37];
          switch(v33)
          {
            case 0u:
            case 0xDu:
              uint64_t v48 = 0;
              unsigned int v42 = (BOOL *)&v18[v37];
              do
              {
                while (1)
                {
                  unsigned int v52 = *((_DWORD *)v19 + v48);
                  if ((v52 & 0x80000000) == 0) {
                    break;
                  }
                  int32x4_t v49 = vdupq_n_s32(v52);
                  *unsigned int v42 = v52 | 0x80;
                  int32x4_t v50 = (int32x4_t)vshlq_u32((uint32x4_t)v49, (uint32x4_t)xmmword_18EBDE2C0);
                  int16x8_t v51 = (int16x8_t)vshlq_s32(v49, (int32x4_t)xmmword_18EBDE2C0);
                  v50.i32[3] = v51.i32[3];
                  v51.i64[0] = *(void *)&vmovn_s32(v50) | 0x80008000800080;
                  *(_DWORD *)(v42 + 1) = vmovn_s16(v51).u32[0];
                  *(_DWORD *)(v42 + 5) = -1;
                  v42[9] = 1;
                  v42 += 10;
                  if (v17 <= ++v48) {
                    goto LABEL_78;
                  }
                }
                if (v52 < 0x80)
                {
                  uint64_t v54 = 0;
                }
                else
                {
                  *unsigned int v42 = v52 | 0x80;
                  if (v52 < 0x4000)
                  {
                    v52 >>= 7;
                    uint64_t v54 = 1;
                  }
                  else
                  {
                    v42[1] = (v52 >> 7) | 0x80;
                    if (v52 < 0x200000)
                    {
                      v52 >>= 14;
                      uint64_t v54 = 2;
                    }
                    else
                    {
                      v42[2] = (v52 >> 14) | 0x80;
                      unsigned int v53 = v52 >> 21;
                      v52 >>= 28;
                      if (v52)
                      {
                        v42[3] = v53 | 0x80;
                        uint64_t v54 = 4;
                      }
                      else
                      {
                        LOBYTE(v52) = v53;
                        uint64_t v54 = 3;
                      }
                    }
                  }
                }
                v42[v54] = v52;
                v42 += v54 + 1;
                ++v48;
              }
              while (v17 > v48);
              goto LABEL_78;
            case 1u:
              uint64_t v62 = 0;
              unsigned int v42 = (BOOL *)&v18[v37];
              do
              {
                unsigned int v65 = (2 * *((_DWORD *)v19 + v62)) ^ (*((int *)v19 + v62) >> 31);
                if (v65 < 0x80)
                {
                  uint64_t v63 = 0;
                }
                else
                {
                  *unsigned int v42 = v65 | 0x80;
                  if (v65 < 0x4000)
                  {
                    v65 >>= 7;
                    uint64_t v63 = 1;
                  }
                  else
                  {
                    v42[1] = (v65 >> 7) | 0x80;
                    if (v65 < 0x200000)
                    {
                      v65 >>= 14;
                      uint64_t v63 = 2;
                    }
                    else
                    {
                      v42[2] = (v65 >> 14) | 0x80;
                      unsigned int v66 = v65 >> 21;
                      v65 >>= 28;
                      if (v65)
                      {
                        v42[3] = v66 | 0x80;
                        uint64_t v63 = 4;
                      }
                      else
                      {
                        LOBYTE(v65) = v66;
                        uint64_t v63 = 3;
                      }
                    }
                  }
                }
                uint64_t v64 = &v42[v63];
                *uint64_t v64 = v65;
                unsigned int v42 = v64 + 1;
                ++v62;
              }
              while (v17 > v62);
              goto LABEL_78;
            case 2u:
            case 7u:
            case 0xAu:
              uint64_t v39 = v32;
              int v40 = 4 * v17;
              size_t v41 = (4 * v17) & 0xFFFFFFFC;
              goto LABEL_77;
            case 3u:
            case 8u:
              unint64_t v55 = 0;
              unsigned int v42 = (BOOL *)&v18[v37];
              while (2)
              {
                while (1)
                {
                  unint64_t v57 = v19[v55];
                  unint64_t v58 = HIDWORD(v57);
                  if (!HIDWORD(v57)) {
                    break;
                  }
                  *unsigned int v42 = v57 | 0x80;
                  v42[1] = (v57 >> 7) | 0x80;
                  v42[2] = (v57 >> 14) | 0x80;
                  v42[3] = (v57 >> 21) | 0x80;
                  char v59 = v57 >> 28;
                  if (v58 >= 8)
                  {
                    v42[4] = v59 | 0x80;
                    LODWORD(v57) = v58 >> 3;
                    if (v58 < 0x400)
                    {
                      LODWORD(v56) = 5;
                    }
                    else
                    {
                      uint64_t v56 = 5;
                      do
                      {
                        v42[v56++] = v57 | 0x80;
                        unsigned int v61 = v57 >> 14;
                        LODWORD(v57) = v57 >> 7;
                      }
                      while (v61);
                    }
                    goto LABEL_114;
                  }
                  v42[4] = v59;
                  v42 += 5;
                  unint64_t v55 = (v55 + 1);
                  if (v17 <= v55) {
                    goto LABEL_78;
                  }
                }
                if (v57 < 0x80)
                {
                  LODWORD(v56) = 0;
                }
                else
                {
                  *unsigned int v42 = v57 | 0x80;
                  if (v57 < 0x4000)
                  {
                    LODWORD(v56) = 1;
                    LODWORD(v57) = v57 >> 7;
                  }
                  else
                  {
                    v42[1] = (v57 >> 7) | 0x80;
                    if (v57 < 0x200000)
                    {
                      LODWORD(v56) = 2;
                      LODWORD(v57) = v57 >> 14;
                    }
                    else
                    {
                      v42[2] = (v57 >> 14) | 0x80;
                      unsigned int v60 = v57 >> 21;
                      LODWORD(v57) = v57 >> 28;
                      if (v57)
                      {
                        v42[3] = v60 | 0x80;
                        LODWORD(v56) = 4;
                      }
                      else
                      {
                        LODWORD(v56) = 3;
                        LOBYTE(v57) = v60;
                      }
                    }
                  }
                }
LABEL_114:
                v42[v56] = v57;
                v42 += (v56 + 1);
                unint64_t v55 = (v55 + 1);
                if (v17 <= v55) {
                  goto LABEL_78;
                }
                continue;
              }
            case 4u:
              unint64_t v67 = 0;
              unsigned int v42 = (BOOL *)&v18[v37];
              while (2)
              {
                while (1)
                {
                  unint64_t v69 = (2 * v19[v67]) ^ ((uint64_t)v19[v67] >> 63);
                  unint64_t v70 = HIDWORD(v69);
                  if (!HIDWORD(v69)) {
                    break;
                  }
                  *unsigned int v42 = v69 | 0x80;
                  v42[1] = (v69 >> 7) | 0x80;
                  v42[2] = (v69 >> 14) | 0x80;
                  v42[3] = (v69 >> 21) | 0x80;
                  char v71 = v69 >> 28;
                  if (v70 >= 8)
                  {
                    v42[4] = v71 | 0x80;
                    LODWORD(v69) = v70 >> 3;
                    if (v70 < 0x400)
                    {
                      LODWORD(v68) = 5;
                    }
                    else
                    {
                      uint64_t v68 = 5;
                      do
                      {
                        v42[v68++] = v69 | 0x80;
                        unsigned int v73 = v69 >> 14;
                        LODWORD(v69) = v69 >> 7;
                      }
                      while (v73);
                    }
                    goto LABEL_146;
                  }
                  v42[4] = v71;
                  v42 += 5;
                  unint64_t v67 = (v67 + 1);
                  if (v17 <= v67) {
                    goto LABEL_78;
                  }
                }
                if (v69 < 0x80)
                {
                  LODWORD(v68) = 0;
                }
                else
                {
                  *unsigned int v42 = v69 | 0x80;
                  if (v69 < 0x4000)
                  {
                    LODWORD(v68) = 1;
                    LODWORD(v69) = v69 >> 7;
                  }
                  else
                  {
                    v42[1] = (v69 >> 7) | 0x80;
                    if (v69 < 0x200000)
                    {
                      LODWORD(v68) = 2;
                      LODWORD(v69) = v69 >> 14;
                    }
                    else
                    {
                      v42[2] = (v69 >> 14) | 0x80;
                      unsigned int v72 = v69 >> 21;
                      LODWORD(v69) = v69 >> 28;
                      if (v69)
                      {
                        v42[3] = v72 | 0x80;
                        LODWORD(v68) = 4;
                      }
                      else
                      {
                        LODWORD(v68) = 3;
                        LOBYTE(v69) = v72;
                      }
                    }
                  }
                }
LABEL_146:
                v42[v68] = v69;
                v42 += (v68 + 1);
                unint64_t v67 = (v67 + 1);
                if (v17 <= v67) {
                  goto LABEL_78;
                }
                continue;
              }
            case 5u:
            case 9u:
            case 0xBu:
              uint64_t v39 = v32;
              int v40 = 8 * v17;
              size_t v41 = (8 * v17) & 0xFFFFFFF8;
LABEL_77:
              memcpy(&v18[v37], v19, v41);
              unint64_t v38 = (unint64_t)&v18[v37];
              LODWORD(v42) = v18 + v37 + v40;
              uint64_t v32 = v39;
              goto LABEL_78;
            case 6u:
              uint64_t v74 = 0;
              unsigned int v42 = (BOOL *)&v18[v37];
              do
              {
                unsigned int v77 = *((_DWORD *)v19 + v74);
                if (v77 < 0x80)
                {
                  uint64_t v75 = 0;
                }
                else
                {
                  *unsigned int v42 = v77 | 0x80;
                  if (v77 < 0x4000)
                  {
                    v77 >>= 7;
                    uint64_t v75 = 1;
                  }
                  else
                  {
                    v42[1] = (v77 >> 7) | 0x80;
                    if (v77 < 0x200000)
                    {
                      v77 >>= 14;
                      uint64_t v75 = 2;
                    }
                    else
                    {
                      v42[2] = (v77 >> 14) | 0x80;
                      unsigned int v78 = v77 >> 21;
                      v77 >>= 28;
                      if (v77)
                      {
                        v42[3] = v78 | 0x80;
                        uint64_t v75 = 4;
                      }
                      else
                      {
                        LOBYTE(v77) = v78;
                        uint64_t v75 = 3;
                      }
                    }
                  }
                }
                uint64_t v76 = &v42[v75];
                *uint64_t v76 = v77;
                unsigned int v42 = v76 + 1;
                ++v74;
              }
              while (v17 > v74);
              goto LABEL_78;
            case 0xCu:
              if (v17 < 0x20
                || (v17 ? (BOOL v79 = (v17 - 1) >> 32 == 0) : (BOOL v79 = 0),
                    !v79 || v38 < (unint64_t)v19 + 4 * v17 && (unint64_t)v19 < a2 + v37 + v5 + v17))
              {
                unint64_t v80 = 0;
                int v81 = 0;
                unsigned int v42 = (BOOL *)&v18[v37];
LABEL_184:
                unsigned int v82 = v81 + 1;
                do
                {
                  *v42++ = *((_DWORD *)v19 + v80) != 0;
                  unint64_t v80 = v82++;
                }
                while (v17 > v80);
                goto LABEL_78;
              }
              unint64_t v80 = v17 & 0xFFFFFFFFFFFFFFE0;
              unsigned int v42 = (BOOL *)(v38 + (v17 & 0xFFFFFFFFFFFFFFE0));
              uint64_t v83 = (int32x4_t *)(v19 + 8);
              uint64_t v84 = (int8x16_t *)(v101 + v5 + v37);
              unint64_t v85 = v17 & 0xFFFFFFFFFFFFFFE0;
              v86.i64[0] = 0x101010101010101;
              v86.i64[1] = 0x101010101010101;
              do
              {
                int8x16_t v87 = vbicq_s8(v86, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(*v83), (int16x8_t)vceqzq_s32(v83[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v83[2]), (int16x8_t)vceqzq_s32(v83[3]))));
                v84[-1] = vbicq_s8(v86, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v83[-4]), (int16x8_t)vceqzq_s32(v83[-3])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v83[-2]), (int16x8_t)vceqzq_s32(v83[-1]))));
                *uint64_t v84 = v87;
                v83 += 8;
                v84 += 2;
                v85 -= 32;
              }
              while (v85);
              int v81 = v17 & 0xFFFFFFE0;
              if (v17 != v80) {
                goto LABEL_184;
              }
LABEL_78:
              unsigned int v43 = v42 - v38;
              if ((v42 - v38) < 0x80)
              {
                int v44 = 1;
                if (v35 == 1) {
                  goto LABEL_80;
                }
LABEL_94:
                if (v35 + 1 != v44) {
                  protobuf_c_message_pack_cold_3();
                }
                memmove((void *)(v38 + 1), (const void *)v38, v43);
                LODWORD(v37) = v37 + 1;
                uint64_t v45 = &v18[v32];
                if (v43 >= 0x80) {
                  goto LABEL_81;
                }
                goto LABEL_96;
              }
              if (v43 >= 0x4000)
              {
                if (v43 >> 28) {
                  int v44 = 5;
                }
                else {
                  int v44 = 4;
                }
                if (v43 < 0x200000) {
                  int v44 = 3;
                }
                if (v35 != v44) {
                  goto LABEL_94;
                }
              }
              else
              {
                int v44 = 2;
                if (v35 != 2) {
                  goto LABEL_94;
                }
              }
LABEL_80:
              uint64_t v45 = &v18[v32];
              if (v43 >= 0x80)
              {
LABEL_81:
                *uint64_t v45 = v43 | 0x80;
                unsigned int v46 = v43 >> 7;
                if (v43 < 0x4000)
                {
                  uint64_t v47 = 1;
                }
                else
                {
                  v45[1] = v46 | 0x80;
                  unsigned int v46 = v43 >> 14;
                  if (v43 < 0x200000)
                  {
                    uint64_t v47 = 2;
                  }
                  else
                  {
                    v45[2] = v46 | 0x80;
                    unsigned int v46 = v43 >> 21;
                    if (v43 >> 28)
                    {
                      v45[3] = v46 | 0x80;
                      unsigned int v46 = v43 >> 28;
                      uint64_t v47 = 4;
                    }
                    else
                    {
                      uint64_t v47 = 3;
                    }
                  }
                }
                goto LABEL_188;
              }
LABEL_96:
              uint64_t v47 = 0;
              LOBYTE(v46) = v43;
LABEL_188:
              v45[v47] = v46;
              uint64_t v6 = (const char *)(v37 + v43);
              goto LABEL_6;
            default:
              goto LABEL_213;
          }
        }
LABEL_46:
        uint64_t v6 = 0;
        goto LABEL_6;
      }
      int v16 = *(_DWORD *)(v12 + 48);
      if ((v16 & 4) != 0)
      {
        if (*(_DWORD *)(v7 + 72 * v4 + 8) != *(_DWORD *)(a1 + v11)) {
          goto LABEL_46;
        }
        int v24 = *(_DWORD *)(v7 + 72 * v4 + 16);
        if (v24 != 16 && v24 != 14) {
          goto LABEL_5;
        }
      }
      else
      {
        if (v10 == 3)
        {
          switch(v8[4])
          {
            case 0:
            case 1:
            case 2:
            case 6:
            case 7:
            case 0xC:
            case 0xD:
              if (*(_DWORD *)v9) {
                goto LABEL_5;
              }
              goto LABEL_46;
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
            case 0xF:
            case 0x10:
              if (!*v9) {
                goto LABEL_46;
              }
              goto LABEL_5;
            case 0xA:
              if (*(float *)v9 != 0.0) {
                goto LABEL_5;
              }
              goto LABEL_46;
            case 0xB:
              if (*(double *)v9 != 0.0) {
                goto LABEL_5;
              }
              goto LABEL_46;
            case 0xE:
              if (!*v9 || !*(unsigned char *)*v9) {
                goto LABEL_46;
              }
              goto LABEL_5;
            default:
              goto LABEL_46;
          }
        }
        if (v10 != 1) {
          goto LABEL_22;
        }
        int v14 = *(_DWORD *)(v7 + 72 * v4 + 16);
        if (v14 != 16 && v14 != 14)
        {
          if (!*(_DWORD *)(a1 + v11)) {
            goto LABEL_46;
          }
          goto LABEL_5;
        }
      }
      if (!*v9 || *v9 == *(void *)(v7 + 72 * v4 + 40)) {
        goto LABEL_46;
      }
LABEL_5:
      uint64_t v6 = required_field_pack((uint64_t)v8, v9, (unsigned char *)(a2 + v5));
LABEL_6:
      v5 += (uint64_t)v6;
      ++v4;
      unsigned int v2 = *(_DWORD **)a1;
      if (v4 >= *(unsigned int *)(*(void *)a1 + 48)) {
        goto LABEL_194;
      }
    }
  }
  uint64_t v5 = 0;
LABEL_194:
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t v88 = 0;
    unint64_t v89 = 0;
    do
    {
      uint64_t v94 = *(void *)(a1 + 16);
      uint64_t v95 = (char *)(a2 + v5);
      unsigned int v96 = *(_DWORD *)(v94 + v88);
      if (v96 >> 29)
      {
        char v90 = (8 * v96) | 0x80;
        *uint64_t v95 = v90;
        v95[1] = (v96 >> 4) | 0x80;
        v95[2] = (v96 >> 11) | 0x80;
        v95[3] = (v96 >> 18) | 0x80;
        HIDWORD(v91) = v96 >> 29;
        LODWORD(v91) = 8 * v96;
        v95[4] = v91 >> 28;
        uint64_t v92 = 5;
      }
      else
      {
        LOBYTE(v97) = 8 * v96;
        if (v96 < 0x10)
        {
          uint64_t v99 = 0;
        }
        else
        {
          *uint64_t v95 = v97 | 0x80;
          unsigned int v97 = v96 >> 4;
          if (v96 < 0x800)
          {
            uint64_t v99 = 1;
          }
          else
          {
            v95[1] = v97 | 0x80;
            unsigned int v97 = v96 >> 11;
            if (v96 < 0x40000)
            {
              uint64_t v99 = 2;
            }
            else
            {
              v95[2] = v97 | 0x80;
              unsigned int v97 = v96 >> 18;
              unsigned int v98 = v96 >> 25;
              if (v98)
              {
                v95[3] = v97 | 0x80;
                LOBYTE(v97) = v98;
                uint64_t v99 = 4;
              }
              else
              {
                uint64_t v99 = 3;
              }
            }
          }
        }
        uint64_t v92 = v99 + 1;
        v95[v99] = v97;
        char v90 = *v95;
      }
      uint64_t v93 = v94 + v88;
      *uint64_t v95 = v90 | *(unsigned char *)(v94 + v88 + 4);
      memcpy(&v95[v92], *(const void **)(v94 + v88 + 16), *(void *)(v94 + v88 + 8));
      v5 += v92 + *(void *)(v93 + 8);
      ++v89;
      v88 += 24;
    }
    while (v89 < *(unsigned int *)(a1 + 8));
  }
  return v5;
}

const char *required_field_pack(uint64_t a1, unint64_t *a2, unsigned char *a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >> 29)
  {
    *a3 = (8 * v3) | 0x80;
    a3[1] = (v3 >> 4) | 0x80;
    a3[2] = (v3 >> 11) | 0x80;
    a3[3] = (v3 >> 18) | 0x80;
    HIDWORD(v7) = v3 >> 29;
    LODWORD(v7) = 8 * v3;
    a3[4] = v7 >> 28;
    uint64_t v8 = 5;
  }
  else
  {
    LOBYTE(v4) = 8 * v3;
    if (v3 < 0x10)
    {
      unsigned int v6 = 0;
    }
    else
    {
      *a3 = v4 | 0x80;
      unsigned int v4 = v3 >> 4;
      if (v3 < 0x800)
      {
        unsigned int v6 = 1;
      }
      else
      {
        a3[1] = v4 | 0x80;
        unsigned int v4 = v3 >> 11;
        if (v3 < 0x40000)
        {
          unsigned int v6 = 2;
        }
        else
        {
          a3[2] = v4 | 0x80;
          unsigned int v4 = v3 >> 18;
          unsigned int v5 = v3 >> 25;
          if (v3 >> 25)
          {
            a3[3] = v4 | 0x80;
            unsigned int v6 = 4;
            LOBYTE(v4) = v5;
          }
          else
          {
            unsigned int v6 = 3;
          }
        }
      }
    }
    uint64_t v8 = v6 + 1;
    a3[v6] = v4;
  }
  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
    case 0xD:
      unsigned int v10 = *(_DWORD *)a2;
      uint64_t v11 = &a3[v8];
      if ((*(_DWORD *)a2 & 0x80000000) != 0)
      {
        *uint64_t v11 = v10 | 0x80;
        int32x4_t v36 = vdupq_n_s32(v10);
        int32x4_t v37 = (int32x4_t)vshlq_u32((uint32x4_t)v36, (uint32x4_t)xmmword_18EBDE2C0);
        int16x8_t v38 = (int16x8_t)vshlq_s32(v36, (int32x4_t)xmmword_18EBDE2C0);
        v37.i32[3] = v38.i32[3];
        v38.i64[0] = *(void *)&vmovn_s32(v37) | 0x80008000800080;
        *(_DWORD *)(v11 + 1) = vmovn_s16(v38).u32[0];
        *(_DWORD *)(v11 + 5) = -1;
        v11[9] = 1;
        return (const char *)(v8 + 10);
      }
      if (v10 < 0x80)
      {
LABEL_29:
        unsigned int v13 = 0;
      }
      else
      {
LABEL_18:
        *uint64_t v11 = v10 | 0x80;
        unsigned int v12 = v10 >> 7;
        if (v10 < 0x4000)
        {
          unsigned int v13 = 1;
        }
        else
        {
          v11[1] = v12 | 0x80;
          unsigned int v12 = v10 >> 14;
          if (v10 < 0x200000)
          {
            unsigned int v13 = 2;
          }
          else
          {
            v11[2] = v12 | 0x80;
            unsigned int v12 = v10 >> 21;
            v10 >>= 28;
            if (v10)
            {
              v11[3] = v12 | 0x80;
              unsigned int v13 = 4;
              goto LABEL_82;
            }
            unsigned int v13 = 3;
          }
        }
        LOBYTE(v1errstart(20, 0) = v12;
      }
LABEL_82:
      v11[v13] = v10;
      return (const char *)(v13 + 1 + v8);
    case 1:
      uint64_t v11 = &a3[v8];
      unsigned int v10 = (2 * *(_DWORD *)a2) ^ (*(int *)a2 >> 31);
      if (v10 < 0x80) {
        goto LABEL_29;
      }
      goto LABEL_18;
    case 2:
    case 7:
    case 0xA:
      *a3 |= 5u;
      *(_DWORD *)&a3[v8] = *(_DWORD *)a2;
      return (const char *)(v8 + 4);
    case 3:
    case 8:
      unint64_t v14 = *a2;
      int v15 = &a3[v8];
      unint64_t v16 = HIDWORD(*a2);
      if (!v16) {
        goto LABEL_33;
      }
      *int v15 = v14 | 0x80;
      v15[1] = (v14 >> 7) | 0x80;
      v15[2] = (v14 >> 14) | 0x80;
      v15[3] = (v14 >> 21) | 0x80;
      LOBYTE(v14) = __PAIR64__(v16, v14) >> 28;
      if (v16 < 8) {
        goto LABEL_32;
      }
      v15[4] = v14 | 0x80;
      LODWORD(v14) = v16 >> 3;
      if (v16 < 0x400) {
        goto LABEL_66;
      }
      uint64_t v17 = 5;
      do
      {
        v15[v17++] = v14 | 0x80;
        unsigned int v18 = v14 >> 14;
        LODWORD(v14) = v14 >> 7;
      }
      while (v18);
      goto LABEL_91;
    case 4:
      int v15 = &a3[v8];
      unint64_t v14 = (2 * *a2) ^ ((uint64_t)*a2 >> 63);
      unint64_t v19 = HIDWORD(v14);
      if (HIDWORD(v14))
      {
        *int v15 = v14 | 0x80;
        v15[1] = (v14 >> 7) | 0x80;
        v15[2] = (v14 >> 14) | 0x80;
        v15[3] = (v14 >> 21) | 0x80;
        LOBYTE(v14) = v14 >> 28;
        if (v19 < 8)
        {
LABEL_32:
          unsigned int v20 = 5;
          LODWORD(v17) = 4;
          goto LABEL_92;
        }
        v15[4] = v14 | 0x80;
        LODWORD(v14) = v19 >> 3;
        if (v19 < 0x400)
        {
LABEL_66:
          LODWORD(v17) = 5;
        }
        else
        {
          uint64_t v17 = 5;
          do
          {
            v15[v17++] = v14 | 0x80;
            unsigned int v39 = v14 >> 14;
            LODWORD(v14) = v14 >> 7;
          }
          while (v39);
        }
      }
      else
      {
LABEL_33:
        if (v14 < 0x80)
        {
          LODWORD(v17) = 0;
        }
        else
        {
          *int v15 = v14 | 0x80;
          unsigned int v21 = v14 >> 7;
          if (v14 < 0x4000)
          {
            LODWORD(v17) = 1;
          }
          else
          {
            v15[1] = v21 | 0x80;
            unsigned int v21 = v14 >> 14;
            if (v14 < 0x200000)
            {
              LODWORD(v17) = 2;
            }
            else
            {
              v15[2] = v21 | 0x80;
              unsigned int v21 = v14 >> 21;
              LODWORD(v14) = v14 >> 28;
              if (v14)
              {
                v15[3] = v21 | 0x80;
                LODWORD(v17) = 4;
                goto LABEL_91;
              }
              LODWORD(v17) = 3;
            }
          }
          LOBYTE(v14) = v21;
        }
      }
LABEL_91:
      unsigned int v20 = v17 + 1;
LABEL_92:
      v15[v17] = v14;
      return (const char *)(v20 + v8);
    case 5:
    case 9:
    case 0xB:
      *a3 |= 1u;
      *(void *)&a3[v8] = *a2;
      return (const char *)(v8 + 8);
    case 6:
      unsigned int v10 = *(_DWORD *)a2;
      uint64_t v11 = &a3[v8];
      if (*(_DWORD *)a2 >= 0x80u) {
        goto LABEL_18;
      }
      goto LABEL_29;
    case 0xC:
      a3[v8] = *(_DWORD *)a2 != 0;
      return (const char *)(v8 + 1);
    case 0xE:
      *a3 |= 2u;
      unsigned int v22 = (const void *)*a2;
      uint64_t v23 = &a3[v8];
      if (!*a2) {
        goto LABEL_57;
      }
      size_t v24 = strlen((const char *)*a2);
      size_t v25 = v24;
      if (v24 < 0x80)
      {
        unsigned int v27 = 0;
        LOBYTE(v26) = v24;
      }
      else
      {
        *uint64_t v23 = v24 | 0x80;
        unsigned int v26 = v24 >> 7;
        if (v24 < 0x4000)
        {
          unsigned int v27 = 1;
        }
        else
        {
          v23[1] = v26 | 0x80;
          unsigned int v26 = v24 >> 14;
          if (v24 < 0x200000)
          {
            unsigned int v27 = 2;
          }
          else
          {
            v23[2] = v26 | 0x80;
            unsigned int v26 = v24 >> 21;
            if (v24 >> 28)
            {
              v23[3] = v26 | 0x80;
              unsigned int v27 = 4;
              unsigned int v26 = v24 >> 28;
            }
            else
            {
              unsigned int v27 = 3;
            }
          }
        }
      }
      uint64_t v45 = v27 + 1;
      v23[v27] = v26;
      memcpy(&v23[v45], v22, v24);
      return (const char *)(v25 + v45 + v8);
    case 0xF:
      *a3 |= 2u;
      unsigned int v28 = &a3[v8];
      uint64_t v29 = (const char *)*a2;
      if (*a2 < 0x80)
      {
        unsigned int v31 = 0;
        char v30 = (const char *)*a2;
      }
      else
      {
        *unsigned int v28 = v29 | 0x80;
        LODWORD(v3errstart(20, 0) = v29 >> 7;
        if (v29 < 0x4000)
        {
          unsigned int v31 = 1;
        }
        else
        {
          v28[1] = v30 | 0x80;
          LODWORD(v3errstart(20, 0) = v29 >> 14;
          if (v29 < 0x200000)
          {
            unsigned int v31 = 2;
          }
          else
          {
            v28[2] = v30 | 0x80;
            LODWORD(v3errstart(20, 0) = v29 >> 21;
            if (v29 >> 28)
            {
              v28[3] = v30 | 0x80;
              unsigned int v31 = 4;
              LODWORD(v3errstart(20, 0) = v29 >> 28;
            }
            else
            {
              unsigned int v31 = 3;
            }
          }
        }
      }
      uint64_t v44 = v31 + 1;
      v28[v31] = (_BYTE)v30;
      memcpy(&v28[v44], (const void *)a2[1], (size_t)v29);
      return &v29[v44 + v8];
    case 0x10:
      *a3 |= 2u;
      uint64_t v23 = &a3[v8];
      if (*a2)
      {
        size_t v32 = protobuf_c_message_pack(*a2, v23 + 1);
        size_t v33 = v32;
        if (v32 >= 0x80)
        {
          uint64_t v40 = 2;
          uint64_t v41 = 3;
          unsigned int v42 = v32 >> 28;
          uint64_t v43 = 4;
          if (v32 >> 28) {
            uint64_t v43 = 5;
          }
          if (v32 >= 0x200000) {
            uint64_t v41 = v43;
          }
          if (v32 >= 0x4000) {
            uint64_t v40 = v41;
          }
          memmove(&v23[v40], v23 + 1, v32);
          *uint64_t v23 = v33 | 0x80;
          unsigned int v35 = v33 >> 7;
          if (v33 < 0x4000)
          {
            unsigned int v34 = 1;
          }
          else
          {
            v23[1] = v35 | 0x80;
            unsigned int v35 = v33 >> 14;
            if (v33 < 0x200000)
            {
              unsigned int v34 = 2;
            }
            else
            {
              v23[2] = v35 | 0x80;
              unsigned int v35 = v33 >> 21;
              if (v42)
              {
                v23[3] = v35 | 0x80;
                unsigned int v34 = 4;
                unsigned int v35 = v33 >> 28;
              }
              else
              {
                unsigned int v34 = 3;
              }
            }
          }
        }
        else
        {
          unsigned int v34 = 0;
          LOBYTE(v35) = v32;
        }
        v23[v34] = v35;
        return (const char *)(v33 + v34 + 1 + v8);
      }
      else
      {
LABEL_57:
        *uint64_t v23 = 0;
        return (const char *)(v8 + 1);
      }
    default:
      required_field_pack_cold_1();
  }
}

uint64_t required_field_pack_to_buffer(uint64_t a1, uint64_t a2, void (**a3)(void, uint64_t, char *))
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v5 >> 29)
  {
    char v50 = (8 * v5) | 0x80;
    char v51 = (v5 >> 4) | 0x80;
    char v52 = (v5 >> 11) | 0x80;
    char v53 = (v5 >> 18) | 0x80;
    HIDWORD(v9) = v5 >> 29;
    LODWORD(v9) = 8 * v5;
    char v54 = v9 >> 28;
    uint64_t v10 = 5;
  }
  else
  {
    LOBYTE(v6) = 8 * v5;
    if (v5 < 0x10)
    {
      unsigned int v8 = 0;
    }
    else
    {
      char v50 = v6 | 0x80;
      unsigned int v6 = v5 >> 4;
      if (v5 < 0x800)
      {
        unsigned int v8 = 1;
      }
      else
      {
        char v51 = v6 | 0x80;
        unsigned int v6 = v5 >> 11;
        if (v5 < 0x40000)
        {
          unsigned int v8 = 2;
        }
        else
        {
          char v52 = v6 | 0x80;
          unsigned int v6 = v5 >> 18;
          unsigned int v7 = v5 >> 25;
          if (v5 >> 25)
          {
            char v53 = v6 | 0x80;
            unsigned int v8 = 4;
            LOBYTE(v6) = v7;
          }
          else
          {
            unsigned int v8 = 3;
          }
        }
      }
    }
    uint64_t v10 = v8 + 1;
    *(&v50 + v8) = v6;
  }
  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
    case 0xD:
      unsigned int v12 = *(_DWORD *)a2;
      unsigned int v13 = &v50 + v10;
      if ((*(_DWORD *)a2 & 0x80000000) != 0)
      {
        *unsigned int v13 = v12 | 0x80;
        int32x4_t v43 = vdupq_n_s32(v12);
        int32x4_t v44 = (int32x4_t)vshlq_u32((uint32x4_t)v43, (uint32x4_t)xmmword_18EBDE2C0);
        int16x8_t v45 = (int16x8_t)vshlq_s32(v43, (int32x4_t)xmmword_18EBDE2C0);
        v44.i32[3] = v45.i32[3];
        v45.i64[0] = *(void *)&vmovn_s32(v44) | 0x80008000800080;
        *(_DWORD *)(v13 + 1) = vmovn_s16(v45).u32[0];
        *(_DWORD *)(v13 + 5) = -1;
        v13[9] = 1;
        uint64_t v46 = 10;
        goto LABEL_90;
      }
      if (v12 < 0x80)
      {
        unsigned int v15 = 0;
      }
      else
      {
        *unsigned int v13 = v12 | 0x80;
        unsigned int v14 = v12 >> 7;
        if (v12 < 0x4000)
        {
          unsigned int v15 = 1;
        }
        else
        {
          v13[1] = v14 | 0x80;
          unsigned int v14 = v12 >> 14;
          if (v12 < 0x200000)
          {
            unsigned int v15 = 2;
          }
          else
          {
            v13[2] = v14 | 0x80;
            unsigned int v14 = v12 >> 21;
            v12 >>= 28;
            if (v12)
            {
              v13[3] = v14 | 0x80;
              unsigned int v15 = 4;
              goto LABEL_89;
            }
            unsigned int v15 = 3;
          }
        }
        LOBYTE(v12) = v14;
      }
LABEL_89:
      uint64_t v46 = v15 + 1;
      v13[v15] = v12;
LABEL_90:
      uint64_t v11 = v46 + v10;
      goto LABEL_91;
    case 1:
      unsigned int v21 = &v50 + v10;
      unsigned int v22 = (2 * *(_DWORD *)a2) ^ (*(int *)a2 >> 31);
      if (v22 >= 0x80) {
        goto LABEL_29;
      }
      goto LABEL_42;
    case 2:
    case 7:
    case 0xA:
      v50 |= 5u;
      *(_DWORD *)(&v50 + v1errstart(20, 0) = *(_DWORD *)a2;
      uint64_t v11 = v10 + 4;
      goto LABEL_91;
    case 3:
    case 8:
      unint64_t v16 = *(void *)a2;
      uint64_t v17 = &v50 + v10;
      uint64_t v18 = HIDWORD(*(void *)a2);
      if (!v18) {
        goto LABEL_36;
      }
      *uint64_t v17 = v16 | 0x80;
      v17[1] = (v16 >> 7) | 0x80;
      v17[2] = (v16 >> 14) | 0x80;
      v17[3] = (v16 >> 21) | 0x80;
      LOBYTE(v16) = __PAIR64__(v18, v16) >> 28;
      if (v18 < 8) {
        goto LABEL_35;
      }
      v17[4] = v16 | 0x80;
      LODWORD(v16) = v18 >> 3;
      if (v18 < 0x400) {
        goto LABEL_73;
      }
      uint64_t v19 = 5;
      do
      {
        v17[v19++] = v16 | 0x80;
        unsigned int v20 = v16 >> 14;
        LODWORD(v16) = v16 >> 7;
      }
      while (v20);
      goto LABEL_96;
    case 4:
      uint64_t v17 = &v50 + v10;
      unint64_t v16 = (2 * *(void *)a2) ^ (*(uint64_t *)a2 >> 63);
      unint64_t v25 = HIDWORD(v16);
      if (HIDWORD(v16))
      {
        *uint64_t v17 = v16 | 0x80;
        v17[1] = (v16 >> 7) | 0x80;
        v17[2] = (v16 >> 14) | 0x80;
        v17[3] = (v16 >> 21) | 0x80;
        LOBYTE(v16) = v16 >> 28;
        if (v25 < 8)
        {
LABEL_35:
          unsigned int v26 = 5;
          LODWORD(v19) = 4;
          goto LABEL_97;
        }
        v17[4] = v16 | 0x80;
        LODWORD(v16) = v25 >> 3;
        if (v25 < 0x400)
        {
LABEL_73:
          LODWORD(v19) = 5;
        }
        else
        {
          uint64_t v19 = 5;
          do
          {
            v17[v19++] = v16 | 0x80;
            unsigned int v47 = v16 >> 14;
            LODWORD(v16) = v16 >> 7;
          }
          while (v47);
        }
      }
      else
      {
LABEL_36:
        if (v16 < 0x80)
        {
          LODWORD(v19) = 0;
        }
        else
        {
          *uint64_t v17 = v16 | 0x80;
          unsigned int v27 = v16 >> 7;
          if (v16 < 0x4000)
          {
            LODWORD(v19) = 1;
          }
          else
          {
            v17[1] = v27 | 0x80;
            unsigned int v27 = v16 >> 14;
            if (v16 < 0x200000)
            {
              LODWORD(v19) = 2;
            }
            else
            {
              v17[2] = v27 | 0x80;
              unsigned int v27 = v16 >> 21;
              LODWORD(v16) = v16 >> 28;
              if (v16)
              {
                v17[3] = v27 | 0x80;
                LODWORD(v19) = 4;
                goto LABEL_96;
              }
              LODWORD(v19) = 3;
            }
          }
          LOBYTE(v16) = v27;
        }
      }
LABEL_96:
      unsigned int v26 = v19 + 1;
LABEL_97:
      v17[v19] = v16;
      uint64_t v11 = v10 + v26;
      (*a3)(a3, v11, &v50);
      return v11;
    case 5:
    case 9:
    case 0xB:
      v50 |= 1u;
      *(void *)(&v50 + v1errstart(20, 0) = *(void *)a2;
      uint64_t v11 = v10 + 8;
      goto LABEL_91;
    case 6:
      unsigned int v22 = *(_DWORD *)a2;
      unsigned int v21 = &v50 + v10;
      if (*(_DWORD *)a2 >= 0x80u)
      {
LABEL_29:
        *unsigned int v21 = v22 | 0x80;
        unsigned int v23 = v22 >> 7;
        if (v22 < 0x4000)
        {
          unsigned int v24 = 1;
        }
        else
        {
          v21[1] = v23 | 0x80;
          unsigned int v23 = v22 >> 14;
          if (v22 < 0x200000)
          {
            unsigned int v24 = 2;
          }
          else
          {
            v21[2] = v23 | 0x80;
            unsigned int v23 = v22 >> 21;
            v22 >>= 28;
            if (v22)
            {
              v21[3] = v23 | 0x80;
              unsigned int v24 = 4;
              goto LABEL_85;
            }
            unsigned int v24 = 3;
          }
        }
        LOBYTE(v22) = v23;
      }
      else
      {
LABEL_42:
        unsigned int v24 = 0;
      }
LABEL_85:
      v21[v24] = v22;
      uint64_t v11 = v10 + v24 + 1;
      goto LABEL_91;
    case 0xC:
      *(&v50 + v1errstart(20, 0) = *(_DWORD *)a2 != 0;
      uint64_t v11 = v10 + 1;
      goto LABEL_91;
    case 0xE:
      unsigned int v28 = *(const char **)a2;
      if (*(void *)a2)
      {
        size_t v29 = strlen(v28);
        size_t v30 = v29;
        v50 |= 2u;
        LOBYTE(v31) = v29;
        if (v29 < 0x80)
        {
          unsigned int v34 = 0;
        }
        else
        {
          size_t v32 = &v50 + v10;
          *(&v50 + v1errstart(20, 0) = v29 | 0x80;
          unsigned int v33 = v29 >> 7;
          if (v29 < 0x4000)
          {
            unsigned int v34 = 1;
          }
          else
          {
            v32[1] = v33 | 0x80;
            unsigned int v33 = v29 >> 14;
            if (v29 < 0x200000)
            {
              unsigned int v34 = 2;
            }
            else
            {
              v32[2] = v33 | 0x80;
              unsigned int v33 = v29 >> 21;
              unsigned int v31 = v29 >> 28;
              if (v29 >> 28)
              {
                v32[3] = v33 | 0x80;
                unsigned int v34 = 4;
                goto LABEL_103;
              }
              unsigned int v34 = 3;
            }
          }
          LOBYTE(v31) = v33;
        }
      }
      else
      {
        size_t v30 = 0;
        LOBYTE(v31) = 0;
        unsigned int v34 = 0;
        v50 |= 2u;
      }
LABEL_103:
      *(&v50 + v10 + v34) = v31;
      uint64_t v49 = v10 + v34 + 1;
      (*a3)(a3, v49, &v50);
      (*a3)(a3, v30, (char *)v28);
      return v49 + v30;
    case 0xF:
      size_t v30 = *(void *)a2;
      v50 |= 2u;
      unsigned int v35 = &v50 + v10;
      if (v30 < 0x80)
      {
        unsigned int v37 = 0;
        LOBYTE(v36) = v30;
      }
      else
      {
        *unsigned int v35 = v30 | 0x80;
        unsigned int v36 = v30 >> 7;
        if (v30 < 0x4000)
        {
          unsigned int v37 = 1;
        }
        else
        {
          v35[1] = v36 | 0x80;
          unsigned int v36 = v30 >> 14;
          if (v30 < 0x200000)
          {
            unsigned int v37 = 2;
          }
          else
          {
            v35[2] = v36 | 0x80;
            unsigned int v36 = v30 >> 21;
            if (v30 >> 28)
            {
              v35[3] = v36 | 0x80;
              unsigned int v37 = 4;
              unsigned int v36 = v30 >> 28;
            }
            else
            {
              unsigned int v37 = 3;
            }
          }
        }
      }
      v35[v37] = v36;
      uint64_t v49 = v10 + v37 + 1;
      (*a3)(a3, v49, &v50);
      (*a3)(a3, v30, *(char **)(a2 + 8));
      return v49 + v30;
    case 0x10:
      uint64_t v38 = *(void *)a2;
      v50 |= 2u;
      if (v38)
      {
        uint64_t packed_size = protobuf_c_message_get_packed_size(v38);
        size_t v30 = packed_size;
        uint64_t v40 = &v50 + v10;
        if (packed_size < 0x80)
        {
          unsigned int v42 = 0;
          LOBYTE(v41) = packed_size;
        }
        else
        {
          *uint64_t v40 = packed_size | 0x80;
          unsigned int v41 = packed_size >> 7;
          if (packed_size < 0x4000)
          {
            unsigned int v42 = 1;
          }
          else
          {
            v40[1] = v41 | 0x80;
            unsigned int v41 = packed_size >> 14;
            if (packed_size < 0x200000)
            {
              unsigned int v42 = 2;
            }
            else
            {
              v40[2] = v41 | 0x80;
              unsigned int v41 = packed_size >> 21;
              if (packed_size >> 28)
              {
                v40[3] = v41 | 0x80;
                unsigned int v42 = 4;
                unsigned int v41 = packed_size >> 28;
              }
              else
              {
                unsigned int v42 = 3;
              }
            }
          }
        }
        v40[v42] = v41;
        uint64_t v49 = v10 + v42 + 1;
        (*a3)(a3, v49, &v50);
        protobuf_c_message_pack_to_buffer(v38, a3);
        return v49 + v30;
      }
      else
      {
        *(&v50 + v1errstart(20, 0) = 0;
        uint64_t v11 = v10 + 1;
LABEL_91:
        (*a3)(a3, v11, &v50);
      }
      return v11;
    default:
      required_field_pack_to_buffer_cold_1();
  }
}

uint64_t protobuf_c_message_unpack(uint64_t a1, uint64_t (**a2)(int, size_t size), unint64_t a3, unsigned __int8 *a4)
{
  uint64_t v413 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 56);
  long long v411 = 0u;
  long long v410 = 0u;
  long long v409 = 0u;
  long long v408 = 0u;
  long long v407 = 0u;
  long long v406 = 0u;
  long long v404 = 0u;
  long long v405 = 0u;
  long long v402 = 0u;
  long long v403 = 0u;
  long long v401 = 0u;
  if (*(_DWORD *)a1 != 682290937) {
    protobuf_c_message_unpack_cold_8();
  }
  if (a2) {
    unsigned int v8 = a2;
  }
  else {
    unsigned int v8 = &protobuf_c__allocator;
  }
  uint64_t v9 = (*v8)((int)v8[2], *(void *)(a1 + 40));
  if (!v9) {
    return v9;
  }
  v400 = &v412;
  unsigned int v10 = *(_DWORD *)(a1 + 48) + 7;
  if (v10 >= 0x88)
  {
    uint64_t v11 = (char *)(*v8)((int)v8[2], v10 >> 3);
    if (!v11) {
      goto LABEL_398;
    }
  }
  else
  {
    uint64_t v11 = &v399;
  }
  uint64_t v398 = (uint64_t)v8;
  bzero(v11, v10 >> 3);
  unsigned int v12 = *(void (**)(uint64_t))(a1 + 88);
  unsigned int v388 = v10;
  if (v12)
  {
    v12(v9);
    uint64_t v13 = v4;
  }
  else
  {
    bzero((void *)v9, *(void *)(a1 + 40));
    *(void *)uint64_t v9 = a1;
    uint64_t v13 = v4;
    if (*(_DWORD *)(a1 + 48))
    {
      uint64_t v136 = 0;
      unint64_t v137 = 0;
      do
      {
        uint64_t v138 = *(void *)(a1 + 56);
        uint64_t v139 = *(_DWORD **)(v138 + v136 + 40);
        if (v139 && *(_DWORD *)(v138 + v136 + 12) != 2)
        {
          uint64_t v140 = v138 + v136;
          int v141 = *(_DWORD *)(v140 + 16);
          uint64_t v142 = (_DWORD *)(v9 + *(unsigned int *)(v140 + 24));
          switch(v141)
          {
            case 0:
            case 1:
            case 2:
            case 6:
            case 7:
            case 10:
            case 12:
            case 13:
              *uint64_t v142 = *v139;
              break;
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
            case 11:
              uint64_t v139 = *(_DWORD **)v139;
              goto LABEL_151;
            case 14:
            case 16:
LABEL_151:
              *(void *)uint64_t v142 = v139;
              break;
            case 15:
              *(_OWORD *)uint64_t v142 = *(_OWORD *)v139;
              break;
            default:
              break;
          }
        }
        ++v137;
        v136 += 72;
      }
      while (v137 < *(unsigned int *)(a1 + 48));
    }
  }
  v397 = (void *)v9;
  v389 = v11;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  uint64_t v16 = 0;
  unsigned int v387 = 0;
  v17.i64[0] = -1;
  v17.i64[1] = -1;
  while (a3)
  {
    if (a3 >= 5) {
      unint64_t v19 = 5;
    }
    else {
      unint64_t v19 = a3;
    }
    unsigned int v20 = *a4;
    if (v20 < 8) {
      goto LABEL_134;
    }
    int v21 = (v20 >> 3) & 0xF;
    if ((v20 & 0x80) != 0)
    {
      if (v19 < 2) {
        goto LABEL_134;
      }
      int v23 = a4[1];
      if ((char)a4[1] < 0)
      {
        if (v19 == 2) {
          goto LABEL_134;
        }
        int v24 = (v20 >> 3) & 0xF | (16 * (v23 & 0x7F));
        int v25 = a4[2];
        if ((char)a4[2] < 0)
        {
          if (v19 == 3) {
            goto LABEL_134;
          }
          unsigned int v26 = v24 & 0xFFFC07FF | ((v25 & 0x7F) << 11);
          int v27 = a4[3];
          if ((char)a4[3] < 0)
          {
            if (v19 == 4) {
              goto LABEL_134;
            }
            int v28 = (char)a4[4];
            if (v28 < 0) {
              goto LABEL_134;
            }
            uint64_t v22 = 5;
            int v21 = (v28 << 25) | v26 & 0xFE03FFFF | ((v27 & 0x7F) << 18);
            if (!v13) {
              goto LABEL_42;
            }
          }
          else
          {
            uint64_t v22 = 4;
            int v21 = (v27 << 18) | v26;
            if (!v13) {
              goto LABEL_42;
            }
          }
        }
        else
        {
          uint64_t v22 = 3;
          int v21 = (v25 << 11) | v24;
          if (!v13) {
            goto LABEL_42;
          }
        }
      }
      else
      {
        uint64_t v22 = 2;
        v21 |= 16 * v23;
        if (!v13) {
          goto LABEL_42;
        }
      }
    }
    else
    {
      uint64_t v22 = 1;
      if (!v13) {
        goto LABEL_42;
      }
    }
    if (*(_DWORD *)(v13 + 8) == v21)
    {
      uint64_t v29 = v13;
      if (!*(_DWORD *)(v13 + 12)) {
        goto LABEL_56;
      }
      goto LABEL_40;
    }
LABEL_42:
    unsigned int v32 = *(_DWORD *)(a1 + 72);
    if (!v32) {
      goto LABEL_59;
    }
    uint64_t v33 = *(void *)(a1 + 80);
    if (v32 != 1)
    {
      unsigned int v34 = 0;
      while (1)
      {
        while (1)
        {
          unsigned int v35 = v32 >> 1;
          uint64_t v36 = (v32 >> 1) + v34;
          int v37 = *(_DWORD *)(v33 + 8 * v36);
          if (v21 >= v37) {
            break;
          }
          v32 >>= 1;
          if (v35 <= 1) {
            goto LABEL_50;
          }
        }
        int v38 = *(_DWORD *)(v33 + 8 * v36 + 4);
        if (*(_DWORD *)(v33 + 8 * (v36 + 1) + 4) + v37 - v38 > v21) {
          break;
        }
        v32 += v34 + ~v36;
        unsigned int v34 = v36 + 1;
        if (v32 <= 1)
        {
LABEL_50:
          if (v32) {
            goto LABEL_51;
          }
          goto LABEL_59;
        }
      }
      unsigned int v42 = v21 - v37 + v38;
      if ((v42 & 0x80000000) != 0) {
        goto LABEL_59;
      }
LABEL_54:
      uint64_t v29 = *(void *)(a1 + 56) + 72 * v42;
      if (!v29)
      {
        uint64_t v13 = 0;
        char v30 = 1;
        unsigned int v387 = v42;
        unsigned int v31 = v20 & 7;
        if (v31 > 5) {
          goto LABEL_134;
        }
        goto LABEL_60;
      }
      unsigned int v387 = v42;
      if (!*(_DWORD *)(v29 + 12))
      {
LABEL_56:
        char v30 = 0;
        v389[(unint64_t)v387 >> 3] |= 1 << (v387 & 7);
        uint64_t v13 = v29;
        unsigned int v31 = v20 & 7;
        if (v31 > 5) {
          goto LABEL_134;
        }
        goto LABEL_60;
      }
LABEL_40:
      char v30 = 0;
      uint64_t v13 = v29;
      unsigned int v31 = v20 & 7;
      if (v31 > 5) {
        goto LABEL_134;
      }
      goto LABEL_60;
    }
    unsigned int v34 = 0;
LABEL_51:
    unsigned int v39 = (int *)(v33 + 8 * v34);
    int v40 = *v39;
    if (*v39 <= v21)
    {
      int v41 = v39[1];
      if (v40 - v41 + *(_DWORD *)(v33 + 8 * (v34 + 1) + 4) > v21)
      {
        unsigned int v42 = v41 + v21 - v40;
        if ((v42 & 0x80000000) == 0) {
          goto LABEL_54;
        }
      }
    }
LABEL_59:
    uint64_t v29 = 0;
    ++v16;
    char v30 = 1;
    unsigned int v31 = v20 & 7;
LABEL_60:
    int32x4_t v43 = &a4[v22];
    unint64_t v44 = a3 - v22;
    switch(v31)
    {
      case 0u:
        int v45 = 10;
        if (v44 < 0xA) {
          int v45 = v44;
        }
        if (v45)
        {
          uint64_t v46 = 0;
          while ((char)v43[v46] < 0)
          {
            if (v45 == ++v46) {
              goto LABEL_134;
            }
          }
        }
        else
        {
          LODWORD(v46) = 0;
        }
        if (v46 == v45) {
          goto LABEL_134;
        }
        uint64_t v47 = 0;
        uint64_t v48 = (v46 + 1);
        if (1 << (v14 + 4) != v15) {
          goto LABEL_75;
        }
        goto LABEL_70;
      case 1u:
        if (v44 < 8) {
          goto LABEL_134;
        }
        uint64_t v47 = 0;
        uint64_t v48 = 8;
        if (1 << (v14 + 4) == v15) {
          goto LABEL_70;
        }
        goto LABEL_75;
      case 2u:
        if (v44 >= 5) {
          uint64_t v61 = 5;
        }
        else {
          uint64_t v61 = v44;
        }
        if (!v61) {
          goto LABEL_134;
        }
        unint64_t v62 = *v43 & 0x7F;
        if ((*v43 & 0x80) != 0)
        {
          if (v61 == 1) {
            goto LABEL_134;
          }
          int v64 = (char)v43[1];
          v62 |= (unint64_t)(v64 & 0x7F) << 7;
          if (v64 < 0)
          {
            if (v61 == 2) {
              goto LABEL_134;
            }
            int v65 = (char)v43[2];
            v62 |= (unint64_t)(v65 & 0x7F) << 14;
            if (v65 < 0)
            {
              if (v61 == 3) {
                goto LABEL_134;
              }
              int v66 = (char)v43[3];
              v62 |= (unint64_t)(v66 & 0x7F) << 21;
              if (v66 < 0)
              {
                if (v61 == 4) {
                  goto LABEL_134;
                }
                int v68 = (char)v43[4];
                if (v68 < 0) {
                  goto LABEL_134;
                }
                v62 |= (unint64_t)(v68 & 0x7F) << 28;
                uint64_t v63 = 4;
              }
              else
              {
                uint64_t v63 = 3;
              }
            }
            else
            {
              uint64_t v63 = 2;
            }
          }
          else
          {
            uint64_t v63 = 1;
          }
        }
        else
        {
          uint64_t v63 = 0;
        }
        if (v63 == v61 || v62 >> 31 || v62 + v63 >= v44) {
          goto LABEL_134;
        }
        uint64_t v47 = v63 + 1;
        uint64_t v48 = v62 + v63 + 1;
        if (1 << (v14 + 4) == v15)
        {
LABEL_70:
          if (v14 == 22) {
            goto LABEL_134;
          }
          char v390 = v30;
          uint64_t v391 = v47;
          uint64_t v392 = v29;
          uint64_t v394 = v48;
          uint64_t v49 = v22;
          char v50 = a4;
          uint64_t v51 = v16;
          uint64_t v52 = v13;
          char v53 = v14++;
          uint64_t v54 = (*(uint64_t (**)(void, uint64_t))v398)(*(void *)(v398 + 16), 32 << (v53 + 5));
          (&v400)[v14] = (char *)v54;
          unsigned int v15 = 0;
          if (!v54)
          {
            uint64_t v13 = v52;
            uint64_t v16 = v51;
LABEL_134:
            unsigned int v8 = (uint64_t (**)(int, size_t))v398;
            (*(void (**)(void, void *, uint64_t, uint64_t, uint64_t, uint64_t, char **))(v398 + 8))(*(void *)(v398 + 16), v397, v13, v16, 5, 1, &v400);
            if (v14)
            {
              for (unsigned int i = 1; i <= v14; ++i)
              {
                if ((&v400)[i]) {
                  (*(void (**)(void))(v398 + 8))(*(void *)(v398 + 16));
                }
              }
            }
            uint64_t v9 = 0;
            goto LABEL_140;
          }
          uint64_t v13 = v52;
          uint64_t v16 = v51;
          v17.i64[0] = -1;
          v17.i64[1] = -1;
          a4 = v50;
          uint64_t v22 = v49;
          uint64_t v29 = v392;
          uint64_t v48 = v394;
          uint64_t v47 = v391;
          char v30 = v390;
        }
        else
        {
LABEL_75:
          uint64_t v54 = (uint64_t)(&v400)[v14];
        }
        uint64_t v55 = v54 + 32 * v15;
        *(_DWORD *)uint64_t v55 = v21;
        *(unsigned char *)(v55 + 4) = v31;
        *(unsigned char *)(v55 + 5) = v47;
        *(_WORD *)(v55 + 6) = 0;
        *(void *)(v55 + 8) = v29;
        *(void *)(v55 + 16) = v48;
        *(void *)(v55 + 24) = v43;
        if ((v30 & 1) != 0 || *(_DWORD *)(v29 + 12) != 2) {
          goto LABEL_14;
        }
        uint64_t v56 = *(unsigned int *)(v29 + 20);
        if (v31 == 2
          && ((int v57 = *(_DWORD *)(v29 + 16), (*(unsigned char *)(v29 + 48) & 1) != 0) || (v57 - 14) >= 3))
        {
          unint64_t v18 = v48 - v47;
          switch(v57)
          {
            case 0:
            case 1:
            case 3:
            case 4:
            case 6:
            case 8:
            case 13:
              if (!v18) {
                break;
              }
              unint64_t v58 = &v43[v47];
              if (v18 < 8)
              {
                uint64_t v59 = 0;
                unint64_t v60 = v48 - v47;
                goto LABEL_131;
              }
              if (v18 >= 0x20)
              {
                int64x2_t v69 = 0uLL;
                unint64_t v67 = v18 & 0xFFFFFFFFFFFFFFE0;
                int64x2_t v70 = 0uLL;
                int64x2_t v71 = 0uLL;
                int64x2_t v72 = 0uLL;
                unsigned int v73 = (int8x16_t *)&a4[v22 + 16 + v47];
                int64x2_t v74 = 0uLL;
                unint64_t v75 = v18 & 0xFFFFFFFFFFFFFFE0;
                int64x2_t v76 = 0uLL;
                int64x2_t v77 = 0uLL;
                int64x2_t v78 = 0uLL;
                int64x2_t v79 = 0uLL;
                int64x2_t v80 = 0uLL;
                int64x2_t v81 = 0uLL;
                int64x2_t v82 = 0uLL;
                int64x2_t v83 = 0uLL;
                int64x2_t v84 = 0uLL;
                int64x2_t v85 = 0uLL;
                int64x2_t v86 = 0uLL;
                do
                {
                  uint8x16_t v87 = (uint8x16_t)vcgtq_s8(v73[-1], v17);
                  uint16x8_t v88 = vmovl_u8(*(uint8x8_t *)v87.i8);
                  uint32x4_t v89 = vmovl_u16(*(uint16x4_t *)v88.i8);
                  v90.i64[0] = v89.u32[0];
                  v90.i64[1] = v89.u32[1];
                  int8x16_t v91 = (int8x16_t)vdupq_n_s64(1uLL);
                  int64x2_t v395 = (int64x2_t)vandq_s8(v90, v91);
                  v90.i64[0] = v89.u32[2];
                  v90.i64[1] = v89.u32[3];
                  int64x2_t v92 = (int64x2_t)vandq_s8(v90, v91);
                  uint32x4_t v93 = vmovl_high_u16(v88);
                  v90.i64[0] = v93.u32[0];
                  v90.i64[1] = v93.u32[1];
                  int64x2_t v94 = (int64x2_t)vandq_s8(v90, v91);
                  uint16x8_t v95 = vmovl_high_u8(v87);
                  uint32x4_t v96 = vmovl_u16(*(uint16x4_t *)v95.i8);
                  v90.i64[0] = v96.u32[0];
                  v90.i64[1] = v96.u32[1];
                  int64x2_t v97 = (int64x2_t)vandq_s8(v90, v91);
                  v90.i64[0] = v93.u32[2];
                  v90.i64[1] = v93.u32[3];
                  int64x2_t v98 = (int64x2_t)vandq_s8(v90, v91);
                  v90.i64[0] = v96.u32[2];
                  v90.i64[1] = v96.u32[3];
                  int64x2_t v99 = (int64x2_t)vandq_s8(v90, v91);
                  uint32x4_t v100 = vmovl_high_u16(v95);
                  v90.i64[0] = v100.u32[0];
                  v90.i64[1] = v100.u32[1];
                  int64x2_t v101 = (int64x2_t)vandq_s8(v90, v91);
                  v90.i64[0] = v100.u32[2];
                  v90.i64[1] = v100.u32[3];
                  int64x2_t v102 = (int64x2_t)vandq_s8(v90, v91);
                  uint8x16_t v103 = (uint8x16_t)vcgtq_s8(*v73, v17);
                  uint16x8_t v104 = vmovl_u8(*(uint8x8_t *)v103.i8);
                  uint32x4_t v105 = vmovl_u16(*(uint16x4_t *)v104.i8);
                  v90.i64[0] = v105.u32[0];
                  v90.i64[1] = v105.u32[1];
                  int64x2_t v106 = (int64x2_t)vandq_s8(v90, v91);
                  v90.i64[0] = v105.u32[2];
                  v90.i64[1] = v105.u32[3];
                  int64x2_t v107 = (int64x2_t)vandq_s8(v90, v91);
                  uint32x4_t v108 = vmovl_high_u16(v104);
                  v90.i64[0] = v108.u32[0];
                  v90.i64[1] = v108.u32[1];
                  int64x2_t v109 = (int64x2_t)vandq_s8(v90, v91);
                  uint16x8_t v110 = vmovl_high_u8(v103);
                  uint32x4_t v111 = vmovl_u16(*(uint16x4_t *)v110.i8);
                  v90.i64[0] = v111.u32[0];
                  v90.i64[1] = v111.u32[1];
                  int64x2_t v112 = (int64x2_t)vandq_s8(v90, v91);
                  v90.i64[0] = v108.u32[2];
                  v90.i64[1] = v108.u32[3];
                  int64x2_t v113 = (int64x2_t)vandq_s8(v90, v91);
                  v90.i64[0] = v111.u32[2];
                  v90.i64[1] = v111.u32[3];
                  int64x2_t v114 = (int64x2_t)vandq_s8(v90, v91);
                  uint32x4_t v115 = vmovl_high_u16(v110);
                  v90.i64[0] = v115.u32[0];
                  v90.i64[1] = v115.u32[1];
                  int64x2_t v116 = (int64x2_t)vandq_s8(v90, v91);
                  v90.i64[0] = v115.u32[2];
                  v90.i64[1] = v115.u32[3];
                  int64x2_t v78 = vaddq_s64(v78, v102);
                  int64x2_t v77 = vaddq_s64(v77, v101);
                  int64x2_t v76 = vaddq_s64(v76, v99);
                  int64x2_t v72 = vaddq_s64(v72, v98);
                  int64x2_t v74 = vaddq_s64(v74, v97);
                  int64x2_t v71 = vaddq_s64(v71, v94);
                  int64x2_t v70 = vaddq_s64(v70, v92);
                  int64x2_t v69 = vaddq_s64(v69, v395);
                  int64x2_t v86 = vaddq_s64(v86, (int64x2_t)vandq_s8(v90, v91));
                  int64x2_t v85 = vaddq_s64(v85, v116);
                  int64x2_t v84 = vaddq_s64(v84, v114);
                  int64x2_t v82 = vaddq_s64(v82, v113);
                  v17.i64[0] = -1;
                  v17.i64[1] = -1;
                  int64x2_t v83 = vaddq_s64(v83, v112);
                  int64x2_t v81 = vaddq_s64(v81, v109);
                  int64x2_t v80 = vaddq_s64(v80, v107);
                  int64x2_t v79 = vaddq_s64(v79, v106);
                  v73 += 2;
                  v75 -= 32;
                }
                while (v75);
                uint64_t v117 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v79, v69), vaddq_s64(v83, v74)), vaddq_s64(vaddq_s64(v81, v71), vaddq_s64(v85, v77))), vaddq_s64(vaddq_s64(vaddq_s64(v80, v70), vaddq_s64(v84, v76)), vaddq_s64(vaddq_s64(v82, v72), vaddq_s64(v86, v78)))));
                uint64_t v59 = v117;
                if (v18 == v67)
                {
                  unint64_t v18 = v117;
                  break;
                }
                if ((v18 & 0x18) == 0)
                {
                  unint64_t v60 = v18 & 0x1F;
                  v58 += v67;
LABEL_131:
                  unint64_t v18 = v59;
                  do
                  {
                    unsigned int v134 = *v58++;
                    v18 += (v134 >> 7) ^ 1;
                    --v60;
                  }
                  while (v60);
                  break;
                }
              }
              else
              {
                uint64_t v59 = 0;
                unint64_t v67 = 0;
              }
              v58 += v18 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v60 = v18 & 7;
              int64x2_t v118 = 0uLL;
              int64x2_t v119 = (int64x2_t)(unint64_t)v59;
              uint64_t v120 = (int8x8_t *)&a4[v47 + v22 + v67];
              unint64_t v121 = v67 - (v18 & 0xFFFFFFFFFFFFFFF8);
              int64x2_t v122 = 0uLL;
              int64x2_t v123 = 0uLL;
              do
              {
                int8x8_t v124 = *v120++;
                uint16x8_t v125 = vmovl_u8((uint8x8_t)vcgt_s8(v124, (int8x8_t)-1));
                uint32x4_t v126 = vmovl_u16(*(uint16x4_t *)v125.i8);
                v127.i64[0] = v126.u32[0];
                v127.i64[1] = v126.u32[1];
                int8x16_t v128 = (int8x16_t)vdupq_n_s64(1uLL);
                int64x2_t v129 = (int64x2_t)vandq_s8(v127, v128);
                v127.i64[0] = v126.u32[2];
                v127.i64[1] = v126.u32[3];
                int64x2_t v130 = (int64x2_t)vandq_s8(v127, v128);
                uint32x4_t v131 = vmovl_high_u16(v125);
                v127.i64[0] = v131.u32[0];
                v127.i64[1] = v131.u32[1];
                int64x2_t v132 = (int64x2_t)vandq_s8(v127, v128);
                v127.i64[0] = v131.u32[2];
                v127.i64[1] = v131.u32[3];
                int64x2_t v123 = vaddq_s64(v123, (int64x2_t)vandq_s8(v127, v128));
                int64x2_t v122 = vaddq_s64(v122, v132);
                int64x2_t v118 = vaddq_s64(v118, v130);
                int64x2_t v119 = vaddq_s64(v119, v129);
                v121 += 8;
              }
              while (v121);
              uint64_t v59 = vaddvq_s64(vaddq_s64(vaddq_s64(v119, v122), vaddq_s64(v118, v123)));
              BOOL v133 = v18 == (v18 & 0xFFFFFFFFFFFFFFF8);
              unint64_t v18 = v59;
              if (!v133) {
                goto LABEL_131;
              }
              break;
            case 2:
            case 7:
            case 10:
              if ((v18 & 3) != 0) {
                goto LABEL_134;
              }
              v18 >>= 2;
              break;
            case 5:
            case 9:
            case 11:
              if ((v18 & 7) != 0) {
                goto LABEL_134;
              }
              v18 >>= 3;
              break;
            case 12:
              break;
            default:
              goto LABEL_134;
          }
        }
        else
        {
          unint64_t v18 = 1;
        }
        *(void *)((char *)v397 + v56) += v18;
LABEL_14:
        ++v15;
        a3 = v44 - v48;
        a4 = &v43[v48];
        break;
      case 5u:
        if (v44 < 4) {
          goto LABEL_134;
        }
        uint64_t v47 = 0;
        uint64_t v48 = 4;
        if (1 << (v14 + 4) != v15) {
          goto LABEL_75;
        }
        goto LABEL_70;
      default:
        goto LABEL_134;
    }
  }
  uint64_t v143 = v16;
  unsigned int v396 = v14;
  unint64_t v144 = *(unsigned int *)(a1 + 48);
  uint64_t v9 = (uint64_t)v397;
  unsigned int v8 = (uint64_t (**)(int, size_t))v398;
  unsigned int v145 = v15;
  if (v144)
  {
    uint64_t v146 = 0;
    unint64_t v147 = 1;
    do
    {
      uint64_t v149 = *(void *)(a1 + 56);
      int v150 = *(_DWORD *)(v149 + v146 + 12);
      if (v150)
      {
        if (v150 == 2)
        {
          uint64_t v151 = *(int *)(v149 + v146 + 16);
          if (v151 >= 0x11) {
            protobuf_c_message_pack_cold_1();
          }
          uint64_t v152 = *(unsigned int *)(v149 + v146 + 20);
          uint64_t v153 = *(void *)((char *)v397 + v152);
          if (v153)
          {
            uint64_t v154 = qword_18EBDE350[v151];
            *(void *)((char *)v397 + v152) = 0;
            if (!*v397) {
              protobuf_c_message_unpack_cold_6();
            }
            uint64_t v155 = (*(uint64_t (**)(void, uint64_t, uint64_t))v398)(*(void *)(v398 + 16), v153 * v154, v13);
            if (!v155)
            {
              unint64_t v381 = *(unsigned int *)(a1 + 48);
              if (v381 > v147)
              {
                do
                {
                  uint64_t v383 = *(void *)(a1 + 56) + v146;
                  if (*(_DWORD *)(v383 + 84) == 2)
                  {
                    *(void *)((char *)v397 + *(unsigned int *)(v383 + 92)) = 0;
                    unint64_t v381 = *(unsigned int *)(a1 + 48);
                  }
                  ++v147;
                  v146 += 72;
                }
                while (v147 < v381);
              }
              goto LABEL_388;
            }
            *(void *)((char *)v397 + *(unsigned int *)(v149 + v146 + 24)) = v155;
            unint64_t v144 = *(unsigned int *)(a1 + 48);
            unsigned int v15 = v145;
          }
        }
      }
      else if (!*(void *)(v149 + v146 + 40) {
             && ((v389[(v147 - 1) >> 3] >> ((v147 - 1) & 7)) & 1) == 0)
      }
      {
        if (v144 > v147)
        {
          do
          {
            uint64_t v156 = *(void *)(a1 + 56) + v146;
            if (*(_DWORD *)(v156 + 84) == 2)
            {
              *(void *)((char *)v397 + *(unsigned int *)(v156 + 92)) = 0;
              unint64_t v144 = *(unsigned int *)(a1 + 48);
            }
            ++v147;
            v146 += 72;
          }
          while (v147 < v144);
        }
        goto LABEL_388;
      }
      v146 += 72;
    }
    while (v147++ < v144);
  }
  if (v143)
  {
    uint64_t v157 = (*(uint64_t (**)(void, uint64_t, uint64_t))v398)(*(void *)(v398 + 16), 24 * v143, v13);
    unsigned int v15 = v145;
    v397[2] = v157;
    if (!v157) {
      goto LABEL_388;
    }
  }
  uint64_t v158 = 0;
  v159.i64[0] = 0x3800000038;
  v159.i64[1] = 0x3800000038;
  unsigned int v160 = v15;
  v161.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
  v161.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
  v162.i64[0] = 0x7000000070;
  v162.i64[1] = 0x7000000070;
  unsigned int v163 = v14;
  unsigned int v393 = v15;
  while (1)
  {
    uint64_t v164 = 1 << (v158 + 4);
    if (v158 == v163) {
      LODWORD(v164) = v160;
    }
    uint64_t v165 = v164;
    if (v164) {
      break;
    }
LABEL_174:
    uint64_t v158 = (v158 + 1);
    unsigned int v163 = v396;
    unsigned int v160 = v393;
    if (v158 > v396)
    {
      if (v396)
      {
        for (unsigned int j = 1; j <= v396; ++j)
        {
          v386 = (&v400)[j];
          if (v386) {
            (*(void (**)(void, char *, uint64_t))(v398 + 8))(*(void *)(v398 + 16), v386, v13);
          }
        }
      }
LABEL_140:
      if (v388 >= 0x88 && v389) {
LABEL_399:
      }
        ((void (*)(uint64_t (*)(int, size_t)))v8[1])(v8[2]);
      return v9;
    }
  }
  uint64_t v166 = 0;
  uint64_t v167 = (&v400)[v158];
  while (2)
  {
    uint64_t v168 = &v167[32 * v166];
    uint64_t v169 = *((void *)v168 + 1);
    if (!v169)
    {
      uint64_t v173 = *(void *)(v9 + 16);
      unsigned int v174 = *(_DWORD *)(v9 + 8);
      *(_DWORD *)(v9 + 8) = v174 + 1;
      uint64_t v175 = v173 + 24 * v174;
      *(_DWORD *)uint64_t v175 = *(_DWORD *)v168;
      *(_DWORD *)(v175 + 4) = v168[4];
      *(void *)(v175 + 8) = *((void *)v168 + 2);
      v176 = (size_t *)(v175 + 8);
      int v177 = (void *)(*(uint64_t (**)(void, void, uint64_t))v398)(*(void *)(v398 + 16), *((void *)v168 + 2), v13);
      v176[1] = (size_t)v177;
      if (!v177) {
        goto LABEL_388;
      }
      memcpy(v177, *(const void **)&v167[32 * v166 + 24], *v176);
      v162.i64[0] = 0x7000000070;
      v162.i64[1] = 0x7000000070;
      v161.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
      v161.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
      v159.i64[0] = 0x3800000038;
      v159.i64[1] = 0x3800000038;
      goto LABEL_180;
    }
    uint64_t v170 = *(unsigned int *)(v169 + 24);
    uint64_t v171 = (void *)(v9 + v170);
    switch(*(_DWORD *)(v169 + 12))
    {
      case 0:
        v162.i64[0] = 0x7000000070;
        v162.i64[1] = 0x7000000070;
        v161.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
        v161.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
        v159.i64[0] = 0x3800000038;
        v159.i64[1] = 0x3800000038;
        if (parse_required_member((uint64_t)&v167[32 * v166], (void *)(v9 + v170), v398, 1)) {
          goto LABEL_180;
        }
        goto LABEL_388;
      case 1:
      case 3:
        if ((*(unsigned char *)(v169 + 48) & 4) != 0)
        {
          uint64_t v188 = *(unsigned int *)(v169 + 20);
          int v189 = *(_DWORD *)(v9 + v188);
          if (v189)
          {
            unsigned int v190 = *(_DWORD *)(*(void *)v9 + 72);
            uint64_t v191 = *(void *)(*(void *)v9 + 80);
            if (v190 == 1)
            {
              unsigned int v192 = 0;
              goto LABEL_212;
            }
            if (!v190) {
              goto LABEL_388;
            }
            unsigned int v192 = 0;
            do
            {
              while (1)
              {
                unsigned int v193 = v190 >> 1;
                uint64_t v194 = (v190 >> 1) + v192;
                int v195 = *(_DWORD *)(v191 + 8 * v194);
                int v196 = v189 - v195;
                if (v189 >= v195) {
                  break;
                }
                v190 >>= 1;
                if (v193 <= 1) {
                  goto LABEL_205;
                }
              }
              int v197 = *(_DWORD *)(v191 + 8 * v194 + 4);
              if (*(_DWORD *)(v191 + 8 * (v194 + 1) + 4) + v195 - v197 > v189)
              {
                unsigned int v202 = v196 + v197;
                if (((v196 + v197) & 0x80000000) == 0) {
                  goto LABEL_215;
                }
                goto LABEL_388;
              }
              v190 += v192 + ~v194;
              unsigned int v192 = v194 + 1;
            }
            while (v190 > 1);
LABEL_205:
            if (!v190) {
              goto LABEL_388;
            }
LABEL_212:
            uint64_t v199 = (int *)(v191 + 8 * v192);
            int v200 = *v199;
            if (*v199 > v189) {
              goto LABEL_388;
            }
            int v201 = v199[1];
            if (v200 - v201 + *(_DWORD *)(v191 + 8 * (v192 + 1) + 4) <= v189) {
              goto LABEL_388;
            }
            unsigned int v202 = v201 + v189 - v200;
            if ((v202 & 0x80000000) != 0) {
              goto LABEL_388;
            }
LABEL_215:
            uint64_t v203 = *(void *)(*(void *)v9 + 56);
            int v204 = *(_DWORD *)(v203 + 72 * v202 + 16);
            uint64_t v205 = v158;
            uint64_t v206 = 4;
            size_t v207 = 16;
            switch(v204)
            {
              case 0:
              case 1:
              case 2:
              case 6:
              case 7:
              case 10:
              case 12:
              case 13:
                goto LABEL_217;
              case 3:
              case 4:
              case 5:
              case 8:
              case 9:
              case 11:
              case 14:
              case 16:
                uint64_t v206 = 8;
LABEL_217:
                if (v204 == 16)
                {
                  uint64_t v209 = (void *)*v171;
                  if (*v171 && v209 != *(void **)(v203 + 72 * v202 + 40)) {
                    protobuf_c_message_free_unpacked(v209, (uint64_t (**)(int, size_t))v398);
                  }
                  goto LABEL_226;
                }
                if (v204 != 15)
                {
                  if (v204 == 14)
                  {
                    uint64_t v208 = (void *)*v171;
                    if (*v171)
                    {
                      if (v208 != *(void **)(v203 + 72 * v202 + 40)) {
                        (*(void (**)(void, void *, uint64_t))(v398 + 8))(*(void *)(v398 + 16), v208, v13);
                      }
                    }
                  }
LABEL_226:
                  size_t v207 = v206;
LABEL_227:
                  uint64_t v158 = v205;
                  goto LABEL_228;
                }
                size_t v207 = v206;
LABEL_232:
                uint64_t v210 = v171[1];
                if (!v210) {
                  goto LABEL_227;
                }
                uint64_t v211 = *(void *)(v203 + 72 * v202 + 40);
                uint64_t v158 = v205;
                if (!v211 || v210 != *(void *)(v211 + 8)) {
                  (*(void (**)(void))(v398 + 8))(*(void *)(v398 + 16));
                }
LABEL_228:
                bzero(v171, v207);
                uint64_t v9 = (uint64_t)v397;
                break;
              case 15:
                goto LABEL_232;
              default:
                protobuf_c_message_pack_cold_1();
            }
          }
          v162.i64[0] = 0x7000000070;
          v162.i64[1] = 0x7000000070;
          v161.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
          v161.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
          v159.i64[0] = 0x3800000038;
          v159.i64[1] = 0x3800000038;
          if (!parse_required_member((uint64_t)&v167[32 * v166], v171, v398, 1)) {
            goto LABEL_388;
          }
          *(_DWORD *)(v9 + v188) = *(_DWORD *)v168;
        }
        else
        {
          v162.i64[0] = 0x7000000070;
          v162.i64[1] = 0x7000000070;
          v161.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
          v161.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
          v159.i64[0] = 0x3800000038;
          v159.i64[1] = 0x3800000038;
          if (!parse_required_member((uint64_t)&v167[32 * v166], v171, v398, 1)) {
            goto LABEL_388;
          }
          uint64_t v172 = *(unsigned int *)(*((void *)v168 + 1) + 20);
          if (v172) {
            *(_DWORD *)(v9 + v172) = 1;
          }
        }
        goto LABEL_180;
      case 2:
        if (v167[32 * v166 + 4] != 2)
        {
          unsigned int v178 = *(_DWORD *)(v169 + 16);
LABEL_208:
          if (v178 >= 0x11) {
            protobuf_c_message_pack_cold_1();
          }
          uint64_t v198 = *(unsigned int *)(v169 + 20);
          v159.i64[0] = 0x3800000038;
          v159.i64[1] = 0x3800000038;
          v161.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
          v161.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
          v162.i64[0] = 0x7000000070;
          v162.i64[1] = 0x7000000070;
          if (!parse_required_member((uint64_t)&v167[32 * v166], (void *)(*v171 + *(void *)(v9 + v198) * qword_18EBDE350[v178]), v398, 0))goto LABEL_388; {
          ++*(void *)(v9 + v198);
          }
          goto LABEL_180;
        }
        unsigned int v178 = *(_DWORD *)(v169 + 16);
        if ((*(unsigned char *)(v169 + 48) & 1) == 0 && v178 - 14 < 3) {
          goto LABEL_208;
        }
        uint64_t v179 = *(unsigned int *)(v169 + 20);
        uint64_t v180 = 4;
        switch(v178)
        {
          case 0u:
          case 1u:
          case 2u:
          case 6u:
          case 7u:
          case 0xAu:
          case 0xCu:
          case 0xDu:
            break;
          case 3u:
          case 4u:
          case 5u:
          case 8u:
          case 9u:
          case 0xBu:
          case 0xEu:
          case 0x10u:
            uint64_t v180 = 8;
            break;
          case 0xFu:
LABEL_411:
            protobuf_c_message_unpack_cold_5();
          default:
            protobuf_c_message_pack_cold_1();
        }
        v181 = (int8x8_t *)(*v171 + *(void *)(v9 + v179) * v180);
        uint64_t v182 = &v167[32 * v166];
        uint64_t v183 = v182[5];
        uint64_t v184 = (unsigned char *)(*((void *)v182 + 3) + v183);
        unint64_t v185 = *((void *)v182 + 2) - v183;
        char v186 = 2;
        switch(v178)
        {
          case 0u:
          case 0xDu:
            if (!v185) {
              goto LABEL_385;
            }
            uint64_t v212 = 0;
            while (1)
            {
              uint64_t v213 = v185 >= 0xA ? 10 : v185;
              if (v213)
              {
                uint64_t v214 = 0;
                while ((char)v184[v214] < 0)
                {
                  if (v213 == ++v214) {
                    goto LABEL_388;
                  }
                }
              }
              else
              {
                LODWORD(v214) = 0;
              }
              uint64_t v215 = (v214 + 1);
              if (v214 == v213 || v214 == -1) {
                goto LABEL_388;
              }
              unsigned int v216 = *v184 & 0x7F;
              if (v215 >= 2)
              {
                unsigned int v216 = *v184 & 0x7F | ((v184[1] & 0x7F) << 7);
                if (v214 != 1)
                {
                  unsigned int v216 = *v184 & 0x7F | ((v184[1] & 0x7F) << 7) & 0x3FFF | ((v184[2] & 0x7F) << 14);
                  if (v215 >= 4)
                  {
                    unsigned int v216 = *v184 & 0x7F | ((v184[1] & 0x7F) << 7) & 0x3FFF | ((v184[2] & 0x7F) << 14) & 0xF01FFFFF | ((v184[3] & 0x7F) << 21);
                    if (v214 != 3) {
                      v216 |= v184[4] << 28;
                    }
                  }
                }
              }
              unint64_t v187 = v212 + 1;
              v181->i32[v212] = v216;
              v184 += v215;
              ++v212;
              v185 -= v215;
              if (!v185) {
                goto LABEL_386;
              }
            }
          case 1u:
            if (!v185) {
              goto LABEL_385;
            }
            uint64_t v290 = 0;
            while (1)
            {
              uint64_t v291 = v185 >= 0xA ? 10 : v185;
              if (v291)
              {
                uint64_t v292 = 0;
                while ((char)v184[v292] < 0)
                {
                  if (v291 == ++v292) {
                    goto LABEL_388;
                  }
                }
              }
              else
              {
                LODWORD(v292) = 0;
              }
              uint64_t v293 = (v292 + 1);
              if (v292 == v291 || v292 == -1) {
                goto LABEL_388;
              }
              unsigned int v294 = *v184 & 0x7F;
              if (v293 >= 2)
              {
                unsigned int v294 = *v184 & 0x7F | ((v184[1] & 0x7F) << 7);
                if (v292 != 1)
                {
                  unsigned int v294 = *v184 & 0x7F | ((v184[1] & 0x7F) << 7) & 0x3FFF | ((v184[2] & 0x7F) << 14);
                  if (v293 >= 4)
                  {
                    unsigned int v294 = *v184 & 0x7F | ((v184[1] & 0x7F) << 7) & 0x3FFF | ((v184[2] & 0x7F) << 14) & 0xF01FFFFF | ((v184[3] & 0x7F) << 21);
                    if (v292 != 3) {
                      v294 |= v184[4] << 28;
                    }
                  }
                }
              }
              unint64_t v187 = v290 + 1;
              v181->i32[v290] = -(v294 & 1) ^ (v294 >> 1);
              v184 += v293;
              ++v290;
              v185 -= v293;
              if (!v185) {
                goto LABEL_386;
              }
            }
          case 2u:
          case 7u:
          case 0xAu:
            goto LABEL_196;
          case 3u:
          case 8u:
            if (!v185) {
              goto LABEL_385;
            }
            uint64_t v217 = 0;
            while (2)
            {
              if (v185 >= 0xA) {
                uint64_t v218 = 10;
              }
              else {
                uint64_t v218 = v185;
              }
              if (v218)
              {
                uint64_t v219 = 0;
                while ((char)v184[v219] < 0)
                {
                  if (v218 == ++v219) {
                    goto LABEL_388;
                  }
                }
              }
              else
              {
                LODWORD(v219) = 0;
              }
              uint64_t v220 = (v219 + 1);
              if (v219 == v218 || v219 == -1) {
                goto LABEL_388;
              }
              int8x8_t v221 = (int8x8_t)(*v184 & 0x7F);
              if (v220 <= 4)
              {
                if (v220 >= 2)
                {
                  int8x8_t v221 = (int8x8_t)(*v184 & 0x7F | ((unint64_t)(v184[1] & 0x7F) << 7));
                  if (v219 != 1)
                  {
                    int8x8_t v221 = (int8x8_t)(*v184 & 0x7F | (unint64_t)(((v184[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v184[2] & 0x7F) << 14));
                    if (v220 >= 4) {
                      int8x8_t v221 = (int8x8_t)(*v184 & 0x7F | (unint64_t)(((v184[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v184[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v184[3] & 0x7F) << 21));
                    }
                  }
                }
LABEL_259:
                unint64_t v187 = v217 + 1;
                v181[v217] = v221;
                v184 += v220;
                ++v217;
                v185 -= v220;
                if (!v185) {
                  goto LABEL_386;
                }
                continue;
              }
              break;
            }
            int8x8_t v221 = (int8x8_t)(*v184 & 0x7F | (unint64_t)(((v184[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v184[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v184[3] & 0x7F) << 21));
            unint64_t v222 = v220 - 4;
            if ((unint64_t)(v220 - 4) < 8)
            {
              unsigned int v223 = 28;
              unint64_t v224 = 4;
              goto LABEL_289;
            }
            if (v222 >= 0x10)
            {
              unint64_t v225 = v222 & 0xFFFFFFFFFFFFFFF0;
              int8x16_t v248 = 0uLL;
              unsigned long long v249 = *v184 & 0x7F | (unint64_t)(((v184[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v184[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | (unsigned __int128)((unint64_t)(v184[3] & 0x7F) << 21);
              unsigned int v223 = 7 * (v222 & 0xFFFFFFF0) + 28;
              v250 = (int8x16_t *)(v184 + 4);
              unint64_t v251 = v222 & 0xFFFFFFFFFFFFFFF0;
              int8x16_t v252 = 0uLL;
              int8x16_t v253 = 0uLL;
              int8x16_t v254 = 0uLL;
              int8x16_t v255 = 0uLL;
              int8x16_t v256 = 0uLL;
              int8x16_t v257 = 0uLL;
              int32x4_t v258 = (int32x4_t)xmmword_18EBDE300;
              int32x4_t v259 = (int32x4_t)xmmword_18EBDE2F0;
              int32x4_t v260 = (int32x4_t)xmmword_18EBDE2E0;
              int32x4_t v261 = (int32x4_t)xmmword_18EBDE2D0;
              do
              {
                int8x16_t v262 = *v250++;
                uint8x16_t v263 = (uint8x16_t)vandq_s8(v262, v161);
                uint16x8_t v264 = vmovl_high_u8(v263);
                uint32x4_t v265 = vmovl_high_u16(v264);
                v266.i64[0] = v265.u32[2];
                v266.i64[1] = v265.u32[3];
                uint64x2_t v267 = v266;
                v266.i64[0] = v265.u32[0];
                v266.i64[1] = v265.u32[1];
                uint64x2_t v268 = v266;
                uint32x4_t v269 = vmovl_u16(*(uint16x4_t *)v264.i8);
                v266.i64[0] = v269.u32[2];
                v266.i64[1] = v269.u32[3];
                uint64x2_t v270 = v266;
                uint16x8_t v271 = vmovl_u8(*(uint8x8_t *)v263.i8);
                uint32x4_t v272 = vmovl_high_u16(v271);
                v266.i64[0] = v272.u32[2];
                v266.i64[1] = v272.u32[3];
                uint64x2_t v273 = v266;
                v266.i64[0] = v269.u32[0];
                v266.i64[1] = v269.u32[1];
                uint64x2_t v274 = v266;
                v266.i64[0] = v272.u32[0];
                v266.i64[1] = v272.u32[1];
                uint64x2_t v275 = v266;
                uint32x4_t v276 = vmovl_u16(*(uint16x4_t *)v271.i8);
                v266.i64[0] = v276.u32[2];
                v266.i64[1] = v276.u32[3];
                uint64x2_t v277 = v266;
                v266.i64[0] = v276.u32[0];
                v266.i64[1] = v276.u32[1];
                uint64x2_t v278 = v266;
                v266.i64[0] = v261.u32[2];
                v266.i64[1] = v261.u32[3];
                uint64x2_t v279 = v266;
                v266.i64[0] = v261.u32[0];
                v266.i64[1] = v261.u32[1];
                uint64x2_t v280 = v266;
                v266.i64[0] = v260.u32[2];
                v266.i64[1] = v260.u32[3];
                uint64x2_t v281 = v266;
                v266.i64[0] = v259.u32[2];
                v266.i64[1] = v259.u32[3];
                uint64x2_t v282 = v266;
                v266.i64[0] = v260.u32[0];
                v266.i64[1] = v260.u32[1];
                uint64x2_t v283 = v266;
                v266.i64[0] = v259.u32[0];
                v266.i64[1] = v259.u32[1];
                uint64x2_t v284 = v266;
                v266.i64[0] = v258.u32[2];
                v266.i64[1] = v258.u32[3];
                uint64x2_t v285 = v266;
                v266.i64[0] = v258.u32[0];
                v266.i64[1] = v258.u32[1];
                int8x16_t v257 = vorrq_s8((int8x16_t)vshlq_u64(v267, v279), v257);
                int8x16_t v256 = vorrq_s8((int8x16_t)vshlq_u64(v268, v280), v256);
                int8x16_t v255 = vorrq_s8((int8x16_t)vshlq_u64(v270, v281), v255);
                int8x16_t v253 = vorrq_s8((int8x16_t)vshlq_u64(v273, v282), v253);
                int8x16_t v254 = vorrq_s8((int8x16_t)vshlq_u64(v274, v283), v254);
                int8x16_t v252 = vorrq_s8((int8x16_t)vshlq_u64(v275, v284), v252);
                int8x16_t v248 = vorrq_s8((int8x16_t)vshlq_u64(v277, v285), v248);
                unsigned long long v249 = (unsigned __int128)vorrq_s8((int8x16_t)vshlq_u64(v278, v266), (int8x16_t)v249);
                int32x4_t v258 = vaddq_s32(v258, v162);
                int32x4_t v259 = vaddq_s32(v259, v162);
                int32x4_t v260 = vaddq_s32(v260, v162);
                int32x4_t v261 = vaddq_s32(v261, v162);
                v251 -= 16;
              }
              while (v251);
              int8x16_t v286 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v249, v254), vorrq_s8(v252, v256)), vorrq_s8(vorrq_s8(v248, v255), vorrq_s8(v253, v257)));
              int8x8_t v221 = vorr_s8(*(int8x8_t *)v286.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v286, v286, 8uLL));
              if (v222 == v225) {
                goto LABEL_259;
              }
              if ((v222 & 8) == 0)
              {
                unint64_t v224 = v225 | 4;
                goto LABEL_289;
              }
            }
            else
            {
              unint64_t v225 = 0;
              unsigned int v223 = 28;
            }
            unint64_t v224 = v222 & 0xFFFFFFFFFFFFFFF8 | 4;
            int32x4_t v226 = vdupq_n_s32(v223);
            unsigned int v223 = 7 * (v222 & 0xFFFFFFF8) + 28;
            int8x16_t v227 = 0uLL;
            int8x16_t v228 = (int8x16_t)(unint64_t)v221;
            int32x4_t v229 = vaddq_s32(v226, (int32x4_t)xmmword_18EBDE300);
            int32x4_t v230 = vaddq_s32(v226, (int32x4_t)xmmword_18EBDE310);
            uint64_t v231 = (int8x8_t *)&v184[v225 + 4];
            unint64_t v232 = v225 - (v222 & 0xFFFFFFFFFFFFFFF8);
            int8x16_t v233 = 0uLL;
            int8x16_t v234 = 0uLL;
            do
            {
              int8x8_t v235 = *v231++;
              uint16x8_t v236 = vmovl_u8((uint8x8_t)vand_s8(v235, (int8x8_t)0x7F7F7F7F7F7F7F7FLL));
              uint32x4_t v237 = vmovl_high_u16(v236);
              v238.i64[0] = v237.u32[2];
              v238.i64[1] = v237.u32[3];
              uint64x2_t v239 = v238;
              v238.i64[0] = v237.u32[0];
              v238.i64[1] = v237.u32[1];
              uint64x2_t v240 = v238;
              uint32x4_t v241 = vmovl_u16(*(uint16x4_t *)v236.i8);
              v238.i64[0] = v241.u32[2];
              v238.i64[1] = v241.u32[3];
              uint64x2_t v242 = v238;
              v238.i64[0] = v241.u32[0];
              v238.i64[1] = v241.u32[1];
              uint64x2_t v243 = v238;
              v238.i64[0] = v229.u32[2];
              v238.i64[1] = v229.u32[3];
              uint64x2_t v244 = v238;
              v238.i64[0] = v229.u32[0];
              v238.i64[1] = v229.u32[1];
              uint64x2_t v245 = v238;
              v238.i64[0] = v230.u32[2];
              v238.i64[1] = v230.u32[3];
              uint64x2_t v246 = v238;
              v238.i64[0] = v230.u32[0];
              v238.i64[1] = v230.u32[1];
              int8x16_t v234 = vorrq_s8((int8x16_t)vshlq_u64(v239, v244), v234);
              int8x16_t v233 = vorrq_s8((int8x16_t)vshlq_u64(v240, v245), v233);
              int8x16_t v227 = vorrq_s8((int8x16_t)vshlq_u64(v242, v246), v227);
              int8x16_t v228 = vorrq_s8((int8x16_t)vshlq_u64(v243, v238), v228);
              int32x4_t v230 = vaddq_s32(v230, v159);
              int32x4_t v229 = vaddq_s32(v229, v159);
              v232 += 8;
            }
            while (v232);
            int8x16_t v247 = vorrq_s8(vorrq_s8(v228, v233), vorrq_s8(v227, v234));
            int8x8_t v221 = vorr_s8(*(int8x8_t *)v247.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v247, v247, 8uLL));
            if (v222 == (v222 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_259;
            }
LABEL_289:
            uint64_t v287 = v220 - v224;
            v288 = &v184[v224];
            do
            {
              char v289 = *v288++;
              *(void *)&v221 |= (unint64_t)(v289 & 0x7F) << v223;
              v223 += 7;
              --v287;
            }
            while (v287);
            goto LABEL_259;
          case 4u:
            if (!v185) {
              goto LABEL_385;
            }
            uint64_t v295 = 0;
            while (2)
            {
              if (v185 >= 0xA) {
                uint64_t v296 = 10;
              }
              else {
                uint64_t v296 = v185;
              }
              if (v296)
              {
                uint64_t v297 = 0;
                while ((char)v184[v297] < 0)
                {
                  if (v296 == ++v297) {
                    goto LABEL_388;
                  }
                }
              }
              else
              {
                LODWORD(v297) = 0;
              }
              uint64_t v298 = (v297 + 1);
              if (v297 == v296 || v297 == -1) {
                goto LABEL_388;
              }
              int8x8_t v299 = (int8x8_t)(*v184 & 0x7F);
              if (v298 <= 4)
              {
                if (v298 >= 2)
                {
                  int8x8_t v299 = (int8x8_t)(*v184 & 0x7F | ((unint64_t)(v184[1] & 0x7F) << 7));
                  if (v297 != 1)
                  {
                    int8x8_t v299 = (int8x8_t)(*v184 & 0x7F | (unint64_t)(((v184[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v184[2] & 0x7F) << 14));
                    if (v298 >= 4) {
                      int8x8_t v299 = (int8x8_t)(*v184 & 0x7F | (unint64_t)(((v184[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v184[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v184[3] & 0x7F) << 21));
                    }
                  }
                }
LABEL_313:
                unint64_t v187 = v295 + 1;
                v181[v295] = (int8x8_t)(-(uint64_t)(v299.i8[0] & 1) ^ (*(void *)&v299 >> 1));
                v184 += v298;
                ++v295;
                v185 -= v298;
                if (!v185) {
                  goto LABEL_386;
                }
                continue;
              }
              break;
            }
            int8x8_t v299 = (int8x8_t)(*v184 & 0x7F | (unint64_t)(((v184[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v184[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v184[3] & 0x7F) << 21));
            unint64_t v300 = v298 - 4;
            if ((unint64_t)(v298 - 4) < 8)
            {
              unsigned int v301 = 28;
              unint64_t v302 = 4;
              goto LABEL_343;
            }
            if (v300 >= 0x10)
            {
              unint64_t v303 = v300 & 0xFFFFFFFFFFFFFFF0;
              int8x16_t v326 = 0uLL;
              unsigned long long v327 = *v184 & 0x7F | (unint64_t)(((v184[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v184[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | (unsigned __int128)((unint64_t)(v184[3] & 0x7F) << 21);
              unsigned int v301 = 7 * (v300 & 0xFFFFFFF0) + 28;
              int32x4_t v328 = (int32x4_t)xmmword_18EBDE2D0;
              int32x4_t v329 = (int32x4_t)xmmword_18EBDE2E0;
              int32x4_t v330 = (int32x4_t)xmmword_18EBDE2F0;
              int32x4_t v331 = (int32x4_t)xmmword_18EBDE300;
              v332 = (int8x16_t *)(v184 + 4);
              unint64_t v333 = v300 & 0xFFFFFFFFFFFFFFF0;
              int8x16_t v334 = 0uLL;
              int8x16_t v335 = 0uLL;
              int8x16_t v336 = 0uLL;
              int8x16_t v337 = 0uLL;
              int8x16_t v338 = 0uLL;
              int8x16_t v339 = 0uLL;
              do
              {
                int8x16_t v340 = *v332++;
                uint8x16_t v341 = (uint8x16_t)vandq_s8(v340, v161);
                uint16x8_t v342 = vmovl_high_u8(v341);
                uint32x4_t v343 = vmovl_high_u16(v342);
                v344.i64[0] = v343.u32[2];
                v344.i64[1] = v343.u32[3];
                uint64x2_t v345 = v344;
                v344.i64[0] = v343.u32[0];
                v344.i64[1] = v343.u32[1];
                uint64x2_t v346 = v344;
                uint32x4_t v347 = vmovl_u16(*(uint16x4_t *)v342.i8);
                v344.i64[0] = v347.u32[2];
                v344.i64[1] = v347.u32[3];
                uint64x2_t v348 = v344;
                uint16x8_t v349 = vmovl_u8(*(uint8x8_t *)v341.i8);
                uint32x4_t v350 = vmovl_high_u16(v349);
                v344.i64[0] = v350.u32[2];
                v344.i64[1] = v350.u32[3];
                uint64x2_t v351 = v344;
                v344.i64[0] = v347.u32[0];
                v344.i64[1] = v347.u32[1];
                uint64x2_t v352 = v344;
                v344.i64[0] = v350.u32[0];
                v344.i64[1] = v350.u32[1];
                uint64x2_t v353 = v344;
                uint32x4_t v354 = vmovl_u16(*(uint16x4_t *)v349.i8);
                v344.i64[0] = v354.u32[2];
                v344.i64[1] = v354.u32[3];
                uint64x2_t v355 = v344;
                v344.i64[0] = v354.u32[0];
                v344.i64[1] = v354.u32[1];
                uint64x2_t v356 = v344;
                v344.i64[0] = v328.u32[2];
                v344.i64[1] = v328.u32[3];
                uint64x2_t v357 = v344;
                v344.i64[0] = v328.u32[0];
                v344.i64[1] = v328.u32[1];
                uint64x2_t v358 = v344;
                v344.i64[0] = v329.u32[2];
                v344.i64[1] = v329.u32[3];
                uint64x2_t v359 = v344;
                v344.i64[0] = v330.u32[2];
                v344.i64[1] = v330.u32[3];
                uint64x2_t v360 = v344;
                v344.i64[0] = v329.u32[0];
                v344.i64[1] = v329.u32[1];
                uint64x2_t v361 = v344;
                v344.i64[0] = v330.u32[0];
                v344.i64[1] = v330.u32[1];
                uint64x2_t v362 = v344;
                v344.i64[0] = v331.u32[2];
                v344.i64[1] = v331.u32[3];
                uint64x2_t v363 = v344;
                v344.i64[0] = v331.u32[0];
                v344.i64[1] = v331.u32[1];
                int8x16_t v339 = vorrq_s8((int8x16_t)vshlq_u64(v345, v357), v339);
                int8x16_t v338 = vorrq_s8((int8x16_t)vshlq_u64(v346, v358), v338);
                int8x16_t v337 = vorrq_s8((int8x16_t)vshlq_u64(v348, v359), v337);
                int8x16_t v335 = vorrq_s8((int8x16_t)vshlq_u64(v351, v360), v335);
                int8x16_t v336 = vorrq_s8((int8x16_t)vshlq_u64(v352, v361), v336);
                int8x16_t v334 = vorrq_s8((int8x16_t)vshlq_u64(v353, v362), v334);
                int8x16_t v326 = vorrq_s8((int8x16_t)vshlq_u64(v355, v363), v326);
                unsigned long long v327 = (unsigned __int128)vorrq_s8((int8x16_t)vshlq_u64(v356, v344), (int8x16_t)v327);
                int32x4_t v331 = vaddq_s32(v331, v162);
                int32x4_t v330 = vaddq_s32(v330, v162);
                int32x4_t v329 = vaddq_s32(v329, v162);
                int32x4_t v328 = vaddq_s32(v328, v162);
                v333 -= 16;
              }
              while (v333);
              int8x16_t v364 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v327, v336), vorrq_s8(v334, v338)), vorrq_s8(vorrq_s8(v326, v337), vorrq_s8(v335, v339)));
              int8x8_t v299 = vorr_s8(*(int8x8_t *)v364.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v364, v364, 8uLL));
              if (v300 == v303) {
                goto LABEL_313;
              }
              if ((v300 & 8) == 0)
              {
                unint64_t v302 = v303 | 4;
                goto LABEL_343;
              }
            }
            else
            {
              unint64_t v303 = 0;
              unsigned int v301 = 28;
            }
            unint64_t v302 = v300 & 0xFFFFFFFFFFFFFFF8 | 4;
            int32x4_t v304 = vdupq_n_s32(v301);
            unsigned int v301 = 7 * (v300 & 0xFFFFFFF8) + 28;
            int8x16_t v305 = 0uLL;
            int8x16_t v306 = (int8x16_t)(unint64_t)v299;
            int32x4_t v307 = vaddq_s32(v304, (int32x4_t)xmmword_18EBDE300);
            int32x4_t v308 = vaddq_s32(v304, (int32x4_t)xmmword_18EBDE310);
            v309 = (int8x8_t *)&v184[v303 + 4];
            unint64_t v310 = v303 - (v300 & 0xFFFFFFFFFFFFFFF8);
            int8x16_t v311 = 0uLL;
            int8x16_t v312 = 0uLL;
            do
            {
              int8x8_t v313 = *v309++;
              uint16x8_t v314 = vmovl_u8((uint8x8_t)vand_s8(v313, (int8x8_t)0x7F7F7F7F7F7F7F7FLL));
              uint32x4_t v315 = vmovl_high_u16(v314);
              v316.i64[0] = v315.u32[2];
              v316.i64[1] = v315.u32[3];
              uint64x2_t v317 = v316;
              v316.i64[0] = v315.u32[0];
              v316.i64[1] = v315.u32[1];
              uint64x2_t v318 = v316;
              uint32x4_t v319 = vmovl_u16(*(uint16x4_t *)v314.i8);
              v316.i64[0] = v319.u32[2];
              v316.i64[1] = v319.u32[3];
              uint64x2_t v320 = v316;
              v316.i64[0] = v319.u32[0];
              v316.i64[1] = v319.u32[1];
              uint64x2_t v321 = v316;
              v316.i64[0] = v307.u32[2];
              v316.i64[1] = v307.u32[3];
              uint64x2_t v322 = v316;
              v316.i64[0] = v307.u32[0];
              v316.i64[1] = v307.u32[1];
              uint64x2_t v323 = v316;
              v316.i64[0] = v308.u32[2];
              v316.i64[1] = v308.u32[3];
              uint64x2_t v324 = v316;
              v316.i64[0] = v308.u32[0];
              v316.i64[1] = v308.u32[1];
              int8x16_t v312 = vorrq_s8((int8x16_t)vshlq_u64(v317, v322), v312);
              int8x16_t v311 = vorrq_s8((int8x16_t)vshlq_u64(v318, v323), v311);
              int8x16_t v305 = vorrq_s8((int8x16_t)vshlq_u64(v320, v324), v305);
              int8x16_t v306 = vorrq_s8((int8x16_t)vshlq_u64(v321, v316), v306);
              int32x4_t v308 = vaddq_s32(v308, v159);
              int32x4_t v307 = vaddq_s32(v307, v159);
              v310 += 8;
            }
            while (v310);
            int8x16_t v325 = vorrq_s8(vorrq_s8(v306, v311), vorrq_s8(v305, v312));
            int8x8_t v299 = vorr_s8(*(int8x8_t *)v325.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v325, v325, 8uLL));
            if (v300 == (v300 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_313;
            }
LABEL_343:
            uint64_t v365 = v298 - v302;
            v366 = &v184[v302];
            do
            {
              char v367 = *v366++;
              *(void *)&v299 |= (unint64_t)(v367 & 0x7F) << v301;
              v301 += 7;
              --v365;
            }
            while (v365);
            goto LABEL_313;
          case 5u:
          case 9u:
          case 0xBu:
            char v186 = 3;
LABEL_196:
            unint64_t v187 = v185 >> v186;
            memcpy(v181, v184, (v185 >> v186) * v180);
            v162.i64[0] = 0x7000000070;
            v162.i64[1] = 0x7000000070;
            v161.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
            v161.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
            v159.i64[0] = 0x3800000038;
            v159.i64[1] = 0x3800000038;
            goto LABEL_386;
          case 6u:
            if (!v185) {
              goto LABEL_385;
            }
            uint64_t v368 = 0;
            while (1)
            {
              uint64_t v369 = v185 >= 0xA ? 10 : v185;
              if (v369)
              {
                uint64_t v370 = 0;
                while ((char)v184[v370] < 0)
                {
                  if (v369 == ++v370) {
                    goto LABEL_388;
                  }
                }
              }
              else
              {
                LODWORD(v37errstart(20, 0) = 0;
              }
              uint64_t v371 = (v370 + 1);
              if (v370 == v369 || v370 == -1) {
                goto LABEL_388;
              }
              unsigned int v372 = *v184 & 0x7F;
              if (v371 >= 2)
              {
                unsigned int v372 = *v184 & 0x7F | ((v184[1] & 0x7F) << 7);
                if (v370 != 1)
                {
                  unsigned int v372 = *v184 & 0x7F | ((v184[1] & 0x7F) << 7) & 0x3FFF | ((v184[2] & 0x7F) << 14);
                  if (v371 >= 4)
                  {
                    unsigned int v372 = *v184 & 0x7F | ((v184[1] & 0x7F) << 7) & 0x3FFF | ((v184[2] & 0x7F) << 14) & 0xF01FFFFF | ((v184[3] & 0x7F) << 21);
                    if (v370 != 3) {
                      v372 |= v184[4] << 28;
                    }
                  }
                }
              }
              unint64_t v187 = v368 + 1;
              v181->i32[v368] = v372;
              v184 += v371;
              ++v368;
              v185 -= v371;
              if (!v185) {
                goto LABEL_386;
              }
            }
          case 0xCu:
            if (!v185)
            {
LABEL_385:
              unint64_t v187 = 0;
LABEL_386:
              *(void *)(v9 + v179) += v187;
LABEL_180:
              if (++v166 == v165) {
                goto LABEL_174;
              }
              continue;
            }
            uint64_t v373 = 0;
            while (1)
            {
              uint64_t v374 = v185 >= 0xA ? 10 : v185;
              if (v374)
              {
                uint64_t v375 = 0;
                while ((char)v184[v375] < 0)
                {
                  if (v374 == ++v375) {
                    goto LABEL_388;
                  }
                }
              }
              else
              {
                LODWORD(v375) = 0;
              }
              uint64_t v376 = (v375 + 1);
              if (v375 == v374 || v375 == -1) {
                break;
              }
              v377 = v184;
              uint64_t v378 = (v375 + 1);
              while (1)
              {
                char v379 = *v377++;
                if ((v379 & 0x7F) != 0) {
                  break;
                }
                if (!--v378)
                {
                  int v380 = 0;
                  goto LABEL_383;
                }
              }
              int v380 = 1;
LABEL_383:
              unint64_t v187 = v373 + 1;
              v181->i32[v373] = v380;
              v184 += v376;
              ++v373;
              v185 -= v376;
              if (!v185) {
                goto LABEL_386;
              }
            }
LABEL_388:
            protobuf_c_message_free_unpacked((void *)v9, (uint64_t (**)(int, size_t))v398);
            if (v396)
            {
              for (unsigned int k = 1; k <= v396; ++k)
              {
                if ((&v400)[k]) {
                  (*(void (**)(void))(v398 + 8))(*(void *)(v398 + 16));
                }
              }
            }
            uint64_t v9 = 0;
            if (v388 >= 0x88 && v389)
            {
LABEL_398:
              uint64_t v9 = 0;
              goto LABEL_399;
            }
            return v9;
          default:
            goto LABEL_411;
        }
      default:
        protobuf_c_message_unpack_cold_1();
    }
  }
}

uint64_t protobuf_c_message_init(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 88))(a2);
}

void *protobuf_c_message_free_unpacked(void *result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    unsigned int v2 = result;
    unsigned int v3 = (_DWORD *)*result;
    if (*(_DWORD *)*result != 682290937) {
      protobuf_c_message_free_unpacked_cold_1();
    }
    if (a2) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = &protobuf_c__allocator;
    }
    char *result = 0;
    unsigned int v5 = (unsigned int *)(result + 1);
    if (v3[12])
    {
      for (unint64_t i = 0; i < v3[12]; ++i)
      {
        uint64_t v7 = *((void *)v3 + 7);
        if ((*(unsigned char *)(v7 + 72 * i + 48) & 4) != 0
          && *(_DWORD *)(v7 + 72 * i + 8) != *(_DWORD *)((char *)v2 + *(unsigned int *)(v7 + 72 * i + 20)))
        {
          continue;
        }
        if (*(_DWORD *)(v7 + 72 * i + 12) == 2)
        {
          uint64_t v8 = v7 + 72 * i;
          size_t v9 = *(void *)((char *)v2 + *(unsigned int *)(v8 + 24));
          if (v9)
          {
            unint64_t v10 = *(void *)((char *)v2 + *(unsigned int *)(v8 + 20));
            int v11 = *(_DWORD *)(v7 + 72 * i + 16);
            if (v11 == 14)
            {
              if (v10)
              {
                unint64_t v20 = 0;
                unsigned int v21 = 1;
                do
                {
                  if (*(void *)(v9 + 8 * v20)) {
                    ((void (*)(uint64_t (*)(int, size_t)))v4[1])(v4[2]);
                  }
                  unint64_t v20 = v21++;
                }
                while (v10 > v20);
              }
            }
            else if (v11 == 15)
            {
              if (v10)
              {
                unint64_t v22 = 0;
                unsigned int v23 = 1;
                do
                {
                  if (*(void *)(v9 + 16 * v22 + 8)) {
                    ((void (*)(uint64_t (*)(int, size_t)))v4[1])(v4[2]);
                  }
                  unint64_t v22 = v23++;
                }
                while (v10 > v22);
              }
            }
            else if (v11 == 16 && v10 != 0)
            {
              unint64_t v13 = 0;
              unsigned int v14 = 1;
              do
              {
                protobuf_c_message_free_unpacked(*(void *)(v9 + 8 * v13), v4);
                unint64_t v13 = v14++;
              }
              while (v10 > v13);
            }
            v4[1]((int)v4[2], v9);
          }
          continue;
        }
        int v15 = *(_DWORD *)(v7 + 72 * i + 16);
        switch(v15)
        {
          case 16:
            uint64_t v17 = *(void *)((char *)v2 + *(unsigned int *)(v7 + 72 * i + 24));
            if (v17 && v17 != *(void *)(v7 + 72 * i + 40)) {
              protobuf_c_message_free_unpacked(v17, v4);
            }
            continue;
          case 15:
            uint64_t v18 = v7 + 72 * i;
            size_t v16 = *(void *)((char *)v5 + *(unsigned int *)(v18 + 24));
            if (!v16) {
              continue;
            }
            uint64_t v19 = *(void *)(v18 + 40);
            if (v19)
            {
              if (*(void *)(v19 + 8) == v16) {
                continue;
              }
            }
            break;
          case 14:
            size_t v16 = *(void *)((char *)v2 + *(unsigned int *)(v7 + 72 * i + 24));
            if (!v16 || v16 == *(void *)(v7 + 72 * i + 40)) {
              continue;
            }
            break;
          default:
            continue;
        }
        v4[1]((int)v4[2], v16);
      }
    }
    unint64_t v24 = *v5;
    if (v24)
    {
      unint64_t v25 = 0;
      uint64_t v26 = 16;
      do
      {
        if (*(void *)(v2[2] + v26))
        {
          ((void (*)(uint64_t (*)(int, size_t)))v4[1])(v4[2]);
          unint64_t v24 = *v5;
        }
        ++v25;
        v26 += 24;
      }
      while (v25 < v24);
    }
    if (v2[2]) {
      ((void (*)(uint64_t (*)(int, size_t)))v4[1])(v4[2]);
    }
    int v28 = v4[1];
    int v27 = v4[2];
    return (void *)v28((int)v27, (size_t)v2);
  }
  return result;
}

uint64_t protobuf_c_message_check(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = *(void *)result;
  if (!*(void *)result || *(_DWORD *)v2 != 682290937) {
    return 0;
  }
  uint64_t v3 = *(unsigned int *)(v2 + 48);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(v2 + 56);
  while (1)
  {
    uint64_t v8 = v5 + 72 * v4;
    int v10 = *(_DWORD *)(v8 + 12);
    int v9 = *(_DWORD *)(v8 + 16);
    if ((*(unsigned char *)(v8 + 48) & 4) != 0
      && *(_DWORD *)(v5 + 72 * v4 + 8) != *(_DWORD *)(v1 + *(unsigned int *)(v5 + 72 * v4 + 20)))
    {
      goto LABEL_10;
    }
    int v11 = (uint64_t *)(v1 + *(unsigned int *)(v8 + 24));
    if (v10 != 2)
    {
      if (v9 == 14)
      {
        uint64_t v6 = *v11;
        if (v10) {
          BOOL v7 = 0;
        }
        else {
          BOOL v7 = v6 == 0;
        }
        if (v7) {
          return 0;
        }
      }
      else if (v9 == 15)
      {
        if ((!v10 || *(_DWORD *)(v1 + *(unsigned int *)(v5 + 72 * v4 + 20)) == 1) && *v11 && !v11[1]) {
          return 0;
        }
      }
      else if (v9 == 16 && (!v10 || *v11 != 0))
      {
        uint64_t result = ((uint64_t (*)(void))protobuf_c_message_check)();
        if (!result) {
          return result;
        }
      }
      goto LABEL_10;
    }
    unint64_t v12 = *(void *)(v1 + *(unsigned int *)(v5 + 72 * v4 + 20));
    if (v12 && !*v11) {
      return 0;
    }
    if (v9 == 14) {
      break;
    }
    if (v9 == 15)
    {
      if (v12)
      {
        unint64_t v20 = 0;
        uint64_t v21 = *v11;
        unsigned int v22 = 1;
        while (!*(void *)(v21 + 16 * v20) || *(void *)(v21 + 16 * v20 + 8))
        {
          unint64_t v20 = v22++;
          if (v12 <= v20) {
            goto LABEL_10;
          }
        }
        return 0;
      }
    }
    else if (v9 == 16 && v12)
    {
      unint64_t v13 = 0;
      uint64_t v14 = *v11;
      unsigned int v15 = 1;
      do
      {
        uint64_t result = protobuf_c_message_check(*(void *)(v14 + 8 * v13));
        if (!result) {
          return result;
        }
        unint64_t v13 = v15++;
      }
      while (v12 > v13);
    }
LABEL_10:
    if (++v4 == v3) {
      return 1;
    }
  }
  if (!v12) {
    goto LABEL_10;
  }
  unint64_t v17 = 0;
  uint64_t v18 = *v11;
  unsigned int v19 = 1;
  while (*(void *)(v18 + 8 * v17))
  {
    unint64_t v17 = v19++;
    if (v12 <= v17) {
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t protobuf_c_service_invoke_internal(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(*(void *)a1 + 40) <= a2) {
    protobuf_c_service_invoke_internal_cold_1();
  }
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 8 * a2 + 24);

  return v2();
}

void protobuf_c_service_generated_init(void *a1, _DWORD *a2, uint64_t a3)
{
  if (*a2 != 336960451) {
    protobuf_c_service_generated_init_cold_1();
  }
  a1[2] = a3;
  *a1 = a2;
  a1[1] = protobuf_c_service_invoke_internal;
  uint64_t v3 = a1 + 3;
  size_t v4 = 8 * a2[10];

  bzero(v3, v4);
}

uint64_t protobuf_c_service_destroy(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t protobuf_c_enum_descriptor_get_value_by_name(uint64_t result, char *__s2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 64);
    if (v3)
    {
      unsigned int v5 = *(_DWORD *)(result + 56);
      if (v5 >= 2)
      {
        LODWORD(v6) = 0;
        while (1)
        {
          uint64_t v7 = (v5 >> 1) + v6;
          int v8 = strcmp(*(const char **)(v3 + 16 * v7), __s2);
          if (!v8) {
            return *(void *)(v2 + 48) + 24 * *(unsigned int *)(v3 + 16 * v7 + 8);
          }
          unsigned int v9 = v5 + v6 + ~v7;
          if (v8 < 0) {
            uint64_t v6 = (v7 + 1);
          }
          else {
            uint64_t v6 = v6;
          }
          if (v8 >= 0) {
            v5 >>= 1;
          }
          else {
            unsigned int v5 = v9;
          }
          if (v5 <= 1)
          {
            uint64_t v7 = v6;
            if (v5) {
              goto LABEL_16;
            }
            return 0;
          }
        }
      }
      uint64_t v7 = 0;
      if (v5)
      {
LABEL_16:
        if (!strcmp(*(const char **)(v3 + 16 * v7), __s2)) {
          return *(void *)(v2 + 48) + 24 * *(unsigned int *)(v3 + 16 * v7 + 8);
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t protobuf_c_enum_descriptor_get_value(uint64_t a1, int a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 72);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v2 == 1)
  {
    unsigned int v4 = 0;
LABEL_10:
    int v10 = (int *)(v3 + 8 * v4);
    int v11 = *v10;
    if (*v10 > a2) {
      return 0;
    }
    int v12 = v10[1];
    if (v11 - v12 + *(_DWORD *)(v3 + 8 * (v4 + 1) + 4) <= a2) {
      return 0;
    }
    unsigned int v13 = v12 + a2 - v11;
    if ((v13 & 0x80000000) != 0) {
      return 0;
    }
  }
  else
  {
    unsigned int v4 = 0;
    while (1)
    {
      while (1)
      {
        unsigned int v5 = v2 >> 1;
        uint64_t v6 = (v2 >> 1) + v4;
        int v7 = *(_DWORD *)(v3 + 8 * v6);
        int v8 = a2 - v7;
        if (a2 >= v7) {
          break;
        }
        v2 >>= 1;
        if (v5 <= 1) {
          goto LABEL_9;
        }
      }
      int v9 = *(_DWORD *)(v3 + 8 * v6 + 4);
      if (*(_DWORD *)(v3 + 8 * (v6 + 1) + 4) + v7 - v9 > a2) {
        break;
      }
      v2 += v4 + ~v6;
      unsigned int v4 = v6 + 1;
      if (v2 <= 1)
      {
LABEL_9:
        if (!v2) {
          return 0;
        }
        goto LABEL_10;
      }
    }
    unsigned int v13 = v8 + v9;
    if (v8 + v9 < 0) {
      return 0;
    }
  }
  return *(void *)(a1 + 48) + 24 * v13;
}

const char **protobuf_c_message_descriptor_get_field_by_name(uint64_t a1, char *__s2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 48);
  if (v5 < 2)
  {
    uint64_t v6 = 0;
    if (v5)
    {
LABEL_14:
      int v12 = (const char **)(*(void *)(a1 + 56) + 72 * *(unsigned int *)(v3 + 4 * v6));
      if (!strcmp(*v12, __s2)) {
        return v12;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  LODWORD(v6) = 0;
  uint64_t v7 = *(void *)(a1 + 56);
  while (1)
  {
    unsigned int v8 = (v5 >> 1) + v6;
    int v9 = (const char **)(v7 + 72 * *(unsigned int *)(v3 + 4 * v8));
    int v10 = strcmp(*v9, __s2);
    if (!v10) {
      return v9;
    }
    unsigned int v11 = v5 + v6 + ~v8;
    if (v10 < 0) {
      uint64_t v6 = v8 + 1;
    }
    else {
      uint64_t v6 = v6;
    }
    if (v10 >= 0) {
      v5 >>= 1;
    }
    else {
      unsigned int v5 = v11;
    }
    if (v5 <= 1)
    {
      if (!v5) {
        return 0;
      }
      goto LABEL_14;
    }
  }
}

uint64_t protobuf_c_message_descriptor_get_field(uint64_t a1, int a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 72);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v2 == 1)
  {
    unsigned int v4 = 0;
LABEL_10:
    int v10 = (int *)(v3 + 8 * v4);
    int v11 = *v10;
    if (*v10 > a2) {
      return 0;
    }
    int v12 = v10[1];
    if (v11 - v12 + *(_DWORD *)(v3 + 8 * (v4 + 1) + 4) <= a2) {
      return 0;
    }
    unsigned int v13 = v12 + a2 - v11;
    if ((v13 & 0x80000000) != 0) {
      return 0;
    }
  }
  else
  {
    unsigned int v4 = 0;
    while (1)
    {
      while (1)
      {
        unsigned int v5 = v2 >> 1;
        uint64_t v6 = (v2 >> 1) + v4;
        int v7 = *(_DWORD *)(v3 + 8 * v6);
        int v8 = a2 - v7;
        if (a2 >= v7) {
          break;
        }
        v2 >>= 1;
        if (v5 <= 1) {
          goto LABEL_9;
        }
      }
      int v9 = *(_DWORD *)(v3 + 8 * v6 + 4);
      if (*(_DWORD *)(v3 + 8 * (v6 + 1) + 4) + v7 - v9 > a2) {
        break;
      }
      v2 += v4 + ~v6;
      unsigned int v4 = v6 + 1;
      if (v2 <= 1)
      {
LABEL_9:
        if (!v2) {
          return 0;
        }
        goto LABEL_10;
      }
    }
    unsigned int v13 = v8 + v9;
    if (v8 + v9 < 0) {
      return 0;
    }
  }
  return *(void *)(a1 + 56) + 72 * v13;
}

const char **protobuf_c_service_descriptor_get_method_by_name(uint64_t a1, char *__s2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 40);
  if (v5 < 2)
  {
    uint64_t v6 = 0;
    if (v5)
    {
LABEL_14:
      int v11 = (const char **)(*(void *)(a1 + 48) + 24 * *(unsigned int *)(v3 + 4 * v6));
      if (!strcmp(*v11, __s2)) {
        return v11;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  LODWORD(v6) = 0;
  uint64_t v7 = *(void *)(a1 + 48);
  while (1)
  {
    unsigned int v8 = v6 + (v5 >> 1);
    int v9 = (const char **)(v7 + 24 * *(unsigned int *)(v3 + 4 * v8));
    int v10 = strcmp(*v9, __s2);
    if (!v10) {
      return v9;
    }
    if (v10 >= 0) {
      v5 >>= 1;
    }
    else {
      v5 += v6 + ~v8;
    }
    if (v10 < 0) {
      uint64_t v6 = v8 + 1;
    }
    else {
      uint64_t v6 = v6;
    }
    if (v5 <= 1)
    {
      if (!v5) {
        return 0;
      }
      goto LABEL_14;
    }
  }
}

void *system_alloc(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x3E951BD8uLL);
}

void system_free(int a1, void *a2)
{
}

uint64_t parse_required_member(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  int v9 = *(char **)(a1 + 24);
  int v10 = *(unsigned __int8 *)(a1 + 4);
  switch(*(_DWORD *)(v4 + 16))
  {
    case 0:
    case 6:
    case 0xD:
      if (*(unsigned char *)(a1 + 4)) {
        return 0;
      }
      LODWORD(v11) = *v9 & 0x7F;
      if (v8 >= 2)
      {
        LODWORD(v11) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7);
        if (v8 != 2)
        {
          LODWORD(v11) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14);
          if (v8 >= 4)
          {
            LODWORD(v11) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14) & 0xF01FFFFF | ((v9[3] & 0x7F) << 21);
            if (v8 != 4) {
              LODWORD(v11) = v11 | (v9[4] << 28);
            }
          }
        }
      }
      goto LABEL_68;
    case 1:
      if (*(unsigned char *)(a1 + 4)) {
        return 0;
      }
      unsigned int v14 = *v9 & 0x7F;
      if (v8 >= 2)
      {
        unsigned int v14 = *v9 & 0x7F | ((v9[1] & 0x7F) << 7);
        if (v8 != 2)
        {
          unsigned int v14 = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14);
          if (v8 >= 4)
          {
            unsigned int v14 = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14) & 0xF01FFFFF | ((v9[3] & 0x7F) << 21);
            if (v8 != 4) {
              v14 |= v9[4] << 28;
            }
          }
        }
      }
      LODWORD(v11) = -(v14 & 1) ^ (v14 >> 1);
      goto LABEL_68;
    case 2:
    case 7:
    case 0xA:
      if (v10 != 5) {
        return 0;
      }
      LODWORD(v11) = *(_DWORD *)v9;
      goto LABEL_68;
    case 3:
    case 8:
      if (*(unsigned char *)(a1 + 4)) {
        return 0;
      }
      LODWORD(v13) = *v9 & 0x7F;
      if (v8 <= 4)
      {
        if (v8 >= 2)
        {
          LODWORD(v13) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7);
          if (v8 != 2)
          {
            LODWORD(v13) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14);
            if (v8 >= 4) {
              LODWORD(v13) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14) & 0xF01FFFFF | ((v9[3] & 0x7F) << 21);
            }
          }
        }
        unint64_t v13 = v13;
        goto LABEL_100;
      }
      unint64_t v13 = *v9 & 0x7F | (unint64_t)(((v9[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v9[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v9[3] & 0x7F) << 21);
      unint64_t v30 = *(void *)(a1 + 16) - 4;
      if (v30 < 8)
      {
        unsigned int v31 = 28;
        unint64_t v32 = 4;
        goto LABEL_98;
      }
      if (v30 >= 0x10)
      {
        unint64_t v37 = v30 & 0xFFFFFFFFFFFFFFF0;
        int8x16_t v85 = 0uLL;
        unsigned long long v86 = *v9 & 0x7F | (unint64_t)(((v9[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v9[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | (unsigned __int128)((unint64_t)(v9[3] & 0x7F) << 21);
        unsigned int v31 = 7 * ((v8 - 4) & 0xFFFFFFF0) + 28;
        int32x4_t v87 = (int32x4_t)xmmword_18EBDE2D0;
        int32x4_t v88 = (int32x4_t)xmmword_18EBDE2E0;
        int32x4_t v89 = (int32x4_t)xmmword_18EBDE2F0;
        v90.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
        v90.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
        v91.i64[0] = 0x7000000070;
        v91.i64[1] = 0x7000000070;
        int32x4_t v92 = (int32x4_t)xmmword_18EBDE300;
        uint32x4_t v93 = (int8x16_t *)(v9 + 4);
        unint64_t v94 = v30 & 0xFFFFFFFFFFFFFFF0;
        int8x16_t v95 = 0uLL;
        int8x16_t v96 = 0uLL;
        int8x16_t v97 = 0uLL;
        int8x16_t v98 = 0uLL;
        int8x16_t v99 = 0uLL;
        int8x16_t v100 = 0uLL;
        do
        {
          int8x16_t v101 = *v93++;
          uint8x16_t v102 = (uint8x16_t)vandq_s8(v101, v90);
          uint16x8_t v103 = vmovl_high_u8(v102);
          uint32x4_t v104 = vmovl_high_u16(v103);
          v105.i64[0] = v104.u32[2];
          v105.i64[1] = v104.u32[3];
          uint64x2_t v106 = v105;
          v105.i64[0] = v104.u32[0];
          v105.i64[1] = v104.u32[1];
          uint64x2_t v107 = v105;
          uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v103.i8);
          v105.i64[0] = v108.u32[2];
          v105.i64[1] = v108.u32[3];
          uint64x2_t v109 = v105;
          uint16x8_t v110 = vmovl_u8(*(uint8x8_t *)v102.i8);
          uint32x4_t v111 = vmovl_high_u16(v110);
          v105.i64[0] = v111.u32[2];
          v105.i64[1] = v111.u32[3];
          uint64x2_t v112 = v105;
          v105.i64[0] = v108.u32[0];
          v105.i64[1] = v108.u32[1];
          uint64x2_t v113 = v105;
          v105.i64[0] = v111.u32[0];
          v105.i64[1] = v111.u32[1];
          uint64x2_t v114 = v105;
          uint32x4_t v115 = vmovl_u16(*(uint16x4_t *)v110.i8);
          v105.i64[0] = v115.u32[2];
          v105.i64[1] = v115.u32[3];
          uint64x2_t v116 = v105;
          v105.i64[0] = v115.u32[0];
          v105.i64[1] = v115.u32[1];
          uint64x2_t v117 = v105;
          v105.i64[0] = v87.u32[2];
          v105.i64[1] = v87.u32[3];
          uint64x2_t v118 = v105;
          v105.i64[0] = v87.u32[0];
          v105.i64[1] = v87.u32[1];
          uint64x2_t v119 = v105;
          v105.i64[0] = v88.u32[2];
          v105.i64[1] = v88.u32[3];
          uint64x2_t v120 = v105;
          v105.i64[0] = v89.u32[2];
          v105.i64[1] = v89.u32[3];
          uint64x2_t v121 = v105;
          v105.i64[0] = v88.u32[0];
          v105.i64[1] = v88.u32[1];
          uint64x2_t v122 = v105;
          v105.i64[0] = v89.u32[0];
          v105.i64[1] = v89.u32[1];
          uint64x2_t v123 = v105;
          v105.i64[0] = v92.u32[2];
          v105.i64[1] = v92.u32[3];
          uint64x2_t v124 = v105;
          v105.i64[0] = v92.u32[0];
          v105.i64[1] = v92.u32[1];
          int8x16_t v100 = vorrq_s8((int8x16_t)vshlq_u64(v106, v118), v100);
          int8x16_t v99 = vorrq_s8((int8x16_t)vshlq_u64(v107, v119), v99);
          int8x16_t v98 = vorrq_s8((int8x16_t)vshlq_u64(v109, v120), v98);
          int8x16_t v96 = vorrq_s8((int8x16_t)vshlq_u64(v112, v121), v96);
          int8x16_t v97 = vorrq_s8((int8x16_t)vshlq_u64(v113, v122), v97);
          int8x16_t v95 = vorrq_s8((int8x16_t)vshlq_u64(v114, v123), v95);
          int8x16_t v85 = vorrq_s8((int8x16_t)vshlq_u64(v116, v124), v85);
          unsigned long long v86 = (unsigned __int128)vorrq_s8((int8x16_t)vshlq_u64(v117, v105), (int8x16_t)v86);
          int32x4_t v92 = vaddq_s32(v92, v91);
          int32x4_t v89 = vaddq_s32(v89, v91);
          int32x4_t v88 = vaddq_s32(v88, v91);
          int32x4_t v87 = vaddq_s32(v87, v91);
          v94 -= 16;
        }
        while (v94);
        int8x16_t v125 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v86, v97), vorrq_s8(v95, v99)), vorrq_s8(vorrq_s8(v85, v98), vorrq_s8(v96, v100)));
        unint64_t v13 = (unint64_t)vorr_s8(*(int8x8_t *)v125.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL));
        if (v30 == v37) {
          goto LABEL_100;
        }
        if (((v8 - 4) & 8) == 0)
        {
          unint64_t v32 = v37 | 4;
LABEL_98:
          unint64_t v126 = *(void *)(a1 + 16) - v32;
          int8x16_t v127 = &v9[v32];
          do
          {
            char v128 = *v127++;
            v13 |= (unint64_t)(v128 & 0x7F) << v31;
            v31 += 7;
            --v126;
          }
          while (v126);
          goto LABEL_100;
        }
      }
      else
      {
        unint64_t v37 = 0;
        unsigned int v31 = 28;
      }
      unint64_t v32 = v30 & 0xFFFFFFFFFFFFFFF8 | 4;
      int32x4_t v38 = vdupq_n_s32(v31);
      unsigned int v31 = 7 * ((v8 - 4) & 0xFFFFFFF8) + 28;
      int8x16_t v39 = 0uLL;
      int8x16_t v40 = (int8x16_t)v13;
      int32x4_t v41 = vaddq_s32(v38, (int32x4_t)xmmword_18EBDE300);
      int32x4_t v42 = vaddq_s32(v38, (int32x4_t)xmmword_18EBDE310);
      int32x4_t v43 = (int8x8_t *)&v9[v37 + 4];
      unint64_t v44 = v37 - (v30 & 0xFFFFFFFFFFFFFFF8);
      v45.i64[0] = 0x3800000038;
      v45.i64[1] = 0x3800000038;
      int8x16_t v46 = 0uLL;
      int8x16_t v47 = 0uLL;
      do
      {
        int8x8_t v48 = *v43++;
        uint16x8_t v49 = vmovl_u8((uint8x8_t)vand_s8(v48, (int8x8_t)0x7F7F7F7F7F7F7F7FLL));
        uint32x4_t v50 = vmovl_high_u16(v49);
        v51.i64[0] = v50.u32[2];
        v51.i64[1] = v50.u32[3];
        uint64x2_t v52 = v51;
        v51.i64[0] = v50.u32[0];
        v51.i64[1] = v50.u32[1];
        uint64x2_t v53 = v51;
        uint32x4_t v54 = vmovl_u16(*(uint16x4_t *)v49.i8);
        v51.i64[0] = v54.u32[2];
        v51.i64[1] = v54.u32[3];
        uint64x2_t v55 = v51;
        v51.i64[0] = v54.u32[0];
        v51.i64[1] = v54.u32[1];
        uint64x2_t v56 = v51;
        v51.i64[0] = v41.u32[2];
        v51.i64[1] = v41.u32[3];
        uint64x2_t v57 = v51;
        v51.i64[0] = v41.u32[0];
        v51.i64[1] = v41.u32[1];
        uint64x2_t v58 = v51;
        v51.i64[0] = v42.u32[2];
        v51.i64[1] = v42.u32[3];
        uint64x2_t v59 = v51;
        v51.i64[0] = v42.u32[0];
        v51.i64[1] = v42.u32[1];
        int8x16_t v47 = vorrq_s8((int8x16_t)vshlq_u64(v52, v57), v47);
        int8x16_t v46 = vorrq_s8((int8x16_t)vshlq_u64(v53, v58), v46);
        int8x16_t v39 = vorrq_s8((int8x16_t)vshlq_u64(v55, v59), v39);
        int8x16_t v40 = vorrq_s8((int8x16_t)vshlq_u64(v56, v51), v40);
        int32x4_t v42 = vaddq_s32(v42, v45);
        int32x4_t v41 = vaddq_s32(v41, v45);
        v44 += 8;
      }
      while (v44);
      int8x16_t v60 = vorrq_s8(vorrq_s8(v40, v46), vorrq_s8(v39, v47));
      unint64_t v13 = (unint64_t)vorr_s8(*(int8x8_t *)v60.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL));
      if (v30 != (v30 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_98;
      }
LABEL_100:
      *a2 = v13;
      return 1;
    case 4:
      if (*(unsigned char *)(a1 + 4)) {
        return 0;
      }
      LODWORD(v15) = *v9 & 0x7F;
      if (v8 <= 4)
      {
        if (v8 >= 2)
        {
          LODWORD(v15) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7);
          if (v8 != 2)
          {
            LODWORD(v15) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14);
            if (v8 >= 4) {
              LODWORD(v15) = *v9 & 0x7F | ((v9[1] & 0x7F) << 7) & 0x3FFF | ((v9[2] & 0x7F) << 14) & 0xF01FFFFF | ((v9[3] & 0x7F) << 21);
            }
          }
        }
        unint64_t v15 = v15;
LABEL_108:
        unint64_t v12 = -(uint64_t)(v15 & 1) ^ (v15 >> 1);
LABEL_12:
        *a2 = v12;
        return 1;
      }
      unint64_t v15 = *v9 & 0x7F | (unint64_t)(((v9[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v9[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v9[3] & 0x7F) << 21);
      unint64_t v34 = *(void *)(a1 + 16) - 4;
      if (v34 < 8)
      {
        unsigned int v35 = 28;
        unint64_t v36 = 4;
        goto LABEL_106;
      }
      if (v34 >= 0x10)
      {
        unint64_t v61 = v34 & 0xFFFFFFFFFFFFFFF0;
        int8x16_t v129 = 0uLL;
        unsigned long long v130 = *v9 & 0x7F | (unint64_t)(((v9[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v9[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | (unsigned __int128)((unint64_t)(v9[3] & 0x7F) << 21);
        unsigned int v35 = 7 * ((v8 - 4) & 0xFFFFFFF0) + 28;
        int32x4_t v131 = (int32x4_t)xmmword_18EBDE2D0;
        int32x4_t v132 = (int32x4_t)xmmword_18EBDE2E0;
        int32x4_t v133 = (int32x4_t)xmmword_18EBDE2F0;
        v134.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
        v134.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
        v135.i64[0] = 0x7000000070;
        v135.i64[1] = 0x7000000070;
        int32x4_t v136 = (int32x4_t)xmmword_18EBDE300;
        unint64_t v137 = (int8x16_t *)(v9 + 4);
        unint64_t v138 = v34 & 0xFFFFFFFFFFFFFFF0;
        int8x16_t v139 = 0uLL;
        int8x16_t v140 = 0uLL;
        int8x16_t v141 = 0uLL;
        int8x16_t v142 = 0uLL;
        int8x16_t v143 = 0uLL;
        int8x16_t v144 = 0uLL;
        do
        {
          int8x16_t v145 = *v137++;
          uint8x16_t v146 = (uint8x16_t)vandq_s8(v145, v134);
          uint16x8_t v147 = vmovl_high_u8(v146);
          uint32x4_t v148 = vmovl_high_u16(v147);
          v149.i64[0] = v148.u32[2];
          v149.i64[1] = v148.u32[3];
          uint64x2_t v150 = v149;
          v149.i64[0] = v148.u32[0];
          v149.i64[1] = v148.u32[1];
          uint64x2_t v151 = v149;
          uint32x4_t v152 = vmovl_u16(*(uint16x4_t *)v147.i8);
          v149.i64[0] = v152.u32[2];
          v149.i64[1] = v152.u32[3];
          uint64x2_t v153 = v149;
          uint16x8_t v154 = vmovl_u8(*(uint8x8_t *)v146.i8);
          uint32x4_t v155 = vmovl_high_u16(v154);
          v149.i64[0] = v155.u32[2];
          v149.i64[1] = v155.u32[3];
          uint64x2_t v156 = v149;
          v149.i64[0] = v152.u32[0];
          v149.i64[1] = v152.u32[1];
          uint64x2_t v157 = v149;
          v149.i64[0] = v155.u32[0];
          v149.i64[1] = v155.u32[1];
          uint64x2_t v158 = v149;
          uint32x4_t v159 = vmovl_u16(*(uint16x4_t *)v154.i8);
          v149.i64[0] = v159.u32[2];
          v149.i64[1] = v159.u32[3];
          uint64x2_t v160 = v149;
          v149.i64[0] = v159.u32[0];
          v149.i64[1] = v159.u32[1];
          uint64x2_t v161 = v149;
          v149.i64[0] = v131.u32[2];
          v149.i64[1] = v131.u32[3];
          uint64x2_t v162 = v149;
          v149.i64[0] = v131.u32[0];
          v149.i64[1] = v131.u32[1];
          uint64x2_t v163 = v149;
          v149.i64[0] = v132.u32[2];
          v149.i64[1] = v132.u32[3];
          uint64x2_t v164 = v149;
          v149.i64[0] = v133.u32[2];
          v149.i64[1] = v133.u32[3];
          uint64x2_t v165 = v149;
          v149.i64[0] = v132.u32[0];
          v149.i64[1] = v132.u32[1];
          uint64x2_t v166 = v149;
          v149.i64[0] = v133.u32[0];
          v149.i64[1] = v133.u32[1];
          uint64x2_t v167 = v149;
          v149.i64[0] = v136.u32[2];
          v149.i64[1] = v136.u32[3];
          uint64x2_t v168 = v149;
          v149.i64[0] = v136.u32[0];
          v149.i64[1] = v136.u32[1];
          int8x16_t v144 = vorrq_s8((int8x16_t)vshlq_u64(v150, v162), v144);
          int8x16_t v143 = vorrq_s8((int8x16_t)vshlq_u64(v151, v163), v143);
          int8x16_t v142 = vorrq_s8((int8x16_t)vshlq_u64(v153, v164), v142);
          int8x16_t v140 = vorrq_s8((int8x16_t)vshlq_u64(v156, v165), v140);
          int8x16_t v141 = vorrq_s8((int8x16_t)vshlq_u64(v157, v166), v141);
          int8x16_t v139 = vorrq_s8((int8x16_t)vshlq_u64(v158, v167), v139);
          int8x16_t v129 = vorrq_s8((int8x16_t)vshlq_u64(v160, v168), v129);
          unsigned long long v130 = (unsigned __int128)vorrq_s8((int8x16_t)vshlq_u64(v161, v149), (int8x16_t)v130);
          int32x4_t v136 = vaddq_s32(v136, v135);
          int32x4_t v133 = vaddq_s32(v133, v135);
          int32x4_t v132 = vaddq_s32(v132, v135);
          int32x4_t v131 = vaddq_s32(v131, v135);
          v138 -= 16;
        }
        while (v138);
        int8x16_t v169 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v130, v141), vorrq_s8(v139, v143)), vorrq_s8(vorrq_s8(v129, v142), vorrq_s8(v140, v144)));
        unint64_t v15 = (unint64_t)vorr_s8(*(int8x8_t *)v169.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v169, v169, 8uLL));
        if (v34 == v61) {
          goto LABEL_108;
        }
        if (((v8 - 4) & 8) == 0)
        {
          unint64_t v36 = v61 | 4;
          goto LABEL_106;
        }
      }
      else
      {
        unint64_t v61 = 0;
        unsigned int v35 = 28;
      }
      unint64_t v36 = v34 & 0xFFFFFFFFFFFFFFF8 | 4;
      int32x4_t v62 = vdupq_n_s32(v35);
      unsigned int v35 = 7 * ((v8 - 4) & 0xFFFFFFF8) + 28;
      int8x16_t v63 = 0uLL;
      int8x16_t v64 = (int8x16_t)v15;
      int32x4_t v65 = vaddq_s32(v62, (int32x4_t)xmmword_18EBDE300);
      int32x4_t v66 = vaddq_s32(v62, (int32x4_t)xmmword_18EBDE310);
      unint64_t v67 = (int8x8_t *)&v9[v61 + 4];
      unint64_t v68 = v61 - (v34 & 0xFFFFFFFFFFFFFFF8);
      v69.i64[0] = 0x3800000038;
      v69.i64[1] = 0x3800000038;
      int8x16_t v70 = 0uLL;
      int8x16_t v71 = 0uLL;
      do
      {
        int8x8_t v72 = *v67++;
        uint16x8_t v73 = vmovl_u8((uint8x8_t)vand_s8(v72, (int8x8_t)0x7F7F7F7F7F7F7F7FLL));
        uint32x4_t v74 = vmovl_high_u16(v73);
        v75.i64[0] = v74.u32[2];
        v75.i64[1] = v74.u32[3];
        uint64x2_t v76 = v75;
        v75.i64[0] = v74.u32[0];
        v75.i64[1] = v74.u32[1];
        uint64x2_t v77 = v75;
        uint32x4_t v78 = vmovl_u16(*(uint16x4_t *)v73.i8);
        v75.i64[0] = v78.u32[2];
        v75.i64[1] = v78.u32[3];
        uint64x2_t v79 = v75;
        v75.i64[0] = v78.u32[0];
        v75.i64[1] = v78.u32[1];
        uint64x2_t v80 = v75;
        v75.i64[0] = v65.u32[2];
        v75.i64[1] = v65.u32[3];
        uint64x2_t v81 = v75;
        v75.i64[0] = v65.u32[0];
        v75.i64[1] = v65.u32[1];
        uint64x2_t v82 = v75;
        v75.i64[0] = v66.u32[2];
        v75.i64[1] = v66.u32[3];
        uint64x2_t v83 = v75;
        v75.i64[0] = v66.u32[0];
        v75.i64[1] = v66.u32[1];
        int8x16_t v71 = vorrq_s8((int8x16_t)vshlq_u64(v76, v81), v71);
        int8x16_t v70 = vorrq_s8((int8x16_t)vshlq_u64(v77, v82), v70);
        int8x16_t v63 = vorrq_s8((int8x16_t)vshlq_u64(v79, v83), v63);
        int8x16_t v64 = vorrq_s8((int8x16_t)vshlq_u64(v80, v75), v64);
        int32x4_t v66 = vaddq_s32(v66, v69);
        int32x4_t v65 = vaddq_s32(v65, v69);
        v68 += 8;
      }
      while (v68);
      int8x16_t v84 = vorrq_s8(vorrq_s8(v64, v70), vorrq_s8(v63, v71));
      unint64_t v15 = (unint64_t)vorr_s8(*(int8x8_t *)v84.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL));
      if (v34 == (v34 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_108;
      }
LABEL_106:
      unint64_t v170 = *(void *)(a1 + 16) - v36;
      uint64_t v171 = &v9[v36];
      do
      {
        char v172 = *v171++;
        v15 |= (unint64_t)(v172 & 0x7F) << v35;
        v35 += 7;
        --v170;
      }
      while (v170);
      goto LABEL_108;
    case 5:
    case 9:
    case 0xB:
      if (v10 != 1) {
        return 0;
      }
      unint64_t v12 = *(void *)v9;
      goto LABEL_12;
    case 0xC:
      if (v8)
      {
        uint64_t v11 = *(void *)(a1 + 16);
        while (1)
        {
          char v16 = *v9++;
          if ((v16 & 0x7F) != 0) {
            break;
          }
          if (!--v11) {
            goto LABEL_68;
          }
        }
        LODWORD(v11) = 1;
      }
      else
      {
        LODWORD(v11) = 0;
      }
LABEL_68:
      *(_DWORD *)a2 = v11;
      return 1;
    case 0xE:
      if (v10 != 2) {
        return 0;
      }
      int v17 = *(unsigned __int8 *)(a1 + 5);
      if (a4)
      {
        uint64_t v18 = *a2;
        if (*a2)
        {
          if (v18 != *(void *)(v4 + 40)) {
            (*(void (**)(void))(a3 + 8))(*(void *)(a3 + 16));
          }
        }
      }
      size_t v19 = (v8 - v17);
      uint64_t result = (*(uint64_t (**)(void, void))a3)(*(void *)(a3 + 16), (v19 + 1));
      *a2 = result;
      if (!result) {
        return result;
      }
      memcpy((void *)result, &v9[v17], v19);
      *(unsigned char *)(*a2 + v19) = 0;
      return 1;
    case 0xF:
      if (v10 != 2) {
        return 0;
      }
      unsigned int v21 = *(unsigned __int8 *)(a1 + 5);
      if (a4)
      {
        uint64_t v22 = a2[1];
        if (v22)
        {
          uint64_t v23 = *(void *)(v4 + 40);
          if (!v23 || v22 != *(void *)(v23 + 8)) {
            (*(void (**)(void))(a3 + 8))(*(void *)(a3 + 16));
          }
        }
      }
      BOOL v24 = v8 >= v21;
      size_t v25 = v8 - v21;
      if (v25 != 0 && v24)
      {
        uint64_t result = (*(uint64_t (**)(void, size_t))a3)(*(void *)(a3 + 16), v25);
        a2[1] = result;
        if (!result) {
          return result;
        }
        memcpy((void *)result, &v9[v21], v25);
      }
      else
      {
        a2[1] = 0;
      }
      *a2 = v25;
      return 1;
    case 0x10:
      if (v10 != 2) {
        return 0;
      }
      uint64_t v26 = *(void **)(v4 + 40);
      int v27 = (uint64_t *)protobuf_c_message_unpack(*(void *)(v4 + 32), a3, v8 - *(unsigned __int8 *)(a1 + 5), &v9[*(unsigned __int8 *)(a1 + 5)]);
      if (a4)
      {
        int v28 = (void *)*a2;
        int v29 = 1;
        if (*a2 && v28 != v26)
        {
          if (v27)
          {
            int v29 = merge_messages((uint64_t)v28, v27, a3);
            int v28 = (void *)*a2;
          }
          protobuf_c_message_free_unpacked(v28, (uint64_t (**)(int, size_t))a3);
        }
      }
      else
      {
        int v29 = 1;
      }
      *a2 = v27;
      if (v27) {
        BOOL v33 = v29 == 0;
      }
      else {
        BOOL v33 = 1;
      }
      return !v33;
    default:
      return 0;
  }
}

uint64_t merge_messages(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (!*(_DWORD *)(*a2 + 48)) {
    return 1;
  }
  unint64_t v7 = 0;
  uint64_t v8 = *(void *)(v3 + 56);
  while (1)
  {
    int v9 = *(_DWORD *)(v8 + 72 * v7 + 12);
    if (v9 != 1 && v9 != 3)
    {
      if (v9 == 2)
      {
        uint64_t v13 = v8 + 72 * v7;
        uint64_t v14 = *(unsigned int *)(v13 + 20);
        uint64_t v15 = *(void *)(a1 + v14);
        if (v15)
        {
          uint64_t v16 = *(unsigned int *)(v13 + 24);
          uint64_t v17 = *(uint64_t *)((char *)a2 + v14);
          if (v17)
          {
            uint64_t v18 = *(int *)(v8 + 72 * v7 + 16);
            if (v18 >= 0x11) {
              protobuf_c_message_pack_cold_1();
            }
            uint64_t v19 = qword_18EBDE350[v18];
            uint64_t result = (*(uint64_t (**)(void, uint64_t))a3)(*(void *)(a3 + 16), v19 * (v17 + v15));
            if (!result) {
              return result;
            }
            uint64_t v21 = result;
            memcpy((void *)result, *(const void **)(a1 + v16), *(void *)(a1 + v14) * v19);
            memcpy((void *)(v21 + *(void *)(a1 + v14) * v19), *(const void **)((char *)a2 + v16), *(uint64_t *)((char *)a2 + v14) * v19);
            if (*(uint64_t *)((char *)a2 + v16)) {
              (*(void (**)(void))(a3 + 8))(*(void *)(a3 + 16));
            }
            if (*(void *)(a1 + v16)) {
              (*(void (**)(void))(a3 + 8))(*(void *)(a3 + 16));
            }
            *(uint64_t *)((char *)a2 + v16) = v21;
            *(uint64_t *)((char *)a2 + v14) += *(void *)(a1 + v14);
          }
          else
          {
            *(uint64_t *)((char *)a2 + v14) = v15;
            *(uint64_t *)((char *)a2 + v16) = *(void *)(a1 + v16);
          }
          *(void *)(a1 + v14) = 0;
          *(void *)(a1 + v16) = 0;
        }
      }
      goto LABEL_4;
    }
    uint64_t v11 = v8 + 72 * v7;
    uint64_t v12 = *(unsigned int *)(v11 + 20);
    if ((*(unsigned char *)(v11 + 48) & 4) != 0) {
      break;
    }
LABEL_38:
    uint64_t v34 = *(unsigned int *)(v11 + 24);
    unsigned int v35 = (void *)(a1 + v34);
    unint64_t v36 = (uint64_t *)((char *)a2 + v34);
    uint64_t v37 = *(void *)(v11 + 40);
    unsigned int v38 = *(_DWORD *)(v11 + 16);
    switch(v38)
    {
      case 0xEu:
        if (*v35 != v37 && *v36 == v37)
        {
LABEL_50:
          size_t v40 = 8;
          goto LABEL_66;
        }
        break;
      case 0xFu:
        uint64_t v41 = v35[1];
        if (v41)
        {
          uint64_t v42 = v36[1];
          if (v37)
          {
            uint64_t v43 = *(void *)(v37 + 8);
            if (v41 != v43 && (!v42 || v42 == v43))
            {
LABEL_65:
              size_t v40 = 16;
LABEL_66:
              memcpy(v36, v35, v40);
              bzero(v35, v40);
              if (*(_DWORD *)(v11 + 20))
              {
                *(_DWORD *)((char *)a2 + v12) = *(_DWORD *)(a1 + v12);
                *(_DWORD *)(a1 + v12) = 0;
              }
            }
          }
          else if (!v42)
          {
            goto LABEL_65;
          }
        }
        break;
      case 0x10u:
        if (*v35)
        {
          if (!*v36) {
            goto LABEL_50;
          }
          uint64_t result = merge_messages(*v35, *v36, a3);
          if (!result) {
            return result;
          }
        }
        break;
      default:
        if (*(_DWORD *)(a1 + v12) && !*(_DWORD *)((char *)a2 + v12))
        {
          if (v38 >= 0xE) {
            protobuf_c_message_pack_cold_1();
          }
          size_t v40 = qword_18EBDE3D8[v38];
          goto LABEL_66;
        }
        break;
    }
LABEL_4:
    ++v7;
    uint64_t v3 = *a2;
    if (v7 >= *(unsigned int *)(*a2 + 48)) {
      return 1;
    }
  }
  if (*(_DWORD *)((char *)a2 + v12)) {
    goto LABEL_4;
  }
  uint64_t result = *(unsigned int *)(v3 + 72);
  uint64_t v22 = *(void *)(v3 + 80);
  int v23 = *(_DWORD *)(a1 + v12);
  if (result == 1)
  {
    unsigned int v24 = 0;
LABEL_34:
    unint64_t v30 = (int *)(v22 + 8 * v24);
    int v31 = *v30;
    if (*v30 > v23) {
      return 0;
    }
    int v32 = v30[1];
    if (v31 - v32 + *(_DWORD *)(v22 + 8 * (v24 + 1) + 4) <= v23) {
      return 0;
    }
    unsigned int v33 = v32 + v23 - v31;
    if ((v33 & 0x80000000) != 0) {
      return 0;
    }
LABEL_37:
    uint64_t v11 = *(void *)(v3 + 56) + 72 * v33;
    goto LABEL_38;
  }
  if (!result) {
    return result;
  }
  unsigned int v24 = 0;
  while (1)
  {
    while (1)
    {
      unsigned int v25 = result >> 1;
      uint64_t v26 = (result >> 1) + v24;
      int v27 = *(_DWORD *)(v22 + 8 * v26);
      int v28 = v23 - v27;
      if (v23 >= v27) {
        break;
      }
      uint64_t result = result >> 1;
      if (v25 <= 1) {
        goto LABEL_29;
      }
    }
    int v29 = *(_DWORD *)(v22 + 8 * v26 + 4);
    if (*(_DWORD *)(v22 + 8 * (v26 + 1) + 4) + v27 - v29 > v23) {
      break;
    }
    uint64_t result = result + v24 + ~v26;
    unsigned int v24 = v26 + 1;
    if (result <= 1)
    {
LABEL_29:
      if (result) {
        goto LABEL_34;
      }
      return result;
    }
  }
  unsigned int v33 = v28 + v29;
  if (((v28 + v29) & 0x80000000) == 0) {
    goto LABEL_37;
  }
  return 0;
}

void required_field_get_packed_size_cold_1()
{
}

void protobuf_c_message_pack_cold_1()
{
}

void protobuf_c_message_pack_cold_2()
{
}

void protobuf_c_message_pack_cold_3()
{
  __assert_rtn("repeated_field_pack", "protobuf-c.c", 1440, "actual_length_size == length_size_min + 1");
}

void protobuf_c_message_pack_cold_4()
{
  __assert_rtn("protobuf_c_message_pack", "protobuf-c.c", 1478, "((message)->descriptor)->magic == PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC");
}

void required_field_pack_cold_1()
{
}

void protobuf_c_message_pack_to_buffer_cold_2()
{
}

void protobuf_c_message_pack_to_buffer_cold_3()
{
}

void protobuf_c_message_pack_to_buffer_cold_4()
{
  __assert_rtn("repeated_field_pack_to_buffer", "protobuf-c.c", 1926, "tmp == payload_len");
}

void required_field_pack_to_buffer_cold_1()
{
}

void protobuf_c_message_unpack_cold_1()
{
}

void protobuf_c_message_unpack_cold_5()
{
}

void protobuf_c_message_unpack_cold_6()
{
  __assert_rtn("protobuf_c_message_unpack", "protobuf-c.c", 3242, "rv->descriptor != NULL");
}

void protobuf_c_message_unpack_cold_8()
{
  __assert_rtn("protobuf_c_message_unpack", "protobuf-c.c", 3056, "(desc)->magic == PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC");
}

void protobuf_c_message_free_unpacked_cold_1()
{
  __assert_rtn("protobuf_c_message_free_unpacked", "protobuf-c.c", 3330, "((message)->descriptor)->magic == PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC");
}

void protobuf_c_service_invoke_internal_cold_1()
{
}

void protobuf_c_service_generated_init_cold_1()
{
  __assert_rtn("protobuf_c_service_generated_init", "protobuf-c.c", 3537, "(descriptor)->magic == PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC");
}

double pg_query__parse_result__init(_OWORD *a1)
{
  *a1 = pg_query__parse_result__init_init_value;
  a1[1] = unk_1E55D9CE0;
  double result = 0.0;
  a1[2] = xmmword_1E55D9CF0;
  return result;
}

uint64_t pg_query__parse_result__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__parse_result__descriptor) {
    pg_query__parse_result__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__parse_result__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__parse_result__descriptor) {
    pg_query__parse_result__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__parse_result__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__parse_result__descriptor) {
    pg_query__parse_result__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__parse_result__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__parse_result__descriptor, a1, a2, a3);
}

void **pg_query__parse_result__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__parse_result__descriptor) {
      pg_query__parse_result__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__scan_result__init(_OWORD *a1)
{
  *a1 = pg_query__scan_result__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55D9D10;
  double result = 0.0;
  a1[2] = xmmword_1E55D9D20;
  return result;
}

uint64_t pg_query__scan_result__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__scan_result__descriptor) {
    pg_query__scan_result__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__scan_result__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__scan_result__descriptor) {
    pg_query__scan_result__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__scan_result__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__scan_result__descriptor) {
    pg_query__scan_result__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__scan_result__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__scan_result__descriptor, a1, a2, a3);
}

void **pg_query__scan_result__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__scan_result__descriptor) {
      pg_query__scan_result__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__node__init(uint64_t a1)
{
  double result = *(double *)&pg_query__node__init_init_value;
  *(_OWORD *)a1 = pg_query__node__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55D9D40;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__node__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__node__descriptor) {
    pg_query__node__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__node__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__node__descriptor) {
    pg_query__node__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__node__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__node__descriptor) {
    pg_query__node__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__node__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__node__descriptor, a1, a2, a3);
}

void **pg_query__node__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__node__descriptor) {
      pg_query__node__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__integer__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__integer__init_init_value;
  *a1 = pg_query__integer__init_init_value;
  a1[1] = unk_1E55D9D68;
  return result;
}

uint64_t pg_query__integer__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__integer__descriptor) {
    pg_query__integer__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__integer__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__integer__descriptor) {
    pg_query__integer__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__integer__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__integer__descriptor) {
    pg_query__integer__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__integer__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__integer__descriptor, a1, a2, a3);
}

void **pg_query__integer__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__integer__descriptor) {
      pg_query__integer__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__float__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__float__init_init_value;
  *a1 = pg_query__float__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55D9D88;
  return result;
}

uint64_t pg_query__float__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__float__descriptor) {
    pg_query__float__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__float__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__float__descriptor) {
    pg_query__float__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__float__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__float__descriptor) {
    pg_query__float__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__float__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__float__descriptor, a1, a2, a3);
}

void **pg_query__float__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__float__descriptor) {
      pg_query__float__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__string__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__string__init_init_value;
  *a1 = pg_query__string__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55D9DA8;
  return result;
}

uint64_t pg_query__string__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__string__descriptor) {
    pg_query__string__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__string__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__string__descriptor) {
    pg_query__string__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__string__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__string__descriptor) {
    pg_query__string__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__string__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__string__descriptor, a1, a2, a3);
}

void **pg_query__string__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__string__descriptor) {
      pg_query__string__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__bit_string__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__bit_string__init_init_value;
  *a1 = pg_query__bit_string__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55D9DC8;
  return result;
}

uint64_t pg_query__bit_string__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__bit_string__descriptor) {
    pg_query__bit_string__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__bit_string__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__bit_string__descriptor) {
    pg_query__bit_string__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__bit_string__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__bit_string__descriptor) {
    pg_query__bit_string__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__bit_string__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__bit_string__descriptor, a1, a2, a3);
}

void **pg_query__bit_string__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__bit_string__descriptor) {
      pg_query__bit_string__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__null__init(uint64_t a1)
{
  double result = *(double *)&pg_query__null__init_init_value;
  *(_OWORD *)a1 = pg_query__null__init_init_value;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t pg_query__null__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__null__descriptor) {
    pg_query__null__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__null__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__null__descriptor) {
    pg_query__null__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__null__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__null__descriptor) {
    pg_query__null__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__null__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__null__descriptor, a1, a2, a3);
}

void **pg_query__null__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__null__descriptor) {
      pg_query__null__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__list__init(uint64_t a1)
{
  double result = *(double *)&pg_query__list__init_init_value;
  *(_OWORD *)a1 = pg_query__list__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55D9E00;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__list__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__list__descriptor) {
    pg_query__list__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__list__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__list__descriptor) {
    pg_query__list__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__list__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__list__descriptor) {
    pg_query__list__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__list__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__list__descriptor, a1, a2, a3);
}

void **pg_query__list__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__list__descriptor) {
      pg_query__list__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__oid_list__init(uint64_t a1)
{
  double result = *(double *)&pg_query__oid_list__init_init_value;
  *(_OWORD *)a1 = pg_query__oid_list__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55D9E28;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__oid_list__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__oid_list__descriptor) {
    pg_query__oid_list__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__oid_list__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__oid_list__descriptor) {
    pg_query__oid_list__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__oid_list__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__oid_list__descriptor) {
    pg_query__oid_list__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__oid_list__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__oid_list__descriptor, a1, a2, a3);
}

void **pg_query__oid_list__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__oid_list__descriptor) {
      pg_query__oid_list__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__int_list__init(uint64_t a1)
{
  double result = *(double *)&pg_query__int_list__init_init_value;
  *(_OWORD *)a1 = pg_query__int_list__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55D9E50;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__int_list__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__int_list__descriptor) {
    pg_query__int_list__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__int_list__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__int_list__descriptor) {
    pg_query__int_list__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__int_list__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__int_list__descriptor) {
    pg_query__int_list__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__int_list__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__int_list__descriptor, a1, a2, a3);
}

void **pg_query__int_list__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__int_list__descriptor) {
      pg_query__int_list__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alias__init(_OWORD *a1)
{
  *a1 = pg_query__alias__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55D9E78;
  double result = 0.0;
  a1[2] = xmmword_1E55D9E88;
  return result;
}

uint64_t pg_query__alias__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alias__descriptor) {
    pg_query__alias__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alias__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alias__descriptor) {
    pg_query__alias__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alias__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alias__descriptor) {
    pg_query__alias__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alias__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alias__descriptor, a1, a2, a3);
}

void **pg_query__alias__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alias__descriptor) {
      pg_query__alias__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_var__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55D9EB8;
  a1[3] = unk_1E55D9EC8;
  a1[4] = xmmword_1E55D9ED8;
  double result = 0.0;
  *a1 = pg_query__range_var__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55D9EA8;
  return result;
}

uint64_t pg_query__range_var__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_var__descriptor) {
    pg_query__range_var__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_var__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__range_var__descriptor) {
    pg_query__range_var__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__range_var__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__range_var__descriptor) {
    pg_query__range_var__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__range_var__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_var__descriptor, a1, a2, a3);
}

void **pg_query__range_var__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_var__descriptor) {
      pg_query__range_var__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__table_func__init(_OWORD *a1)
{
  a1[8] = xmmword_1E55D9F68;
  a1[9] = unk_1E55D9F78;
  a1[10] = xmmword_1E55D9F88;
  a1[11] = unk_1E55D9F98;
  a1[4] = xmmword_1E55D9F28;
  a1[5] = unk_1E55D9F38;
  a1[6] = xmmword_1E55D9F48;
  a1[7] = unk_1E55D9F58;
  *a1 = pg_query__table_func__init_init_value;
  a1[1] = unk_1E55D9EF8;
  double result = 0.0;
  a1[2] = xmmword_1E55D9F08;
  a1[3] = unk_1E55D9F18;
  return result;
}

uint64_t pg_query__table_func__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__table_func__descriptor) {
    pg_query__table_func__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__table_func__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__table_func__descriptor) {
    pg_query__table_func__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__table_func__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__table_func__descriptor) {
    pg_query__table_func__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__table_func__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__table_func__descriptor, a1, a2, a3);
}

void **pg_query__table_func__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__table_func__descriptor) {
      pg_query__table_func__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__expr__init(uint64_t a1)
{
  double result = *(double *)&pg_query__expr__init_init_value;
  *(_OWORD *)a1 = pg_query__expr__init_init_value;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t pg_query__expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__expr__descriptor) {
    pg_query__expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__expr__descriptor) {
    pg_query__expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__expr__descriptor) {
    pg_query__expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__expr__descriptor, a1, a2, a3);
}

void **pg_query__expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__expr__descriptor) {
      pg_query__expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__var__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55D9FE0;
  *(_OWORD *)(a1 + 48) = unk_1E55D9FF0;
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = pg_query__var__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55D9FD0;
  return result;
}

uint64_t pg_query__var__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__var__descriptor) {
    pg_query__var__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__var__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__var__descriptor) {
    pg_query__var__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__var__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__var__descriptor) {
    pg_query__var__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__var__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__var__descriptor, a1, a2, a3);
}

void **pg_query__var__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__var__descriptor) {
      pg_query__var__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__param__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__param__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DA018;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA028;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__param__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__param__descriptor) {
    pg_query__param__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__param__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__param__descriptor) {
    pg_query__param__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__param__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__param__descriptor, a1, a2, a3);
}

void **pg_query__param__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__param__descriptor) {
      pg_query__param__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__aggref__init(_OWORD *a1)
{
  a1[8] = xmmword_1E55DA0C0;
  a1[9] = unk_1E55DA0D0;
  a1[10] = xmmword_1E55DA0E0;
  a1[4] = xmmword_1E55DA080;
  a1[5] = unk_1E55DA090;
  a1[6] = xmmword_1E55DA0A0;
  a1[7] = unk_1E55DA0B0;
  *a1 = pg_query__aggref__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DA050;
  double result = dbl_1E55DA070[0];
  a1[2] = xmmword_1E55DA060;
  a1[3] = *(_OWORD *)dbl_1E55DA070;
  return result;
}

uint64_t pg_query__aggref__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__aggref__descriptor) {
    pg_query__aggref__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__aggref__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__aggref__descriptor) {
    pg_query__aggref__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__aggref__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__aggref__descriptor) {
    pg_query__aggref__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__aggref__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__aggref__descriptor, a1, a2, a3);
}

void **pg_query__aggref__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__aggref__descriptor) {
      pg_query__aggref__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__grouping_func__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA110;
  *(_OWORD *)(a1 + 48) = unk_1E55DA120;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DA130;
  *(void *)(a1 + 8errstart(20, 0) = 0;
  double result = *(double *)&pg_query__grouping_func__init_init_value;
  *(_OWORD *)a1 = pg_query__grouping_func__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DA100;
  return result;
}

uint64_t pg_query__grouping_func__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__grouping_func__descriptor) {
    pg_query__grouping_func__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__grouping_func__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__grouping_func__descriptor) {
    pg_query__grouping_func__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__grouping_func__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__grouping_func__descriptor) {
    pg_query__grouping_func__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__grouping_func__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__grouping_func__descriptor, a1, a2, a3);
}

void **pg_query__grouping_func__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__grouping_func__descriptor) {
      pg_query__grouping_func__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__window_func__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA168;
  *(_OWORD *)(a1 + 48) = unk_1E55DA178;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DA188;
  *(void *)(a1 + 8errstart(20, 0) = 0;
  double result = *(double *)&pg_query__window_func__init_init_value;
  *(_OWORD *)a1 = pg_query__window_func__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DA158;
  return result;
}

uint64_t pg_query__window_func__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__window_func__descriptor) {
    pg_query__window_func__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__window_func__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__window_func__descriptor) {
    pg_query__window_func__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__window_func__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__window_func__descriptor) {
    pg_query__window_func__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__window_func__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__window_func__descriptor, a1, a2, a3);
}

void **pg_query__window_func__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__window_func__descriptor) {
      pg_query__window_func__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__subscripting_ref__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DA1C0;
  a1[3] = unk_1E55DA1D0;
  a1[4] = xmmword_1E55DA1E0;
  a1[5] = unk_1E55DA1F0;
  double result = *(double *)&pg_query__subscripting_ref__init_init_value;
  *a1 = pg_query__subscripting_ref__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DA1B0;
  return result;
}

uint64_t pg_query__subscripting_ref__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__subscripting_ref__descriptor) {
    pg_query__subscripting_ref__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__subscripting_ref__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__subscripting_ref__descriptor) {
    pg_query__subscripting_ref__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__subscripting_ref__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__subscripting_ref__descriptor) {
    pg_query__subscripting_ref__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__subscripting_ref__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__subscripting_ref__descriptor, a1, a2, a3);
}

void **pg_query__subscripting_ref__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__subscripting_ref__descriptor) {
      pg_query__subscripting_ref__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__func_expr__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA220;
  *(_OWORD *)(a1 + 48) = unk_1E55DA230;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DA240;
  *(void *)(a1 + 8errstart(20, 0) = 0;
  double result = *(double *)&pg_query__func_expr__init_init_value;
  *(_OWORD *)a1 = pg_query__func_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DA210;
  return result;
}

uint64_t pg_query__func_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__func_expr__descriptor) {
    pg_query__func_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__func_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__func_expr__descriptor) {
    pg_query__func_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__func_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__func_expr__descriptor) {
    pg_query__func_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__func_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__func_expr__descriptor, a1, a2, a3);
}

void **pg_query__func_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__func_expr__descriptor) {
      pg_query__func_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__named_arg_expr__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__named_arg_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DA268;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA278;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__named_arg_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__named_arg_expr__descriptor) {
    pg_query__named_arg_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__named_arg_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__named_arg_expr__descriptor) {
    pg_query__named_arg_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__named_arg_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__named_arg_expr__descriptor) {
    pg_query__named_arg_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__named_arg_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__named_arg_expr__descriptor, a1, a2, a3);
}

void **pg_query__named_arg_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__named_arg_expr__descriptor) {
      pg_query__named_arg_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__op_expr__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DA2B0;
  a1[3] = unk_1E55DA2C0;
  a1[4] = xmmword_1E55DA2D0;
  double result = dbl_1E55DA2A0[0];
  *a1 = pg_query__op_expr__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E55DA2A0;
  return result;
}

uint64_t pg_query__op_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__op_expr__descriptor) {
    pg_query__op_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__op_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__op_expr__descriptor) {
    pg_query__op_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__op_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__op_expr__descriptor) {
    pg_query__op_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__op_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__op_expr__descriptor, a1, a2, a3);
}

void **pg_query__op_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__op_expr__descriptor) {
      pg_query__op_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__distinct_expr__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DA300;
  a1[3] = unk_1E55DA310;
  a1[4] = xmmword_1E55DA320;
  double result = 0.0;
  *a1 = pg_query__distinct_expr__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DA2F0;
  return result;
}

uint64_t pg_query__distinct_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__distinct_expr__descriptor) {
    pg_query__distinct_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__distinct_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__distinct_expr__descriptor) {
    pg_query__distinct_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__distinct_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__distinct_expr__descriptor) {
    pg_query__distinct_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__distinct_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__distinct_expr__descriptor, a1, a2, a3);
}

void **pg_query__distinct_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__distinct_expr__descriptor) {
      pg_query__distinct_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__null_if_expr__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DA350;
  a1[3] = unk_1E55DA360;
  a1[4] = xmmword_1E55DA370;
  double result = dbl_1E55DA340[0];
  *a1 = pg_query__null_if_expr__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E55DA340;
  return result;
}

uint64_t pg_query__null_if_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__null_if_expr__descriptor) {
    pg_query__null_if_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__null_if_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__null_if_expr__descriptor) {
    pg_query__null_if_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__null_if_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__null_if_expr__descriptor) {
    pg_query__null_if_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__null_if_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__null_if_expr__descriptor, a1, a2, a3);
}

void **pg_query__null_if_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__null_if_expr__descriptor) {
      pg_query__null_if_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__scalar_array_op_expr__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA3A0;
  *(_OWORD *)(a1 + 48) = unk_1E55DA3B0;
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = pg_query__scalar_array_op_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DA390;
  return result;
}

uint64_t pg_query__scalar_array_op_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__scalar_array_op_expr__descriptor) {
    pg_query__scalar_array_op_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__scalar_array_op_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__scalar_array_op_expr__descriptor) {
    pg_query__scalar_array_op_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__scalar_array_op_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__scalar_array_op_expr__descriptor) {
    pg_query__scalar_array_op_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__scalar_array_op_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__scalar_array_op_expr__descriptor, a1, a2, a3);
}

void **pg_query__scalar_array_op_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__scalar_array_op_expr__descriptor) {
      pg_query__scalar_array_op_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__BOOL_expr__init(_OWORD *a1)
{
  *a1 = pg_query__BOOL_expr__init_init_value;
  a1[1] = unk_1E55DA3D8;
  double result = 0.0;
  a1[2] = xmmword_1E55DA3E8;
  a1[3] = unk_1E55DA3F8;
  return result;
}

uint64_t pg_query__BOOL_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__BOOL_expr__descriptor) {
    pg_query__BOOL_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__BOOL_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__BOOL_expr__descriptor) {
    pg_query__BOOL_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__BOOL_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__BOOL_expr__descriptor, a1, a2, a3);
}

void **pg_query__BOOL_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__BOOL_expr__descriptor) {
      pg_query__BOOL_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__sub_link__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DA428;
  a1[3] = unk_1E55DA438;
  a1[4] = xmmword_1E55DA448;
  double result = dbl_1E55DA418[0];
  *a1 = pg_query__sub_link__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E55DA418;
  return result;
}

uint64_t pg_query__sub_link__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__sub_link__descriptor) {
    pg_query__sub_link__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__sub_link__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__sub_link__descriptor) {
    pg_query__sub_link__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__sub_link__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__sub_link__descriptor, a1, a2, a3);
}

void **pg_query__sub_link__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__sub_link__descriptor) {
      pg_query__sub_link__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

uint64_t pg_query__sub_plan__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__sub_plan__descriptor) {
    pg_query__sub_plan__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__sub_plan__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__sub_plan__descriptor) {
    pg_query__sub_plan__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__sub_plan__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__sub_plan__descriptor) {
    pg_query__sub_plan__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__sub_plan__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__sub_plan__descriptor, a1, a2, a3);
}

void **pg_query__sub_plan__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__sub_plan__descriptor) {
      pg_query__sub_plan__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alternative_sub_plan__init(_OWORD *a1)
{
  *a1 = pg_query__alternative_sub_plan__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DA510;
  double result = 0.0;
  a1[2] = xmmword_1E55DA520;
  return result;
}

uint64_t pg_query__alternative_sub_plan__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alternative_sub_plan__descriptor) {
    pg_query__alternative_sub_plan__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alternative_sub_plan__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alternative_sub_plan__descriptor) {
    pg_query__alternative_sub_plan__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alternative_sub_plan__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alternative_sub_plan__descriptor, a1, a2, a3);
}

void **pg_query__alternative_sub_plan__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alternative_sub_plan__descriptor) {
      pg_query__alternative_sub_plan__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

uint64_t pg_query__field_select__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__field_select__descriptor) {
    pg_query__field_select__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__field_select__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__field_select__descriptor) {
    pg_query__field_select__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__field_select__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__field_select__descriptor, a1, a2, a3);
}

double pg_query__field_store__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DA588;
  a1[3] = unk_1E55DA598;
  a1[4] = xmmword_1E55DA5A8;
  double result = dbl_1E55DA578[0];
  *a1 = pg_query__field_store__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E55DA578;
  return result;
}

uint64_t pg_query__field_store__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__field_store__descriptor) {
    pg_query__field_store__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__field_store__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__field_store__descriptor) {
    pg_query__field_store__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__field_store__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__field_store__descriptor, a1, a2, a3);
}

void **pg_query__field_store__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__field_store__descriptor) {
      pg_query__field_store__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__relabel_type__init(_OWORD *a1)
{
  *a1 = pg_query__relabel_type__init_init_value;
  a1[1] = unk_1E55DA5C8;
  double result = 0.0;
  a1[2] = xmmword_1E55DA5D8;
  a1[3] = unk_1E55DA5E8;
  return result;
}

uint64_t pg_query__relabel_type__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__relabel_type__descriptor) {
    pg_query__relabel_type__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__relabel_type__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__relabel_type__descriptor) {
    pg_query__relabel_type__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__relabel_type__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__relabel_type__descriptor) {
    pg_query__relabel_type__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__relabel_type__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__relabel_type__descriptor, a1, a2, a3);
}

void **pg_query__relabel_type__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__relabel_type__descriptor) {
      pg_query__relabel_type__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__coerce_via_io__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__coerce_via_io__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DA608;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA618;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__coerce_via_io__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__coerce_via_io__descriptor) {
    pg_query__coerce_via_io__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__coerce_via_io__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__coerce_via_io__descriptor) {
    pg_query__coerce_via_io__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__coerce_via_io__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__coerce_via_io__descriptor) {
    pg_query__coerce_via_io__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__coerce_via_io__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__coerce_via_io__descriptor, a1, a2, a3);
}

void **pg_query__coerce_via_io__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__coerce_via_io__descriptor) {
      pg_query__coerce_via_io__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__array_coerce_expr__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA650;
  *(_OWORD *)(a1 + 48) = unk_1E55DA660;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DA640[0];
  *(_OWORD *)a1 = pg_query__array_coerce_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DA640;
  return result;
}

uint64_t pg_query__array_coerce_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__array_coerce_expr__descriptor) {
    pg_query__array_coerce_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__array_coerce_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__array_coerce_expr__descriptor) {
    pg_query__array_coerce_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__array_coerce_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__array_coerce_expr__descriptor) {
    pg_query__array_coerce_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__array_coerce_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__array_coerce_expr__descriptor, a1, a2, a3);
}

void **pg_query__array_coerce_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__array_coerce_expr__descriptor) {
      pg_query__array_coerce_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__convert_rowtype_expr__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__convert_rowtype_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DA688;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA698;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__convert_rowtype_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__convert_rowtype_expr__descriptor) {
    pg_query__convert_rowtype_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__convert_rowtype_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__convert_rowtype_expr__descriptor) {
    pg_query__convert_rowtype_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__convert_rowtype_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__convert_rowtype_expr__descriptor) {
    pg_query__convert_rowtype_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__convert_rowtype_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__convert_rowtype_expr__descriptor, a1, a2, a3);
}

void **pg_query__convert_rowtype_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__convert_rowtype_expr__descriptor) {
      pg_query__convert_rowtype_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__collate_expr__init(_OWORD *a1)
{
  *a1 = pg_query__collate_expr__init_init_value;
  a1[1] = unk_1E55DA6C0;
  double result = 0.0;
  a1[2] = xmmword_1E55DA6D0;
  return result;
}

uint64_t pg_query__collate_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__collate_expr__descriptor) {
    pg_query__collate_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__collate_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__collate_expr__descriptor) {
    pg_query__collate_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__collate_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__collate_expr__descriptor) {
    pg_query__collate_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__collate_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__collate_expr__descriptor, a1, a2, a3);
}

void **pg_query__collate_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__collate_expr__descriptor) {
      pg_query__collate_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__case_expr__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DA700;
  a1[3] = unk_1E55DA710;
  a1[4] = xmmword_1E55DA720;
  double result = 0.0;
  *a1 = pg_query__case_expr__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DA6F0;
  return result;
}

uint64_t pg_query__case_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__case_expr__descriptor) {
    pg_query__case_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__case_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__case_expr__descriptor) {
    pg_query__case_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__case_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__case_expr__descriptor) {
    pg_query__case_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__case_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__case_expr__descriptor, a1, a2, a3);
}

void **pg_query__case_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__case_expr__descriptor) {
      pg_query__case_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__case_when__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__case_when__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DA740;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA750;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__case_when__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__case_when__descriptor) {
    pg_query__case_when__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__case_when__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__case_when__descriptor) {
    pg_query__case_when__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__case_when__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__case_when__descriptor) {
    pg_query__case_when__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__case_when__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__case_when__descriptor, a1, a2, a3);
}

void **pg_query__case_when__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__case_when__descriptor) {
      pg_query__case_when__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__case_test_expr__init(_OWORD *a1)
{
  *a1 = pg_query__case_test_expr__init_init_value;
  a1[1] = unk_1E55DA778;
  double result = 0.0;
  a1[2] = xmmword_1E55DA788;
  return result;
}

uint64_t pg_query__case_test_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__case_test_expr__descriptor) {
    pg_query__case_test_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__case_test_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__case_test_expr__descriptor) {
    pg_query__case_test_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__case_test_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__case_test_expr__descriptor) {
    pg_query__case_test_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__case_test_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__case_test_expr__descriptor, a1, a2, a3);
}

void **pg_query__case_test_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__case_test_expr__descriptor) {
      pg_query__case_test_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__array_expr__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA7B8;
  *(_OWORD *)(a1 + 48) = unk_1E55DA7C8;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DA7A8[0];
  *(_OWORD *)a1 = pg_query__array_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DA7A8;
  return result;
}

uint64_t pg_query__array_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__array_expr__descriptor) {
    pg_query__array_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__array_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__array_expr__descriptor) {
    pg_query__array_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__array_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__array_expr__descriptor) {
    pg_query__array_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__array_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__array_expr__descriptor, a1, a2, a3);
}

void **pg_query__array_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__array_expr__descriptor) {
      pg_query__array_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__row_expr__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DA800;
  a1[3] = unk_1E55DA810;
  a1[4] = xmmword_1E55DA820;
  double result = 0.0;
  *a1 = pg_query__row_expr__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DA7F0;
  return result;
}

uint64_t pg_query__row_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__row_expr__descriptor) {
    pg_query__row_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__row_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__row_expr__descriptor) {
    pg_query__row_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__row_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__row_expr__descriptor) {
    pg_query__row_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__row_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__row_expr__descriptor, a1, a2, a3);
}

void **pg_query__row_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__row_expr__descriptor) {
      pg_query__row_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__row_compare_expr__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = xmmword_1E55DA870;
  *(_OWORD *)(a1 + 8errstart(20, 0) = unk_1E55DA880;
  *(_OWORD *)(a1 + 96) = xmmword_1E55DA890;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)a1 = pg_query__row_compare_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DA840;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA850;
  *(_OWORD *)(a1 + 48) = unk_1E55DA860;
  return result;
}

uint64_t pg_query__row_compare_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__row_compare_expr__descriptor) {
    pg_query__row_compare_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__row_compare_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__row_compare_expr__descriptor) {
    pg_query__row_compare_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__row_compare_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__row_compare_expr__descriptor) {
    pg_query__row_compare_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__row_compare_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__row_compare_expr__descriptor, a1, a2, a3);
}

void **pg_query__row_compare_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__row_compare_expr__descriptor) {
      pg_query__row_compare_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__coalesce_expr__init(_OWORD *a1)
{
  *a1 = pg_query__coalesce_expr__init_init_value;
  a1[1] = unk_1E55DA8B8;
  double result = 0.0;
  a1[2] = xmmword_1E55DA8C8;
  a1[3] = unk_1E55DA8D8;
  return result;
}

uint64_t pg_query__coalesce_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__coalesce_expr__descriptor) {
    pg_query__coalesce_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__coalesce_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__coalesce_expr__descriptor) {
    pg_query__coalesce_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__coalesce_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__coalesce_expr__descriptor) {
    pg_query__coalesce_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__coalesce_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__coalesce_expr__descriptor, a1, a2, a3);
}

void **pg_query__coalesce_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__coalesce_expr__descriptor) {
      pg_query__coalesce_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__min_max_expr__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA908;
  *(_OWORD *)(a1 + 48) = unk_1E55DA918;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DA8F8[0];
  *(_OWORD *)a1 = pg_query__min_max_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DA8F8;
  return result;
}

uint64_t pg_query__min_max_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__min_max_expr__descriptor) {
    pg_query__min_max_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__min_max_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__min_max_expr__descriptor) {
    pg_query__min_max_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__min_max_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__min_max_expr__descriptor) {
    pg_query__min_max_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__min_max_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__min_max_expr__descriptor, a1, a2, a3);
}

void **pg_query__min_max_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__min_max_expr__descriptor) {
      pg_query__min_max_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__sqlvalue_function__init(_OWORD *a1)
{
  *a1 = pg_query__sqlvalue_function__init_init_value;
  a1[1] = unk_1E55DA940;
  double result = 0.0;
  a1[2] = xmmword_1E55DA950;
  return result;
}

uint64_t pg_query__sqlvalue_function__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__sqlvalue_function__descriptor) {
    pg_query__sqlvalue_function__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__sqlvalue_function__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__sqlvalue_function__descriptor) {
    pg_query__sqlvalue_function__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__sqlvalue_function__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__sqlvalue_function__descriptor) {
    pg_query__sqlvalue_function__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__sqlvalue_function__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__sqlvalue_function__descriptor, a1, a2, a3);
}

void **pg_query__sqlvalue_function__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__sqlvalue_function__descriptor) {
      pg_query__sqlvalue_function__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

uint64_t pg_query__xml_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__xml_expr__descriptor) {
    pg_query__xml_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__xml_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__xml_expr__descriptor) {
    pg_query__xml_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__xml_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__xml_expr__descriptor) {
    pg_query__xml_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__xml_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__xml_expr__descriptor, a1, a2, a3);
}

void **pg_query__xml_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__xml_expr__descriptor) {
      pg_query__xml_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__null_test__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__null_test__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DA9E0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA9F0;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__null_test__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__null_test__descriptor) {
    pg_query__null_test__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__null_test__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__null_test__descriptor) {
    pg_query__null_test__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__null_test__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__null_test__descriptor) {
    pg_query__null_test__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__null_test__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__null_test__descriptor, a1, a2, a3);
}

void **pg_query__null_test__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__null_test__descriptor) {
      pg_query__null_test__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__BOOLean_test__init(_OWORD *a1)
{
  *a1 = pg_query__BOOLean_test__init_init_value;
  a1[1] = unk_1E55DAA18;
  double result = 0.0;
  a1[2] = xmmword_1E55DAA28;
  return result;
}

uint64_t pg_query__BOOLean_test__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__BOOLean_test__descriptor) {
    pg_query__BOOLean_test__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__BOOLean_test__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__BOOLean_test__descriptor) {
    pg_query__BOOLean_test__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__BOOLean_test__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__BOOLean_test__descriptor) {
    pg_query__BOOLean_test__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__BOOLean_test__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__BOOLean_test__descriptor, a1, a2, a3);
}

void **pg_query__BOOLean_test__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__BOOLean_test__descriptor) {
      pg_query__BOOLean_test__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__coerce_to_domain__init(_OWORD *a1)
{
  *a1 = pg_query__coerce_to_domain__init_init_value;
  a1[1] = unk_1E55DAA48;
  double result = 0.0;
  a1[2] = xmmword_1E55DAA58;
  a1[3] = unk_1E55DAA68;
  return result;
}

uint64_t pg_query__coerce_to_domain__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__coerce_to_domain__descriptor) {
    pg_query__coerce_to_domain__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__coerce_to_domain__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__coerce_to_domain__descriptor) {
    pg_query__coerce_to_domain__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__coerce_to_domain__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__coerce_to_domain__descriptor) {
    pg_query__coerce_to_domain__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__coerce_to_domain__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__coerce_to_domain__descriptor, a1, a2, a3);
}

void **pg_query__coerce_to_domain__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__coerce_to_domain__descriptor) {
      pg_query__coerce_to_domain__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__coerce_to_domain_value__init(_OWORD *a1)
{
  *a1 = pg_query__coerce_to_domain_value__init_init_value;
  a1[1] = unk_1E55DAA88;
  double result = 0.0;
  a1[2] = xmmword_1E55DAA98;
  return result;
}

uint64_t pg_query__coerce_to_domain_value__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__coerce_to_domain_value__descriptor) {
    pg_query__coerce_to_domain_value__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__coerce_to_domain_value__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__coerce_to_domain_value__descriptor) {
    pg_query__coerce_to_domain_value__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__coerce_to_domain_value__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__coerce_to_domain_value__descriptor) {
    pg_query__coerce_to_domain_value__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__coerce_to_domain_value__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__coerce_to_domain_value__descriptor, a1, a2, a3);
}

void **pg_query__coerce_to_domain_value__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__coerce_to_domain_value__descriptor) {
      pg_query__coerce_to_domain_value__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__set_to_default__init(_OWORD *a1)
{
  *a1 = pg_query__set_to_default__init_init_value;
  a1[1] = unk_1E55DAAB8;
  double result = 0.0;
  a1[2] = xmmword_1E55DAAC8;
  return result;
}

uint64_t pg_query__set_to_default__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__set_to_default__descriptor) {
    pg_query__set_to_default__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__set_to_default__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__set_to_default__descriptor) {
    pg_query__set_to_default__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__set_to_default__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__set_to_default__descriptor) {
    pg_query__set_to_default__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__set_to_default__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__set_to_default__descriptor, a1, a2, a3);
}

void **pg_query__set_to_default__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__set_to_default__descriptor) {
      pg_query__set_to_default__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__current_of_expr__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__current_of_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DAAE8;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DAAF8;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__current_of_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__current_of_expr__descriptor) {
    pg_query__current_of_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__current_of_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__current_of_expr__descriptor) {
    pg_query__current_of_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__current_of_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__current_of_expr__descriptor) {
    pg_query__current_of_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__current_of_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__current_of_expr__descriptor, a1, a2, a3);
}

void **pg_query__current_of_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__current_of_expr__descriptor) {
      pg_query__current_of_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__next_value_expr__init(uint64_t a1)
{
  double result = *(double *)&pg_query__next_value_expr__init_init_value;
  *(_OWORD *)a1 = pg_query__next_value_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DAB20;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__next_value_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__next_value_expr__descriptor) {
    pg_query__next_value_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__next_value_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__next_value_expr__descriptor) {
    pg_query__next_value_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__next_value_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__next_value_expr__descriptor) {
    pg_query__next_value_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__next_value_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__next_value_expr__descriptor, a1, a2, a3);
}

void **pg_query__next_value_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__next_value_expr__descriptor) {
      pg_query__next_value_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__inference_elem__init(_OWORD *a1)
{
  *a1 = pg_query__inference_elem__init_init_value;
  a1[1] = unk_1E55DAB48;
  double result = 0.0;
  a1[2] = xmmword_1E55DAB58;
  return result;
}

uint64_t pg_query__inference_elem__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__inference_elem__descriptor) {
    pg_query__inference_elem__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__inference_elem__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__inference_elem__descriptor) {
    pg_query__inference_elem__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__inference_elem__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__inference_elem__descriptor) {
    pg_query__inference_elem__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__inference_elem__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__inference_elem__descriptor, a1, a2, a3);
}

void **pg_query__inference_elem__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__inference_elem__descriptor) {
      pg_query__inference_elem__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__target_entry__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DAB88;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1E55DAB98;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DAB78[0];
  *(_OWORD *)a1 = pg_query__target_entry__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DAB78;
  return result;
}

uint64_t pg_query__target_entry__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__target_entry__descriptor) {
    pg_query__target_entry__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__target_entry__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__target_entry__descriptor) {
    pg_query__target_entry__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__target_entry__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__target_entry__descriptor) {
    pg_query__target_entry__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__target_entry__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__target_entry__descriptor, a1, a2, a3);
}

void **pg_query__target_entry__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__target_entry__descriptor) {
      pg_query__target_entry__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_tbl_ref__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__range_tbl_ref__init_init_value;
  *a1 = pg_query__range_tbl_ref__init_init_value;
  a1[1] = unk_1E55DABC0;
  return result;
}

uint64_t pg_query__range_tbl_ref__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_tbl_ref__descriptor) {
    pg_query__range_tbl_ref__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_tbl_ref__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__range_tbl_ref__descriptor) {
    pg_query__range_tbl_ref__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__range_tbl_ref__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__range_tbl_ref__descriptor) {
    pg_query__range_tbl_ref__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__range_tbl_ref__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_tbl_ref__descriptor, a1, a2, a3);
}

void **pg_query__range_tbl_ref__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_tbl_ref__descriptor) {
      pg_query__range_tbl_ref__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__join_expr__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DABF0;
  *(_OWORD *)(a1 + 48) = unk_1E55DAC00;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DAC10;
  *(void *)(a1 + 8errstart(20, 0) = 0;
  double result = *(double *)&pg_query__join_expr__init_init_value;
  *(_OWORD *)a1 = pg_query__join_expr__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DABE0;
  return result;
}

uint64_t pg_query__join_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__join_expr__descriptor) {
    pg_query__join_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__join_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__join_expr__descriptor) {
    pg_query__join_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__join_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__join_expr__descriptor) {
    pg_query__join_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__join_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__join_expr__descriptor, a1, a2, a3);
}

void **pg_query__join_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__join_expr__descriptor) {
      pg_query__join_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__from_expr__init(_OWORD *a1)
{
  *a1 = pg_query__from_expr__init_init_value;
  a1[1] = unk_1E55DAC38;
  double result = 0.0;
  a1[2] = xmmword_1E55DAC48;
  return result;
}

uint64_t pg_query__from_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__from_expr__descriptor) {
    pg_query__from_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__from_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__from_expr__descriptor) {
    pg_query__from_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__from_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__from_expr__descriptor) {
    pg_query__from_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__from_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__from_expr__descriptor, a1, a2, a3);
}

void **pg_query__from_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__from_expr__descriptor) {
      pg_query__from_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__on_conflict_expr__init(_OWORD *a1)
{
  a1[4] = xmmword_1E55DAC98;
  a1[5] = unk_1E55DACA8;
  a1[6] = xmmword_1E55DACB8;
  *a1 = pg_query__on_conflict_expr__init_init_value;
  a1[1] = unk_1E55DAC68;
  double result = dbl_1E55DAC88[0];
  a1[2] = xmmword_1E55DAC78;
  a1[3] = *(_OWORD *)dbl_1E55DAC88;
  return result;
}

uint64_t pg_query__on_conflict_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__on_conflict_expr__descriptor) {
    pg_query__on_conflict_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__on_conflict_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__on_conflict_expr__descriptor) {
    pg_query__on_conflict_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__on_conflict_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__on_conflict_expr__descriptor) {
    pg_query__on_conflict_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__on_conflict_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__on_conflict_expr__descriptor, a1, a2, a3);
}

void **pg_query__on_conflict_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__on_conflict_expr__descriptor) {
      pg_query__on_conflict_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__into_clause__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = xmmword_1E55DAD08;
  *(_OWORD *)(a1 + 8errstart(20, 0) = *(_OWORD *)&off_1E55DAD18;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)a1 = pg_query__into_clause__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DACD8;
  double result = COERCE_DOUBLE(&protobuf_c_empty_string);
  *(_OWORD *)(a1 + 32) = xmmword_1E55DACE8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1E55DACF8;
  return result;
}

uint64_t pg_query__into_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__into_clause__descriptor) {
    pg_query__into_clause__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__into_clause__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__into_clause__descriptor) {
    pg_query__into_clause__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__into_clause__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__into_clause__descriptor) {
    pg_query__into_clause__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__into_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__into_clause__descriptor, a1, a2, a3);
}

void **pg_query__into_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__into_clause__descriptor) {
      pg_query__into_clause__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__raw_stmt__init(uint64_t a1)
{
  double result = *(double *)&pg_query__raw_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__raw_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DAD40;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__raw_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__raw_stmt__descriptor) {
    pg_query__raw_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__raw_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__raw_stmt__descriptor) {
    pg_query__raw_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__raw_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__raw_stmt__descriptor) {
    pg_query__raw_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__raw_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__raw_stmt__descriptor, a1, a2, a3);
}

void **pg_query__raw_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__raw_stmt__descriptor) {
      pg_query__raw_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

void *pg_query__query__init(void *a1)
{
  return memcpy(a1, &pg_query__query__init_init_value, 0x160uLL);
}

uint64_t pg_query__query__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__query__descriptor) {
    pg_query__query__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__query__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__query__descriptor) {
    pg_query__query__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__query__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__query__descriptor) {
    pg_query__query__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__query__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__query__descriptor, a1, a2, a3);
}

void **pg_query__query__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__query__descriptor) {
      pg_query__query__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__insert_stmt__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DAED8;
  a1[3] = unk_1E55DAEE8;
  a1[4] = xmmword_1E55DAEF8;
  a1[5] = unk_1E55DAF08;
  double result = *(double *)&pg_query__insert_stmt__init_init_value;
  *a1 = pg_query__insert_stmt__init_init_value;
  a1[1] = unk_1E55DAEC8;
  return result;
}

uint64_t pg_query__insert_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__insert_stmt__descriptor) {
    pg_query__insert_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__insert_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__insert_stmt__descriptor) {
    pg_query__insert_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__insert_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__insert_stmt__descriptor) {
    pg_query__insert_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__insert_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__insert_stmt__descriptor, a1, a2, a3);
}

void **pg_query__insert_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__insert_stmt__descriptor) {
      pg_query__insert_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__delete_stmt__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DAF38;
  a1[3] = unk_1E55DAF48;
  a1[4] = xmmword_1E55DAF58;
  double result = dbl_1E55DAF28[0];
  *a1 = pg_query__delete_stmt__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E55DAF28;
  return result;
}

uint64_t pg_query__delete_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__delete_stmt__descriptor) {
    pg_query__delete_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__delete_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__delete_stmt__descriptor) {
    pg_query__delete_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__delete_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__delete_stmt__descriptor) {
    pg_query__delete_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__delete_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__delete_stmt__descriptor, a1, a2, a3);
}

void **pg_query__delete_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__delete_stmt__descriptor) {
      pg_query__delete_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__update_stmt__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DAF88;
  a1[3] = unk_1E55DAF98;
  a1[4] = xmmword_1E55DAFA8;
  a1[5] = unk_1E55DAFB8;
  double result = *(double *)&pg_query__update_stmt__init_init_value;
  *a1 = pg_query__update_stmt__init_init_value;
  a1[1] = unk_1E55DAF78;
  return result;
}

uint64_t pg_query__update_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__update_stmt__descriptor) {
    pg_query__update_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__update_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__update_stmt__descriptor) {
    pg_query__update_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__update_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__update_stmt__descriptor) {
    pg_query__update_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__update_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__update_stmt__descriptor, a1, a2, a3);
}

void **pg_query__update_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__update_stmt__descriptor) {
      pg_query__update_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__select_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 192) = xmmword_1E55DB088;
  *(_OWORD *)(a1 + 208) = unk_1E55DB098;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_1E55DB048;
  *(_OWORD *)(a1 + 144) = unk_1E55DB058;
  *(_OWORD *)(a1 + 16errstart(20, 0) = xmmword_1E55DB068;
  *(_OWORD *)(a1 + 176) = unk_1E55DB078;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DB008;
  *(_OWORD *)(a1 + 8errstart(20, 0) = unk_1E55DB018;
  *(_OWORD *)(a1 + 96) = xmmword_1E55DB028;
  *(_OWORD *)(a1 + 112) = unk_1E55DB038;
  *(_OWORD *)a1 = pg_query__select_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DAFD8;
  double result = dbl_1E55DAFF8[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E55DAFE8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)dbl_1E55DAFF8;
  return result;
}

uint64_t pg_query__select_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__select_stmt__descriptor) {
    pg_query__select_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__select_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__select_stmt__descriptor) {
    pg_query__select_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__select_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__select_stmt__descriptor) {
    pg_query__select_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__select_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__select_stmt__descriptor, a1, a2, a3);
}

void **pg_query__select_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__select_stmt__descriptor) {
      pg_query__select_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_table_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__alter_table_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DB0C0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB0D0;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_table_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_table_stmt__descriptor) {
    pg_query__alter_table_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_table_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_table_stmt__descriptor) {
    pg_query__alter_table_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_table_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_table_stmt__descriptor) {
    pg_query__alter_table_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_table_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_table_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_table_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_table_stmt__descriptor) {
      pg_query__alter_table_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_table_cmd__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB108;
  *(_OWORD *)(a1 + 48) = unk_1E55DB118;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DB0F8[0];
  *(_OWORD *)a1 = pg_query__alter_table_cmd__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DB0F8;
  return result;
}

uint64_t pg_query__alter_table_cmd__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_table_cmd__descriptor) {
    pg_query__alter_table_cmd__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_table_cmd__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_table_cmd__descriptor) {
    pg_query__alter_table_cmd__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_table_cmd__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_table_cmd__descriptor) {
    pg_query__alter_table_cmd__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_table_cmd__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_table_cmd__descriptor, a1, a2, a3);
}

void **pg_query__alter_table_cmd__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_table_cmd__descriptor) {
      pg_query__alter_table_cmd__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_domain_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB150;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1E55DB160;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DB140[0];
  *(_OWORD *)a1 = pg_query__alter_domain_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DB140;
  return result;
}

uint64_t pg_query__alter_domain_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_domain_stmt__descriptor) {
    pg_query__alter_domain_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_domain_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_domain_stmt__descriptor) {
    pg_query__alter_domain_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_domain_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_domain_stmt__descriptor) {
    pg_query__alter_domain_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_domain_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_domain_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_domain_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_domain_stmt__descriptor) {
      pg_query__alter_domain_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__set_operation_stmt__init(_OWORD *a1)
{
  a1[4] = xmmword_1E55DB1B8;
  a1[5] = unk_1E55DB1C8;
  a1[6] = xmmword_1E55DB1D8;
  *a1 = pg_query__set_operation_stmt__init_init_value;
  a1[1] = unk_1E55DB188;
  double result = dbl_1E55DB1A8[0];
  a1[2] = xmmword_1E55DB198;
  a1[3] = *(_OWORD *)dbl_1E55DB1A8;
  return result;
}

uint64_t pg_query__set_operation_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__set_operation_stmt__descriptor) {
    pg_query__set_operation_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__set_operation_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__set_operation_stmt__descriptor) {
    pg_query__set_operation_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__set_operation_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__set_operation_stmt__descriptor) {
    pg_query__set_operation_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__set_operation_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__set_operation_stmt__descriptor, a1, a2, a3);
}

void **pg_query__set_operation_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__set_operation_stmt__descriptor) {
      pg_query__set_operation_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__grant_stmt__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DB208;
  a1[3] = unk_1E55DB218;
  a1[4] = xmmword_1E55DB228;
  a1[5] = unk_1E55DB238;
  double result = *(double *)&pg_query__grant_stmt__init_init_value;
  *a1 = pg_query__grant_stmt__init_init_value;
  a1[1] = unk_1E55DB1F8;
  return result;
}

uint64_t pg_query__grant_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__grant_stmt__descriptor) {
    pg_query__grant_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__grant_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__grant_stmt__descriptor) {
    pg_query__grant_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__grant_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__grant_stmt__descriptor) {
    pg_query__grant_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__grant_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__grant_stmt__descriptor, a1, a2, a3);
}

void **pg_query__grant_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__grant_stmt__descriptor) {
      pg_query__grant_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__grant_role_stmt__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DB268;
  a1[3] = unk_1E55DB278;
  a1[4] = xmmword_1E55DB288;
  double result = dbl_1E55DB258[0];
  *a1 = pg_query__grant_role_stmt__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E55DB258;
  return result;
}

uint64_t pg_query__grant_role_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__grant_role_stmt__descriptor) {
    pg_query__grant_role_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__grant_role_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__grant_role_stmt__descriptor) {
    pg_query__grant_role_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__grant_role_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__grant_role_stmt__descriptor) {
    pg_query__grant_role_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__grant_role_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__grant_role_stmt__descriptor, a1, a2, a3);
}

void **pg_query__grant_role_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__grant_role_stmt__descriptor) {
      pg_query__grant_role_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_default_privileges_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__alter_default_privileges_stmt__init_init_value;
  a1[1] = unk_1E55DB2A8;
  double result = 0.0;
  a1[2] = xmmword_1E55DB2B8;
  return result;
}

uint64_t pg_query__alter_default_privileges_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_default_privileges_stmt__descriptor) {
    pg_query__alter_default_privileges_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_default_privileges_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_default_privileges_stmt__descriptor) {
    pg_query__alter_default_privileges_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_default_privileges_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_default_privileges_stmt__descriptor) {
    pg_query__alter_default_privileges_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_default_privileges_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_default_privileges_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_default_privileges_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_default_privileges_stmt__descriptor) {
      pg_query__alter_default_privileges_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__close_portal_stmt__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__close_portal_stmt__init_init_value;
  *a1 = pg_query__close_portal_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DB2D8;
  return result;
}

uint64_t pg_query__close_portal_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__close_portal_stmt__descriptor) {
    pg_query__close_portal_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__close_portal_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__close_portal_stmt__descriptor) {
    pg_query__close_portal_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__close_portal_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__close_portal_stmt__descriptor) {
    pg_query__close_portal_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__close_portal_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__close_portal_stmt__descriptor, a1, a2, a3);
}

void **pg_query__close_portal_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__close_portal_stmt__descriptor) {
      pg_query__close_portal_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__cluster_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__cluster_stmt__init_init_value;
  a1[1] = unk_1E55DB2F8;
  *(void *)&double result = 0x18EBDE320;
  a1[2] = xmmword_1E55DB308;
  return result;
}

uint64_t pg_query__cluster_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__cluster_stmt__descriptor) {
    pg_query__cluster_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__cluster_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__cluster_stmt__descriptor) {
    pg_query__cluster_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__cluster_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__cluster_stmt__descriptor) {
    pg_query__cluster_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__cluster_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__cluster_stmt__descriptor, a1, a2, a3);
}

void **pg_query__cluster_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__cluster_stmt__descriptor) {
      pg_query__cluster_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__copy_stmt__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DB338;
  a1[3] = unk_1E55DB348;
  a1[4] = xmmword_1E55DB358;
  a1[5] = unk_1E55DB368;
  double result = *(double *)&pg_query__copy_stmt__init_init_value;
  *a1 = pg_query__copy_stmt__init_init_value;
  a1[1] = unk_1E55DB328;
  return result;
}

uint64_t pg_query__copy_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__copy_stmt__descriptor) {
    pg_query__copy_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__copy_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__copy_stmt__descriptor) {
    pg_query__copy_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__copy_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__copy_stmt__descriptor) {
    pg_query__copy_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__copy_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__copy_stmt__descriptor, a1, a2, a3);
}

void **pg_query__copy_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__copy_stmt__descriptor) {
      pg_query__copy_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 96) = xmmword_1E55DB3D8;
  *(_OWORD *)(a1 + 112) = unk_1E55DB3E8;
  *(_OWORD *)(a1 + 128) = xmmword_1E55DB3F8;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB398;
  *(_OWORD *)(a1 + 48) = unk_1E55DB3A8;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DB3B8;
  *(_OWORD *)(a1 + 8errstart(20, 0) = unk_1E55DB3C8;
  double result = *(double *)&pg_query__create_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__create_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DB388;
  return result;
}

uint64_t pg_query__create_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_stmt__descriptor) {
    pg_query__create_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_stmt__descriptor) {
    pg_query__create_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_stmt__descriptor) {
    pg_query__create_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_stmt__descriptor) {
      pg_query__create_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__define_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB430;
  *(_OWORD *)(a1 + 48) = unk_1E55DB440;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DB450;
  *(void *)(a1 + 8errstart(20, 0) = 0;
  double result = *(double *)&pg_query__define_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__define_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DB420;
  return result;
}

uint64_t pg_query__define_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__define_stmt__descriptor) {
    pg_query__define_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__define_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__define_stmt__descriptor) {
    pg_query__define_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__define_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__define_stmt__descriptor) {
    pg_query__define_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__define_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__define_stmt__descriptor, a1, a2, a3);
}

void **pg_query__define_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__define_stmt__descriptor) {
      pg_query__define_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__drop_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__drop_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DB478;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB488;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__drop_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__drop_stmt__descriptor) {
    pg_query__drop_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__drop_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__drop_stmt__descriptor) {
    pg_query__drop_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__drop_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__drop_stmt__descriptor) {
    pg_query__drop_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__drop_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__drop_stmt__descriptor, a1, a2, a3);
}

void **pg_query__drop_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__drop_stmt__descriptor) {
      pg_query__drop_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__truncate_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__truncate_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DB4B0;
  double result = 0.0;
  a1[2] = xmmword_1E55DB4C0;
  return result;
}

uint64_t pg_query__truncate_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__truncate_stmt__descriptor) {
    pg_query__truncate_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__truncate_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__truncate_stmt__descriptor) {
    pg_query__truncate_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__truncate_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__truncate_stmt__descriptor) {
    pg_query__truncate_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__truncate_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__truncate_stmt__descriptor, a1, a2, a3);
}

void **pg_query__truncate_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__truncate_stmt__descriptor) {
      pg_query__truncate_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__comment_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__comment_stmt__init_init_value;
  a1[1] = unk_1E55DB4E0;
  double result = 0.0;
  a1[2] = xmmword_1E55DB4F0;
  return result;
}

uint64_t pg_query__comment_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__comment_stmt__descriptor) {
    pg_query__comment_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__comment_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__comment_stmt__descriptor) {
    pg_query__comment_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__comment_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__comment_stmt__descriptor) {
    pg_query__comment_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__comment_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__comment_stmt__descriptor, a1, a2, a3);
}

void **pg_query__comment_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__comment_stmt__descriptor) {
      pg_query__comment_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__fetch_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__fetch_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DB510;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB520;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__fetch_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__fetch_stmt__descriptor) {
    pg_query__fetch_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__fetch_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__fetch_stmt__descriptor) {
    pg_query__fetch_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__fetch_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__fetch_stmt__descriptor) {
    pg_query__fetch_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__fetch_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__fetch_stmt__descriptor, a1, a2, a3);
}

void **pg_query__fetch_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__fetch_stmt__descriptor) {
      pg_query__fetch_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__index_stmt__init(_OWORD *a1)
{
  a1[8] = xmmword_1E55DB5B8;
  a1[9] = unk_1E55DB5C8;
  a1[10] = xmmword_1E55DB5D8;
  a1[11] = unk_1E55DB5E8;
  a1[4] = xmmword_1E55DB578;
  a1[5] = unk_1E55DB588;
  a1[6] = xmmword_1E55DB598;
  a1[7] = unk_1E55DB5A8;
  *a1 = pg_query__index_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DB548;
  double result = 0.0;
  a1[2] = xmmword_1E55DB558;
  a1[3] = *(_OWORD *)&off_1E55DB568;
  return result;
}

uint64_t pg_query__index_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__index_stmt__descriptor) {
    pg_query__index_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__index_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__index_stmt__descriptor) {
    pg_query__index_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__index_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__index_stmt__descriptor) {
    pg_query__index_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__index_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__index_stmt__descriptor, a1, a2, a3);
}

void **pg_query__index_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__index_stmt__descriptor) {
      pg_query__index_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_function_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB618;
  *(_OWORD *)(a1 + 48) = unk_1E55DB628;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DB638;
  *(void *)(a1 + 8errstart(20, 0) = 0;
  double result = *(double *)&pg_query__create_function_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__create_function_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DB608;
  return result;
}

uint64_t pg_query__create_function_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_function_stmt__descriptor) {
    pg_query__create_function_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_function_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_function_stmt__descriptor) {
    pg_query__create_function_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_function_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_function_stmt__descriptor) {
    pg_query__create_function_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_function_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_function_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_function_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_function_stmt__descriptor) {
      pg_query__create_function_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_function_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__alter_function_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DB660;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB670;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_function_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_function_stmt__descriptor) {
    pg_query__alter_function_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_function_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_function_stmt__descriptor) {
    pg_query__alter_function_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_function_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_function_stmt__descriptor) {
    pg_query__alter_function_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_function_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_function_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_function_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_function_stmt__descriptor) {
      pg_query__alter_function_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__do_stmt__init(uint64_t a1)
{
  double result = *(double *)&pg_query__do_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__do_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DB698;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__do_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__do_stmt__descriptor) {
    pg_query__do_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__do_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__do_stmt__descriptor) {
    pg_query__do_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__do_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__do_stmt__descriptor) {
    pg_query__do_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__do_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__do_stmt__descriptor, a1, a2, a3);
}

void **pg_query__do_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__do_stmt__descriptor) {
      pg_query__do_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__rename_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB6D0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1E55DB6E0;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DB6C0[0];
  *(_OWORD *)a1 = pg_query__rename_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DB6C0;
  return result;
}

uint64_t pg_query__rename_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__rename_stmt__descriptor) {
    pg_query__rename_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__rename_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__rename_stmt__descriptor) {
    pg_query__rename_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__rename_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__rename_stmt__descriptor) {
    pg_query__rename_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__rename_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__rename_stmt__descriptor, a1, a2, a3);
}

void **pg_query__rename_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__rename_stmt__descriptor) {
      pg_query__rename_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__rule_stmt__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DB718;
  a1[3] = unk_1E55DB728;
  a1[4] = xmmword_1E55DB738;
  double result = dbl_1E55DB708[0];
  *a1 = pg_query__rule_stmt__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E55DB708;
  return result;
}

uint64_t pg_query__rule_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__rule_stmt__descriptor) {
    pg_query__rule_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__rule_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__rule_stmt__descriptor) {
    pg_query__rule_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__rule_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__rule_stmt__descriptor) {
    pg_query__rule_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__rule_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__rule_stmt__descriptor, a1, a2, a3);
}

void **pg_query__rule_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__rule_stmt__descriptor) {
      pg_query__rule_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__notify_stmt__init(uint64_t a1)
{
  double result = *(double *)&pg_query__notify_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__notify_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DB758;
  *(void *)(a1 + 32) = &protobuf_c_empty_string;
  return result;
}

uint64_t pg_query__notify_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__notify_stmt__descriptor) {
    pg_query__notify_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__notify_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__notify_stmt__descriptor) {
    pg_query__notify_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__notify_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__notify_stmt__descriptor) {
    pg_query__notify_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__notify_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__notify_stmt__descriptor, a1, a2, a3);
}

void **pg_query__notify_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__notify_stmt__descriptor) {
      pg_query__notify_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__listen_stmt__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__listen_stmt__init_init_value;
  *a1 = pg_query__listen_stmt__init_init_value;
  a1[1] = unk_1E55DB780;
  return result;
}

uint64_t pg_query__listen_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__listen_stmt__descriptor) {
    pg_query__listen_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__listen_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__listen_stmt__descriptor) {
    pg_query__listen_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__listen_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__listen_stmt__descriptor) {
    pg_query__listen_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__listen_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__listen_stmt__descriptor, a1, a2, a3);
}

void **pg_query__listen_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__listen_stmt__descriptor) {
      pg_query__listen_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__unlisten_stmt__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__unlisten_stmt__init_init_value;
  *a1 = pg_query__unlisten_stmt__init_init_value;
  a1[1] = unk_1E55DB7A0;
  return result;
}

uint64_t pg_query__unlisten_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__unlisten_stmt__descriptor) {
    pg_query__unlisten_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__unlisten_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__unlisten_stmt__descriptor) {
    pg_query__unlisten_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__unlisten_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__unlisten_stmt__descriptor) {
    pg_query__unlisten_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__unlisten_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__unlisten_stmt__descriptor, a1, a2, a3);
}

void **pg_query__unlisten_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__unlisten_stmt__descriptor) {
      pg_query__unlisten_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__transaction_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB7D0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1E55DB7E0;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DB7C0[0];
  *(_OWORD *)a1 = pg_query__transaction_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DB7C0;
  return result;
}

uint64_t pg_query__transaction_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__transaction_stmt__descriptor) {
    pg_query__transaction_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__transaction_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__transaction_stmt__descriptor) {
    pg_query__transaction_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__transaction_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__transaction_stmt__descriptor) {
    pg_query__transaction_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__transaction_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__transaction_stmt__descriptor, a1, a2, a3);
}

void **pg_query__transaction_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__transaction_stmt__descriptor) {
      pg_query__transaction_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__view_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB818;
  *(_OWORD *)(a1 + 48) = unk_1E55DB828;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DB838;
  *(void *)(a1 + 8errstart(20, 0) = 0;
  double result = *(double *)&pg_query__view_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__view_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DB808;
  return result;
}

uint64_t pg_query__view_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__view_stmt__descriptor) {
    pg_query__view_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__view_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__view_stmt__descriptor) {
    pg_query__view_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__view_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__view_stmt__descriptor) {
    pg_query__view_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__view_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__view_stmt__descriptor, a1, a2, a3);
}

void **pg_query__view_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__view_stmt__descriptor) {
      pg_query__view_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__load_stmt__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__load_stmt__init_init_value;
  *a1 = pg_query__load_stmt__init_init_value;
  a1[1] = unk_1E55DB860;
  return result;
}

uint64_t pg_query__load_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__load_stmt__descriptor) {
    pg_query__load_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__load_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__load_stmt__descriptor) {
    pg_query__load_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__load_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__load_stmt__descriptor) {
    pg_query__load_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__load_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__load_stmt__descriptor, a1, a2, a3);
}

void **pg_query__load_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__load_stmt__descriptor) {
      pg_query__load_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_domain_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB890;
  *(_OWORD *)(a1 + 48) = unk_1E55DB8A0;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DB880[0];
  *(_OWORD *)a1 = pg_query__create_domain_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DB880;
  return result;
}

uint64_t pg_query__create_domain_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_domain_stmt__descriptor) {
    pg_query__create_domain_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_domain_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_domain_stmt__descriptor) {
    pg_query__create_domain_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_domain_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_domain_stmt__descriptor) {
    pg_query__create_domain_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_domain_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_domain_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_domain_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_domain_stmt__descriptor) {
      pg_query__create_domain_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__createdb_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__createdb_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DB8C8;
  double result = 0.0;
  a1[2] = xmmword_1E55DB8D8;
  return result;
}

uint64_t pg_query__createdb_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__createdb_stmt__descriptor) {
    pg_query__createdb_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__createdb_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__createdb_stmt__descriptor) {
    pg_query__createdb_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__createdb_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__createdb_stmt__descriptor) {
    pg_query__createdb_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__createdb_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__createdb_stmt__descriptor, a1, a2, a3);
}

void **pg_query__createdb_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__createdb_stmt__descriptor) {
      pg_query__createdb_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__dropdb_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__dropdb_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DB8F8;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB908;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__dropdb_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__dropdb_stmt__descriptor) {
    pg_query__dropdb_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__dropdb_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__dropdb_stmt__descriptor) {
    pg_query__dropdb_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__dropdb_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__dropdb_stmt__descriptor) {
    pg_query__dropdb_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__dropdb_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__dropdb_stmt__descriptor, a1, a2, a3);
}

void **pg_query__dropdb_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__dropdb_stmt__descriptor) {
      pg_query__dropdb_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__vacuum_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__vacuum_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DB930;
  double result = 0.0;
  a1[2] = xmmword_1E55DB940;
  a1[3] = unk_1E55DB950;
  return result;
}

uint64_t pg_query__vacuum_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__vacuum_stmt__descriptor) {
    pg_query__vacuum_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__vacuum_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__vacuum_stmt__descriptor) {
    pg_query__vacuum_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__vacuum_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__vacuum_stmt__descriptor) {
    pg_query__vacuum_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__vacuum_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__vacuum_stmt__descriptor, a1, a2, a3);
}

void **pg_query__vacuum_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__vacuum_stmt__descriptor) {
      pg_query__vacuum_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__explain_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__explain_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DB970;
  double result = 0.0;
  a1[2] = xmmword_1E55DB980;
  return result;
}

uint64_t pg_query__explain_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__explain_stmt__descriptor) {
    pg_query__explain_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__explain_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__explain_stmt__descriptor) {
    pg_query__explain_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__explain_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__explain_stmt__descriptor) {
    pg_query__explain_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__explain_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__explain_stmt__descriptor, a1, a2, a3);
}

void **pg_query__explain_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__explain_stmt__descriptor) {
      pg_query__explain_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_table_as_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__create_table_as_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DB9A0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DB9B0;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_table_as_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_table_as_stmt__descriptor) {
    pg_query__create_table_as_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_table_as_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_table_as_stmt__descriptor) {
    pg_query__create_table_as_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_table_as_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_table_as_stmt__descriptor) {
    pg_query__create_table_as_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_table_as_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_table_as_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_table_as_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_table_as_stmt__descriptor) {
      pg_query__create_table_as_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_seq_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__create_seq_stmt__init_init_value;
  a1[1] = unk_1E55DB9D8;
  double result = 0.0;
  a1[2] = xmmword_1E55DB9E8;
  a1[3] = unk_1E55DB9F8;
  return result;
}

uint64_t pg_query__create_seq_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_seq_stmt__descriptor) {
    pg_query__create_seq_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_seq_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_seq_stmt__descriptor) {
    pg_query__create_seq_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_seq_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_seq_stmt__descriptor) {
    pg_query__create_seq_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_seq_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_seq_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_seq_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_seq_stmt__descriptor) {
      pg_query__create_seq_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_seq_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__alter_seq_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DBA18;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DBA28;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_seq_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_seq_stmt__descriptor) {
    pg_query__alter_seq_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_seq_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_seq_stmt__descriptor) {
    pg_query__alter_seq_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_seq_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_seq_stmt__descriptor) {
    pg_query__alter_seq_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_seq_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_seq_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_seq_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_seq_stmt__descriptor) {
      pg_query__alter_seq_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__variable_set_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__variable_set_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DBA50;
  *(void *)&double result = 0x18EBDE320;
  a1[2] = xmmword_1E55DBA60;
  a1[3] = unk_1E55DBA70;
  return result;
}

uint64_t pg_query__variable_set_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__variable_set_stmt__descriptor) {
    pg_query__variable_set_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__variable_set_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__variable_set_stmt__descriptor) {
    pg_query__variable_set_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__variable_set_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__variable_set_stmt__descriptor) {
    pg_query__variable_set_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__variable_set_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__variable_set_stmt__descriptor, a1, a2, a3);
}

void **pg_query__variable_set_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__variable_set_stmt__descriptor) {
      pg_query__variable_set_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__variable_show_stmt__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__variable_show_stmt__init_init_value;
  *a1 = pg_query__variable_show_stmt__init_init_value;
  a1[1] = unk_1E55DBA90;
  return result;
}

uint64_t pg_query__variable_show_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__variable_show_stmt__descriptor) {
    pg_query__variable_show_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__variable_show_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__variable_show_stmt__descriptor) {
    pg_query__variable_show_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__variable_show_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__variable_show_stmt__descriptor) {
    pg_query__variable_show_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__variable_show_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__variable_show_stmt__descriptor, a1, a2, a3);
}

void **pg_query__variable_show_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__variable_show_stmt__descriptor) {
      pg_query__variable_show_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__discard_stmt__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__discard_stmt__init_init_value;
  *a1 = pg_query__discard_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DBAB0;
  return result;
}

uint64_t pg_query__discard_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__discard_stmt__descriptor) {
    pg_query__discard_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__discard_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__discard_stmt__descriptor) {
    pg_query__discard_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__discard_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__discard_stmt__descriptor) {
    pg_query__discard_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__discard_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__discard_stmt__descriptor, a1, a2, a3);
}

void **pg_query__discard_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__discard_stmt__descriptor) {
      pg_query__discard_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_trig_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 96) = xmmword_1E55DBB20;
  *(_OWORD *)(a1 + 112) = unk_1E55DBB30;
  *(_OWORD *)(a1 + 128) = xmmword_1E55DBB40;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DBAE0;
  *(_OWORD *)(a1 + 48) = unk_1E55DBAF0;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DBB00;
  *(_OWORD *)(a1 + 8errstart(20, 0) = unk_1E55DBB10;
  double result = *(double *)&pg_query__create_trig_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__create_trig_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DBAD0;
  return result;
}

uint64_t pg_query__create_trig_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_trig_stmt__descriptor) {
    pg_query__create_trig_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_trig_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_trig_stmt__descriptor) {
    pg_query__create_trig_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_trig_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_trig_stmt__descriptor) {
    pg_query__create_trig_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_trig_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_trig_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_trig_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_trig_stmt__descriptor) {
      pg_query__create_trig_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_plang_stmt__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DBB78;
  a1[3] = unk_1E55DBB88;
  a1[4] = xmmword_1E55DBB98;
  a1[5] = unk_1E55DBBA8;
  double result = *(double *)&pg_query__create_plang_stmt__init_init_value;
  *a1 = pg_query__create_plang_stmt__init_init_value;
  a1[1] = unk_1E55DBB68;
  return result;
}

uint64_t pg_query__create_plang_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_plang_stmt__descriptor) {
    pg_query__create_plang_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_plang_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_plang_stmt__descriptor) {
    pg_query__create_plang_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_plang_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_plang_stmt__descriptor) {
    pg_query__create_plang_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_plang_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_plang_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_plang_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_plang_stmt__descriptor) {
      pg_query__create_plang_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_role_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__create_role_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DBBC8;
  *(void *)&double result = 0x18EBDE320;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DBBD8;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_role_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_role_stmt__descriptor) {
    pg_query__create_role_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_role_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_role_stmt__descriptor) {
    pg_query__create_role_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_role_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_role_stmt__descriptor) {
    pg_query__create_role_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_role_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_role_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_role_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_role_stmt__descriptor) {
      pg_query__create_role_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_role_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__alter_role_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DBC00;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DBC10;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_role_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_role_stmt__descriptor) {
    pg_query__alter_role_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_role_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_role_stmt__descriptor) {
    pg_query__alter_role_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_role_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_role_stmt__descriptor) {
    pg_query__alter_role_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_role_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_role_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_role_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_role_stmt__descriptor) {
      pg_query__alter_role_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__drop_role_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__drop_role_stmt__init_init_value;
  a1[1] = unk_1E55DBC38;
  double result = 0.0;
  a1[2] = xmmword_1E55DBC48;
  return result;
}

uint64_t pg_query__drop_role_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__drop_role_stmt__descriptor) {
    pg_query__drop_role_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__drop_role_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__drop_role_stmt__descriptor) {
    pg_query__drop_role_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__drop_role_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__drop_role_stmt__descriptor) {
    pg_query__drop_role_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__drop_role_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__drop_role_stmt__descriptor, a1, a2, a3);
}

void **pg_query__drop_role_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__drop_role_stmt__descriptor) {
      pg_query__drop_role_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__lock_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__lock_stmt__init_init_value;
  a1[1] = unk_1E55DBC68;
  double result = 0.0;
  a1[2] = xmmword_1E55DBC78;
  return result;
}

uint64_t pg_query__lock_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__lock_stmt__descriptor) {
    pg_query__lock_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__lock_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__lock_stmt__descriptor) {
    pg_query__lock_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__lock_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__lock_stmt__descriptor) {
    pg_query__lock_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__lock_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__lock_stmt__descriptor, a1, a2, a3);
}

void **pg_query__lock_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__lock_stmt__descriptor) {
      pg_query__lock_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__constraints_set_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__constraints_set_stmt__init_init_value;
  a1[1] = unk_1E55DBC98;
  double result = 0.0;
  a1[2] = xmmword_1E55DBCA8;
  return result;
}

uint64_t pg_query__constraints_set_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__constraints_set_stmt__descriptor) {
    pg_query__constraints_set_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__constraints_set_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__constraints_set_stmt__descriptor) {
    pg_query__constraints_set_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__constraints_set_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__constraints_set_stmt__descriptor) {
    pg_query__constraints_set_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__constraints_set_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__constraints_set_stmt__descriptor, a1, a2, a3);
}

void **pg_query__constraints_set_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__constraints_set_stmt__descriptor) {
      pg_query__constraints_set_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__reindex_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__reindex_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DBCC8;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DBCD8;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__reindex_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__reindex_stmt__descriptor) {
    pg_query__reindex_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__reindex_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__reindex_stmt__descriptor) {
    pg_query__reindex_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__reindex_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__reindex_stmt__descriptor) {
    pg_query__reindex_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__reindex_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__reindex_stmt__descriptor, a1, a2, a3);
}

void **pg_query__reindex_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__reindex_stmt__descriptor) {
      pg_query__reindex_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__check_point_stmt__init(uint64_t a1)
{
  double result = *(double *)&pg_query__check_point_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__check_point_stmt__init_init_value;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t pg_query__check_point_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__check_point_stmt__descriptor) {
    pg_query__check_point_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__check_point_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__check_point_stmt__descriptor) {
    pg_query__check_point_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__check_point_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__check_point_stmt__descriptor) {
    pg_query__check_point_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__check_point_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__check_point_stmt__descriptor, a1, a2, a3);
}

void **pg_query__check_point_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__check_point_stmt__descriptor) {
      pg_query__check_point_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_schema_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__create_schema_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DBD18;
  double result = 0.0;
  a1[2] = xmmword_1E55DBD28;
  a1[3] = unk_1E55DBD38;
  return result;
}

uint64_t pg_query__create_schema_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_schema_stmt__descriptor) {
    pg_query__create_schema_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_schema_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_schema_stmt__descriptor) {
    pg_query__create_schema_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_schema_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_schema_stmt__descriptor) {
    pg_query__create_schema_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_schema_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_schema_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_schema_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_schema_stmt__descriptor) {
      pg_query__create_schema_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_database_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__alter_database_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DBD58;
  double result = 0.0;
  a1[2] = xmmword_1E55DBD68;
  return result;
}

uint64_t pg_query__alter_database_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_database_stmt__descriptor) {
    pg_query__alter_database_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_database_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_database_stmt__descriptor) {
    pg_query__alter_database_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_database_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_database_stmt__descriptor) {
    pg_query__alter_database_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_database_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_database_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_database_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_database_stmt__descriptor) {
      pg_query__alter_database_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_database_set_stmt__init(uint64_t a1)
{
  double result = *(double *)&pg_query__alter_database_set_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__alter_database_set_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DBD88;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__alter_database_set_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_database_set_stmt__descriptor) {
    pg_query__alter_database_set_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_database_set_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_database_set_stmt__descriptor) {
    pg_query__alter_database_set_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_database_set_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_database_set_stmt__descriptor) {
    pg_query__alter_database_set_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_database_set_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_database_set_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_database_set_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_database_set_stmt__descriptor) {
      pg_query__alter_database_set_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_role_set_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__alter_role_set_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DBDB0;
  *(void *)&double result = 0x18EBDE320;
  a1[2] = xmmword_1E55DBDC0;
  return result;
}

uint64_t pg_query__alter_role_set_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_role_set_stmt__descriptor) {
    pg_query__alter_role_set_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_role_set_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_role_set_stmt__descriptor) {
    pg_query__alter_role_set_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_role_set_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_role_set_stmt__descriptor) {
    pg_query__alter_role_set_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_role_set_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_role_set_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_role_set_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_role_set_stmt__descriptor) {
      pg_query__alter_role_set_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_conversion_stmt__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DBDF0;
  a1[3] = *(_OWORD *)&off_1E55DBE00;
  a1[4] = xmmword_1E55DBE10;
  double result = dbl_1E55DBDE0[0];
  *a1 = pg_query__create_conversion_stmt__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E55DBDE0;
  return result;
}

uint64_t pg_query__create_conversion_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_conversion_stmt__descriptor) {
    pg_query__create_conversion_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_conversion_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_conversion_stmt__descriptor) {
    pg_query__create_conversion_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_conversion_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_conversion_stmt__descriptor) {
    pg_query__create_conversion_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_conversion_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_conversion_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_conversion_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_conversion_stmt__descriptor) {
      pg_query__create_conversion_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_cast_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__create_cast_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DBE30;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DBE40;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_cast_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_cast_stmt__descriptor) {
    pg_query__create_cast_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_cast_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_cast_stmt__descriptor) {
    pg_query__create_cast_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_cast_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_cast_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_cast_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_cast_stmt__descriptor) {
      pg_query__create_cast_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_op_class_stmt__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DBE78;
  a1[3] = unk_1E55DBE88;
  a1[4] = xmmword_1E55DBE98;
  a1[5] = unk_1E55DBEA8;
  double result = *(double *)&pg_query__create_op_class_stmt__init_init_value;
  *a1 = pg_query__create_op_class_stmt__init_init_value;
  a1[1] = unk_1E55DBE68;
  return result;
}

uint64_t pg_query__create_op_class_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_op_class_stmt__descriptor) {
    pg_query__create_op_class_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_op_class_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_op_class_stmt__descriptor) {
    pg_query__create_op_class_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_op_class_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_op_class_stmt__descriptor) {
    pg_query__create_op_class_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_op_class_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_op_class_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_op_class_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_op_class_stmt__descriptor) {
      pg_query__create_op_class_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_op_family_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__create_op_family_stmt__init_init_value;
  a1[1] = unk_1E55DBEC8;
  double result = 0.0;
  a1[2] = xmmword_1E55DBED8;
  return result;
}

uint64_t pg_query__create_op_family_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_op_family_stmt__descriptor) {
    pg_query__create_op_family_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_op_family_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_op_family_stmt__descriptor) {
    pg_query__create_op_family_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_op_family_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_op_family_stmt__descriptor) {
    pg_query__create_op_family_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_op_family_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_op_family_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_op_family_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_op_family_stmt__descriptor) {
      pg_query__create_op_family_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_op_family_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DBF08;
  *(_OWORD *)(a1 + 48) = unk_1E55DBF18;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DBEF8[0];
  *(_OWORD *)a1 = pg_query__alter_op_family_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DBEF8;
  return result;
}

uint64_t pg_query__alter_op_family_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_op_family_stmt__descriptor) {
    pg_query__alter_op_family_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_op_family_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_op_family_stmt__descriptor) {
    pg_query__alter_op_family_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_op_family_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_op_family_stmt__descriptor) {
    pg_query__alter_op_family_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_op_family_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_op_family_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_op_family_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_op_family_stmt__descriptor) {
      pg_query__alter_op_family_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__prepare_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__prepare_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DBF40;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DBF50;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__prepare_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__prepare_stmt__descriptor) {
    pg_query__prepare_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__prepare_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__prepare_stmt__descriptor) {
    pg_query__prepare_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__prepare_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__prepare_stmt__descriptor) {
    pg_query__prepare_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__prepare_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__prepare_stmt__descriptor, a1, a2, a3);
}

void **pg_query__prepare_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__prepare_stmt__descriptor) {
      pg_query__prepare_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__execute_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__execute_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DBF78;
  double result = 0.0;
  a1[2] = xmmword_1E55DBF88;
  return result;
}

uint64_t pg_query__execute_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__execute_stmt__descriptor) {
    pg_query__execute_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__execute_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__execute_stmt__descriptor) {
    pg_query__execute_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__execute_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__execute_stmt__descriptor) {
    pg_query__execute_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__execute_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__execute_stmt__descriptor, a1, a2, a3);
}

void **pg_query__execute_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__execute_stmt__descriptor) {
      pg_query__execute_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__deallocate_stmt__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__deallocate_stmt__init_init_value;
  *a1 = pg_query__deallocate_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DBFA8;
  return result;
}

uint64_t pg_query__deallocate_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__deallocate_stmt__descriptor) {
    pg_query__deallocate_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__deallocate_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__deallocate_stmt__descriptor) {
    pg_query__deallocate_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__deallocate_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__deallocate_stmt__descriptor) {
    pg_query__deallocate_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__deallocate_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__deallocate_stmt__descriptor, a1, a2, a3);
}

void **pg_query__deallocate_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__deallocate_stmt__descriptor) {
      pg_query__deallocate_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__declare_cursor_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__declare_cursor_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DBFC8;
  double result = 0.0;
  a1[2] = xmmword_1E55DBFD8;
  return result;
}

uint64_t pg_query__declare_cursor_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__declare_cursor_stmt__descriptor) {
    pg_query__declare_cursor_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__declare_cursor_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__declare_cursor_stmt__descriptor) {
    pg_query__declare_cursor_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__declare_cursor_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__declare_cursor_stmt__descriptor) {
    pg_query__declare_cursor_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__declare_cursor_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__declare_cursor_stmt__descriptor, a1, a2, a3);
}

void **pg_query__declare_cursor_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__declare_cursor_stmt__descriptor) {
      pg_query__declare_cursor_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_table_space_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__create_table_space_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DBFF8;
  double result = 0.0;
  a1[2] = xmmword_1E55DC008;
  a1[3] = unk_1E55DC018;
  return result;
}

uint64_t pg_query__create_table_space_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_table_space_stmt__descriptor) {
    pg_query__create_table_space_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_table_space_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_table_space_stmt__descriptor) {
    pg_query__create_table_space_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_table_space_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_table_space_stmt__descriptor) {
    pg_query__create_table_space_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_table_space_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_table_space_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_table_space_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_table_space_stmt__descriptor) {
      pg_query__create_table_space_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__drop_table_space_stmt__init(uint64_t a1)
{
  double result = *(double *)&pg_query__drop_table_space_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__drop_table_space_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DC038;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__drop_table_space_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__drop_table_space_stmt__descriptor) {
    pg_query__drop_table_space_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__drop_table_space_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__drop_table_space_stmt__descriptor) {
    pg_query__drop_table_space_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__drop_table_space_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__drop_table_space_stmt__descriptor) {
    pg_query__drop_table_space_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__drop_table_space_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__drop_table_space_stmt__descriptor, a1, a2, a3);
}

void **pg_query__drop_table_space_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__drop_table_space_stmt__descriptor) {
      pg_query__drop_table_space_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_object_depends_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__alter_object_depends_stmt__init_init_value;
  a1[1] = unk_1E55DC060;
  double result = 0.0;
  a1[2] = xmmword_1E55DC070;
  a1[3] = unk_1E55DC080;
  return result;
}

uint64_t pg_query__alter_object_depends_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_object_depends_stmt__descriptor) {
    pg_query__alter_object_depends_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_object_depends_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_object_depends_stmt__descriptor) {
    pg_query__alter_object_depends_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_object_depends_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_object_depends_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_object_depends_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_object_depends_stmt__descriptor) {
      pg_query__alter_object_depends_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_object_schema_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__alter_object_schema_stmt__init_init_value;
  a1[1] = unk_1E55DC0A0;
  double result = 0.0;
  a1[2] = xmmword_1E55DC0B0;
  a1[3] = *(_OWORD *)&off_1E55DC0C0;
  return result;
}

uint64_t pg_query__alter_object_schema_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_object_schema_stmt__descriptor) {
    pg_query__alter_object_schema_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_object_schema_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_object_schema_stmt__descriptor) {
    pg_query__alter_object_schema_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_object_schema_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_object_schema_stmt__descriptor) {
    pg_query__alter_object_schema_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_object_schema_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_object_schema_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_object_schema_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_object_schema_stmt__descriptor) {
      pg_query__alter_object_schema_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_owner_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__alter_owner_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DC0E0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC0F0;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_owner_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_owner_stmt__descriptor) {
    pg_query__alter_owner_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_owner_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_owner_stmt__descriptor) {
    pg_query__alter_owner_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_owner_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_owner_stmt__descriptor, a1, a2, a3);
}

double pg_query__alter_operator_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__alter_operator_stmt__init_init_value;
  a1[1] = unk_1E55DC118;
  double result = 0.0;
  a1[2] = xmmword_1E55DC128;
  return result;
}

uint64_t pg_query__alter_operator_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_operator_stmt__descriptor) {
    pg_query__alter_operator_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_operator_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_operator_stmt__descriptor) {
    pg_query__alter_operator_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_operator_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_operator_stmt__descriptor) {
    pg_query__alter_operator_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_operator_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_operator_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_operator_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_operator_stmt__descriptor) {
      pg_query__alter_operator_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_type_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__alter_type_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DC148;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC158;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_type_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_type_stmt__descriptor) {
    pg_query__alter_type_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_type_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_type_stmt__descriptor) {
    pg_query__alter_type_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_type_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_type_stmt__descriptor) {
    pg_query__alter_type_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_type_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_type_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_type_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_type_stmt__descriptor) {
      pg_query__alter_type_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__drop_owned_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__drop_owned_stmt__init_init_value;
  a1[1] = unk_1E55DC180;
  double result = 0.0;
  a1[2] = xmmword_1E55DC190;
  return result;
}

uint64_t pg_query__drop_owned_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__drop_owned_stmt__descriptor) {
    pg_query__drop_owned_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__drop_owned_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__drop_owned_stmt__descriptor) {
    pg_query__drop_owned_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__drop_owned_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__drop_owned_stmt__descriptor) {
    pg_query__drop_owned_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__drop_owned_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__drop_owned_stmt__descriptor, a1, a2, a3);
}

void **pg_query__drop_owned_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__drop_owned_stmt__descriptor) {
      pg_query__drop_owned_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__reassign_owned_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__reassign_owned_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DC1B0;
  double result = 0.0;
  a1[2] = xmmword_1E55DC1C0;
  return result;
}

uint64_t pg_query__reassign_owned_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__reassign_owned_stmt__descriptor) {
    pg_query__reassign_owned_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__reassign_owned_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__reassign_owned_stmt__descriptor) {
    pg_query__reassign_owned_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__reassign_owned_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__reassign_owned_stmt__descriptor) {
    pg_query__reassign_owned_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__reassign_owned_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__reassign_owned_stmt__descriptor, a1, a2, a3);
}

void **pg_query__reassign_owned_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__reassign_owned_stmt__descriptor) {
      pg_query__reassign_owned_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__composite_type_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__composite_type_stmt__init_init_value;
  a1[1] = unk_1E55DC1E0;
  double result = 0.0;
  a1[2] = xmmword_1E55DC1F0;
  return result;
}

uint64_t pg_query__composite_type_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__composite_type_stmt__descriptor) {
    pg_query__composite_type_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__composite_type_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__composite_type_stmt__descriptor) {
    pg_query__composite_type_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__composite_type_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__composite_type_stmt__descriptor) {
    pg_query__composite_type_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__composite_type_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__composite_type_stmt__descriptor, a1, a2, a3);
}

void **pg_query__composite_type_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__composite_type_stmt__descriptor) {
      pg_query__composite_type_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_enum_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__create_enum_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DC210;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC220;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_enum_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_enum_stmt__descriptor) {
    pg_query__create_enum_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_enum_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_enum_stmt__descriptor) {
    pg_query__create_enum_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_enum_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_enum_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_enum_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_enum_stmt__descriptor) {
      pg_query__create_enum_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_range_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__create_range_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DC248;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC258;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_range_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_range_stmt__descriptor) {
    pg_query__create_range_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_range_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_range_stmt__descriptor) {
    pg_query__create_range_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_range_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_range_stmt__descriptor) {
    pg_query__create_range_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_range_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_range_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_range_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_range_stmt__descriptor) {
      pg_query__create_range_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_enum_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC290;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1E55DC2A0;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DC280[0];
  *(_OWORD *)a1 = pg_query__alter_enum_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DC280;
  return result;
}

uint64_t pg_query__alter_enum_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_enum_stmt__descriptor) {
    pg_query__alter_enum_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_enum_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_enum_stmt__descriptor) {
    pg_query__alter_enum_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_enum_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_enum_stmt__descriptor) {
    pg_query__alter_enum_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_enum_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_enum_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_enum_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_enum_stmt__descriptor) {
      pg_query__alter_enum_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_tsdictionary_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__alter_tsdictionary_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DC2C8;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC2D8;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_tsdictionary_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_tsdictionary_stmt__descriptor) {
    pg_query__alter_tsdictionary_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_tsdictionary_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_tsdictionary_stmt__descriptor) {
    pg_query__alter_tsdictionary_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_tsdictionary_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_tsdictionary_stmt__descriptor) {
    pg_query__alter_tsdictionary_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_tsdictionary_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_tsdictionary_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_tsdictionary_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_tsdictionary_stmt__descriptor) {
      pg_query__alter_tsdictionary_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_tsconfiguration_stmt__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DC310;
  a1[3] = unk_1E55DC320;
  a1[4] = xmmword_1E55DC330;
  a1[5] = unk_1E55DC340;
  double result = *(double *)&pg_query__alter_tsconfiguration_stmt__init_init_value;
  *a1 = pg_query__alter_tsconfiguration_stmt__init_init_value;
  a1[1] = unk_1E55DC300;
  return result;
}

uint64_t pg_query__alter_tsconfiguration_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_tsconfiguration_stmt__descriptor) {
    pg_query__alter_tsconfiguration_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_tsconfiguration_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_tsconfiguration_stmt__descriptor) {
    pg_query__alter_tsconfiguration_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_tsconfiguration_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_tsconfiguration_stmt__descriptor) {
    pg_query__alter_tsconfiguration_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_tsconfiguration_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_tsconfiguration_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_tsconfiguration_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_tsconfiguration_stmt__descriptor) {
      pg_query__alter_tsconfiguration_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_fdw_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__create_fdw_stmt__init_init_value;
  a1[1] = unk_1E55DC360;
  double result = 0.0;
  a1[2] = xmmword_1E55DC370;
  a1[3] = unk_1E55DC380;
  return result;
}

uint64_t pg_query__create_fdw_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_fdw_stmt__descriptor) {
    pg_query__create_fdw_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_fdw_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_fdw_stmt__descriptor) {
    pg_query__create_fdw_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_fdw_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_fdw_stmt__descriptor) {
    pg_query__create_fdw_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_fdw_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_fdw_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_fdw_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_fdw_stmt__descriptor) {
      pg_query__create_fdw_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_fdw_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__alter_fdw_stmt__init_init_value;
  a1[1] = unk_1E55DC3A0;
  double result = 0.0;
  a1[2] = xmmword_1E55DC3B0;
  a1[3] = unk_1E55DC3C0;
  return result;
}

uint64_t pg_query__alter_fdw_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_fdw_stmt__descriptor) {
    pg_query__alter_fdw_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_fdw_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_fdw_stmt__descriptor) {
    pg_query__alter_fdw_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_fdw_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_fdw_stmt__descriptor) {
    pg_query__alter_fdw_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_fdw_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_fdw_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_fdw_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_fdw_stmt__descriptor) {
      pg_query__alter_fdw_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_foreign_server_stmt__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DC3F0;
  a1[3] = *(_OWORD *)&off_1E55DC400;
  a1[4] = xmmword_1E55DC410;
  double result = dbl_1E55DC3E0[0];
  *a1 = pg_query__create_foreign_server_stmt__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E55DC3E0;
  return result;
}

uint64_t pg_query__create_foreign_server_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_foreign_server_stmt__descriptor) {
    pg_query__create_foreign_server_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_foreign_server_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_foreign_server_stmt__descriptor) {
    pg_query__create_foreign_server_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_foreign_server_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_foreign_server_stmt__descriptor) {
    pg_query__create_foreign_server_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_foreign_server_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_foreign_server_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_foreign_server_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_foreign_server_stmt__descriptor) {
      pg_query__create_foreign_server_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_foreign_server_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__alter_foreign_server_stmt__init_init_value;
  a1[1] = unk_1E55DC430;
  *(void *)&double result = 0x18EBDE320;
  a1[2] = xmmword_1E55DC440;
  a1[3] = unk_1E55DC450;
  return result;
}

uint64_t pg_query__alter_foreign_server_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_foreign_server_stmt__descriptor) {
    pg_query__alter_foreign_server_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_foreign_server_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_foreign_server_stmt__descriptor) {
    pg_query__alter_foreign_server_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_foreign_server_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_foreign_server_stmt__descriptor) {
    pg_query__alter_foreign_server_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_foreign_server_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_foreign_server_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_foreign_server_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_foreign_server_stmt__descriptor) {
      pg_query__alter_foreign_server_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_user_mapping_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__create_user_mapping_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DC470;
  *(void *)&double result = 0x18EBDE320;
  a1[2] = xmmword_1E55DC480;
  a1[3] = unk_1E55DC490;
  return result;
}

uint64_t pg_query__create_user_mapping_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_user_mapping_stmt__descriptor) {
    pg_query__create_user_mapping_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_user_mapping_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_user_mapping_stmt__descriptor) {
    pg_query__create_user_mapping_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_user_mapping_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_user_mapping_stmt__descriptor) {
    pg_query__create_user_mapping_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_user_mapping_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_user_mapping_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_user_mapping_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_user_mapping_stmt__descriptor) {
      pg_query__create_user_mapping_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_user_mapping_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__alter_user_mapping_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DC4B0;
  *(void *)&double result = 0x18EBDE320;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC4C0;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_user_mapping_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_user_mapping_stmt__descriptor) {
    pg_query__alter_user_mapping_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_user_mapping_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_user_mapping_stmt__descriptor) {
    pg_query__alter_user_mapping_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_user_mapping_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_user_mapping_stmt__descriptor) {
    pg_query__alter_user_mapping_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_user_mapping_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_user_mapping_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_user_mapping_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_user_mapping_stmt__descriptor) {
      pg_query__alter_user_mapping_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__drop_user_mapping_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__drop_user_mapping_stmt__init_init_value;
  a1[1] = unk_1E55DC4E8;
  *(void *)&double result = 0x18EBDE320;
  a1[2] = xmmword_1E55DC4F8;
  return result;
}

uint64_t pg_query__drop_user_mapping_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__drop_user_mapping_stmt__descriptor) {
    pg_query__drop_user_mapping_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__drop_user_mapping_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__drop_user_mapping_stmt__descriptor) {
    pg_query__drop_user_mapping_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__drop_user_mapping_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__drop_user_mapping_stmt__descriptor) {
    pg_query__drop_user_mapping_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__drop_user_mapping_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__drop_user_mapping_stmt__descriptor, a1, a2, a3);
}

void **pg_query__drop_user_mapping_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__drop_user_mapping_stmt__descriptor) {
      pg_query__drop_user_mapping_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_table_space_options_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__alter_table_space_options_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DC518;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC528;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__alter_table_space_options_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_table_space_options_stmt__descriptor) {
    pg_query__alter_table_space_options_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_table_space_options_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_table_space_options_stmt__descriptor) {
    pg_query__alter_table_space_options_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_table_space_options_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_table_space_options_stmt__descriptor) {
    pg_query__alter_table_space_options_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_table_space_options_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_table_space_options_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_table_space_options_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_table_space_options_stmt__descriptor) {
      pg_query__alter_table_space_options_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_table_move_all_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC560;
  *(_OWORD *)(a1 + 48) = unk_1E55DC570;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DC550[0];
  *(_OWORD *)a1 = pg_query__alter_table_move_all_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DC550;
  return result;
}

uint64_t pg_query__alter_table_move_all_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_table_move_all_stmt__descriptor) {
    pg_query__alter_table_move_all_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_table_move_all_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_table_move_all_stmt__descriptor) {
    pg_query__alter_table_move_all_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_table_move_all_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_table_move_all_stmt__descriptor) {
    pg_query__alter_table_move_all_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_table_move_all_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_table_move_all_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_table_move_all_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_table_move_all_stmt__descriptor) {
      pg_query__alter_table_move_all_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__sec_label_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__sec_label_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DC598;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC5A8;
  *(void *)(a1 + 48) = &protobuf_c_empty_string;
  return result;
}

uint64_t pg_query__sec_label_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__sec_label_stmt__descriptor) {
    pg_query__sec_label_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__sec_label_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__sec_label_stmt__descriptor) {
    pg_query__sec_label_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__sec_label_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__sec_label_stmt__descriptor) {
    pg_query__sec_label_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__sec_label_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__sec_label_stmt__descriptor, a1, a2, a3);
}

void **pg_query__sec_label_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__sec_label_stmt__descriptor) {
      pg_query__sec_label_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_foreign_table_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__create_foreign_table_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DC5D0;
  *(void *)&double result = 0x18EBDE320;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC5E0;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_foreign_table_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_foreign_table_stmt__descriptor) {
    pg_query__create_foreign_table_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_foreign_table_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_foreign_table_stmt__descriptor) {
    pg_query__create_foreign_table_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_foreign_table_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_foreign_table_stmt__descriptor) {
    pg_query__create_foreign_table_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_foreign_table_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_foreign_table_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_foreign_table_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_foreign_table_stmt__descriptor) {
      pg_query__create_foreign_table_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__import_foreign_schema_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC618;
  *(_OWORD *)(a1 + 48) = unk_1E55DC628;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DC638;
  *(void *)(a1 + 8errstart(20, 0) = 0;
  double result = *(double *)&pg_query__import_foreign_schema_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__import_foreign_schema_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DC608;
  return result;
}

uint64_t pg_query__import_foreign_schema_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__import_foreign_schema_stmt__descriptor) {
    pg_query__import_foreign_schema_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__import_foreign_schema_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__import_foreign_schema_stmt__descriptor) {
    pg_query__import_foreign_schema_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__import_foreign_schema_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__import_foreign_schema_stmt__descriptor) {
    pg_query__import_foreign_schema_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__import_foreign_schema_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__import_foreign_schema_stmt__descriptor, a1, a2, a3);
}

void **pg_query__import_foreign_schema_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__import_foreign_schema_stmt__descriptor) {
      pg_query__import_foreign_schema_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_extension_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__create_extension_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DC660;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC670;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__create_extension_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_extension_stmt__descriptor) {
    pg_query__create_extension_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_extension_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_extension_stmt__descriptor) {
    pg_query__create_extension_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_extension_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_extension_stmt__descriptor) {
    pg_query__create_extension_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_extension_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_extension_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_extension_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_extension_stmt__descriptor) {
      pg_query__create_extension_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_extension_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__alter_extension_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DC698;
  double result = 0.0;
  a1[2] = xmmword_1E55DC6A8;
  return result;
}

uint64_t pg_query__alter_extension_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_extension_stmt__descriptor) {
    pg_query__alter_extension_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_extension_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_extension_stmt__descriptor) {
    pg_query__alter_extension_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_extension_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_extension_stmt__descriptor) {
    pg_query__alter_extension_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_extension_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_extension_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_extension_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_extension_stmt__descriptor) {
      pg_query__alter_extension_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_extension_contents_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__alter_extension_contents_stmt__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DC6C8;
  double result = 0.0;
  a1[2] = xmmword_1E55DC6D8;
  return result;
}

uint64_t pg_query__alter_extension_contents_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_extension_contents_stmt__descriptor) {
    pg_query__alter_extension_contents_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_extension_contents_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_extension_contents_stmt__descriptor) {
    pg_query__alter_extension_contents_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_extension_contents_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_extension_contents_stmt__descriptor) {
    pg_query__alter_extension_contents_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_extension_contents_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_extension_contents_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_extension_contents_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_extension_contents_stmt__descriptor) {
      pg_query__alter_extension_contents_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_event_trig_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC708;
  *(_OWORD *)(a1 + 48) = unk_1E55DC718;
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = pg_query__create_event_trig_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DC6F8;
  return result;
}

uint64_t pg_query__create_event_trig_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_event_trig_stmt__descriptor) {
    pg_query__create_event_trig_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_event_trig_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_event_trig_stmt__descriptor) {
    pg_query__create_event_trig_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_event_trig_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_event_trig_stmt__descriptor) {
    pg_query__create_event_trig_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_event_trig_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_event_trig_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_event_trig_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_event_trig_stmt__descriptor) {
      pg_query__create_event_trig_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_event_trig_stmt__init(uint64_t a1)
{
  double result = *(double *)&pg_query__alter_event_trig_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__alter_event_trig_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DC740;
  *(void *)(a1 + 32) = &protobuf_c_empty_string;
  return result;
}

uint64_t pg_query__alter_event_trig_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_event_trig_stmt__descriptor) {
    pg_query__alter_event_trig_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_event_trig_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_event_trig_stmt__descriptor) {
    pg_query__alter_event_trig_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_event_trig_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_event_trig_stmt__descriptor) {
    pg_query__alter_event_trig_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_event_trig_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_event_trig_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_event_trig_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_event_trig_stmt__descriptor) {
      pg_query__alter_event_trig_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__refresh_mat_view_stmt__init(uint64_t a1)
{
  double result = *(double *)&pg_query__refresh_mat_view_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__refresh_mat_view_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DC768;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__refresh_mat_view_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__refresh_mat_view_stmt__descriptor) {
    pg_query__refresh_mat_view_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__refresh_mat_view_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__refresh_mat_view_stmt__descriptor) {
    pg_query__refresh_mat_view_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__refresh_mat_view_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__refresh_mat_view_stmt__descriptor) {
    pg_query__refresh_mat_view_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__refresh_mat_view_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__refresh_mat_view_stmt__descriptor, a1, a2, a3);
}

void **pg_query__refresh_mat_view_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__refresh_mat_view_stmt__descriptor) {
      pg_query__refresh_mat_view_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__replica_identity_stmt__init(uint64_t a1)
{
  double result = *(double *)&pg_query__replica_identity_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__replica_identity_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DC790;
  *(void *)(a1 + 32) = &protobuf_c_empty_string;
  return result;
}

uint64_t pg_query__replica_identity_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__replica_identity_stmt__descriptor) {
    pg_query__replica_identity_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__replica_identity_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__replica_identity_stmt__descriptor) {
    pg_query__replica_identity_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__replica_identity_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__replica_identity_stmt__descriptor) {
    pg_query__replica_identity_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__replica_identity_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__replica_identity_stmt__descriptor, a1, a2, a3);
}

void **pg_query__replica_identity_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__replica_identity_stmt__descriptor) {
      pg_query__replica_identity_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_system_stmt__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__alter_system_stmt__init_init_value;
  *a1 = pg_query__alter_system_stmt__init_init_value;
  a1[1] = unk_1E55DC7B8;
  return result;
}

uint64_t pg_query__alter_system_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_system_stmt__descriptor) {
    pg_query__alter_system_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_system_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_system_stmt__descriptor) {
    pg_query__alter_system_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_system_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_system_stmt__descriptor) {
    pg_query__alter_system_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_system_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_system_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_system_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_system_stmt__descriptor) {
      pg_query__alter_system_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_policy_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC7E8;
  *(_OWORD *)(a1 + 48) = unk_1E55DC7F8;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DC808;
  *(void *)(a1 + 8errstart(20, 0) = 0;
  double result = *(double *)&pg_query__create_policy_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__create_policy_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DC7D8;
  return result;
}

uint64_t pg_query__create_policy_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_policy_stmt__descriptor) {
    pg_query__create_policy_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_policy_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_policy_stmt__descriptor) {
    pg_query__create_policy_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_policy_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_policy_stmt__descriptor) {
    pg_query__create_policy_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_policy_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_policy_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_policy_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_policy_stmt__descriptor) {
      pg_query__create_policy_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_policy_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC840;
  *(_OWORD *)(a1 + 48) = unk_1E55DC850;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DC830[0];
  *(_OWORD *)a1 = pg_query__alter_policy_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DC830;
  return result;
}

uint64_t pg_query__alter_policy_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_policy_stmt__descriptor) {
    pg_query__alter_policy_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_policy_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_policy_stmt__descriptor) {
    pg_query__alter_policy_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_policy_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_policy_stmt__descriptor) {
    pg_query__alter_policy_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_policy_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_policy_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_policy_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_policy_stmt__descriptor) {
      pg_query__alter_policy_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_transform_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__create_transform_stmt__init_init_value;
  a1[1] = unk_1E55DC878;
  double result = 0.0;
  a1[2] = xmmword_1E55DC888;
  a1[3] = unk_1E55DC898;
  return result;
}

uint64_t pg_query__create_transform_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_transform_stmt__descriptor) {
    pg_query__create_transform_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_transform_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_transform_stmt__descriptor) {
    pg_query__create_transform_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_transform_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_transform_stmt__descriptor) {
    pg_query__create_transform_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_transform_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_transform_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_transform_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_transform_stmt__descriptor) {
      pg_query__create_transform_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_am_stmt__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__create_am_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DC8B8;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC8C8;
  *(void *)(a1 + 48) = &protobuf_c_empty_string;
  return result;
}

uint64_t pg_query__create_am_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_am_stmt__descriptor) {
    pg_query__create_am_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_am_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_am_stmt__descriptor) {
    pg_query__create_am_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_am_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_am_stmt__descriptor) {
    pg_query__create_am_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_am_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_am_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_am_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_am_stmt__descriptor) {
      pg_query__create_am_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_publication_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC900;
  *(_OWORD *)(a1 + 48) = unk_1E55DC910;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DC8F0[0];
  *(_OWORD *)a1 = pg_query__create_publication_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DC8F0;
  return result;
}

uint64_t pg_query__create_publication_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_publication_stmt__descriptor) {
    pg_query__create_publication_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_publication_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_publication_stmt__descriptor) {
    pg_query__create_publication_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_publication_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_publication_stmt__descriptor) {
    pg_query__create_publication_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_publication_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_publication_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_publication_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_publication_stmt__descriptor) {
      pg_query__create_publication_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_publication_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC948;
  *(_OWORD *)(a1 + 48) = unk_1E55DC958;
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = pg_query__alter_publication_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DC938;
  return result;
}

uint64_t pg_query__alter_publication_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_publication_stmt__descriptor) {
    pg_query__alter_publication_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_publication_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_publication_stmt__descriptor) {
    pg_query__alter_publication_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_publication_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_publication_stmt__descriptor) {
    pg_query__alter_publication_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_publication_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_publication_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_publication_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_publication_stmt__descriptor) {
      pg_query__alter_publication_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_subscription_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DC990;
  *(_OWORD *)(a1 + 48) = unk_1E55DC9A0;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DC980[0];
  *(_OWORD *)a1 = pg_query__create_subscription_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DC980;
  return result;
}

uint64_t pg_query__create_subscription_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_subscription_stmt__descriptor) {
    pg_query__create_subscription_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_subscription_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_subscription_stmt__descriptor) {
    pg_query__create_subscription_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_subscription_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_subscription_stmt__descriptor) {
    pg_query__create_subscription_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_subscription_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_subscription_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_subscription_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_subscription_stmt__descriptor) {
      pg_query__create_subscription_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_subscription_stmt__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DC9D8;
  a1[3] = unk_1E55DC9E8;
  a1[4] = xmmword_1E55DC9F8;
  double result = dbl_1E55DC9C8[0];
  *a1 = pg_query__alter_subscription_stmt__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E55DC9C8;
  return result;
}

uint64_t pg_query__alter_subscription_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_subscription_stmt__descriptor) {
    pg_query__alter_subscription_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_subscription_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_subscription_stmt__descriptor) {
    pg_query__alter_subscription_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_subscription_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_subscription_stmt__descriptor) {
    pg_query__alter_subscription_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_subscription_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_subscription_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_subscription_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_subscription_stmt__descriptor) {
      pg_query__alter_subscription_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__drop_subscription_stmt__init(uint64_t a1)
{
  double result = *(double *)&pg_query__drop_subscription_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__drop_subscription_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DCA18;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__drop_subscription_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__drop_subscription_stmt__descriptor) {
    pg_query__drop_subscription_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__drop_subscription_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__drop_subscription_stmt__descriptor) {
    pg_query__drop_subscription_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__drop_subscription_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__drop_subscription_stmt__descriptor) {
    pg_query__drop_subscription_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__drop_subscription_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__drop_subscription_stmt__descriptor, a1, a2, a3);
}

void **pg_query__drop_subscription_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__drop_subscription_stmt__descriptor) {
      pg_query__drop_subscription_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_stats_stmt__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = xmmword_1E55DCA70;
  *(_OWORD *)(a1 + 8errstart(20, 0) = unk_1E55DCA80;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)a1 = pg_query__create_stats_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DCA40;
  double result = dbl_1E55DCA60[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E55DCA50;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)dbl_1E55DCA60;
  return result;
}

uint64_t pg_query__create_stats_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_stats_stmt__descriptor) {
    pg_query__create_stats_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_stats_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_stats_stmt__descriptor) {
    pg_query__create_stats_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_stats_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_stats_stmt__descriptor) {
    pg_query__create_stats_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_stats_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_stats_stmt__descriptor, a1, a2, a3);
}

void **pg_query__create_stats_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_stats_stmt__descriptor) {
      pg_query__create_stats_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_collation_stmt__init(uint64_t a1)
{
  double result = *(double *)&pg_query__alter_collation_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__alter_collation_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DCAA8;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__alter_collation_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_collation_stmt__descriptor) {
    pg_query__alter_collation_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_collation_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_collation_stmt__descriptor) {
    pg_query__alter_collation_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_collation_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_collation_stmt__descriptor) {
    pg_query__alter_collation_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_collation_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_collation_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_collation_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_collation_stmt__descriptor) {
      pg_query__alter_collation_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__call_stmt__init(uint64_t a1)
{
  double result = *(double *)&pg_query__call_stmt__init_init_value;
  *(_OWORD *)a1 = pg_query__call_stmt__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DCAD0;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__call_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__call_stmt__descriptor) {
    pg_query__call_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__call_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__call_stmt__descriptor) {
    pg_query__call_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__call_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__call_stmt__descriptor) {
    pg_query__call_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__call_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__call_stmt__descriptor, a1, a2, a3);
}

void **pg_query__call_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__call_stmt__descriptor) {
      pg_query__call_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__alter_stats_stmt__init(_OWORD *a1)
{
  *a1 = pg_query__alter_stats_stmt__init_init_value;
  a1[1] = unk_1E55DCAF8;
  double result = 0.0;
  a1[2] = xmmword_1E55DCB08;
  return result;
}

uint64_t pg_query__alter_stats_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_stats_stmt__descriptor) {
    pg_query__alter_stats_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__alter_stats_stmt__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alter_stats_stmt__descriptor) {
    pg_query__alter_stats_stmt__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__alter_stats_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_stats_stmt__descriptor) {
    pg_query__alter_stats_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__alter_stats_stmt__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__alter_stats_stmt__descriptor, a1, a2, a3);
}

void **pg_query__alter_stats_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_stats_stmt__descriptor) {
      pg_query__alter_stats_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__a__expr__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DCB38;
  *(_OWORD *)(a1 + 48) = unk_1E55DCB48;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DCB28[0];
  *(_OWORD *)a1 = pg_query__a__expr__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DCB28;
  return result;
}

uint64_t pg_query__a__expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__a__expr__descriptor) {
    pg_query__a__expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__a__expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__a__expr__descriptor) {
    pg_query__a__expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__a__expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__a__expr__descriptor) {
    pg_query__a__expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__a__expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__a__expr__descriptor, a1, a2, a3);
}

void **pg_query__a__expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__a__expr__descriptor) {
      pg_query__a__expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__column_ref__init(_OWORD *a1)
{
  *a1 = pg_query__column_ref__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DCB70;
  double result = 0.0;
  a1[2] = xmmword_1E55DCB80;
  return result;
}

uint64_t pg_query__column_ref__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__column_ref__descriptor) {
    pg_query__column_ref__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__column_ref__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__column_ref__descriptor) {
    pg_query__column_ref__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__column_ref__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__column_ref__descriptor) {
    pg_query__column_ref__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__column_ref__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__column_ref__descriptor, a1, a2, a3);
}

void **pg_query__column_ref__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__column_ref__descriptor) {
      pg_query__column_ref__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__param_ref__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__param_ref__init_init_value;
  *a1 = pg_query__param_ref__init_init_value;
  a1[1] = unk_1E55DCBA0;
  return result;
}

uint64_t pg_query__param_ref__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__param_ref__descriptor) {
    pg_query__param_ref__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__param_ref__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__param_ref__descriptor) {
    pg_query__param_ref__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__param_ref__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__param_ref__descriptor) {
    pg_query__param_ref__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__param_ref__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__param_ref__descriptor, a1, a2, a3);
}

void **pg_query__param_ref__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__param_ref__descriptor) {
      pg_query__param_ref__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__a__const__init(uint64_t a1)
{
  double result = *(double *)&pg_query__a__const__init_init_value;
  *(_OWORD *)a1 = pg_query__a__const__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DCBC0;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__a__const__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__a__const__descriptor) {
    pg_query__a__const__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__a__const__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__a__const__descriptor) {
    pg_query__a__const__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__a__const__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__a__const__descriptor) {
    pg_query__a__const__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__a__const__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__a__const__descriptor, a1, a2, a3);
}

void **pg_query__a__const__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__a__const__descriptor) {
      pg_query__a__const__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__func_call__init(_OWORD *a1)
{
  a1[4] = xmmword_1E55DCC18;
  a1[5] = unk_1E55DCC28;
  a1[6] = xmmword_1E55DCC38;
  *a1 = pg_query__func_call__init_init_value;
  a1[1] = unk_1E55DCBE8;
  double result = dbl_1E55DCC08[0];
  a1[2] = xmmword_1E55DCBF8;
  a1[3] = *(_OWORD *)dbl_1E55DCC08;
  return result;
}

uint64_t pg_query__func_call__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__func_call__descriptor) {
    pg_query__func_call__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__func_call__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__func_call__descriptor) {
    pg_query__func_call__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__func_call__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__func_call__descriptor) {
    pg_query__func_call__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__func_call__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__func_call__descriptor, a1, a2, a3);
}

void **pg_query__func_call__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__func_call__descriptor) {
      pg_query__func_call__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__a__star__init(uint64_t a1)
{
  double result = *(double *)&pg_query__a__star__init_init_value;
  *(_OWORD *)a1 = pg_query__a__star__init_init_value;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t pg_query__a__star__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__a__star__descriptor) {
    pg_query__a__star__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__a__star__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__a__star__descriptor) {
    pg_query__a__star__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__a__star__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__a__star__descriptor) {
    pg_query__a__star__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__a__star__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__a__star__descriptor, a1, a2, a3);
}

void **pg_query__a__star__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__a__star__descriptor) {
      pg_query__a__star__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__a__indices__init(_OWORD *a1)
{
  *a1 = pg_query__a__indices__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DCC70;
  double result = 0.0;
  a1[2] = xmmword_1E55DCC80;
  return result;
}

uint64_t pg_query__a__indices__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__a__indices__descriptor) {
    pg_query__a__indices__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__a__indices__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__a__indices__descriptor) {
    pg_query__a__indices__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__a__indices__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__a__indices__descriptor) {
    pg_query__a__indices__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__a__indices__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__a__indices__descriptor, a1, a2, a3);
}

void **pg_query__a__indices__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__a__indices__descriptor) {
      pg_query__a__indices__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__a__indirection__init(_OWORD *a1)
{
  *a1 = pg_query__a__indirection__init_init_value;
  a1[1] = unk_1E55DCCA0;
  double result = 0.0;
  a1[2] = xmmword_1E55DCCB0;
  return result;
}

uint64_t pg_query__a__indirection__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__a__indirection__descriptor) {
    pg_query__a__indirection__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__a__indirection__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__a__indirection__descriptor) {
    pg_query__a__indirection__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__a__indirection__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__a__indirection__descriptor) {
    pg_query__a__indirection__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__a__indirection__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__a__indirection__descriptor, a1, a2, a3);
}

void **pg_query__a__indirection__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__a__indirection__descriptor) {
      pg_query__a__indirection__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__a__array_expr__init(_OWORD *a1)
{
  *a1 = pg_query__a__array_expr__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DCCD0;
  double result = 0.0;
  a1[2] = xmmword_1E55DCCE0;
  return result;
}

uint64_t pg_query__a__array_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__a__array_expr__descriptor) {
    pg_query__a__array_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__a__array_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__a__array_expr__descriptor) {
    pg_query__a__array_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__a__array_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__a__array_expr__descriptor) {
    pg_query__a__array_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__a__array_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__a__array_expr__descriptor, a1, a2, a3);
}

void **pg_query__a__array_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__a__array_expr__descriptor) {
      pg_query__a__array_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__res_target__init(_OWORD *a1)
{
  *a1 = pg_query__res_target__init_init_value;
  a1[1] = unk_1E55DCD00;
  double result = 0.0;
  a1[2] = xmmword_1E55DCD10;
  a1[3] = unk_1E55DCD20;
  return result;
}

uint64_t pg_query__res_target__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__res_target__descriptor) {
    pg_query__res_target__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__res_target__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__res_target__descriptor) {
    pg_query__res_target__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__res_target__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__res_target__descriptor) {
    pg_query__res_target__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__res_target__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__res_target__descriptor, a1, a2, a3);
}

void **pg_query__res_target__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__res_target__descriptor) {
      pg_query__res_target__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__multi_assign_ref__init(uint64_t a1)
{
  double result = *(double *)&pg_query__multi_assign_ref__init_init_value;
  *(_OWORD *)a1 = pg_query__multi_assign_ref__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DCD40;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__multi_assign_ref__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__multi_assign_ref__descriptor) {
    pg_query__multi_assign_ref__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__multi_assign_ref__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__multi_assign_ref__descriptor) {
    pg_query__multi_assign_ref__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__multi_assign_ref__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__multi_assign_ref__descriptor) {
    pg_query__multi_assign_ref__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__multi_assign_ref__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__multi_assign_ref__descriptor, a1, a2, a3);
}

void **pg_query__multi_assign_ref__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__multi_assign_ref__descriptor) {
      pg_query__multi_assign_ref__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__type_cast__init(_OWORD *a1)
{
  *a1 = pg_query__type_cast__init_init_value;
  a1[1] = unk_1E55DCD68;
  double result = 0.0;
  a1[2] = xmmword_1E55DCD78;
  return result;
}

uint64_t pg_query__type_cast__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__type_cast__descriptor) {
    pg_query__type_cast__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__type_cast__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__type_cast__descriptor) {
    pg_query__type_cast__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__type_cast__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__type_cast__descriptor) {
    pg_query__type_cast__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__type_cast__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__type_cast__descriptor, a1, a2, a3);
}

void **pg_query__type_cast__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__type_cast__descriptor) {
      pg_query__type_cast__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__collate_clause__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__collate_clause__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DCD98;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DCDA8;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__collate_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__collate_clause__descriptor) {
    pg_query__collate_clause__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__collate_clause__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__collate_clause__descriptor) {
    pg_query__collate_clause__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__collate_clause__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__collate_clause__descriptor) {
    pg_query__collate_clause__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__collate_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__collate_clause__descriptor, a1, a2, a3);
}

void **pg_query__collate_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__collate_clause__descriptor) {
      pg_query__collate_clause__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__sort_by__init(_OWORD *a1)
{
  *a1 = pg_query__sort_by__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DCDD0;
  double result = 0.0;
  a1[2] = xmmword_1E55DCDE0;
  a1[3] = unk_1E55DCDF0;
  return result;
}

uint64_t pg_query__sort_by__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__sort_by__descriptor) {
    pg_query__sort_by__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__sort_by__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__sort_by__descriptor) {
    pg_query__sort_by__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__sort_by__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__sort_by__descriptor) {
    pg_query__sort_by__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__sort_by__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__sort_by__descriptor, a1, a2, a3);
}

void **pg_query__sort_by__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__sort_by__descriptor) {
      pg_query__sort_by__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__window_def__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = xmmword_1E55DCE40;
  *(_OWORD *)(a1 + 8errstart(20, 0) = unk_1E55DCE50;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)a1 = pg_query__window_def__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DCE10;
  double result = dbl_1E55DCE30[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E55DCE20;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)dbl_1E55DCE30;
  return result;
}

uint64_t pg_query__window_def__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__window_def__descriptor) {
    pg_query__window_def__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__window_def__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__window_def__descriptor) {
    pg_query__window_def__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__window_def__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__window_def__descriptor) {
    pg_query__window_def__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__window_def__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__window_def__descriptor, a1, a2, a3);
}

void **pg_query__window_def__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__window_def__descriptor) {
      pg_query__window_def__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_subselect__init(_OWORD *a1)
{
  *a1 = pg_query__range_subselect__init_init_value;
  a1[1] = unk_1E55DCE78;
  double result = 0.0;
  a1[2] = xmmword_1E55DCE88;
  return result;
}

uint64_t pg_query__range_subselect__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_subselect__descriptor) {
    pg_query__range_subselect__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_subselect__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__range_subselect__descriptor) {
    pg_query__range_subselect__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__range_subselect__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__range_subselect__descriptor) {
    pg_query__range_subselect__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__range_subselect__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_subselect__descriptor, a1, a2, a3);
}

void **pg_query__range_subselect__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_subselect__descriptor) {
      pg_query__range_subselect__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_function__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DCEB8;
  a1[3] = unk_1E55DCEC8;
  a1[4] = xmmword_1E55DCED8;
  double result = dbl_1E55DCEA8[0];
  *a1 = pg_query__range_function__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E55DCEA8;
  return result;
}

uint64_t pg_query__range_function__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_function__descriptor) {
    pg_query__range_function__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_function__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__range_function__descriptor) {
    pg_query__range_function__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__range_function__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__range_function__descriptor) {
    pg_query__range_function__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__range_function__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_function__descriptor, a1, a2, a3);
}

void **pg_query__range_function__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_function__descriptor) {
      pg_query__range_function__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_table_sample__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DCF08;
  a1[3] = unk_1E55DCF18;
  a1[4] = xmmword_1E55DCF28;
  double result = dbl_1E55DCEF8[0];
  *a1 = pg_query__range_table_sample__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E55DCEF8;
  return result;
}

uint64_t pg_query__range_table_sample__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_table_sample__descriptor) {
    pg_query__range_table_sample__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_table_sample__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__range_table_sample__descriptor) {
    pg_query__range_table_sample__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__range_table_sample__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__range_table_sample__descriptor) {
    pg_query__range_table_sample__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__range_table_sample__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_table_sample__descriptor, a1, a2, a3);
}

void **pg_query__range_table_sample__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_table_sample__descriptor) {
      pg_query__range_table_sample__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_table_func__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DCF58;
  a1[3] = unk_1E55DCF68;
  a1[4] = xmmword_1E55DCF78;
  a1[5] = unk_1E55DCF88;
  double result = *(double *)&pg_query__range_table_func__init_init_value;
  *a1 = pg_query__range_table_func__init_init_value;
  a1[1] = unk_1E55DCF48;
  return result;
}

uint64_t pg_query__range_table_func__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_table_func__descriptor) {
    pg_query__range_table_func__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_table_func__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__range_table_func__descriptor) {
    pg_query__range_table_func__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__range_table_func__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__range_table_func__descriptor) {
    pg_query__range_table_func__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__range_table_func__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_table_func__descriptor, a1, a2, a3);
}

void **pg_query__range_table_func__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_table_func__descriptor) {
      pg_query__range_table_func__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_table_func_col__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DCFB8;
  *(_OWORD *)(a1 + 48) = unk_1E55DCFC8;
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = pg_query__range_table_func_col__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DCFA8;
  return result;
}

uint64_t pg_query__range_table_func_col__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_table_func_col__descriptor) {
    pg_query__range_table_func_col__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_table_func_col__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__range_table_func_col__descriptor) {
    pg_query__range_table_func_col__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__range_table_func_col__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__range_table_func_col__descriptor) {
    pg_query__range_table_func_col__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__range_table_func_col__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_table_func_col__descriptor, a1, a2, a3);
}

void **pg_query__range_table_func_col__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_table_func_col__descriptor) {
      pg_query__range_table_func_col__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__type_name__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = xmmword_1E55DD020;
  *(_OWORD *)(a1 + 8errstart(20, 0) = unk_1E55DD030;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)a1 = pg_query__type_name__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DCFF0;
  double result = dbl_1E55DD010[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E55DD000;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)dbl_1E55DD010;
  return result;
}

uint64_t pg_query__type_name__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__type_name__descriptor) {
    pg_query__type_name__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__type_name__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__type_name__descriptor) {
    pg_query__type_name__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__type_name__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__type_name__descriptor) {
    pg_query__type_name__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__type_name__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__type_name__descriptor, a1, a2, a3);
}

void **pg_query__type_name__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__type_name__descriptor) {
      pg_query__type_name__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__column_def__init(_OWORD *a1)
{
  a1[6] = xmmword_1E55DD0A8;
  a1[7] = unk_1E55DD0B8;
  a1[8] = xmmword_1E55DD0C8;
  a1[9] = unk_1E55DD0D8;
  a1[2] = xmmword_1E55DD068;
  a1[3] = unk_1E55DD078;
  a1[4] = xmmword_1E55DD088;
  a1[5] = *(_OWORD *)&off_1E55DD098;
  double result = *(double *)&pg_query__column_def__init_init_value;
  *a1 = pg_query__column_def__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DD058;
  return result;
}

uint64_t pg_query__column_def__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__column_def__descriptor) {
    pg_query__column_def__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__column_def__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__column_def__descriptor) {
    pg_query__column_def__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__column_def__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__column_def__descriptor) {
    pg_query__column_def__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__column_def__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__column_def__descriptor, a1, a2, a3);
}

void **pg_query__column_def__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__column_def__descriptor) {
      pg_query__column_def__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__index_elem__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = xmmword_1E55DD128;
  *(_OWORD *)(a1 + 8errstart(20, 0) = unk_1E55DD138;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)a1 = pg_query__index_elem__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DD0F8;
  double result = dbl_1E55DD118[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E55DD108;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)dbl_1E55DD118;
  return result;
}

uint64_t pg_query__index_elem__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__index_elem__descriptor) {
    pg_query__index_elem__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__index_elem__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__index_elem__descriptor) {
    pg_query__index_elem__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__index_elem__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__index_elem__descriptor) {
    pg_query__index_elem__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__index_elem__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__index_elem__descriptor, a1, a2, a3);
}

void **pg_query__index_elem__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__index_elem__descriptor) {
      pg_query__index_elem__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

void *pg_query__constraint__init(void *a1)
{
  return memcpy(a1, &pg_query__constraint__init_init_value, 0x118uLL);
}

uint64_t pg_query__constraint__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__constraint__descriptor) {
    pg_query__constraint__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__constraint__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__constraint__descriptor) {
    pg_query__constraint__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__constraint__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__constraint__descriptor) {
    pg_query__constraint__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__constraint__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__constraint__descriptor, a1, a2, a3);
}

void **pg_query__constraint__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__constraint__descriptor) {
      pg_query__constraint__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__def_elem__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__def_elem__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DD278;
  *(void *)&double result = 0x18EBDE320;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DD288;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__def_elem__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__def_elem__descriptor) {
    pg_query__def_elem__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__def_elem__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__def_elem__descriptor) {
    pg_query__def_elem__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__def_elem__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__def_elem__descriptor) {
    pg_query__def_elem__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__def_elem__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__def_elem__descriptor, a1, a2, a3);
}

void **pg_query__def_elem__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__def_elem__descriptor) {
      pg_query__def_elem__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

void *pg_query__range_tbl_entry__init(void *a1)
{
  return memcpy(a1, &pg_query__range_tbl_entry__init_init_value, 0x178uLL);
}

uint64_t pg_query__range_tbl_entry__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_tbl_entry__descriptor) {
    pg_query__range_tbl_entry__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_tbl_entry__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__range_tbl_entry__descriptor) {
    pg_query__range_tbl_entry__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__range_tbl_entry__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__range_tbl_entry__descriptor) {
    pg_query__range_tbl_entry__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__range_tbl_entry__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_tbl_entry__descriptor, a1, a2, a3);
}

void **pg_query__range_tbl_entry__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_tbl_entry__descriptor) {
      pg_query__range_tbl_entry__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__range_tbl_function__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = xmmword_1E55DD458;
  *(_OWORD *)(a1 + 8errstart(20, 0) = unk_1E55DD468;
  *(_OWORD *)(a1 + 96) = xmmword_1E55DD478;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)a1 = pg_query__range_tbl_function__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DD428;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DD438;
  *(_OWORD *)(a1 + 48) = unk_1E55DD448;
  return result;
}

uint64_t pg_query__range_tbl_function__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__range_tbl_function__descriptor) {
    pg_query__range_tbl_function__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__range_tbl_function__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__range_tbl_function__descriptor) {
    pg_query__range_tbl_function__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__range_tbl_function__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__range_tbl_function__descriptor) {
    pg_query__range_tbl_function__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__range_tbl_function__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__range_tbl_function__descriptor, a1, a2, a3);
}

void **pg_query__range_tbl_function__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__range_tbl_function__descriptor) {
      pg_query__range_tbl_function__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__table_sample_clause__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__table_sample_clause__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DD4A0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DD4B0;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__table_sample_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__table_sample_clause__descriptor) {
    pg_query__table_sample_clause__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__table_sample_clause__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__table_sample_clause__descriptor) {
    pg_query__table_sample_clause__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__table_sample_clause__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__table_sample_clause__descriptor) {
    pg_query__table_sample_clause__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__table_sample_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__table_sample_clause__descriptor, a1, a2, a3);
}

void **pg_query__table_sample_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__table_sample_clause__descriptor) {
      pg_query__table_sample_clause__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__with_check_option__init(_OWORD *a1)
{
  *a1 = pg_query__with_check_option__init_init_value;
  a1[1] = unk_1E55DD4D8;
  *(void *)&double result = 0x18EBDE320;
  a1[2] = xmmword_1E55DD4E8;
  a1[3] = unk_1E55DD4F8;
  return result;
}

uint64_t pg_query__with_check_option__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__with_check_option__descriptor) {
    pg_query__with_check_option__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__with_check_option__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__with_check_option__descriptor) {
    pg_query__with_check_option__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__with_check_option__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__with_check_option__descriptor) {
    pg_query__with_check_option__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__with_check_option__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__with_check_option__descriptor, a1, a2, a3);
}

void **pg_query__with_check_option__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__with_check_option__descriptor) {
      pg_query__with_check_option__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__sort_group_clause__init(_OWORD *a1)
{
  *a1 = pg_query__sort_group_clause__init_init_value;
  a1[1] = unk_1E55DD518;
  double result = 0.0;
  a1[2] = xmmword_1E55DD528;
  return result;
}

uint64_t pg_query__sort_group_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__sort_group_clause__descriptor) {
    pg_query__sort_group_clause__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__sort_group_clause__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__sort_group_clause__descriptor) {
    pg_query__sort_group_clause__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__sort_group_clause__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__sort_group_clause__descriptor) {
    pg_query__sort_group_clause__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__sort_group_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__sort_group_clause__descriptor, a1, a2, a3);
}

void **pg_query__sort_group_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__sort_group_clause__descriptor) {
      pg_query__sort_group_clause__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__grouping_set__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__grouping_set__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DD548;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DD558;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__grouping_set__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__grouping_set__descriptor) {
    pg_query__grouping_set__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__grouping_set__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__grouping_set__descriptor) {
    pg_query__grouping_set__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__grouping_set__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__grouping_set__descriptor) {
    pg_query__grouping_set__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__grouping_set__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__grouping_set__descriptor, a1, a2, a3);
}

void **pg_query__grouping_set__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__grouping_set__descriptor) {
      pg_query__grouping_set__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__window_clause__init(_OWORD *a1)
{
  a1[4] = xmmword_1E55DD5B0;
  a1[5] = unk_1E55DD5C0;
  a1[6] = xmmword_1E55DD5D0;
  a1[7] = unk_1E55DD5E0;
  *a1 = pg_query__window_clause__init_init_value;
  a1[1] = unk_1E55DD580;
  *(void *)&double result = 0x18EBDE320;
  a1[2] = xmmword_1E55DD590;
  a1[3] = unk_1E55DD5A0;
  return result;
}

uint64_t pg_query__window_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__window_clause__descriptor) {
    pg_query__window_clause__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__window_clause__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__window_clause__descriptor) {
    pg_query__window_clause__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__window_clause__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__window_clause__descriptor) {
    pg_query__window_clause__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__window_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__window_clause__descriptor, a1, a2, a3);
}

void **pg_query__window_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__window_clause__descriptor) {
      pg_query__window_clause__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__object_with_args__init(_OWORD *a1)
{
  *a1 = pg_query__object_with_args__init_init_value;
  a1[1] = unk_1E55DD600;
  double result = 0.0;
  a1[2] = xmmword_1E55DD610;
  a1[3] = unk_1E55DD620;
  return result;
}

uint64_t pg_query__object_with_args__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__object_with_args__descriptor) {
    pg_query__object_with_args__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__object_with_args__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__object_with_args__descriptor) {
    pg_query__object_with_args__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__object_with_args__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__object_with_args__descriptor) {
    pg_query__object_with_args__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__object_with_args__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__object_with_args__descriptor, a1, a2, a3);
}

void **pg_query__object_with_args__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__object_with_args__descriptor) {
      pg_query__object_with_args__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__access_priv__init(_OWORD *a1)
{
  *a1 = pg_query__access_priv__init_init_value;
  a1[1] = unk_1E55DD640;
  double result = 0.0;
  a1[2] = xmmword_1E55DD650;
  return result;
}

uint64_t pg_query__access_priv__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__access_priv__descriptor) {
    pg_query__access_priv__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__access_priv__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__access_priv__descriptor) {
    pg_query__access_priv__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__access_priv__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__access_priv__descriptor) {
    pg_query__access_priv__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__access_priv__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__access_priv__descriptor, a1, a2, a3);
}

void **pg_query__access_priv__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__access_priv__descriptor) {
      pg_query__access_priv__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__create_op_class_item__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DD680;
  *(_OWORD *)(a1 + 48) = unk_1E55DD690;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DD6A0;
  *(void *)(a1 + 8errstart(20, 0) = 0;
  double result = *(double *)&pg_query__create_op_class_item__init_init_value;
  *(_OWORD *)a1 = pg_query__create_op_class_item__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DD670;
  return result;
}

uint64_t pg_query__create_op_class_item__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__create_op_class_item__descriptor) {
    pg_query__create_op_class_item__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__create_op_class_item__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__create_op_class_item__descriptor) {
    pg_query__create_op_class_item__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__create_op_class_item__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_op_class_item__descriptor) {
    pg_query__create_op_class_item__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__create_op_class_item__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__create_op_class_item__descriptor, a1, a2, a3);
}

void **pg_query__create_op_class_item__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__create_op_class_item__descriptor) {
      pg_query__create_op_class_item__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__table_like_clause__init(uint64_t a1)
{
  double result = *(double *)&pg_query__table_like_clause__init_init_value;
  *(_OWORD *)a1 = pg_query__table_like_clause__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DD6C8;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__table_like_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__table_like_clause__descriptor) {
    pg_query__table_like_clause__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__table_like_clause__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__table_like_clause__descriptor) {
    pg_query__table_like_clause__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__table_like_clause__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__table_like_clause__descriptor) {
    pg_query__table_like_clause__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__table_like_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__table_like_clause__descriptor, a1, a2, a3);
}

void **pg_query__table_like_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__table_like_clause__descriptor) {
      pg_query__table_like_clause__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__function_parameter__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__function_parameter__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DD6F0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DD700;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__function_parameter__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__function_parameter__descriptor) {
    pg_query__function_parameter__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__function_parameter__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__function_parameter__descriptor) {
    pg_query__function_parameter__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__function_parameter__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__function_parameter__descriptor) {
    pg_query__function_parameter__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__function_parameter__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__function_parameter__descriptor, a1, a2, a3);
}

void **pg_query__function_parameter__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__function_parameter__descriptor) {
      pg_query__function_parameter__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__locking_clause__init(_OWORD *a1)
{
  *a1 = pg_query__locking_clause__init_init_value;
  a1[1] = unk_1E55DD728;
  double result = 0.0;
  a1[2] = xmmword_1E55DD738;
  return result;
}

uint64_t pg_query__locking_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__locking_clause__descriptor) {
    pg_query__locking_clause__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__locking_clause__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__locking_clause__descriptor) {
    pg_query__locking_clause__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__locking_clause__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__locking_clause__descriptor) {
    pg_query__locking_clause__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__locking_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__locking_clause__descriptor, a1, a2, a3);
}

void **pg_query__locking_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__locking_clause__descriptor) {
      pg_query__locking_clause__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__row_mark_clause__init(uint64_t a1)
{
  double result = *(double *)&pg_query__row_mark_clause__init_init_value;
  *(_OWORD *)a1 = pg_query__row_mark_clause__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DD758;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__row_mark_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__row_mark_clause__descriptor) {
    pg_query__row_mark_clause__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__row_mark_clause__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__row_mark_clause__descriptor) {
    pg_query__row_mark_clause__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__row_mark_clause__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__row_mark_clause__descriptor) {
    pg_query__row_mark_clause__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__row_mark_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__row_mark_clause__descriptor, a1, a2, a3);
}

void **pg_query__row_mark_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__row_mark_clause__descriptor) {
      pg_query__row_mark_clause__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__xml_serialize__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__xml_serialize__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DD780;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DD790;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__xml_serialize__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__xml_serialize__descriptor) {
    pg_query__xml_serialize__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__xml_serialize__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__xml_serialize__descriptor) {
    pg_query__xml_serialize__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__xml_serialize__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__xml_serialize__descriptor) {
    pg_query__xml_serialize__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__xml_serialize__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__xml_serialize__descriptor, a1, a2, a3);
}

void **pg_query__xml_serialize__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__xml_serialize__descriptor) {
      pg_query__xml_serialize__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__with_clause__init(_OWORD *a1)
{
  *a1 = pg_query__with_clause__init_init_value;
  a1[1] = unk_1E55DD7B8;
  double result = 0.0;
  a1[2] = xmmword_1E55DD7C8;
  return result;
}

uint64_t pg_query__with_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__with_clause__descriptor) {
    pg_query__with_clause__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__with_clause__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__with_clause__descriptor) {
    pg_query__with_clause__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__with_clause__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__with_clause__descriptor) {
    pg_query__with_clause__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__with_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__with_clause__descriptor, a1, a2, a3);
}

void **pg_query__with_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__with_clause__descriptor) {
      pg_query__with_clause__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__infer_clause__init(_OWORD *a1)
{
  *a1 = pg_query__infer_clause__init_init_value;
  a1[1] = unk_1E55DD7E8;
  double result = 0.0;
  a1[2] = xmmword_1E55DD7F8;
  a1[3] = *(_OWORD *)&off_1E55DD808;
  return result;
}

uint64_t pg_query__infer_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__infer_clause__descriptor) {
    pg_query__infer_clause__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__infer_clause__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__infer_clause__descriptor) {
    pg_query__infer_clause__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__infer_clause__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__infer_clause__descriptor) {
    pg_query__infer_clause__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__infer_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__infer_clause__descriptor, a1, a2, a3);
}

void **pg_query__infer_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__infer_clause__descriptor) {
      pg_query__infer_clause__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__on_conflict_clause__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = xmmword_1E55DD838;
  *(_OWORD *)(a1 + 48) = unk_1E55DD848;
  *(void *)(a1 + 64) = 0;
  double result = dbl_1E55DD828[0];
  *(_OWORD *)a1 = pg_query__on_conflict_clause__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)dbl_1E55DD828;
  return result;
}

uint64_t pg_query__on_conflict_clause__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__on_conflict_clause__descriptor) {
    pg_query__on_conflict_clause__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__on_conflict_clause__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__on_conflict_clause__descriptor) {
    pg_query__on_conflict_clause__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__on_conflict_clause__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__on_conflict_clause__descriptor) {
    pg_query__on_conflict_clause__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__on_conflict_clause__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__on_conflict_clause__descriptor, a1, a2, a3);
}

void **pg_query__on_conflict_clause__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__on_conflict_clause__descriptor) {
      pg_query__on_conflict_clause__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__common_table_expr__init(_OWORD *a1)
{
  a1[6] = xmmword_1E55DD8C0;
  a1[7] = unk_1E55DD8D0;
  a1[8] = xmmword_1E55DD8E0;
  a1[2] = xmmword_1E55DD880;
  a1[3] = unk_1E55DD890;
  a1[4] = xmmword_1E55DD8A0;
  a1[5] = unk_1E55DD8B0;
  double result = dbl_1E55DD870[0];
  *a1 = pg_query__common_table_expr__init_init_value;
  a1[1] = *(_OWORD *)dbl_1E55DD870;
  return result;
}

uint64_t pg_query__common_table_expr__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__common_table_expr__descriptor) {
    pg_query__common_table_expr__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__common_table_expr__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__common_table_expr__descriptor) {
    pg_query__common_table_expr__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__common_table_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__common_table_expr__descriptor) {
    pg_query__common_table_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__common_table_expr__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__common_table_expr__descriptor, a1, a2, a3);
}

void **pg_query__common_table_expr__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__common_table_expr__descriptor) {
      pg_query__common_table_expr__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__role_spec__init(_OWORD *a1)
{
  *a1 = pg_query__role_spec__init_init_value;
  a1[1] = unk_1E55DD900;
  *(void *)&double result = 0x18EBDE320;
  a1[2] = xmmword_1E55DD910;
  return result;
}

uint64_t pg_query__role_spec__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__role_spec__descriptor) {
    pg_query__role_spec__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__role_spec__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__role_spec__descriptor) {
    pg_query__role_spec__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__role_spec__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__role_spec__descriptor) {
    pg_query__role_spec__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__role_spec__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__role_spec__descriptor, a1, a2, a3);
}

void **pg_query__role_spec__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__role_spec__descriptor) {
      pg_query__role_spec__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__trigger_transition__init(uint64_t a1)
{
  double result = *(double *)&pg_query__trigger_transition__init_init_value;
  *(_OWORD *)a1 = pg_query__trigger_transition__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DD930;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__trigger_transition__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__trigger_transition__descriptor) {
    pg_query__trigger_transition__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__trigger_transition__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__trigger_transition__descriptor) {
    pg_query__trigger_transition__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__trigger_transition__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__trigger_transition__descriptor) {
    pg_query__trigger_transition__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__trigger_transition__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__trigger_transition__descriptor, a1, a2, a3);
}

void **pg_query__trigger_transition__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__trigger_transition__descriptor) {
      pg_query__trigger_transition__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__partition_elem__init(_OWORD *a1)
{
  a1[2] = xmmword_1E55DD968;
  a1[3] = unk_1E55DD978;
  a1[4] = xmmword_1E55DD988;
  double result = 0.0;
  *a1 = pg_query__partition_elem__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DD958;
  return result;
}

uint64_t pg_query__partition_elem__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__partition_elem__descriptor) {
    pg_query__partition_elem__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__partition_elem__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__partition_elem__descriptor) {
    pg_query__partition_elem__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__partition_elem__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__partition_elem__descriptor) {
    pg_query__partition_elem__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__partition_elem__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__partition_elem__descriptor, a1, a2, a3);
}

double pg_query__partition_spec__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__partition_spec__init_init_value;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_1E55DD9A8;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DD9B8;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__partition_spec__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__partition_spec__descriptor) {
    pg_query__partition_spec__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__partition_spec__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__partition_spec__descriptor) {
    pg_query__partition_spec__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__partition_spec__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__partition_spec__descriptor) {
    pg_query__partition_spec__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__partition_spec__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__partition_spec__descriptor, a1, a2, a3);
}

void **pg_query__partition_spec__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__partition_spec__descriptor) {
      pg_query__partition_spec__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__partition_bound_spec__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = xmmword_1E55DDA10;
  *(_OWORD *)(a1 + 8errstart(20, 0) = unk_1E55DDA20;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)a1 = pg_query__partition_bound_spec__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DD9E0;
  double result = dbl_1E55DDA00[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E55DD9F0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)dbl_1E55DDA00;
  return result;
}

uint64_t pg_query__partition_bound_spec__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__partition_bound_spec__descriptor) {
    pg_query__partition_bound_spec__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__partition_bound_spec__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__partition_bound_spec__descriptor) {
    pg_query__partition_bound_spec__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__partition_bound_spec__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__partition_bound_spec__descriptor) {
    pg_query__partition_bound_spec__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__partition_bound_spec__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__partition_bound_spec__descriptor, a1, a2, a3);
}

void **pg_query__partition_bound_spec__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__partition_bound_spec__descriptor) {
      pg_query__partition_bound_spec__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__partition_range_datum__init(_OWORD *a1)
{
  *a1 = pg_query__partition_range_datum__init_init_value;
  a1[1] = unk_1E55DDA48;
  double result = 0.0;
  a1[2] = xmmword_1E55DDA58;
  return result;
}

uint64_t pg_query__partition_range_datum__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__partition_range_datum__descriptor) {
    pg_query__partition_range_datum__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__partition_range_datum__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__partition_range_datum__descriptor) {
    pg_query__partition_range_datum__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__partition_range_datum__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__partition_range_datum__descriptor) {
    pg_query__partition_range_datum__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__partition_range_datum__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__partition_range_datum__descriptor, a1, a2, a3);
}

void **pg_query__partition_range_datum__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__partition_range_datum__descriptor) {
      pg_query__partition_range_datum__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__partition_cmd__init(uint64_t a1)
{
  double result = *(double *)&pg_query__partition_cmd__init_init_value;
  *(_OWORD *)a1 = pg_query__partition_cmd__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DDA78;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__partition_cmd__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__partition_cmd__descriptor) {
    pg_query__partition_cmd__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__partition_cmd__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__partition_cmd__descriptor) {
    pg_query__partition_cmd__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__partition_cmd__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__partition_cmd__descriptor) {
    pg_query__partition_cmd__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__partition_cmd__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__partition_cmd__descriptor, a1, a2, a3);
}

void **pg_query__partition_cmd__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__partition_cmd__descriptor) {
      pg_query__partition_cmd__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__vacuum_relation__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__vacuum_relation__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DDAA0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DDAB0;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t pg_query__vacuum_relation__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__vacuum_relation__descriptor) {
    pg_query__vacuum_relation__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__vacuum_relation__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__vacuum_relation__descriptor) {
    pg_query__vacuum_relation__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__vacuum_relation__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__vacuum_relation__descriptor) {
    pg_query__vacuum_relation__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__vacuum_relation__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__vacuum_relation__descriptor, a1, a2, a3);
}

void **pg_query__vacuum_relation__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__vacuum_relation__descriptor) {
      pg_query__vacuum_relation__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__inline_code_block__init(_OWORD *a1)
{
  *a1 = pg_query__inline_code_block__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DDAD8;
  double result = 0.0;
  a1[2] = xmmword_1E55DDAE8;
  return result;
}

uint64_t pg_query__inline_code_block__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__inline_code_block__descriptor) {
    pg_query__inline_code_block__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__inline_code_block__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__inline_code_block__descriptor) {
    pg_query__inline_code_block__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__inline_code_block__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__inline_code_block__descriptor, a1, a2, a3);
}

void **pg_query__inline_code_block__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__inline_code_block__descriptor) {
      pg_query__inline_code_block__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__call_context__init(_OWORD *a1)
{
  double result = *(double *)&pg_query__call_context__init_init_value;
  *a1 = pg_query__call_context__init_init_value;
  a1[1] = unk_1E55DDB08;
  return result;
}

uint64_t pg_query__call_context__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__call_context__descriptor) {
    pg_query__call_context__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__call_context__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__call_context__descriptor) {
    pg_query__call_context__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__call_context__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__call_context__descriptor) {
    pg_query__call_context__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__call_context__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__call_context__descriptor, a1, a2, a3);
}

void **pg_query__call_context__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__call_context__descriptor) {
      pg_query__call_context__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

double pg_query__scan_token__init(uint64_t a1)
{
  double result = *(double *)&pg_query__scan_token__init_init_value;
  *(_OWORD *)a1 = pg_query__scan_token__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DDB28;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t pg_query__scan_token__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__scan_token__descriptor) {
    pg_query__scan_token__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

uint64_t pg_query__scan_token__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__scan_token__descriptor) {
    pg_query__scan_token__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

uint64_t pg_query__scan_token__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__scan_token__descriptor) {
    pg_query__scan_token__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t pg_query__scan_token__unpack(uint64_t (**a1)(int, size_t size), unint64_t a2, unsigned __int8 *a3)
{
  return protobuf_c_message_unpack((uint64_t)&pg_query__scan_token__descriptor, a1, a2, a3);
}

void **pg_query__scan_token__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__scan_token__descriptor) {
      pg_query__scan_token__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

void pg_query__parse_result__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__parse_result__get_packed_size", "pg_query.pb-c.c", 19, "message->base.descriptor == &pg_query__parse_result__descriptor");
}

void pg_query__parse_result__pack_cold_1()
{
  __assert_rtn("pg_query__parse_result__pack", "pg_query.pb-c.c", 26, "message->base.descriptor == &pg_query__parse_result__descriptor");
}

void pg_query__parse_result__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__parse_result__pack_to_buffer", "pg_query.pb-c.c", 33, "message->base.descriptor == &pg_query__parse_result__descriptor");
}

void pg_query__parse_result__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__parse_result__free_unpacked", "pg_query.pb-c.c", 52, "message->base.descriptor == &pg_query__parse_result__descriptor");
}

void pg_query__scan_result__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__scan_result__get_packed_size", "pg_query.pb-c.c", 64, "message->base.descriptor == &pg_query__scan_result__descriptor");
}

void pg_query__scan_result__pack_cold_1()
{
  __assert_rtn("pg_query__scan_result__pack", "pg_query.pb-c.c", 71, "message->base.descriptor == &pg_query__scan_result__descriptor");
}

void pg_query__scan_result__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__scan_result__pack_to_buffer", "pg_query.pb-c.c", 78, "message->base.descriptor == &pg_query__scan_result__descriptor");
}

void pg_query__scan_result__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__scan_result__free_unpacked", "pg_query.pb-c.c", 97, "message->base.descriptor == &pg_query__scan_result__descriptor");
}

void pg_query__node__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__node__get_packed_size", "pg_query.pb-c.c", 109, "message->base.descriptor == &pg_query__node__descriptor");
}

void pg_query__node__pack_cold_1()
{
  __assert_rtn("pg_query__node__pack", "pg_query.pb-c.c", 116, "message->base.descriptor == &pg_query__node__descriptor");
}

void pg_query__node__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__node__pack_to_buffer", "pg_query.pb-c.c", 123, "message->base.descriptor == &pg_query__node__descriptor");
}

void pg_query__node__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__node__free_unpacked", "pg_query.pb-c.c", 142, "message->base.descriptor == &pg_query__node__descriptor");
}

void pg_query__integer__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__integer__get_packed_size", "pg_query.pb-c.c", 154, "message->base.descriptor == &pg_query__integer__descriptor");
}

void pg_query__integer__pack_cold_1()
{
  __assert_rtn("pg_query__integer__pack", "pg_query.pb-c.c", 161, "message->base.descriptor == &pg_query__integer__descriptor");
}

void pg_query__integer__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__integer__pack_to_buffer", "pg_query.pb-c.c", 168, "message->base.descriptor == &pg_query__integer__descriptor");
}

void pg_query__integer__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__integer__free_unpacked", "pg_query.pb-c.c", 187, "message->base.descriptor == &pg_query__integer__descriptor");
}

void pg_query__float__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__float__get_packed_size", "pg_query.pb-c.c", 199, "message->base.descriptor == &pg_query__float__descriptor");
}

void pg_query__float__pack_cold_1()
{
  __assert_rtn("pg_query__float__pack", "pg_query.pb-c.c", 206, "message->base.descriptor == &pg_query__float__descriptor");
}

void pg_query__float__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__float__pack_to_buffer", "pg_query.pb-c.c", 213, "message->base.descriptor == &pg_query__float__descriptor");
}

void pg_query__float__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__float__free_unpacked", "pg_query.pb-c.c", 232, "message->base.descriptor == &pg_query__float__descriptor");
}

void pg_query__string__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__string__get_packed_size", "pg_query.pb-c.c", 244, "message->base.descriptor == &pg_query__string__descriptor");
}

void pg_query__string__pack_cold_1()
{
  __assert_rtn("pg_query__string__pack", "pg_query.pb-c.c", 251, "message->base.descriptor == &pg_query__string__descriptor");
}

void pg_query__string__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__string__pack_to_buffer", "pg_query.pb-c.c", 258, "message->base.descriptor == &pg_query__string__descriptor");
}

void pg_query__string__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__string__free_unpacked", "pg_query.pb-c.c", 277, "message->base.descriptor == &pg_query__string__descriptor");
}

void pg_query__bit_string__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__bit_string__get_packed_size", "pg_query.pb-c.c", 289, "message->base.descriptor == &pg_query__bit_string__descriptor");
}

void pg_query__bit_string__pack_cold_1()
{
  __assert_rtn("pg_query__bit_string__pack", "pg_query.pb-c.c", 296, "message->base.descriptor == &pg_query__bit_string__descriptor");
}

void pg_query__bit_string__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__bit_string__pack_to_buffer", "pg_query.pb-c.c", 303, "message->base.descriptor == &pg_query__bit_string__descriptor");
}

void pg_query__bit_string__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__bit_string__free_unpacked", "pg_query.pb-c.c", 322, "message->base.descriptor == &pg_query__bit_string__descriptor");
}

void pg_query__null__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__null__get_packed_size", "pg_query.pb-c.c", 334, "message->base.descriptor == &pg_query__null__descriptor");
}

void pg_query__null__pack_cold_1()
{
  __assert_rtn("pg_query__null__pack", "pg_query.pb-c.c", 341, "message->base.descriptor == &pg_query__null__descriptor");
}

void pg_query__null__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__null__pack_to_buffer", "pg_query.pb-c.c", 348, "message->base.descriptor == &pg_query__null__descriptor");
}

void pg_query__null__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__null__free_unpacked", "pg_query.pb-c.c", 367, "message->base.descriptor == &pg_query__null__descriptor");
}

void pg_query__list__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__list__get_packed_size", "pg_query.pb-c.c", 379, "message->base.descriptor == &pg_query__list__descriptor");
}

void pg_query__list__pack_cold_1()
{
  __assert_rtn("pg_query__list__pack", "pg_query.pb-c.c", 386, "message->base.descriptor == &pg_query__list__descriptor");
}

void pg_query__list__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__list__pack_to_buffer", "pg_query.pb-c.c", 393, "message->base.descriptor == &pg_query__list__descriptor");
}

void pg_query__list__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__list__free_unpacked", "pg_query.pb-c.c", 412, "message->base.descriptor == &pg_query__list__descriptor");
}

void pg_query__oid_list__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__oid_list__get_packed_size", "pg_query.pb-c.c", 424, "message->base.descriptor == &pg_query__oid_list__descriptor");
}

void pg_query__oid_list__pack_cold_1()
{
  __assert_rtn("pg_query__oid_list__pack", "pg_query.pb-c.c", 431, "message->base.descriptor == &pg_query__oid_list__descriptor");
}

void pg_query__oid_list__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__oid_list__pack_to_buffer", "pg_query.pb-c.c", 438, "message->base.descriptor == &pg_query__oid_list__descriptor");
}

void pg_query__oid_list__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__oid_list__free_unpacked", "pg_query.pb-c.c", 457, "message->base.descriptor == &pg_query__oid_list__descriptor");
}

void pg_query__int_list__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__int_list__get_packed_size", "pg_query.pb-c.c", 469, "message->base.descriptor == &pg_query__int_list__descriptor");
}

void pg_query__int_list__pack_cold_1()
{
  __assert_rtn("pg_query__int_list__pack", "pg_query.pb-c.c", 476, "message->base.descriptor == &pg_query__int_list__descriptor");
}

void pg_query__int_list__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__int_list__pack_to_buffer", "pg_query.pb-c.c", 483, "message->base.descriptor == &pg_query__int_list__descriptor");
}

void pg_query__int_list__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__int_list__free_unpacked", "pg_query.pb-c.c", 502, "message->base.descriptor == &pg_query__int_list__descriptor");
}

void pg_query__alias__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alias__get_packed_size", "pg_query.pb-c.c", 514, "message->base.descriptor == &pg_query__alias__descriptor");
}

void pg_query__alias__pack_cold_1()
{
  __assert_rtn("pg_query__alias__pack", "pg_query.pb-c.c", 521, "message->base.descriptor == &pg_query__alias__descriptor");
}

void pg_query__alias__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alias__pack_to_buffer", "pg_query.pb-c.c", 528, "message->base.descriptor == &pg_query__alias__descriptor");
}

void pg_query__alias__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alias__free_unpacked", "pg_query.pb-c.c", 547, "message->base.descriptor == &pg_query__alias__descriptor");
}

void pg_query__range_var__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_var__get_packed_size", "pg_query.pb-c.c", 559, "message->base.descriptor == &pg_query__range_var__descriptor");
}

void pg_query__range_var__pack_cold_1()
{
  __assert_rtn("pg_query__range_var__pack", "pg_query.pb-c.c", 566, "message->base.descriptor == &pg_query__range_var__descriptor");
}

void pg_query__range_var__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_var__pack_to_buffer", "pg_query.pb-c.c", 573, "message->base.descriptor == &pg_query__range_var__descriptor");
}

void pg_query__range_var__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_var__free_unpacked", "pg_query.pb-c.c", 592, "message->base.descriptor == &pg_query__range_var__descriptor");
}

void pg_query__table_func__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__table_func__get_packed_size", "pg_query.pb-c.c", 604, "message->base.descriptor == &pg_query__table_func__descriptor");
}

void pg_query__table_func__pack_cold_1()
{
  __assert_rtn("pg_query__table_func__pack", "pg_query.pb-c.c", 611, "message->base.descriptor == &pg_query__table_func__descriptor");
}

void pg_query__table_func__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__table_func__pack_to_buffer", "pg_query.pb-c.c", 618, "message->base.descriptor == &pg_query__table_func__descriptor");
}

void pg_query__table_func__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__table_func__free_unpacked", "pg_query.pb-c.c", 637, "message->base.descriptor == &pg_query__table_func__descriptor");
}

void pg_query__expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__expr__get_packed_size", "pg_query.pb-c.c", 649, "message->base.descriptor == &pg_query__expr__descriptor");
}

void pg_query__expr__pack_cold_1()
{
  __assert_rtn("pg_query__expr__pack", "pg_query.pb-c.c", 656, "message->base.descriptor == &pg_query__expr__descriptor");
}

void pg_query__expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__expr__pack_to_buffer", "pg_query.pb-c.c", 663, "message->base.descriptor == &pg_query__expr__descriptor");
}

void pg_query__expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__expr__free_unpacked", "pg_query.pb-c.c", 682, "message->base.descriptor == &pg_query__expr__descriptor");
}

void pg_query__var__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__var__get_packed_size", "pg_query.pb-c.c", 694, "message->base.descriptor == &pg_query__var__descriptor");
}

void pg_query__var__pack_cold_1()
{
  __assert_rtn("pg_query__var__pack", "pg_query.pb-c.c", 701, "message->base.descriptor == &pg_query__var__descriptor");
}

void pg_query__var__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__var__pack_to_buffer", "pg_query.pb-c.c", 708, "message->base.descriptor == &pg_query__var__descriptor");
}

void pg_query__var__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__var__free_unpacked", "pg_query.pb-c.c", 727, "message->base.descriptor == &pg_query__var__descriptor");
}

void pg_query__param__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__param__get_packed_size", "pg_query.pb-c.c", 739, "message->base.descriptor == &pg_query__param__descriptor");
}

void pg_query__param__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__param__pack_to_buffer", "pg_query.pb-c.c", 753, "message->base.descriptor == &pg_query__param__descriptor");
}

void pg_query__param__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__param__free_unpacked", "pg_query.pb-c.c", 772, "message->base.descriptor == &pg_query__param__descriptor");
}

void pg_query__aggref__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__aggref__get_packed_size", "pg_query.pb-c.c", 784, "message->base.descriptor == &pg_query__aggref__descriptor");
}

void pg_query__aggref__pack_cold_1()
{
  __assert_rtn("pg_query__aggref__pack", "pg_query.pb-c.c", 791, "message->base.descriptor == &pg_query__aggref__descriptor");
}

void pg_query__aggref__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__aggref__pack_to_buffer", "pg_query.pb-c.c", 798, "message->base.descriptor == &pg_query__aggref__descriptor");
}

void pg_query__aggref__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__aggref__free_unpacked", "pg_query.pb-c.c", 817, "message->base.descriptor == &pg_query__aggref__descriptor");
}

void pg_query__grouping_func__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__grouping_func__get_packed_size", "pg_query.pb-c.c", 829, "message->base.descriptor == &pg_query__grouping_func__descriptor");
}

void pg_query__grouping_func__pack_cold_1()
{
  __assert_rtn("pg_query__grouping_func__pack", "pg_query.pb-c.c", 836, "message->base.descriptor == &pg_query__grouping_func__descriptor");
}

void pg_query__grouping_func__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__grouping_func__pack_to_buffer", "pg_query.pb-c.c", 843, "message->base.descriptor == &pg_query__grouping_func__descriptor");
}

void pg_query__grouping_func__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__grouping_func__free_unpacked", "pg_query.pb-c.c", 862, "message->base.descriptor == &pg_query__grouping_func__descriptor");
}

void pg_query__window_func__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__window_func__get_packed_size", "pg_query.pb-c.c", 874, "message->base.descriptor == &pg_query__window_func__descriptor");
}

void pg_query__window_func__pack_cold_1()
{
  __assert_rtn("pg_query__window_func__pack", "pg_query.pb-c.c", 881, "message->base.descriptor == &pg_query__window_func__descriptor");
}

void pg_query__window_func__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__window_func__pack_to_buffer", "pg_query.pb-c.c", 888, "message->base.descriptor == &pg_query__window_func__descriptor");
}

void pg_query__window_func__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__window_func__free_unpacked", "pg_query.pb-c.c", 907, "message->base.descriptor == &pg_query__window_func__descriptor");
}

void pg_query__subscripting_ref__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__subscripting_ref__get_packed_size", "pg_query.pb-c.c", 919, "message->base.descriptor == &pg_query__subscripting_ref__descriptor");
}

void pg_query__subscripting_ref__pack_cold_1()
{
  __assert_rtn("pg_query__subscripting_ref__pack", "pg_query.pb-c.c", 926, "message->base.descriptor == &pg_query__subscripting_ref__descriptor");
}

void pg_query__subscripting_ref__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__subscripting_ref__pack_to_buffer", "pg_query.pb-c.c", 933, "message->base.descriptor == &pg_query__subscripting_ref__descriptor");
}

void pg_query__subscripting_ref__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__subscripting_ref__free_unpacked", "pg_query.pb-c.c", 952, "message->base.descriptor == &pg_query__subscripting_ref__descriptor");
}

void pg_query__func_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__func_expr__get_packed_size", "pg_query.pb-c.c", 964, "message->base.descriptor == &pg_query__func_expr__descriptor");
}

void pg_query__func_expr__pack_cold_1()
{
  __assert_rtn("pg_query__func_expr__pack", "pg_query.pb-c.c", 971, "message->base.descriptor == &pg_query__func_expr__descriptor");
}

void pg_query__func_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__func_expr__pack_to_buffer", "pg_query.pb-c.c", 978, "message->base.descriptor == &pg_query__func_expr__descriptor");
}

void pg_query__func_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__func_expr__free_unpacked", "pg_query.pb-c.c", 997, "message->base.descriptor == &pg_query__func_expr__descriptor");
}

void pg_query__named_arg_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__named_arg_expr__get_packed_size", "pg_query.pb-c.c", 1009, "message->base.descriptor == &pg_query__named_arg_expr__descriptor");
}

void pg_query__named_arg_expr__pack_cold_1()
{
  __assert_rtn("pg_query__named_arg_expr__pack", "pg_query.pb-c.c", 1016, "message->base.descriptor == &pg_query__named_arg_expr__descriptor");
}

void pg_query__named_arg_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__named_arg_expr__pack_to_buffer", "pg_query.pb-c.c", 1023, "message->base.descriptor == &pg_query__named_arg_expr__descriptor");
}

void pg_query__named_arg_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__named_arg_expr__free_unpacked", "pg_query.pb-c.c", 1042, "message->base.descriptor == &pg_query__named_arg_expr__descriptor");
}

void pg_query__op_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__op_expr__get_packed_size", "pg_query.pb-c.c", 1054, "message->base.descriptor == &pg_query__op_expr__descriptor");
}

void pg_query__op_expr__pack_cold_1()
{
  __assert_rtn("pg_query__op_expr__pack", "pg_query.pb-c.c", 1061, "message->base.descriptor == &pg_query__op_expr__descriptor");
}

void pg_query__op_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__op_expr__pack_to_buffer", "pg_query.pb-c.c", 1068, "message->base.descriptor == &pg_query__op_expr__descriptor");
}

void pg_query__op_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__op_expr__free_unpacked", "pg_query.pb-c.c", 1087, "message->base.descriptor == &pg_query__op_expr__descriptor");
}

void pg_query__distinct_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__distinct_expr__get_packed_size", "pg_query.pb-c.c", 1099, "message->base.descriptor == &pg_query__distinct_expr__descriptor");
}

void pg_query__distinct_expr__pack_cold_1()
{
  __assert_rtn("pg_query__distinct_expr__pack", "pg_query.pb-c.c", 1106, "message->base.descriptor == &pg_query__distinct_expr__descriptor");
}

void pg_query__distinct_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__distinct_expr__pack_to_buffer", "pg_query.pb-c.c", 1113, "message->base.descriptor == &pg_query__distinct_expr__descriptor");
}

void pg_query__distinct_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__distinct_expr__free_unpacked", "pg_query.pb-c.c", 1132, "message->base.descriptor == &pg_query__distinct_expr__descriptor");
}

void pg_query__null_if_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__null_if_expr__get_packed_size", "pg_query.pb-c.c", 1144, "message->base.descriptor == &pg_query__null_if_expr__descriptor");
}

void pg_query__null_if_expr__pack_cold_1()
{
  __assert_rtn("pg_query__null_if_expr__pack", "pg_query.pb-c.c", 1151, "message->base.descriptor == &pg_query__null_if_expr__descriptor");
}

void pg_query__null_if_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__null_if_expr__pack_to_buffer", "pg_query.pb-c.c", 1158, "message->base.descriptor == &pg_query__null_if_expr__descriptor");
}

void pg_query__null_if_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__null_if_expr__free_unpacked", "pg_query.pb-c.c", 1177, "message->base.descriptor == &pg_query__null_if_expr__descriptor");
}

void pg_query__scalar_array_op_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__scalar_array_op_expr__get_packed_size", "pg_query.pb-c.c", 1189, "message->base.descriptor == &pg_query__scalar_array_op_expr__descriptor");
}

void pg_query__scalar_array_op_expr__pack_cold_1()
{
  __assert_rtn("pg_query__scalar_array_op_expr__pack", "pg_query.pb-c.c", 1196, "message->base.descriptor == &pg_query__scalar_array_op_expr__descriptor");
}

void pg_query__scalar_array_op_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__scalar_array_op_expr__pack_to_buffer", "pg_query.pb-c.c", 1203, "message->base.descriptor == &pg_query__scalar_array_op_expr__descriptor");
}

void pg_query__scalar_array_op_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__scalar_array_op_expr__free_unpacked", "pg_query.pb-c.c", 1222, "message->base.descriptor == &pg_query__scalar_array_op_expr__descriptor");
}

void pg_query__BOOL_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__BOOL_expr__get_packed_size", "pg_query.pb-c.c", 1234, "message->base.descriptor == &pg_query__BOOL_expr__descriptor");
}

void pg_query__BOOL_expr__pack_cold_1()
{
  __assert_rtn("pg_query__BOOL_expr__pack", "pg_query.pb-c.c", 1241, "message->base.descriptor == &pg_query__BOOL_expr__descriptor");
}

void pg_query__BOOL_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__BOOL_expr__free_unpacked", "pg_query.pb-c.c", 1267, "message->base.descriptor == &pg_query__BOOL_expr__descriptor");
}

void pg_query__sub_link__pack_cold_1()
{
  __assert_rtn("pg_query__sub_link__pack", "pg_query.pb-c.c", 1286, "message->base.descriptor == &pg_query__sub_link__descriptor");
}

void pg_query__sub_link__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__sub_link__pack_to_buffer", "pg_query.pb-c.c", 1293, "message->base.descriptor == &pg_query__sub_link__descriptor");
}

void pg_query__sub_link__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__sub_link__free_unpacked", "pg_query.pb-c.c", 1312, "message->base.descriptor == &pg_query__sub_link__descriptor");
}

void pg_query__sub_plan__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__sub_plan__get_packed_size", "pg_query.pb-c.c", 1324, "message->base.descriptor == &pg_query__sub_plan__descriptor");
}

void pg_query__sub_plan__pack_cold_1()
{
  __assert_rtn("pg_query__sub_plan__pack", "pg_query.pb-c.c", 1331, "message->base.descriptor == &pg_query__sub_plan__descriptor");
}

void pg_query__sub_plan__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__sub_plan__pack_to_buffer", "pg_query.pb-c.c", 1338, "message->base.descriptor == &pg_query__sub_plan__descriptor");
}

void pg_query__sub_plan__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__sub_plan__free_unpacked", "pg_query.pb-c.c", 1357, "message->base.descriptor == &pg_query__sub_plan__descriptor");
}

void pg_query__alternative_sub_plan__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alternative_sub_plan__get_packed_size", "pg_query.pb-c.c", 1369, "message->base.descriptor == &pg_query__alternative_sub_plan__descriptor");
}

void pg_query__alternative_sub_plan__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alternative_sub_plan__pack_to_buffer", "pg_query.pb-c.c", 1383, "message->base.descriptor == &pg_query__alternative_sub_plan__descriptor");
}

void pg_query__alternative_sub_plan__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alternative_sub_plan__free_unpacked", "pg_query.pb-c.c", 1402, "message->base.descriptor == &pg_query__alternative_sub_plan__descriptor");
}

void pg_query__field_select__pack_cold_1()
{
  __assert_rtn("pg_query__field_select__pack", "pg_query.pb-c.c", 1421, "message->base.descriptor == &pg_query__field_select__descriptor");
}

void pg_query__field_select__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__field_select__pack_to_buffer", "pg_query.pb-c.c", 1428, "message->base.descriptor == &pg_query__field_select__descriptor");
}

void pg_query__field_store__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__field_store__get_packed_size", "pg_query.pb-c.c", 1459, "message->base.descriptor == &pg_query__field_store__descriptor");
}

void pg_query__field_store__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__field_store__pack_to_buffer", "pg_query.pb-c.c", 1473, "message->base.descriptor == &pg_query__field_store__descriptor");
}

void pg_query__field_store__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__field_store__free_unpacked", "pg_query.pb-c.c", 1492, "message->base.descriptor == &pg_query__field_store__descriptor");
}

void pg_query__relabel_type__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__relabel_type__get_packed_size", "pg_query.pb-c.c", 1504, "message->base.descriptor == &pg_query__relabel_type__descriptor");
}

void pg_query__relabel_type__pack_cold_1()
{
  __assert_rtn("pg_query__relabel_type__pack", "pg_query.pb-c.c", 1511, "message->base.descriptor == &pg_query__relabel_type__descriptor");
}

void pg_query__relabel_type__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__relabel_type__pack_to_buffer", "pg_query.pb-c.c", 1518, "message->base.descriptor == &pg_query__relabel_type__descriptor");
}

void pg_query__relabel_type__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__relabel_type__free_unpacked", "pg_query.pb-c.c", 1537, "message->base.descriptor == &pg_query__relabel_type__descriptor");
}

void pg_query__coerce_via_io__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__coerce_via_io__get_packed_size", "pg_query.pb-c.c", 1549, "message->base.descriptor == &pg_query__coerce_via_io__descriptor");
}

void pg_query__coerce_via_io__pack_cold_1()
{
  __assert_rtn("pg_query__coerce_via_io__pack", "pg_query.pb-c.c", 1556, "message->base.descriptor == &pg_query__coerce_via_io__descriptor");
}

void pg_query__coerce_via_io__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__coerce_via_io__pack_to_buffer", "pg_query.pb-c.c", 1563, "message->base.descriptor == &pg_query__coerce_via_io__descriptor");
}

void pg_query__coerce_via_io__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__coerce_via_io__free_unpacked", "pg_query.pb-c.c", 1582, "message->base.descriptor == &pg_query__coerce_via_io__descriptor");
}

void pg_query__array_coerce_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__array_coerce_expr__get_packed_size", "pg_query.pb-c.c", 1594, "message->base.descriptor == &pg_query__array_coerce_expr__descriptor");
}

void pg_query__array_coerce_expr__pack_cold_1()
{
  __assert_rtn("pg_query__array_coerce_expr__pack", "pg_query.pb-c.c", 1601, "message->base.descriptor == &pg_query__array_coerce_expr__descriptor");
}

void pg_query__array_coerce_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__array_coerce_expr__pack_to_buffer", "pg_query.pb-c.c", 1608, "message->base.descriptor == &pg_query__array_coerce_expr__descriptor");
}

void pg_query__array_coerce_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__array_coerce_expr__free_unpacked", "pg_query.pb-c.c", 1627, "message->base.descriptor == &pg_query__array_coerce_expr__descriptor");
}

void pg_query__convert_rowtype_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__convert_rowtype_expr__get_packed_size", "pg_query.pb-c.c", 1639, "message->base.descriptor == &pg_query__convert_rowtype_expr__descriptor");
}

void pg_query__convert_rowtype_expr__pack_cold_1()
{
  __assert_rtn("pg_query__convert_rowtype_expr__pack", "pg_query.pb-c.c", 1646, "message->base.descriptor == &pg_query__convert_rowtype_expr__descriptor");
}

void pg_query__convert_rowtype_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__convert_rowtype_expr__pack_to_buffer", "pg_query.pb-c.c", 1653, "message->base.descriptor == &pg_query__convert_rowtype_expr__descriptor");
}

void pg_query__convert_rowtype_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__convert_rowtype_expr__free_unpacked", "pg_query.pb-c.c", 1672, "message->base.descriptor == &pg_query__convert_rowtype_expr__descriptor");
}

void pg_query__collate_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__collate_expr__get_packed_size", "pg_query.pb-c.c", 1684, "message->base.descriptor == &pg_query__collate_expr__descriptor");
}

void pg_query__collate_expr__pack_cold_1()
{
  __assert_rtn("pg_query__collate_expr__pack", "pg_query.pb-c.c", 1691, "message->base.descriptor == &pg_query__collate_expr__descriptor");
}

void pg_query__collate_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__collate_expr__pack_to_buffer", "pg_query.pb-c.c", 1698, "message->base.descriptor == &pg_query__collate_expr__descriptor");
}

void pg_query__collate_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__collate_expr__free_unpacked", "pg_query.pb-c.c", 1717, "message->base.descriptor == &pg_query__collate_expr__descriptor");
}

void pg_query__case_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__case_expr__get_packed_size", "pg_query.pb-c.c", 1729, "message->base.descriptor == &pg_query__case_expr__descriptor");
}

void pg_query__case_expr__pack_cold_1()
{
  __assert_rtn("pg_query__case_expr__pack", "pg_query.pb-c.c", 1736, "message->base.descriptor == &pg_query__case_expr__descriptor");
}

void pg_query__case_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__case_expr__pack_to_buffer", "pg_query.pb-c.c", 1743, "message->base.descriptor == &pg_query__case_expr__descriptor");
}

void pg_query__case_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__case_expr__free_unpacked", "pg_query.pb-c.c", 1762, "message->base.descriptor == &pg_query__case_expr__descriptor");
}

void pg_query__case_when__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__case_when__get_packed_size", "pg_query.pb-c.c", 1774, "message->base.descriptor == &pg_query__case_when__descriptor");
}

void pg_query__case_when__pack_cold_1()
{
  __assert_rtn("pg_query__case_when__pack", "pg_query.pb-c.c", 1781, "message->base.descriptor == &pg_query__case_when__descriptor");
}

void pg_query__case_when__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__case_when__pack_to_buffer", "pg_query.pb-c.c", 1788, "message->base.descriptor == &pg_query__case_when__descriptor");
}

void pg_query__case_when__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__case_when__free_unpacked", "pg_query.pb-c.c", 1807, "message->base.descriptor == &pg_query__case_when__descriptor");
}

void pg_query__case_test_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__case_test_expr__get_packed_size", "pg_query.pb-c.c", 1819, "message->base.descriptor == &pg_query__case_test_expr__descriptor");
}

void pg_query__case_test_expr__pack_cold_1()
{
  __assert_rtn("pg_query__case_test_expr__pack", "pg_query.pb-c.c", 1826, "message->base.descriptor == &pg_query__case_test_expr__descriptor");
}

void pg_query__case_test_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__case_test_expr__pack_to_buffer", "pg_query.pb-c.c", 1833, "message->base.descriptor == &pg_query__case_test_expr__descriptor");
}

void pg_query__case_test_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__case_test_expr__free_unpacked", "pg_query.pb-c.c", 1852, "message->base.descriptor == &pg_query__case_test_expr__descriptor");
}

void pg_query__array_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__array_expr__get_packed_size", "pg_query.pb-c.c", 1864, "message->base.descriptor == &pg_query__array_expr__descriptor");
}

void pg_query__array_expr__pack_cold_1()
{
  __assert_rtn("pg_query__array_expr__pack", "pg_query.pb-c.c", 1871, "message->base.descriptor == &pg_query__array_expr__descriptor");
}

void pg_query__array_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__array_expr__pack_to_buffer", "pg_query.pb-c.c", 1878, "message->base.descriptor == &pg_query__array_expr__descriptor");
}

void pg_query__array_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__array_expr__free_unpacked", "pg_query.pb-c.c", 1897, "message->base.descriptor == &pg_query__array_expr__descriptor");
}

void pg_query__row_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__row_expr__get_packed_size", "pg_query.pb-c.c", 1909, "message->base.descriptor == &pg_query__row_expr__descriptor");
}

void pg_query__row_expr__pack_cold_1()
{
  __assert_rtn("pg_query__row_expr__pack", "pg_query.pb-c.c", 1916, "message->base.descriptor == &pg_query__row_expr__descriptor");
}

void pg_query__row_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__row_expr__pack_to_buffer", "pg_query.pb-c.c", 1923, "message->base.descriptor == &pg_query__row_expr__descriptor");
}

void pg_query__row_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__row_expr__free_unpacked", "pg_query.pb-c.c", 1942, "message->base.descriptor == &pg_query__row_expr__descriptor");
}

void pg_query__row_compare_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__row_compare_expr__get_packed_size", "pg_query.pb-c.c", 1954, "message->base.descriptor == &pg_query__row_compare_expr__descriptor");
}

void pg_query__row_compare_expr__pack_cold_1()
{
  __assert_rtn("pg_query__row_compare_expr__pack", "pg_query.pb-c.c", 1961, "message->base.descriptor == &pg_query__row_compare_expr__descriptor");
}

void pg_query__row_compare_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__row_compare_expr__pack_to_buffer", "pg_query.pb-c.c", 1968, "message->base.descriptor == &pg_query__row_compare_expr__descriptor");
}

void pg_query__row_compare_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__row_compare_expr__free_unpacked", "pg_query.pb-c.c", 1987, "message->base.descriptor == &pg_query__row_compare_expr__descriptor");
}

void pg_query__coalesce_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__coalesce_expr__get_packed_size", "pg_query.pb-c.c", 1999, "message->base.descriptor == &pg_query__coalesce_expr__descriptor");
}

void pg_query__coalesce_expr__pack_cold_1()
{
  __assert_rtn("pg_query__coalesce_expr__pack", "pg_query.pb-c.c", 2006, "message->base.descriptor == &pg_query__coalesce_expr__descriptor");
}

void pg_query__coalesce_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__coalesce_expr__pack_to_buffer", "pg_query.pb-c.c", 2013, "message->base.descriptor == &pg_query__coalesce_expr__descriptor");
}

void pg_query__coalesce_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__coalesce_expr__free_unpacked", "pg_query.pb-c.c", 2032, "message->base.descriptor == &pg_query__coalesce_expr__descriptor");
}

void pg_query__min_max_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__min_max_expr__get_packed_size", "pg_query.pb-c.c", 2044, "message->base.descriptor == &pg_query__min_max_expr__descriptor");
}

void pg_query__min_max_expr__pack_cold_1()
{
  __assert_rtn("pg_query__min_max_expr__pack", "pg_query.pb-c.c", 2051, "message->base.descriptor == &pg_query__min_max_expr__descriptor");
}

void pg_query__min_max_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__min_max_expr__pack_to_buffer", "pg_query.pb-c.c", 2058, "message->base.descriptor == &pg_query__min_max_expr__descriptor");
}

void pg_query__min_max_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__min_max_expr__free_unpacked", "pg_query.pb-c.c", 2077, "message->base.descriptor == &pg_query__min_max_expr__descriptor");
}

void pg_query__sqlvalue_function__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__sqlvalue_function__get_packed_size", "pg_query.pb-c.c", 2089, "message->base.descriptor == &pg_query__sqlvalue_function__descriptor");
}

void pg_query__sqlvalue_function__pack_cold_1()
{
  __assert_rtn("pg_query__sqlvalue_function__pack", "pg_query.pb-c.c", 2096, "message->base.descriptor == &pg_query__sqlvalue_function__descriptor");
}

void pg_query__sqlvalue_function__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__sqlvalue_function__pack_to_buffer", "pg_query.pb-c.c", 2103, "message->base.descriptor == &pg_query__sqlvalue_function__descriptor");
}

void pg_query__sqlvalue_function__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__sqlvalue_function__free_unpacked", "pg_query.pb-c.c", 2122, "message->base.descriptor == &pg_query__sqlvalue_function__descriptor");
}

void pg_query__xml_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__xml_expr__get_packed_size", "pg_query.pb-c.c", 2134, "message->base.descriptor == &pg_query__xml_expr__descriptor");
}

void pg_query__xml_expr__pack_cold_1()
{
  __assert_rtn("pg_query__xml_expr__pack", "pg_query.pb-c.c", 2141, "message->base.descriptor == &pg_query__xml_expr__descriptor");
}

void pg_query__xml_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__xml_expr__pack_to_buffer", "pg_query.pb-c.c", 2148, "message->base.descriptor == &pg_query__xml_expr__descriptor");
}

void pg_query__xml_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__xml_expr__free_unpacked", "pg_query.pb-c.c", 2167, "message->base.descriptor == &pg_query__xml_expr__descriptor");
}

void pg_query__null_test__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__null_test__get_packed_size", "pg_query.pb-c.c", 2179, "message->base.descriptor == &pg_query__null_test__descriptor");
}

void pg_query__null_test__pack_cold_1()
{
  __assert_rtn("pg_query__null_test__pack", "pg_query.pb-c.c", 2186, "message->base.descriptor == &pg_query__null_test__descriptor");
}

void pg_query__null_test__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__null_test__pack_to_buffer", "pg_query.pb-c.c", 2193, "message->base.descriptor == &pg_query__null_test__descriptor");
}

void pg_query__null_test__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__null_test__free_unpacked", "pg_query.pb-c.c", 2212, "message->base.descriptor == &pg_query__null_test__descriptor");
}

void pg_query__BOOLean_test__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__BOOLean_test__get_packed_size", "pg_query.pb-c.c", 2224, "message->base.descriptor == &pg_query__BOOLean_test__descriptor");
}

void pg_query__BOOLean_test__pack_cold_1()
{
  __assert_rtn("pg_query__BOOLean_test__pack", "pg_query.pb-c.c", 2231, "message->base.descriptor == &pg_query__BOOLean_test__descriptor");
}

void pg_query__BOOLean_test__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__BOOLean_test__pack_to_buffer", "pg_query.pb-c.c", 2238, "message->base.descriptor == &pg_query__BOOLean_test__descriptor");
}

void pg_query__BOOLean_test__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__BOOLean_test__free_unpacked", "pg_query.pb-c.c", 2257, "message->base.descriptor == &pg_query__BOOLean_test__descriptor");
}

void pg_query__coerce_to_domain__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain__get_packed_size", "pg_query.pb-c.c", 2269, "message->base.descriptor == &pg_query__coerce_to_domain__descriptor");
}

void pg_query__coerce_to_domain__pack_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain__pack", "pg_query.pb-c.c", 2276, "message->base.descriptor == &pg_query__coerce_to_domain__descriptor");
}

void pg_query__coerce_to_domain__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain__pack_to_buffer", "pg_query.pb-c.c", 2283, "message->base.descriptor == &pg_query__coerce_to_domain__descriptor");
}

void pg_query__coerce_to_domain__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain__free_unpacked", "pg_query.pb-c.c", 2302, "message->base.descriptor == &pg_query__coerce_to_domain__descriptor");
}

void pg_query__coerce_to_domain_value__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain_value__get_packed_size", "pg_query.pb-c.c", 2314, "message->base.descriptor == &pg_query__coerce_to_domain_value__descriptor");
}

void pg_query__coerce_to_domain_value__pack_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain_value__pack", "pg_query.pb-c.c", 2321, "message->base.descriptor == &pg_query__coerce_to_domain_value__descriptor");
}

void pg_query__coerce_to_domain_value__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain_value__pack_to_buffer", "pg_query.pb-c.c", 2328, "message->base.descriptor == &pg_query__coerce_to_domain_value__descriptor");
}

void pg_query__coerce_to_domain_value__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__coerce_to_domain_value__free_unpacked", "pg_query.pb-c.c", 2347, "message->base.descriptor == &pg_query__coerce_to_domain_value__descriptor");
}

void pg_query__set_to_default__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__set_to_default__get_packed_size", "pg_query.pb-c.c", 2359, "message->base.descriptor == &pg_query__set_to_default__descriptor");
}

void pg_query__set_to_default__pack_cold_1()
{
  __assert_rtn("pg_query__set_to_default__pack", "pg_query.pb-c.c", 2366, "message->base.descriptor == &pg_query__set_to_default__descriptor");
}

void pg_query__set_to_default__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__set_to_default__pack_to_buffer", "pg_query.pb-c.c", 2373, "message->base.descriptor == &pg_query__set_to_default__descriptor");
}

void pg_query__set_to_default__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__set_to_default__free_unpacked", "pg_query.pb-c.c", 2392, "message->base.descriptor == &pg_query__set_to_default__descriptor");
}

void pg_query__current_of_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__current_of_expr__get_packed_size", "pg_query.pb-c.c", 2404, "message->base.descriptor == &pg_query__current_of_expr__descriptor");
}

void pg_query__current_of_expr__pack_cold_1()
{
  __assert_rtn("pg_query__current_of_expr__pack", "pg_query.pb-c.c", 2411, "message->base.descriptor == &pg_query__current_of_expr__descriptor");
}

void pg_query__current_of_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__current_of_expr__pack_to_buffer", "pg_query.pb-c.c", 2418, "message->base.descriptor == &pg_query__current_of_expr__descriptor");
}

void pg_query__current_of_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__current_of_expr__free_unpacked", "pg_query.pb-c.c", 2437, "message->base.descriptor == &pg_query__current_of_expr__descriptor");
}

void pg_query__next_value_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__next_value_expr__get_packed_size", "pg_query.pb-c.c", 2449, "message->base.descriptor == &pg_query__next_value_expr__descriptor");
}

void pg_query__next_value_expr__pack_cold_1()
{
  __assert_rtn("pg_query__next_value_expr__pack", "pg_query.pb-c.c", 2456, "message->base.descriptor == &pg_query__next_value_expr__descriptor");
}

void pg_query__next_value_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__next_value_expr__pack_to_buffer", "pg_query.pb-c.c", 2463, "message->base.descriptor == &pg_query__next_value_expr__descriptor");
}

void pg_query__next_value_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__next_value_expr__free_unpacked", "pg_query.pb-c.c", 2482, "message->base.descriptor == &pg_query__next_value_expr__descriptor");
}

void pg_query__inference_elem__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__inference_elem__get_packed_size", "pg_query.pb-c.c", 2494, "message->base.descriptor == &pg_query__inference_elem__descriptor");
}

void pg_query__inference_elem__pack_cold_1()
{
  __assert_rtn("pg_query__inference_elem__pack", "pg_query.pb-c.c", 2501, "message->base.descriptor == &pg_query__inference_elem__descriptor");
}

void pg_query__inference_elem__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__inference_elem__pack_to_buffer", "pg_query.pb-c.c", 2508, "message->base.descriptor == &pg_query__inference_elem__descriptor");
}

void pg_query__inference_elem__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__inference_elem__free_unpacked", "pg_query.pb-c.c", 2527, "message->base.descriptor == &pg_query__inference_elem__descriptor");
}

void pg_query__target_entry__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__target_entry__get_packed_size", "pg_query.pb-c.c", 2539, "message->base.descriptor == &pg_query__target_entry__descriptor");
}

void pg_query__target_entry__pack_cold_1()
{
  __assert_rtn("pg_query__target_entry__pack", "pg_query.pb-c.c", 2546, "message->base.descriptor == &pg_query__target_entry__descriptor");
}

void pg_query__target_entry__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__target_entry__pack_to_buffer", "pg_query.pb-c.c", 2553, "message->base.descriptor == &pg_query__target_entry__descriptor");
}

void pg_query__target_entry__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__target_entry__free_unpacked", "pg_query.pb-c.c", 2572, "message->base.descriptor == &pg_query__target_entry__descriptor");
}

void pg_query__range_tbl_ref__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_tbl_ref__get_packed_size", "pg_query.pb-c.c", 2584, "message->base.descriptor == &pg_query__range_tbl_ref__descriptor");
}

void pg_query__range_tbl_ref__pack_cold_1()
{
  __assert_rtn("pg_query__range_tbl_ref__pack", "pg_query.pb-c.c", 2591, "message->base.descriptor == &pg_query__range_tbl_ref__descriptor");
}

void pg_query__range_tbl_ref__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_tbl_ref__pack_to_buffer", "pg_query.pb-c.c", 2598, "message->base.descriptor == &pg_query__range_tbl_ref__descriptor");
}

void pg_query__range_tbl_ref__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_tbl_ref__free_unpacked", "pg_query.pb-c.c", 2617, "message->base.descriptor == &pg_query__range_tbl_ref__descriptor");
}

void pg_query__join_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__join_expr__get_packed_size", "pg_query.pb-c.c", 2629, "message->base.descriptor == &pg_query__join_expr__descriptor");
}

void pg_query__join_expr__pack_cold_1()
{
  __assert_rtn("pg_query__join_expr__pack", "pg_query.pb-c.c", 2636, "message->base.descriptor == &pg_query__join_expr__descriptor");
}

void pg_query__join_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__join_expr__pack_to_buffer", "pg_query.pb-c.c", 2643, "message->base.descriptor == &pg_query__join_expr__descriptor");
}

void pg_query__join_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__join_expr__free_unpacked", "pg_query.pb-c.c", 2662, "message->base.descriptor == &pg_query__join_expr__descriptor");
}

void pg_query__from_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__from_expr__get_packed_size", "pg_query.pb-c.c", 2674, "message->base.descriptor == &pg_query__from_expr__descriptor");
}

void pg_query__from_expr__pack_cold_1()
{
  __assert_rtn("pg_query__from_expr__pack", "pg_query.pb-c.c", 2681, "message->base.descriptor == &pg_query__from_expr__descriptor");
}

void pg_query__from_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__from_expr__pack_to_buffer", "pg_query.pb-c.c", 2688, "message->base.descriptor == &pg_query__from_expr__descriptor");
}

void pg_query__from_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__from_expr__free_unpacked", "pg_query.pb-c.c", 2707, "message->base.descriptor == &pg_query__from_expr__descriptor");
}

void pg_query__on_conflict_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__on_conflict_expr__get_packed_size", "pg_query.pb-c.c", 2719, "message->base.descriptor == &pg_query__on_conflict_expr__descriptor");
}

void pg_query__on_conflict_expr__pack_cold_1()
{
  __assert_rtn("pg_query__on_conflict_expr__pack", "pg_query.pb-c.c", 2726, "message->base.descriptor == &pg_query__on_conflict_expr__descriptor");
}

void pg_query__on_conflict_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__on_conflict_expr__pack_to_buffer", "pg_query.pb-c.c", 2733, "message->base.descriptor == &pg_query__on_conflict_expr__descriptor");
}

void pg_query__on_conflict_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__on_conflict_expr__free_unpacked", "pg_query.pb-c.c", 2752, "message->base.descriptor == &pg_query__on_conflict_expr__descriptor");
}

void pg_query__into_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__into_clause__get_packed_size", "pg_query.pb-c.c", 2764, "message->base.descriptor == &pg_query__into_clause__descriptor");
}

void pg_query__into_clause__pack_cold_1()
{
  __assert_rtn("pg_query__into_clause__pack", "pg_query.pb-c.c", 2771, "message->base.descriptor == &pg_query__into_clause__descriptor");
}

void pg_query__into_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__into_clause__pack_to_buffer", "pg_query.pb-c.c", 2778, "message->base.descriptor == &pg_query__into_clause__descriptor");
}

void pg_query__into_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__into_clause__free_unpacked", "pg_query.pb-c.c", 2797, "message->base.descriptor == &pg_query__into_clause__descriptor");
}

void pg_query__raw_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__raw_stmt__get_packed_size", "pg_query.pb-c.c", 2809, "message->base.descriptor == &pg_query__raw_stmt__descriptor");
}

void pg_query__raw_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__raw_stmt__pack", "pg_query.pb-c.c", 2816, "message->base.descriptor == &pg_query__raw_stmt__descriptor");
}

void pg_query__raw_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__raw_stmt__pack_to_buffer", "pg_query.pb-c.c", 2823, "message->base.descriptor == &pg_query__raw_stmt__descriptor");
}

void pg_query__raw_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__raw_stmt__free_unpacked", "pg_query.pb-c.c", 2842, "message->base.descriptor == &pg_query__raw_stmt__descriptor");
}

void pg_query__query__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__query__get_packed_size", "pg_query.pb-c.c", 2854, "message->base.descriptor == &pg_query__query__descriptor");
}

void pg_query__query__pack_cold_1()
{
  __assert_rtn("pg_query__query__pack", "pg_query.pb-c.c", 2861, "message->base.descriptor == &pg_query__query__descriptor");
}

void pg_query__query__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__query__pack_to_buffer", "pg_query.pb-c.c", 2868, "message->base.descriptor == &pg_query__query__descriptor");
}

void pg_query__query__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__query__free_unpacked", "pg_query.pb-c.c", 2887, "message->base.descriptor == &pg_query__query__descriptor");
}

void pg_query__insert_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__insert_stmt__get_packed_size", "pg_query.pb-c.c", 2899, "message->base.descriptor == &pg_query__insert_stmt__descriptor");
}

void pg_query__insert_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__insert_stmt__pack", "pg_query.pb-c.c", 2906, "message->base.descriptor == &pg_query__insert_stmt__descriptor");
}

void pg_query__insert_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__insert_stmt__pack_to_buffer", "pg_query.pb-c.c", 2913, "message->base.descriptor == &pg_query__insert_stmt__descriptor");
}

void pg_query__insert_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__insert_stmt__free_unpacked", "pg_query.pb-c.c", 2932, "message->base.descriptor == &pg_query__insert_stmt__descriptor");
}

void pg_query__delete_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__delete_stmt__get_packed_size", "pg_query.pb-c.c", 2944, "message->base.descriptor == &pg_query__delete_stmt__descriptor");
}

void pg_query__delete_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__delete_stmt__pack", "pg_query.pb-c.c", 2951, "message->base.descriptor == &pg_query__delete_stmt__descriptor");
}

void pg_query__delete_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__delete_stmt__pack_to_buffer", "pg_query.pb-c.c", 2958, "message->base.descriptor == &pg_query__delete_stmt__descriptor");
}

void pg_query__delete_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__delete_stmt__free_unpacked", "pg_query.pb-c.c", 2977, "message->base.descriptor == &pg_query__delete_stmt__descriptor");
}

void pg_query__update_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__update_stmt__get_packed_size", "pg_query.pb-c.c", 2989, "message->base.descriptor == &pg_query__update_stmt__descriptor");
}

void pg_query__update_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__update_stmt__pack", "pg_query.pb-c.c", 2996, "message->base.descriptor == &pg_query__update_stmt__descriptor");
}

void pg_query__update_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__update_stmt__pack_to_buffer", "pg_query.pb-c.c", 3003, "message->base.descriptor == &pg_query__update_stmt__descriptor");
}

void pg_query__update_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__update_stmt__free_unpacked", "pg_query.pb-c.c", 3022, "message->base.descriptor == &pg_query__update_stmt__descriptor");
}

void pg_query__select_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__select_stmt__get_packed_size", "pg_query.pb-c.c", 3034, "message->base.descriptor == &pg_query__select_stmt__descriptor");
}

void pg_query__select_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__select_stmt__pack", "pg_query.pb-c.c", 3041, "message->base.descriptor == &pg_query__select_stmt__descriptor");
}

void pg_query__select_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__select_stmt__pack_to_buffer", "pg_query.pb-c.c", 3048, "message->base.descriptor == &pg_query__select_stmt__descriptor");
}

void pg_query__select_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__select_stmt__free_unpacked", "pg_query.pb-c.c", 3067, "message->base.descriptor == &pg_query__select_stmt__descriptor");
}

void pg_query__alter_table_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_table_stmt__get_packed_size", "pg_query.pb-c.c", 3079, "message->base.descriptor == &pg_query__alter_table_stmt__descriptor");
}

void pg_query__alter_table_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_table_stmt__pack", "pg_query.pb-c.c", 3086, "message->base.descriptor == &pg_query__alter_table_stmt__descriptor");
}

void pg_query__alter_table_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_table_stmt__pack_to_buffer", "pg_query.pb-c.c", 3093, "message->base.descriptor == &pg_query__alter_table_stmt__descriptor");
}

void pg_query__alter_table_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_table_stmt__free_unpacked", "pg_query.pb-c.c", 3112, "message->base.descriptor == &pg_query__alter_table_stmt__descriptor");
}

void pg_query__alter_table_cmd__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_table_cmd__get_packed_size", "pg_query.pb-c.c", 3124, "message->base.descriptor == &pg_query__alter_table_cmd__descriptor");
}

void pg_query__alter_table_cmd__pack_cold_1()
{
  __assert_rtn("pg_query__alter_table_cmd__pack", "pg_query.pb-c.c", 3131, "message->base.descriptor == &pg_query__alter_table_cmd__descriptor");
}

void pg_query__alter_table_cmd__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_table_cmd__pack_to_buffer", "pg_query.pb-c.c", 3138, "message->base.descriptor == &pg_query__alter_table_cmd__descriptor");
}

void pg_query__alter_table_cmd__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_table_cmd__free_unpacked", "pg_query.pb-c.c", 3157, "message->base.descriptor == &pg_query__alter_table_cmd__descriptor");
}

void pg_query__alter_domain_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_domain_stmt__get_packed_size", "pg_query.pb-c.c", 3169, "message->base.descriptor == &pg_query__alter_domain_stmt__descriptor");
}

void pg_query__alter_domain_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_domain_stmt__pack", "pg_query.pb-c.c", 3176, "message->base.descriptor == &pg_query__alter_domain_stmt__descriptor");
}

void pg_query__alter_domain_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_domain_stmt__pack_to_buffer", "pg_query.pb-c.c", 3183, "message->base.descriptor == &pg_query__alter_domain_stmt__descriptor");
}

void pg_query__alter_domain_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_domain_stmt__free_unpacked", "pg_query.pb-c.c", 3202, "message->base.descriptor == &pg_query__alter_domain_stmt__descriptor");
}

void pg_query__set_operation_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__set_operation_stmt__get_packed_size", "pg_query.pb-c.c", 3214, "message->base.descriptor == &pg_query__set_operation_stmt__descriptor");
}

void pg_query__set_operation_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__set_operation_stmt__pack", "pg_query.pb-c.c", 3221, "message->base.descriptor == &pg_query__set_operation_stmt__descriptor");
}

void pg_query__set_operation_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__set_operation_stmt__pack_to_buffer", "pg_query.pb-c.c", 3228, "message->base.descriptor == &pg_query__set_operation_stmt__descriptor");
}

void pg_query__set_operation_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__set_operation_stmt__free_unpacked", "pg_query.pb-c.c", 3247, "message->base.descriptor == &pg_query__set_operation_stmt__descriptor");
}

void pg_query__grant_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__grant_stmt__get_packed_size", "pg_query.pb-c.c", 3259, "message->base.descriptor == &pg_query__grant_stmt__descriptor");
}

void pg_query__grant_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__grant_stmt__pack", "pg_query.pb-c.c", 3266, "message->base.descriptor == &pg_query__grant_stmt__descriptor");
}

void pg_query__grant_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__grant_stmt__pack_to_buffer", "pg_query.pb-c.c", 3273, "message->base.descriptor == &pg_query__grant_stmt__descriptor");
}

void pg_query__grant_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__grant_stmt__free_unpacked", "pg_query.pb-c.c", 3292, "message->base.descriptor == &pg_query__grant_stmt__descriptor");
}

void pg_query__grant_role_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__grant_role_stmt__get_packed_size", "pg_query.pb-c.c", 3304, "message->base.descriptor == &pg_query__grant_role_stmt__descriptor");
}

void pg_query__grant_role_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__grant_role_stmt__pack", "pg_query.pb-c.c", 3311, "message->base.descriptor == &pg_query__grant_role_stmt__descriptor");
}

void pg_query__grant_role_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__grant_role_stmt__pack_to_buffer", "pg_query.pb-c.c", 3318, "message->base.descriptor == &pg_query__grant_role_stmt__descriptor");
}

void pg_query__grant_role_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__grant_role_stmt__free_unpacked", "pg_query.pb-c.c", 3337, "message->base.descriptor == &pg_query__grant_role_stmt__descriptor");
}

void pg_query__alter_default_privileges_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_default_privileges_stmt__get_packed_size", "pg_query.pb-c.c", 3349, "message->base.descriptor == &pg_query__alter_default_privileges_stmt__descriptor");
}

void pg_query__alter_default_privileges_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_default_privileges_stmt__pack", "pg_query.pb-c.c", 3356, "message->base.descriptor == &pg_query__alter_default_privileges_stmt__descriptor");
}

void pg_query__alter_default_privileges_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_default_privileges_stmt__pack_to_buffer", "pg_query.pb-c.c", 3363, "message->base.descriptor == &pg_query__alter_default_privileges_stmt__descriptor");
}

void pg_query__alter_default_privileges_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_default_privileges_stmt__free_unpacked", "pg_query.pb-c.c", 3382, "message->base.descriptor == &pg_query__alter_default_privileges_stmt__descriptor");
}

void pg_query__close_portal_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__close_portal_stmt__get_packed_size", "pg_query.pb-c.c", 3394, "message->base.descriptor == &pg_query__close_portal_stmt__descriptor");
}

void pg_query__close_portal_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__close_portal_stmt__pack", "pg_query.pb-c.c", 3401, "message->base.descriptor == &pg_query__close_portal_stmt__descriptor");
}

void pg_query__close_portal_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__close_portal_stmt__pack_to_buffer", "pg_query.pb-c.c", 3408, "message->base.descriptor == &pg_query__close_portal_stmt__descriptor");
}

void pg_query__close_portal_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__close_portal_stmt__free_unpacked", "pg_query.pb-c.c", 3427, "message->base.descriptor == &pg_query__close_portal_stmt__descriptor");
}

void pg_query__cluster_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__cluster_stmt__get_packed_size", "pg_query.pb-c.c", 3439, "message->base.descriptor == &pg_query__cluster_stmt__descriptor");
}

void pg_query__cluster_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__cluster_stmt__pack", "pg_query.pb-c.c", 3446, "message->base.descriptor == &pg_query__cluster_stmt__descriptor");
}

void pg_query__cluster_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__cluster_stmt__pack_to_buffer", "pg_query.pb-c.c", 3453, "message->base.descriptor == &pg_query__cluster_stmt__descriptor");
}

void pg_query__cluster_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__cluster_stmt__free_unpacked", "pg_query.pb-c.c", 3472, "message->base.descriptor == &pg_query__cluster_stmt__descriptor");
}

void pg_query__copy_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__copy_stmt__get_packed_size", "pg_query.pb-c.c", 3484, "message->base.descriptor == &pg_query__copy_stmt__descriptor");
}

void pg_query__copy_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__copy_stmt__pack", "pg_query.pb-c.c", 3491, "message->base.descriptor == &pg_query__copy_stmt__descriptor");
}

void pg_query__copy_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__copy_stmt__pack_to_buffer", "pg_query.pb-c.c", 3498, "message->base.descriptor == &pg_query__copy_stmt__descriptor");
}

void pg_query__copy_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__copy_stmt__free_unpacked", "pg_query.pb-c.c", 3517, "message->base.descriptor == &pg_query__copy_stmt__descriptor");
}

void pg_query__create_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_stmt__get_packed_size", "pg_query.pb-c.c", 3529, "message->base.descriptor == &pg_query__create_stmt__descriptor");
}

void pg_query__create_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_stmt__pack", "pg_query.pb-c.c", 3536, "message->base.descriptor == &pg_query__create_stmt__descriptor");
}

void pg_query__create_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_stmt__pack_to_buffer", "pg_query.pb-c.c", 3543, "message->base.descriptor == &pg_query__create_stmt__descriptor");
}

void pg_query__create_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_stmt__free_unpacked", "pg_query.pb-c.c", 3562, "message->base.descriptor == &pg_query__create_stmt__descriptor");
}

void pg_query__define_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__define_stmt__get_packed_size", "pg_query.pb-c.c", 3574, "message->base.descriptor == &pg_query__define_stmt__descriptor");
}

void pg_query__define_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__define_stmt__pack", "pg_query.pb-c.c", 3581, "message->base.descriptor == &pg_query__define_stmt__descriptor");
}

void pg_query__define_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__define_stmt__pack_to_buffer", "pg_query.pb-c.c", 3588, "message->base.descriptor == &pg_query__define_stmt__descriptor");
}

void pg_query__define_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__define_stmt__free_unpacked", "pg_query.pb-c.c", 3607, "message->base.descriptor == &pg_query__define_stmt__descriptor");
}

void pg_query__drop_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__drop_stmt__get_packed_size", "pg_query.pb-c.c", 3619, "message->base.descriptor == &pg_query__drop_stmt__descriptor");
}

void pg_query__drop_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__drop_stmt__pack", "pg_query.pb-c.c", 3626, "message->base.descriptor == &pg_query__drop_stmt__descriptor");
}

void pg_query__drop_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__drop_stmt__pack_to_buffer", "pg_query.pb-c.c", 3633, "message->base.descriptor == &pg_query__drop_stmt__descriptor");
}

void pg_query__drop_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__drop_stmt__free_unpacked", "pg_query.pb-c.c", 3652, "message->base.descriptor == &pg_query__drop_stmt__descriptor");
}

void pg_query__truncate_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__truncate_stmt__get_packed_size", "pg_query.pb-c.c", 3664, "message->base.descriptor == &pg_query__truncate_stmt__descriptor");
}

void pg_query__truncate_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__truncate_stmt__pack", "pg_query.pb-c.c", 3671, "message->base.descriptor == &pg_query__truncate_stmt__descriptor");
}

void pg_query__truncate_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__truncate_stmt__pack_to_buffer", "pg_query.pb-c.c", 3678, "message->base.descriptor == &pg_query__truncate_stmt__descriptor");
}

void pg_query__truncate_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__truncate_stmt__free_unpacked", "pg_query.pb-c.c", 3697, "message->base.descriptor == &pg_query__truncate_stmt__descriptor");
}

void pg_query__comment_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__comment_stmt__get_packed_size", "pg_query.pb-c.c", 3709, "message->base.descriptor == &pg_query__comment_stmt__descriptor");
}

void pg_query__comment_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__comment_stmt__pack", "pg_query.pb-c.c", 3716, "message->base.descriptor == &pg_query__comment_stmt__descriptor");
}

void pg_query__comment_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__comment_stmt__pack_to_buffer", "pg_query.pb-c.c", 3723, "message->base.descriptor == &pg_query__comment_stmt__descriptor");
}

void pg_query__comment_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__comment_stmt__free_unpacked", "pg_query.pb-c.c", 3742, "message->base.descriptor == &pg_query__comment_stmt__descriptor");
}

void pg_query__fetch_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__fetch_stmt__get_packed_size", "pg_query.pb-c.c", 3754, "message->base.descriptor == &pg_query__fetch_stmt__descriptor");
}

void pg_query__fetch_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__fetch_stmt__pack", "pg_query.pb-c.c", 3761, "message->base.descriptor == &pg_query__fetch_stmt__descriptor");
}

void pg_query__fetch_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__fetch_stmt__pack_to_buffer", "pg_query.pb-c.c", 3768, "message->base.descriptor == &pg_query__fetch_stmt__descriptor");
}

void pg_query__fetch_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__fetch_stmt__free_unpacked", "pg_query.pb-c.c", 3787, "message->base.descriptor == &pg_query__fetch_stmt__descriptor");
}

void pg_query__index_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__index_stmt__get_packed_size", "pg_query.pb-c.c", 3799, "message->base.descriptor == &pg_query__index_stmt__descriptor");
}

void pg_query__index_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__index_stmt__pack", "pg_query.pb-c.c", 3806, "message->base.descriptor == &pg_query__index_stmt__descriptor");
}

void pg_query__index_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__index_stmt__pack_to_buffer", "pg_query.pb-c.c", 3813, "message->base.descriptor == &pg_query__index_stmt__descriptor");
}

void pg_query__index_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__index_stmt__free_unpacked", "pg_query.pb-c.c", 3832, "message->base.descriptor == &pg_query__index_stmt__descriptor");
}

void pg_query__create_function_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_function_stmt__get_packed_size", "pg_query.pb-c.c", 3844, "message->base.descriptor == &pg_query__create_function_stmt__descriptor");
}

void pg_query__create_function_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_function_stmt__pack", "pg_query.pb-c.c", 3851, "message->base.descriptor == &pg_query__create_function_stmt__descriptor");
}

void pg_query__create_function_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_function_stmt__pack_to_buffer", "pg_query.pb-c.c", 3858, "message->base.descriptor == &pg_query__create_function_stmt__descriptor");
}

void pg_query__create_function_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_function_stmt__free_unpacked", "pg_query.pb-c.c", 3877, "message->base.descriptor == &pg_query__create_function_stmt__descriptor");
}

void pg_query__alter_function_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_function_stmt__get_packed_size", "pg_query.pb-c.c", 3889, "message->base.descriptor == &pg_query__alter_function_stmt__descriptor");
}

void pg_query__alter_function_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_function_stmt__pack", "pg_query.pb-c.c", 3896, "message->base.descriptor == &pg_query__alter_function_stmt__descriptor");
}

void pg_query__alter_function_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_function_stmt__pack_to_buffer", "pg_query.pb-c.c", 3903, "message->base.descriptor == &pg_query__alter_function_stmt__descriptor");
}

void pg_query__alter_function_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_function_stmt__free_unpacked", "pg_query.pb-c.c", 3922, "message->base.descriptor == &pg_query__alter_function_stmt__descriptor");
}

void pg_query__do_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__do_stmt__get_packed_size", "pg_query.pb-c.c", 3934, "message->base.descriptor == &pg_query__do_stmt__descriptor");
}

void pg_query__do_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__do_stmt__pack", "pg_query.pb-c.c", 3941, "message->base.descriptor == &pg_query__do_stmt__descriptor");
}

void pg_query__do_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__do_stmt__pack_to_buffer", "pg_query.pb-c.c", 3948, "message->base.descriptor == &pg_query__do_stmt__descriptor");
}

void pg_query__do_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__do_stmt__free_unpacked", "pg_query.pb-c.c", 3967, "message->base.descriptor == &pg_query__do_stmt__descriptor");
}

void pg_query__rename_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__rename_stmt__get_packed_size", "pg_query.pb-c.c", 3979, "message->base.descriptor == &pg_query__rename_stmt__descriptor");
}

void pg_query__rename_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__rename_stmt__pack", "pg_query.pb-c.c", 3986, "message->base.descriptor == &pg_query__rename_stmt__descriptor");
}

void pg_query__rename_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__rename_stmt__pack_to_buffer", "pg_query.pb-c.c", 3993, "message->base.descriptor == &pg_query__rename_stmt__descriptor");
}

void pg_query__rename_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__rename_stmt__free_unpacked", "pg_query.pb-c.c", 4012, "message->base.descriptor == &pg_query__rename_stmt__descriptor");
}

void pg_query__rule_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__rule_stmt__get_packed_size", "pg_query.pb-c.c", 4024, "message->base.descriptor == &pg_query__rule_stmt__descriptor");
}

void pg_query__rule_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__rule_stmt__pack", "pg_query.pb-c.c", 4031, "message->base.descriptor == &pg_query__rule_stmt__descriptor");
}

void pg_query__rule_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__rule_stmt__pack_to_buffer", "pg_query.pb-c.c", 4038, "message->base.descriptor == &pg_query__rule_stmt__descriptor");
}

void pg_query__rule_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__rule_stmt__free_unpacked", "pg_query.pb-c.c", 4057, "message->base.descriptor == &pg_query__rule_stmt__descriptor");
}

void pg_query__notify_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__notify_stmt__get_packed_size", "pg_query.pb-c.c", 4069, "message->base.descriptor == &pg_query__notify_stmt__descriptor");
}

void pg_query__notify_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__notify_stmt__pack", "pg_query.pb-c.c", 4076, "message->base.descriptor == &pg_query__notify_stmt__descriptor");
}

void pg_query__notify_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__notify_stmt__pack_to_buffer", "pg_query.pb-c.c", 4083, "message->base.descriptor == &pg_query__notify_stmt__descriptor");
}

void pg_query__notify_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__notify_stmt__free_unpacked", "pg_query.pb-c.c", 4102, "message->base.descriptor == &pg_query__notify_stmt__descriptor");
}

void pg_query__listen_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__listen_stmt__get_packed_size", "pg_query.pb-c.c", 4114, "message->base.descriptor == &pg_query__listen_stmt__descriptor");
}

void pg_query__listen_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__listen_stmt__pack", "pg_query.pb-c.c", 4121, "message->base.descriptor == &pg_query__listen_stmt__descriptor");
}

void pg_query__listen_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__listen_stmt__pack_to_buffer", "pg_query.pb-c.c", 4128, "message->base.descriptor == &pg_query__listen_stmt__descriptor");
}

void pg_query__listen_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__listen_stmt__free_unpacked", "pg_query.pb-c.c", 4147, "message->base.descriptor == &pg_query__listen_stmt__descriptor");
}

void pg_query__unlisten_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__unlisten_stmt__get_packed_size", "pg_query.pb-c.c", 4159, "message->base.descriptor == &pg_query__unlisten_stmt__descriptor");
}

void pg_query__unlisten_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__unlisten_stmt__pack", "pg_query.pb-c.c", 4166, "message->base.descriptor == &pg_query__unlisten_stmt__descriptor");
}

void pg_query__unlisten_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__unlisten_stmt__pack_to_buffer", "pg_query.pb-c.c", 4173, "message->base.descriptor == &pg_query__unlisten_stmt__descriptor");
}

void pg_query__unlisten_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__unlisten_stmt__free_unpacked", "pg_query.pb-c.c", 4192, "message->base.descriptor == &pg_query__unlisten_stmt__descriptor");
}

void pg_query__transaction_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__transaction_stmt__get_packed_size", "pg_query.pb-c.c", 4204, "message->base.descriptor == &pg_query__transaction_stmt__descriptor");
}

void pg_query__transaction_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__transaction_stmt__pack", "pg_query.pb-c.c", 4211, "message->base.descriptor == &pg_query__transaction_stmt__descriptor");
}

void pg_query__transaction_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__transaction_stmt__pack_to_buffer", "pg_query.pb-c.c", 4218, "message->base.descriptor == &pg_query__transaction_stmt__descriptor");
}

void pg_query__transaction_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__transaction_stmt__free_unpacked", "pg_query.pb-c.c", 4237, "message->base.descriptor == &pg_query__transaction_stmt__descriptor");
}

void pg_query__view_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__view_stmt__get_packed_size", "pg_query.pb-c.c", 4249, "message->base.descriptor == &pg_query__view_stmt__descriptor");
}

void pg_query__view_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__view_stmt__pack", "pg_query.pb-c.c", 4256, "message->base.descriptor == &pg_query__view_stmt__descriptor");
}

void pg_query__view_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__view_stmt__pack_to_buffer", "pg_query.pb-c.c", 4263, "message->base.descriptor == &pg_query__view_stmt__descriptor");
}

void pg_query__view_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__view_stmt__free_unpacked", "pg_query.pb-c.c", 4282, "message->base.descriptor == &pg_query__view_stmt__descriptor");
}

void pg_query__load_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__load_stmt__get_packed_size", "pg_query.pb-c.c", 4294, "message->base.descriptor == &pg_query__load_stmt__descriptor");
}

void pg_query__load_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__load_stmt__pack", "pg_query.pb-c.c", 4301, "message->base.descriptor == &pg_query__load_stmt__descriptor");
}

void pg_query__load_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__load_stmt__pack_to_buffer", "pg_query.pb-c.c", 4308, "message->base.descriptor == &pg_query__load_stmt__descriptor");
}

void pg_query__load_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__load_stmt__free_unpacked", "pg_query.pb-c.c", 4327, "message->base.descriptor == &pg_query__load_stmt__descriptor");
}

void pg_query__create_domain_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_domain_stmt__get_packed_size", "pg_query.pb-c.c", 4339, "message->base.descriptor == &pg_query__create_domain_stmt__descriptor");
}

void pg_query__create_domain_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_domain_stmt__pack", "pg_query.pb-c.c", 4346, "message->base.descriptor == &pg_query__create_domain_stmt__descriptor");
}

void pg_query__create_domain_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_domain_stmt__pack_to_buffer", "pg_query.pb-c.c", 4353, "message->base.descriptor == &pg_query__create_domain_stmt__descriptor");
}

void pg_query__create_domain_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_domain_stmt__free_unpacked", "pg_query.pb-c.c", 4372, "message->base.descriptor == &pg_query__create_domain_stmt__descriptor");
}

void pg_query__createdb_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__createdb_stmt__get_packed_size", "pg_query.pb-c.c", 4384, "message->base.descriptor == &pg_query__createdb_stmt__descriptor");
}

void pg_query__createdb_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__createdb_stmt__pack", "pg_query.pb-c.c", 4391, "message->base.descriptor == &pg_query__createdb_stmt__descriptor");
}

void pg_query__createdb_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__createdb_stmt__pack_to_buffer", "pg_query.pb-c.c", 4398, "message->base.descriptor == &pg_query__createdb_stmt__descriptor");
}

void pg_query__createdb_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__createdb_stmt__free_unpacked", "pg_query.pb-c.c", 4417, "message->base.descriptor == &pg_query__createdb_stmt__descriptor");
}

void pg_query__dropdb_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__dropdb_stmt__get_packed_size", "pg_query.pb-c.c", 4429, "message->base.descriptor == &pg_query__dropdb_stmt__descriptor");
}

void pg_query__dropdb_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__dropdb_stmt__pack", "pg_query.pb-c.c", 4436, "message->base.descriptor == &pg_query__dropdb_stmt__descriptor");
}

void pg_query__dropdb_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__dropdb_stmt__pack_to_buffer", "pg_query.pb-c.c", 4443, "message->base.descriptor == &pg_query__dropdb_stmt__descriptor");
}

void pg_query__dropdb_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__dropdb_stmt__free_unpacked", "pg_query.pb-c.c", 4462, "message->base.descriptor == &pg_query__dropdb_stmt__descriptor");
}

void pg_query__vacuum_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__vacuum_stmt__get_packed_size", "pg_query.pb-c.c", 4474, "message->base.descriptor == &pg_query__vacuum_stmt__descriptor");
}

void pg_query__vacuum_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__vacuum_stmt__pack", "pg_query.pb-c.c", 4481, "message->base.descriptor == &pg_query__vacuum_stmt__descriptor");
}

void pg_query__vacuum_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__vacuum_stmt__pack_to_buffer", "pg_query.pb-c.c", 4488, "message->base.descriptor == &pg_query__vacuum_stmt__descriptor");
}

void pg_query__vacuum_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__vacuum_stmt__free_unpacked", "pg_query.pb-c.c", 4507, "message->base.descriptor == &pg_query__vacuum_stmt__descriptor");
}

void pg_query__explain_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__explain_stmt__get_packed_size", "pg_query.pb-c.c", 4519, "message->base.descriptor == &pg_query__explain_stmt__descriptor");
}

void pg_query__explain_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__explain_stmt__pack", "pg_query.pb-c.c", 4526, "message->base.descriptor == &pg_query__explain_stmt__descriptor");
}

void pg_query__explain_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__explain_stmt__pack_to_buffer", "pg_query.pb-c.c", 4533, "message->base.descriptor == &pg_query__explain_stmt__descriptor");
}

void pg_query__explain_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__explain_stmt__free_unpacked", "pg_query.pb-c.c", 4552, "message->base.descriptor == &pg_query__explain_stmt__descriptor");
}

void pg_query__create_table_as_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_table_as_stmt__get_packed_size", "pg_query.pb-c.c", 4564, "message->base.descriptor == &pg_query__create_table_as_stmt__descriptor");
}

void pg_query__create_table_as_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_table_as_stmt__pack", "pg_query.pb-c.c", 4571, "message->base.descriptor == &pg_query__create_table_as_stmt__descriptor");
}

void pg_query__create_table_as_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_table_as_stmt__pack_to_buffer", "pg_query.pb-c.c", 4578, "message->base.descriptor == &pg_query__create_table_as_stmt__descriptor");
}

void pg_query__create_table_as_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_table_as_stmt__free_unpacked", "pg_query.pb-c.c", 4597, "message->base.descriptor == &pg_query__create_table_as_stmt__descriptor");
}

void pg_query__create_seq_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_seq_stmt__get_packed_size", "pg_query.pb-c.c", 4609, "message->base.descriptor == &pg_query__create_seq_stmt__descriptor");
}

void pg_query__create_seq_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_seq_stmt__pack", "pg_query.pb-c.c", 4616, "message->base.descriptor == &pg_query__create_seq_stmt__descriptor");
}

void pg_query__create_seq_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_seq_stmt__pack_to_buffer", "pg_query.pb-c.c", 4623, "message->base.descriptor == &pg_query__create_seq_stmt__descriptor");
}

void pg_query__create_seq_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_seq_stmt__free_unpacked", "pg_query.pb-c.c", 4642, "message->base.descriptor == &pg_query__create_seq_stmt__descriptor");
}

void pg_query__alter_seq_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_seq_stmt__get_packed_size", "pg_query.pb-c.c", 4654, "message->base.descriptor == &pg_query__alter_seq_stmt__descriptor");
}

void pg_query__alter_seq_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_seq_stmt__pack", "pg_query.pb-c.c", 4661, "message->base.descriptor == &pg_query__alter_seq_stmt__descriptor");
}

void pg_query__alter_seq_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_seq_stmt__pack_to_buffer", "pg_query.pb-c.c", 4668, "message->base.descriptor == &pg_query__alter_seq_stmt__descriptor");
}

void pg_query__alter_seq_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_seq_stmt__free_unpacked", "pg_query.pb-c.c", 4687, "message->base.descriptor == &pg_query__alter_seq_stmt__descriptor");
}

void pg_query__variable_set_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__variable_set_stmt__get_packed_size", "pg_query.pb-c.c", 4699, "message->base.descriptor == &pg_query__variable_set_stmt__descriptor");
}

void pg_query__variable_set_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__variable_set_stmt__pack", "pg_query.pb-c.c", 4706, "message->base.descriptor == &pg_query__variable_set_stmt__descriptor");
}

void pg_query__variable_set_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__variable_set_stmt__pack_to_buffer", "pg_query.pb-c.c", 4713, "message->base.descriptor == &pg_query__variable_set_stmt__descriptor");
}

void pg_query__variable_set_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__variable_set_stmt__free_unpacked", "pg_query.pb-c.c", 4732, "message->base.descriptor == &pg_query__variable_set_stmt__descriptor");
}

void pg_query__variable_show_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__variable_show_stmt__get_packed_size", "pg_query.pb-c.c", 4744, "message->base.descriptor == &pg_query__variable_show_stmt__descriptor");
}

void pg_query__variable_show_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__variable_show_stmt__pack", "pg_query.pb-c.c", 4751, "message->base.descriptor == &pg_query__variable_show_stmt__descriptor");
}

void pg_query__variable_show_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__variable_show_stmt__pack_to_buffer", "pg_query.pb-c.c", 4758, "message->base.descriptor == &pg_query__variable_show_stmt__descriptor");
}

void pg_query__variable_show_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__variable_show_stmt__free_unpacked", "pg_query.pb-c.c", 4777, "message->base.descriptor == &pg_query__variable_show_stmt__descriptor");
}

void pg_query__discard_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__discard_stmt__get_packed_size", "pg_query.pb-c.c", 4789, "message->base.descriptor == &pg_query__discard_stmt__descriptor");
}

void pg_query__discard_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__discard_stmt__pack", "pg_query.pb-c.c", 4796, "message->base.descriptor == &pg_query__discard_stmt__descriptor");
}

void pg_query__discard_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__discard_stmt__pack_to_buffer", "pg_query.pb-c.c", 4803, "message->base.descriptor == &pg_query__discard_stmt__descriptor");
}

void pg_query__discard_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__discard_stmt__free_unpacked", "pg_query.pb-c.c", 4822, "message->base.descriptor == &pg_query__discard_stmt__descriptor");
}

void pg_query__create_trig_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_trig_stmt__get_packed_size", "pg_query.pb-c.c", 4834, "message->base.descriptor == &pg_query__create_trig_stmt__descriptor");
}

void pg_query__create_trig_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_trig_stmt__pack", "pg_query.pb-c.c", 4841, "message->base.descriptor == &pg_query__create_trig_stmt__descriptor");
}

void pg_query__create_trig_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_trig_stmt__pack_to_buffer", "pg_query.pb-c.c", 4848, "message->base.descriptor == &pg_query__create_trig_stmt__descriptor");
}

void pg_query__create_trig_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_trig_stmt__free_unpacked", "pg_query.pb-c.c", 4867, "message->base.descriptor == &pg_query__create_trig_stmt__descriptor");
}

void pg_query__create_plang_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_plang_stmt__get_packed_size", "pg_query.pb-c.c", 4879, "message->base.descriptor == &pg_query__create_plang_stmt__descriptor");
}

void pg_query__create_plang_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_plang_stmt__pack", "pg_query.pb-c.c", 4886, "message->base.descriptor == &pg_query__create_plang_stmt__descriptor");
}

void pg_query__create_plang_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_plang_stmt__pack_to_buffer", "pg_query.pb-c.c", 4893, "message->base.descriptor == &pg_query__create_plang_stmt__descriptor");
}

void pg_query__create_plang_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_plang_stmt__free_unpacked", "pg_query.pb-c.c", 4912, "message->base.descriptor == &pg_query__create_plang_stmt__descriptor");
}

void pg_query__create_role_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_role_stmt__get_packed_size", "pg_query.pb-c.c", 4924, "message->base.descriptor == &pg_query__create_role_stmt__descriptor");
}

void pg_query__create_role_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_role_stmt__pack", "pg_query.pb-c.c", 4931, "message->base.descriptor == &pg_query__create_role_stmt__descriptor");
}

void pg_query__create_role_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_role_stmt__pack_to_buffer", "pg_query.pb-c.c", 4938, "message->base.descriptor == &pg_query__create_role_stmt__descriptor");
}

void pg_query__create_role_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_role_stmt__free_unpacked", "pg_query.pb-c.c", 4957, "message->base.descriptor == &pg_query__create_role_stmt__descriptor");
}

void pg_query__alter_role_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_role_stmt__get_packed_size", "pg_query.pb-c.c", 4969, "message->base.descriptor == &pg_query__alter_role_stmt__descriptor");
}

void pg_query__alter_role_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_role_stmt__pack", "pg_query.pb-c.c", 4976, "message->base.descriptor == &pg_query__alter_role_stmt__descriptor");
}

void pg_query__alter_role_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_role_stmt__pack_to_buffer", "pg_query.pb-c.c", 4983, "message->base.descriptor == &pg_query__alter_role_stmt__descriptor");
}

void pg_query__alter_role_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_role_stmt__free_unpacked", "pg_query.pb-c.c", 5002, "message->base.descriptor == &pg_query__alter_role_stmt__descriptor");
}

void pg_query__drop_role_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__drop_role_stmt__get_packed_size", "pg_query.pb-c.c", 5014, "message->base.descriptor == &pg_query__drop_role_stmt__descriptor");
}

void pg_query__drop_role_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__drop_role_stmt__pack", "pg_query.pb-c.c", 5021, "message->base.descriptor == &pg_query__drop_role_stmt__descriptor");
}

void pg_query__drop_role_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__drop_role_stmt__pack_to_buffer", "pg_query.pb-c.c", 5028, "message->base.descriptor == &pg_query__drop_role_stmt__descriptor");
}

void pg_query__drop_role_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__drop_role_stmt__free_unpacked", "pg_query.pb-c.c", 5047, "message->base.descriptor == &pg_query__drop_role_stmt__descriptor");
}

void pg_query__lock_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__lock_stmt__get_packed_size", "pg_query.pb-c.c", 5059, "message->base.descriptor == &pg_query__lock_stmt__descriptor");
}

void pg_query__lock_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__lock_stmt__pack", "pg_query.pb-c.c", 5066, "message->base.descriptor == &pg_query__lock_stmt__descriptor");
}

void pg_query__lock_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__lock_stmt__pack_to_buffer", "pg_query.pb-c.c", 5073, "message->base.descriptor == &pg_query__lock_stmt__descriptor");
}

void pg_query__lock_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__lock_stmt__free_unpacked", "pg_query.pb-c.c", 5092, "message->base.descriptor == &pg_query__lock_stmt__descriptor");
}

void pg_query__constraints_set_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__constraints_set_stmt__get_packed_size", "pg_query.pb-c.c", 5104, "message->base.descriptor == &pg_query__constraints_set_stmt__descriptor");
}

void pg_query__constraints_set_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__constraints_set_stmt__pack", "pg_query.pb-c.c", 5111, "message->base.descriptor == &pg_query__constraints_set_stmt__descriptor");
}

void pg_query__constraints_set_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__constraints_set_stmt__pack_to_buffer", "pg_query.pb-c.c", 5118, "message->base.descriptor == &pg_query__constraints_set_stmt__descriptor");
}

void pg_query__constraints_set_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__constraints_set_stmt__free_unpacked", "pg_query.pb-c.c", 5137, "message->base.descriptor == &pg_query__constraints_set_stmt__descriptor");
}

void pg_query__reindex_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__reindex_stmt__get_packed_size", "pg_query.pb-c.c", 5149, "message->base.descriptor == &pg_query__reindex_stmt__descriptor");
}

void pg_query__reindex_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__reindex_stmt__pack", "pg_query.pb-c.c", 5156, "message->base.descriptor == &pg_query__reindex_stmt__descriptor");
}

void pg_query__reindex_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__reindex_stmt__pack_to_buffer", "pg_query.pb-c.c", 5163, "message->base.descriptor == &pg_query__reindex_stmt__descriptor");
}

void pg_query__reindex_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__reindex_stmt__free_unpacked", "pg_query.pb-c.c", 5182, "message->base.descriptor == &pg_query__reindex_stmt__descriptor");
}

void pg_query__check_point_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__check_point_stmt__get_packed_size", "pg_query.pb-c.c", 5194, "message->base.descriptor == &pg_query__check_point_stmt__descriptor");
}

void pg_query__check_point_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__check_point_stmt__pack", "pg_query.pb-c.c", 5201, "message->base.descriptor == &pg_query__check_point_stmt__descriptor");
}

void pg_query__check_point_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__check_point_stmt__pack_to_buffer", "pg_query.pb-c.c", 5208, "message->base.descriptor == &pg_query__check_point_stmt__descriptor");
}

void pg_query__check_point_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__check_point_stmt__free_unpacked", "pg_query.pb-c.c", 5227, "message->base.descriptor == &pg_query__check_point_stmt__descriptor");
}

void pg_query__create_schema_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_schema_stmt__get_packed_size", "pg_query.pb-c.c", 5239, "message->base.descriptor == &pg_query__create_schema_stmt__descriptor");
}

void pg_query__create_schema_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_schema_stmt__pack", "pg_query.pb-c.c", 5246, "message->base.descriptor == &pg_query__create_schema_stmt__descriptor");
}

void pg_query__create_schema_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_schema_stmt__pack_to_buffer", "pg_query.pb-c.c", 5253, "message->base.descriptor == &pg_query__create_schema_stmt__descriptor");
}

void pg_query__create_schema_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_schema_stmt__free_unpacked", "pg_query.pb-c.c", 5272, "message->base.descriptor == &pg_query__create_schema_stmt__descriptor");
}

void pg_query__alter_database_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_database_stmt__get_packed_size", "pg_query.pb-c.c", 5284, "message->base.descriptor == &pg_query__alter_database_stmt__descriptor");
}

void pg_query__alter_database_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_database_stmt__pack", "pg_query.pb-c.c", 5291, "message->base.descriptor == &pg_query__alter_database_stmt__descriptor");
}

void pg_query__alter_database_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_database_stmt__pack_to_buffer", "pg_query.pb-c.c", 5298, "message->base.descriptor == &pg_query__alter_database_stmt__descriptor");
}

void pg_query__alter_database_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_database_stmt__free_unpacked", "pg_query.pb-c.c", 5317, "message->base.descriptor == &pg_query__alter_database_stmt__descriptor");
}

void pg_query__alter_database_set_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_database_set_stmt__get_packed_size", "pg_query.pb-c.c", 5329, "message->base.descriptor == &pg_query__alter_database_set_stmt__descriptor");
}

void pg_query__alter_database_set_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_database_set_stmt__pack", "pg_query.pb-c.c", 5336, "message->base.descriptor == &pg_query__alter_database_set_stmt__descriptor");
}

void pg_query__alter_database_set_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_database_set_stmt__pack_to_buffer", "pg_query.pb-c.c", 5343, "message->base.descriptor == &pg_query__alter_database_set_stmt__descriptor");
}

void pg_query__alter_database_set_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_database_set_stmt__free_unpacked", "pg_query.pb-c.c", 5362, "message->base.descriptor == &pg_query__alter_database_set_stmt__descriptor");
}

void pg_query__alter_role_set_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_role_set_stmt__get_packed_size", "pg_query.pb-c.c", 5374, "message->base.descriptor == &pg_query__alter_role_set_stmt__descriptor");
}

void pg_query__alter_role_set_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_role_set_stmt__pack", "pg_query.pb-c.c", 5381, "message->base.descriptor == &pg_query__alter_role_set_stmt__descriptor");
}

void pg_query__alter_role_set_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_role_set_stmt__pack_to_buffer", "pg_query.pb-c.c", 5388, "message->base.descriptor == &pg_query__alter_role_set_stmt__descriptor");
}

void pg_query__alter_role_set_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_role_set_stmt__free_unpacked", "pg_query.pb-c.c", 5407, "message->base.descriptor == &pg_query__alter_role_set_stmt__descriptor");
}

void pg_query__create_conversion_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_conversion_stmt__get_packed_size", "pg_query.pb-c.c", 5419, "message->base.descriptor == &pg_query__create_conversion_stmt__descriptor");
}

void pg_query__create_conversion_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_conversion_stmt__pack", "pg_query.pb-c.c", 5426, "message->base.descriptor == &pg_query__create_conversion_stmt__descriptor");
}

void pg_query__create_conversion_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_conversion_stmt__pack_to_buffer", "pg_query.pb-c.c", 5433, "message->base.descriptor == &pg_query__create_conversion_stmt__descriptor");
}

void pg_query__create_conversion_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_conversion_stmt__free_unpacked", "pg_query.pb-c.c", 5452, "message->base.descriptor == &pg_query__create_conversion_stmt__descriptor");
}

void pg_query__create_cast_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_cast_stmt__get_packed_size", "pg_query.pb-c.c", 5464, "message->base.descriptor == &pg_query__create_cast_stmt__descriptor");
}

void pg_query__create_cast_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_cast_stmt__pack", "pg_query.pb-c.c", 5471, "message->base.descriptor == &pg_query__create_cast_stmt__descriptor");
}

void pg_query__create_cast_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_cast_stmt__free_unpacked", "pg_query.pb-c.c", 5497, "message->base.descriptor == &pg_query__create_cast_stmt__descriptor");
}

void pg_query__create_op_class_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_op_class_stmt__get_packed_size", "pg_query.pb-c.c", 5509, "message->base.descriptor == &pg_query__create_op_class_stmt__descriptor");
}

void pg_query__create_op_class_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_op_class_stmt__pack", "pg_query.pb-c.c", 5516, "message->base.descriptor == &pg_query__create_op_class_stmt__descriptor");
}

void pg_query__create_op_class_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_op_class_stmt__pack_to_buffer", "pg_query.pb-c.c", 5523, "message->base.descriptor == &pg_query__create_op_class_stmt__descriptor");
}

void pg_query__create_op_class_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_op_class_stmt__free_unpacked", "pg_query.pb-c.c", 5542, "message->base.descriptor == &pg_query__create_op_class_stmt__descriptor");
}

void pg_query__create_op_family_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_op_family_stmt__get_packed_size", "pg_query.pb-c.c", 5554, "message->base.descriptor == &pg_query__create_op_family_stmt__descriptor");
}

void pg_query__create_op_family_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_op_family_stmt__pack", "pg_query.pb-c.c", 5561, "message->base.descriptor == &pg_query__create_op_family_stmt__descriptor");
}

void pg_query__create_op_family_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_op_family_stmt__pack_to_buffer", "pg_query.pb-c.c", 5568, "message->base.descriptor == &pg_query__create_op_family_stmt__descriptor");
}

void pg_query__create_op_family_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_op_family_stmt__free_unpacked", "pg_query.pb-c.c", 5587, "message->base.descriptor == &pg_query__create_op_family_stmt__descriptor");
}

void pg_query__alter_op_family_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_op_family_stmt__get_packed_size", "pg_query.pb-c.c", 5599, "message->base.descriptor == &pg_query__alter_op_family_stmt__descriptor");
}

void pg_query__alter_op_family_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_op_family_stmt__pack", "pg_query.pb-c.c", 5606, "message->base.descriptor == &pg_query__alter_op_family_stmt__descriptor");
}

void pg_query__alter_op_family_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_op_family_stmt__pack_to_buffer", "pg_query.pb-c.c", 5613, "message->base.descriptor == &pg_query__alter_op_family_stmt__descriptor");
}

void pg_query__alter_op_family_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_op_family_stmt__free_unpacked", "pg_query.pb-c.c", 5632, "message->base.descriptor == &pg_query__alter_op_family_stmt__descriptor");
}

void pg_query__prepare_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__prepare_stmt__get_packed_size", "pg_query.pb-c.c", 5644, "message->base.descriptor == &pg_query__prepare_stmt__descriptor");
}

void pg_query__prepare_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__prepare_stmt__pack", "pg_query.pb-c.c", 5651, "message->base.descriptor == &pg_query__prepare_stmt__descriptor");
}

void pg_query__prepare_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__prepare_stmt__pack_to_buffer", "pg_query.pb-c.c", 5658, "message->base.descriptor == &pg_query__prepare_stmt__descriptor");
}

void pg_query__prepare_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__prepare_stmt__free_unpacked", "pg_query.pb-c.c", 5677, "message->base.descriptor == &pg_query__prepare_stmt__descriptor");
}

void pg_query__execute_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__execute_stmt__get_packed_size", "pg_query.pb-c.c", 5689, "message->base.descriptor == &pg_query__execute_stmt__descriptor");
}

void pg_query__execute_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__execute_stmt__pack", "pg_query.pb-c.c", 5696, "message->base.descriptor == &pg_query__execute_stmt__descriptor");
}

void pg_query__execute_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__execute_stmt__pack_to_buffer", "pg_query.pb-c.c", 5703, "message->base.descriptor == &pg_query__execute_stmt__descriptor");
}

void pg_query__execute_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__execute_stmt__free_unpacked", "pg_query.pb-c.c", 5722, "message->base.descriptor == &pg_query__execute_stmt__descriptor");
}

void pg_query__deallocate_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__deallocate_stmt__get_packed_size", "pg_query.pb-c.c", 5734, "message->base.descriptor == &pg_query__deallocate_stmt__descriptor");
}

void pg_query__deallocate_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__deallocate_stmt__pack", "pg_query.pb-c.c", 5741, "message->base.descriptor == &pg_query__deallocate_stmt__descriptor");
}

void pg_query__deallocate_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__deallocate_stmt__pack_to_buffer", "pg_query.pb-c.c", 5748, "message->base.descriptor == &pg_query__deallocate_stmt__descriptor");
}

void pg_query__deallocate_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__deallocate_stmt__free_unpacked", "pg_query.pb-c.c", 5767, "message->base.descriptor == &pg_query__deallocate_stmt__descriptor");
}

void pg_query__declare_cursor_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__declare_cursor_stmt__get_packed_size", "pg_query.pb-c.c", 5779, "message->base.descriptor == &pg_query__declare_cursor_stmt__descriptor");
}

void pg_query__declare_cursor_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__declare_cursor_stmt__pack", "pg_query.pb-c.c", 5786, "message->base.descriptor == &pg_query__declare_cursor_stmt__descriptor");
}

void pg_query__declare_cursor_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__declare_cursor_stmt__pack_to_buffer", "pg_query.pb-c.c", 5793, "message->base.descriptor == &pg_query__declare_cursor_stmt__descriptor");
}

void pg_query__declare_cursor_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__declare_cursor_stmt__free_unpacked", "pg_query.pb-c.c", 5812, "message->base.descriptor == &pg_query__declare_cursor_stmt__descriptor");
}

void pg_query__create_table_space_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_table_space_stmt__get_packed_size", "pg_query.pb-c.c", 5824, "message->base.descriptor == &pg_query__create_table_space_stmt__descriptor");
}

void pg_query__create_table_space_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_table_space_stmt__pack", "pg_query.pb-c.c", 5831, "message->base.descriptor == &pg_query__create_table_space_stmt__descriptor");
}

void pg_query__create_table_space_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_table_space_stmt__pack_to_buffer", "pg_query.pb-c.c", 5838, "message->base.descriptor == &pg_query__create_table_space_stmt__descriptor");
}

void pg_query__create_table_space_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_table_space_stmt__free_unpacked", "pg_query.pb-c.c", 5857, "message->base.descriptor == &pg_query__create_table_space_stmt__descriptor");
}

void pg_query__drop_table_space_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__drop_table_space_stmt__get_packed_size", "pg_query.pb-c.c", 5869, "message->base.descriptor == &pg_query__drop_table_space_stmt__descriptor");
}

void pg_query__drop_table_space_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__drop_table_space_stmt__pack", "pg_query.pb-c.c", 5876, "message->base.descriptor == &pg_query__drop_table_space_stmt__descriptor");
}

void pg_query__drop_table_space_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__drop_table_space_stmt__pack_to_buffer", "pg_query.pb-c.c", 5883, "message->base.descriptor == &pg_query__drop_table_space_stmt__descriptor");
}

void pg_query__drop_table_space_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__drop_table_space_stmt__free_unpacked", "pg_query.pb-c.c", 5902, "message->base.descriptor == &pg_query__drop_table_space_stmt__descriptor");
}

void pg_query__alter_object_depends_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_object_depends_stmt__get_packed_size", "pg_query.pb-c.c", 5914, "message->base.descriptor == &pg_query__alter_object_depends_stmt__descriptor");
}

void pg_query__alter_object_depends_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_object_depends_stmt__pack", "pg_query.pb-c.c", 5921, "message->base.descriptor == &pg_query__alter_object_depends_stmt__descriptor");
}

void pg_query__alter_object_depends_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_object_depends_stmt__free_unpacked", "pg_query.pb-c.c", 5947, "message->base.descriptor == &pg_query__alter_object_depends_stmt__descriptor");
}

void pg_query__alter_object_schema_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_object_schema_stmt__get_packed_size", "pg_query.pb-c.c", 5959, "message->base.descriptor == &pg_query__alter_object_schema_stmt__descriptor");
}

void pg_query__alter_object_schema_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_object_schema_stmt__pack", "pg_query.pb-c.c", 5966, "message->base.descriptor == &pg_query__alter_object_schema_stmt__descriptor");
}

void pg_query__alter_object_schema_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_object_schema_stmt__pack_to_buffer", "pg_query.pb-c.c", 5973, "message->base.descriptor == &pg_query__alter_object_schema_stmt__descriptor");
}

void pg_query__alter_object_schema_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_object_schema_stmt__free_unpacked", "pg_query.pb-c.c", 5992, "message->base.descriptor == &pg_query__alter_object_schema_stmt__descriptor");
}

void pg_query__alter_owner_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_owner_stmt__pack", "pg_query.pb-c.c", 6011, "message->base.descriptor == &pg_query__alter_owner_stmt__descriptor");
}

void pg_query__alter_owner_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_owner_stmt__pack_to_buffer", "pg_query.pb-c.c", 6018, "message->base.descriptor == &pg_query__alter_owner_stmt__descriptor");
}

void pg_query__alter_owner_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_owner_stmt__free_unpacked", "pg_query.pb-c.c", 6037, "message->base.descriptor == &pg_query__alter_owner_stmt__descriptor");
}

void pg_query__alter_operator_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_operator_stmt__get_packed_size", "pg_query.pb-c.c", 6049, "message->base.descriptor == &pg_query__alter_operator_stmt__descriptor");
}

void pg_query__alter_operator_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_operator_stmt__pack", "pg_query.pb-c.c", 6056, "message->base.descriptor == &pg_query__alter_operator_stmt__descriptor");
}

void pg_query__alter_operator_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_operator_stmt__pack_to_buffer", "pg_query.pb-c.c", 6063, "message->base.descriptor == &pg_query__alter_operator_stmt__descriptor");
}

void pg_query__alter_operator_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_operator_stmt__free_unpacked", "pg_query.pb-c.c", 6082, "message->base.descriptor == &pg_query__alter_operator_stmt__descriptor");
}

void pg_query__alter_type_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_type_stmt__get_packed_size", "pg_query.pb-c.c", 6094, "message->base.descriptor == &pg_query__alter_type_stmt__descriptor");
}

void pg_query__alter_type_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_type_stmt__pack", "pg_query.pb-c.c", 6101, "message->base.descriptor == &pg_query__alter_type_stmt__descriptor");
}

void pg_query__alter_type_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_type_stmt__pack_to_buffer", "pg_query.pb-c.c", 6108, "message->base.descriptor == &pg_query__alter_type_stmt__descriptor");
}

void pg_query__alter_type_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_type_stmt__free_unpacked", "pg_query.pb-c.c", 6127, "message->base.descriptor == &pg_query__alter_type_stmt__descriptor");
}

void pg_query__drop_owned_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__drop_owned_stmt__get_packed_size", "pg_query.pb-c.c", 6139, "message->base.descriptor == &pg_query__drop_owned_stmt__descriptor");
}

void pg_query__drop_owned_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__drop_owned_stmt__pack", "pg_query.pb-c.c", 6146, "message->base.descriptor == &pg_query__drop_owned_stmt__descriptor");
}

void pg_query__drop_owned_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__drop_owned_stmt__pack_to_buffer", "pg_query.pb-c.c", 6153, "message->base.descriptor == &pg_query__drop_owned_stmt__descriptor");
}

void pg_query__drop_owned_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__drop_owned_stmt__free_unpacked", "pg_query.pb-c.c", 6172, "message->base.descriptor == &pg_query__drop_owned_stmt__descriptor");
}

void pg_query__reassign_owned_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__reassign_owned_stmt__get_packed_size", "pg_query.pb-c.c", 6184, "message->base.descriptor == &pg_query__reassign_owned_stmt__descriptor");
}

void pg_query__reassign_owned_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__reassign_owned_stmt__pack", "pg_query.pb-c.c", 6191, "message->base.descriptor == &pg_query__reassign_owned_stmt__descriptor");
}

void pg_query__reassign_owned_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__reassign_owned_stmt__pack_to_buffer", "pg_query.pb-c.c", 6198, "message->base.descriptor == &pg_query__reassign_owned_stmt__descriptor");
}

void pg_query__reassign_owned_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__reassign_owned_stmt__free_unpacked", "pg_query.pb-c.c", 6217, "message->base.descriptor == &pg_query__reassign_owned_stmt__descriptor");
}

void pg_query__composite_type_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__composite_type_stmt__get_packed_size", "pg_query.pb-c.c", 6229, "message->base.descriptor == &pg_query__composite_type_stmt__descriptor");
}

void pg_query__composite_type_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__composite_type_stmt__pack", "pg_query.pb-c.c", 6236, "message->base.descriptor == &pg_query__composite_type_stmt__descriptor");
}

void pg_query__composite_type_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__composite_type_stmt__pack_to_buffer", "pg_query.pb-c.c", 6243, "message->base.descriptor == &pg_query__composite_type_stmt__descriptor");
}

void pg_query__composite_type_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__composite_type_stmt__free_unpacked", "pg_query.pb-c.c", 6262, "message->base.descriptor == &pg_query__composite_type_stmt__descriptor");
}

void pg_query__create_enum_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_enum_stmt__get_packed_size", "pg_query.pb-c.c", 6274, "message->base.descriptor == &pg_query__create_enum_stmt__descriptor");
}

void pg_query__create_enum_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_enum_stmt__pack", "pg_query.pb-c.c", 6281, "message->base.descriptor == &pg_query__create_enum_stmt__descriptor");
}

void pg_query__create_enum_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_enum_stmt__free_unpacked", "pg_query.pb-c.c", 6307, "message->base.descriptor == &pg_query__create_enum_stmt__descriptor");
}

void pg_query__create_range_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_range_stmt__get_packed_size", "pg_query.pb-c.c", 6319, "message->base.descriptor == &pg_query__create_range_stmt__descriptor");
}

void pg_query__create_range_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_range_stmt__pack", "pg_query.pb-c.c", 6326, "message->base.descriptor == &pg_query__create_range_stmt__descriptor");
}

void pg_query__create_range_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_range_stmt__pack_to_buffer", "pg_query.pb-c.c", 6333, "message->base.descriptor == &pg_query__create_range_stmt__descriptor");
}

void pg_query__create_range_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_range_stmt__free_unpacked", "pg_query.pb-c.c", 6352, "message->base.descriptor == &pg_query__create_range_stmt__descriptor");
}

void pg_query__alter_enum_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_enum_stmt__get_packed_size", "pg_query.pb-c.c", 6364, "message->base.descriptor == &pg_query__alter_enum_stmt__descriptor");
}

void pg_query__alter_enum_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_enum_stmt__pack", "pg_query.pb-c.c", 6371, "message->base.descriptor == &pg_query__alter_enum_stmt__descriptor");
}

void pg_query__alter_enum_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_enum_stmt__pack_to_buffer", "pg_query.pb-c.c", 6378, "message->base.descriptor == &pg_query__alter_enum_stmt__descriptor");
}

void pg_query__alter_enum_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_enum_stmt__free_unpacked", "pg_query.pb-c.c", 6397, "message->base.descriptor == &pg_query__alter_enum_stmt__descriptor");
}

void pg_query__alter_tsdictionary_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_tsdictionary_stmt__get_packed_size", "pg_query.pb-c.c", 6409, "message->base.descriptor == &pg_query__alter_tsdictionary_stmt__descriptor");
}

void pg_query__alter_tsdictionary_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_tsdictionary_stmt__pack", "pg_query.pb-c.c", 6416, "message->base.descriptor == &pg_query__alter_tsdictionary_stmt__descriptor");
}

void pg_query__alter_tsdictionary_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_tsdictionary_stmt__pack_to_buffer", "pg_query.pb-c.c", 6423, "message->base.descriptor == &pg_query__alter_tsdictionary_stmt__descriptor");
}

void pg_query__alter_tsdictionary_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_tsdictionary_stmt__free_unpacked", "pg_query.pb-c.c", 6442, "message->base.descriptor == &pg_query__alter_tsdictionary_stmt__descriptor");
}

void pg_query__alter_tsconfiguration_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_tsconfiguration_stmt__get_packed_size", "pg_query.pb-c.c", 6454, "message->base.descriptor == &pg_query__alter_tsconfiguration_stmt__descriptor");
}

void pg_query__alter_tsconfiguration_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_tsconfiguration_stmt__pack", "pg_query.pb-c.c", 6461, "message->base.descriptor == &pg_query__alter_tsconfiguration_stmt__descriptor");
}

void pg_query__alter_tsconfiguration_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_tsconfiguration_stmt__pack_to_buffer", "pg_query.pb-c.c", 6468, "message->base.descriptor == &pg_query__alter_tsconfiguration_stmt__descriptor");
}

void pg_query__alter_tsconfiguration_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_tsconfiguration_stmt__free_unpacked", "pg_query.pb-c.c", 6487, "message->base.descriptor == &pg_query__alter_tsconfiguration_stmt__descriptor");
}

void pg_query__create_fdw_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_fdw_stmt__get_packed_size", "pg_query.pb-c.c", 6499, "message->base.descriptor == &pg_query__create_fdw_stmt__descriptor");
}

void pg_query__create_fdw_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_fdw_stmt__pack", "pg_query.pb-c.c", 6506, "message->base.descriptor == &pg_query__create_fdw_stmt__descriptor");
}

void pg_query__create_fdw_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_fdw_stmt__pack_to_buffer", "pg_query.pb-c.c", 6513, "message->base.descriptor == &pg_query__create_fdw_stmt__descriptor");
}

void pg_query__create_fdw_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_fdw_stmt__free_unpacked", "pg_query.pb-c.c", 6532, "message->base.descriptor == &pg_query__create_fdw_stmt__descriptor");
}

void pg_query__alter_fdw_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_fdw_stmt__get_packed_size", "pg_query.pb-c.c", 6544, "message->base.descriptor == &pg_query__alter_fdw_stmt__descriptor");
}

void pg_query__alter_fdw_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_fdw_stmt__pack", "pg_query.pb-c.c", 6551, "message->base.descriptor == &pg_query__alter_fdw_stmt__descriptor");
}

void pg_query__alter_fdw_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_fdw_stmt__pack_to_buffer", "pg_query.pb-c.c", 6558, "message->base.descriptor == &pg_query__alter_fdw_stmt__descriptor");
}

void pg_query__alter_fdw_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_fdw_stmt__free_unpacked", "pg_query.pb-c.c", 6577, "message->base.descriptor == &pg_query__alter_fdw_stmt__descriptor");
}

void pg_query__create_foreign_server_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_foreign_server_stmt__get_packed_size", "pg_query.pb-c.c", 6589, "message->base.descriptor == &pg_query__create_foreign_server_stmt__descriptor");
}

void pg_query__create_foreign_server_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_foreign_server_stmt__pack", "pg_query.pb-c.c", 6596, "message->base.descriptor == &pg_query__create_foreign_server_stmt__descriptor");
}

void pg_query__create_foreign_server_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_foreign_server_stmt__pack_to_buffer", "pg_query.pb-c.c", 6603, "message->base.descriptor == &pg_query__create_foreign_server_stmt__descriptor");
}

void pg_query__create_foreign_server_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_foreign_server_stmt__free_unpacked", "pg_query.pb-c.c", 6622, "message->base.descriptor == &pg_query__create_foreign_server_stmt__descriptor");
}

void pg_query__alter_foreign_server_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_foreign_server_stmt__get_packed_size", "pg_query.pb-c.c", 6634, "message->base.descriptor == &pg_query__alter_foreign_server_stmt__descriptor");
}

void pg_query__alter_foreign_server_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_foreign_server_stmt__pack", "pg_query.pb-c.c", 6641, "message->base.descriptor == &pg_query__alter_foreign_server_stmt__descriptor");
}

void pg_query__alter_foreign_server_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_foreign_server_stmt__pack_to_buffer", "pg_query.pb-c.c", 6648, "message->base.descriptor == &pg_query__alter_foreign_server_stmt__descriptor");
}

void pg_query__alter_foreign_server_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_foreign_server_stmt__free_unpacked", "pg_query.pb-c.c", 6667, "message->base.descriptor == &pg_query__alter_foreign_server_stmt__descriptor");
}

void pg_query__create_user_mapping_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_user_mapping_stmt__get_packed_size", "pg_query.pb-c.c", 6679, "message->base.descriptor == &pg_query__create_user_mapping_stmt__descriptor");
}

void pg_query__create_user_mapping_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_user_mapping_stmt__pack", "pg_query.pb-c.c", 6686, "message->base.descriptor == &pg_query__create_user_mapping_stmt__descriptor");
}

void pg_query__create_user_mapping_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_user_mapping_stmt__pack_to_buffer", "pg_query.pb-c.c", 6693, "message->base.descriptor == &pg_query__create_user_mapping_stmt__descriptor");
}

void pg_query__create_user_mapping_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_user_mapping_stmt__free_unpacked", "pg_query.pb-c.c", 6712, "message->base.descriptor == &pg_query__create_user_mapping_stmt__descriptor");
}

void pg_query__alter_user_mapping_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_user_mapping_stmt__get_packed_size", "pg_query.pb-c.c", 6724, "message->base.descriptor == &pg_query__alter_user_mapping_stmt__descriptor");
}

void pg_query__alter_user_mapping_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_user_mapping_stmt__pack", "pg_query.pb-c.c", 6731, "message->base.descriptor == &pg_query__alter_user_mapping_stmt__descriptor");
}

void pg_query__alter_user_mapping_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_user_mapping_stmt__pack_to_buffer", "pg_query.pb-c.c", 6738, "message->base.descriptor == &pg_query__alter_user_mapping_stmt__descriptor");
}

void pg_query__alter_user_mapping_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_user_mapping_stmt__free_unpacked", "pg_query.pb-c.c", 6757, "message->base.descriptor == &pg_query__alter_user_mapping_stmt__descriptor");
}

void pg_query__drop_user_mapping_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__drop_user_mapping_stmt__get_packed_size", "pg_query.pb-c.c", 6769, "message->base.descriptor == &pg_query__drop_user_mapping_stmt__descriptor");
}

void pg_query__drop_user_mapping_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__drop_user_mapping_stmt__pack", "pg_query.pb-c.c", 6776, "message->base.descriptor == &pg_query__drop_user_mapping_stmt__descriptor");
}

void pg_query__drop_user_mapping_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__drop_user_mapping_stmt__pack_to_buffer", "pg_query.pb-c.c", 6783, "message->base.descriptor == &pg_query__drop_user_mapping_stmt__descriptor");
}

void pg_query__drop_user_mapping_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__drop_user_mapping_stmt__free_unpacked", "pg_query.pb-c.c", 6802, "message->base.descriptor == &pg_query__drop_user_mapping_stmt__descriptor");
}

void pg_query__alter_table_space_options_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_table_space_options_stmt__get_packed_size", "pg_query.pb-c.c", 6814, "message->base.descriptor == &pg_query__alter_table_space_options_stmt__descriptor");
}

void pg_query__alter_table_space_options_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_table_space_options_stmt__pack", "pg_query.pb-c.c", 6821, "message->base.descriptor == &pg_query__alter_table_space_options_stmt__descriptor");
}

void pg_query__alter_table_space_options_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_table_space_options_stmt__pack_to_buffer", "pg_query.pb-c.c", 6828, "message->base.descriptor == &pg_query__alter_table_space_options_stmt__descriptor");
}

void pg_query__alter_table_space_options_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_table_space_options_stmt__free_unpacked", "pg_query.pb-c.c", 6847, "message->base.descriptor == &pg_query__alter_table_space_options_stmt__descriptor");
}

void pg_query__alter_table_move_all_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_table_move_all_stmt__get_packed_size", "pg_query.pb-c.c", 6859, "message->base.descriptor == &pg_query__alter_table_move_all_stmt__descriptor");
}

void pg_query__alter_table_move_all_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_table_move_all_stmt__pack", "pg_query.pb-c.c", 6866, "message->base.descriptor == &pg_query__alter_table_move_all_stmt__descriptor");
}

void pg_query__alter_table_move_all_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_table_move_all_stmt__pack_to_buffer", "pg_query.pb-c.c", 6873, "message->base.descriptor == &pg_query__alter_table_move_all_stmt__descriptor");
}

void pg_query__alter_table_move_all_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_table_move_all_stmt__free_unpacked", "pg_query.pb-c.c", 6892, "message->base.descriptor == &pg_query__alter_table_move_all_stmt__descriptor");
}

void pg_query__sec_label_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__sec_label_stmt__get_packed_size", "pg_query.pb-c.c", 6904, "message->base.descriptor == &pg_query__sec_label_stmt__descriptor");
}

void pg_query__sec_label_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__sec_label_stmt__pack", "pg_query.pb-c.c", 6911, "message->base.descriptor == &pg_query__sec_label_stmt__descriptor");
}

void pg_query__sec_label_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__sec_label_stmt__pack_to_buffer", "pg_query.pb-c.c", 6918, "message->base.descriptor == &pg_query__sec_label_stmt__descriptor");
}

void pg_query__sec_label_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__sec_label_stmt__free_unpacked", "pg_query.pb-c.c", 6937, "message->base.descriptor == &pg_query__sec_label_stmt__descriptor");
}

void pg_query__create_foreign_table_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_foreign_table_stmt__get_packed_size", "pg_query.pb-c.c", 6949, "message->base.descriptor == &pg_query__create_foreign_table_stmt__descriptor");
}

void pg_query__create_foreign_table_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_foreign_table_stmt__pack", "pg_query.pb-c.c", 6956, "message->base.descriptor == &pg_query__create_foreign_table_stmt__descriptor");
}

void pg_query__create_foreign_table_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_foreign_table_stmt__pack_to_buffer", "pg_query.pb-c.c", 6963, "message->base.descriptor == &pg_query__create_foreign_table_stmt__descriptor");
}

void pg_query__create_foreign_table_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_foreign_table_stmt__free_unpacked", "pg_query.pb-c.c", 6982, "message->base.descriptor == &pg_query__create_foreign_table_stmt__descriptor");
}

void pg_query__import_foreign_schema_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__import_foreign_schema_stmt__get_packed_size", "pg_query.pb-c.c", 6994, "message->base.descriptor == &pg_query__import_foreign_schema_stmt__descriptor");
}

void pg_query__import_foreign_schema_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__import_foreign_schema_stmt__pack", "pg_query.pb-c.c", 7001, "message->base.descriptor == &pg_query__import_foreign_schema_stmt__descriptor");
}

void pg_query__import_foreign_schema_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__import_foreign_schema_stmt__pack_to_buffer", "pg_query.pb-c.c", 7008, "message->base.descriptor == &pg_query__import_foreign_schema_stmt__descriptor");
}

void pg_query__import_foreign_schema_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__import_foreign_schema_stmt__free_unpacked", "pg_query.pb-c.c", 7027, "message->base.descriptor == &pg_query__import_foreign_schema_stmt__descriptor");
}

void pg_query__create_extension_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_extension_stmt__get_packed_size", "pg_query.pb-c.c", 7039, "message->base.descriptor == &pg_query__create_extension_stmt__descriptor");
}

void pg_query__create_extension_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_extension_stmt__pack", "pg_query.pb-c.c", 7046, "message->base.descriptor == &pg_query__create_extension_stmt__descriptor");
}

void pg_query__create_extension_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_extension_stmt__pack_to_buffer", "pg_query.pb-c.c", 7053, "message->base.descriptor == &pg_query__create_extension_stmt__descriptor");
}

void pg_query__create_extension_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_extension_stmt__free_unpacked", "pg_query.pb-c.c", 7072, "message->base.descriptor == &pg_query__create_extension_stmt__descriptor");
}

void pg_query__alter_extension_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_extension_stmt__get_packed_size", "pg_query.pb-c.c", 7084, "message->base.descriptor == &pg_query__alter_extension_stmt__descriptor");
}

void pg_query__alter_extension_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_extension_stmt__pack", "pg_query.pb-c.c", 7091, "message->base.descriptor == &pg_query__alter_extension_stmt__descriptor");
}

void pg_query__alter_extension_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_extension_stmt__pack_to_buffer", "pg_query.pb-c.c", 7098, "message->base.descriptor == &pg_query__alter_extension_stmt__descriptor");
}

void pg_query__alter_extension_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_extension_stmt__free_unpacked", "pg_query.pb-c.c", 7117, "message->base.descriptor == &pg_query__alter_extension_stmt__descriptor");
}

void pg_query__alter_extension_contents_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_extension_contents_stmt__get_packed_size", "pg_query.pb-c.c", 7129, "message->base.descriptor == &pg_query__alter_extension_contents_stmt__descriptor");
}

void pg_query__alter_extension_contents_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_extension_contents_stmt__pack", "pg_query.pb-c.c", 7136, "message->base.descriptor == &pg_query__alter_extension_contents_stmt__descriptor");
}

void pg_query__alter_extension_contents_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_extension_contents_stmt__pack_to_buffer", "pg_query.pb-c.c", 7143, "message->base.descriptor == &pg_query__alter_extension_contents_stmt__descriptor");
}

void pg_query__alter_extension_contents_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_extension_contents_stmt__free_unpacked", "pg_query.pb-c.c", 7162, "message->base.descriptor == &pg_query__alter_extension_contents_stmt__descriptor");
}

void pg_query__create_event_trig_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_event_trig_stmt__get_packed_size", "pg_query.pb-c.c", 7174, "message->base.descriptor == &pg_query__create_event_trig_stmt__descriptor");
}

void pg_query__create_event_trig_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_event_trig_stmt__pack", "pg_query.pb-c.c", 7181, "message->base.descriptor == &pg_query__create_event_trig_stmt__descriptor");
}

void pg_query__create_event_trig_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_event_trig_stmt__pack_to_buffer", "pg_query.pb-c.c", 7188, "message->base.descriptor == &pg_query__create_event_trig_stmt__descriptor");
}

void pg_query__create_event_trig_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_event_trig_stmt__free_unpacked", "pg_query.pb-c.c", 7207, "message->base.descriptor == &pg_query__create_event_trig_stmt__descriptor");
}

void pg_query__alter_event_trig_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_event_trig_stmt__get_packed_size", "pg_query.pb-c.c", 7219, "message->base.descriptor == &pg_query__alter_event_trig_stmt__descriptor");
}

void pg_query__alter_event_trig_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_event_trig_stmt__pack", "pg_query.pb-c.c", 7226, "message->base.descriptor == &pg_query__alter_event_trig_stmt__descriptor");
}

void pg_query__alter_event_trig_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_event_trig_stmt__pack_to_buffer", "pg_query.pb-c.c", 7233, "message->base.descriptor == &pg_query__alter_event_trig_stmt__descriptor");
}

void pg_query__alter_event_trig_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_event_trig_stmt__free_unpacked", "pg_query.pb-c.c", 7252, "message->base.descriptor == &pg_query__alter_event_trig_stmt__descriptor");
}

void pg_query__refresh_mat_view_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__refresh_mat_view_stmt__get_packed_size", "pg_query.pb-c.c", 7264, "message->base.descriptor == &pg_query__refresh_mat_view_stmt__descriptor");
}

void pg_query__refresh_mat_view_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__refresh_mat_view_stmt__pack", "pg_query.pb-c.c", 7271, "message->base.descriptor == &pg_query__refresh_mat_view_stmt__descriptor");
}

void pg_query__refresh_mat_view_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__refresh_mat_view_stmt__pack_to_buffer", "pg_query.pb-c.c", 7278, "message->base.descriptor == &pg_query__refresh_mat_view_stmt__descriptor");
}

void pg_query__refresh_mat_view_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__refresh_mat_view_stmt__free_unpacked", "pg_query.pb-c.c", 7297, "message->base.descriptor == &pg_query__refresh_mat_view_stmt__descriptor");
}

void pg_query__replica_identity_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__replica_identity_stmt__get_packed_size", "pg_query.pb-c.c", 7309, "message->base.descriptor == &pg_query__replica_identity_stmt__descriptor");
}

void pg_query__replica_identity_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__replica_identity_stmt__pack", "pg_query.pb-c.c", 7316, "message->base.descriptor == &pg_query__replica_identity_stmt__descriptor");
}

void pg_query__replica_identity_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__replica_identity_stmt__pack_to_buffer", "pg_query.pb-c.c", 7323, "message->base.descriptor == &pg_query__replica_identity_stmt__descriptor");
}

void pg_query__replica_identity_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__replica_identity_stmt__free_unpacked", "pg_query.pb-c.c", 7342, "message->base.descriptor == &pg_query__replica_identity_stmt__descriptor");
}

void pg_query__alter_system_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_system_stmt__get_packed_size", "pg_query.pb-c.c", 7354, "message->base.descriptor == &pg_query__alter_system_stmt__descriptor");
}

void pg_query__alter_system_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_system_stmt__pack", "pg_query.pb-c.c", 7361, "message->base.descriptor == &pg_query__alter_system_stmt__descriptor");
}

void pg_query__alter_system_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_system_stmt__pack_to_buffer", "pg_query.pb-c.c", 7368, "message->base.descriptor == &pg_query__alter_system_stmt__descriptor");
}

void pg_query__alter_system_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_system_stmt__free_unpacked", "pg_query.pb-c.c", 7387, "message->base.descriptor == &pg_query__alter_system_stmt__descriptor");
}

void pg_query__create_policy_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_policy_stmt__get_packed_size", "pg_query.pb-c.c", 7399, "message->base.descriptor == &pg_query__create_policy_stmt__descriptor");
}

void pg_query__create_policy_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_policy_stmt__pack", "pg_query.pb-c.c", 7406, "message->base.descriptor == &pg_query__create_policy_stmt__descriptor");
}

void pg_query__create_policy_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_policy_stmt__pack_to_buffer", "pg_query.pb-c.c", 7413, "message->base.descriptor == &pg_query__create_policy_stmt__descriptor");
}

void pg_query__create_policy_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_policy_stmt__free_unpacked", "pg_query.pb-c.c", 7432, "message->base.descriptor == &pg_query__create_policy_stmt__descriptor");
}

void pg_query__alter_policy_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_policy_stmt__get_packed_size", "pg_query.pb-c.c", 7444, "message->base.descriptor == &pg_query__alter_policy_stmt__descriptor");
}

void pg_query__alter_policy_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_policy_stmt__pack", "pg_query.pb-c.c", 7451, "message->base.descriptor == &pg_query__alter_policy_stmt__descriptor");
}

void pg_query__alter_policy_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_policy_stmt__pack_to_buffer", "pg_query.pb-c.c", 7458, "message->base.descriptor == &pg_query__alter_policy_stmt__descriptor");
}

void pg_query__alter_policy_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_policy_stmt__free_unpacked", "pg_query.pb-c.c", 7477, "message->base.descriptor == &pg_query__alter_policy_stmt__descriptor");
}

void pg_query__create_transform_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_transform_stmt__get_packed_size", "pg_query.pb-c.c", 7489, "message->base.descriptor == &pg_query__create_transform_stmt__descriptor");
}

void pg_query__create_transform_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_transform_stmt__pack", "pg_query.pb-c.c", 7496, "message->base.descriptor == &pg_query__create_transform_stmt__descriptor");
}

void pg_query__create_transform_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_transform_stmt__pack_to_buffer", "pg_query.pb-c.c", 7503, "message->base.descriptor == &pg_query__create_transform_stmt__descriptor");
}

void pg_query__create_transform_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_transform_stmt__free_unpacked", "pg_query.pb-c.c", 7522, "message->base.descriptor == &pg_query__create_transform_stmt__descriptor");
}

void pg_query__create_am_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_am_stmt__get_packed_size", "pg_query.pb-c.c", 7534, "message->base.descriptor == &pg_query__create_am_stmt__descriptor");
}

void pg_query__create_am_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_am_stmt__pack", "pg_query.pb-c.c", 7541, "message->base.descriptor == &pg_query__create_am_stmt__descriptor");
}

void pg_query__create_am_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_am_stmt__pack_to_buffer", "pg_query.pb-c.c", 7548, "message->base.descriptor == &pg_query__create_am_stmt__descriptor");
}

void pg_query__create_am_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_am_stmt__free_unpacked", "pg_query.pb-c.c", 7567, "message->base.descriptor == &pg_query__create_am_stmt__descriptor");
}

void pg_query__create_publication_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_publication_stmt__get_packed_size", "pg_query.pb-c.c", 7579, "message->base.descriptor == &pg_query__create_publication_stmt__descriptor");
}

void pg_query__create_publication_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_publication_stmt__pack", "pg_query.pb-c.c", 7586, "message->base.descriptor == &pg_query__create_publication_stmt__descriptor");
}

void pg_query__create_publication_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_publication_stmt__pack_to_buffer", "pg_query.pb-c.c", 7593, "message->base.descriptor == &pg_query__create_publication_stmt__descriptor");
}

void pg_query__create_publication_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_publication_stmt__free_unpacked", "pg_query.pb-c.c", 7612, "message->base.descriptor == &pg_query__create_publication_stmt__descriptor");
}

void pg_query__alter_publication_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_publication_stmt__get_packed_size", "pg_query.pb-c.c", 7624, "message->base.descriptor == &pg_query__alter_publication_stmt__descriptor");
}

void pg_query__alter_publication_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_publication_stmt__pack", "pg_query.pb-c.c", 7631, "message->base.descriptor == &pg_query__alter_publication_stmt__descriptor");
}

void pg_query__alter_publication_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_publication_stmt__pack_to_buffer", "pg_query.pb-c.c", 7638, "message->base.descriptor == &pg_query__alter_publication_stmt__descriptor");
}

void pg_query__alter_publication_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_publication_stmt__free_unpacked", "pg_query.pb-c.c", 7657, "message->base.descriptor == &pg_query__alter_publication_stmt__descriptor");
}

void pg_query__create_subscription_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_subscription_stmt__get_packed_size", "pg_query.pb-c.c", 7669, "message->base.descriptor == &pg_query__create_subscription_stmt__descriptor");
}

void pg_query__create_subscription_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_subscription_stmt__pack", "pg_query.pb-c.c", 7676, "message->base.descriptor == &pg_query__create_subscription_stmt__descriptor");
}

void pg_query__create_subscription_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_subscription_stmt__pack_to_buffer", "pg_query.pb-c.c", 7683, "message->base.descriptor == &pg_query__create_subscription_stmt__descriptor");
}

void pg_query__create_subscription_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_subscription_stmt__free_unpacked", "pg_query.pb-c.c", 7702, "message->base.descriptor == &pg_query__create_subscription_stmt__descriptor");
}

void pg_query__alter_subscription_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_subscription_stmt__get_packed_size", "pg_query.pb-c.c", 7714, "message->base.descriptor == &pg_query__alter_subscription_stmt__descriptor");
}

void pg_query__alter_subscription_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_subscription_stmt__pack", "pg_query.pb-c.c", 7721, "message->base.descriptor == &pg_query__alter_subscription_stmt__descriptor");
}

void pg_query__alter_subscription_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_subscription_stmt__pack_to_buffer", "pg_query.pb-c.c", 7728, "message->base.descriptor == &pg_query__alter_subscription_stmt__descriptor");
}

void pg_query__alter_subscription_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_subscription_stmt__free_unpacked", "pg_query.pb-c.c", 7747, "message->base.descriptor == &pg_query__alter_subscription_stmt__descriptor");
}

void pg_query__drop_subscription_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__drop_subscription_stmt__get_packed_size", "pg_query.pb-c.c", 7759, "message->base.descriptor == &pg_query__drop_subscription_stmt__descriptor");
}

void pg_query__drop_subscription_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__drop_subscription_stmt__pack", "pg_query.pb-c.c", 7766, "message->base.descriptor == &pg_query__drop_subscription_stmt__descriptor");
}

void pg_query__drop_subscription_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__drop_subscription_stmt__pack_to_buffer", "pg_query.pb-c.c", 7773, "message->base.descriptor == &pg_query__drop_subscription_stmt__descriptor");
}

void pg_query__drop_subscription_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__drop_subscription_stmt__free_unpacked", "pg_query.pb-c.c", 7792, "message->base.descriptor == &pg_query__drop_subscription_stmt__descriptor");
}

void pg_query__create_stats_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_stats_stmt__get_packed_size", "pg_query.pb-c.c", 7804, "message->base.descriptor == &pg_query__create_stats_stmt__descriptor");
}

void pg_query__create_stats_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__create_stats_stmt__pack", "pg_query.pb-c.c", 7811, "message->base.descriptor == &pg_query__create_stats_stmt__descriptor");
}

void pg_query__create_stats_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_stats_stmt__pack_to_buffer", "pg_query.pb-c.c", 7818, "message->base.descriptor == &pg_query__create_stats_stmt__descriptor");
}

void pg_query__create_stats_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_stats_stmt__free_unpacked", "pg_query.pb-c.c", 7837, "message->base.descriptor == &pg_query__create_stats_stmt__descriptor");
}

void pg_query__alter_collation_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_collation_stmt__get_packed_size", "pg_query.pb-c.c", 7849, "message->base.descriptor == &pg_query__alter_collation_stmt__descriptor");
}

void pg_query__alter_collation_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_collation_stmt__pack", "pg_query.pb-c.c", 7856, "message->base.descriptor == &pg_query__alter_collation_stmt__descriptor");
}

void pg_query__alter_collation_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_collation_stmt__pack_to_buffer", "pg_query.pb-c.c", 7863, "message->base.descriptor == &pg_query__alter_collation_stmt__descriptor");
}

void pg_query__alter_collation_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_collation_stmt__free_unpacked", "pg_query.pb-c.c", 7882, "message->base.descriptor == &pg_query__alter_collation_stmt__descriptor");
}

void pg_query__call_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__call_stmt__get_packed_size", "pg_query.pb-c.c", 7894, "message->base.descriptor == &pg_query__call_stmt__descriptor");
}

void pg_query__call_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__call_stmt__pack", "pg_query.pb-c.c", 7901, "message->base.descriptor == &pg_query__call_stmt__descriptor");
}

void pg_query__call_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__call_stmt__pack_to_buffer", "pg_query.pb-c.c", 7908, "message->base.descriptor == &pg_query__call_stmt__descriptor");
}

void pg_query__call_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__call_stmt__free_unpacked", "pg_query.pb-c.c", 7927, "message->base.descriptor == &pg_query__call_stmt__descriptor");
}

void pg_query__alter_stats_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_stats_stmt__get_packed_size", "pg_query.pb-c.c", 7939, "message->base.descriptor == &pg_query__alter_stats_stmt__descriptor");
}

void pg_query__alter_stats_stmt__pack_cold_1()
{
  __assert_rtn("pg_query__alter_stats_stmt__pack", "pg_query.pb-c.c", 7946, "message->base.descriptor == &pg_query__alter_stats_stmt__descriptor");
}

void pg_query__alter_stats_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_stats_stmt__pack_to_buffer", "pg_query.pb-c.c", 7953, "message->base.descriptor == &pg_query__alter_stats_stmt__descriptor");
}

void pg_query__alter_stats_stmt__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__alter_stats_stmt__free_unpacked", "pg_query.pb-c.c", 7972, "message->base.descriptor == &pg_query__alter_stats_stmt__descriptor");
}

void pg_query__a__expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__a__expr__get_packed_size", "pg_query.pb-c.c", 7984, "message->base.descriptor == &pg_query__a__expr__descriptor");
}

void pg_query__a__expr__pack_cold_1()
{
  __assert_rtn("pg_query__a__expr__pack", "pg_query.pb-c.c", 7991, "message->base.descriptor == &pg_query__a__expr__descriptor");
}

void pg_query__a__expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__a__expr__pack_to_buffer", "pg_query.pb-c.c", 7998, "message->base.descriptor == &pg_query__a__expr__descriptor");
}

void pg_query__a__expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__a__expr__free_unpacked", "pg_query.pb-c.c", 8017, "message->base.descriptor == &pg_query__a__expr__descriptor");
}

void pg_query__column_ref__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__column_ref__get_packed_size", "pg_query.pb-c.c", 8029, "message->base.descriptor == &pg_query__column_ref__descriptor");
}

void pg_query__column_ref__pack_cold_1()
{
  __assert_rtn("pg_query__column_ref__pack", "pg_query.pb-c.c", 8036, "message->base.descriptor == &pg_query__column_ref__descriptor");
}

void pg_query__column_ref__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__column_ref__pack_to_buffer", "pg_query.pb-c.c", 8043, "message->base.descriptor == &pg_query__column_ref__descriptor");
}

void pg_query__column_ref__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__column_ref__free_unpacked", "pg_query.pb-c.c", 8062, "message->base.descriptor == &pg_query__column_ref__descriptor");
}

void pg_query__param_ref__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__param_ref__get_packed_size", "pg_query.pb-c.c", 8074, "message->base.descriptor == &pg_query__param_ref__descriptor");
}

void pg_query__param_ref__pack_cold_1()
{
  __assert_rtn("pg_query__param_ref__pack", "pg_query.pb-c.c", 8081, "message->base.descriptor == &pg_query__param_ref__descriptor");
}

void pg_query__param_ref__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__param_ref__pack_to_buffer", "pg_query.pb-c.c", 8088, "message->base.descriptor == &pg_query__param_ref__descriptor");
}

void pg_query__param_ref__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__param_ref__free_unpacked", "pg_query.pb-c.c", 8107, "message->base.descriptor == &pg_query__param_ref__descriptor");
}

void pg_query__a__const__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__a__const__get_packed_size", "pg_query.pb-c.c", 8119, "message->base.descriptor == &pg_query__a__const__descriptor");
}

void pg_query__a__const__pack_cold_1()
{
  __assert_rtn("pg_query__a__const__pack", "pg_query.pb-c.c", 8126, "message->base.descriptor == &pg_query__a__const__descriptor");
}

void pg_query__a__const__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__a__const__pack_to_buffer", "pg_query.pb-c.c", 8133, "message->base.descriptor == &pg_query__a__const__descriptor");
}

void pg_query__a__const__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__a__const__free_unpacked", "pg_query.pb-c.c", 8152, "message->base.descriptor == &pg_query__a__const__descriptor");
}

void pg_query__func_call__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__func_call__get_packed_size", "pg_query.pb-c.c", 8164, "message->base.descriptor == &pg_query__func_call__descriptor");
}

void pg_query__func_call__pack_cold_1()
{
  __assert_rtn("pg_query__func_call__pack", "pg_query.pb-c.c", 8171, "message->base.descriptor == &pg_query__func_call__descriptor");
}

void pg_query__func_call__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__func_call__pack_to_buffer", "pg_query.pb-c.c", 8178, "message->base.descriptor == &pg_query__func_call__descriptor");
}

void pg_query__func_call__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__func_call__free_unpacked", "pg_query.pb-c.c", 8197, "message->base.descriptor == &pg_query__func_call__descriptor");
}

void pg_query__a__star__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__a__star__get_packed_size", "pg_query.pb-c.c", 8209, "message->base.descriptor == &pg_query__a__star__descriptor");
}

void pg_query__a__star__pack_cold_1()
{
  __assert_rtn("pg_query__a__star__pack", "pg_query.pb-c.c", 8216, "message->base.descriptor == &pg_query__a__star__descriptor");
}

void pg_query__a__star__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__a__star__pack_to_buffer", "pg_query.pb-c.c", 8223, "message->base.descriptor == &pg_query__a__star__descriptor");
}

void pg_query__a__star__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__a__star__free_unpacked", "pg_query.pb-c.c", 8242, "message->base.descriptor == &pg_query__a__star__descriptor");
}

void pg_query__a__indices__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__a__indices__get_packed_size", "pg_query.pb-c.c", 8254, "message->base.descriptor == &pg_query__a__indices__descriptor");
}

void pg_query__a__indices__pack_cold_1()
{
  __assert_rtn("pg_query__a__indices__pack", "pg_query.pb-c.c", 8261, "message->base.descriptor == &pg_query__a__indices__descriptor");
}

void pg_query__a__indices__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__a__indices__pack_to_buffer", "pg_query.pb-c.c", 8268, "message->base.descriptor == &pg_query__a__indices__descriptor");
}

void pg_query__a__indices__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__a__indices__free_unpacked", "pg_query.pb-c.c", 8287, "message->base.descriptor == &pg_query__a__indices__descriptor");
}

void pg_query__a__indirection__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__a__indirection__get_packed_size", "pg_query.pb-c.c", 8299, "message->base.descriptor == &pg_query__a__indirection__descriptor");
}

void pg_query__a__indirection__pack_cold_1()
{
  __assert_rtn("pg_query__a__indirection__pack", "pg_query.pb-c.c", 8306, "message->base.descriptor == &pg_query__a__indirection__descriptor");
}

void pg_query__a__indirection__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__a__indirection__pack_to_buffer", "pg_query.pb-c.c", 8313, "message->base.descriptor == &pg_query__a__indirection__descriptor");
}

void pg_query__a__indirection__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__a__indirection__free_unpacked", "pg_query.pb-c.c", 8332, "message->base.descriptor == &pg_query__a__indirection__descriptor");
}

void pg_query__a__array_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__a__array_expr__get_packed_size", "pg_query.pb-c.c", 8344, "message->base.descriptor == &pg_query__a__array_expr__descriptor");
}

void pg_query__a__array_expr__pack_cold_1()
{
  __assert_rtn("pg_query__a__array_expr__pack", "pg_query.pb-c.c", 8351, "message->base.descriptor == &pg_query__a__array_expr__descriptor");
}

void pg_query__a__array_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__a__array_expr__pack_to_buffer", "pg_query.pb-c.c", 8358, "message->base.descriptor == &pg_query__a__array_expr__descriptor");
}

void pg_query__a__array_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__a__array_expr__free_unpacked", "pg_query.pb-c.c", 8377, "message->base.descriptor == &pg_query__a__array_expr__descriptor");
}

void pg_query__res_target__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__res_target__get_packed_size", "pg_query.pb-c.c", 8389, "message->base.descriptor == &pg_query__res_target__descriptor");
}

void pg_query__res_target__pack_cold_1()
{
  __assert_rtn("pg_query__res_target__pack", "pg_query.pb-c.c", 8396, "message->base.descriptor == &pg_query__res_target__descriptor");
}

void pg_query__res_target__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__res_target__pack_to_buffer", "pg_query.pb-c.c", 8403, "message->base.descriptor == &pg_query__res_target__descriptor");
}

void pg_query__res_target__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__res_target__free_unpacked", "pg_query.pb-c.c", 8422, "message->base.descriptor == &pg_query__res_target__descriptor");
}

void pg_query__multi_assign_ref__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__multi_assign_ref__get_packed_size", "pg_query.pb-c.c", 8434, "message->base.descriptor == &pg_query__multi_assign_ref__descriptor");
}

void pg_query__multi_assign_ref__pack_cold_1()
{
  __assert_rtn("pg_query__multi_assign_ref__pack", "pg_query.pb-c.c", 8441, "message->base.descriptor == &pg_query__multi_assign_ref__descriptor");
}

void pg_query__multi_assign_ref__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__multi_assign_ref__pack_to_buffer", "pg_query.pb-c.c", 8448, "message->base.descriptor == &pg_query__multi_assign_ref__descriptor");
}

void pg_query__multi_assign_ref__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__multi_assign_ref__free_unpacked", "pg_query.pb-c.c", 8467, "message->base.descriptor == &pg_query__multi_assign_ref__descriptor");
}

void pg_query__type_cast__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__type_cast__get_packed_size", "pg_query.pb-c.c", 8479, "message->base.descriptor == &pg_query__type_cast__descriptor");
}

void pg_query__type_cast__pack_cold_1()
{
  __assert_rtn("pg_query__type_cast__pack", "pg_query.pb-c.c", 8486, "message->base.descriptor == &pg_query__type_cast__descriptor");
}

void pg_query__type_cast__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__type_cast__pack_to_buffer", "pg_query.pb-c.c", 8493, "message->base.descriptor == &pg_query__type_cast__descriptor");
}

void pg_query__type_cast__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__type_cast__free_unpacked", "pg_query.pb-c.c", 8512, "message->base.descriptor == &pg_query__type_cast__descriptor");
}

void pg_query__collate_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__collate_clause__get_packed_size", "pg_query.pb-c.c", 8524, "message->base.descriptor == &pg_query__collate_clause__descriptor");
}

void pg_query__collate_clause__pack_cold_1()
{
  __assert_rtn("pg_query__collate_clause__pack", "pg_query.pb-c.c", 8531, "message->base.descriptor == &pg_query__collate_clause__descriptor");
}

void pg_query__collate_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__collate_clause__pack_to_buffer", "pg_query.pb-c.c", 8538, "message->base.descriptor == &pg_query__collate_clause__descriptor");
}

void pg_query__collate_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__collate_clause__free_unpacked", "pg_query.pb-c.c", 8557, "message->base.descriptor == &pg_query__collate_clause__descriptor");
}

void pg_query__sort_by__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__sort_by__get_packed_size", "pg_query.pb-c.c", 8569, "message->base.descriptor == &pg_query__sort_by__descriptor");
}

void pg_query__sort_by__pack_cold_1()
{
  __assert_rtn("pg_query__sort_by__pack", "pg_query.pb-c.c", 8576, "message->base.descriptor == &pg_query__sort_by__descriptor");
}

void pg_query__sort_by__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__sort_by__pack_to_buffer", "pg_query.pb-c.c", 8583, "message->base.descriptor == &pg_query__sort_by__descriptor");
}

void pg_query__sort_by__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__sort_by__free_unpacked", "pg_query.pb-c.c", 8602, "message->base.descriptor == &pg_query__sort_by__descriptor");
}

void pg_query__window_def__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__window_def__get_packed_size", "pg_query.pb-c.c", 8614, "message->base.descriptor == &pg_query__window_def__descriptor");
}

void pg_query__window_def__pack_cold_1()
{
  __assert_rtn("pg_query__window_def__pack", "pg_query.pb-c.c", 8621, "message->base.descriptor == &pg_query__window_def__descriptor");
}

void pg_query__window_def__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__window_def__pack_to_buffer", "pg_query.pb-c.c", 8628, "message->base.descriptor == &pg_query__window_def__descriptor");
}

void pg_query__window_def__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__window_def__free_unpacked", "pg_query.pb-c.c", 8647, "message->base.descriptor == &pg_query__window_def__descriptor");
}

void pg_query__range_subselect__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_subselect__get_packed_size", "pg_query.pb-c.c", 8659, "message->base.descriptor == &pg_query__range_subselect__descriptor");
}

void pg_query__range_subselect__pack_cold_1()
{
  __assert_rtn("pg_query__range_subselect__pack", "pg_query.pb-c.c", 8666, "message->base.descriptor == &pg_query__range_subselect__descriptor");
}

void pg_query__range_subselect__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_subselect__pack_to_buffer", "pg_query.pb-c.c", 8673, "message->base.descriptor == &pg_query__range_subselect__descriptor");
}

void pg_query__range_subselect__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_subselect__free_unpacked", "pg_query.pb-c.c", 8692, "message->base.descriptor == &pg_query__range_subselect__descriptor");
}

void pg_query__range_function__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_function__get_packed_size", "pg_query.pb-c.c", 8704, "message->base.descriptor == &pg_query__range_function__descriptor");
}

void pg_query__range_function__pack_cold_1()
{
  __assert_rtn("pg_query__range_function__pack", "pg_query.pb-c.c", 8711, "message->base.descriptor == &pg_query__range_function__descriptor");
}

void pg_query__range_function__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_function__pack_to_buffer", "pg_query.pb-c.c", 8718, "message->base.descriptor == &pg_query__range_function__descriptor");
}

void pg_query__range_function__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_function__free_unpacked", "pg_query.pb-c.c", 8737, "message->base.descriptor == &pg_query__range_function__descriptor");
}

void pg_query__range_table_sample__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_table_sample__get_packed_size", "pg_query.pb-c.c", 8749, "message->base.descriptor == &pg_query__range_table_sample__descriptor");
}

void pg_query__range_table_sample__pack_cold_1()
{
  __assert_rtn("pg_query__range_table_sample__pack", "pg_query.pb-c.c", 8756, "message->base.descriptor == &pg_query__range_table_sample__descriptor");
}

void pg_query__range_table_sample__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_table_sample__pack_to_buffer", "pg_query.pb-c.c", 8763, "message->base.descriptor == &pg_query__range_table_sample__descriptor");
}

void pg_query__range_table_sample__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_table_sample__free_unpacked", "pg_query.pb-c.c", 8782, "message->base.descriptor == &pg_query__range_table_sample__descriptor");
}

void pg_query__range_table_func__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_table_func__get_packed_size", "pg_query.pb-c.c", 8794, "message->base.descriptor == &pg_query__range_table_func__descriptor");
}

void pg_query__range_table_func__pack_cold_1()
{
  __assert_rtn("pg_query__range_table_func__pack", "pg_query.pb-c.c", 8801, "message->base.descriptor == &pg_query__range_table_func__descriptor");
}

void pg_query__range_table_func__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_table_func__pack_to_buffer", "pg_query.pb-c.c", 8808, "message->base.descriptor == &pg_query__range_table_func__descriptor");
}

void pg_query__range_table_func__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_table_func__free_unpacked", "pg_query.pb-c.c", 8827, "message->base.descriptor == &pg_query__range_table_func__descriptor");
}

void pg_query__range_table_func_col__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_table_func_col__get_packed_size", "pg_query.pb-c.c", 8839, "message->base.descriptor == &pg_query__range_table_func_col__descriptor");
}

void pg_query__range_table_func_col__pack_cold_1()
{
  __assert_rtn("pg_query__range_table_func_col__pack", "pg_query.pb-c.c", 8846, "message->base.descriptor == &pg_query__range_table_func_col__descriptor");
}

void pg_query__range_table_func_col__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_table_func_col__pack_to_buffer", "pg_query.pb-c.c", 8853, "message->base.descriptor == &pg_query__range_table_func_col__descriptor");
}

void pg_query__range_table_func_col__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_table_func_col__free_unpacked", "pg_query.pb-c.c", 8872, "message->base.descriptor == &pg_query__range_table_func_col__descriptor");
}

void pg_query__type_name__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__type_name__get_packed_size", "pg_query.pb-c.c", 8884, "message->base.descriptor == &pg_query__type_name__descriptor");
}

void pg_query__type_name__pack_cold_1()
{
  __assert_rtn("pg_query__type_name__pack", "pg_query.pb-c.c", 8891, "message->base.descriptor == &pg_query__type_name__descriptor");
}

void pg_query__type_name__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__type_name__pack_to_buffer", "pg_query.pb-c.c", 8898, "message->base.descriptor == &pg_query__type_name__descriptor");
}

void pg_query__type_name__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__type_name__free_unpacked", "pg_query.pb-c.c", 8917, "message->base.descriptor == &pg_query__type_name__descriptor");
}

void pg_query__column_def__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__column_def__get_packed_size", "pg_query.pb-c.c", 8929, "message->base.descriptor == &pg_query__column_def__descriptor");
}

void pg_query__column_def__pack_cold_1()
{
  __assert_rtn("pg_query__column_def__pack", "pg_query.pb-c.c", 8936, "message->base.descriptor == &pg_query__column_def__descriptor");
}

void pg_query__column_def__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__column_def__pack_to_buffer", "pg_query.pb-c.c", 8943, "message->base.descriptor == &pg_query__column_def__descriptor");
}

void pg_query__column_def__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__column_def__free_unpacked", "pg_query.pb-c.c", 8962, "message->base.descriptor == &pg_query__column_def__descriptor");
}

void pg_query__index_elem__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__index_elem__get_packed_size", "pg_query.pb-c.c", 8974, "message->base.descriptor == &pg_query__index_elem__descriptor");
}

void pg_query__index_elem__pack_cold_1()
{
  __assert_rtn("pg_query__index_elem__pack", "pg_query.pb-c.c", 8981, "message->base.descriptor == &pg_query__index_elem__descriptor");
}

void pg_query__index_elem__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__index_elem__pack_to_buffer", "pg_query.pb-c.c", 8988, "message->base.descriptor == &pg_query__index_elem__descriptor");
}

void pg_query__index_elem__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__index_elem__free_unpacked", "pg_query.pb-c.c", 9007, "message->base.descriptor == &pg_query__index_elem__descriptor");
}

void pg_query__constraint__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__constraint__get_packed_size", "pg_query.pb-c.c", 9019, "message->base.descriptor == &pg_query__constraint__descriptor");
}

void pg_query__constraint__pack_cold_1()
{
  __assert_rtn("pg_query__constraint__pack", "pg_query.pb-c.c", 9026, "message->base.descriptor == &pg_query__constraint__descriptor");
}

void pg_query__constraint__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__constraint__pack_to_buffer", "pg_query.pb-c.c", 9033, "message->base.descriptor == &pg_query__constraint__descriptor");
}

void pg_query__constraint__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__constraint__free_unpacked", "pg_query.pb-c.c", 9052, "message->base.descriptor == &pg_query__constraint__descriptor");
}

void pg_query__def_elem__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__def_elem__get_packed_size", "pg_query.pb-c.c", 9064, "message->base.descriptor == &pg_query__def_elem__descriptor");
}

void pg_query__def_elem__pack_cold_1()
{
  __assert_rtn("pg_query__def_elem__pack", "pg_query.pb-c.c", 9071, "message->base.descriptor == &pg_query__def_elem__descriptor");
}

void pg_query__def_elem__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__def_elem__pack_to_buffer", "pg_query.pb-c.c", 9078, "message->base.descriptor == &pg_query__def_elem__descriptor");
}

void pg_query__def_elem__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__def_elem__free_unpacked", "pg_query.pb-c.c", 9097, "message->base.descriptor == &pg_query__def_elem__descriptor");
}

void pg_query__range_tbl_entry__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_tbl_entry__get_packed_size", "pg_query.pb-c.c", 9109, "message->base.descriptor == &pg_query__range_tbl_entry__descriptor");
}

void pg_query__range_tbl_entry__pack_cold_1()
{
  __assert_rtn("pg_query__range_tbl_entry__pack", "pg_query.pb-c.c", 9116, "message->base.descriptor == &pg_query__range_tbl_entry__descriptor");
}

void pg_query__range_tbl_entry__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_tbl_entry__pack_to_buffer", "pg_query.pb-c.c", 9123, "message->base.descriptor == &pg_query__range_tbl_entry__descriptor");
}

void pg_query__range_tbl_entry__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_tbl_entry__free_unpacked", "pg_query.pb-c.c", 9142, "message->base.descriptor == &pg_query__range_tbl_entry__descriptor");
}

void pg_query__range_tbl_function__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__range_tbl_function__get_packed_size", "pg_query.pb-c.c", 9154, "message->base.descriptor == &pg_query__range_tbl_function__descriptor");
}

void pg_query__range_tbl_function__pack_cold_1()
{
  __assert_rtn("pg_query__range_tbl_function__pack", "pg_query.pb-c.c", 9161, "message->base.descriptor == &pg_query__range_tbl_function__descriptor");
}

void pg_query__range_tbl_function__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__range_tbl_function__pack_to_buffer", "pg_query.pb-c.c", 9168, "message->base.descriptor == &pg_query__range_tbl_function__descriptor");
}

void pg_query__range_tbl_function__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__range_tbl_function__free_unpacked", "pg_query.pb-c.c", 9187, "message->base.descriptor == &pg_query__range_tbl_function__descriptor");
}

void pg_query__table_sample_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__table_sample_clause__get_packed_size", "pg_query.pb-c.c", 9199, "message->base.descriptor == &pg_query__table_sample_clause__descriptor");
}

void pg_query__table_sample_clause__pack_cold_1()
{
  __assert_rtn("pg_query__table_sample_clause__pack", "pg_query.pb-c.c", 9206, "message->base.descriptor == &pg_query__table_sample_clause__descriptor");
}

void pg_query__table_sample_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__table_sample_clause__pack_to_buffer", "pg_query.pb-c.c", 9213, "message->base.descriptor == &pg_query__table_sample_clause__descriptor");
}

void pg_query__table_sample_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__table_sample_clause__free_unpacked", "pg_query.pb-c.c", 9232, "message->base.descriptor == &pg_query__table_sample_clause__descriptor");
}

void pg_query__with_check_option__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__with_check_option__get_packed_size", "pg_query.pb-c.c", 9244, "message->base.descriptor == &pg_query__with_check_option__descriptor");
}

void pg_query__with_check_option__pack_cold_1()
{
  __assert_rtn("pg_query__with_check_option__pack", "pg_query.pb-c.c", 9251, "message->base.descriptor == &pg_query__with_check_option__descriptor");
}

void pg_query__with_check_option__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__with_check_option__pack_to_buffer", "pg_query.pb-c.c", 9258, "message->base.descriptor == &pg_query__with_check_option__descriptor");
}

void pg_query__with_check_option__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__with_check_option__free_unpacked", "pg_query.pb-c.c", 9277, "message->base.descriptor == &pg_query__with_check_option__descriptor");
}

void pg_query__sort_group_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__sort_group_clause__get_packed_size", "pg_query.pb-c.c", 9289, "message->base.descriptor == &pg_query__sort_group_clause__descriptor");
}

void pg_query__sort_group_clause__pack_cold_1()
{
  __assert_rtn("pg_query__sort_group_clause__pack", "pg_query.pb-c.c", 9296, "message->base.descriptor == &pg_query__sort_group_clause__descriptor");
}

void pg_query__sort_group_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__sort_group_clause__pack_to_buffer", "pg_query.pb-c.c", 9303, "message->base.descriptor == &pg_query__sort_group_clause__descriptor");
}

void pg_query__sort_group_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__sort_group_clause__free_unpacked", "pg_query.pb-c.c", 9322, "message->base.descriptor == &pg_query__sort_group_clause__descriptor");
}

void pg_query__grouping_set__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__grouping_set__get_packed_size", "pg_query.pb-c.c", 9334, "message->base.descriptor == &pg_query__grouping_set__descriptor");
}

void pg_query__grouping_set__pack_cold_1()
{
  __assert_rtn("pg_query__grouping_set__pack", "pg_query.pb-c.c", 9341, "message->base.descriptor == &pg_query__grouping_set__descriptor");
}

void pg_query__grouping_set__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__grouping_set__pack_to_buffer", "pg_query.pb-c.c", 9348, "message->base.descriptor == &pg_query__grouping_set__descriptor");
}

void pg_query__grouping_set__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__grouping_set__free_unpacked", "pg_query.pb-c.c", 9367, "message->base.descriptor == &pg_query__grouping_set__descriptor");
}

void pg_query__window_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__window_clause__get_packed_size", "pg_query.pb-c.c", 9379, "message->base.descriptor == &pg_query__window_clause__descriptor");
}

void pg_query__window_clause__pack_cold_1()
{
  __assert_rtn("pg_query__window_clause__pack", "pg_query.pb-c.c", 9386, "message->base.descriptor == &pg_query__window_clause__descriptor");
}

void pg_query__window_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__window_clause__pack_to_buffer", "pg_query.pb-c.c", 9393, "message->base.descriptor == &pg_query__window_clause__descriptor");
}

void pg_query__window_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__window_clause__free_unpacked", "pg_query.pb-c.c", 9412, "message->base.descriptor == &pg_query__window_clause__descriptor");
}

void pg_query__object_with_args__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__object_with_args__get_packed_size", "pg_query.pb-c.c", 9424, "message->base.descriptor == &pg_query__object_with_args__descriptor");
}

void pg_query__object_with_args__pack_cold_1()
{
  __assert_rtn("pg_query__object_with_args__pack", "pg_query.pb-c.c", 9431, "message->base.descriptor == &pg_query__object_with_args__descriptor");
}

void pg_query__object_with_args__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__object_with_args__pack_to_buffer", "pg_query.pb-c.c", 9438, "message->base.descriptor == &pg_query__object_with_args__descriptor");
}

void pg_query__object_with_args__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__object_with_args__free_unpacked", "pg_query.pb-c.c", 9457, "message->base.descriptor == &pg_query__object_with_args__descriptor");
}

void pg_query__access_priv__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__access_priv__get_packed_size", "pg_query.pb-c.c", 9469, "message->base.descriptor == &pg_query__access_priv__descriptor");
}

void pg_query__access_priv__pack_cold_1()
{
  __assert_rtn("pg_query__access_priv__pack", "pg_query.pb-c.c", 9476, "message->base.descriptor == &pg_query__access_priv__descriptor");
}

void pg_query__access_priv__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__access_priv__pack_to_buffer", "pg_query.pb-c.c", 9483, "message->base.descriptor == &pg_query__access_priv__descriptor");
}

void pg_query__access_priv__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__access_priv__free_unpacked", "pg_query.pb-c.c", 9502, "message->base.descriptor == &pg_query__access_priv__descriptor");
}

void pg_query__create_op_class_item__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__create_op_class_item__get_packed_size", "pg_query.pb-c.c", 9514, "message->base.descriptor == &pg_query__create_op_class_item__descriptor");
}

void pg_query__create_op_class_item__pack_cold_1()
{
  __assert_rtn("pg_query__create_op_class_item__pack", "pg_query.pb-c.c", 9521, "message->base.descriptor == &pg_query__create_op_class_item__descriptor");
}

void pg_query__create_op_class_item__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_op_class_item__pack_to_buffer", "pg_query.pb-c.c", 9528, "message->base.descriptor == &pg_query__create_op_class_item__descriptor");
}

void pg_query__create_op_class_item__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__create_op_class_item__free_unpacked", "pg_query.pb-c.c", 9547, "message->base.descriptor == &pg_query__create_op_class_item__descriptor");
}

void pg_query__table_like_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__table_like_clause__get_packed_size", "pg_query.pb-c.c", 9559, "message->base.descriptor == &pg_query__table_like_clause__descriptor");
}

void pg_query__table_like_clause__pack_cold_1()
{
  __assert_rtn("pg_query__table_like_clause__pack", "pg_query.pb-c.c", 9566, "message->base.descriptor == &pg_query__table_like_clause__descriptor");
}

void pg_query__table_like_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__table_like_clause__pack_to_buffer", "pg_query.pb-c.c", 9573, "message->base.descriptor == &pg_query__table_like_clause__descriptor");
}

void pg_query__table_like_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__table_like_clause__free_unpacked", "pg_query.pb-c.c", 9592, "message->base.descriptor == &pg_query__table_like_clause__descriptor");
}

void pg_query__function_parameter__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__function_parameter__get_packed_size", "pg_query.pb-c.c", 9604, "message->base.descriptor == &pg_query__function_parameter__descriptor");
}

void pg_query__function_parameter__pack_cold_1()
{
  __assert_rtn("pg_query__function_parameter__pack", "pg_query.pb-c.c", 9611, "message->base.descriptor == &pg_query__function_parameter__descriptor");
}

void pg_query__function_parameter__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__function_parameter__pack_to_buffer", "pg_query.pb-c.c", 9618, "message->base.descriptor == &pg_query__function_parameter__descriptor");
}

void pg_query__function_parameter__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__function_parameter__free_unpacked", "pg_query.pb-c.c", 9637, "message->base.descriptor == &pg_query__function_parameter__descriptor");
}

void pg_query__locking_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__locking_clause__get_packed_size", "pg_query.pb-c.c", 9649, "message->base.descriptor == &pg_query__locking_clause__descriptor");
}

void pg_query__locking_clause__pack_cold_1()
{
  __assert_rtn("pg_query__locking_clause__pack", "pg_query.pb-c.c", 9656, "message->base.descriptor == &pg_query__locking_clause__descriptor");
}

void pg_query__locking_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__locking_clause__pack_to_buffer", "pg_query.pb-c.c", 9663, "message->base.descriptor == &pg_query__locking_clause__descriptor");
}

void pg_query__locking_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__locking_clause__free_unpacked", "pg_query.pb-c.c", 9682, "message->base.descriptor == &pg_query__locking_clause__descriptor");
}

void pg_query__row_mark_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__row_mark_clause__get_packed_size", "pg_query.pb-c.c", 9694, "message->base.descriptor == &pg_query__row_mark_clause__descriptor");
}

void pg_query__row_mark_clause__pack_cold_1()
{
  __assert_rtn("pg_query__row_mark_clause__pack", "pg_query.pb-c.c", 9701, "message->base.descriptor == &pg_query__row_mark_clause__descriptor");
}

void pg_query__row_mark_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__row_mark_clause__pack_to_buffer", "pg_query.pb-c.c", 9708, "message->base.descriptor == &pg_query__row_mark_clause__descriptor");
}

void pg_query__row_mark_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__row_mark_clause__free_unpacked", "pg_query.pb-c.c", 9727, "message->base.descriptor == &pg_query__row_mark_clause__descriptor");
}

void pg_query__xml_serialize__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__xml_serialize__get_packed_size", "pg_query.pb-c.c", 9739, "message->base.descriptor == &pg_query__xml_serialize__descriptor");
}

void pg_query__xml_serialize__pack_cold_1()
{
  __assert_rtn("pg_query__xml_serialize__pack", "pg_query.pb-c.c", 9746, "message->base.descriptor == &pg_query__xml_serialize__descriptor");
}

void pg_query__xml_serialize__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__xml_serialize__pack_to_buffer", "pg_query.pb-c.c", 9753, "message->base.descriptor == &pg_query__xml_serialize__descriptor");
}

void pg_query__xml_serialize__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__xml_serialize__free_unpacked", "pg_query.pb-c.c", 9772, "message->base.descriptor == &pg_query__xml_serialize__descriptor");
}

void pg_query__with_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__with_clause__get_packed_size", "pg_query.pb-c.c", 9784, "message->base.descriptor == &pg_query__with_clause__descriptor");
}

void pg_query__with_clause__pack_cold_1()
{
  __assert_rtn("pg_query__with_clause__pack", "pg_query.pb-c.c", 9791, "message->base.descriptor == &pg_query__with_clause__descriptor");
}

void pg_query__with_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__with_clause__pack_to_buffer", "pg_query.pb-c.c", 9798, "message->base.descriptor == &pg_query__with_clause__descriptor");
}

void pg_query__with_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__with_clause__free_unpacked", "pg_query.pb-c.c", 9817, "message->base.descriptor == &pg_query__with_clause__descriptor");
}

void pg_query__infer_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__infer_clause__get_packed_size", "pg_query.pb-c.c", 9829, "message->base.descriptor == &pg_query__infer_clause__descriptor");
}

void pg_query__infer_clause__pack_cold_1()
{
  __assert_rtn("pg_query__infer_clause__pack", "pg_query.pb-c.c", 9836, "message->base.descriptor == &pg_query__infer_clause__descriptor");
}

void pg_query__infer_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__infer_clause__pack_to_buffer", "pg_query.pb-c.c", 9843, "message->base.descriptor == &pg_query__infer_clause__descriptor");
}

void pg_query__infer_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__infer_clause__free_unpacked", "pg_query.pb-c.c", 9862, "message->base.descriptor == &pg_query__infer_clause__descriptor");
}

void pg_query__on_conflict_clause__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__on_conflict_clause__get_packed_size", "pg_query.pb-c.c", 9874, "message->base.descriptor == &pg_query__on_conflict_clause__descriptor");
}

void pg_query__on_conflict_clause__pack_cold_1()
{
  __assert_rtn("pg_query__on_conflict_clause__pack", "pg_query.pb-c.c", 9881, "message->base.descriptor == &pg_query__on_conflict_clause__descriptor");
}

void pg_query__on_conflict_clause__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__on_conflict_clause__pack_to_buffer", "pg_query.pb-c.c", 9888, "message->base.descriptor == &pg_query__on_conflict_clause__descriptor");
}

void pg_query__on_conflict_clause__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__on_conflict_clause__free_unpacked", "pg_query.pb-c.c", 9907, "message->base.descriptor == &pg_query__on_conflict_clause__descriptor");
}

void pg_query__common_table_expr__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__common_table_expr__get_packed_size", "pg_query.pb-c.c", 9919, "message->base.descriptor == &pg_query__common_table_expr__descriptor");
}

void pg_query__common_table_expr__pack_cold_1()
{
  __assert_rtn("pg_query__common_table_expr__pack", "pg_query.pb-c.c", 9926, "message->base.descriptor == &pg_query__common_table_expr__descriptor");
}

void pg_query__common_table_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__common_table_expr__pack_to_buffer", "pg_query.pb-c.c", 9933, "message->base.descriptor == &pg_query__common_table_expr__descriptor");
}

void pg_query__common_table_expr__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__common_table_expr__free_unpacked", "pg_query.pb-c.c", 9952, "message->base.descriptor == &pg_query__common_table_expr__descriptor");
}

void pg_query__role_spec__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__role_spec__get_packed_size", "pg_query.pb-c.c", 9964, "message->base.descriptor == &pg_query__role_spec__descriptor");
}

void pg_query__role_spec__pack_cold_1()
{
  __assert_rtn("pg_query__role_spec__pack", "pg_query.pb-c.c", 9971, "message->base.descriptor == &pg_query__role_spec__descriptor");
}

void pg_query__role_spec__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__role_spec__pack_to_buffer", "pg_query.pb-c.c", 9978, "message->base.descriptor == &pg_query__role_spec__descriptor");
}

void pg_query__role_spec__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__role_spec__free_unpacked", "pg_query.pb-c.c", 9997, "message->base.descriptor == &pg_query__role_spec__descriptor");
}

void pg_query__trigger_transition__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__trigger_transition__get_packed_size", "pg_query.pb-c.c", 10009, "message->base.descriptor == &pg_query__trigger_transition__descriptor");
}

void pg_query__trigger_transition__pack_cold_1()
{
  __assert_rtn("pg_query__trigger_transition__pack", "pg_query.pb-c.c", 10016, "message->base.descriptor == &pg_query__trigger_transition__descriptor");
}

void pg_query__trigger_transition__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__trigger_transition__pack_to_buffer", "pg_query.pb-c.c", 10023, "message->base.descriptor == &pg_query__trigger_transition__descriptor");
}

void pg_query__trigger_transition__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__trigger_transition__free_unpacked", "pg_query.pb-c.c", 10042, "message->base.descriptor == &pg_query__trigger_transition__descriptor");
}

void pg_query__partition_elem__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__partition_elem__get_packed_size", "pg_query.pb-c.c", 10054, "message->base.descriptor == &pg_query__partition_elem__descriptor");
}

void pg_query__partition_elem__pack_cold_1()
{
  __assert_rtn("pg_query__partition_elem__pack", "pg_query.pb-c.c", 10061, "message->base.descriptor == &pg_query__partition_elem__descriptor");
}

void pg_query__partition_elem__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__partition_elem__pack_to_buffer", "pg_query.pb-c.c", 10068, "message->base.descriptor == &pg_query__partition_elem__descriptor");
}

void pg_query__partition_spec__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__partition_spec__get_packed_size", "pg_query.pb-c.c", 10099, "message->base.descriptor == &pg_query__partition_spec__descriptor");
}

void pg_query__partition_spec__pack_cold_1()
{
  __assert_rtn("pg_query__partition_spec__pack", "pg_query.pb-c.c", 10106, "message->base.descriptor == &pg_query__partition_spec__descriptor");
}

void pg_query__partition_spec__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__partition_spec__pack_to_buffer", "pg_query.pb-c.c", 10113, "message->base.descriptor == &pg_query__partition_spec__descriptor");
}

void pg_query__partition_spec__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__partition_spec__free_unpacked", "pg_query.pb-c.c", 10132, "message->base.descriptor == &pg_query__partition_spec__descriptor");
}

void pg_query__partition_bound_spec__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__partition_bound_spec__get_packed_size", "pg_query.pb-c.c", 10144, "message->base.descriptor == &pg_query__partition_bound_spec__descriptor");
}

void pg_query__partition_bound_spec__pack_cold_1()
{
  __assert_rtn("pg_query__partition_bound_spec__pack", "pg_query.pb-c.c", 10151, "message->base.descriptor == &pg_query__partition_bound_spec__descriptor");
}

void pg_query__partition_bound_spec__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__partition_bound_spec__pack_to_buffer", "pg_query.pb-c.c", 10158, "message->base.descriptor == &pg_query__partition_bound_spec__descriptor");
}

void pg_query__partition_bound_spec__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__partition_bound_spec__free_unpacked", "pg_query.pb-c.c", 10177, "message->base.descriptor == &pg_query__partition_bound_spec__descriptor");
}

void pg_query__partition_range_datum__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__partition_range_datum__get_packed_size", "pg_query.pb-c.c", 10189, "message->base.descriptor == &pg_query__partition_range_datum__descriptor");
}

void pg_query__partition_range_datum__pack_cold_1()
{
  __assert_rtn("pg_query__partition_range_datum__pack", "pg_query.pb-c.c", 10196, "message->base.descriptor == &pg_query__partition_range_datum__descriptor");
}

void pg_query__partition_range_datum__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__partition_range_datum__pack_to_buffer", "pg_query.pb-c.c", 10203, "message->base.descriptor == &pg_query__partition_range_datum__descriptor");
}

void pg_query__partition_range_datum__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__partition_range_datum__free_unpacked", "pg_query.pb-c.c", 10222, "message->base.descriptor == &pg_query__partition_range_datum__descriptor");
}

void pg_query__partition_cmd__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__partition_cmd__get_packed_size", "pg_query.pb-c.c", 10234, "message->base.descriptor == &pg_query__partition_cmd__descriptor");
}

void pg_query__partition_cmd__pack_cold_1()
{
  __assert_rtn("pg_query__partition_cmd__pack", "pg_query.pb-c.c", 10241, "message->base.descriptor == &pg_query__partition_cmd__descriptor");
}

void pg_query__partition_cmd__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__partition_cmd__pack_to_buffer", "pg_query.pb-c.c", 10248, "message->base.descriptor == &pg_query__partition_cmd__descriptor");
}

void pg_query__partition_cmd__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__partition_cmd__free_unpacked", "pg_query.pb-c.c", 10267, "message->base.descriptor == &pg_query__partition_cmd__descriptor");
}

void pg_query__vacuum_relation__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__vacuum_relation__get_packed_size", "pg_query.pb-c.c", 10279, "message->base.descriptor == &pg_query__vacuum_relation__descriptor");
}

void pg_query__vacuum_relation__pack_cold_1()
{
  __assert_rtn("pg_query__vacuum_relation__pack", "pg_query.pb-c.c", 10286, "message->base.descriptor == &pg_query__vacuum_relation__descriptor");
}

void pg_query__vacuum_relation__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__vacuum_relation__pack_to_buffer", "pg_query.pb-c.c", 10293, "message->base.descriptor == &pg_query__vacuum_relation__descriptor");
}

void pg_query__vacuum_relation__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__vacuum_relation__free_unpacked", "pg_query.pb-c.c", 10312, "message->base.descriptor == &pg_query__vacuum_relation__descriptor");
}

void pg_query__inline_code_block__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__inline_code_block__get_packed_size", "pg_query.pb-c.c", 10324, "message->base.descriptor == &pg_query__inline_code_block__descriptor");
}

void pg_query__inline_code_block__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__inline_code_block__pack_to_buffer", "pg_query.pb-c.c", 10338, "message->base.descriptor == &pg_query__inline_code_block__descriptor");
}

void pg_query__inline_code_block__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__inline_code_block__free_unpacked", "pg_query.pb-c.c", 10357, "message->base.descriptor == &pg_query__inline_code_block__descriptor");
}

void pg_query__call_context__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__call_context__get_packed_size", "pg_query.pb-c.c", 10369, "message->base.descriptor == &pg_query__call_context__descriptor");
}

void pg_query__call_context__pack_cold_1()
{
  __assert_rtn("pg_query__call_context__pack", "pg_query.pb-c.c", 10376, "message->base.descriptor == &pg_query__call_context__descriptor");
}

void pg_query__call_context__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__call_context__pack_to_buffer", "pg_query.pb-c.c", 10383, "message->base.descriptor == &pg_query__call_context__descriptor");
}

void pg_query__call_context__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__call_context__free_unpacked", "pg_query.pb-c.c", 10402, "message->base.descriptor == &pg_query__call_context__descriptor");
}

void pg_query__scan_token__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__scan_token__get_packed_size", "pg_query.pb-c.c", 10414, "message->base.descriptor == &pg_query__scan_token__descriptor");
}

void pg_query__scan_token__pack_cold_1()
{
  __assert_rtn("pg_query__scan_token__pack", "pg_query.pb-c.c", 10421, "message->base.descriptor == &pg_query__scan_token__descriptor");
}

void pg_query__scan_token__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__scan_token__pack_to_buffer", "pg_query.pb-c.c", 10428, "message->base.descriptor == &pg_query__scan_token__descriptor");
}

void pg_query__scan_token__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__scan_token__free_unpacked", "pg_query.pb-c.c", 10447, "message->base.descriptor == &pg_query__scan_token__descriptor");
}

void biome_each_bestindex_cold_1()
{
  __assert_rtn("biome_each_bestindex", "BMSQLProtoUDFs.m", 188, "pIdxInfo->aConstraint[i].op == SQLITE_INDEX_CONSTRAINT_EQ");
}

void biome_each_filter_cold_1()
{
  __assert_rtn("biome_each_filter", "BMSQLProtoUDFs.m", 212, "argc == 3");
}

void biome_each_column_cold_1()
{
}

void CoreDuetLibrary_cold_1(void *a1)
{
  unsigned int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *CoreDuetLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"BMKnowledgeContextMapping.m", 16, @"%s", *a1);

  __break(1u);
}

void BMUserFocusComputedModeUpdateReasonFromReason_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t v0 = objc_msgSend(NSNumber, "numberWithInt:");
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_0_8(&dword_18E67D000, v1, v2, "BMUserFocusComputedModeEvent: unable to convert BMPBModeUpdateReason enum value: %@", v3, v4, v5, v6, v7);
}

void BMUserFocusComputedModeUpdateSourceFromSource_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t v0 = objc_msgSend(NSNumber, "numberWithInt:");
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_0_8(&dword_18E67D000, v1, v2, "BMUserFocusComputedModeEvent: unable to convert BMPBModeUpdateSource enum value: %@", v3, v4, v5, v6, v7);
}

void activityTypeWithState_cold_1(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithInt:a1];
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_0_8(&dword_18E67D000, v2, v3, "BMFindMyLocationChangeEvent: unable to convert BMPBActivityState enum value: %@", v4, v5, v6, v7, v8);
}

void typeWithBMPBIntentType_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t v0 = objc_msgSend(NSNumber, "numberWithInt:");
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_0_8(&dword_18E67D000, v1, v2, "BMIntentEvent: unable to convert BMPBIntentType enum value: %@", v3, v4, v5, v6, v7);
}

void interactionDirectionWithPB_cold_1()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t v0 = objc_msgSend(NSNumber, "numberWithInt:");
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_0_8(&dword_18E67D000, v1, v2, "BMIntentEvent: unable to convert BMPBInteractionDirection enum value: %@", v3, v4, v5, v6, v7);
}

void BMSQLDataTypeToString_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [NSNumber numberWithInteger:a1];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl(&dword_18E67D000, a2, OS_LOG_TYPE_ERROR, "BMSQLTableDataTypeString unknown column datatype %@", (uint8_t *)&v4, 0xCu);
}

void CoreDuetLibrary_cold_1_0(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *CoreDuetLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"BMAppStreams.m", 31, @"%s", *a1);

  __break(1u);
}

void CoreDuetContextLibrary_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *CoreDuetContextLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"BMAppStreams.m", 39, @"%s", *a1);

  __break(1u);
}

void CoreDuetLibrary_cold_1_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *CoreDuetLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_BMDKEventCodec_DKPREvent.m", 19, @"%s", *a1);

  __break(1u);
}

void getBMAppInFocusIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMAppInFocusIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 18, @"%s", dlerror());

  __break(1u);
}

void getBMAppIntentIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMAppIntentIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 20, @"%s", dlerror());

  __break(1u);
}

void getBMSiriRemembersInteractionHistoryIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriRemembersInteractionHistoryIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 22, @"%s", dlerror());

  __break(1u);
}

void getBMSiriRemembersMessageHistoryIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriRemembersMessageHistoryIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 24, @"%s", dlerror());

  __break(1u);
}

void getBMSiriRemembersCallHistoryIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriRemembersCallHistoryIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 26, @"%s", dlerror());

  __break(1u);
}

void getBMSiriRemembersAudioHistoryIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriRemembersAudioHistoryIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 38, @"%s", dlerror());

  __break(1u);
}

void getBMFrontBoardDisplayElementIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMFrontBoardDisplayElementIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 30, @"%s", dlerror());

  __break(1u);
}

void getBMScreenTimeAppUsageIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMScreenTimeAppUsageIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 40, @"%s", dlerror());

  __break(1u);
}

void getBMIntelligenceEngineInteractionDonationIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMIntelligenceEngineInteractionDonationIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 48, @"%s", dlerror());

  __break(1u);
}

void getBMAppLocationActivityIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMAppLocationActivityIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 63, @"%s", dlerror());

  __break(1u);
}

void getBMMediaNowPlayingIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMMediaNowPlayingIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 65, @"%s", dlerror());

  __break(1u);
}

void getBMSiriRemembersAssistantSuggestionsIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriRemembersAssistantSuggestionsIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 28, @"%s", dlerror());

  __break(1u);
}

void getBMSiriAppSelectionMusicIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriAppSelectionMusicIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 34, @"%s", dlerror());

  __break(1u);
}

void getBMSiriExecutionIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriExecutionIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 51, @"%s", dlerror());

  __break(1u);
}

void getBMSiriFeedbackLearningUserInteractionsIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriFeedbackLearningUserInteractionsIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 53, @"%s", dlerror());

  __break(1u);
}

void getBMSiriPostSiriEngagementIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriPostSiriEngagementIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 55, @"%s", dlerror());

  __break(1u);
}

void getBMSiriPrivateLearningSELFEventIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriPrivateLearningSELFEventIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 56, @"%s", dlerror());

  __break(1u);
}

void getBMSiriRemembersIntentIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriRemembersIntentIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 57, @"%s", dlerror());

  __break(1u);
}

void getBMSiriSELFProcessedEventIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriSELFProcessedEventIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 58, @"%s", dlerror());

  __break(1u);
}

void getBMDictationUserEditIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMDictationUserEditIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 59, @"%s", dlerror());

  __break(1u);
}

void getBMProactiveHarvestingSiriQueryIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMProactiveHarvestingSiriQueryIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 60, @"%s", dlerror());

  __break(1u);
}

void getBMSiriDictationIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriDictationIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 61, @"%s", dlerror());

  __break(1u);
}

void getBMSiriServiceIdentifier_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"NSString *getBMSiriServiceIdentifier(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 62, @"%s", dlerror());

  __break(1u);
}

void BiomeLibraryLibrary_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *BiomeLibraryLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"BMLibraryStreamsPruner.m", 16, @"%s", *a1);

  __break(1u);
}

void __getBMAppInFocusClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMAppInFocusClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 19, @"Unable to find class %s", "BMAppInFocus");

  __break(1u);
}

void __getBMAppIntentClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMAppIntentClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 21, @"Unable to find class %s", "BMAppIntent");

  __break(1u);
}

void __getBMSiriInteractionHistoryClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMSiriInteractionHistoryClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 23, @"Unable to find class %s", "BMSiriInteractionHistory");

  __break(1u);
}

void __getBMSiriMessageHistoryClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMSiriMessageHistoryClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 25, @"Unable to find class %s", "BMSiriMessageHistory");

  __break(1u);
}

void __getBMSiriCallHistoryClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMSiriCallHistoryClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 27, @"Unable to find class %s", "BMSiriCallHistory");

  __break(1u);
}

void __getBMSiriAssistantSuggestionsClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMSiriAssistantSuggestionsClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 29, @"Unable to find class %s", "BMSiriAssistantSuggestions");

  __break(1u);
}

void __getBMSiriAudioHistoryClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMSiriAudioHistoryClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 39, @"Unable to find class %s", "BMSiriAudioHistory");

  __break(1u);
}

void __getBMFrontBoardDisplayElementClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMFrontBoardDisplayElementClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 31, @"Unable to find class %s", "BMFrontBoardDisplayElement");

  __break(1u);
}

void __getBMScreenTimeAppUsageClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMScreenTimeAppUsageClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 41, @"Unable to find class %s", "BMScreenTimeAppUsage");

  __break(1u);
}

void __getBMIntelligenceEngineInteractionClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMIntelligenceEngineInteractionClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 49, @"Unable to find class %s", "BMIntelligenceEngineInteraction");

  __break(1u);
}

void __getBMAppLocationActivityClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMAppLocationActivityClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 64, @"Unable to find class %s", "BMAppLocationActivity");

  __break(1u);
}

void __getBMMediaNowPlayingClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMMediaNowPlayingClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryStreamsPruner.m", 66, @"Unable to find class %s", "BMMediaNowPlaying");

  __break(1u);
}

void CoreDuetLibrary_cold_1_2(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *CoreDuetLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"BMTipsStreams.m", 24, @"%s", *a1);

  __break(1u);
}

void __getBMDiscoverabilitySignalsClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *BiomeLibraryLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"BMTipsStreams.m", 46, @"%s", *a1);

  __break(1u);
}

void __getBMDiscoverabilitySignalsClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMDiscoverabilitySignalsClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMTipsStreams.m", 47, @"Unable to find class %s", "BMDiscoverabilitySignals");

  __break(1u);
}

void CoreDuetContextLibrary_cold_1_0(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *CoreDuetContextLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"BMTipsStreams.m", 31, @"%s", *a1);

  __break(1u);
}

void _BiomeLibrary_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"id<BMRootLibrary> _BiomeLibrary(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMDaemon+LaunchDonations.m", 23, @"%s", dlerror());

  __break(1u);
}

void BiomeLibraryLibrary_cold_1_0(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *BiomeLibraryLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"BMDaemon+LaunchDonations.m", 22, @"%s", *a1);

  __break(1u);
}

void __getBMDeviceMetadataClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMDeviceMetadataClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMDaemon+LaunchDonations.m", 24, @"Unable to find class %s", "BMDeviceMetadata");

  __break(1u);
}

void __getBMDeviceBootSessionClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getBMDeviceBootSessionClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMDaemon+LaunchDonations.m", 25, @"Unable to find class %s", "BMDeviceBootSession");

  __break(1u);
}

void BiomeLibraryInternalLibrary_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *BiomeLibraryInternalLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"BMLibraryBridge.m", 17, @"%s", *a1);

  __break(1u);
}

void BiomeLibraryNodeBridge_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"id<BMLibraryNode> __softlink__BiomeLibraryNode(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryBridge.m", 14, @"%s", dlerror());

  __break(1u);
}

void BiomeLibraryNodeBridge_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void BiomeLibraryInternalNodeBridge_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void BiomeLibraryInternalNodeBridge_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"id<BMLibraryNode> __softlink__BiomeLibraryInternalNode(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMLibraryBridge.m", 18, @"%s", dlerror());

  __break(1u);
}

void BiomeLibraryInternalNodeBridge_cold_3(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void __getBiomeLibraryNodeSymbolLoc_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *BiomeLibraryLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"BMLibraryBridge.m", 13, @"%s", *a1);

  __break(1u);
}

void bmstream_vtab_connect_cold_1()
{
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_0_10(&dword_18E67D000, v0, v1, "bmstream_vtab_connect declare vtab '%@'", v2, v3, v4, v5, v6);
}

void bmstream_vtab_connect_cold_2()
{
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_0_10(&dword_18E67D000, v0, v1, "bmstream_vtab_connect create virtual table %@", v2, v3, v4, v5, v6);
}

void bmstream_vtab_bestindex_cold_1(unsigned int *a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [NSNumber numberWithInt:*a1];
  OUTLINED_FUNCTION_7();
  _os_log_debug_impl(&dword_18E67D000, a2, OS_LOG_TYPE_DEBUG, "bmstream_vtab_bestindex idxNum: %@", v4, 0xCu);
}

void bmstream_vtab_filter_cold_1()
{
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_0_10(&dword_18E67D000, v0, v1, "bmstream_vtab_filter resetting cursor publisher with options: %@", v2, v3, v4, v5, v6);
}

void bmstream_vtab_filter_cold_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = [NSNumber numberWithInt:a1];
  uint8_t v6 = [NSNumber numberWithInt:a2];
  int v7 = 138412546;
  uint8_t v8 = v5;
  __int16 v9 = 2112;
  int v10 = v6;
  _os_log_debug_impl(&dword_18E67D000, a3, OS_LOG_TYPE_DEBUG, "bmstream_vtab_filter idxNum: %@; argc: %@",
    (uint8_t *)&v7,
    0x16u);
}

void typeWithBMPBMindfulnessSessionStateType_cold_1(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithInt:a1];
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_0_8(&dword_18E67D000, v2, v3, "BMMindfulnessSessionEvent: unable to convert BMPBMindfulnessSessionStateType enum value: %@", v4, v5, v6, v7, v8);
}

void CoreDuetLibrary_cold_1_3(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *CoreDuetLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"BMCoreDuetStream.m", 22, @"%s", *a1);

  __break(1u);
}

void BMSleepModeChangeReasonFromReason_cold_1(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithInt:a1];
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_0_8(&dword_18E67D000, v2, v3, "BMSleepModeEvent: unable to convert BMPBSleepModeChangeReason enum value: %@", v4, v5, v6, v7, v8);
}

void typeFromBMPBSemanticLocationUserSpecificPlaceType_cold_1(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithInt:a1];
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_0_8(&dword_18E67D000, v2, v3, "BMSemanticLocationEvent: unable to convert BMPBSemanticLocationUserSpecificPlaceType enum value: %@", v4, v5, v6, v7, v8);
}

void __getFSFUtilsClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *FeatureStoreLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"BMDaemon+Pruning.m", 27, @"%s", *a1);

  __break(1u);
}

void __getFSFUtilsClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getFSFUtilsClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMDaemon+Pruning.m", 28, @"Unable to find class %s", "FSFUtils");

  __break(1u);
}

void __getSAPathInfoClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getSAPathInfoClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMDaemon+Pruning.m", 37, @"Unable to find class %s", "SAPathInfo");

  __break(1u);
}

void SpaceAttributionLibrary_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *SpaceAttributionLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"BMDaemon+Pruning.m", 35, @"%s", *a1);

  __break(1u);
}

void __getSAPathManagerClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getSAPathManagerClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"BMDaemon+Pruning.m", 36, @"Unable to find class %s", "SAPathManager");

  __break(1u);
}

void BMPBLastAlarmEventTypeFromType_cold_1(uint64_t a1)
{
  uint64_t v1 = [NSNumber numberWithUnsignedInteger:a1];
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_0_8(&dword_18E67D000, v2, v3, "BMAlarmEvent: unable to convert BMLastAlarmEventType enum value: %@", v4, v5, v6, v7, v8);
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return MEMORY[0x1F40E3298]();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return MEMORY[0x1F40E3368]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x1F40E3420]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x1F40E37D0]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x1F40E37E0]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x1F40E3800]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x1F40E3818]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x1F40E3830]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t URL.standardizedFileURL.getter()
{
  return MEMORY[0x1F40E4878]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x1F40E48D8]();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = MEMORY[0x1F40E4AA8](percentEncoded);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return MEMORY[0x1F40E4AC0]();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return MEMORY[0x1F40E4B30]();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return MEMORY[0x1F40E4B58]();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return MEMORY[0x1F40E4B68]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t Data.InlineData.init(_:)()
{
  return MEMORY[0x1F40E4BB0]();
}

uint64_t Data.LargeSlice.init(_:)()
{
  return MEMORY[0x1F40E4BD8]();
}

uint64_t Data.InlineSlice.init(_:)()
{
  return MEMORY[0x1F40E4C18]();
}

uint64_t Data.makeIterator()()
{
  return MEMORY[0x1F40E4C48]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x1F40E4C80]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x1F40E4D48]();
}

uint64_t static Data.== infix(_:_:)()
{
  return MEMORY[0x1F40E4D80]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t Data.init(bytes:count:)()
{
  return MEMORY[0x1F40E4DD0]();
}

uint64_t Data.count.getter()
{
  return MEMORY[0x1F40E4DF0]();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return MEMORY[0x1F40E4E60]();
}

uint64_t Date.ISO8601Format(_:)()
{
  return MEMORY[0x1F40E50A0]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return MEMORY[0x1F40E50E8]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateSeparator()
{
  return MEMORY[0x1F40E50F0]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator()
{
  return MEMORY[0x1F40E50F8]();
}

uint64_t Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)()
{
  return MEMORY[0x1F40E5100]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return MEMORY[0x1F40E5118]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle()
{
  return MEMORY[0x1F40E5148]();
}

uint64_t Date.init(timeIntervalSince1970:)()
{
  return MEMORY[0x1F40E52A0]();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return MEMORY[0x1F40E52B0]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x1F40E5388]();
}

uint64_t UUID.init(uuidString:)()
{
  return MEMORY[0x1F40E53A0]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x1F40E53B0]();
}

uint64_t static UUID.< infix(_:_:)()
{
  return MEMORY[0x1F40E53D8]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x1F40E53E8]();
}

uint64_t UUID.init(uuid:)()
{
  return MEMORY[0x1F40E5418]();
}

uint64_t UUID.uuid.getter()
{
  return MEMORY[0x1F40E5428]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x1F40E5890]();
}

uint64_t TimeZone.init(secondsFromGMT:)()
{
  return MEMORY[0x1F40E5D20]();
}

uint64_t type metadata accessor for TimeZone()
{
  return MEMORY[0x1F40E5D70]();
}

uint64_t isFeatureEnabled(_:)()
{
  return MEMORY[0x1F4119150]();
}

uint64_t Schematizer.RepeatableFieldIterator.next()()
{
  return MEMORY[0x1F4145B00]();
}

uint64_t type metadata accessor for Schematizer.RepeatableFieldIterator()
{
  return MEMORY[0x1F4145B08]();
}

uint64_t static Schematizer.makeRepeatableFieldIterator(in:withFieldNumber:type:)()
{
  return MEMORY[0x1F4145B10]();
}

uint64_t static TypeSchema.== infix(_:_:)()
{
  return MEMORY[0x1F4145B18]();
}

uint64_t type metadata accessor for TypeSchema()
{
  return MEMORY[0x1F4145B20]();
}

uint64_t type metadata accessor for SchematizedData()
{
  return MEMORY[0x1F4145B28]();
}

uint64_t type metadata accessor for AnyValue()
{
  return MEMORY[0x1F4145B30]();
}

uint64_t type metadata accessor for EnumValue()
{
  return MEMORY[0x1F4145B38]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x1F4127060]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x1F4127078]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x1F4127088]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x1F4127110]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x1F4127118]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x1F4127180]();
}

uint64_t dispatch thunk of Decoder.handleConflictingOneOf()()
{
  return MEMORY[0x1F4127190]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBoolField(value:)()
{
  return MEMORY[0x1F41271A8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return MEMORY[0x1F41271C0]();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt32Field(value:)()
{
  return MEMORY[0x1F4127220]();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt64Field(value:)()
{
  return MEMORY[0x1F4127230]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)()
{
  return MEMORY[0x1F4127260]();
}

uint64_t dispatch thunk of Decoder.decodeSingularDoubleField(value:)()
{
  return MEMORY[0x1F4127270]();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return MEMORY[0x1F4127290]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt32Field(value:)()
{
  return MEMORY[0x1F41272A0]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return MEMORY[0x1F41272C8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x1F41272E0]();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return MEMORY[0x1F4127340]();
}

uint64_t dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x1F4127400]();
}

uint64_t dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)()
{
  return MEMORY[0x1F4127410]();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x1F4127418]();
}

uint64_t dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x1F4127468]();
}

uint64_t dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x1F4127470]();
}

uint64_t dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)()
{
  return MEMORY[0x1F4127498]();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return MEMORY[0x1F41274A8]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x1F41274B8]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x1F41274D0]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x1F41274E8]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x1F4127660]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x1F4127678]();
}

uint64_t _NameMap.init()()
{
  return MEMORY[0x1F4127680]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x1F4127690]();
}

uint64_t OSSignpostID.init(log:)()
{
  return MEMORY[0x1F4188568]();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return MEMORY[0x1F4188570]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x1F4188580]();
}

uint64_t OSSignposter.init(logger:)()
{
  return MEMORY[0x1F4188590]();
}

uint64_t OSSignposter.logHandle.getter()
{
  return MEMORY[0x1F41885B0]();
}

uint64_t type metadata accessor for OSSignposter()
{
  return MEMORY[0x1F41885D0]();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return MEMORY[0x1F41885E0]();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return MEMORY[0x1F4188650]();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return MEMORY[0x1F4188658]();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return MEMORY[0x1F4188660]();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return MEMORY[0x1F4188668]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1F4188670]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x1F41886B0]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1F40E6000]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x1F4183318]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x1F4183358]();
}

Swift::Void __swiftcall Dictionary._Variant.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t BidirectionalCollection<>.firstRange<A>(of:)()
{
  return MEMORY[0x1F41883E8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1F4183730]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x1F4183740]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1F4183838]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1F40E6190]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x1F40E61F8]();
}

uint64_t String.init(cString:encoding:)()
{
  return MEMORY[0x1F40E6240]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x1F40E6268]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1F4183880]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = MEMORY[0x1F4183898]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x1F41838B8]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x1F41838D8]();
}

uint64_t String.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1F4183900]();
}

uint64_t String.init(stringInterpolation:)()
{
  return MEMORY[0x1F4183968]();
}

uint64_t static String.+ infix(_:_:)()
{
  return MEMORY[0x1F4183970]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x1F41839F0]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x1F41839F8]();
}

uint64_t String.index(_:offsetBy:)()
{
  return MEMORY[0x1F4183A10]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x1F4183A28]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x1F4183A60]();
}

{
  return MEMORY[0x1F4183A68]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t String.hashValue.getter()
{
  return MEMORY[0x1F4183B40]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x1F4183B58]();
}

{
  return MEMORY[0x1F4183BA0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x1F4183B90]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x1F4183D70]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1F4183D80]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1F4183DF8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t Double.description.getter()
{
  return MEMORY[0x1F4184008]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x1F40E6430]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6458]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x1F4184138]();
}

uint64_t Int.hashValue.getter()
{
  return MEMORY[0x1F4184270]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x1F41886E8]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x1F4188708]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x1F4188710]();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return MEMORY[0x1F4188720]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x1F4184628]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1F4184640]();
}

uint64_t Optional<A>.hashValue.getter()
{
  return MEMORY[0x1F4184658]();
}

uint64_t Substring.distance(from:to:)()
{
  return MEMORY[0x1F4184770]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x1F41847A0]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1F4184820]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x1F40E6C68]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x1F40E6C80]();
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)()
{
  return MEMORY[0x1F40E6D38]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1F4184978]();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return MEMORY[0x1F4184B28]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4184CA8]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x1F4184CC0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x1F4184DD0]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x1F4184DF0]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1F4185050]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x1F41851A0](isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
}

uint64_t _NativeDictionary._delete(at:)()
{
  return MEMORY[0x1F41851C0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185298]();
}

{
  return MEMORY[0x1F41852A0]();
}

uint64_t _assertionFailure(_:_:flags:)()
{
  return MEMORY[0x1F41852A8]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1F4185350]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1F4185368]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4185370]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4185380]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185398]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1F41854C8](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x1F41854E0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1F41854F8]();
}

{
  return MEMORY[0x1F4185508]();
}

{
  return MEMORY[0x1F4185540]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1F4185528]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1F4185568]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1F4185598]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x1F41855E0]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1F4185608]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1F4185628]();
}

{
  return MEMORY[0x1F4185638]();
}

{
  return MEMORY[0x1F4185668]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1F4185658]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1F4185690]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1F41856C0]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x1F4185740](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1F4185758]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1F4185A30]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x1F4185D10]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x1F40E6E30]();
}

uint64_t Int64.hashValue.getter()
{
  return MEMORY[0x1F4185E30]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1F4185EB0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1F4186318]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B8]();
}

uint64_t BMAccessModePrintableDescription()
{
  return MEMORY[0x1F410C818]();
}

uint64_t BMBiomeLibraryStreamIdentifierForPremigratedStreamIdentifier()
{
  return MEMORY[0x1F410C820]();
}

uint64_t BMDSLValidateDictionary()
{
  return MEMORY[0x1F410C810]();
}

uint64_t BMDevicePlatformOptionsToString()
{
  return MEMORY[0x1F410C830]();
}

uint64_t BMIdentifierIsPathSafe()
{
  return MEMORY[0x1F410C838]();
}

uint64_t BMServiceDomainForStream()
{
  return MEMORY[0x1F410C840]();
}

uint64_t BMStringForServiceDomain()
{
  return MEMORY[0x1F410C860]();
}

uint64_t BPSPipelineSupportsPullBasedPublishers()
{
  return MEMORY[0x1F410C918]();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9770](data, *(void *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  MEMORY[0x1F40D7928](theDate);
  return result;
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return (NSString *)MEMORY[0x1F40E7298](proto);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

uint64_t PBDataWriterPlaceMark()
{
  return MEMORY[0x1F4147180]();
}

uint64_t PBDataWriterRecallMark()
{
  return MEMORY[0x1F4147188]();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1F4147190]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1F41471B0]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x1F41471C0]();
}

uint64_t PBDataWriterWriteFloatField()
{
  return MEMORY[0x1F41471D8]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1F41471E0]();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return MEMORY[0x1F41471F0]();
}

uint64_t PBDataWriterWriteSint32Field()
{
  return MEMORY[0x1F4147210]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1F4147220]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1F4147230]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1F4147240]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1F4147248]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1F4147268]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1F4147278]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1F4147280]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1F41472A0]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1F41472A8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1F40D9438]();
}

uint64_t _PASIsAllDigits()
{
  return MEMORY[0x1F4146270]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

uint64_t __biome_log_for_category()
{
  return MEMORY[0x1F410C868]();
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

{
  return MEMORY[0x1F41813D0]();
}

{
  return MEMORY[0x1F41813F0]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1F40C9F70](dso, description, activity, *(void *)&flags);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x1F4186398]();
}

void abort(void)
{
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x1F40CA4B8](a1);
}

void bzero(void *a1, size_t a2)
{
}

void clearerr(FILE *a1)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

void exit(int a1)
{
}

int ferror(FILE *a1)
{
  return MEMORY[0x1F40CC0A0](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x1F40CC1A8](a1, a2);
  return result;
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

int getc(FILE *a1)
{
  return MEMORY[0x1F40CC388](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1F40CC3B8]();
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_assert_not_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x1F40CDED8](*(void *)&a1, a2, a3, a4, a5);
}

void siglongjmp(sigjmp_buf a1, int a2)
{
}

int sigsetjmp(sigjmp_buf a1, int a2)
{
  return MEMORY[0x1F40CE048](a1, *(void *)&a2);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F90](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1F4181FA8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1F4181FB8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1F4181FC0](a1, *(void *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1F4182060](a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return MEMORY[0x1F4182068](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1F4182070](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F4182078](a1, *(void *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F4182088](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x1F4182098](a1, *(void *)&iCol);
  return result;
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A8](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x1F41820B0](a1, *(void *)&N);
}

const char *__cdecl sqlite3_column_table_name(sqlite3_stmt *a1, int a2)
{
  return (const char *)MEMORY[0x1F41820C0](a1, *(void *)&a2);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820D8](a1, *(void *)&iCol);
}

int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xDestroy)(void *))
{
  return MEMORY[0x1F4182120](db, zFunctionName, *(void *)&nArg, *(void *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

int sqlite3_create_module_v2(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData, void (__cdecl *xDestroy)(void *))
{
  return MEMORY[0x1F4182130](db, zName, p, pClientData, xDestroy);
}

int sqlite3_declare_vtab(sqlite3 *a1, const char *zSQL)
{
  return MEMORY[0x1F4182180](a1, zSQL);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1F41821A8](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

void sqlite3_free(void *a1)
{
}

void *__cdecl sqlite3_malloc(int a1)
{
  return (void *)MEMORY[0x1F4182248](*(void *)&a1);
}

char *sqlite3_mprintf(const char *a1, ...)
{
  return (char *)MEMORY[0x1F4182258](a1);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182298](db, zSql, *(void *)&nByte, *(void *)&prepFlags, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41822C0](pStmt);
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
}

void sqlite3_result_double(sqlite3_context *a1, double a2)
{
}

void sqlite3_result_error(sqlite3_context *a1, const char *a2, int a3)
{
}

void sqlite3_result_int64(sqlite3_context *a1, sqlite3_int64 a2)
{
}

void sqlite3_result_null(sqlite3_context *a1)
{
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
}

int sqlite3_set_authorizer(sqlite3 *a1, int (__cdecl *xAuth)(void *, int, const char *, const char *, const char *, const char *), void *pUserData)
{
  return MEMORY[0x1F4182350](a1, xAuth, pUserData);
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  return (const char *)MEMORY[0x1F41823A0](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  return (void *)MEMORY[0x1F4182408](a1);
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  return (const void *)MEMORY[0x1F4182410](a1);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  return MEMORY[0x1F4182418](a1);
}

double sqlite3_value_double(sqlite3_value *a1)
{
  MEMORY[0x1F4182428](a1);
  return result;
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  return MEMORY[0x1F4182448](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1F4182458](a1);
}

int sqlite3_value_type(sqlite3_value *a1)
{
  return MEMORY[0x1F4182468](a1);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x1F40CE190](*(void *)&__errnum, __strerrbuf, __buflen);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE230](__s, *(void *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2E0](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1F4186580]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1F41865F0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1F4186638]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1F41867E8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE990](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

uint64_t xpc_connection_copy_invalidation_reason()
{
  return MEMORY[0x1F40CEB98]();
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED28](object);
}

uint64_t xpc_copy_event()
{
  return MEMORY[0x1F40CED58]();
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x1F40CEE30]();
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1F40CEE98](xdict, key, length);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEEA8](xdict, key);
}

double xpc_dictionary_get_double(xpc_object_t xdict, const char *key)
{
  MEMORY[0x1F40CEEB8](xdict, key);
  return result;
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1F40CF040](object1, object2);
}

uint64_t xpc_event_publisher_activate()
{
  return MEMORY[0x1F40CF048]();
}

uint64_t xpc_event_publisher_create()
{
  return MEMORY[0x1F40CF060]();
}

uint64_t xpc_event_publisher_fire()
{
  return MEMORY[0x1F40CF068]();
}

uint64_t xpc_event_publisher_set_error_handler()
{
  return MEMORY[0x1F40CF090]();
}

uint64_t xpc_event_publisher_set_handler()
{
  return MEMORY[0x1F40CF0A8]();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

uint64_t xpc_set_event()
{
  return MEMORY[0x1F40CF250]();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

uint64_t xpc_strerror()
{
  return MEMORY[0x1F40CF288]();
}