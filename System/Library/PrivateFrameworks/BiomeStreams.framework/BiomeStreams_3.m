uint64_t outlined destroy of PgQuery_Alias(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for PgQuery_Node.OneOf_Node(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      long long v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v10 = *(int *)(RangeVar + 40);
      uint64_t v11 = a1 + v10;
      uint64_t v12 = a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);
      v14(v11, v12, v13);
      uint64_t v15 = *(int *)(RangeVar + 44);
      v16 = (void *)(a1 + v15);
      v17 = (void *)(a2 + v15);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v19 = *(void *)(Alias - 8);
      if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, Alias)) {
        goto LABEL_258;
      }
      goto LABEL_4;
    case 2u:
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(a1, a2, v21);
      uint64_t TableFunc = type metadata accessor for PgQuery_TableFunc(0);
      *(void *)(a1 + *(int *)(TableFunc + 20)) = *(void *)(a2 + *(int *)(TableFunc + 20));
      goto LABEL_325;
    case 3u:
    case 0x68u:
    case 0xABu:
    case 0xE0u:
      uint64_t v812 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v812 - 8) + 32))(a1, a2, v812);
      goto LABEL_325;
    case 4u:
      uint64_t v23 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(a1, a2, v23);
      uint64_t Var = type metadata accessor for PgQuery_Var(0);
      *(void *)(a1 + *(int *)(Var + 20)) = *(void *)(a2 + *(int *)(Var + 20));
      goto LABEL_325;
    case 5u:
      uint64_t v25 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(a1, a2, v25);
      uint64_t Param = type metadata accessor for PgQuery_Param(0);
      *(void *)(a1 + *(int *)(Param + 20)) = *(void *)(a2 + *(int *)(Param + 20));
      goto LABEL_325;
    case 6u:
      uint64_t v27 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(a1, a2, v27);
      uint64_t Aggref = type metadata accessor for PgQuery_Aggref(0);
      *(void *)(a1 + *(int *)(Aggref + 20)) = *(void *)(a2 + *(int *)(Aggref + 20));
      goto LABEL_325;
    case 7u:
      uint64_t v29 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(a1, a2, v29);
      uint64_t GroupingFunc = type metadata accessor for PgQuery_GroupingFunc(0);
      *(void *)(a1 + *(int *)(GroupingFunc + 20)) = *(void *)(a2 + *(int *)(GroupingFunc + 20));
      goto LABEL_325;
    case 8u:
      uint64_t v31 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(a1, a2, v31);
      uint64_t WindowFunc = type metadata accessor for PgQuery_WindowFunc(0);
      *(void *)(a1 + *(int *)(WindowFunc + 20)) = *(void *)(a2 + *(int *)(WindowFunc + 20));
      goto LABEL_325;
    case 9u:
      uint64_t v33 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
      uint64_t SubscriptingRef = type metadata accessor for PgQuery_SubscriptingRef(0);
      *(void *)(a1 + *(int *)(SubscriptingRef + 20)) = *(void *)(a2 + *(int *)(SubscriptingRef + 20));
      goto LABEL_325;
    case 0xAu:
      uint64_t v35 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32))(a1, a2, v35);
      uint64_t FuncExpr = type metadata accessor for PgQuery_FuncExpr(0);
      *(void *)(a1 + *(int *)(FuncExpr + 20)) = *(void *)(a2 + *(int *)(FuncExpr + 20));
      goto LABEL_325;
    case 0xBu:
      uint64_t v37 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32))(a1, a2, v37);
      uint64_t NamedArgExpr = type metadata accessor for PgQuery_NamedArgExpr(0);
      *(void *)(a1 + *(int *)(NamedArgExpr + 20)) = *(void *)(a2 + *(int *)(NamedArgExpr + 20));
      goto LABEL_325;
    case 0xCu:
      uint64_t v39 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 32))(a1, a2, v39);
      uint64_t OpExpr = type metadata accessor for PgQuery_OpExpr(0);
      *(void *)(a1 + *(int *)(OpExpr + 20)) = *(void *)(a2 + *(int *)(OpExpr + 20));
      goto LABEL_325;
    case 0xDu:
      uint64_t v41 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 32))(a1, a2, v41);
      uint64_t DistinctExpr = type metadata accessor for PgQuery_DistinctExpr(0);
      *(void *)(a1 + *(int *)(DistinctExpr + 20)) = *(void *)(a2 + *(int *)(DistinctExpr + 20));
      goto LABEL_325;
    case 0xEu:
      uint64_t v43 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 32))(a1, a2, v43);
      uint64_t NullIfExpr = type metadata accessor for PgQuery_NullIfExpr(0);
      *(void *)(a1 + *(int *)(NullIfExpr + 20)) = *(void *)(a2 + *(int *)(NullIfExpr + 20));
      goto LABEL_325;
    case 0xFu:
      uint64_t v45 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32))(a1, a2, v45);
      ScalarArrayuint64_t OpExpr = type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
      *(void *)(a1 + *(int *)(ScalarArrayOpExpr + 20)) = *(void *)(a2 + *(int *)(ScalarArrayOpExpr + 20));
      goto LABEL_325;
    case 0x10u:
      uint64_t v47 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 32))(a1, a2, v47);
      uint64_t BoolExpr = type metadata accessor for PgQuery_BoolExpr(0);
      *(void *)(a1 + *(int *)(BoolExpr + 20)) = *(void *)(a2 + *(int *)(BoolExpr + 20));
      goto LABEL_325;
    case 0x11u:
      uint64_t v49 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 32))(a1, a2, v49);
      uint64_t SubLink = type metadata accessor for PgQuery_SubLink(0);
      *(void *)(a1 + *(int *)(SubLink + 20)) = *(void *)(a2 + *(int *)(SubLink + 20));
      goto LABEL_325;
    case 0x12u:
      uint64_t v51 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 32))(a1, a2, v51);
      uint64_t SubPlan = type metadata accessor for PgQuery_SubPlan(0);
      *(void *)(a1 + *(int *)(SubPlan + 20)) = *(void *)(a2 + *(int *)(SubPlan + 20));
      goto LABEL_325;
    case 0x13u:
      uint64_t v53 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 32))(a1, a2, v53);
      Alternativeuint64_t SubPlan = type metadata accessor for PgQuery_AlternativeSubPlan(0);
      *(void *)(a1 + *(int *)(AlternativeSubPlan + 20)) = *(void *)(a2 + *(int *)(AlternativeSubPlan + 20));
      goto LABEL_325;
    case 0x14u:
      uint64_t v55 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 32))(a1, a2, v55);
      uint64_t FieldSelect = type metadata accessor for PgQuery_FieldSelect(0);
      *(void *)(a1 + *(int *)(FieldSelect + 20)) = *(void *)(a2 + *(int *)(FieldSelect + 20));
      goto LABEL_325;
    case 0x15u:
      uint64_t v57 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 32))(a1, a2, v57);
      uint64_t FieldStore = type metadata accessor for PgQuery_FieldStore(0);
      *(void *)(a1 + *(int *)(FieldStore + 20)) = *(void *)(a2 + *(int *)(FieldStore + 20));
      goto LABEL_325;
    case 0x16u:
      uint64_t v59 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 32))(a1, a2, v59);
      uint64_t RelabelType = type metadata accessor for PgQuery_RelabelType(0);
      *(void *)(a1 + *(int *)(RelabelType + 20)) = *(void *)(a2 + *(int *)(RelabelType + 20));
      goto LABEL_325;
    case 0x17u:
      uint64_t v61 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 32))(a1, a2, v61);
      uint64_t CoerceViaIO = type metadata accessor for PgQuery_CoerceViaIO(0);
      *(void *)(a1 + *(int *)(CoerceViaIO + 20)) = *(void *)(a2 + *(int *)(CoerceViaIO + 20));
      goto LABEL_325;
    case 0x18u:
      uint64_t v63 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 32))(a1, a2, v63);
      uint64_t ArrayCoerceExpr = type metadata accessor for PgQuery_ArrayCoerceExpr(0);
      *(void *)(a1 + *(int *)(ArrayCoerceExpr + 20)) = *(void *)(a2 + *(int *)(ArrayCoerceExpr + 20));
      goto LABEL_325;
    case 0x19u:
      uint64_t v65 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 32))(a1, a2, v65);
      uint64_t ConvertRowtypeExpr = type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
      *(void *)(a1 + *(int *)(ConvertRowtypeExpr + 20)) = *(void *)(a2 + *(int *)(ConvertRowtypeExpr + 20));
      goto LABEL_325;
    case 0x1Au:
      uint64_t v67 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 32))(a1, a2, v67);
      uint64_t CollateExpr = type metadata accessor for PgQuery_CollateExpr(0);
      *(void *)(a1 + *(int *)(CollateExpr + 20)) = *(void *)(a2 + *(int *)(CollateExpr + 20));
      goto LABEL_325;
    case 0x1Bu:
      uint64_t v69 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 32))(a1, a2, v69);
      uint64_t CaseExpr = type metadata accessor for PgQuery_CaseExpr(0);
      *(void *)(a1 + *(int *)(CaseExpr + 20)) = *(void *)(a2 + *(int *)(CaseExpr + 20));
      goto LABEL_325;
    case 0x1Cu:
      uint64_t v71 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 32))(a1, a2, v71);
      uint64_t CaseWhen = type metadata accessor for PgQuery_CaseWhen(0);
      *(void *)(a1 + *(int *)(CaseWhen + 20)) = *(void *)(a2 + *(int *)(CaseWhen + 20));
      goto LABEL_325;
    case 0x1Du:
      uint64_t v73 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 32))(a1, a2, v73);
      uint64_t CaseTestExpr = type metadata accessor for PgQuery_CaseTestExpr(0);
      *(void *)(a1 + *(int *)(CaseTestExpr + 20)) = *(void *)(a2 + *(int *)(CaseTestExpr + 20));
      goto LABEL_325;
    case 0x1Eu:
      uint64_t v75 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 32))(a1, a2, v75);
      uint64_t ArrayExpr = type metadata accessor for PgQuery_ArrayExpr(0);
      *(void *)(a1 + *(int *)(ArrayExpr + 20)) = *(void *)(a2 + *(int *)(ArrayExpr + 20));
      goto LABEL_325;
    case 0x1Fu:
      uint64_t v77 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 32))(a1, a2, v77);
      uint64_t RowExpr = type metadata accessor for PgQuery_RowExpr(0);
      *(void *)(a1 + *(int *)(RowExpr + 20)) = *(void *)(a2 + *(int *)(RowExpr + 20));
      goto LABEL_325;
    case 0x20u:
      uint64_t v79 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 32))(a1, a2, v79);
      uint64_t RowCompareExpr = type metadata accessor for PgQuery_RowCompareExpr(0);
      *(void *)(a1 + *(int *)(RowCompareExpr + 20)) = *(void *)(a2 + *(int *)(RowCompareExpr + 20));
      goto LABEL_325;
    case 0x21u:
      uint64_t v81 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 32))(a1, a2, v81);
      uint64_t CoalesceExpr = type metadata accessor for PgQuery_CoalesceExpr(0);
      *(void *)(a1 + *(int *)(CoalesceExpr + 20)) = *(void *)(a2 + *(int *)(CoalesceExpr + 20));
      goto LABEL_325;
    case 0x22u:
      uint64_t v83 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 32))(a1, a2, v83);
      uint64_t MinMaxExpr = type metadata accessor for PgQuery_MinMaxExpr(0);
      *(void *)(a1 + *(int *)(MinMaxExpr + 20)) = *(void *)(a2 + *(int *)(MinMaxExpr + 20));
      goto LABEL_325;
    case 0x23u:
      uint64_t v85 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 32))(a1, a2, v85);
      uint64_t SQLValueFunction = type metadata accessor for PgQuery_SQLValueFunction(0);
      *(void *)(a1 + *(int *)(SQLValueFunction + 20)) = *(void *)(a2 + *(int *)(SQLValueFunction + 20));
      goto LABEL_325;
    case 0x24u:
      uint64_t v87 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 32))(a1, a2, v87);
      uint64_t XmlExpr = type metadata accessor for PgQuery_XmlExpr(0);
      *(void *)(a1 + *(int *)(XmlExpr + 20)) = *(void *)(a2 + *(int *)(XmlExpr + 20));
      goto LABEL_325;
    case 0x25u:
      uint64_t v89 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 32))(a1, a2, v89);
      uint64_t NullTest = type metadata accessor for PgQuery_NullTest(0);
      *(void *)(a1 + *(int *)(NullTest + 20)) = *(void *)(a2 + *(int *)(NullTest + 20));
      goto LABEL_325;
    case 0x26u:
      uint64_t v91 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 32))(a1, a2, v91);
      uint64_t BooleanTest = type metadata accessor for PgQuery_BooleanTest(0);
      *(void *)(a1 + *(int *)(BooleanTest + 20)) = *(void *)(a2 + *(int *)(BooleanTest + 20));
      goto LABEL_325;
    case 0x27u:
      uint64_t v93 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 32))(a1, a2, v93);
      uint64_t CoerceToDomain = type metadata accessor for PgQuery_CoerceToDomain(0);
      *(void *)(a1 + *(int *)(CoerceToDomain + 20)) = *(void *)(a2 + *(int *)(CoerceToDomain + 20));
      goto LABEL_325;
    case 0x28u:
      uint64_t v95 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 32))(a1, a2, v95);
      uint64_t CoerceToDomainValue = type metadata accessor for PgQuery_CoerceToDomainValue(0);
      *(void *)(a1 + *(int *)(CoerceToDomainValue + 20)) = *(void *)(a2 + *(int *)(CoerceToDomainValue + 20));
      goto LABEL_325;
    case 0x29u:
      uint64_t v97 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 32))(a1, a2, v97);
      uint64_t SetToDefault = type metadata accessor for PgQuery_SetToDefault(0);
      *(void *)(a1 + *(int *)(SetToDefault + 20)) = *(void *)(a2 + *(int *)(SetToDefault + 20));
      goto LABEL_325;
    case 0x2Au:
      uint64_t v99 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 32))(a1, a2, v99);
      uint64_t CurrentOfExpr = type metadata accessor for PgQuery_CurrentOfExpr(0);
      *(void *)(a1 + *(int *)(CurrentOfExpr + 20)) = *(void *)(a2 + *(int *)(CurrentOfExpr + 20));
      goto LABEL_325;
    case 0x2Bu:
      uint64_t v101 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 32))(a1, a2, v101);
      uint64_t NextValueExpr = type metadata accessor for PgQuery_NextValueExpr(0);
      *(void *)(a1 + *(int *)(NextValueExpr + 20)) = *(void *)(a2 + *(int *)(NextValueExpr + 20));
      goto LABEL_325;
    case 0x2Cu:
      uint64_t v103 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 32))(a1, a2, v103);
      uint64_t InferenceElem = type metadata accessor for PgQuery_InferenceElem(0);
      *(void *)(a1 + *(int *)(InferenceElem + 20)) = *(void *)(a2 + *(int *)(InferenceElem + 20));
      goto LABEL_325;
    case 0x2Du:
      uint64_t v105 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 32))(a1, a2, v105);
      uint64_t TargetEntry = type metadata accessor for PgQuery_TargetEntry(0);
      *(void *)(a1 + *(int *)(TargetEntry + 20)) = *(void *)(a2 + *(int *)(TargetEntry + 20));
      goto LABEL_325;
    case 0x2Eu:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      uint64_t v107 = *(int *)(type metadata accessor for PgQuery_RangeTblRef(0) + 20);
      uint64_t v108 = a1 + v107;
      uint64_t v109 = a2 + v107;
      uint64_t v110 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 32))(v108, v109, v110);
      goto LABEL_325;
    case 0x2Fu:
      uint64_t v111 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 32))(a1, a2, v111);
      uint64_t JoinExpr = type metadata accessor for PgQuery_JoinExpr(0);
      *(void *)(a1 + *(int *)(JoinExpr + 20)) = *(void *)(a2 + *(int *)(JoinExpr + 20));
      goto LABEL_325;
    case 0x30u:
      uint64_t v113 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 32))(a1, a2, v113);
      uint64_t v114 = type metadata accessor for PgQuery_FromExpr(0);
      *(void *)(a1 + *(int *)(v114 + 20)) = *(void *)(a2 + *(int *)(v114 + 20));
      goto LABEL_325;
    case 0x31u:
      uint64_t v115 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 32))(a1, a2, v115);
      uint64_t v116 = type metadata accessor for PgQuery_OnConflictExpr(0);
      *(void *)(a1 + *(int *)(v116 + 20)) = *(void *)(a2 + *(int *)(v116 + 20));
      goto LABEL_325;
    case 0x32u:
      uint64_t v117 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 32))(a1, a2, v117);
      uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
      *(void *)(a1 + *(int *)(IntoClause + 20)) = *(void *)(a2 + *(int *)(IntoClause + 20));
      goto LABEL_325;
    case 0x33u:
      uint64_t v119 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v119 - 8) + 32))(a1, a2, v119);
      uint64_t RawStmt = type metadata accessor for PgQuery_RawStmt(0);
      *(void *)(a1 + *(int *)(RawStmt + 20)) = *(void *)(a2 + *(int *)(RawStmt + 20));
      goto LABEL_325;
    case 0x34u:
      uint64_t v121 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 32))(a1, a2, v121);
      uint64_t Query = type metadata accessor for PgQuery_Query(0);
      *(void *)(a1 + *(int *)(Query + 20)) = *(void *)(a2 + *(int *)(Query + 20));
      goto LABEL_325;
    case 0x35u:
      uint64_t v123 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 32))(a1, a2, v123);
      uint64_t InsertStmt = type metadata accessor for PgQuery_InsertStmt(0);
      *(void *)(a1 + *(int *)(InsertStmt + 20)) = *(void *)(a2 + *(int *)(InsertStmt + 20));
      goto LABEL_325;
    case 0x36u:
      uint64_t v125 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v125 - 8) + 32))(a1, a2, v125);
      uint64_t v126 = type metadata accessor for PgQuery_DeleteStmt(0);
      *(void *)(a1 + *(int *)(v126 + 20)) = *(void *)(a2 + *(int *)(v126 + 20));
      goto LABEL_325;
    case 0x37u:
      uint64_t v127 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 32))(a1, a2, v127);
      uint64_t UpdateStmt = type metadata accessor for PgQuery_UpdateStmt(0);
      *(void *)(a1 + *(int *)(UpdateStmt + 20)) = *(void *)(a2 + *(int *)(UpdateStmt + 20));
      goto LABEL_325;
    case 0x38u:
      uint64_t v129 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v129 - 8) + 32))(a1, a2, v129);
      uint64_t SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
      *(void *)(a1 + *(int *)(SelectStmt + 20)) = *(void *)(a2 + *(int *)(SelectStmt + 20));
      goto LABEL_325;
    case 0x39u:
      uint64_t v131 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v131;
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      uint64_t AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
      uint64_t v133 = *(int *)(AlterTableStmt + 28);
      uint64_t v134 = a1 + v133;
      uint64_t v135 = a2 + v133;
      uint64_t v136 = type metadata accessor for UnknownStorage();
      v137 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
      v137(v134, v135, v136);
      uint64_t v138 = *(int *)(AlterTableStmt + 32);
      uint64_t v139 = a1 + v138;
      uint64_t v140 = a2 + v138;
      uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v142 = *(void *)(v141 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
        goto LABEL_229;
      }
      long long v825 = *(_OWORD *)(v140 + 16);
      *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
      *(_OWORD *)(v139 + 16) = v825;
      *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
      *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
      *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
      *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
      v892 = (void (*)(char *, char *, uint64_t))v137;
      v137(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
      uint64_t v826 = *(int *)(v141 + 44);
      __dsta = (void *)(v139 + v826);
      v827 = (void *)(v140 + v826);
      uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v829 = *(void *)(v828 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
        goto LABEL_303;
      }
      goto LABEL_323;
    case 0x3Au:
      uint64_t v143 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 32))(a1, a2, v143);
      uint64_t AlterTableCmd = type metadata accessor for PgQuery_AlterTableCmd(0);
      *(void *)(a1 + *(int *)(AlterTableCmd + 20)) = *(void *)(a2 + *(int *)(AlterTableCmd + 20));
      goto LABEL_325;
    case 0x3Bu:
      uint64_t v145 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v145 - 8) + 32))(a1, a2, v145);
      uint64_t AlterDomainStmt = type metadata accessor for PgQuery_AlterDomainStmt(0);
      *(void *)(a1 + *(int *)(AlterDomainStmt + 20)) = *(void *)(a2 + *(int *)(AlterDomainStmt + 20));
      goto LABEL_325;
    case 0x3Cu:
      uint64_t v147 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v147 - 8) + 32))(a1, a2, v147);
      uint64_t SetOperationStmt = type metadata accessor for PgQuery_SetOperationStmt(0);
      *(void *)(a1 + *(int *)(SetOperationStmt + 20)) = *(void *)(a2 + *(int *)(SetOperationStmt + 20));
      goto LABEL_325;
    case 0x3Du:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      uint64_t v149 = *(void *)(a2 + 72);
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      *(void *)(a1 + 72) = v149;
      uint64_t v150 = *(int *)(type metadata accessor for PgQuery_GrantStmt(0) + 48);
      uint64_t v151 = a1 + v150;
      uint64_t v152 = a2 + v150;
      uint64_t v153 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 32))(v151, v152, v153);
      goto LABEL_325;
    case 0x3Eu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
      uint64_t v155 = *(int *)(GrantRoleStmt + 36);
      uint64_t v156 = a1 + v155;
      uint64_t v157 = a2 + v155;
      uint64_t v158 = type metadata accessor for UnknownStorage();
      v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
      v159(v156, v157, v158);
      uint64_t v160 = *(int *)(GrantRoleStmt + 40);
      v161 = (void *)(a1 + v160);
      v162 = (void *)(a2 + v160);
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v164 = *(void *)(RoleSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
        goto LABEL_161;
      }
      goto LABEL_285;
    case 0x3Fu:
      *(void *)a1 = *(void *)a2;
      uint64_t AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
      uint64_t v166 = *(int *)(AlterDefaultPrivilegesStmt + 20);
      uint64_t v167 = a1 + v166;
      uint64_t v168 = a2 + v166;
      uint64_t v169 = type metadata accessor for UnknownStorage();
      v170 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v169 - 8) + 32);
      v170(v167, v168, v169);
      uint64_t v171 = *(int *)(AlterDefaultPrivilegesStmt + 24);
      v172 = (unsigned char *)(a1 + v171);
      v173 = (unsigned char *)(a2 + v171);
      uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
      uint64_t v175 = *(void *)(GrantStmt - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v175 + 48))(v173, 1, GrantStmt))
      {
        uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
        memcpy(v172, v173, *(void *)(*(void *)(v176 - 8) + 64));
      }
      else
      {
        unsigned char *v172 = *v173;
        *((void *)v172 + 1) = *((void *)v173 + 1);
        v172[16] = v173[16];
        *((void *)v172 + 3) = *((void *)v173 + 3);
        v172[32] = v173[32];
        *(_OWORD *)(v172 + 40) = *(_OWORD *)(v173 + 40);
        *((void *)v172 + 7) = *((void *)v173 + 7);
        v172[64] = v173[64];
        uint64_t v830 = *((void *)v173 + 9);
        v172[80] = v173[80];
        *((void *)v172 + 9) = v830;
        v170((uint64_t)&v172[*(int *)(GrantStmt + 48)], (uint64_t)&v173[*(int *)(GrantStmt + 48)], v169);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v175 + 56))(v172, 0, 1, GrantStmt);
      }
      goto LABEL_325;
    case 0x40u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v177 = *(int *)(type metadata accessor for PgQuery_ClosePortalStmt(0) + 20);
      uint64_t v178 = a1 + v177;
      uint64_t v179 = a2 + v177;
      uint64_t v180 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v180 - 8) + 32))(v178, v179, v180);
      goto LABEL_325;
    case 0x41u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      uint64_t ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
      uint64_t v182 = *(int *)(ClusterStmt + 24);
      uint64_t v183 = a1 + v182;
      uint64_t v184 = a2 + v182;
      uint64_t v136 = type metadata accessor for UnknownStorage();
      v185 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
      v185(v183, v184, v136);
      uint64_t v186 = *(int *)(ClusterStmt + 28);
      uint64_t v139 = a1 + v186;
      uint64_t v140 = a2 + v186;
      uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v142 = *(void *)(v141 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
        goto LABEL_229;
      }
      long long v831 = *(_OWORD *)(v140 + 16);
      *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
      *(_OWORD *)(v139 + 16) = v831;
      *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
      *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
      *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
      *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
      v892 = (void (*)(char *, char *, uint64_t))v185;
      v185(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
      uint64_t v832 = *(int *)(v141 + 44);
      __dsta = (void *)(v139 + v832);
      v827 = (void *)(v140 + v832);
      uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v829 = *(void *)(v828 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
        goto LABEL_303;
      }
      goto LABEL_323;
    case 0x42u:
      uint64_t v187 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v187 - 8) + 32))(a1, a2, v187);
      uint64_t CopyStmt = type metadata accessor for PgQuery_CopyStmt(0);
      *(void *)(a1 + *(int *)(CopyStmt + 20)) = *(void *)(a2 + *(int *)(CopyStmt + 20));
      goto LABEL_325;
    case 0x43u:
      uint64_t v189 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v189 - 8) + 32))(a1, a2, v189);
      uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
      *(void *)(a1 + *(int *)(Stmt + 20)) = *(void *)(a2 + *(int *)(Stmt + 20));
      goto LABEL_325;
    case 0x44u:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
      uint64_t v191 = *(int *)(type metadata accessor for PgQuery_DefineStmt(0) + 44);
      uint64_t v192 = a1 + v191;
      uint64_t v193 = a2 + v191;
      uint64_t v194 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v194 - 8) + 32))(v192, v193, v194);
      goto LABEL_325;
    case 0x45u:
      uint64_t v195 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v195;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
      uint64_t v196 = *(int *)(type metadata accessor for PgQuery_DropStmt(0) + 36);
      uint64_t v197 = a1 + v196;
      uint64_t v198 = a2 + v196;
      uint64_t v199 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v199 - 8) + 32))(v197, v198, v199);
      goto LABEL_325;
    case 0x46u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t v200 = *(int *)(type metadata accessor for PgQuery_TruncateStmt(0) + 28);
      uint64_t v201 = a1 + v200;
      uint64_t v202 = a2 + v200;
      uint64_t v203 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v203 - 8) + 32))(v201, v202, v203);
      goto LABEL_325;
    case 0x47u:
      uint64_t v204 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v204 - 8) + 32))(a1, a2, v204);
      Commentuint64_t Stmt = type metadata accessor for PgQuery_CommentStmt(0);
      *(void *)(a1 + *(int *)(CommentStmt + 20)) = *(void *)(a2 + *(int *)(CommentStmt + 20));
      goto LABEL_325;
    case 0x48u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      uint64_t v206 = *(int *)(type metadata accessor for PgQuery_FetchStmt(0) + 32);
      uint64_t v207 = a1 + v206;
      uint64_t v208 = a2 + v206;
      uint64_t v209 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v209 - 8) + 32))(v207, v208, v209);
      goto LABEL_325;
    case 0x49u:
      uint64_t v210 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v210 - 8) + 32))(a1, a2, v210);
      Indexuint64_t Stmt = type metadata accessor for PgQuery_IndexStmt(0);
      *(void *)(a1 + *(int *)(IndexStmt + 20)) = *(void *)(a2 + *(int *)(IndexStmt + 20));
      goto LABEL_325;
    case 0x4Au:
      *(_WORD *)a1 = *(_WORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      Functionuint64_t Stmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
      uint64_t v213 = *(int *)(FunctionStmt + 36);
      uint64_t v214 = a1 + v213;
      uint64_t v215 = a2 + v213;
      uint64_t v216 = type metadata accessor for UnknownStorage();
      v217 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v216 - 8) + 32);
      v217(v214, v215, v216);
      uint64_t v218 = *(int *)(FunctionStmt + 40);
      v219 = (void *)(a1 + v218);
      v220 = (void *)(a2 + v218);
      uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
      uint64_t v222 = *(void *)(TypeName - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v222 + 48))(v220, 1, TypeName)) {
        goto LABEL_81;
      }
      goto LABEL_265;
    case 0x4Bu:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      AlterFunctionuint64_t Stmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
      uint64_t v225 = *(int *)(AlterFunctionStmt + 24);
      uint64_t v226 = a1 + v225;
      uint64_t v227 = a2 + v225;
      uint64_t v228 = type metadata accessor for UnknownStorage();
      v229 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v228 - 8) + 32);
      v229(v226, v227, v228);
      uint64_t v230 = *(int *)(AlterFunctionStmt + 28);
      v231 = (unsigned char *)(a1 + v230);
      v232 = (unsigned char *)(a2 + v230);
      uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
      uint64_t v234 = *(void *)(ObjectWithArgs - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v234 + 48))(v232, 1, ObjectWithArgs)) {
        goto LABEL_83;
      }
      goto LABEL_266;
    case 0x4Cu:
      *(void *)a1 = *(void *)a2;
      uint64_t v236 = *(int *)(type metadata accessor for PgQuery_DoStmt(0) + 20);
      uint64_t v237 = a1 + v236;
      uint64_t v238 = a2 + v236;
      uint64_t v239 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v239 - 8) + 32))(v237, v238, v239);
      goto LABEL_325;
    case 0x4Du:
      uint64_t v240 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v240 - 8) + 32))(a1, a2, v240);
      Renameuint64_t Stmt = type metadata accessor for PgQuery_RenameStmt(0);
      *(void *)(a1 + *(int *)(RenameStmt + 20)) = *(void *)(a2 + *(int *)(RenameStmt + 20));
      goto LABEL_325;
    case 0x4Eu:
      uint64_t v242 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v242 - 8) + 32))(a1, a2, v242);
      Ruleuint64_t Stmt = type metadata accessor for PgQuery_RuleStmt(0);
      *(void *)(a1 + *(int *)(RuleStmt + 20)) = *(void *)(a2 + *(int *)(RuleStmt + 20));
      goto LABEL_325;
    case 0x4Fu:
      long long v244 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v244;
      uint64_t v245 = *(int *)(type metadata accessor for PgQuery_NotifyStmt(0) + 24);
      uint64_t v246 = a1 + v245;
      uint64_t v247 = a2 + v245;
      uint64_t v248 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v248 - 8) + 32))(v246, v247, v248);
      goto LABEL_325;
    case 0x50u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v249 = *(int *)(type metadata accessor for PgQuery_ListenStmt(0) + 20);
      uint64_t v250 = a1 + v249;
      uint64_t v251 = a2 + v249;
      uint64_t v252 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v252 - 8) + 32))(v250, v251, v252);
      goto LABEL_325;
    case 0x51u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v253 = *(int *)(type metadata accessor for PgQuery_UnlistenStmt(0) + 20);
      uint64_t v254 = a1 + v253;
      uint64_t v255 = a2 + v253;
      uint64_t v256 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v256 - 8) + 32))(v254, v255, v256);
      goto LABEL_325;
    case 0x52u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v257 = *(int *)(type metadata accessor for PgQuery_TransactionStmt(0) + 36);
      uint64_t v258 = a1 + v257;
      uint64_t v259 = a2 + v257;
      uint64_t v260 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v260 - 8) + 32))(v258, v259, v260);
      goto LABEL_325;
    case 0x53u:
      uint64_t v261 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v261 - 8) + 32))(a1, a2, v261);
      Viewuint64_t Stmt = type metadata accessor for PgQuery_ViewStmt(0);
      *(void *)(a1 + *(int *)(ViewStmt + 20)) = *(void *)(a2 + *(int *)(ViewStmt + 20));
      goto LABEL_325;
    case 0x54u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v263 = *(int *)(type metadata accessor for PgQuery_LoadStmt(0) + 20);
      uint64_t v264 = a1 + v263;
      uint64_t v265 = a2 + v263;
      uint64_t v266 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v266 - 8) + 32))(v264, v265, v266);
      goto LABEL_325;
    case 0x55u:
      uint64_t v267 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v267 - 8) + 32))(a1, a2, v267);
      Domainuint64_t Stmt = type metadata accessor for PgQuery_CreateDomainStmt(0);
      *(void *)(a1 + *(int *)(DomainStmt + 20)) = *(void *)(a2 + *(int *)(DomainStmt + 20));
      goto LABEL_325;
    case 0x56u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v269 = *(int *)(type metadata accessor for PgQuery_CreatedbStmt(0) + 24);
      uint64_t v270 = a1 + v269;
      uint64_t v271 = a2 + v269;
      uint64_t v272 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v272 - 8) + 32))(v270, v271, v272);
      goto LABEL_325;
    case 0x57u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v273 = *(int *)(type metadata accessor for PgQuery_DropdbStmt(0) + 28);
      uint64_t v274 = a1 + v273;
      uint64_t v275 = a2 + v273;
      uint64_t v276 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v276 - 8) + 32))(v274, v275, v276);
      goto LABEL_325;
    case 0x58u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      uint64_t v277 = *(int *)(type metadata accessor for PgQuery_VacuumStmt(0) + 28);
      uint64_t v278 = a1 + v277;
      uint64_t v279 = a2 + v277;
      uint64_t v280 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v280 - 8) + 32))(v278, v279, v280);
      goto LABEL_325;
    case 0x59u:
      uint64_t v281 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v281 - 8) + 32))(a1, a2, v281);
      Explainuint64_t Stmt = type metadata accessor for PgQuery_ExplainStmt(0);
      *(void *)(a1 + *(int *)(ExplainStmt + 20)) = *(void *)(a2 + *(int *)(ExplainStmt + 20));
      goto LABEL_325;
    case 0x5Au:
      uint64_t v283 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v283 - 8) + 32))(a1, a2, v283);
      TableAsuint64_t Stmt = type metadata accessor for PgQuery_CreateTableAsStmt(0);
      *(void *)(a1 + *(int *)(TableAsStmt + 20)) = *(void *)(a2 + *(int *)(TableAsStmt + 20));
      goto LABEL_325;
    case 0x5Bu:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
      Sequint64_t Stmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
      uint64_t v286 = *(int *)(SeqStmt + 32);
      uint64_t v287 = a1 + v286;
      uint64_t v288 = a2 + v286;
      uint64_t v136 = type metadata accessor for UnknownStorage();
      v289 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
      v289(v287, v288, v136);
      uint64_t v290 = *(int *)(SeqStmt + 36);
      uint64_t v139 = a1 + v290;
      uint64_t v140 = a2 + v290;
      uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v142 = *(void *)(v141 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
        goto LABEL_229;
      }
      long long v833 = *(_OWORD *)(v140 + 16);
      *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
      *(_OWORD *)(v139 + 16) = v833;
      *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
      *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
      *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
      *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
      v892 = (void (*)(char *, char *, uint64_t))v289;
      v289(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
      uint64_t v834 = *(int *)(v141 + 44);
      __dsta = (void *)(v139 + v834);
      v827 = (void *)(v140 + v834);
      uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v829 = *(void *)(v828 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
        goto LABEL_303;
      }
      goto LABEL_323;
    case 0x5Cu:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      AlterSequint64_t Stmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
      uint64_t v292 = *(int *)(AlterSeqStmt + 28);
      uint64_t v293 = a1 + v292;
      uint64_t v294 = a2 + v292;
      uint64_t v136 = type metadata accessor for UnknownStorage();
      v295 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
      v295(v293, v294, v136);
      uint64_t v296 = *(int *)(AlterSeqStmt + 32);
      uint64_t v139 = a1 + v296;
      uint64_t v140 = a2 + v296;
      uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v142 = *(void *)(v141 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
        goto LABEL_229;
      }
      long long v835 = *(_OWORD *)(v140 + 16);
      *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
      *(_OWORD *)(v139 + 16) = v835;
      *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
      *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
      *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
      *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
      v892 = (void (*)(char *, char *, uint64_t))v295;
      v295(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
      uint64_t v836 = *(int *)(v141 + 44);
      __dsta = (void *)(v139 + v836);
      v827 = (void *)(v140 + v836);
      uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v829 = *(void *)(v828 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
        goto LABEL_303;
      }
      goto LABEL_323;
    case 0x5Du:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      uint64_t v297 = *(int *)(type metadata accessor for PgQuery_VariableSetStmt(0) + 32);
      uint64_t v298 = a1 + v297;
      uint64_t v299 = a2 + v297;
      uint64_t v300 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v300 - 8) + 32))(v298, v299, v300);
      goto LABEL_325;
    case 0x5Eu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v301 = *(int *)(type metadata accessor for PgQuery_VariableShowStmt(0) + 20);
      uint64_t v302 = a1 + v301;
      uint64_t v303 = a2 + v301;
      uint64_t v304 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v304 - 8) + 32))(v302, v303, v304);
      goto LABEL_325;
    case 0x5Fu:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v305 = *(int *)(type metadata accessor for PgQuery_DiscardStmt(0) + 20);
      uint64_t v306 = a1 + v305;
      uint64_t v307 = a2 + v305;
      uint64_t v308 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v308 - 8) + 32))(v306, v307, v308);
      goto LABEL_325;
    case 0x60u:
      uint64_t v309 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v309 - 8) + 32))(a1, a2, v309);
      Triguint64_t Stmt = type metadata accessor for PgQuery_CreateTrigStmt(0);
      *(void *)(a1 + *(int *)(TrigStmt + 20)) = *(void *)(a2 + *(int *)(TrigStmt + 20));
      goto LABEL_325;
    case 0x61u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      uint64_t v311 = *(int *)(type metadata accessor for PgQuery_CreatePLangStmt(0) + 40);
      uint64_t v312 = a1 + v311;
      uint64_t v313 = a2 + v311;
      uint64_t v314 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v314 - 8) + 32))(v312, v313, v314);
      goto LABEL_325;
    case 0x62u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v315 = *(int *)(type metadata accessor for PgQuery_CreateRoleStmt(0) + 28);
      uint64_t v316 = a1 + v315;
      uint64_t v317 = a2 + v315;
      uint64_t v318 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v318 - 8) + 32))(v316, v317, v318);
      goto LABEL_325;
    case 0x63u:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      AlterRoleuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
      uint64_t v320 = *(int *)(AlterRoleStmt + 24);
      uint64_t v321 = a1 + v320;
      uint64_t v322 = a2 + v320;
      uint64_t v158 = type metadata accessor for UnknownStorage();
      v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
      v159(v321, v322, v158);
      uint64_t v323 = *(int *)(AlterRoleStmt + 28);
      v161 = (void *)(a1 + v323);
      v162 = (void *)(a2 + v323);
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v164 = *(void *)(RoleSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
        goto LABEL_161;
      }
      goto LABEL_285;
    case 0x64u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v324 = *(int *)(type metadata accessor for PgQuery_DropRoleStmt(0) + 24);
      uint64_t v325 = a1 + v324;
      uint64_t v326 = a2 + v324;
      uint64_t v327 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v327 - 8) + 32))(v325, v326, v327);
      goto LABEL_325;
    case 0x65u:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
      uint64_t v328 = *(int *)(type metadata accessor for PgQuery_LockStmt(0) + 28);
      uint64_t v329 = a1 + v328;
      uint64_t v330 = a2 + v328;
      uint64_t v331 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v331 - 8) + 32))(v329, v330, v331);
      goto LABEL_325;
    case 0x66u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v332 = *(int *)(type metadata accessor for PgQuery_ConstraintsSetStmt(0) + 24);
      uint64_t v333 = a1 + v332;
      uint64_t v334 = a2 + v332;
      uint64_t v335 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v335 - 8) + 32))(v333, v334, v335);
      goto LABEL_325;
    case 0x67u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
      Reindexuint64_t Stmt = type metadata accessor for PgQuery_ReindexStmt(0);
      uint64_t v337 = *(int *)(ReindexStmt + 32);
      uint64_t v338 = a1 + v337;
      uint64_t v339 = a2 + v337;
      uint64_t v136 = type metadata accessor for UnknownStorage();
      v340 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
      v340(v338, v339, v136);
      uint64_t v341 = *(int *)(ReindexStmt + 36);
      uint64_t v139 = a1 + v341;
      uint64_t v140 = a2 + v341;
      uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v142 = *(void *)(v141 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
        goto LABEL_229;
      }
      long long v837 = *(_OWORD *)(v140 + 16);
      *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
      *(_OWORD *)(v139 + 16) = v837;
      *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
      *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
      *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
      *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
      v892 = (void (*)(char *, char *, uint64_t))v340;
      v340(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
      uint64_t v838 = *(int *)(v141 + 44);
      __dsta = (void *)(v139 + v838);
      v827 = (void *)(v140 + v838);
      uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v829 = *(void *)(v828 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
        goto LABEL_303;
      }
      goto LABEL_323;
    case 0x69u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      Schemauint64_t Stmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
      uint64_t v343 = *(int *)(SchemaStmt + 28);
      uint64_t v344 = a1 + v343;
      uint64_t v345 = a2 + v343;
      uint64_t v158 = type metadata accessor for UnknownStorage();
      v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
      v159(v344, v345, v158);
      uint64_t v346 = *(int *)(SchemaStmt + 32);
      v161 = (void *)(a1 + v346);
      v162 = (void *)(a2 + v346);
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v164 = *(void *)(RoleSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
        goto LABEL_161;
      }
      goto LABEL_285;
    case 0x6Au:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v347 = *(int *)(type metadata accessor for PgQuery_AlterDatabaseStmt(0) + 24);
      uint64_t v348 = a1 + v347;
      uint64_t v349 = a2 + v347;
      uint64_t v350 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v350 - 8) + 32))(v348, v349, v350);
      goto LABEL_325;
    case 0x6Bu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      AlterDatabaseSetuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
      uint64_t v352 = *(int *)(AlterDatabaseSetStmt + 20);
      uint64_t v353 = a1 + v352;
      uint64_t v354 = a2 + v352;
      uint64_t v355 = type metadata accessor for UnknownStorage();
      v356 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v355 - 8) + 32);
      v356(v353, v354, v355);
      uint64_t v357 = *(int *)(AlterDatabaseSetStmt + 24);
      uint64_t v358 = a1 + v357;
      uint64_t v359 = a2 + v357;
      VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
      uint64_t v361 = *(void *)(VariableSetStmt - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v361 + 48))(v359, 1, VariableSetStmt)) {
        goto LABEL_120;
      }
      *(void *)uint64_t v358 = *(void *)v359;
      *(unsigned char *)(v358 + 8) = *(unsigned char *)(v359 + 8);
      *(_OWORD *)(v358 + 16) = *(_OWORD *)(v359 + 16);
      *(void *)(v358 + 32) = *(void *)(v359 + 32);
      *(unsigned char *)(v358 + 40) = *(unsigned char *)(v359 + 40);
      v356(v358 + *(int *)(VariableSetStmt + 32), v359 + *(int *)(VariableSetStmt + 32), v355);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v361 + 56))(v358, 0, 1, VariableSetStmt);
      goto LABEL_325;
    case 0x6Cu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      AlterRoleSetuint64_t Stmt = (int *)type metadata accessor for PgQuery_AlterRoleSetStmt(0);
      uint64_t v364 = AlterRoleSetStmt[5];
      uint64_t v365 = a1 + v364;
      uint64_t v366 = a2 + v364;
      uint64_t v367 = type metadata accessor for UnknownStorage();
      v368 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v367 - 8) + 32);
      v368(v365, v366, v367);
      uint64_t v369 = AlterRoleSetStmt[6];
      v370 = (void *)(a1 + v369);
      v371 = (void *)(a2 + v369);
      uint64_t v372 = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v373 = *(void *)(v372 - 8);
      uint64_t v887 = v367;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v373 + 48))(v371, 1, v372))
      {
        uint64_t v374 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
        memcpy(v370, v371, *(void *)(*(void *)(v374 - 8) + 64));
      }
      else
      {
        void *v370 = *v371;
        *((unsigned char *)v370 + 8) = *((unsigned char *)v371 + 8);
        *((_OWORD *)v370 + 1) = *((_OWORD *)v371 + 1);
        *((_DWORD *)v370 + 8) = *((_DWORD *)v371 + 8);
        v368((uint64_t)v370 + *(int *)(v372 + 28), (uint64_t)v371 + *(int *)(v372 + 28), v367);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v373 + 56))(v370, 0, 1, v372);
      }
      uint64_t v839 = AlterRoleSetStmt[7];
      v840 = (void *)(a1 + v839);
      v841 = (void *)(a2 + v839);
      uint64_t v842 = type metadata accessor for PgQuery_VariableSetStmt(0);
      uint64_t v843 = *(void *)(v842 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v843 + 48))(v841, 1, v842))
      {
        uint64_t v844 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        memcpy(v840, v841, *(void *)(*(void *)(v844 - 8) + 64));
      }
      else
      {
        void *v840 = *v841;
        *((unsigned char *)v840 + 8) = *((unsigned char *)v841 + 8);
        *((_OWORD *)v840 + 1) = *((_OWORD *)v841 + 1);
        v840[4] = v841[4];
        *((unsigned char *)v840 + 40) = *((unsigned char *)v841 + 40);
        v368((uint64_t)v840 + *(int *)(v842 + 32), (uint64_t)v841 + *(int *)(v842 + 32), v887);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v843 + 56))(v840, 0, 1, v842);
      }
      goto LABEL_325;
    case 0x6Du:
      *(void *)a1 = *(void *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      uint64_t v375 = *(int *)(type metadata accessor for PgQuery_CreateConversionStmt(0) + 36);
      uint64_t v376 = a1 + v375;
      uint64_t v377 = a2 + v375;
      uint64_t v378 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v378 - 8) + 32))(v376, v377, v378);
      goto LABEL_325;
    case 0x6Eu:
      uint64_t v379 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v379 - 8) + 32))(a1, a2, v379);
      Castuint64_t Stmt = type metadata accessor for PgQuery_CreateCastStmt(0);
      *(void *)(a1 + *(int *)(CastStmt + 20)) = *(void *)(a2 + *(int *)(CastStmt + 20));
      goto LABEL_325;
    case 0x6Fu:
      long long v381 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v381;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      OpClassuint64_t Stmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
      uint64_t v383 = *(int *)(OpClassStmt + 36);
      uint64_t v384 = a1 + v383;
      uint64_t v385 = a2 + v383;
      uint64_t v216 = type metadata accessor for UnknownStorage();
      v217 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v216 - 8) + 32);
      v217(v384, v385, v216);
      uint64_t v386 = *(int *)(OpClassStmt + 40);
      v219 = (void *)(a1 + v386);
      v220 = (void *)(a2 + v386);
      uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
      uint64_t v222 = *(void *)(TypeName - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v222 + 48))(v220, 1, TypeName))
      {
LABEL_81:
        uint64_t v223 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
        memcpy(v219, v220, *(void *)(*(void *)(v223 - 8) + 64));
      }
      else
      {
LABEL_265:
        void *v219 = *v220;
        *((_DWORD *)v219 + 2) = *((_DWORD *)v220 + 2);
        *((_WORD *)v219 + 6) = *((_WORD *)v220 + 6);
        v219[2] = v220[2];
        *((_DWORD *)v219 + 6) = *((_DWORD *)v220 + 6);
        v219[4] = v220[4];
        *((_DWORD *)v219 + 10) = *((_DWORD *)v220 + 10);
        v217((uint64_t)v219 + *(int *)(TypeName + 48), (uint64_t)v220 + *(int *)(TypeName + 48), v216);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v222 + 56))(v219, 0, 1, TypeName);
      }
      goto LABEL_325;
    case 0x70u:
      *(void *)a1 = *(void *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      uint64_t v387 = *(int *)(type metadata accessor for PgQuery_CreateOpFamilyStmt(0) + 24);
      uint64_t v388 = a1 + v387;
      uint64_t v389 = a2 + v387;
      uint64_t v390 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v390 - 8) + 32))(v388, v389, v390);
      goto LABEL_325;
    case 0x71u:
      *(void *)a1 = *(void *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v391 = *(int *)(type metadata accessor for PgQuery_AlterOpFamilyStmt(0) + 32);
      uint64_t v392 = a1 + v391;
      uint64_t v393 = a2 + v391;
      uint64_t v394 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v394 - 8) + 32))(v392, v393, v394);
      goto LABEL_325;
    case 0x72u:
      uint64_t v395 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v395 - 8) + 32))(a1, a2, v395);
      Prepareuint64_t Stmt = type metadata accessor for PgQuery_PrepareStmt(0);
      *(void *)(a1 + *(int *)(PrepareStmt + 20)) = *(void *)(a2 + *(int *)(PrepareStmt + 20));
      goto LABEL_325;
    case 0x73u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v397 = *(int *)(type metadata accessor for PgQuery_ExecuteStmt(0) + 24);
      uint64_t v398 = a1 + v397;
      uint64_t v399 = a2 + v397;
      uint64_t v400 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v400 - 8) + 32))(v398, v399, v400);
      goto LABEL_325;
    case 0x74u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v401 = *(int *)(type metadata accessor for PgQuery_DeallocateStmt(0) + 20);
      uint64_t v402 = a1 + v401;
      uint64_t v403 = a2 + v401;
      uint64_t v404 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v404 - 8) + 32))(v402, v403, v404);
      goto LABEL_325;
    case 0x75u:
      uint64_t v405 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v405 - 8) + 32))(a1, a2, v405);
      DeclareCursoruint64_t Stmt = type metadata accessor for PgQuery_DeclareCursorStmt(0);
      *(void *)(a1 + *(int *)(DeclareCursorStmt + 20)) = *(void *)(a2 + *(int *)(DeclareCursorStmt + 20));
      goto LABEL_325;
    case 0x76u:
      long long v407 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v407;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      TableSpaceuint64_t Stmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
      uint64_t v409 = *(int *)(TableSpaceStmt + 28);
      uint64_t v410 = a1 + v409;
      uint64_t v411 = a2 + v409;
      uint64_t v158 = type metadata accessor for UnknownStorage();
      v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
      v159(v410, v411, v158);
      uint64_t v412 = *(int *)(TableSpaceStmt + 32);
      v161 = (void *)(a1 + v412);
      v162 = (void *)(a2 + v412);
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v164 = *(void *)(RoleSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
        goto LABEL_161;
      }
      goto LABEL_285;
    case 0x77u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      uint64_t v413 = *(int *)(type metadata accessor for PgQuery_DropTableSpaceStmt(0) + 24);
      uint64_t v414 = a1 + v413;
      uint64_t v415 = a2 + v413;
      uint64_t v416 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v416 - 8) + 32))(v414, v415, v416);
      goto LABEL_325;
    case 0x78u:
      uint64_t v417 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v417 - 8) + 32))(a1, a2, v417);
      AlterObjectDependsuint64_t Stmt = type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
      *(void *)(a1 + *(int *)(AlterObjectDependsStmt + 20)) = *(void *)(a2 + *(int *)(AlterObjectDependsStmt + 20));
      goto LABEL_325;
    case 0x79u:
      uint64_t v419 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v419 - 8) + 32))(a1, a2, v419);
      AlterObjectSchemauint64_t Stmt = type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
      *(void *)(a1 + *(int *)(AlterObjectSchemaStmt + 20)) = *(void *)(a2 + *(int *)(AlterObjectSchemaStmt + 20));
      goto LABEL_325;
    case 0x7Au:
      uint64_t v421 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v421 - 8) + 32))(a1, a2, v421);
      AlterOwneruint64_t Stmt = type metadata accessor for PgQuery_AlterOwnerStmt(0);
      *(void *)(a1 + *(int *)(AlterOwnerStmt + 20)) = *(void *)(a2 + *(int *)(AlterOwnerStmt + 20));
      goto LABEL_325;
    case 0x7Bu:
      *(void *)a1 = *(void *)a2;
      AlterOperatoruint64_t Stmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
      uint64_t v424 = *(int *)(AlterOperatorStmt + 20);
      uint64_t v425 = a1 + v424;
      uint64_t v426 = a2 + v424;
      uint64_t v228 = type metadata accessor for UnknownStorage();
      v229 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v228 - 8) + 32);
      v229(v425, v426, v228);
      uint64_t v427 = *(int *)(AlterOperatorStmt + 24);
      v231 = (unsigned char *)(a1 + v427);
      v232 = (unsigned char *)(a2 + v427);
      uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
      uint64_t v234 = *(void *)(ObjectWithArgs - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v234 + 48))(v232, 1, ObjectWithArgs))
      {
LABEL_83:
        uint64_t v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        memcpy(v231, v232, *(void *)(*(void *)(v235 - 8) + 64));
      }
      else
      {
LABEL_266:
        *(_OWORD *)v231 = *(_OWORD *)v232;
        v231[16] = v232[16];
        v229((uint64_t)&v231[*(int *)(ObjectWithArgs + 28)], (uint64_t)&v232[*(int *)(ObjectWithArgs + 28)], v228);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v234 + 56))(v231, 0, 1, ObjectWithArgs);
      }
      goto LABEL_325;
    case 0x7Cu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v428 = *(int *)(type metadata accessor for PgQuery_AlterTypeStmt(0) + 24);
      uint64_t v429 = a1 + v428;
      uint64_t v430 = a2 + v428;
      uint64_t v431 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v431 - 8) + 32))(v429, v430, v431);
      goto LABEL_325;
    case 0x7Du:
      uint64_t v432 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v432;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      uint64_t v433 = *(int *)(type metadata accessor for PgQuery_DropOwnedStmt(0) + 24);
      uint64_t v434 = a1 + v433;
      uint64_t v435 = a2 + v433;
      uint64_t v436 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v436 - 8) + 32))(v434, v435, v436);
      goto LABEL_325;
    case 0x7Eu:
      *(void *)a1 = *(void *)a2;
      ReassignOwneduint64_t Stmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
      uint64_t v438 = *(int *)(ReassignOwnedStmt + 20);
      uint64_t v439 = a1 + v438;
      uint64_t v440 = a2 + v438;
      uint64_t v158 = type metadata accessor for UnknownStorage();
      v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
      v159(v439, v440, v158);
      uint64_t v441 = *(int *)(ReassignOwnedStmt + 24);
      v161 = (void *)(a1 + v441);
      v162 = (void *)(a2 + v441);
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v164 = *(void *)(RoleSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
        goto LABEL_161;
      }
      goto LABEL_285;
    case 0x7Fu:
      *(void *)a1 = *(void *)a2;
      CompositeTypeuint64_t Stmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
      uint64_t v443 = *(int *)(CompositeTypeStmt + 20);
      uint64_t v444 = a1 + v443;
      uint64_t v445 = a2 + v443;
      uint64_t v136 = type metadata accessor for UnknownStorage();
      v446 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
      v446(v444, v445, v136);
      uint64_t v447 = *(int *)(CompositeTypeStmt + 24);
      uint64_t v139 = a1 + v447;
      uint64_t v140 = a2 + v447;
      uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v142 = *(void *)(v141 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
        goto LABEL_229;
      }
      long long v845 = *(_OWORD *)(v140 + 16);
      *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
      *(_OWORD *)(v139 + 16) = v845;
      *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
      *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
      *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
      *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
      v892 = (void (*)(char *, char *, uint64_t))v446;
      v446(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
      uint64_t v846 = *(int *)(v141 + 44);
      __dsta = (void *)(v139 + v846);
      v827 = (void *)(v140 + v846);
      uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v829 = *(void *)(v828 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
        goto LABEL_303;
      }
      goto LABEL_323;
    case 0x80u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v448 = *(int *)(type metadata accessor for PgQuery_CreateEnumStmt(0) + 24);
      uint64_t v449 = a1 + v448;
      uint64_t v450 = a2 + v448;
      uint64_t v451 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v451 - 8) + 32))(v449, v450, v451);
      goto LABEL_325;
    case 0x81u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v452 = *(int *)(type metadata accessor for PgQuery_CreateRangeStmt(0) + 24);
      uint64_t v453 = a1 + v452;
      uint64_t v454 = a2 + v452;
      uint64_t v455 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v455 - 8) + 32))(v453, v454, v455);
      goto LABEL_325;
    case 0x82u:
      *(void *)a1 = *(void *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
      uint64_t v456 = *(int *)(type metadata accessor for PgQuery_AlterEnumStmt(0) + 40);
      uint64_t v457 = a1 + v456;
      uint64_t v458 = a2 + v456;
      uint64_t v459 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v459 - 8) + 32))(v457, v458, v459);
      goto LABEL_325;
    case 0x83u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v460 = *(int *)(type metadata accessor for PgQuery_AlterTSDictionaryStmt(0) + 24);
      uint64_t v461 = a1 + v460;
      uint64_t v462 = a2 + v460;
      uint64_t v463 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v463 - 8) + 32))(v461, v462, v463);
      goto LABEL_325;
    case 0x84u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
      uint64_t v464 = *(int *)(type metadata accessor for PgQuery_AlterTSConfigurationStmt(0) + 44);
      uint64_t v465 = a1 + v464;
      uint64_t v466 = a2 + v464;
      uint64_t v467 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v467 - 8) + 32))(v465, v466, v467);
      goto LABEL_325;
    case 0x85u:
      long long v468 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v468;
      uint64_t v469 = *(int *)(type metadata accessor for PgQuery_CreateFdwStmt(0) + 28);
      uint64_t v470 = a1 + v469;
      uint64_t v471 = a2 + v469;
      uint64_t v472 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v472 - 8) + 32))(v470, v471, v472);
      goto LABEL_325;
    case 0x86u:
      long long v473 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v473;
      uint64_t v474 = *(int *)(type metadata accessor for PgQuery_AlterFdwStmt(0) + 28);
      uint64_t v475 = a1 + v474;
      uint64_t v476 = a2 + v474;
      uint64_t v477 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v477 - 8) + 32))(v475, v476, v477);
      goto LABEL_325;
    case 0x87u:
      long long v478 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v478;
      long long v479 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v479;
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      uint64_t v480 = *(int *)(type metadata accessor for PgQuery_CreateForeignServerStmt(0) + 40);
      uint64_t v481 = a1 + v480;
      uint64_t v482 = a2 + v480;
      uint64_t v483 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v483 - 8) + 32))(v481, v482, v483);
      goto LABEL_325;
    case 0x88u:
      long long v484 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v484;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      uint64_t v485 = *(int *)(type metadata accessor for PgQuery_AlterForeignServerStmt(0) + 32);
      uint64_t v486 = a1 + v485;
      uint64_t v487 = a2 + v485;
      uint64_t v488 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v488 - 8) + 32))(v486, v487, v488);
      goto LABEL_325;
    case 0x89u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      UserMappinguint64_t Stmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
      uint64_t v490 = *(int *)(UserMappingStmt + 28);
      uint64_t v491 = a1 + v490;
      uint64_t v492 = a2 + v490;
      uint64_t v158 = type metadata accessor for UnknownStorage();
      v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
      v159(v491, v492, v158);
      uint64_t v493 = *(int *)(UserMappingStmt + 32);
      v161 = (void *)(a1 + v493);
      v162 = (void *)(a2 + v493);
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v164 = *(void *)(RoleSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
        goto LABEL_161;
      }
      goto LABEL_285;
    case 0x8Au:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      AlterUserMappinguint64_t Stmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
      uint64_t v495 = *(int *)(AlterUserMappingStmt + 24);
      uint64_t v496 = a1 + v495;
      uint64_t v497 = a2 + v495;
      uint64_t v158 = type metadata accessor for UnknownStorage();
      v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
      v159(v496, v497, v158);
      uint64_t v498 = *(int *)(AlterUserMappingStmt + 28);
      v161 = (void *)(a1 + v498);
      v162 = (void *)(a2 + v498);
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v164 = *(void *)(RoleSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
        goto LABEL_161;
      }
      goto LABEL_285;
    case 0x8Bu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      DropUserMappinguint64_t Stmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
      uint64_t v500 = *(int *)(DropUserMappingStmt + 24);
      uint64_t v501 = a1 + v500;
      uint64_t v502 = a2 + v500;
      uint64_t v158 = type metadata accessor for UnknownStorage();
      v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
      v159(v501, v502, v158);
      uint64_t v503 = *(int *)(DropUserMappingStmt + 28);
      v161 = (void *)(a1 + v503);
      v162 = (void *)(a2 + v503);
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v164 = *(void *)(RoleSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec))
      {
LABEL_161:
        uint64_t v504 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
        memcpy(v161, v162, *(void *)(*(void *)(v504 - 8) + 64));
      }
      else
      {
LABEL_285:
        void *v161 = *v162;
        *((unsigned char *)v161 + 8) = *((unsigned char *)v162 + 8);
        *((_OWORD *)v161 + 1) = *((_OWORD *)v162 + 1);
        *((_DWORD *)v161 + 8) = *((_DWORD *)v162 + 8);
        v159((uint64_t)v161 + *(int *)(RoleSpec + 28), (uint64_t)v162 + *(int *)(RoleSpec + 28), v158);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, RoleSpec);
      }
      goto LABEL_325;
    case 0x8Cu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t v505 = *(int *)(type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0) + 28);
      uint64_t v506 = a1 + v505;
      uint64_t v507 = a2 + v505;
      uint64_t v508 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v508 - 8) + 32))(v506, v507, v508);
      goto LABEL_325;
    case 0x8Du:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v509 = *(int *)(type metadata accessor for PgQuery_AlterTableMoveAllStmt(0) + 36);
      uint64_t v510 = a1 + v509;
      uint64_t v511 = a2 + v509;
      uint64_t v512 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v512 - 8) + 32))(v510, v511, v512);
      goto LABEL_325;
    case 0x8Eu:
      uint64_t v513 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v513 - 8) + 32))(a1, a2, v513);
      SecLabeluint64_t Stmt = type metadata accessor for PgQuery_SecLabelStmt(0);
      *(void *)(a1 + *(int *)(SecLabelStmt + 20)) = *(void *)(a2 + *(int *)(SecLabelStmt + 20));
      goto LABEL_325;
    case 0x8Fu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      ForeignTableuint64_t Stmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
      uint64_t v516 = *(int *)(ForeignTableStmt + 24);
      uint64_t v517 = a1 + v516;
      uint64_t v518 = a2 + v516;
      uint64_t v519 = type metadata accessor for UnknownStorage();
      v520 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v519 - 8) + 32);
      v520(v517, v518, v519);
      uint64_t v521 = *(int *)(ForeignTableStmt + 28);
      v522 = (char *)(a1 + v521);
      v523 = (char *)(a2 + v521);
      uint64_t v524 = type metadata accessor for PgQuery_CreateStmt(0);
      uint64_t v525 = *(void *)(v524 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v525 + 48))(v523, 1, v524))
      {
        uint64_t v526 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
        memcpy(v522, v523, *(void *)(*(void *)(v526 - 8) + 64));
      }
      else
      {
        v520((uint64_t)v522, (uint64_t)v523, v519);
        *(void *)&v522[*(int *)(v524 + 20)] = *(void *)&v523[*(int *)(v524 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v525 + 56))(v522, 0, 1, v524);
      }
      goto LABEL_325;
    case 0x90u:
      long long v527 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v527;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      uint64_t v528 = *(int *)(type metadata accessor for PgQuery_ImportForeignSchemaStmt(0) + 40);
      uint64_t v529 = a1 + v528;
      uint64_t v530 = a2 + v528;
      uint64_t v531 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v531 - 8) + 32))(v529, v530, v531);
      goto LABEL_325;
    case 0x91u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v532 = *(int *)(type metadata accessor for PgQuery_CreateExtensionStmt(0) + 28);
      uint64_t v533 = a1 + v532;
      uint64_t v534 = a2 + v532;
      uint64_t v535 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v535 - 8) + 32))(v533, v534, v535);
      goto LABEL_325;
    case 0x92u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v536 = *(int *)(type metadata accessor for PgQuery_AlterExtensionStmt(0) + 24);
      uint64_t v537 = a1 + v536;
      uint64_t v538 = a2 + v536;
      uint64_t v539 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v539 - 8) + 32))(v537, v538, v539);
      goto LABEL_325;
    case 0x93u:
      uint64_t v540 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v540 - 8) + 32))(a1, a2, v540);
      AlterExtensionContentsuint64_t Stmt = type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
      *(void *)(a1 + *(int *)(AlterExtensionContentsStmt + 20)) = *(void *)(a2
                                                                              + *(int *)(AlterExtensionContentsStmt + 20));
      goto LABEL_325;
    case 0x94u:
      long long v542 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v542;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      uint64_t v543 = *(int *)(type metadata accessor for PgQuery_CreateEventTrigStmt(0) + 32);
      uint64_t v544 = a1 + v543;
      uint64_t v545 = a2 + v543;
      uint64_t v546 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v546 - 8) + 32))(v544, v545, v546);
      goto LABEL_325;
    case 0x95u:
      long long v547 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v547;
      uint64_t v548 = *(int *)(type metadata accessor for PgQuery_AlterEventTrigStmt(0) + 24);
      uint64_t v549 = a1 + v548;
      uint64_t v550 = a2 + v548;
      uint64_t v551 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v551 - 8) + 32))(v549, v550, v551);
      goto LABEL_325;
    case 0x96u:
      *(_WORD *)a1 = *(_WORD *)a2;
      RefreshMatViewuint64_t Stmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
      uint64_t v553 = *(int *)(RefreshMatViewStmt + 24);
      uint64_t v554 = a1 + v553;
      uint64_t v555 = a2 + v553;
      uint64_t v136 = type metadata accessor for UnknownStorage();
      v556 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
      v556(v554, v555, v136);
      uint64_t v557 = *(int *)(RefreshMatViewStmt + 28);
      uint64_t v139 = a1 + v557;
      uint64_t v140 = a2 + v557;
      uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v142 = *(void *)(v141 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
        goto LABEL_229;
      }
      long long v847 = *(_OWORD *)(v140 + 16);
      *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
      *(_OWORD *)(v139 + 16) = v847;
      *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
      *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
      *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
      *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
      v892 = (void (*)(char *, char *, uint64_t))v556;
      v556(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
      uint64_t v848 = *(int *)(v141 + 44);
      __dsta = (void *)(v139 + v848);
      v827 = (void *)(v140 + v848);
      uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v829 = *(void *)(v828 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
        goto LABEL_303;
      }
      goto LABEL_323;
    case 0x97u:
      long long v558 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v558;
      uint64_t v559 = *(int *)(type metadata accessor for PgQuery_ReplicaIdentityStmt(0) + 24);
      uint64_t v560 = a1 + v559;
      uint64_t v561 = a2 + v559;
      uint64_t v562 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v562 - 8) + 32))(v560, v561, v562);
      goto LABEL_325;
    case 0x98u:
      uint64_t v563 = type metadata accessor for UnknownStorage();
      v564 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v563 - 8) + 32);
      v564(a1, a2, v563);
      uint64_t v565 = *(int *)(type metadata accessor for PgQuery_AlterSystemStmt(0) + 20);
      uint64_t v358 = a1 + v565;
      uint64_t v359 = a2 + v565;
      uint64_t v566 = type metadata accessor for PgQuery_VariableSetStmt(0);
      uint64_t v567 = *(void *)(v566 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v567 + 48))(v359, 1, v566))
      {
LABEL_120:
        uint64_t v362 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        memcpy((void *)v358, (const void *)v359, *(void *)(*(void *)(v362 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v358 = *(void *)v359;
        *(unsigned char *)(v358 + 8) = *(unsigned char *)(v359 + 8);
        *(_OWORD *)(v358 + 16) = *(_OWORD *)(v359 + 16);
        *(void *)(v358 + 32) = *(void *)(v359 + 32);
        *(unsigned char *)(v358 + 40) = *(unsigned char *)(v359 + 40);
        v564(v358 + *(int *)(v566 + 32), v359 + *(int *)(v566 + 32), v563);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v567 + 56))(v358, 0, 1, v566);
      }
      goto LABEL_325;
    case 0x99u:
      uint64_t v568 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v568 - 8) + 32))(a1, a2, v568);
      Policyuint64_t Stmt = type metadata accessor for PgQuery_CreatePolicyStmt(0);
      *(void *)(a1 + *(int *)(PolicyStmt + 20)) = *(void *)(a2 + *(int *)(PolicyStmt + 20));
      goto LABEL_325;
    case 0x9Au:
      uint64_t v570 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v570 - 8) + 32))(a1, a2, v570);
      AlterPolicyuint64_t Stmt = type metadata accessor for PgQuery_AlterPolicyStmt(0);
      *(void *)(a1 + *(int *)(AlterPolicyStmt + 20)) = *(void *)(a2 + *(int *)(AlterPolicyStmt + 20));
      goto LABEL_325;
    case 0x9Bu:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      Transformuint64_t Stmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
      uint64_t v573 = *(int *)(TransformStmt + 24);
      uint64_t v574 = a1 + v573;
      uint64_t v575 = a2 + v573;
      uint64_t v576 = type metadata accessor for UnknownStorage();
      v577 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v576 - 8) + 32);
      v577(v574, v575, v576);
      uint64_t v891 = TransformStmt;
      uint64_t v578 = *(int *)(TransformStmt + 28);
      v579 = (void *)(a1 + v578);
      v580 = (void *)(a2 + v578);
      uint64_t v581 = type metadata accessor for PgQuery_TypeName(0);
      uint64_t v582 = *(void *)(v581 - 8);
      v885 = v577;
      uint64_t v888 = v576;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v582 + 48))(v580, 1, v581))
      {
        uint64_t v583 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
        memcpy(v579, v580, *(void *)(*(void *)(v583 - 8) + 64));
      }
      else
      {
        void *v579 = *v580;
        *((_DWORD *)v579 + 2) = *((_DWORD *)v580 + 2);
        *((_WORD *)v579 + 6) = *((_WORD *)v580 + 6);
        v579[2] = v580[2];
        *((_DWORD *)v579 + 6) = *((_DWORD *)v580 + 6);
        v579[4] = v580[4];
        *((_DWORD *)v579 + 10) = *((_DWORD *)v580 + 10);
        v577((uint64_t)v579 + *(int *)(v581 + 48), (uint64_t)v580 + *(int *)(v581 + 48), v576);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v582 + 56))(v579, 0, 1, v581);
      }
      uint64_t v849 = *(int *)(v891 + 32);
      v850 = (unsigned char *)(a1 + v849);
      v851 = (unsigned char *)(a2 + v849);
      uint64_t v852 = type metadata accessor for PgQuery_ObjectWithArgs(0);
      uint64_t v853 = *(void *)(v852 - 8);
      v854 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v853 + 48);
      if (v854(v851, 1, v852))
      {
        uint64_t v855 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        memcpy(v850, v851, *(void *)(*(void *)(v855 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v850 = *(_OWORD *)v851;
        v850[16] = v851[16];
        v885((uint64_t)&v850[*(int *)(v852 + 28)], (uint64_t)&v851[*(int *)(v852 + 28)], v888);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v853 + 56))(v850, 0, 1, v852);
      }
      uint64_t v874 = *(int *)(v891 + 36);
      v875 = (unsigned char *)(a1 + v874);
      v876 = (unsigned char *)(a2 + v874);
      if (v854(v876, 1, v852))
      {
        uint64_t v877 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        memcpy(v875, v876, *(void *)(*(void *)(v877 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v875 = *(_OWORD *)v876;
        v875[16] = v876[16];
        v885((uint64_t)&v875[*(int *)(v852 + 28)], (uint64_t)&v876[*(int *)(v852 + 28)], v888);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v853 + 56))(v875, 0, 1, v852);
      }
      goto LABEL_325;
    case 0x9Cu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      uint64_t v584 = *(int *)(type metadata accessor for PgQuery_CreateAmStmt(0) + 28);
      uint64_t v585 = a1 + v584;
      uint64_t v586 = a2 + v584;
      uint64_t v587 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v587 - 8) + 32))(v585, v586, v587);
      goto LABEL_325;
    case 0x9Du:
      long long v588 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v588;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v589 = *(int *)(type metadata accessor for PgQuery_CreatePublicationStmt(0) + 32);
      uint64_t v590 = a1 + v589;
      uint64_t v591 = a2 + v589;
      uint64_t v592 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v592 - 8) + 32))(v590, v591, v592);
      goto LABEL_325;
    case 0x9Eu:
      long long v593 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v593;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      uint64_t v594 = *(int *)(type metadata accessor for PgQuery_AlterPublicationStmt(0) + 36);
      uint64_t v595 = a1 + v594;
      uint64_t v596 = a2 + v594;
      uint64_t v597 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v597 - 8) + 32))(v595, v596, v597);
      goto LABEL_325;
    case 0x9Fu:
      long long v598 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v598;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      uint64_t v599 = *(int *)(type metadata accessor for PgQuery_CreateSubscriptionStmt(0) + 32);
      uint64_t v600 = a1 + v599;
      uint64_t v601 = a2 + v599;
      uint64_t v602 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v602 - 8) + 32))(v600, v601, v602);
      goto LABEL_325;
    case 0xA0u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      long long v603 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v603;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      uint64_t v604 = *(int *)(type metadata accessor for PgQuery_AlterSubscriptionStmt(0) + 36);
      uint64_t v605 = a1 + v604;
      uint64_t v606 = a2 + v604;
      uint64_t v607 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v607 - 8) + 32))(v605, v606, v607);
      goto LABEL_325;
    case 0xA1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v608 = *(int *)(type metadata accessor for PgQuery_DropSubscriptionStmt(0) + 28);
      uint64_t v609 = a1 + v608;
      uint64_t v610 = a2 + v608;
      uint64_t v611 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v611 - 8) + 32))(v609, v610, v611);
      goto LABEL_325;
    case 0xA2u:
      long long v612 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v612;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      uint64_t v613 = *(int *)(type metadata accessor for PgQuery_CreateStatsStmt(0) + 40);
      uint64_t v614 = a1 + v613;
      uint64_t v615 = a2 + v613;
      uint64_t v616 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v616 - 8) + 32))(v614, v615, v616);
      goto LABEL_325;
    case 0xA3u:
      *(void *)a1 = *(void *)a2;
      uint64_t v617 = *(int *)(type metadata accessor for PgQuery_AlterCollationStmt(0) + 20);
      uint64_t v618 = a1 + v617;
      uint64_t v619 = a2 + v617;
      uint64_t v620 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v620 - 8) + 32))(v618, v619, v620);
      goto LABEL_325;
    case 0xA4u:
      uint64_t v621 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v621 - 8) + 32))(a1, a2, v621);
      uint64_t v622 = type metadata accessor for PgQuery_CallStmt(0);
      *(void *)(a1 + *(int *)(v622 + 20)) = *(void *)(a2 + *(int *)(v622 + 20));
      goto LABEL_325;
    case 0xA5u:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
      uint64_t v623 = *(int *)(type metadata accessor for PgQuery_AlterStatsStmt(0) + 28);
      uint64_t v624 = a1 + v623;
      uint64_t v625 = a2 + v623;
      uint64_t v626 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v626 - 8) + 32))(v624, v625, v626);
      goto LABEL_325;
    case 0xA6u:
      uint64_t v627 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v627 - 8) + 32))(a1, a2, v627);
      uint64_t A_Expr = type metadata accessor for PgQuery_A_Expr(0);
      *(void *)(a1 + *(int *)(A_Expr + 20)) = *(void *)(a2 + *(int *)(A_Expr + 20));
      goto LABEL_325;
    case 0xA7u:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      uint64_t v629 = *(int *)(type metadata accessor for PgQuery_ColumnRef(0) + 24);
      uint64_t v630 = a1 + v629;
      uint64_t v631 = a2 + v629;
      uint64_t v632 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v632 - 8) + 32))(v630, v631, v632);
      goto LABEL_325;
    case 0xA8u:
      *(void *)a1 = *(void *)a2;
      uint64_t v633 = *(int *)(type metadata accessor for PgQuery_ParamRef(0) + 24);
      uint64_t v634 = a1 + v633;
      uint64_t v635 = a2 + v633;
      uint64_t v636 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v636 - 8) + 32))(v634, v635, v636);
      goto LABEL_325;
    case 0xA9u:
      uint64_t v637 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v637 - 8) + 32))(a1, a2, v637);
      uint64_t A_Const = type metadata accessor for PgQuery_A_Const(0);
      *(void *)(a1 + *(int *)(A_Const + 20)) = *(void *)(a2 + *(int *)(A_Const + 20));
      goto LABEL_325;
    case 0xAAu:
      uint64_t v639 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v639 - 8) + 32))(a1, a2, v639);
      uint64_t v640 = type metadata accessor for PgQuery_FuncCall(0);
      *(void *)(a1 + *(int *)(v640 + 20)) = *(void *)(a2 + *(int *)(v640 + 20));
      goto LABEL_325;
    case 0xACu:
      uint64_t v641 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v641 - 8) + 32))(a1, a2, v641);
      uint64_t A_Indices = type metadata accessor for PgQuery_A_Indices(0);
      *(void *)(a1 + *(int *)(A_Indices + 20)) = *(void *)(a2 + *(int *)(A_Indices + 20));
      goto LABEL_325;
    case 0xADu:
      uint64_t v643 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v643 - 8) + 32))(a1, a2, v643);
      uint64_t A_Indirection = type metadata accessor for PgQuery_A_Indirection(0);
      *(void *)(a1 + *(int *)(A_Indirection + 20)) = *(void *)(a2 + *(int *)(A_Indirection + 20));
      goto LABEL_325;
    case 0xAEu:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      uint64_t v645 = *(int *)(type metadata accessor for PgQuery_A_ArrayExpr(0) + 24);
      uint64_t v646 = a1 + v645;
      uint64_t v647 = a2 + v645;
      uint64_t v648 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v648 - 8) + 32))(v646, v647, v648);
      goto LABEL_325;
    case 0xAFu:
      uint64_t v649 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v649 - 8) + 32))(a1, a2, v649);
      uint64_t ResTarget = type metadata accessor for PgQuery_ResTarget(0);
      *(void *)(a1 + *(int *)(ResTarget + 20)) = *(void *)(a2 + *(int *)(ResTarget + 20));
      goto LABEL_325;
    case 0xB0u:
      uint64_t v651 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v651 - 8) + 32))(a1, a2, v651);
      uint64_t MultiAssignRef = type metadata accessor for PgQuery_MultiAssignRef(0);
      *(void *)(a1 + *(int *)(MultiAssignRef + 20)) = *(void *)(a2 + *(int *)(MultiAssignRef + 20));
      goto LABEL_325;
    case 0xB1u:
      uint64_t v653 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v653 - 8) + 32))(a1, a2, v653);
      uint64_t TypeCast = type metadata accessor for PgQuery_TypeCast(0);
      *(void *)(a1 + *(int *)(TypeCast + 20)) = *(void *)(a2 + *(int *)(TypeCast + 20));
      goto LABEL_325;
    case 0xB2u:
      uint64_t v655 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v655 - 8) + 32))(a1, a2, v655);
      uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
      *(void *)(a1 + *(int *)(CollateClause + 20)) = *(void *)(a2 + *(int *)(CollateClause + 20));
      goto LABEL_325;
    case 0xB3u:
      uint64_t v657 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v657 - 8) + 32))(a1, a2, v657);
      uint64_t SortBy = type metadata accessor for PgQuery_SortBy(0);
      *(void *)(a1 + *(int *)(SortBy + 20)) = *(void *)(a2 + *(int *)(SortBy + 20));
      goto LABEL_325;
    case 0xB4u:
      uint64_t v659 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v659 - 8) + 32))(a1, a2, v659);
      uint64_t WindowDef = type metadata accessor for PgQuery_WindowDef(0);
      *(void *)(a1 + *(int *)(WindowDef + 20)) = *(void *)(a2 + *(int *)(WindowDef + 20));
      goto LABEL_325;
    case 0xB5u:
      uint64_t v661 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v661 - 8) + 32))(a1, a2, v661);
      uint64_t RangeSubselect = type metadata accessor for PgQuery_RangeSubselect(0);
      *(void *)(a1 + *(int *)(RangeSubselect + 20)) = *(void *)(a2 + *(int *)(RangeSubselect + 20));
      goto LABEL_325;
    case 0xB6u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      uint64_t RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
      uint64_t v664 = *(int *)(RangeFunction + 36);
      uint64_t v665 = a1 + v664;
      uint64_t v666 = a2 + v664;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);
      v14(v665, v666, v13);
      uint64_t v667 = *(int *)(RangeFunction + 40);
      v16 = (void *)(a1 + v667);
      v17 = (void *)(a2 + v667);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v19 = *(void *)(Alias - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, Alias))
      {
LABEL_4:
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
LABEL_258:
        *(_OWORD *)v16 = *(_OWORD *)v17;
        v16[2] = v17[2];
        v14((uint64_t)v16 + *(int *)(Alias + 24), (uint64_t)v17 + *(int *)(Alias + 24), v13);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, Alias);
      }
      goto LABEL_325;
    case 0xB7u:
      uint64_t v668 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v668 - 8) + 32))(a1, a2, v668);
      uint64_t RangeTableSample = type metadata accessor for PgQuery_RangeTableSample(0);
      *(void *)(a1 + *(int *)(RangeTableSample + 20)) = *(void *)(a2 + *(int *)(RangeTableSample + 20));
      goto LABEL_325;
    case 0xB8u:
      uint64_t v670 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v670 - 8) + 32))(a1, a2, v670);
      Rangeuint64_t TableFunc = type metadata accessor for PgQuery_RangeTableFunc(0);
      *(void *)(a1 + *(int *)(RangeTableFunc + 20)) = *(void *)(a2 + *(int *)(RangeTableFunc + 20));
      goto LABEL_325;
    case 0xB9u:
      uint64_t v672 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v672 - 8) + 32))(a1, a2, v672);
      uint64_t RangeTableFuncCol = type metadata accessor for PgQuery_RangeTableFuncCol(0);
      *(void *)(a1 + *(int *)(RangeTableFuncCol + 20)) = *(void *)(a2 + *(int *)(RangeTableFuncCol + 20));
      goto LABEL_325;
    case 0xBAu:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      uint64_t v674 = *(int *)(type metadata accessor for PgQuery_TypeName(0) + 48);
      uint64_t v675 = a1 + v674;
      uint64_t v676 = a2 + v674;
      uint64_t v677 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v677 - 8) + 32))(v675, v676, v677);
      goto LABEL_325;
    case 0xBBu:
      uint64_t v678 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v678 - 8) + 32))(a1, a2, v678);
      uint64_t ColumnDef = type metadata accessor for PgQuery_ColumnDef(0);
      *(void *)(a1 + *(int *)(ColumnDef + 20)) = *(void *)(a2 + *(int *)(ColumnDef + 20));
      goto LABEL_325;
    case 0xBCu:
      uint64_t v680 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v680 - 8) + 32))(a1, a2, v680);
      uint64_t IndexElem = type metadata accessor for PgQuery_IndexElem(0);
      *(void *)(a1 + *(int *)(IndexElem + 20)) = *(void *)(a2 + *(int *)(IndexElem + 20));
      goto LABEL_325;
    case 0xBDu:
      uint64_t v682 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v682 - 8) + 32))(a1, a2, v682);
      uint64_t Constraint = type metadata accessor for PgQuery_Constraint(0);
      *(void *)(a1 + *(int *)(Constraint + 20)) = *(void *)(a2 + *(int *)(Constraint + 20));
      goto LABEL_325;
    case 0xBEu:
      uint64_t v684 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v684 - 8) + 32))(a1, a2, v684);
      uint64_t DefElem = type metadata accessor for PgQuery_DefElem(0);
      *(void *)(a1 + *(int *)(DefElem + 20)) = *(void *)(a2 + *(int *)(DefElem + 20));
      goto LABEL_325;
    case 0xBFu:
      uint64_t v686 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v686 - 8) + 32))(a1, a2, v686);
      uint64_t RangeTblEntry = type metadata accessor for PgQuery_RangeTblEntry(0);
      *(void *)(a1 + *(int *)(RangeTblEntry + 20)) = *(void *)(a2 + *(int *)(RangeTblEntry + 20));
      goto LABEL_325;
    case 0xC0u:
      uint64_t v688 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v688 - 8) + 32))(a1, a2, v688);
      uint64_t RangeTblFunction = type metadata accessor for PgQuery_RangeTblFunction(0);
      *(void *)(a1 + *(int *)(RangeTblFunction + 20)) = *(void *)(a2 + *(int *)(RangeTblFunction + 20));
      goto LABEL_325;
    case 0xC1u:
      uint64_t v690 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v690 - 8) + 32))(a1, a2, v690);
      uint64_t TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
      *(void *)(a1 + *(int *)(TableSampleClause + 20)) = *(void *)(a2 + *(int *)(TableSampleClause + 20));
      goto LABEL_325;
    case 0xC2u:
      uint64_t v692 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v692 - 8) + 32))(a1, a2, v692);
      uint64_t v693 = type metadata accessor for PgQuery_WithCheckOption(0);
      *(void *)(a1 + *(int *)(v693 + 20)) = *(void *)(a2 + *(int *)(v693 + 20));
      goto LABEL_325;
    case 0xC3u:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
      uint64_t v694 = *(int *)(type metadata accessor for PgQuery_SortGroupClause(0) + 36);
      uint64_t v695 = a1 + v694;
      uint64_t v696 = a2 + v694;
      uint64_t v697 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v697 - 8) + 32))(v695, v696, v697);
      goto LABEL_325;
    case 0xC4u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      uint64_t v698 = *(int *)(type metadata accessor for PgQuery_GroupingSet(0) + 28);
      uint64_t v699 = a1 + v698;
      uint64_t v700 = a2 + v698;
      uint64_t v701 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v701 - 8) + 32))(v699, v700, v701);
      goto LABEL_325;
    case 0xC5u:
      uint64_t v702 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v702 - 8) + 32))(a1, a2, v702);
      uint64_t WindowClause = type metadata accessor for PgQuery_WindowClause(0);
      *(void *)(a1 + *(int *)(WindowClause + 20)) = *(void *)(a2 + *(int *)(WindowClause + 20));
      goto LABEL_325;
    case 0xC6u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      uint64_t v704 = *(int *)(type metadata accessor for PgQuery_ObjectWithArgs(0) + 28);
      uint64_t v705 = a1 + v704;
      uint64_t v706 = a2 + v704;
      uint64_t v707 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v707 - 8) + 32))(v705, v706, v707);
      goto LABEL_325;
    case 0xC7u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v708 = *(int *)(type metadata accessor for PgQuery_AccessPriv(0) + 24);
      uint64_t v709 = a1 + v708;
      uint64_t v710 = a2 + v708;
      uint64_t v711 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v711 - 8) + 32))(v709, v710, v711);
      goto LABEL_325;
    case 0xC8u:
      *(void *)a1 = *(void *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      OpClassItem = (int *)type metadata accessor for PgQuery_CreateOpClassItem(0);
      uint64_t v713 = OpClassItem[8];
      uint64_t v714 = a1 + v713;
      uint64_t v715 = a2 + v713;
      uint64_t v716 = type metadata accessor for UnknownStorage();
      v717 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v716 - 8) + 32);
      v717(v714, v715, v716);
      uint64_t v718 = OpClassItem[9];
      v719 = (unsigned char *)(a1 + v718);
      v720 = (unsigned char *)(a2 + v718);
      uint64_t v721 = type metadata accessor for PgQuery_ObjectWithArgs(0);
      uint64_t v722 = *(void *)(v721 - 8);
      uint64_t v889 = v716;
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v722 + 48))(v720, 1, v721))
      {
        uint64_t v723 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        memcpy(v719, v720, *(void *)(*(void *)(v723 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v719 = *(_OWORD *)v720;
        v719[16] = v720[16];
        v717((uint64_t)&v719[*(int *)(v721 + 28)], (uint64_t)&v720[*(int *)(v721 + 28)], v716);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v722 + 56))(v719, 0, 1, v721);
      }
      uint64_t v856 = OpClassItem[10];
      v857 = (void *)(a1 + v856);
      v858 = (void *)(a2 + v856);
      uint64_t v859 = type metadata accessor for PgQuery_TypeName(0);
      uint64_t v860 = *(void *)(v859 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v860 + 48))(v858, 1, v859))
      {
        uint64_t v861 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
        memcpy(v857, v858, *(void *)(*(void *)(v861 - 8) + 64));
      }
      else
      {
        void *v857 = *v858;
        *((_DWORD *)v857 + 2) = *((_DWORD *)v858 + 2);
        *((_WORD *)v857 + 6) = *((_WORD *)v858 + 6);
        v857[2] = v858[2];
        *((_DWORD *)v857 + 6) = *((_DWORD *)v858 + 6);
        v857[4] = v858[4];
        *((_DWORD *)v857 + 10) = *((_DWORD *)v858 + 10);
        v717((uint64_t)v857 + *(int *)(v859 + 48), (uint64_t)v858 + *(int *)(v859 + 48), v889);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v860 + 56))(v857, 0, 1, v859);
      }
      goto LABEL_325;
    case 0xC9u:
      *(void *)a1 = *(void *)a2;
      uint64_t TableLikeClause = type metadata accessor for PgQuery_TableLikeClause(0);
      uint64_t v725 = *(int *)(TableLikeClause + 24);
      uint64_t v726 = a1 + v725;
      uint64_t v727 = a2 + v725;
      uint64_t v136 = type metadata accessor for UnknownStorage();
      v728 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
      v728(v726, v727, v136);
      uint64_t v729 = *(int *)(TableLikeClause + 28);
      uint64_t v139 = a1 + v729;
      uint64_t v140 = a2 + v729;
      uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v142 = *(void *)(v141 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
        goto LABEL_229;
      }
      long long v862 = *(_OWORD *)(v140 + 16);
      *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
      *(_OWORD *)(v139 + 16) = v862;
      *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
      *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
      *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
      *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
      v892 = (void (*)(char *, char *, uint64_t))v728;
      v728(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
      uint64_t v863 = *(int *)(v141 + 44);
      __dsta = (void *)(v139 + v863);
      v827 = (void *)(v140 + v863);
      uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v829 = *(void *)(v828 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
        goto LABEL_303;
      }
      goto LABEL_323;
    case 0xCAu:
      uint64_t v731 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v731 - 8) + 32))(a1, a2, v731);
      uint64_t FunctionParameter = type metadata accessor for PgQuery_FunctionParameter(0);
      *(void *)(a1 + *(int *)(FunctionParameter + 20)) = *(void *)(a2 + *(int *)(FunctionParameter + 20));
      goto LABEL_325;
    case 0xCBu:
      uint64_t v733 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v733;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v734 = *(int *)(type metadata accessor for PgQuery_LockingClause(0) + 28);
      uint64_t v735 = a1 + v734;
      uint64_t v736 = a2 + v734;
      uint64_t v737 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v737 - 8) + 32))(v735, v736, v737);
      goto LABEL_325;
    case 0xCCu:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
      uint64_t v738 = *(int *)(type metadata accessor for PgQuery_RowMarkClause(0) + 32);
      uint64_t v739 = a1 + v738;
      uint64_t v740 = a2 + v738;
      uint64_t v741 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v741 - 8) + 32))(v739, v740, v741);
      goto LABEL_325;
    case 0xCDu:
      uint64_t v742 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v742 - 8) + 32))(a1, a2, v742);
      uint64_t XmlSerialize = type metadata accessor for PgQuery_XmlSerialize(0);
      *(void *)(a1 + *(int *)(XmlSerialize + 20)) = *(void *)(a2 + *(int *)(XmlSerialize + 20));
      goto LABEL_325;
    case 0xCEu:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      uint64_t v744 = *(int *)(type metadata accessor for PgQuery_WithClause(0) + 28);
      uint64_t v745 = a1 + v744;
      uint64_t v746 = a2 + v744;
      uint64_t v747 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v747 - 8) + 32))(v745, v746, v747);
      goto LABEL_325;
    case 0xCFu:
      uint64_t v748 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v748 - 8) + 32))(a1, a2, v748);
      uint64_t InferClause = type metadata accessor for PgQuery_InferClause(0);
      *(void *)(a1 + *(int *)(InferClause + 20)) = *(void *)(a2 + *(int *)(InferClause + 20));
      goto LABEL_325;
    case 0xD0u:
      uint64_t v750 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v750 - 8) + 32))(a1, a2, v750);
      uint64_t v751 = type metadata accessor for PgQuery_OnConflictClause(0);
      *(void *)(a1 + *(int *)(v751 + 20)) = *(void *)(a2 + *(int *)(v751 + 20));
      goto LABEL_325;
    case 0xD1u:
      uint64_t v752 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v752 - 8) + 32))(a1, a2, v752);
      uint64_t CommonTableExpr = type metadata accessor for PgQuery_CommonTableExpr(0);
      *(void *)(a1 + *(int *)(CommonTableExpr + 20)) = *(void *)(a2 + *(int *)(CommonTableExpr + 20));
      goto LABEL_325;
    case 0xD2u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      uint64_t v754 = *(int *)(type metadata accessor for PgQuery_RoleSpec(0) + 28);
      uint64_t v755 = a1 + v754;
      uint64_t v756 = a2 + v754;
      uint64_t v757 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v757 - 8) + 32))(v755, v756, v757);
      goto LABEL_325;
    case 0xD3u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      uint64_t v758 = *(int *)(type metadata accessor for PgQuery_TriggerTransition(0) + 28);
      uint64_t v759 = a1 + v758;
      uint64_t v760 = a2 + v758;
      uint64_t v761 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v761 - 8) + 32))(v759, v760, v761);
      goto LABEL_325;
    case 0xD4u:
      uint64_t v762 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v762 - 8) + 32))(a1, a2, v762);
      uint64_t PartitionElem = type metadata accessor for PgQuery_PartitionElem(0);
      *(void *)(a1 + *(int *)(PartitionElem + 20)) = *(void *)(a2 + *(int *)(PartitionElem + 20));
      goto LABEL_325;
    case 0xD5u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      uint64_t v764 = *(int *)(type metadata accessor for PgQuery_PartitionSpec(0) + 28);
      uint64_t v765 = a1 + v764;
      uint64_t v766 = a2 + v764;
      uint64_t v767 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v767 - 8) + 32))(v765, v766, v767);
      goto LABEL_325;
    case 0xD6u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 20) = *(void *)(a2 + 20);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      uint64_t v768 = *(int *)(type metadata accessor for PgQuery_PartitionBoundSpec(0) + 48);
      uint64_t v769 = a1 + v768;
      uint64_t v770 = a2 + v768;
      uint64_t v771 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v771 - 8) + 32))(v769, v770, v771);
      goto LABEL_325;
    case 0xD7u:
      uint64_t v772 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v772 - 8) + 32))(a1, a2, v772);
      uint64_t PartitionRangeDatum = type metadata accessor for PgQuery_PartitionRangeDatum(0);
      *(void *)(a1 + *(int *)(PartitionRangeDatum + 20)) = *(void *)(a2 + *(int *)(PartitionRangeDatum + 20));
      goto LABEL_325;
    case 0xD8u:
      uint64_t v774 = type metadata accessor for UnknownStorage();
      v775 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v774 - 8) + 32);
      v775(a1, a2, v774);
      __dst = (int *)type metadata accessor for PgQuery_PartitionCmd(0);
      uint64_t v776 = __dst[5];
      v777 = (_OWORD *)(a1 + v776);
      v778 = (_OWORD *)(a2 + v776);
      uint64_t v779 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v780 = *(void *)(v779 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v780 + 48))(v778, 1, v779))
      {
        uint64_t v781 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
        memcpy(v777, v778, *(void *)(*(void *)(v781 - 8) + 64));
      }
      else
      {
        long long v864 = v778[1];
        _OWORD *v777 = *v778;
        v777[1] = v864;
        v777[2] = v778[2];
        *((unsigned char *)v777 + 48) = *((unsigned char *)v778 + 48);
        *(_OWORD *)((char *)v777 + 56) = *(_OWORD *)((char *)v778 + 56);
        *((_DWORD *)v777 + 18) = *((_DWORD *)v778 + 18);
        v775((uint64_t)v777 + *(int *)(v779 + 40), (uint64_t)v778 + *(int *)(v779 + 40), v774);
        uint64_t v865 = *(int *)(v779 + 44);
        v886 = (void *)((char *)v777 + v865);
        v866 = (void *)((char *)v778 + v865);
        v890 = (void (*)(char *, char *, uint64_t))v775;
        uint64_t v867 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v868 = v774;
        uint64_t v869 = *(void *)(v867 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v869 + 48))(v866, 1, v867))
        {
          uint64_t v870 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
          memcpy(v886, v866, *(void *)(*(void *)(v870 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v886 = *(_OWORD *)v866;
          v886[2] = v866[2];
          v890((char *)v886 + *(int *)(v867 + 24), (char *)v866 + *(int *)(v867 + 24), v868);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v869 + 56))(v886, 0, 1, v867);
        }
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v780 + 56))(v777, 0, 1, v779);
        uint64_t v774 = v868;
        v775 = (void (*)(uint64_t, uint64_t, uint64_t))v890;
      }
      uint64_t v878 = __dst[6];
      v879 = (_OWORD *)(a1 + v878);
      v880 = (_OWORD *)(a2 + v878);
      uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
      uint64_t v882 = *(void *)(PartitionBoundSpec - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v882 + 48))(v880, 1, PartitionBoundSpec))
      {
        uint64_t v883 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
        memcpy(v879, v880, *(void *)(*(void *)(v883 - 8) + 64));
      }
      else
      {
        _OWORD *v879 = *v880;
        *((unsigned char *)v879 + 16) = *((unsigned char *)v880 + 16);
        *(void *)((char *)v879 + 20) = *(void *)((char *)v880 + 20);
        v879[2] = v880[2];
        *((void *)v879 + 6) = *((void *)v880 + 6);
        *((_DWORD *)v879 + 14) = *((_DWORD *)v880 + 14);
        v775((uint64_t)v879 + *(int *)(PartitionBoundSpec + 48), (uint64_t)v880 + *(int *)(PartitionBoundSpec + 48), v774);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v882 + 56))(v879, 0, 1, PartitionBoundSpec);
      }
      goto LABEL_325;
    case 0xD9u:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      uint64_t VacuumRelation = type metadata accessor for PgQuery_VacuumRelation(0);
      uint64_t v783 = *(int *)(VacuumRelation + 24);
      uint64_t v784 = a1 + v783;
      uint64_t v785 = a2 + v783;
      uint64_t v136 = type metadata accessor for UnknownStorage();
      v786 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
      v786(v784, v785, v136);
      uint64_t v787 = *(int *)(VacuumRelation + 28);
      uint64_t v139 = a1 + v787;
      uint64_t v140 = a2 + v787;
      uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v142 = *(void *)(v141 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141))
      {
LABEL_229:
        uint64_t v730 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
        memcpy((void *)v139, (const void *)v140, *(void *)(*(void *)(v730 - 8) + 64));
      }
      else
      {
        long long v871 = *(_OWORD *)(v140 + 16);
        *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
        *(_OWORD *)(v139 + 16) = v871;
        *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
        *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
        *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
        *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
        v892 = (void (*)(char *, char *, uint64_t))v786;
        v786(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
        uint64_t v872 = *(int *)(v141 + 44);
        __dsta = (void *)(v139 + v872);
        v827 = (void *)(v140 + v872);
        uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v829 = *(void *)(v828 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828))
        {
LABEL_303:
          uint64_t v873 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
          memcpy(__dsta, v827, *(void *)(*(void *)(v873 - 8) + 64));
        }
        else
        {
LABEL_323:
          *(_OWORD *)__dsta = *(_OWORD *)v827;
          __dsta[2] = v827[2];
          v892((char *)__dsta + *(int *)(v828 + 24), (char *)v827 + *(int *)(v828 + 24), v136);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v829 + 56))(__dsta, 0, 1, v828);
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v142 + 56))(v139, 0, 1, v141);
      }
LABEL_325:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xDAu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
      uint64_t v788 = *(int *)(type metadata accessor for PgQuery_InlineCodeBlock(0) + 32);
      uint64_t v789 = a1 + v788;
      uint64_t v790 = a2 + v788;
      uint64_t v791 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v791 - 8) + 32))(v789, v790, v791);
      goto LABEL_325;
    case 0xDBu:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v792 = *(int *)(type metadata accessor for PgQuery_CallContext(0) + 20);
      uint64_t v793 = a1 + v792;
      uint64_t v794 = a2 + v792;
      uint64_t v795 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v795 - 8) + 32))(v793, v794, v795);
      goto LABEL_325;
    case 0xDCu:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      uint64_t v796 = *(int *)(type metadata accessor for PgQuery_Integer(0) + 20);
      uint64_t v797 = a1 + v796;
      uint64_t v798 = a2 + v796;
      uint64_t v799 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v799 - 8) + 32))(v797, v798, v799);
      goto LABEL_325;
    case 0xDDu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v800 = *(int *)(type metadata accessor for PgQuery_Float(0) + 20);
      uint64_t v801 = a1 + v800;
      uint64_t v802 = a2 + v800;
      uint64_t v803 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v803 - 8) + 32))(v801, v802, v803);
      goto LABEL_325;
    case 0xDEu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v804 = *(int *)(type metadata accessor for PgQuery_String(0) + 20);
      uint64_t v805 = a1 + v804;
      uint64_t v806 = a2 + v804;
      uint64_t v807 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v807 - 8) + 32))(v805, v806, v807);
      goto LABEL_325;
    case 0xDFu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v808 = *(int *)(type metadata accessor for PgQuery_BitString(0) + 20);
      uint64_t v809 = a1 + v808;
      uint64_t v810 = a2 + v808;
      uint64_t v811 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v811 - 8) + 32))(v809, v810, v811);
      goto LABEL_325;
    case 0xE1u:
      *(void *)a1 = *(void *)a2;
      uint64_t v813 = *(int *)(type metadata accessor for PgQuery_List(0) + 20);
      uint64_t v814 = a1 + v813;
      uint64_t v815 = a2 + v813;
      uint64_t v816 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v816 - 8) + 32))(v814, v815, v816);
      goto LABEL_325;
    case 0xE2u:
      *(void *)a1 = *(void *)a2;
      uint64_t v817 = *(int *)(type metadata accessor for PgQuery_IntList(0) + 20);
      uint64_t v818 = a1 + v817;
      uint64_t v819 = a2 + v817;
      uint64_t v820 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v820 - 8) + 32))(v818, v819, v820);
      goto LABEL_325;
    case 0xE3u:
      *(void *)a1 = *(void *)a2;
      uint64_t v821 = *(int *)(type metadata accessor for PgQuery_OidList(0) + 20);
      uint64_t v822 = a1 + v821;
      uint64_t v823 = a2 + v821;
      uint64_t v824 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v824 - 8) + 32))(v822, v823, v824);
      goto LABEL_325;
    default:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v4 = *(int *)(type metadata accessor for PgQuery_Alias(0) + 24);
      uint64_t v5 = a1 + v4;
      uint64_t v6 = a2 + v4;
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
      goto LABEL_325;
  }
}

uint64_t assignWithTake for PgQuery_Node.OneOf_Node(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of PgQuery_Alias(a1, type metadata accessor for PgQuery_Node.OneOf_Node);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        long long v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
        uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v10 = *(int *)(RangeVar + 40);
        uint64_t v11 = a1 + v10;
        uint64_t v12 = a2 + v10;
        uint64_t v13 = type metadata accessor for UnknownStorage();
        v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);
        v14(v11, v12, v13);
        uint64_t v15 = *(int *)(RangeVar + 44);
        v16 = (void *)(a1 + v15);
        v17 = (void *)(a2 + v15);
        uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
        uint64_t v19 = *(void *)(Alias - 8);
        if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, Alias)) {
          goto LABEL_259;
        }
        goto LABEL_5;
      case 2u:
        uint64_t v21 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(a1, a2, v21);
        uint64_t TableFunc = type metadata accessor for PgQuery_TableFunc(0);
        *(void *)(a1 + *(int *)(TableFunc + 20)) = *(void *)(a2 + *(int *)(TableFunc + 20));
        goto LABEL_326;
      case 3u:
      case 0x68u:
      case 0xABu:
      case 0xE0u:
        uint64_t v812 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v812 - 8) + 32))(a1, a2, v812);
        goto LABEL_326;
      case 4u:
        uint64_t v23 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(a1, a2, v23);
        uint64_t Var = type metadata accessor for PgQuery_Var(0);
        *(void *)(a1 + *(int *)(Var + 20)) = *(void *)(a2 + *(int *)(Var + 20));
        goto LABEL_326;
      case 5u:
        uint64_t v25 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(a1, a2, v25);
        uint64_t Param = type metadata accessor for PgQuery_Param(0);
        *(void *)(a1 + *(int *)(Param + 20)) = *(void *)(a2 + *(int *)(Param + 20));
        goto LABEL_326;
      case 6u:
        uint64_t v27 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(a1, a2, v27);
        uint64_t Aggref = type metadata accessor for PgQuery_Aggref(0);
        *(void *)(a1 + *(int *)(Aggref + 20)) = *(void *)(a2 + *(int *)(Aggref + 20));
        goto LABEL_326;
      case 7u:
        uint64_t v29 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(a1, a2, v29);
        uint64_t GroupingFunc = type metadata accessor for PgQuery_GroupingFunc(0);
        *(void *)(a1 + *(int *)(GroupingFunc + 20)) = *(void *)(a2 + *(int *)(GroupingFunc + 20));
        goto LABEL_326;
      case 8u:
        uint64_t v31 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(a1, a2, v31);
        uint64_t WindowFunc = type metadata accessor for PgQuery_WindowFunc(0);
        *(void *)(a1 + *(int *)(WindowFunc + 20)) = *(void *)(a2 + *(int *)(WindowFunc + 20));
        goto LABEL_326;
      case 9u:
        uint64_t v33 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
        uint64_t SubscriptingRef = type metadata accessor for PgQuery_SubscriptingRef(0);
        *(void *)(a1 + *(int *)(SubscriptingRef + 20)) = *(void *)(a2 + *(int *)(SubscriptingRef + 20));
        goto LABEL_326;
      case 0xAu:
        uint64_t v35 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32))(a1, a2, v35);
        uint64_t FuncExpr = type metadata accessor for PgQuery_FuncExpr(0);
        *(void *)(a1 + *(int *)(FuncExpr + 20)) = *(void *)(a2 + *(int *)(FuncExpr + 20));
        goto LABEL_326;
      case 0xBu:
        uint64_t v37 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32))(a1, a2, v37);
        uint64_t NamedArgExpr = type metadata accessor for PgQuery_NamedArgExpr(0);
        *(void *)(a1 + *(int *)(NamedArgExpr + 20)) = *(void *)(a2 + *(int *)(NamedArgExpr + 20));
        goto LABEL_326;
      case 0xCu:
        uint64_t v39 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 32))(a1, a2, v39);
        uint64_t OpExpr = type metadata accessor for PgQuery_OpExpr(0);
        *(void *)(a1 + *(int *)(OpExpr + 20)) = *(void *)(a2 + *(int *)(OpExpr + 20));
        goto LABEL_326;
      case 0xDu:
        uint64_t v41 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 32))(a1, a2, v41);
        uint64_t DistinctExpr = type metadata accessor for PgQuery_DistinctExpr(0);
        *(void *)(a1 + *(int *)(DistinctExpr + 20)) = *(void *)(a2 + *(int *)(DistinctExpr + 20));
        goto LABEL_326;
      case 0xEu:
        uint64_t v43 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 32))(a1, a2, v43);
        uint64_t NullIfExpr = type metadata accessor for PgQuery_NullIfExpr(0);
        *(void *)(a1 + *(int *)(NullIfExpr + 20)) = *(void *)(a2 + *(int *)(NullIfExpr + 20));
        goto LABEL_326;
      case 0xFu:
        uint64_t v45 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32))(a1, a2, v45);
        ScalarArrayuint64_t OpExpr = type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
        *(void *)(a1 + *(int *)(ScalarArrayOpExpr + 20)) = *(void *)(a2 + *(int *)(ScalarArrayOpExpr + 20));
        goto LABEL_326;
      case 0x10u:
        uint64_t v47 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 32))(a1, a2, v47);
        uint64_t BoolExpr = type metadata accessor for PgQuery_BoolExpr(0);
        *(void *)(a1 + *(int *)(BoolExpr + 20)) = *(void *)(a2 + *(int *)(BoolExpr + 20));
        goto LABEL_326;
      case 0x11u:
        uint64_t v49 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 32))(a1, a2, v49);
        uint64_t SubLink = type metadata accessor for PgQuery_SubLink(0);
        *(void *)(a1 + *(int *)(SubLink + 20)) = *(void *)(a2 + *(int *)(SubLink + 20));
        goto LABEL_326;
      case 0x12u:
        uint64_t v51 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 32))(a1, a2, v51);
        uint64_t SubPlan = type metadata accessor for PgQuery_SubPlan(0);
        *(void *)(a1 + *(int *)(SubPlan + 20)) = *(void *)(a2 + *(int *)(SubPlan + 20));
        goto LABEL_326;
      case 0x13u:
        uint64_t v53 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 32))(a1, a2, v53);
        Alternativeuint64_t SubPlan = type metadata accessor for PgQuery_AlternativeSubPlan(0);
        *(void *)(a1 + *(int *)(AlternativeSubPlan + 20)) = *(void *)(a2 + *(int *)(AlternativeSubPlan + 20));
        goto LABEL_326;
      case 0x14u:
        uint64_t v55 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 32))(a1, a2, v55);
        uint64_t FieldSelect = type metadata accessor for PgQuery_FieldSelect(0);
        *(void *)(a1 + *(int *)(FieldSelect + 20)) = *(void *)(a2 + *(int *)(FieldSelect + 20));
        goto LABEL_326;
      case 0x15u:
        uint64_t v57 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 32))(a1, a2, v57);
        uint64_t FieldStore = type metadata accessor for PgQuery_FieldStore(0);
        *(void *)(a1 + *(int *)(FieldStore + 20)) = *(void *)(a2 + *(int *)(FieldStore + 20));
        goto LABEL_326;
      case 0x16u:
        uint64_t v59 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 32))(a1, a2, v59);
        uint64_t RelabelType = type metadata accessor for PgQuery_RelabelType(0);
        *(void *)(a1 + *(int *)(RelabelType + 20)) = *(void *)(a2 + *(int *)(RelabelType + 20));
        goto LABEL_326;
      case 0x17u:
        uint64_t v61 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 32))(a1, a2, v61);
        uint64_t CoerceViaIO = type metadata accessor for PgQuery_CoerceViaIO(0);
        *(void *)(a1 + *(int *)(CoerceViaIO + 20)) = *(void *)(a2 + *(int *)(CoerceViaIO + 20));
        goto LABEL_326;
      case 0x18u:
        uint64_t v63 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 32))(a1, a2, v63);
        uint64_t ArrayCoerceExpr = type metadata accessor for PgQuery_ArrayCoerceExpr(0);
        *(void *)(a1 + *(int *)(ArrayCoerceExpr + 20)) = *(void *)(a2 + *(int *)(ArrayCoerceExpr + 20));
        goto LABEL_326;
      case 0x19u:
        uint64_t v65 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 32))(a1, a2, v65);
        uint64_t ConvertRowtypeExpr = type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
        *(void *)(a1 + *(int *)(ConvertRowtypeExpr + 20)) = *(void *)(a2 + *(int *)(ConvertRowtypeExpr + 20));
        goto LABEL_326;
      case 0x1Au:
        uint64_t v67 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 32))(a1, a2, v67);
        uint64_t CollateExpr = type metadata accessor for PgQuery_CollateExpr(0);
        *(void *)(a1 + *(int *)(CollateExpr + 20)) = *(void *)(a2 + *(int *)(CollateExpr + 20));
        goto LABEL_326;
      case 0x1Bu:
        uint64_t v69 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 32))(a1, a2, v69);
        uint64_t CaseExpr = type metadata accessor for PgQuery_CaseExpr(0);
        *(void *)(a1 + *(int *)(CaseExpr + 20)) = *(void *)(a2 + *(int *)(CaseExpr + 20));
        goto LABEL_326;
      case 0x1Cu:
        uint64_t v71 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 32))(a1, a2, v71);
        uint64_t CaseWhen = type metadata accessor for PgQuery_CaseWhen(0);
        *(void *)(a1 + *(int *)(CaseWhen + 20)) = *(void *)(a2 + *(int *)(CaseWhen + 20));
        goto LABEL_326;
      case 0x1Du:
        uint64_t v73 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 32))(a1, a2, v73);
        uint64_t CaseTestExpr = type metadata accessor for PgQuery_CaseTestExpr(0);
        *(void *)(a1 + *(int *)(CaseTestExpr + 20)) = *(void *)(a2 + *(int *)(CaseTestExpr + 20));
        goto LABEL_326;
      case 0x1Eu:
        uint64_t v75 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 32))(a1, a2, v75);
        uint64_t ArrayExpr = type metadata accessor for PgQuery_ArrayExpr(0);
        *(void *)(a1 + *(int *)(ArrayExpr + 20)) = *(void *)(a2 + *(int *)(ArrayExpr + 20));
        goto LABEL_326;
      case 0x1Fu:
        uint64_t v77 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 32))(a1, a2, v77);
        uint64_t RowExpr = type metadata accessor for PgQuery_RowExpr(0);
        *(void *)(a1 + *(int *)(RowExpr + 20)) = *(void *)(a2 + *(int *)(RowExpr + 20));
        goto LABEL_326;
      case 0x20u:
        uint64_t v79 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 32))(a1, a2, v79);
        uint64_t RowCompareExpr = type metadata accessor for PgQuery_RowCompareExpr(0);
        *(void *)(a1 + *(int *)(RowCompareExpr + 20)) = *(void *)(a2 + *(int *)(RowCompareExpr + 20));
        goto LABEL_326;
      case 0x21u:
        uint64_t v81 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 32))(a1, a2, v81);
        uint64_t CoalesceExpr = type metadata accessor for PgQuery_CoalesceExpr(0);
        *(void *)(a1 + *(int *)(CoalesceExpr + 20)) = *(void *)(a2 + *(int *)(CoalesceExpr + 20));
        goto LABEL_326;
      case 0x22u:
        uint64_t v83 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 32))(a1, a2, v83);
        uint64_t MinMaxExpr = type metadata accessor for PgQuery_MinMaxExpr(0);
        *(void *)(a1 + *(int *)(MinMaxExpr + 20)) = *(void *)(a2 + *(int *)(MinMaxExpr + 20));
        goto LABEL_326;
      case 0x23u:
        uint64_t v85 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 32))(a1, a2, v85);
        uint64_t SQLValueFunction = type metadata accessor for PgQuery_SQLValueFunction(0);
        *(void *)(a1 + *(int *)(SQLValueFunction + 20)) = *(void *)(a2 + *(int *)(SQLValueFunction + 20));
        goto LABEL_326;
      case 0x24u:
        uint64_t v87 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 32))(a1, a2, v87);
        uint64_t XmlExpr = type metadata accessor for PgQuery_XmlExpr(0);
        *(void *)(a1 + *(int *)(XmlExpr + 20)) = *(void *)(a2 + *(int *)(XmlExpr + 20));
        goto LABEL_326;
      case 0x25u:
        uint64_t v89 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 32))(a1, a2, v89);
        uint64_t NullTest = type metadata accessor for PgQuery_NullTest(0);
        *(void *)(a1 + *(int *)(NullTest + 20)) = *(void *)(a2 + *(int *)(NullTest + 20));
        goto LABEL_326;
      case 0x26u:
        uint64_t v91 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 32))(a1, a2, v91);
        uint64_t BooleanTest = type metadata accessor for PgQuery_BooleanTest(0);
        *(void *)(a1 + *(int *)(BooleanTest + 20)) = *(void *)(a2 + *(int *)(BooleanTest + 20));
        goto LABEL_326;
      case 0x27u:
        uint64_t v93 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 32))(a1, a2, v93);
        uint64_t CoerceToDomain = type metadata accessor for PgQuery_CoerceToDomain(0);
        *(void *)(a1 + *(int *)(CoerceToDomain + 20)) = *(void *)(a2 + *(int *)(CoerceToDomain + 20));
        goto LABEL_326;
      case 0x28u:
        uint64_t v95 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 32))(a1, a2, v95);
        uint64_t CoerceToDomainValue = type metadata accessor for PgQuery_CoerceToDomainValue(0);
        *(void *)(a1 + *(int *)(CoerceToDomainValue + 20)) = *(void *)(a2 + *(int *)(CoerceToDomainValue + 20));
        goto LABEL_326;
      case 0x29u:
        uint64_t v97 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 32))(a1, a2, v97);
        uint64_t SetToDefault = type metadata accessor for PgQuery_SetToDefault(0);
        *(void *)(a1 + *(int *)(SetToDefault + 20)) = *(void *)(a2 + *(int *)(SetToDefault + 20));
        goto LABEL_326;
      case 0x2Au:
        uint64_t v99 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 32))(a1, a2, v99);
        uint64_t CurrentOfExpr = type metadata accessor for PgQuery_CurrentOfExpr(0);
        *(void *)(a1 + *(int *)(CurrentOfExpr + 20)) = *(void *)(a2 + *(int *)(CurrentOfExpr + 20));
        goto LABEL_326;
      case 0x2Bu:
        uint64_t v101 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 32))(a1, a2, v101);
        uint64_t NextValueExpr = type metadata accessor for PgQuery_NextValueExpr(0);
        *(void *)(a1 + *(int *)(NextValueExpr + 20)) = *(void *)(a2 + *(int *)(NextValueExpr + 20));
        goto LABEL_326;
      case 0x2Cu:
        uint64_t v103 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 32))(a1, a2, v103);
        uint64_t InferenceElem = type metadata accessor for PgQuery_InferenceElem(0);
        *(void *)(a1 + *(int *)(InferenceElem + 20)) = *(void *)(a2 + *(int *)(InferenceElem + 20));
        goto LABEL_326;
      case 0x2Du:
        uint64_t v105 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 32))(a1, a2, v105);
        uint64_t TargetEntry = type metadata accessor for PgQuery_TargetEntry(0);
        *(void *)(a1 + *(int *)(TargetEntry + 20)) = *(void *)(a2 + *(int *)(TargetEntry + 20));
        goto LABEL_326;
      case 0x2Eu:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        uint64_t v107 = *(int *)(type metadata accessor for PgQuery_RangeTblRef(0) + 20);
        uint64_t v108 = a1 + v107;
        uint64_t v109 = a2 + v107;
        uint64_t v110 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 32))(v108, v109, v110);
        goto LABEL_326;
      case 0x2Fu:
        uint64_t v111 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 32))(a1, a2, v111);
        uint64_t JoinExpr = type metadata accessor for PgQuery_JoinExpr(0);
        *(void *)(a1 + *(int *)(JoinExpr + 20)) = *(void *)(a2 + *(int *)(JoinExpr + 20));
        goto LABEL_326;
      case 0x30u:
        uint64_t v113 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 32))(a1, a2, v113);
        uint64_t v114 = type metadata accessor for PgQuery_FromExpr(0);
        *(void *)(a1 + *(int *)(v114 + 20)) = *(void *)(a2 + *(int *)(v114 + 20));
        goto LABEL_326;
      case 0x31u:
        uint64_t v115 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 32))(a1, a2, v115);
        uint64_t v116 = type metadata accessor for PgQuery_OnConflictExpr(0);
        *(void *)(a1 + *(int *)(v116 + 20)) = *(void *)(a2 + *(int *)(v116 + 20));
        goto LABEL_326;
      case 0x32u:
        uint64_t v117 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 32))(a1, a2, v117);
        uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
        *(void *)(a1 + *(int *)(IntoClause + 20)) = *(void *)(a2 + *(int *)(IntoClause + 20));
        goto LABEL_326;
      case 0x33u:
        uint64_t v119 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v119 - 8) + 32))(a1, a2, v119);
        uint64_t RawStmt = type metadata accessor for PgQuery_RawStmt(0);
        *(void *)(a1 + *(int *)(RawStmt + 20)) = *(void *)(a2 + *(int *)(RawStmt + 20));
        goto LABEL_326;
      case 0x34u:
        uint64_t v121 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 32))(a1, a2, v121);
        uint64_t Query = type metadata accessor for PgQuery_Query(0);
        *(void *)(a1 + *(int *)(Query + 20)) = *(void *)(a2 + *(int *)(Query + 20));
        goto LABEL_326;
      case 0x35u:
        uint64_t v123 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 32))(a1, a2, v123);
        uint64_t InsertStmt = type metadata accessor for PgQuery_InsertStmt(0);
        *(void *)(a1 + *(int *)(InsertStmt + 20)) = *(void *)(a2 + *(int *)(InsertStmt + 20));
        goto LABEL_326;
      case 0x36u:
        uint64_t v125 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v125 - 8) + 32))(a1, a2, v125);
        uint64_t v126 = type metadata accessor for PgQuery_DeleteStmt(0);
        *(void *)(a1 + *(int *)(v126 + 20)) = *(void *)(a2 + *(int *)(v126 + 20));
        goto LABEL_326;
      case 0x37u:
        uint64_t v127 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 32))(a1, a2, v127);
        uint64_t UpdateStmt = type metadata accessor for PgQuery_UpdateStmt(0);
        *(void *)(a1 + *(int *)(UpdateStmt + 20)) = *(void *)(a2 + *(int *)(UpdateStmt + 20));
        goto LABEL_326;
      case 0x38u:
        uint64_t v129 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v129 - 8) + 32))(a1, a2, v129);
        uint64_t SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
        *(void *)(a1 + *(int *)(SelectStmt + 20)) = *(void *)(a2 + *(int *)(SelectStmt + 20));
        goto LABEL_326;
      case 0x39u:
        uint64_t v131 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v131;
        *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
        uint64_t AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
        uint64_t v133 = *(int *)(AlterTableStmt + 28);
        uint64_t v134 = a1 + v133;
        uint64_t v135 = a2 + v133;
        uint64_t v136 = type metadata accessor for UnknownStorage();
        v137 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
        v137(v134, v135, v136);
        uint64_t v138 = *(int *)(AlterTableStmt + 32);
        uint64_t v139 = a1 + v138;
        uint64_t v140 = a2 + v138;
        uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v142 = *(void *)(v141 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
          goto LABEL_230;
        }
        long long v825 = *(_OWORD *)(v140 + 16);
        *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
        *(_OWORD *)(v139 + 16) = v825;
        *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
        *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
        *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
        *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
        v892 = (void (*)(char *, char *, uint64_t))v137;
        v137(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
        uint64_t v826 = *(int *)(v141 + 44);
        __dsta = (void *)(v139 + v826);
        v827 = (void *)(v140 + v826);
        uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v829 = *(void *)(v828 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
          goto LABEL_304;
        }
        goto LABEL_324;
      case 0x3Au:
        uint64_t v143 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 32))(a1, a2, v143);
        uint64_t AlterTableCmd = type metadata accessor for PgQuery_AlterTableCmd(0);
        *(void *)(a1 + *(int *)(AlterTableCmd + 20)) = *(void *)(a2 + *(int *)(AlterTableCmd + 20));
        goto LABEL_326;
      case 0x3Bu:
        uint64_t v145 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v145 - 8) + 32))(a1, a2, v145);
        uint64_t AlterDomainStmt = type metadata accessor for PgQuery_AlterDomainStmt(0);
        *(void *)(a1 + *(int *)(AlterDomainStmt + 20)) = *(void *)(a2 + *(int *)(AlterDomainStmt + 20));
        goto LABEL_326;
      case 0x3Cu:
        uint64_t v147 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v147 - 8) + 32))(a1, a2, v147);
        uint64_t SetOperationStmt = type metadata accessor for PgQuery_SetOperationStmt(0);
        *(void *)(a1 + *(int *)(SetOperationStmt + 20)) = *(void *)(a2 + *(int *)(SetOperationStmt + 20));
        goto LABEL_326;
      case 0x3Du:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
        uint64_t v149 = *(void *)(a2 + 72);
        *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
        *(void *)(a1 + 72) = v149;
        uint64_t v150 = *(int *)(type metadata accessor for PgQuery_GrantStmt(0) + 48);
        uint64_t v151 = a1 + v150;
        uint64_t v152 = a2 + v150;
        uint64_t v153 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 32))(v151, v152, v153);
        goto LABEL_326;
      case 0x3Eu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        uint64_t GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
        uint64_t v155 = *(int *)(GrantRoleStmt + 36);
        uint64_t v156 = a1 + v155;
        uint64_t v157 = a2 + v155;
        uint64_t v158 = type metadata accessor for UnknownStorage();
        v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
        v159(v156, v157, v158);
        uint64_t v160 = *(int *)(GrantRoleStmt + 40);
        v161 = (void *)(a1 + v160);
        v162 = (void *)(a2 + v160);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v164 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
          goto LABEL_162;
        }
        goto LABEL_286;
      case 0x3Fu:
        *(void *)a1 = *(void *)a2;
        uint64_t AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
        uint64_t v166 = *(int *)(AlterDefaultPrivilegesStmt + 20);
        uint64_t v167 = a1 + v166;
        uint64_t v168 = a2 + v166;
        uint64_t v169 = type metadata accessor for UnknownStorage();
        v170 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v169 - 8) + 32);
        v170(v167, v168, v169);
        uint64_t v171 = *(int *)(AlterDefaultPrivilegesStmt + 24);
        v172 = (unsigned char *)(a1 + v171);
        v173 = (unsigned char *)(a2 + v171);
        uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
        uint64_t v175 = *(void *)(GrantStmt - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v175 + 48))(v173, 1, GrantStmt))
        {
          uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
          memcpy(v172, v173, *(void *)(*(void *)(v176 - 8) + 64));
        }
        else
        {
          unsigned char *v172 = *v173;
          *((void *)v172 + 1) = *((void *)v173 + 1);
          v172[16] = v173[16];
          *((void *)v172 + 3) = *((void *)v173 + 3);
          v172[32] = v173[32];
          *(_OWORD *)(v172 + 40) = *(_OWORD *)(v173 + 40);
          *((void *)v172 + 7) = *((void *)v173 + 7);
          v172[64] = v173[64];
          uint64_t v830 = *((void *)v173 + 9);
          v172[80] = v173[80];
          *((void *)v172 + 9) = v830;
          v170((uint64_t)&v172[*(int *)(GrantStmt + 48)], (uint64_t)&v173[*(int *)(GrantStmt + 48)], v169);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v175 + 56))(v172, 0, 1, GrantStmt);
        }
        goto LABEL_326;
      case 0x40u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v177 = *(int *)(type metadata accessor for PgQuery_ClosePortalStmt(0) + 20);
        uint64_t v178 = a1 + v177;
        uint64_t v179 = a2 + v177;
        uint64_t v180 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v180 - 8) + 32))(v178, v179, v180);
        goto LABEL_326;
      case 0x41u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        uint64_t ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
        uint64_t v182 = *(int *)(ClusterStmt + 24);
        uint64_t v183 = a1 + v182;
        uint64_t v184 = a2 + v182;
        uint64_t v136 = type metadata accessor for UnknownStorage();
        v185 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
        v185(v183, v184, v136);
        uint64_t v186 = *(int *)(ClusterStmt + 28);
        uint64_t v139 = a1 + v186;
        uint64_t v140 = a2 + v186;
        uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v142 = *(void *)(v141 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
          goto LABEL_230;
        }
        long long v831 = *(_OWORD *)(v140 + 16);
        *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
        *(_OWORD *)(v139 + 16) = v831;
        *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
        *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
        *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
        *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
        v892 = (void (*)(char *, char *, uint64_t))v185;
        v185(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
        uint64_t v832 = *(int *)(v141 + 44);
        __dsta = (void *)(v139 + v832);
        v827 = (void *)(v140 + v832);
        uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v829 = *(void *)(v828 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
          goto LABEL_304;
        }
        goto LABEL_324;
      case 0x42u:
        uint64_t v187 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v187 - 8) + 32))(a1, a2, v187);
        uint64_t CopyStmt = type metadata accessor for PgQuery_CopyStmt(0);
        *(void *)(a1 + *(int *)(CopyStmt + 20)) = *(void *)(a2 + *(int *)(CopyStmt + 20));
        goto LABEL_326;
      case 0x43u:
        uint64_t v189 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v189 - 8) + 32))(a1, a2, v189);
        uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
        *(void *)(a1 + *(int *)(Stmt + 20)) = *(void *)(a2 + *(int *)(Stmt + 20));
        goto LABEL_326;
      case 0x44u:
        *(void *)a1 = *(void *)a2;
        *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
        uint64_t v191 = *(int *)(type metadata accessor for PgQuery_DefineStmt(0) + 44);
        uint64_t v192 = a1 + v191;
        uint64_t v193 = a2 + v191;
        uint64_t v194 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v194 - 8) + 32))(v192, v193, v194);
        goto LABEL_326;
      case 0x45u:
        uint64_t v195 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v195;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
        uint64_t v196 = *(int *)(type metadata accessor for PgQuery_DropStmt(0) + 36);
        uint64_t v197 = a1 + v196;
        uint64_t v198 = a2 + v196;
        uint64_t v199 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v199 - 8) + 32))(v197, v198, v199);
        goto LABEL_326;
      case 0x46u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        uint64_t v200 = *(int *)(type metadata accessor for PgQuery_TruncateStmt(0) + 28);
        uint64_t v201 = a1 + v200;
        uint64_t v202 = a2 + v200;
        uint64_t v203 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v203 - 8) + 32))(v201, v202, v203);
        goto LABEL_326;
      case 0x47u:
        uint64_t v204 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v204 - 8) + 32))(a1, a2, v204);
        Commentuint64_t Stmt = type metadata accessor for PgQuery_CommentStmt(0);
        *(void *)(a1 + *(int *)(CommentStmt + 20)) = *(void *)(a2 + *(int *)(CommentStmt + 20));
        goto LABEL_326;
      case 0x48u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        uint64_t v206 = *(int *)(type metadata accessor for PgQuery_FetchStmt(0) + 32);
        uint64_t v207 = a1 + v206;
        uint64_t v208 = a2 + v206;
        uint64_t v209 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v209 - 8) + 32))(v207, v208, v209);
        goto LABEL_326;
      case 0x49u:
        uint64_t v210 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v210 - 8) + 32))(a1, a2, v210);
        Indexuint64_t Stmt = type metadata accessor for PgQuery_IndexStmt(0);
        *(void *)(a1 + *(int *)(IndexStmt + 20)) = *(void *)(a2 + *(int *)(IndexStmt + 20));
        goto LABEL_326;
      case 0x4Au:
        *(_WORD *)a1 = *(_WORD *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        Functionuint64_t Stmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
        uint64_t v213 = *(int *)(FunctionStmt + 36);
        uint64_t v214 = a1 + v213;
        uint64_t v215 = a2 + v213;
        uint64_t v216 = type metadata accessor for UnknownStorage();
        v217 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v216 - 8) + 32);
        v217(v214, v215, v216);
        uint64_t v218 = *(int *)(FunctionStmt + 40);
        v219 = (void *)(a1 + v218);
        v220 = (void *)(a2 + v218);
        uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
        uint64_t v222 = *(void *)(TypeName - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v222 + 48))(v220, 1, TypeName)) {
          goto LABEL_82;
        }
        goto LABEL_266;
      case 0x4Bu:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        AlterFunctionuint64_t Stmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
        uint64_t v225 = *(int *)(AlterFunctionStmt + 24);
        uint64_t v226 = a1 + v225;
        uint64_t v227 = a2 + v225;
        uint64_t v228 = type metadata accessor for UnknownStorage();
        v229 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v228 - 8) + 32);
        v229(v226, v227, v228);
        uint64_t v230 = *(int *)(AlterFunctionStmt + 28);
        v231 = (unsigned char *)(a1 + v230);
        v232 = (unsigned char *)(a2 + v230);
        uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
        uint64_t v234 = *(void *)(ObjectWithArgs - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v234 + 48))(v232, 1, ObjectWithArgs)) {
          goto LABEL_84;
        }
        goto LABEL_267;
      case 0x4Cu:
        *(void *)a1 = *(void *)a2;
        uint64_t v236 = *(int *)(type metadata accessor for PgQuery_DoStmt(0) + 20);
        uint64_t v237 = a1 + v236;
        uint64_t v238 = a2 + v236;
        uint64_t v239 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v239 - 8) + 32))(v237, v238, v239);
        goto LABEL_326;
      case 0x4Du:
        uint64_t v240 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v240 - 8) + 32))(a1, a2, v240);
        Renameuint64_t Stmt = type metadata accessor for PgQuery_RenameStmt(0);
        *(void *)(a1 + *(int *)(RenameStmt + 20)) = *(void *)(a2 + *(int *)(RenameStmt + 20));
        goto LABEL_326;
      case 0x4Eu:
        uint64_t v242 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v242 - 8) + 32))(a1, a2, v242);
        Ruleuint64_t Stmt = type metadata accessor for PgQuery_RuleStmt(0);
        *(void *)(a1 + *(int *)(RuleStmt + 20)) = *(void *)(a2 + *(int *)(RuleStmt + 20));
        goto LABEL_326;
      case 0x4Fu:
        long long v244 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v244;
        uint64_t v245 = *(int *)(type metadata accessor for PgQuery_NotifyStmt(0) + 24);
        uint64_t v246 = a1 + v245;
        uint64_t v247 = a2 + v245;
        uint64_t v248 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v248 - 8) + 32))(v246, v247, v248);
        goto LABEL_326;
      case 0x50u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v249 = *(int *)(type metadata accessor for PgQuery_ListenStmt(0) + 20);
        uint64_t v250 = a1 + v249;
        uint64_t v251 = a2 + v249;
        uint64_t v252 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v252 - 8) + 32))(v250, v251, v252);
        goto LABEL_326;
      case 0x51u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v253 = *(int *)(type metadata accessor for PgQuery_UnlistenStmt(0) + 20);
        uint64_t v254 = a1 + v253;
        uint64_t v255 = a2 + v253;
        uint64_t v256 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v256 - 8) + 32))(v254, v255, v256);
        goto LABEL_326;
      case 0x52u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
        uint64_t v257 = *(int *)(type metadata accessor for PgQuery_TransactionStmt(0) + 36);
        uint64_t v258 = a1 + v257;
        uint64_t v259 = a2 + v257;
        uint64_t v260 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v260 - 8) + 32))(v258, v259, v260);
        goto LABEL_326;
      case 0x53u:
        uint64_t v261 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v261 - 8) + 32))(a1, a2, v261);
        Viewuint64_t Stmt = type metadata accessor for PgQuery_ViewStmt(0);
        *(void *)(a1 + *(int *)(ViewStmt + 20)) = *(void *)(a2 + *(int *)(ViewStmt + 20));
        goto LABEL_326;
      case 0x54u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v263 = *(int *)(type metadata accessor for PgQuery_LoadStmt(0) + 20);
        uint64_t v264 = a1 + v263;
        uint64_t v265 = a2 + v263;
        uint64_t v266 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v266 - 8) + 32))(v264, v265, v266);
        goto LABEL_326;
      case 0x55u:
        uint64_t v267 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v267 - 8) + 32))(a1, a2, v267);
        Domainuint64_t Stmt = type metadata accessor for PgQuery_CreateDomainStmt(0);
        *(void *)(a1 + *(int *)(DomainStmt + 20)) = *(void *)(a2 + *(int *)(DomainStmt + 20));
        goto LABEL_326;
      case 0x56u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v269 = *(int *)(type metadata accessor for PgQuery_CreatedbStmt(0) + 24);
        uint64_t v270 = a1 + v269;
        uint64_t v271 = a2 + v269;
        uint64_t v272 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v272 - 8) + 32))(v270, v271, v272);
        goto LABEL_326;
      case 0x57u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v273 = *(int *)(type metadata accessor for PgQuery_DropdbStmt(0) + 28);
        uint64_t v274 = a1 + v273;
        uint64_t v275 = a2 + v273;
        uint64_t v276 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v276 - 8) + 32))(v274, v275, v276);
        goto LABEL_326;
      case 0x58u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        uint64_t v277 = *(int *)(type metadata accessor for PgQuery_VacuumStmt(0) + 28);
        uint64_t v278 = a1 + v277;
        uint64_t v279 = a2 + v277;
        uint64_t v280 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v280 - 8) + 32))(v278, v279, v280);
        goto LABEL_326;
      case 0x59u:
        uint64_t v281 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v281 - 8) + 32))(a1, a2, v281);
        Explainuint64_t Stmt = type metadata accessor for PgQuery_ExplainStmt(0);
        *(void *)(a1 + *(int *)(ExplainStmt + 20)) = *(void *)(a2 + *(int *)(ExplainStmt + 20));
        goto LABEL_326;
      case 0x5Au:
        uint64_t v283 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v283 - 8) + 32))(a1, a2, v283);
        TableAsuint64_t Stmt = type metadata accessor for PgQuery_CreateTableAsStmt(0);
        *(void *)(a1 + *(int *)(TableAsStmt + 20)) = *(void *)(a2 + *(int *)(TableAsStmt + 20));
        goto LABEL_326;
      case 0x5Bu:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
        Sequint64_t Stmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
        uint64_t v286 = *(int *)(SeqStmt + 32);
        uint64_t v287 = a1 + v286;
        uint64_t v288 = a2 + v286;
        uint64_t v136 = type metadata accessor for UnknownStorage();
        v289 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
        v289(v287, v288, v136);
        uint64_t v290 = *(int *)(SeqStmt + 36);
        uint64_t v139 = a1 + v290;
        uint64_t v140 = a2 + v290;
        uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v142 = *(void *)(v141 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
          goto LABEL_230;
        }
        long long v833 = *(_OWORD *)(v140 + 16);
        *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
        *(_OWORD *)(v139 + 16) = v833;
        *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
        *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
        *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
        *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
        v892 = (void (*)(char *, char *, uint64_t))v289;
        v289(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
        uint64_t v834 = *(int *)(v141 + 44);
        __dsta = (void *)(v139 + v834);
        v827 = (void *)(v140 + v834);
        uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v829 = *(void *)(v828 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
          goto LABEL_304;
        }
        goto LABEL_324;
      case 0x5Cu:
        *(void *)a1 = *(void *)a2;
        *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
        AlterSequint64_t Stmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
        uint64_t v292 = *(int *)(AlterSeqStmt + 28);
        uint64_t v293 = a1 + v292;
        uint64_t v294 = a2 + v292;
        uint64_t v136 = type metadata accessor for UnknownStorage();
        v295 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
        v295(v293, v294, v136);
        uint64_t v296 = *(int *)(AlterSeqStmt + 32);
        uint64_t v139 = a1 + v296;
        uint64_t v140 = a2 + v296;
        uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v142 = *(void *)(v141 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
          goto LABEL_230;
        }
        long long v835 = *(_OWORD *)(v140 + 16);
        *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
        *(_OWORD *)(v139 + 16) = v835;
        *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
        *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
        *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
        *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
        v892 = (void (*)(char *, char *, uint64_t))v295;
        v295(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
        uint64_t v836 = *(int *)(v141 + 44);
        __dsta = (void *)(v139 + v836);
        v827 = (void *)(v140 + v836);
        uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v829 = *(void *)(v828 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
          goto LABEL_304;
        }
        goto LABEL_324;
      case 0x5Du:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        uint64_t v297 = *(int *)(type metadata accessor for PgQuery_VariableSetStmt(0) + 32);
        uint64_t v298 = a1 + v297;
        uint64_t v299 = a2 + v297;
        uint64_t v300 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v300 - 8) + 32))(v298, v299, v300);
        goto LABEL_326;
      case 0x5Eu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v301 = *(int *)(type metadata accessor for PgQuery_VariableShowStmt(0) + 20);
        uint64_t v302 = a1 + v301;
        uint64_t v303 = a2 + v301;
        uint64_t v304 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v304 - 8) + 32))(v302, v303, v304);
        goto LABEL_326;
      case 0x5Fu:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        uint64_t v305 = *(int *)(type metadata accessor for PgQuery_DiscardStmt(0) + 20);
        uint64_t v306 = a1 + v305;
        uint64_t v307 = a2 + v305;
        uint64_t v308 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v308 - 8) + 32))(v306, v307, v308);
        goto LABEL_326;
      case 0x60u:
        uint64_t v309 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v309 - 8) + 32))(a1, a2, v309);
        Triguint64_t Stmt = type metadata accessor for PgQuery_CreateTrigStmt(0);
        *(void *)(a1 + *(int *)(TrigStmt + 20)) = *(void *)(a2 + *(int *)(TrigStmt + 20));
        goto LABEL_326;
      case 0x61u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
        uint64_t v311 = *(int *)(type metadata accessor for PgQuery_CreatePLangStmt(0) + 40);
        uint64_t v312 = a1 + v311;
        uint64_t v313 = a2 + v311;
        uint64_t v314 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v314 - 8) + 32))(v312, v313, v314);
        goto LABEL_326;
      case 0x62u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v315 = *(int *)(type metadata accessor for PgQuery_CreateRoleStmt(0) + 28);
        uint64_t v316 = a1 + v315;
        uint64_t v317 = a2 + v315;
        uint64_t v318 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v318 - 8) + 32))(v316, v317, v318);
        goto LABEL_326;
      case 0x63u:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        AlterRoleuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
        uint64_t v320 = *(int *)(AlterRoleStmt + 24);
        uint64_t v321 = a1 + v320;
        uint64_t v322 = a2 + v320;
        uint64_t v158 = type metadata accessor for UnknownStorage();
        v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
        v159(v321, v322, v158);
        uint64_t v323 = *(int *)(AlterRoleStmt + 28);
        v161 = (void *)(a1 + v323);
        v162 = (void *)(a2 + v323);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v164 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
          goto LABEL_162;
        }
        goto LABEL_286;
      case 0x64u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        uint64_t v324 = *(int *)(type metadata accessor for PgQuery_DropRoleStmt(0) + 24);
        uint64_t v325 = a1 + v324;
        uint64_t v326 = a2 + v324;
        uint64_t v327 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v327 - 8) + 32))(v325, v326, v327);
        goto LABEL_326;
      case 0x65u:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
        uint64_t v328 = *(int *)(type metadata accessor for PgQuery_LockStmt(0) + 28);
        uint64_t v329 = a1 + v328;
        uint64_t v330 = a2 + v328;
        uint64_t v331 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v331 - 8) + 32))(v329, v330, v331);
        goto LABEL_326;
      case 0x66u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        uint64_t v332 = *(int *)(type metadata accessor for PgQuery_ConstraintsSetStmt(0) + 24);
        uint64_t v333 = a1 + v332;
        uint64_t v334 = a2 + v332;
        uint64_t v335 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v335 - 8) + 32))(v333, v334, v335);
        goto LABEL_326;
      case 0x67u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
        Reindexuint64_t Stmt = type metadata accessor for PgQuery_ReindexStmt(0);
        uint64_t v337 = *(int *)(ReindexStmt + 32);
        uint64_t v338 = a1 + v337;
        uint64_t v339 = a2 + v337;
        uint64_t v136 = type metadata accessor for UnknownStorage();
        v340 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
        v340(v338, v339, v136);
        uint64_t v341 = *(int *)(ReindexStmt + 36);
        uint64_t v139 = a1 + v341;
        uint64_t v140 = a2 + v341;
        uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v142 = *(void *)(v141 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
          goto LABEL_230;
        }
        long long v837 = *(_OWORD *)(v140 + 16);
        *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
        *(_OWORD *)(v139 + 16) = v837;
        *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
        *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
        *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
        *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
        v892 = (void (*)(char *, char *, uint64_t))v340;
        v340(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
        uint64_t v838 = *(int *)(v141 + 44);
        __dsta = (void *)(v139 + v838);
        v827 = (void *)(v140 + v838);
        uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v829 = *(void *)(v828 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
          goto LABEL_304;
        }
        goto LABEL_324;
      case 0x69u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        Schemauint64_t Stmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
        uint64_t v343 = *(int *)(SchemaStmt + 28);
        uint64_t v344 = a1 + v343;
        uint64_t v345 = a2 + v343;
        uint64_t v158 = type metadata accessor for UnknownStorage();
        v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
        v159(v344, v345, v158);
        uint64_t v346 = *(int *)(SchemaStmt + 32);
        v161 = (void *)(a1 + v346);
        v162 = (void *)(a2 + v346);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v164 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
          goto LABEL_162;
        }
        goto LABEL_286;
      case 0x6Au:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v347 = *(int *)(type metadata accessor for PgQuery_AlterDatabaseStmt(0) + 24);
        uint64_t v348 = a1 + v347;
        uint64_t v349 = a2 + v347;
        uint64_t v350 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v350 - 8) + 32))(v348, v349, v350);
        goto LABEL_326;
      case 0x6Bu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        AlterDatabaseSetuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
        uint64_t v352 = *(int *)(AlterDatabaseSetStmt + 20);
        uint64_t v353 = a1 + v352;
        uint64_t v354 = a2 + v352;
        uint64_t v355 = type metadata accessor for UnknownStorage();
        v356 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v355 - 8) + 32);
        v356(v353, v354, v355);
        uint64_t v357 = *(int *)(AlterDatabaseSetStmt + 24);
        uint64_t v358 = a1 + v357;
        uint64_t v359 = a2 + v357;
        VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
        uint64_t v361 = *(void *)(VariableSetStmt - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v361 + 48))(v359, 1, VariableSetStmt)) {
          goto LABEL_121;
        }
        *(void *)uint64_t v358 = *(void *)v359;
        *(unsigned char *)(v358 + 8) = *(unsigned char *)(v359 + 8);
        *(_OWORD *)(v358 + 16) = *(_OWORD *)(v359 + 16);
        *(void *)(v358 + 32) = *(void *)(v359 + 32);
        *(unsigned char *)(v358 + 40) = *(unsigned char *)(v359 + 40);
        v356(v358 + *(int *)(VariableSetStmt + 32), v359 + *(int *)(VariableSetStmt + 32), v355);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v361 + 56))(v358, 0, 1, VariableSetStmt);
        goto LABEL_326;
      case 0x6Cu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        AlterRoleSetuint64_t Stmt = (int *)type metadata accessor for PgQuery_AlterRoleSetStmt(0);
        uint64_t v364 = AlterRoleSetStmt[5];
        uint64_t v365 = a1 + v364;
        uint64_t v366 = a2 + v364;
        uint64_t v367 = type metadata accessor for UnknownStorage();
        v368 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v367 - 8) + 32);
        v368(v365, v366, v367);
        uint64_t v369 = AlterRoleSetStmt[6];
        v370 = (void *)(a1 + v369);
        v371 = (void *)(a2 + v369);
        uint64_t v372 = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v373 = *(void *)(v372 - 8);
        uint64_t v887 = v367;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v373 + 48))(v371, 1, v372))
        {
          uint64_t v374 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
          memcpy(v370, v371, *(void *)(*(void *)(v374 - 8) + 64));
        }
        else
        {
          void *v370 = *v371;
          *((unsigned char *)v370 + 8) = *((unsigned char *)v371 + 8);
          *((_OWORD *)v370 + 1) = *((_OWORD *)v371 + 1);
          *((_DWORD *)v370 + 8) = *((_DWORD *)v371 + 8);
          v368((uint64_t)v370 + *(int *)(v372 + 28), (uint64_t)v371 + *(int *)(v372 + 28), v367);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v373 + 56))(v370, 0, 1, v372);
        }
        uint64_t v839 = AlterRoleSetStmt[7];
        v840 = (void *)(a1 + v839);
        v841 = (void *)(a2 + v839);
        uint64_t v842 = type metadata accessor for PgQuery_VariableSetStmt(0);
        uint64_t v843 = *(void *)(v842 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v843 + 48))(v841, 1, v842))
        {
          uint64_t v844 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
          memcpy(v840, v841, *(void *)(*(void *)(v844 - 8) + 64));
        }
        else
        {
          void *v840 = *v841;
          *((unsigned char *)v840 + 8) = *((unsigned char *)v841 + 8);
          *((_OWORD *)v840 + 1) = *((_OWORD *)v841 + 1);
          v840[4] = v841[4];
          *((unsigned char *)v840 + 40) = *((unsigned char *)v841 + 40);
          v368((uint64_t)v840 + *(int *)(v842 + 32), (uint64_t)v841 + *(int *)(v842 + 32), v887);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v843 + 56))(v840, 0, 1, v842);
        }
        goto LABEL_326;
      case 0x6Du:
        *(void *)a1 = *(void *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
        uint64_t v375 = *(int *)(type metadata accessor for PgQuery_CreateConversionStmt(0) + 36);
        uint64_t v376 = a1 + v375;
        uint64_t v377 = a2 + v375;
        uint64_t v378 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v378 - 8) + 32))(v376, v377, v378);
        goto LABEL_326;
      case 0x6Eu:
        uint64_t v379 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v379 - 8) + 32))(a1, a2, v379);
        Castuint64_t Stmt = type metadata accessor for PgQuery_CreateCastStmt(0);
        *(void *)(a1 + *(int *)(CastStmt + 20)) = *(void *)(a2 + *(int *)(CastStmt + 20));
        goto LABEL_326;
      case 0x6Fu:
        long long v381 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v381;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        OpClassuint64_t Stmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
        uint64_t v383 = *(int *)(OpClassStmt + 36);
        uint64_t v384 = a1 + v383;
        uint64_t v385 = a2 + v383;
        uint64_t v216 = type metadata accessor for UnknownStorage();
        v217 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v216 - 8) + 32);
        v217(v384, v385, v216);
        uint64_t v386 = *(int *)(OpClassStmt + 40);
        v219 = (void *)(a1 + v386);
        v220 = (void *)(a2 + v386);
        uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
        uint64_t v222 = *(void *)(TypeName - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v222 + 48))(v220, 1, TypeName))
        {
LABEL_82:
          uint64_t v223 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
          memcpy(v219, v220, *(void *)(*(void *)(v223 - 8) + 64));
        }
        else
        {
LABEL_266:
          void *v219 = *v220;
          *((_DWORD *)v219 + 2) = *((_DWORD *)v220 + 2);
          *((_WORD *)v219 + 6) = *((_WORD *)v220 + 6);
          v219[2] = v220[2];
          *((_DWORD *)v219 + 6) = *((_DWORD *)v220 + 6);
          v219[4] = v220[4];
          *((_DWORD *)v219 + 10) = *((_DWORD *)v220 + 10);
          v217((uint64_t)v219 + *(int *)(TypeName + 48), (uint64_t)v220 + *(int *)(TypeName + 48), v216);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v222 + 56))(v219, 0, 1, TypeName);
        }
        goto LABEL_326;
      case 0x70u:
        *(void *)a1 = *(void *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        uint64_t v387 = *(int *)(type metadata accessor for PgQuery_CreateOpFamilyStmt(0) + 24);
        uint64_t v388 = a1 + v387;
        uint64_t v389 = a2 + v387;
        uint64_t v390 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v390 - 8) + 32))(v388, v389, v390);
        goto LABEL_326;
      case 0x71u:
        *(void *)a1 = *(void *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v391 = *(int *)(type metadata accessor for PgQuery_AlterOpFamilyStmt(0) + 32);
        uint64_t v392 = a1 + v391;
        uint64_t v393 = a2 + v391;
        uint64_t v394 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v394 - 8) + 32))(v392, v393, v394);
        goto LABEL_326;
      case 0x72u:
        uint64_t v395 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v395 - 8) + 32))(a1, a2, v395);
        Prepareuint64_t Stmt = type metadata accessor for PgQuery_PrepareStmt(0);
        *(void *)(a1 + *(int *)(PrepareStmt + 20)) = *(void *)(a2 + *(int *)(PrepareStmt + 20));
        goto LABEL_326;
      case 0x73u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v397 = *(int *)(type metadata accessor for PgQuery_ExecuteStmt(0) + 24);
        uint64_t v398 = a1 + v397;
        uint64_t v399 = a2 + v397;
        uint64_t v400 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v400 - 8) + 32))(v398, v399, v400);
        goto LABEL_326;
      case 0x74u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v401 = *(int *)(type metadata accessor for PgQuery_DeallocateStmt(0) + 20);
        uint64_t v402 = a1 + v401;
        uint64_t v403 = a2 + v401;
        uint64_t v404 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v404 - 8) + 32))(v402, v403, v404);
        goto LABEL_326;
      case 0x75u:
        uint64_t v405 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v405 - 8) + 32))(a1, a2, v405);
        DeclareCursoruint64_t Stmt = type metadata accessor for PgQuery_DeclareCursorStmt(0);
        *(void *)(a1 + *(int *)(DeclareCursorStmt + 20)) = *(void *)(a2 + *(int *)(DeclareCursorStmt + 20));
        goto LABEL_326;
      case 0x76u:
        long long v407 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v407;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        TableSpaceuint64_t Stmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
        uint64_t v409 = *(int *)(TableSpaceStmt + 28);
        uint64_t v410 = a1 + v409;
        uint64_t v411 = a2 + v409;
        uint64_t v158 = type metadata accessor for UnknownStorage();
        v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
        v159(v410, v411, v158);
        uint64_t v412 = *(int *)(TableSpaceStmt + 32);
        v161 = (void *)(a1 + v412);
        v162 = (void *)(a2 + v412);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v164 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
          goto LABEL_162;
        }
        goto LABEL_286;
      case 0x77u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        uint64_t v413 = *(int *)(type metadata accessor for PgQuery_DropTableSpaceStmt(0) + 24);
        uint64_t v414 = a1 + v413;
        uint64_t v415 = a2 + v413;
        uint64_t v416 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v416 - 8) + 32))(v414, v415, v416);
        goto LABEL_326;
      case 0x78u:
        uint64_t v417 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v417 - 8) + 32))(a1, a2, v417);
        AlterObjectDependsuint64_t Stmt = type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
        *(void *)(a1 + *(int *)(AlterObjectDependsStmt + 20)) = *(void *)(a2 + *(int *)(AlterObjectDependsStmt + 20));
        goto LABEL_326;
      case 0x79u:
        uint64_t v419 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v419 - 8) + 32))(a1, a2, v419);
        AlterObjectSchemauint64_t Stmt = type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
        *(void *)(a1 + *(int *)(AlterObjectSchemaStmt + 20)) = *(void *)(a2 + *(int *)(AlterObjectSchemaStmt + 20));
        goto LABEL_326;
      case 0x7Au:
        uint64_t v421 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v421 - 8) + 32))(a1, a2, v421);
        AlterOwneruint64_t Stmt = type metadata accessor for PgQuery_AlterOwnerStmt(0);
        *(void *)(a1 + *(int *)(AlterOwnerStmt + 20)) = *(void *)(a2 + *(int *)(AlterOwnerStmt + 20));
        goto LABEL_326;
      case 0x7Bu:
        *(void *)a1 = *(void *)a2;
        AlterOperatoruint64_t Stmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
        uint64_t v424 = *(int *)(AlterOperatorStmt + 20);
        uint64_t v425 = a1 + v424;
        uint64_t v426 = a2 + v424;
        uint64_t v228 = type metadata accessor for UnknownStorage();
        v229 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v228 - 8) + 32);
        v229(v425, v426, v228);
        uint64_t v427 = *(int *)(AlterOperatorStmt + 24);
        v231 = (unsigned char *)(a1 + v427);
        v232 = (unsigned char *)(a2 + v427);
        uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
        uint64_t v234 = *(void *)(ObjectWithArgs - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v234 + 48))(v232, 1, ObjectWithArgs))
        {
LABEL_84:
          uint64_t v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          memcpy(v231, v232, *(void *)(*(void *)(v235 - 8) + 64));
        }
        else
        {
LABEL_267:
          *(_OWORD *)v231 = *(_OWORD *)v232;
          v231[16] = v232[16];
          v229((uint64_t)&v231[*(int *)(ObjectWithArgs + 28)], (uint64_t)&v232[*(int *)(ObjectWithArgs + 28)], v228);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v234 + 56))(v231, 0, 1, ObjectWithArgs);
        }
        goto LABEL_326;
      case 0x7Cu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v428 = *(int *)(type metadata accessor for PgQuery_AlterTypeStmt(0) + 24);
        uint64_t v429 = a1 + v428;
        uint64_t v430 = a2 + v428;
        uint64_t v431 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v431 - 8) + 32))(v429, v430, v431);
        goto LABEL_326;
      case 0x7Du:
        uint64_t v432 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v432;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        uint64_t v433 = *(int *)(type metadata accessor for PgQuery_DropOwnedStmt(0) + 24);
        uint64_t v434 = a1 + v433;
        uint64_t v435 = a2 + v433;
        uint64_t v436 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v436 - 8) + 32))(v434, v435, v436);
        goto LABEL_326;
      case 0x7Eu:
        *(void *)a1 = *(void *)a2;
        ReassignOwneduint64_t Stmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
        uint64_t v438 = *(int *)(ReassignOwnedStmt + 20);
        uint64_t v439 = a1 + v438;
        uint64_t v440 = a2 + v438;
        uint64_t v158 = type metadata accessor for UnknownStorage();
        v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
        v159(v439, v440, v158);
        uint64_t v441 = *(int *)(ReassignOwnedStmt + 24);
        v161 = (void *)(a1 + v441);
        v162 = (void *)(a2 + v441);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v164 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
          goto LABEL_162;
        }
        goto LABEL_286;
      case 0x7Fu:
        *(void *)a1 = *(void *)a2;
        CompositeTypeuint64_t Stmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
        uint64_t v443 = *(int *)(CompositeTypeStmt + 20);
        uint64_t v444 = a1 + v443;
        uint64_t v445 = a2 + v443;
        uint64_t v136 = type metadata accessor for UnknownStorage();
        v446 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
        v446(v444, v445, v136);
        uint64_t v447 = *(int *)(CompositeTypeStmt + 24);
        uint64_t v139 = a1 + v447;
        uint64_t v140 = a2 + v447;
        uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v142 = *(void *)(v141 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
          goto LABEL_230;
        }
        long long v845 = *(_OWORD *)(v140 + 16);
        *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
        *(_OWORD *)(v139 + 16) = v845;
        *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
        *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
        *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
        *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
        v892 = (void (*)(char *, char *, uint64_t))v446;
        v446(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
        uint64_t v846 = *(int *)(v141 + 44);
        __dsta = (void *)(v139 + v846);
        v827 = (void *)(v140 + v846);
        uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v829 = *(void *)(v828 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
          goto LABEL_304;
        }
        goto LABEL_324;
      case 0x80u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v448 = *(int *)(type metadata accessor for PgQuery_CreateEnumStmt(0) + 24);
        uint64_t v449 = a1 + v448;
        uint64_t v450 = a2 + v448;
        uint64_t v451 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v451 - 8) + 32))(v449, v450, v451);
        goto LABEL_326;
      case 0x81u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v452 = *(int *)(type metadata accessor for PgQuery_CreateRangeStmt(0) + 24);
        uint64_t v453 = a1 + v452;
        uint64_t v454 = a2 + v452;
        uint64_t v455 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v455 - 8) + 32))(v453, v454, v455);
        goto LABEL_326;
      case 0x82u:
        *(void *)a1 = *(void *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
        uint64_t v456 = *(int *)(type metadata accessor for PgQuery_AlterEnumStmt(0) + 40);
        uint64_t v457 = a1 + v456;
        uint64_t v458 = a2 + v456;
        uint64_t v459 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v459 - 8) + 32))(v457, v458, v459);
        goto LABEL_326;
      case 0x83u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v460 = *(int *)(type metadata accessor for PgQuery_AlterTSDictionaryStmt(0) + 24);
        uint64_t v461 = a1 + v460;
        uint64_t v462 = a2 + v460;
        uint64_t v463 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v463 - 8) + 32))(v461, v462, v463);
        goto LABEL_326;
      case 0x84u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
        uint64_t v464 = *(int *)(type metadata accessor for PgQuery_AlterTSConfigurationStmt(0) + 44);
        uint64_t v465 = a1 + v464;
        uint64_t v466 = a2 + v464;
        uint64_t v467 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v467 - 8) + 32))(v465, v466, v467);
        goto LABEL_326;
      case 0x85u:
        long long v468 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v468;
        uint64_t v469 = *(int *)(type metadata accessor for PgQuery_CreateFdwStmt(0) + 28);
        uint64_t v470 = a1 + v469;
        uint64_t v471 = a2 + v469;
        uint64_t v472 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v472 - 8) + 32))(v470, v471, v472);
        goto LABEL_326;
      case 0x86u:
        long long v473 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v473;
        uint64_t v474 = *(int *)(type metadata accessor for PgQuery_AlterFdwStmt(0) + 28);
        uint64_t v475 = a1 + v474;
        uint64_t v476 = a2 + v474;
        uint64_t v477 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v477 - 8) + 32))(v475, v476, v477);
        goto LABEL_326;
      case 0x87u:
        long long v478 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v478;
        long long v479 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v479;
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        uint64_t v480 = *(int *)(type metadata accessor for PgQuery_CreateForeignServerStmt(0) + 40);
        uint64_t v481 = a1 + v480;
        uint64_t v482 = a2 + v480;
        uint64_t v483 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v483 - 8) + 32))(v481, v482, v483);
        goto LABEL_326;
      case 0x88u:
        long long v484 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v484;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        uint64_t v485 = *(int *)(type metadata accessor for PgQuery_AlterForeignServerStmt(0) + 32);
        uint64_t v486 = a1 + v485;
        uint64_t v487 = a2 + v485;
        uint64_t v488 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v488 - 8) + 32))(v486, v487, v488);
        goto LABEL_326;
      case 0x89u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        UserMappinguint64_t Stmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
        uint64_t v490 = *(int *)(UserMappingStmt + 28);
        uint64_t v491 = a1 + v490;
        uint64_t v492 = a2 + v490;
        uint64_t v158 = type metadata accessor for UnknownStorage();
        v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
        v159(v491, v492, v158);
        uint64_t v493 = *(int *)(UserMappingStmt + 32);
        v161 = (void *)(a1 + v493);
        v162 = (void *)(a2 + v493);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v164 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
          goto LABEL_162;
        }
        goto LABEL_286;
      case 0x8Au:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        AlterUserMappinguint64_t Stmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
        uint64_t v495 = *(int *)(AlterUserMappingStmt + 24);
        uint64_t v496 = a1 + v495;
        uint64_t v497 = a2 + v495;
        uint64_t v158 = type metadata accessor for UnknownStorage();
        v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
        v159(v496, v497, v158);
        uint64_t v498 = *(int *)(AlterUserMappingStmt + 28);
        v161 = (void *)(a1 + v498);
        v162 = (void *)(a2 + v498);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v164 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec)) {
          goto LABEL_162;
        }
        goto LABEL_286;
      case 0x8Bu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        DropUserMappinguint64_t Stmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
        uint64_t v500 = *(int *)(DropUserMappingStmt + 24);
        uint64_t v501 = a1 + v500;
        uint64_t v502 = a2 + v500;
        uint64_t v158 = type metadata accessor for UnknownStorage();
        v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 32);
        v159(v501, v502, v158);
        uint64_t v503 = *(int *)(DropUserMappingStmt + 28);
        v161 = (void *)(a1 + v503);
        v162 = (void *)(a2 + v503);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v164 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v164 + 48))(v162, 1, RoleSpec))
        {
LABEL_162:
          uint64_t v504 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
          memcpy(v161, v162, *(void *)(*(void *)(v504 - 8) + 64));
        }
        else
        {
LABEL_286:
          void *v161 = *v162;
          *((unsigned char *)v161 + 8) = *((unsigned char *)v162 + 8);
          *((_OWORD *)v161 + 1) = *((_OWORD *)v162 + 1);
          *((_DWORD *)v161 + 8) = *((_DWORD *)v162 + 8);
          v159((uint64_t)v161 + *(int *)(RoleSpec + 28), (uint64_t)v162 + *(int *)(RoleSpec + 28), v158);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, RoleSpec);
        }
        goto LABEL_326;
      case 0x8Cu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        uint64_t v505 = *(int *)(type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0) + 28);
        uint64_t v506 = a1 + v505;
        uint64_t v507 = a2 + v505;
        uint64_t v508 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v508 - 8) + 32))(v506, v507, v508);
        goto LABEL_326;
      case 0x8Du:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
        uint64_t v509 = *(int *)(type metadata accessor for PgQuery_AlterTableMoveAllStmt(0) + 36);
        uint64_t v510 = a1 + v509;
        uint64_t v511 = a2 + v509;
        uint64_t v512 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v512 - 8) + 32))(v510, v511, v512);
        goto LABEL_326;
      case 0x8Eu:
        uint64_t v513 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v513 - 8) + 32))(a1, a2, v513);
        SecLabeluint64_t Stmt = type metadata accessor for PgQuery_SecLabelStmt(0);
        *(void *)(a1 + *(int *)(SecLabelStmt + 20)) = *(void *)(a2 + *(int *)(SecLabelStmt + 20));
        goto LABEL_326;
      case 0x8Fu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        ForeignTableuint64_t Stmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
        uint64_t v516 = *(int *)(ForeignTableStmt + 24);
        uint64_t v517 = a1 + v516;
        uint64_t v518 = a2 + v516;
        uint64_t v519 = type metadata accessor for UnknownStorage();
        v520 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v519 - 8) + 32);
        v520(v517, v518, v519);
        uint64_t v521 = *(int *)(ForeignTableStmt + 28);
        v522 = (char *)(a1 + v521);
        v523 = (char *)(a2 + v521);
        uint64_t v524 = type metadata accessor for PgQuery_CreateStmt(0);
        uint64_t v525 = *(void *)(v524 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v525 + 48))(v523, 1, v524))
        {
          uint64_t v526 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
          memcpy(v522, v523, *(void *)(*(void *)(v526 - 8) + 64));
        }
        else
        {
          v520((uint64_t)v522, (uint64_t)v523, v519);
          *(void *)&v522[*(int *)(v524 + 20)] = *(void *)&v523[*(int *)(v524 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v525 + 56))(v522, 0, 1, v524);
        }
        goto LABEL_326;
      case 0x90u:
        long long v527 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v527;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        uint64_t v528 = *(int *)(type metadata accessor for PgQuery_ImportForeignSchemaStmt(0) + 40);
        uint64_t v529 = a1 + v528;
        uint64_t v530 = a2 + v528;
        uint64_t v531 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v531 - 8) + 32))(v529, v530, v531);
        goto LABEL_326;
      case 0x91u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v532 = *(int *)(type metadata accessor for PgQuery_CreateExtensionStmt(0) + 28);
        uint64_t v533 = a1 + v532;
        uint64_t v534 = a2 + v532;
        uint64_t v535 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v535 - 8) + 32))(v533, v534, v535);
        goto LABEL_326;
      case 0x92u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v536 = *(int *)(type metadata accessor for PgQuery_AlterExtensionStmt(0) + 24);
        uint64_t v537 = a1 + v536;
        uint64_t v538 = a2 + v536;
        uint64_t v539 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v539 - 8) + 32))(v537, v538, v539);
        goto LABEL_326;
      case 0x93u:
        uint64_t v540 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v540 - 8) + 32))(a1, a2, v540);
        AlterExtensionContentsuint64_t Stmt = type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
        *(void *)(a1 + *(int *)(AlterExtensionContentsStmt + 20)) = *(void *)(a2
                                                                                + *(int *)(AlterExtensionContentsStmt
                                                                                         + 20));
        goto LABEL_326;
      case 0x94u:
        long long v542 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v542;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        uint64_t v543 = *(int *)(type metadata accessor for PgQuery_CreateEventTrigStmt(0) + 32);
        uint64_t v544 = a1 + v543;
        uint64_t v545 = a2 + v543;
        uint64_t v546 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v546 - 8) + 32))(v544, v545, v546);
        goto LABEL_326;
      case 0x95u:
        long long v547 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v547;
        uint64_t v548 = *(int *)(type metadata accessor for PgQuery_AlterEventTrigStmt(0) + 24);
        uint64_t v549 = a1 + v548;
        uint64_t v550 = a2 + v548;
        uint64_t v551 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v551 - 8) + 32))(v549, v550, v551);
        goto LABEL_326;
      case 0x96u:
        *(_WORD *)a1 = *(_WORD *)a2;
        RefreshMatViewuint64_t Stmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
        uint64_t v553 = *(int *)(RefreshMatViewStmt + 24);
        uint64_t v554 = a1 + v553;
        uint64_t v555 = a2 + v553;
        uint64_t v136 = type metadata accessor for UnknownStorage();
        v556 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
        v556(v554, v555, v136);
        uint64_t v557 = *(int *)(RefreshMatViewStmt + 28);
        uint64_t v139 = a1 + v557;
        uint64_t v140 = a2 + v557;
        uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v142 = *(void *)(v141 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
          goto LABEL_230;
        }
        long long v847 = *(_OWORD *)(v140 + 16);
        *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
        *(_OWORD *)(v139 + 16) = v847;
        *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
        *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
        *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
        *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
        v892 = (void (*)(char *, char *, uint64_t))v556;
        v556(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
        uint64_t v848 = *(int *)(v141 + 44);
        __dsta = (void *)(v139 + v848);
        v827 = (void *)(v140 + v848);
        uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v829 = *(void *)(v828 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
          goto LABEL_304;
        }
        goto LABEL_324;
      case 0x97u:
        long long v558 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v558;
        uint64_t v559 = *(int *)(type metadata accessor for PgQuery_ReplicaIdentityStmt(0) + 24);
        uint64_t v560 = a1 + v559;
        uint64_t v561 = a2 + v559;
        uint64_t v562 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v562 - 8) + 32))(v560, v561, v562);
        goto LABEL_326;
      case 0x98u:
        uint64_t v563 = type metadata accessor for UnknownStorage();
        v564 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v563 - 8) + 32);
        v564(a1, a2, v563);
        uint64_t v565 = *(int *)(type metadata accessor for PgQuery_AlterSystemStmt(0) + 20);
        uint64_t v358 = a1 + v565;
        uint64_t v359 = a2 + v565;
        uint64_t v566 = type metadata accessor for PgQuery_VariableSetStmt(0);
        uint64_t v567 = *(void *)(v566 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v567 + 48))(v359, 1, v566))
        {
LABEL_121:
          uint64_t v362 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
          memcpy((void *)v358, (const void *)v359, *(void *)(*(void *)(v362 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v358 = *(void *)v359;
          *(unsigned char *)(v358 + 8) = *(unsigned char *)(v359 + 8);
          *(_OWORD *)(v358 + 16) = *(_OWORD *)(v359 + 16);
          *(void *)(v358 + 32) = *(void *)(v359 + 32);
          *(unsigned char *)(v358 + 40) = *(unsigned char *)(v359 + 40);
          v564(v358 + *(int *)(v566 + 32), v359 + *(int *)(v566 + 32), v563);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v567 + 56))(v358, 0, 1, v566);
        }
        goto LABEL_326;
      case 0x99u:
        uint64_t v568 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v568 - 8) + 32))(a1, a2, v568);
        Policyuint64_t Stmt = type metadata accessor for PgQuery_CreatePolicyStmt(0);
        *(void *)(a1 + *(int *)(PolicyStmt + 20)) = *(void *)(a2 + *(int *)(PolicyStmt + 20));
        goto LABEL_326;
      case 0x9Au:
        uint64_t v570 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v570 - 8) + 32))(a1, a2, v570);
        AlterPolicyuint64_t Stmt = type metadata accessor for PgQuery_AlterPolicyStmt(0);
        *(void *)(a1 + *(int *)(AlterPolicyStmt + 20)) = *(void *)(a2 + *(int *)(AlterPolicyStmt + 20));
        goto LABEL_326;
      case 0x9Bu:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        Transformuint64_t Stmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
        uint64_t v573 = *(int *)(TransformStmt + 24);
        uint64_t v574 = a1 + v573;
        uint64_t v575 = a2 + v573;
        uint64_t v576 = type metadata accessor for UnknownStorage();
        v577 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v576 - 8) + 32);
        v577(v574, v575, v576);
        uint64_t v891 = TransformStmt;
        uint64_t v578 = *(int *)(TransformStmt + 28);
        v579 = (void *)(a1 + v578);
        v580 = (void *)(a2 + v578);
        uint64_t v581 = type metadata accessor for PgQuery_TypeName(0);
        uint64_t v582 = *(void *)(v581 - 8);
        v885 = v577;
        uint64_t v888 = v576;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v582 + 48))(v580, 1, v581))
        {
          uint64_t v583 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
          memcpy(v579, v580, *(void *)(*(void *)(v583 - 8) + 64));
        }
        else
        {
          void *v579 = *v580;
          *((_DWORD *)v579 + 2) = *((_DWORD *)v580 + 2);
          *((_WORD *)v579 + 6) = *((_WORD *)v580 + 6);
          v579[2] = v580[2];
          *((_DWORD *)v579 + 6) = *((_DWORD *)v580 + 6);
          v579[4] = v580[4];
          *((_DWORD *)v579 + 10) = *((_DWORD *)v580 + 10);
          v577((uint64_t)v579 + *(int *)(v581 + 48), (uint64_t)v580 + *(int *)(v581 + 48), v576);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v582 + 56))(v579, 0, 1, v581);
        }
        uint64_t v849 = *(int *)(v891 + 32);
        v850 = (unsigned char *)(a1 + v849);
        v851 = (unsigned char *)(a2 + v849);
        uint64_t v852 = type metadata accessor for PgQuery_ObjectWithArgs(0);
        uint64_t v853 = *(void *)(v852 - 8);
        v854 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v853 + 48);
        if (v854(v851, 1, v852))
        {
          uint64_t v855 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          memcpy(v850, v851, *(void *)(*(void *)(v855 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v850 = *(_OWORD *)v851;
          v850[16] = v851[16];
          v885((uint64_t)&v850[*(int *)(v852 + 28)], (uint64_t)&v851[*(int *)(v852 + 28)], v888);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v853 + 56))(v850, 0, 1, v852);
        }
        uint64_t v874 = *(int *)(v891 + 36);
        v875 = (unsigned char *)(a1 + v874);
        v876 = (unsigned char *)(a2 + v874);
        if (v854(v876, 1, v852))
        {
          uint64_t v877 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          memcpy(v875, v876, *(void *)(*(void *)(v877 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v875 = *(_OWORD *)v876;
          v875[16] = v876[16];
          v885((uint64_t)&v875[*(int *)(v852 + 28)], (uint64_t)&v876[*(int *)(v852 + 28)], v888);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v853 + 56))(v875, 0, 1, v852);
        }
        goto LABEL_326;
      case 0x9Cu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        uint64_t v584 = *(int *)(type metadata accessor for PgQuery_CreateAmStmt(0) + 28);
        uint64_t v585 = a1 + v584;
        uint64_t v586 = a2 + v584;
        uint64_t v587 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v587 - 8) + 32))(v585, v586, v587);
        goto LABEL_326;
      case 0x9Du:
        long long v588 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v588;
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        uint64_t v589 = *(int *)(type metadata accessor for PgQuery_CreatePublicationStmt(0) + 32);
        uint64_t v590 = a1 + v589;
        uint64_t v591 = a2 + v589;
        uint64_t v592 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v592 - 8) + 32))(v590, v591, v592);
        goto LABEL_326;
      case 0x9Eu:
        long long v593 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v593;
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
        uint64_t v594 = *(int *)(type metadata accessor for PgQuery_AlterPublicationStmt(0) + 36);
        uint64_t v595 = a1 + v594;
        uint64_t v596 = a2 + v594;
        uint64_t v597 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v597 - 8) + 32))(v595, v596, v597);
        goto LABEL_326;
      case 0x9Fu:
        long long v598 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v598;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        uint64_t v599 = *(int *)(type metadata accessor for PgQuery_CreateSubscriptionStmt(0) + 32);
        uint64_t v600 = a1 + v599;
        uint64_t v601 = a2 + v599;
        uint64_t v602 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v602 - 8) + 32))(v600, v601, v602);
        goto LABEL_326;
      case 0xA0u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        long long v603 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 32) = v603;
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        uint64_t v604 = *(int *)(type metadata accessor for PgQuery_AlterSubscriptionStmt(0) + 36);
        uint64_t v605 = a1 + v604;
        uint64_t v606 = a2 + v604;
        uint64_t v607 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v607 - 8) + 32))(v605, v606, v607);
        goto LABEL_326;
      case 0xA1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        uint64_t v608 = *(int *)(type metadata accessor for PgQuery_DropSubscriptionStmt(0) + 28);
        uint64_t v609 = a1 + v608;
        uint64_t v610 = a2 + v608;
        uint64_t v611 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v611 - 8) + 32))(v609, v610, v611);
        goto LABEL_326;
      case 0xA2u:
        long long v612 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v612;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
        uint64_t v613 = *(int *)(type metadata accessor for PgQuery_CreateStatsStmt(0) + 40);
        uint64_t v614 = a1 + v613;
        uint64_t v615 = a2 + v613;
        uint64_t v616 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v616 - 8) + 32))(v614, v615, v616);
        goto LABEL_326;
      case 0xA3u:
        *(void *)a1 = *(void *)a2;
        uint64_t v617 = *(int *)(type metadata accessor for PgQuery_AlterCollationStmt(0) + 20);
        uint64_t v618 = a1 + v617;
        uint64_t v619 = a2 + v617;
        uint64_t v620 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v620 - 8) + 32))(v618, v619, v620);
        goto LABEL_326;
      case 0xA4u:
        uint64_t v621 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v621 - 8) + 32))(a1, a2, v621);
        uint64_t v622 = type metadata accessor for PgQuery_CallStmt(0);
        *(void *)(a1 + *(int *)(v622 + 20)) = *(void *)(a2 + *(int *)(v622 + 20));
        goto LABEL_326;
      case 0xA5u:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
        uint64_t v623 = *(int *)(type metadata accessor for PgQuery_AlterStatsStmt(0) + 28);
        uint64_t v624 = a1 + v623;
        uint64_t v625 = a2 + v623;
        uint64_t v626 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v626 - 8) + 32))(v624, v625, v626);
        goto LABEL_326;
      case 0xA6u:
        uint64_t v627 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v627 - 8) + 32))(a1, a2, v627);
        uint64_t A_Expr = type metadata accessor for PgQuery_A_Expr(0);
        *(void *)(a1 + *(int *)(A_Expr + 20)) = *(void *)(a2 + *(int *)(A_Expr + 20));
        goto LABEL_326;
      case 0xA7u:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        uint64_t v629 = *(int *)(type metadata accessor for PgQuery_ColumnRef(0) + 24);
        uint64_t v630 = a1 + v629;
        uint64_t v631 = a2 + v629;
        uint64_t v632 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v632 - 8) + 32))(v630, v631, v632);
        goto LABEL_326;
      case 0xA8u:
        *(void *)a1 = *(void *)a2;
        uint64_t v633 = *(int *)(type metadata accessor for PgQuery_ParamRef(0) + 24);
        uint64_t v634 = a1 + v633;
        uint64_t v635 = a2 + v633;
        uint64_t v636 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v636 - 8) + 32))(v634, v635, v636);
        goto LABEL_326;
      case 0xA9u:
        uint64_t v637 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v637 - 8) + 32))(a1, a2, v637);
        uint64_t A_Const = type metadata accessor for PgQuery_A_Const(0);
        *(void *)(a1 + *(int *)(A_Const + 20)) = *(void *)(a2 + *(int *)(A_Const + 20));
        goto LABEL_326;
      case 0xAAu:
        uint64_t v639 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v639 - 8) + 32))(a1, a2, v639);
        uint64_t v640 = type metadata accessor for PgQuery_FuncCall(0);
        *(void *)(a1 + *(int *)(v640 + 20)) = *(void *)(a2 + *(int *)(v640 + 20));
        goto LABEL_326;
      case 0xACu:
        uint64_t v641 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v641 - 8) + 32))(a1, a2, v641);
        uint64_t A_Indices = type metadata accessor for PgQuery_A_Indices(0);
        *(void *)(a1 + *(int *)(A_Indices + 20)) = *(void *)(a2 + *(int *)(A_Indices + 20));
        goto LABEL_326;
      case 0xADu:
        uint64_t v643 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v643 - 8) + 32))(a1, a2, v643);
        uint64_t A_Indirection = type metadata accessor for PgQuery_A_Indirection(0);
        *(void *)(a1 + *(int *)(A_Indirection + 20)) = *(void *)(a2 + *(int *)(A_Indirection + 20));
        goto LABEL_326;
      case 0xAEu:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        uint64_t v645 = *(int *)(type metadata accessor for PgQuery_A_ArrayExpr(0) + 24);
        uint64_t v646 = a1 + v645;
        uint64_t v647 = a2 + v645;
        uint64_t v648 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v648 - 8) + 32))(v646, v647, v648);
        goto LABEL_326;
      case 0xAFu:
        uint64_t v649 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v649 - 8) + 32))(a1, a2, v649);
        uint64_t ResTarget = type metadata accessor for PgQuery_ResTarget(0);
        *(void *)(a1 + *(int *)(ResTarget + 20)) = *(void *)(a2 + *(int *)(ResTarget + 20));
        goto LABEL_326;
      case 0xB0u:
        uint64_t v651 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v651 - 8) + 32))(a1, a2, v651);
        uint64_t MultiAssignRef = type metadata accessor for PgQuery_MultiAssignRef(0);
        *(void *)(a1 + *(int *)(MultiAssignRef + 20)) = *(void *)(a2 + *(int *)(MultiAssignRef + 20));
        goto LABEL_326;
      case 0xB1u:
        uint64_t v653 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v653 - 8) + 32))(a1, a2, v653);
        uint64_t TypeCast = type metadata accessor for PgQuery_TypeCast(0);
        *(void *)(a1 + *(int *)(TypeCast + 20)) = *(void *)(a2 + *(int *)(TypeCast + 20));
        goto LABEL_326;
      case 0xB2u:
        uint64_t v655 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v655 - 8) + 32))(a1, a2, v655);
        uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
        *(void *)(a1 + *(int *)(CollateClause + 20)) = *(void *)(a2 + *(int *)(CollateClause + 20));
        goto LABEL_326;
      case 0xB3u:
        uint64_t v657 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v657 - 8) + 32))(a1, a2, v657);
        uint64_t SortBy = type metadata accessor for PgQuery_SortBy(0);
        *(void *)(a1 + *(int *)(SortBy + 20)) = *(void *)(a2 + *(int *)(SortBy + 20));
        goto LABEL_326;
      case 0xB4u:
        uint64_t v659 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v659 - 8) + 32))(a1, a2, v659);
        uint64_t WindowDef = type metadata accessor for PgQuery_WindowDef(0);
        *(void *)(a1 + *(int *)(WindowDef + 20)) = *(void *)(a2 + *(int *)(WindowDef + 20));
        goto LABEL_326;
      case 0xB5u:
        uint64_t v661 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v661 - 8) + 32))(a1, a2, v661);
        uint64_t RangeSubselect = type metadata accessor for PgQuery_RangeSubselect(0);
        *(void *)(a1 + *(int *)(RangeSubselect + 20)) = *(void *)(a2 + *(int *)(RangeSubselect + 20));
        goto LABEL_326;
      case 0xB6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        uint64_t RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
        uint64_t v664 = *(int *)(RangeFunction + 36);
        uint64_t v665 = a1 + v664;
        uint64_t v666 = a2 + v664;
        uint64_t v13 = type metadata accessor for UnknownStorage();
        v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);
        v14(v665, v666, v13);
        uint64_t v667 = *(int *)(RangeFunction + 40);
        v16 = (void *)(a1 + v667);
        v17 = (void *)(a2 + v667);
        uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
        uint64_t v19 = *(void *)(Alias - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, Alias))
        {
LABEL_5:
          uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
          memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
        }
        else
        {
LABEL_259:
          *(_OWORD *)v16 = *(_OWORD *)v17;
          v16[2] = v17[2];
          v14((uint64_t)v16 + *(int *)(Alias + 24), (uint64_t)v17 + *(int *)(Alias + 24), v13);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, Alias);
        }
        goto LABEL_326;
      case 0xB7u:
        uint64_t v668 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v668 - 8) + 32))(a1, a2, v668);
        uint64_t RangeTableSample = type metadata accessor for PgQuery_RangeTableSample(0);
        *(void *)(a1 + *(int *)(RangeTableSample + 20)) = *(void *)(a2 + *(int *)(RangeTableSample + 20));
        goto LABEL_326;
      case 0xB8u:
        uint64_t v670 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v670 - 8) + 32))(a1, a2, v670);
        Rangeuint64_t TableFunc = type metadata accessor for PgQuery_RangeTableFunc(0);
        *(void *)(a1 + *(int *)(RangeTableFunc + 20)) = *(void *)(a2 + *(int *)(RangeTableFunc + 20));
        goto LABEL_326;
      case 0xB9u:
        uint64_t v672 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v672 - 8) + 32))(a1, a2, v672);
        uint64_t RangeTableFuncCol = type metadata accessor for PgQuery_RangeTableFuncCol(0);
        *(void *)(a1 + *(int *)(RangeTableFuncCol + 20)) = *(void *)(a2 + *(int *)(RangeTableFuncCol + 20));
        goto LABEL_326;
      case 0xBAu:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
        uint64_t v674 = *(int *)(type metadata accessor for PgQuery_TypeName(0) + 48);
        uint64_t v675 = a1 + v674;
        uint64_t v676 = a2 + v674;
        uint64_t v677 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v677 - 8) + 32))(v675, v676, v677);
        goto LABEL_326;
      case 0xBBu:
        uint64_t v678 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v678 - 8) + 32))(a1, a2, v678);
        uint64_t ColumnDef = type metadata accessor for PgQuery_ColumnDef(0);
        *(void *)(a1 + *(int *)(ColumnDef + 20)) = *(void *)(a2 + *(int *)(ColumnDef + 20));
        goto LABEL_326;
      case 0xBCu:
        uint64_t v680 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v680 - 8) + 32))(a1, a2, v680);
        uint64_t IndexElem = type metadata accessor for PgQuery_IndexElem(0);
        *(void *)(a1 + *(int *)(IndexElem + 20)) = *(void *)(a2 + *(int *)(IndexElem + 20));
        goto LABEL_326;
      case 0xBDu:
        uint64_t v682 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v682 - 8) + 32))(a1, a2, v682);
        uint64_t Constraint = type metadata accessor for PgQuery_Constraint(0);
        *(void *)(a1 + *(int *)(Constraint + 20)) = *(void *)(a2 + *(int *)(Constraint + 20));
        goto LABEL_326;
      case 0xBEu:
        uint64_t v684 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v684 - 8) + 32))(a1, a2, v684);
        uint64_t DefElem = type metadata accessor for PgQuery_DefElem(0);
        *(void *)(a1 + *(int *)(DefElem + 20)) = *(void *)(a2 + *(int *)(DefElem + 20));
        goto LABEL_326;
      case 0xBFu:
        uint64_t v686 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v686 - 8) + 32))(a1, a2, v686);
        uint64_t RangeTblEntry = type metadata accessor for PgQuery_RangeTblEntry(0);
        *(void *)(a1 + *(int *)(RangeTblEntry + 20)) = *(void *)(a2 + *(int *)(RangeTblEntry + 20));
        goto LABEL_326;
      case 0xC0u:
        uint64_t v688 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v688 - 8) + 32))(a1, a2, v688);
        uint64_t RangeTblFunction = type metadata accessor for PgQuery_RangeTblFunction(0);
        *(void *)(a1 + *(int *)(RangeTblFunction + 20)) = *(void *)(a2 + *(int *)(RangeTblFunction + 20));
        goto LABEL_326;
      case 0xC1u:
        uint64_t v690 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v690 - 8) + 32))(a1, a2, v690);
        uint64_t TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
        *(void *)(a1 + *(int *)(TableSampleClause + 20)) = *(void *)(a2 + *(int *)(TableSampleClause + 20));
        goto LABEL_326;
      case 0xC2u:
        uint64_t v692 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v692 - 8) + 32))(a1, a2, v692);
        uint64_t v693 = type metadata accessor for PgQuery_WithCheckOption(0);
        *(void *)(a1 + *(int *)(v693 + 20)) = *(void *)(a2 + *(int *)(v693 + 20));
        goto LABEL_326;
      case 0xC3u:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
        uint64_t v694 = *(int *)(type metadata accessor for PgQuery_SortGroupClause(0) + 36);
        uint64_t v695 = a1 + v694;
        uint64_t v696 = a2 + v694;
        uint64_t v697 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v697 - 8) + 32))(v695, v696, v697);
        goto LABEL_326;
      case 0xC4u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        uint64_t v698 = *(int *)(type metadata accessor for PgQuery_GroupingSet(0) + 28);
        uint64_t v699 = a1 + v698;
        uint64_t v700 = a2 + v698;
        uint64_t v701 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v701 - 8) + 32))(v699, v700, v701);
        goto LABEL_326;
      case 0xC5u:
        uint64_t v702 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v702 - 8) + 32))(a1, a2, v702);
        uint64_t WindowClause = type metadata accessor for PgQuery_WindowClause(0);
        *(void *)(a1 + *(int *)(WindowClause + 20)) = *(void *)(a2 + *(int *)(WindowClause + 20));
        goto LABEL_326;
      case 0xC6u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        uint64_t v704 = *(int *)(type metadata accessor for PgQuery_ObjectWithArgs(0) + 28);
        uint64_t v705 = a1 + v704;
        uint64_t v706 = a2 + v704;
        uint64_t v707 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v707 - 8) + 32))(v705, v706, v707);
        goto LABEL_326;
      case 0xC7u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v708 = *(int *)(type metadata accessor for PgQuery_AccessPriv(0) + 24);
        uint64_t v709 = a1 + v708;
        uint64_t v710 = a2 + v708;
        uint64_t v711 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v711 - 8) + 32))(v709, v710, v711);
        goto LABEL_326;
      case 0xC8u:
        *(void *)a1 = *(void *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        OpClassItem = (int *)type metadata accessor for PgQuery_CreateOpClassItem(0);
        uint64_t v713 = OpClassItem[8];
        uint64_t v714 = a1 + v713;
        uint64_t v715 = a2 + v713;
        uint64_t v716 = type metadata accessor for UnknownStorage();
        v717 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v716 - 8) + 32);
        v717(v714, v715, v716);
        uint64_t v718 = OpClassItem[9];
        v719 = (unsigned char *)(a1 + v718);
        v720 = (unsigned char *)(a2 + v718);
        uint64_t v721 = type metadata accessor for PgQuery_ObjectWithArgs(0);
        uint64_t v722 = *(void *)(v721 - 8);
        uint64_t v889 = v716;
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v722 + 48))(v720, 1, v721))
        {
          uint64_t v723 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          memcpy(v719, v720, *(void *)(*(void *)(v723 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v719 = *(_OWORD *)v720;
          v719[16] = v720[16];
          v717((uint64_t)&v719[*(int *)(v721 + 28)], (uint64_t)&v720[*(int *)(v721 + 28)], v716);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v722 + 56))(v719, 0, 1, v721);
        }
        uint64_t v856 = OpClassItem[10];
        v857 = (void *)(a1 + v856);
        v858 = (void *)(a2 + v856);
        uint64_t v859 = type metadata accessor for PgQuery_TypeName(0);
        uint64_t v860 = *(void *)(v859 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v860 + 48))(v858, 1, v859))
        {
          uint64_t v861 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
          memcpy(v857, v858, *(void *)(*(void *)(v861 - 8) + 64));
        }
        else
        {
          void *v857 = *v858;
          *((_DWORD *)v857 + 2) = *((_DWORD *)v858 + 2);
          *((_WORD *)v857 + 6) = *((_WORD *)v858 + 6);
          v857[2] = v858[2];
          *((_DWORD *)v857 + 6) = *((_DWORD *)v858 + 6);
          v857[4] = v858[4];
          *((_DWORD *)v857 + 10) = *((_DWORD *)v858 + 10);
          v717((uint64_t)v857 + *(int *)(v859 + 48), (uint64_t)v858 + *(int *)(v859 + 48), v889);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v860 + 56))(v857, 0, 1, v859);
        }
        goto LABEL_326;
      case 0xC9u:
        *(void *)a1 = *(void *)a2;
        uint64_t TableLikeClause = type metadata accessor for PgQuery_TableLikeClause(0);
        uint64_t v725 = *(int *)(TableLikeClause + 24);
        uint64_t v726 = a1 + v725;
        uint64_t v727 = a2 + v725;
        uint64_t v136 = type metadata accessor for UnknownStorage();
        v728 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
        v728(v726, v727, v136);
        uint64_t v729 = *(int *)(TableLikeClause + 28);
        uint64_t v139 = a1 + v729;
        uint64_t v140 = a2 + v729;
        uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v142 = *(void *)(v141 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141)) {
          goto LABEL_230;
        }
        long long v862 = *(_OWORD *)(v140 + 16);
        *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
        *(_OWORD *)(v139 + 16) = v862;
        *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
        *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
        *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
        *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
        v892 = (void (*)(char *, char *, uint64_t))v728;
        v728(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
        uint64_t v863 = *(int *)(v141 + 44);
        __dsta = (void *)(v139 + v863);
        v827 = (void *)(v140 + v863);
        uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v829 = *(void *)(v828 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828)) {
          goto LABEL_304;
        }
        goto LABEL_324;
      case 0xCAu:
        uint64_t v731 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v731 - 8) + 32))(a1, a2, v731);
        uint64_t FunctionParameter = type metadata accessor for PgQuery_FunctionParameter(0);
        *(void *)(a1 + *(int *)(FunctionParameter + 20)) = *(void *)(a2 + *(int *)(FunctionParameter + 20));
        goto LABEL_326;
      case 0xCBu:
        uint64_t v733 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v733;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        uint64_t v734 = *(int *)(type metadata accessor for PgQuery_LockingClause(0) + 28);
        uint64_t v735 = a1 + v734;
        uint64_t v736 = a2 + v734;
        uint64_t v737 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v737 - 8) + 32))(v735, v736, v737);
        goto LABEL_326;
      case 0xCCu:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
        uint64_t v738 = *(int *)(type metadata accessor for PgQuery_RowMarkClause(0) + 32);
        uint64_t v739 = a1 + v738;
        uint64_t v740 = a2 + v738;
        uint64_t v741 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v741 - 8) + 32))(v739, v740, v741);
        goto LABEL_326;
      case 0xCDu:
        uint64_t v742 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v742 - 8) + 32))(a1, a2, v742);
        uint64_t XmlSerialize = type metadata accessor for PgQuery_XmlSerialize(0);
        *(void *)(a1 + *(int *)(XmlSerialize + 20)) = *(void *)(a2 + *(int *)(XmlSerialize + 20));
        goto LABEL_326;
      case 0xCEu:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
        uint64_t v744 = *(int *)(type metadata accessor for PgQuery_WithClause(0) + 28);
        uint64_t v745 = a1 + v744;
        uint64_t v746 = a2 + v744;
        uint64_t v747 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v747 - 8) + 32))(v745, v746, v747);
        goto LABEL_326;
      case 0xCFu:
        uint64_t v748 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v748 - 8) + 32))(a1, a2, v748);
        uint64_t InferClause = type metadata accessor for PgQuery_InferClause(0);
        *(void *)(a1 + *(int *)(InferClause + 20)) = *(void *)(a2 + *(int *)(InferClause + 20));
        goto LABEL_326;
      case 0xD0u:
        uint64_t v750 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v750 - 8) + 32))(a1, a2, v750);
        uint64_t v751 = type metadata accessor for PgQuery_OnConflictClause(0);
        *(void *)(a1 + *(int *)(v751 + 20)) = *(void *)(a2 + *(int *)(v751 + 20));
        goto LABEL_326;
      case 0xD1u:
        uint64_t v752 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v752 - 8) + 32))(a1, a2, v752);
        uint64_t CommonTableExpr = type metadata accessor for PgQuery_CommonTableExpr(0);
        *(void *)(a1 + *(int *)(CommonTableExpr + 20)) = *(void *)(a2 + *(int *)(CommonTableExpr + 20));
        goto LABEL_326;
      case 0xD2u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        uint64_t v754 = *(int *)(type metadata accessor for PgQuery_RoleSpec(0) + 28);
        uint64_t v755 = a1 + v754;
        uint64_t v756 = a2 + v754;
        uint64_t v757 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v757 - 8) + 32))(v755, v756, v757);
        goto LABEL_326;
      case 0xD3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
        uint64_t v758 = *(int *)(type metadata accessor for PgQuery_TriggerTransition(0) + 28);
        uint64_t v759 = a1 + v758;
        uint64_t v760 = a2 + v758;
        uint64_t v761 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v761 - 8) + 32))(v759, v760, v761);
        goto LABEL_326;
      case 0xD4u:
        uint64_t v762 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v762 - 8) + 32))(a1, a2, v762);
        uint64_t PartitionElem = type metadata accessor for PgQuery_PartitionElem(0);
        *(void *)(a1 + *(int *)(PartitionElem + 20)) = *(void *)(a2 + *(int *)(PartitionElem + 20));
        goto LABEL_326;
      case 0xD5u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        uint64_t v764 = *(int *)(type metadata accessor for PgQuery_PartitionSpec(0) + 28);
        uint64_t v765 = a1 + v764;
        uint64_t v766 = a2 + v764;
        uint64_t v767 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v767 - 8) + 32))(v765, v766, v767);
        goto LABEL_326;
      case 0xD6u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        *(void *)(a1 + 20) = *(void *)(a2 + 20);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
        uint64_t v768 = *(int *)(type metadata accessor for PgQuery_PartitionBoundSpec(0) + 48);
        uint64_t v769 = a1 + v768;
        uint64_t v770 = a2 + v768;
        uint64_t v771 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v771 - 8) + 32))(v769, v770, v771);
        goto LABEL_326;
      case 0xD7u:
        uint64_t v772 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v772 - 8) + 32))(a1, a2, v772);
        uint64_t PartitionRangeDatum = type metadata accessor for PgQuery_PartitionRangeDatum(0);
        *(void *)(a1 + *(int *)(PartitionRangeDatum + 20)) = *(void *)(a2 + *(int *)(PartitionRangeDatum + 20));
        goto LABEL_326;
      case 0xD8u:
        uint64_t v774 = type metadata accessor for UnknownStorage();
        v775 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v774 - 8) + 32);
        v775(a1, a2, v774);
        __dst = (int *)type metadata accessor for PgQuery_PartitionCmd(0);
        uint64_t v776 = __dst[5];
        v777 = (_OWORD *)(a1 + v776);
        v778 = (_OWORD *)(a2 + v776);
        uint64_t v779 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v780 = *(void *)(v779 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v780 + 48))(v778, 1, v779))
        {
          uint64_t v781 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
          memcpy(v777, v778, *(void *)(*(void *)(v781 - 8) + 64));
        }
        else
        {
          long long v864 = v778[1];
          _OWORD *v777 = *v778;
          v777[1] = v864;
          v777[2] = v778[2];
          *((unsigned char *)v777 + 48) = *((unsigned char *)v778 + 48);
          *(_OWORD *)((char *)v777 + 56) = *(_OWORD *)((char *)v778 + 56);
          *((_DWORD *)v777 + 18) = *((_DWORD *)v778 + 18);
          v775((uint64_t)v777 + *(int *)(v779 + 40), (uint64_t)v778 + *(int *)(v779 + 40), v774);
          uint64_t v865 = *(int *)(v779 + 44);
          v886 = (void *)((char *)v777 + v865);
          v866 = (void *)((char *)v778 + v865);
          v890 = (void (*)(char *, char *, uint64_t))v775;
          uint64_t v867 = type metadata accessor for PgQuery_Alias(0);
          uint64_t v868 = v774;
          uint64_t v869 = *(void *)(v867 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v869 + 48))(v866, 1, v867))
          {
            uint64_t v870 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
            memcpy(v886, v866, *(void *)(*(void *)(v870 - 8) + 64));
          }
          else
          {
            *(_OWORD *)v886 = *(_OWORD *)v866;
            v886[2] = v866[2];
            v890((char *)v886 + *(int *)(v867 + 24), (char *)v866 + *(int *)(v867 + 24), v868);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v869 + 56))(v886, 0, 1, v867);
          }
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v780 + 56))(v777, 0, 1, v779);
          uint64_t v774 = v868;
          v775 = (void (*)(uint64_t, uint64_t, uint64_t))v890;
        }
        uint64_t v878 = __dst[6];
        v879 = (_OWORD *)(a1 + v878);
        v880 = (_OWORD *)(a2 + v878);
        uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
        uint64_t v882 = *(void *)(PartitionBoundSpec - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v882 + 48))(v880, 1, PartitionBoundSpec))
        {
          uint64_t v883 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
          memcpy(v879, v880, *(void *)(*(void *)(v883 - 8) + 64));
        }
        else
        {
          _OWORD *v879 = *v880;
          *((unsigned char *)v879 + 16) = *((unsigned char *)v880 + 16);
          *(void *)((char *)v879 + 20) = *(void *)((char *)v880 + 20);
          v879[2] = v880[2];
          *((void *)v879 + 6) = *((void *)v880 + 6);
          *((_DWORD *)v879 + 14) = *((_DWORD *)v880 + 14);
          v775((uint64_t)v879 + *(int *)(PartitionBoundSpec + 48), (uint64_t)v880 + *(int *)(PartitionBoundSpec + 48), v774);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v882 + 56))(v879, 0, 1, PartitionBoundSpec);
        }
        goto LABEL_326;
      case 0xD9u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        uint64_t VacuumRelation = type metadata accessor for PgQuery_VacuumRelation(0);
        uint64_t v783 = *(int *)(VacuumRelation + 24);
        uint64_t v784 = a1 + v783;
        uint64_t v785 = a2 + v783;
        uint64_t v136 = type metadata accessor for UnknownStorage();
        v786 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32);
        v786(v784, v785, v136);
        uint64_t v787 = *(int *)(VacuumRelation + 28);
        uint64_t v139 = a1 + v787;
        uint64_t v140 = a2 + v787;
        uint64_t v141 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v142 = *(void *)(v141 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141))
        {
LABEL_230:
          uint64_t v730 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
          memcpy((void *)v139, (const void *)v140, *(void *)(*(void *)(v730 - 8) + 64));
        }
        else
        {
          long long v871 = *(_OWORD *)(v140 + 16);
          *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
          *(_OWORD *)(v139 + 16) = v871;
          *(_OWORD *)(v139 + 32) = *(_OWORD *)(v140 + 32);
          *(unsigned char *)(v139 + 48) = *(unsigned char *)(v140 + 48);
          *(_OWORD *)(v139 + 56) = *(_OWORD *)(v140 + 56);
          *(_DWORD *)(v139 + 72) = *(_DWORD *)(v140 + 72);
          v892 = (void (*)(char *, char *, uint64_t))v786;
          v786(v139 + *(int *)(v141 + 40), v140 + *(int *)(v141 + 40), v136);
          uint64_t v872 = *(int *)(v141 + 44);
          __dsta = (void *)(v139 + v872);
          v827 = (void *)(v140 + v872);
          uint64_t v828 = type metadata accessor for PgQuery_Alias(0);
          uint64_t v829 = *(void *)(v828 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828))
          {
LABEL_304:
            uint64_t v873 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
            memcpy(__dsta, v827, *(void *)(*(void *)(v873 - 8) + 64));
          }
          else
          {
LABEL_324:
            *(_OWORD *)__dsta = *(_OWORD *)v827;
            __dsta[2] = v827[2];
            v892((char *)__dsta + *(int *)(v828 + 24), (char *)v827 + *(int *)(v828 + 24), v136);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v829 + 56))(__dsta, 0, 1, v828);
          }
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v142 + 56))(v139, 0, 1, v141);
        }
LABEL_326:
        swift_storeEnumTagMultiPayload();
        break;
      case 0xDAu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
        uint64_t v788 = *(int *)(type metadata accessor for PgQuery_InlineCodeBlock(0) + 32);
        uint64_t v789 = a1 + v788;
        uint64_t v790 = a2 + v788;
        uint64_t v791 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v791 - 8) + 32))(v789, v790, v791);
        goto LABEL_326;
      case 0xDBu:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v792 = *(int *)(type metadata accessor for PgQuery_CallContext(0) + 20);
        uint64_t v793 = a1 + v792;
        uint64_t v794 = a2 + v792;
        uint64_t v795 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v795 - 8) + 32))(v793, v794, v795);
        goto LABEL_326;
      case 0xDCu:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        uint64_t v796 = *(int *)(type metadata accessor for PgQuery_Integer(0) + 20);
        uint64_t v797 = a1 + v796;
        uint64_t v798 = a2 + v796;
        uint64_t v799 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v799 - 8) + 32))(v797, v798, v799);
        goto LABEL_326;
      case 0xDDu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v800 = *(int *)(type metadata accessor for PgQuery_Float(0) + 20);
        uint64_t v801 = a1 + v800;
        uint64_t v802 = a2 + v800;
        uint64_t v803 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v803 - 8) + 32))(v801, v802, v803);
        goto LABEL_326;
      case 0xDEu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v804 = *(int *)(type metadata accessor for PgQuery_String(0) + 20);
        uint64_t v805 = a1 + v804;
        uint64_t v806 = a2 + v804;
        uint64_t v807 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v807 - 8) + 32))(v805, v806, v807);
        goto LABEL_326;
      case 0xDFu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v808 = *(int *)(type metadata accessor for PgQuery_BitString(0) + 20);
        uint64_t v809 = a1 + v808;
        uint64_t v810 = a2 + v808;
        uint64_t v811 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v811 - 8) + 32))(v809, v810, v811);
        goto LABEL_326;
      case 0xE1u:
        *(void *)a1 = *(void *)a2;
        uint64_t v813 = *(int *)(type metadata accessor for PgQuery_List(0) + 20);
        uint64_t v814 = a1 + v813;
        uint64_t v815 = a2 + v813;
        uint64_t v816 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v816 - 8) + 32))(v814, v815, v816);
        goto LABEL_326;
      case 0xE2u:
        *(void *)a1 = *(void *)a2;
        uint64_t v817 = *(int *)(type metadata accessor for PgQuery_IntList(0) + 20);
        uint64_t v818 = a1 + v817;
        uint64_t v819 = a2 + v817;
        uint64_t v820 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v820 - 8) + 32))(v818, v819, v820);
        goto LABEL_326;
      case 0xE3u:
        *(void *)a1 = *(void *)a2;
        uint64_t v821 = *(int *)(type metadata accessor for PgQuery_OidList(0) + 20);
        uint64_t v822 = a1 + v821;
        uint64_t v823 = a2 + v821;
        uint64_t v824 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v824 - 8) + 32))(v822, v823, v824);
        goto LABEL_326;
      default:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v4 = *(int *)(type metadata accessor for PgQuery_Alias(0) + 24);
        uint64_t v5 = a1 + v4;
        uint64_t v6 = a2 + v4;
        uint64_t v7 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
        goto LABEL_326;
    }
  }
  return a1;
}

uint64_t type metadata completion function for PgQuery_Node.OneOf_Node()
{
  uint64_t result = type metadata accessor for PgQuery_Alias(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PgQuery_RangeVar(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for PgQuery_TableFunc(319);
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for UnknownStorage();
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for PgQuery_Var(319);
          if (v5 <= 0x3F)
          {
            uint64_t result = type metadata accessor for PgQuery_Param(319);
            if (v6 <= 0x3F)
            {
              uint64_t result = type metadata accessor for PgQuery_Aggref(319);
              if (v7 <= 0x3F)
              {
                uint64_t result = type metadata accessor for PgQuery_GroupingFunc(319);
                if (v8 <= 0x3F)
                {
                  uint64_t result = type metadata accessor for PgQuery_WindowFunc(319);
                  if (v9 <= 0x3F)
                  {
                    uint64_t result = type metadata accessor for PgQuery_SubscriptingRef(319);
                    if (v10 <= 0x3F)
                    {
                      uint64_t result = type metadata accessor for PgQuery_FuncExpr(319);
                      if (v11 <= 0x3F)
                      {
                        uint64_t result = type metadata accessor for PgQuery_NamedArgExpr(319);
                        if (v12 <= 0x3F)
                        {
                          uint64_t result = type metadata accessor for PgQuery_OpExpr(319);
                          if (v13 <= 0x3F)
                          {
                            uint64_t result = type metadata accessor for PgQuery_DistinctExpr(319);
                            if (v14 <= 0x3F)
                            {
                              uint64_t result = type metadata accessor for PgQuery_NullIfExpr(319);
                              if (v15 <= 0x3F)
                              {
                                uint64_t result = type metadata accessor for PgQuery_ScalarArrayOpExpr(319);
                                if (v16 <= 0x3F)
                                {
                                  uint64_t result = type metadata accessor for PgQuery_BoolExpr(319);
                                  if (v17 <= 0x3F)
                                  {
                                    uint64_t result = type metadata accessor for PgQuery_SubLink(319);
                                    if (v18 <= 0x3F)
                                    {
                                      uint64_t result = type metadata accessor for PgQuery_SubPlan(319);
                                      if (v19 <= 0x3F)
                                      {
                                        uint64_t result = type metadata accessor for PgQuery_AlternativeSubPlan(319);
                                        if (v20 <= 0x3F)
                                        {
                                          uint64_t result = type metadata accessor for PgQuery_FieldSelect(319);
                                          if (v21 <= 0x3F)
                                          {
                                            uint64_t result = type metadata accessor for PgQuery_FieldStore(319);
                                            if (v22 <= 0x3F)
                                            {
                                              uint64_t result = type metadata accessor for PgQuery_RelabelType(319);
                                              if (v23 <= 0x3F)
                                              {
                                                uint64_t result = type metadata accessor for PgQuery_CoerceViaIO(319);
                                                if (v24 <= 0x3F)
                                                {
                                                  uint64_t result = type metadata accessor for PgQuery_ArrayCoerceExpr(319);
                                                  if (v25 <= 0x3F)
                                                  {
                                                    uint64_t result = type metadata accessor for PgQuery_ConvertRowtypeExpr(319);
                                                    if (v26 <= 0x3F)
                                                    {
                                                      uint64_t result = type metadata accessor for PgQuery_CollateExpr(319);
                                                      if (v27 <= 0x3F)
                                                      {
                                                        uint64_t result = type metadata accessor for PgQuery_CaseExpr(319);
                                                        if (v28 <= 0x3F)
                                                        {
                                                          uint64_t result = type metadata accessor for PgQuery_CaseWhen(319);
                                                          if (v29 <= 0x3F)
                                                          {
                                                            uint64_t result = type metadata accessor for PgQuery_CaseTestExpr(319);
                                                            if (v30 <= 0x3F)
                                                            {
                                                              uint64_t result = type metadata accessor for PgQuery_ArrayExpr(319);
                                                              if (v31 <= 0x3F)
                                                              {
                                                                uint64_t result = type metadata accessor for PgQuery_RowExpr(319);
                                                                if (v32 <= 0x3F)
                                                                {
                                                                  uint64_t result = type metadata accessor for PgQuery_RowCompareExpr(319);
                                                                  if (v33 <= 0x3F)
                                                                  {
                                                                    uint64_t result = type metadata accessor for PgQuery_CoalesceExpr(319);
                                                                    if (v34 <= 0x3F)
                                                                    {
                                                                      uint64_t result = type metadata accessor for PgQuery_MinMaxExpr(319);
                                                                      if (v35 <= 0x3F)
                                                                      {
                                                                        uint64_t result = type metadata accessor for PgQuery_SQLValueFunction(319);
                                                                        if (v36 <= 0x3F)
                                                                        {
                                                                          uint64_t result = type metadata accessor for PgQuery_XmlExpr(319);
                                                                          if (v37 <= 0x3F)
                                                                          {
                                                                            uint64_t result = type metadata accessor for PgQuery_NullTest(319);
                                                                            if (v38 <= 0x3F)
                                                                            {
                                                                              uint64_t result = type metadata accessor for PgQuery_BooleanTest(319);
                                                                              if (v39 <= 0x3F)
                                                                              {
                                                                                uint64_t result = type metadata accessor for PgQuery_CoerceToDomain(319);
                                                                                if (v40 <= 0x3F)
                                                                                {
                                                                                  uint64_t result = type metadata accessor for PgQuery_CoerceToDomainValue(319);
                                                                                  if (v41 <= 0x3F)
                                                                                  {
                                                                                    uint64_t result = type metadata accessor for PgQuery_SetToDefault(319);
                                                                                    if (v42 <= 0x3F)
                                                                                    {
                                                                                      uint64_t result = type metadata accessor for PgQuery_CurrentOfExpr(319);
                                                                                      if (v43 <= 0x3F)
                                                                                      {
                                                                                        uint64_t result = type metadata accessor for PgQuery_NextValueExpr(319);
                                                                                        if (v44 <= 0x3F)
                                                                                        {
                                                                                          uint64_t result = type metadata accessor for PgQuery_InferenceElem(319);
                                                                                          if (v45 <= 0x3F)
                                                                                          {
                                                                                            uint64_t result = type metadata accessor for PgQuery_TargetEntry(319);
                                                                                            if (v46 <= 0x3F)
                                                                                            {
                                                                                              uint64_t result = type metadata accessor for PgQuery_RangeTblRef(319);
                                                                                              if (v47 <= 0x3F)
                                                                                              {
                                                                                                uint64_t result = type metadata accessor for PgQuery_JoinExpr(319);
                                                                                                if (v48 <= 0x3F)
                                                                                                {
                                                                                                  uint64_t result = type metadata accessor for PgQuery_FromExpr(319);
                                                                                                  if (v49 <= 0x3F)
                                                                                                  {
                                                                                                    uint64_t result = type metadata accessor for PgQuery_OnConflictExpr(319);
                                                                                                    if (v50 <= 0x3F)
                                                                                                    {
                                                                                                      uint64_t result = type metadata accessor for PgQuery_IntoClause(319);
                                                                                                      if (v51 <= 0x3F)
                                                                                                      {
                                                                                                        uint64_t result = type metadata accessor for PgQuery_RawStmt(319);
                                                                                                        if (v52 <= 0x3F)
                                                                                                        {
                                                                                                          uint64_t result = type metadata accessor for PgQuery_Query(319);
                                                                                                          if (v53 <= 0x3F)
                                                                                                          {
                                                                                                            uint64_t result = type metadata accessor for PgQuery_InsertStmt(319);
                                                                                                            if (v54 <= 0x3F)
                                                                                                            {
                                                                                                              uint64_t result = type metadata accessor for PgQuery_DeleteStmt(319);
                                                                                                              if (v55 <= 0x3F)
                                                                                                              {
                                                                                                                uint64_t result = type metadata accessor for PgQuery_UpdateStmt(319);
                                                                                                                if (v56 <= 0x3F)
                                                                                                                {
                                                                                                                  uint64_t result = type metadata accessor for PgQuery_SelectStmt(319);
                                                                                                                  if (v57 <= 0x3F)
                                                                                                                  {
                                                                                                                    uint64_t result = type metadata accessor for PgQuery_AlterTableStmt(319);
                                                                                                                    if (v58 <= 0x3F)
                                                                                                                    {
                                                                                                                      uint64_t result = type metadata accessor for PgQuery_AlterTableCmd(319);
                                                                                                                      if (v59 <= 0x3F)
                                                                                                                      {
                                                                                                                        uint64_t result = type metadata accessor for PgQuery_AlterDomainStmt(319);
                                                                                                                        if (v60 <= 0x3F)
                                                                                                                        {
                                                                                                                          uint64_t result = type metadata accessor for PgQuery_SetOperationStmt(319);
                                                                                                                          if (v61 <= 0x3F)
                                                                                                                          {
                                                                                                                            uint64_t result = type metadata accessor for PgQuery_GrantStmt(319);
                                                                                                                            if (v62 <= 0x3F)
                                                                                                                            {
                                                                                                                              uint64_t result = type metadata accessor for PgQuery_GrantRoleStmt(319);
                                                                                                                              if (v63 <= 0x3F)
                                                                                                                              {
                                                                                                                                uint64_t result = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(319);
                                                                                                                                if (v64 <= 0x3F)
                                                                                                                                {
                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_ClosePortalStmt(319);
                                                                                                                                  if (v65 <= 0x3F)
                                                                                                                                  {
                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_ClusterStmt(319);
                                                                                                                                    if (v66 <= 0x3F)
                                                                                                                                    {
                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_CopyStmt(319);
                                                                                                                                      if (v67 <= 0x3F)
                                                                                                                                      {
                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_CreateStmt(319);
                                                                                                                                        if (v68 <= 0x3F)
                                                                                                                                        {
                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_DefineStmt(319);
                                                                                                                                          if (v69 <= 0x3F)
                                                                                                                                          {
                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_DropStmt(319);
                                                                                                                                            if (v70 <= 0x3F)
                                                                                                                                            {
                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_TruncateStmt(319);
                                                                                                                                              if (v71 <= 0x3F)
                                                                                                                                              {
                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_CommentStmt(319);
                                                                                                                                                if (v72 <= 0x3F)
                                                                                                                                                {
                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_FetchStmt(319);
                                                                                                                                                  if (v73 <= 0x3F)
                                                                                                                                                  {
                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_IndexStmt(319);
                                                                                                                                                    if (v74 <= 0x3F)
                                                                                                                                                    {
                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_CreateFunctionStmt(319);
                                                                                                                                                      if (v75 <= 0x3F)
                                                                                                                                                      {
                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_AlterFunctionStmt(319);
                                                                                                                                                        if (v76 <= 0x3F)
                                                                                                                                                        {
                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_DoStmt(319);
                                                                                                                                                          if (v77 <= 0x3F)
                                                                                                                                                          {
                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_RenameStmt(319);
                                                                                                                                                            if (v78 <= 0x3F)
                                                                                                                                                            {
                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_RuleStmt(319);
                                                                                                                                                              if (v79 <= 0x3F)
                                                                                                                                                              {
                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_NotifyStmt(319);
                                                                                                                                                                if (v80 <= 0x3F)
                                                                                                                                                                {
                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_ListenStmt(319);
                                                                                                                                                                  if (v81 <= 0x3F)
                                                                                                                                                                  {
                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_UnlistenStmt(319);
                                                                                                                                                                    if (v82 <= 0x3F)
                                                                                                                                                                    {
                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_TransactionStmt(319);
                                                                                                                                                                      if (v83 <= 0x3F)
                                                                                                                                                                      {
                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_ViewStmt(319);
                                                                                                                                                                        if (v84 <= 0x3F)
                                                                                                                                                                        {
                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_LoadStmt(319);
                                                                                                                                                                          if (v85 <= 0x3F)
                                                                                                                                                                          {
                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_CreateDomainStmt(319);
                                                                                                                                                                            if (v86 <= 0x3F)
                                                                                                                                                                            {
                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_CreatedbStmt(319);
                                                                                                                                                                              if (v87 <= 0x3F)
                                                                                                                                                                              {
                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_DropdbStmt(319);
                                                                                                                                                                                if (v88 <= 0x3F)
                                                                                                                                                                                {
                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_VacuumStmt(319);
                                                                                                                                                                                  if (v89 <= 0x3F)
                                                                                                                                                                                  {
                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_ExplainStmt(319);
                                                                                                                                                                                    if (v90 <= 0x3F)
                                                                                                                                                                                    {
                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_CreateTableAsStmt(319);
                                                                                                                                                                                      if (v91 <= 0x3F)
                                                                                                                                                                                      {
                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_CreateSeqStmt(319);
                                                                                                                                                                                        if (v92 <= 0x3F)
                                                                                                                                                                                        {
                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_AlterSeqStmt(319);
                                                                                                                                                                                          if (v93 <= 0x3F)
                                                                                                                                                                                          {
                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_VariableSetStmt(319);
                                                                                                                                                                                            if (v94 <= 0x3F)
                                                                                                                                                                                            {
                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_VariableShowStmt(319);
                                                                                                                                                                                              if (v95 <= 0x3F)
                                                                                                                                                                                              {
                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_DiscardStmt(319);
                                                                                                                                                                                                if (v96 <= 0x3F)
                                                                                                                                                                                                {
                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_CreateTrigStmt(319);
                                                                                                                                                                                                  if (v97 <= 0x3F)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_CreatePLangStmt(319);
                                                                                                                                                                                                    if (v98 <= 0x3F)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_CreateRoleStmt(319);
                                                                                                                                                                                                      if (v99 <= 0x3F)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_AlterRoleStmt(319);
                                                                                                                                                                                                        if (v100 <= 0x3F)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_DropRoleStmt(319);
                                                                                                                                                                                                          if (v101 <= 0x3F)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_LockStmt(319);
                                                                                                                                                                                                            if (v102 <= 0x3F)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_ConstraintsSetStmt(319);
                                                                                                                                                                                                              if (v103 <= 0x3F)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_ReindexStmt(319);
                                                                                                                                                                                                                if (v104 <= 0x3F)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_CreateSchemaStmt(319);
                                                                                                                                                                                                                  if (v105 <= 0x3F)
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_AlterDatabaseStmt(319);
                                                                                                                                                                                                                    if (v106 <= 0x3F)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_AlterDatabaseSetStmt(319);
                                                                                                                                                                                                                      if (v107 <= 0x3F)
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_AlterRoleSetStmt(319);
                                                                                                                                                                                                                        if (v108 <= 0x3F)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_CreateConversionStmt(319);
                                                                                                                                                                                                                          if (v109 <= 0x3F)
                                                                                                                                                                                                                          {
                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_CreateCastStmt(319);
                                                                                                                                                                                                                            if (v110 <= 0x3F)
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_CreateOpClassStmt(319);
                                                                                                                                                                                                                              if (v111 <= 0x3F)
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_CreateOpFamilyStmt(319);
                                                                                                                                                                                                                                if (v112 <= 0x3F)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_AlterOpFamilyStmt(319);
                                                                                                                                                                                                                                  if (v113 <= 0x3F)
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_PrepareStmt(319);
                                                                                                                                                                                                                                    if (v114 <= 0x3F)
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_ExecuteStmt(319);
                                                                                                                                                                                                                                      if (v115 <= 0x3F)
                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_DeallocateStmt(319);
                                                                                                                                                                                                                                        if (v116 <= 0x3F)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_DeclareCursorStmt(319);
                                                                                                                                                                                                                                          if (v117 <= 0x3F)
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_CreateTableSpaceStmt(319);
                                                                                                                                                                                                                                            if (v118 <= 0x3F)
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_DropTableSpaceStmt(319);
                                                                                                                                                                                                                                              if (v119 <= 0x3F)
                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_AlterObjectDependsStmt(319);
                                                                                                                                                                                                                                                if (v120 <= 0x3F)
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_AlterObjectSchemaStmt(319);
                                                                                                                                                                                                                                                  if (v121 <= 0x3F)
                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_AlterOwnerStmt(319);
                                                                                                                                                                                                                                                    if (v122 <= 0x3F)
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_AlterOperatorStmt(319);
                                                                                                                                                                                                                                                      if (v123 <= 0x3F)
                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_AlterTypeStmt(319);
                                                                                                                                                                                                                                                        if (v124 <= 0x3F)
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_DropOwnedStmt(319);
                                                                                                                                                                                                                                                          if (v125 <= 0x3F)
                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_ReassignOwnedStmt(319);
                                                                                                                                                                                                                                                            if (v126 <= 0x3F)
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_CompositeTypeStmt(319);
                                                                                                                                                                                                                                                              if (v127 <= 0x3F)
                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_CreateEnumStmt(319);
                                                                                                                                                                                                                                                                if (v128 <= 0x3F)
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_CreateRangeStmt(319);
                                                                                                                                                                                                                                                                  if (v129 <= 0x3F)
                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_AlterEnumStmt(319);
                                                                                                                                                                                                                                                                    if (v130 <= 0x3F)
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_AlterTSDictionaryStmt(319);
                                                                                                                                                                                                                                                                      if (v131 <= 0x3F)
                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_AlterTSConfigurationStmt(319);
                                                                                                                                                                                                                                                                        if (v132 <= 0x3F)
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_CreateFdwStmt(319);
                                                                                                                                                                                                                                                                          if (v133 <= 0x3F)
                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_AlterFdwStmt(319);
                                                                                                                                                                                                                                                                            if (v134 <= 0x3F)
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_CreateForeignServerStmt(319);
                                                                                                                                                                                                                                                                              if (v135 <= 0x3F)
                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_AlterForeignServerStmt(319);
                                                                                                                                                                                                                                                                                if (v136 <= 0x3F)
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_CreateUserMappingStmt(319);
                                                                                                                                                                                                                                                                                  if (v137 <= 0x3F)
                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_AlterUserMappingStmt(319);
                                                                                                                                                                                                                                                                                    if (v138 <= 0x3F)
                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_DropUserMappingStmt(319);
                                                                                                                                                                                                                                                                                      if (v139 <= 0x3F)
                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(319);
                                                                                                                                                                                                                                                                                        if (v140 <= 0x3F)
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_AlterTableMoveAllStmt(319);
                                                                                                                                                                                                                                                                                          if (v141 <= 0x3F)
                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_SecLabelStmt(319);
                                                                                                                                                                                                                                                                                            if (v142 <= 0x3F)
                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_CreateForeignTableStmt(319);
                                                                                                                                                                                                                                                                                              if (v143 <= 0x3F)
                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_ImportForeignSchemaStmt(319);
                                                                                                                                                                                                                                                                                                if (v144 <= 0x3F)
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_CreateExtensionStmt(319);
                                                                                                                                                                                                                                                                                                  if (v145 <= 0x3F)
                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_AlterExtensionStmt(319);
                                                                                                                                                                                                                                                                                                    if (v146 <= 0x3F)
                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_AlterExtensionContentsStmt(319);
                                                                                                                                                                                                                                                                                                      if (v147 <= 0x3F)
                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_CreateEventTrigStmt(319);
                                                                                                                                                                                                                                                                                                        if (v148 <= 0x3F)
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_AlterEventTrigStmt(319);
                                                                                                                                                                                                                                                                                                          if (v149 <= 0x3F)
                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_RefreshMatViewStmt(319);
                                                                                                                                                                                                                                                                                                            if (v150 <= 0x3F)
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_ReplicaIdentityStmt(319);
                                                                                                                                                                                                                                                                                                              if (v151 <= 0x3F)
                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_AlterSystemStmt(319);
                                                                                                                                                                                                                                                                                                                if (v152 <= 0x3F)
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_CreatePolicyStmt(319);
                                                                                                                                                                                                                                                                                                                  if (v153 <= 0x3F)
                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_AlterPolicyStmt(319);
                                                                                                                                                                                                                                                                                                                    if (v154 <= 0x3F)
                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_CreateTransformStmt(319);
                                                                                                                                                                                                                                                                                                                      if (v155 <= 0x3F)
                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_CreateAmStmt(319);
                                                                                                                                                                                                                                                                                                                        if (v156 <= 0x3F)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_CreatePublicationStmt(319);
                                                                                                                                                                                                                                                                                                                          if (v157 <= 0x3F)
                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_AlterPublicationStmt(319);
                                                                                                                                                                                                                                                                                                                            if (v158 <= 0x3F)
                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_CreateSubscriptionStmt(319);
                                                                                                                                                                                                                                                                                                                              if (v159 <= 0x3F)
                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_AlterSubscriptionStmt(319);
                                                                                                                                                                                                                                                                                                                                if (v160 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_DropSubscriptionStmt(319);
                                                                                                                                                                                                                                                                                                                                  if (v161 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_CreateStatsStmt(319);
                                                                                                                                                                                                                                                                                                                                    if (v162 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_AlterCollationStmt(319);
                                                                                                                                                                                                                                                                                                                                      if (v163 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_CallStmt(319);
                                                                                                                                                                                                                                                                                                                                        if (v164 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_AlterStatsStmt(319);
                                                                                                                                                                                                                                                                                                                                          if (v165 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_A_Expr(319);
                                                                                                                                                                                                                                                                                                                                            if (v166 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_ColumnRef(319);
                                                                                                                                                                                                                                                                                                                                              if (v167 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_ParamRef(319);
                                                                                                                                                                                                                                                                                                                                                if (v168 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_A_Const(319);
                                                                                                                                                                                                                                                                                                                                                  if (v169 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_FuncCall(319);
                                                                                                                                                                                                                                                                                                                                                    if (v170 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_A_Indices(319);
                                                                                                                                                                                                                                                                                                                                                      if (v171 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_A_Indirection(319);
                                                                                                                                                                                                                                                                                                                                                        if (v172 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_A_ArrayExpr(319);
                                                                                                                                                                                                                                                                                                                                                          if (v173 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_ResTarget(319);
                                                                                                                                                                                                                                                                                                                                                            if (v174 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_MultiAssignRef(319);
                                                                                                                                                                                                                                                                                                                                                              if (v175 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_TypeCast(319);
                                                                                                                                                                                                                                                                                                                                                                if (v176 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_CollateClause(319);
                                                                                                                                                                                                                                                                                                                                                                  if (v177 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_SortBy(319);
                                                                                                                                                                                                                                                                                                                                                                    if (v178 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_WindowDef(319);
                                                                                                                                                                                                                                                                                                                                                                      if (v179 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_RangeSubselect(319);
                                                                                                                                                                                                                                                                                                                                                                        if (v180 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_RangeFunction(319);
                                                                                                                                                                                                                                                                                                                                                                          if (v181 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_RangeTableSample(319);
                                                                                                                                                                                                                                                                                                                                                                            if (v182 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_RangeTableFunc(319);
                                                                                                                                                                                                                                                                                                                                                                              if (v183 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_RangeTableFuncCol(319);
                                                                                                                                                                                                                                                                                                                                                                                if (v184 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_TypeName(319);
                                                                                                                                                                                                                                                                                                                                                                                  if (v185 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_ColumnDef(319);
                                                                                                                                                                                                                                                                                                                                                                                    if (v186 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_IndexElem(319);
                                                                                                                                                                                                                                                                                                                                                                                      if (v187 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_Constraint(319);
                                                                                                                                                                                                                                                                                                                                                                                        if (v188 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_DefElem(319);
                                                                                                                                                                                                                                                                                                                                                                                          if (v189 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_RangeTblEntry(319);
                                                                                                                                                                                                                                                                                                                                                                                            if (v190 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_RangeTblFunction(319);
                                                                                                                                                                                                                                                                                                                                                                                              if (v191 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_TableSampleClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                if (v192 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_WithCheckOption(319);
                                                                                                                                                                                                                                                                                                                                                                                                  if (v193 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_SortGroupClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                    if (v194 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_GroupingSet(319);
                                                                                                                                                                                                                                                                                                                                                                                                      if (v195 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_WindowClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                        if (v196 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_ObjectWithArgs(319);
                                                                                                                                                                                                                                                                                                                                                                                                          if (v197 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_AccessPriv(319);
                                                                                                                                                                                                                                                                                                                                                                                                            if (v198 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_CreateOpClassItem(319);
                                                                                                                                                                                                                                                                                                                                                                                                              if (v199 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_TableLikeClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                                if (v200 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_FunctionParameter(319);
                                                                                                                                                                                                                                                                                                                                                                                                                  if (v201 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_LockingClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                                    if (v202 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_RowMarkClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                                      if (v203 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_XmlSerialize(319);
                                                                                                                                                                                                                                                                                                                                                                                                                        if (v204 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_WithClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                                          if (v205 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_InferClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                                            if (v206 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_OnConflictClause(319);
                                                                                                                                                                                                                                                                                                                                                                                                                              if (v207 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_CommonTableExpr(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                if (v208 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_RoleSpec(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (v209 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_TriggerTransition(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (v210 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_PartitionElem(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (v211 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_PartitionSpec(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (v212 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_PartitionBoundSpec(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (v213 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_PartitionRangeDatum(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (v214 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_PartitionCmd(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (v215 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_VacuumRelation(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (v216 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_InlineCodeBlock(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (v217 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    uint64_t result = type metadata accessor for PgQuery_CallContext(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (v218 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      uint64_t result = type metadata accessor for PgQuery_Integer(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (v219 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        uint64_t result = type metadata accessor for PgQuery_Float(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (v220 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          uint64_t result = type metadata accessor for PgQuery_String(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (v221 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            uint64_t result = type metadata accessor for PgQuery_BitString(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (v222 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              uint64_t result = type metadata accessor for PgQuery_List(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (v223 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                uint64_t result = type metadata accessor for PgQuery_IntList(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (v224 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  uint64_t result = type metadata accessor for PgQuery_OidList(319);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (v225 <= 0x3F)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    swift_initEnumMetadataMultiPayload();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    return 0;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_OidList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3486Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_OidList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3487Tm);
}

uint64_t type metadata completion function for PgQuery_OidList()
{
  return type metadata completion function for PgQuery_OidList();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_IntList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3486Tm_0);
}

uint64_t storeEnumTagSinglePayload for PgQuery_IntList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3487Tm_0);
}

uint64_t getEnumTagSinglePayload for PgQuery_List(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3486Tm_1);
}

uint64_t storeEnumTagSinglePayload for PgQuery_List(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3487Tm_1);
}

uint64_t getEnumTagSinglePayload for PgQuery_BitString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3495Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_BitString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3496Tm);
}

uint64_t type metadata completion function for PgQuery_BitString()
{
  return type metadata completion function for PgQuery_OidList();
}

uint64_t getEnumTagSinglePayload for PgQuery_String(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3495Tm_0);
}

uint64_t storeEnumTagSinglePayload for PgQuery_String(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3496Tm_0);
}

uint64_t getEnumTagSinglePayload for PgQuery_Float(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3495Tm_1);
}

uint64_t storeEnumTagSinglePayload for PgQuery_Float(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3496Tm_1);
}

uint64_t getEnumTagSinglePayload for PgQuery_Integer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3504Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_Integer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3505Tm);
}

uint64_t type metadata completion function for PgQuery_Integer()
{
  return type metadata completion function for PgQuery_OidList();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CallContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    unint64_t v6 = (char *)a1 + v5;
    unint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

unsigned char *initializeWithCopy for PgQuery_CallContext(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *assignWithCopy for PgQuery_CallContext(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

unsigned char *initializeWithTake for PgQuery_CallContext(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *assignWithTake for PgQuery_CallContext(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CallContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E95C790);
}

uint64_t sub_18E95C790(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    unint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    unint64_t v13 = &a1[*(int *)(a3 + 20)];
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CallContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E95C854);
}

unsigned char *sub_18E95C854(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_CallContext()
{
  return type metadata completion function for PgQuery_OidList();
}

void *initializeBufferWithCopyOfBuffer for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    *(_WORD *)(a1 + 20) = *((_WORD *)a2 + 10);
    uint64_t v6 = *(int *)(a3 + 32);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3510Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3511Tm);
}

uint64_t type metadata completion function for PgQuery_InlineCodeBlock()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_VacuumRelation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    a1[1] = a2[1];
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    uint64_t v12 = *(int *)(a3 + 28);
    unint64_t v13 = (uint64_t *)((char *)v4 + v12);
    unint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    uint64_t v16 = *(void *)(RangeVar - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v14[1];
      *unint64_t v13 = *v14;
      v13[1] = v19;
      uint64_t v20 = v14[3];
      v13[2] = v14[2];
      v13[3] = v20;
      uint64_t v21 = v14[5];
      v13[4] = v14[4];
      v13[5] = v21;
      *((unsigned char *)v13 + 48) = *((unsigned char *)v14 + 48);
      unint64_t v37 = v11;
      uint64_t v22 = v14[8];
      v13[7] = v14[7];
      v13[8] = v22;
      *((_DWORD *)v13 + 18) = *((_DWORD *)v14 + 18);
      uint64_t v23 = *(int *)(RangeVar + 40);
      unint64_t v34 = (char *)v14 + v23;
      unint64_t v36 = (char *)v13 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v36, v34, v10);
      uint64_t v24 = *(int *)(RangeVar + 44);
      unint64_t v25 = (void *)((char *)v13 + v24);
      unint64_t v26 = (void *)((char *)v14 + v24);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v28 = *(void *)(Alias - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        uint64_t v30 = v26[1];
        *unint64_t v25 = *v26;
        v25[1] = v30;
        v25[2] = v26[2];
        uint64_t v31 = *(int *)(Alias + 24);
        unint64_t v35 = (char *)v25 + v31;
        unint64_t v32 = (char *)v26 + v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37(v35, v32, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
    }
  }
  return v4;
}

uint64_t initializeWithCopy for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)(a1 + v11);
  unint64_t v13 = (void *)(a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    uint64_t v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    uint64_t v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    unint64_t v35 = v10;
    uint64_t v20 = v13[8];
    v12[7] = v13[7];
    v12[8] = v20;
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    uint64_t v21 = *(int *)(RangeVar + 40);
    unint64_t v32 = (char *)v13 + v21;
    unint64_t v34 = (char *)v12 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(v34, v32, v9);
    uint64_t v22 = *(int *)(RangeVar + 44);
    uint64_t v23 = (void *)((char *)v12 + v22);
    uint64_t v24 = (void *)((char *)v13 + v22);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v26 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, Alias))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v28;
      v23[2] = v24[2];
      uint64_t v29 = *(int *)(Alias + 24);
      unint64_t v33 = (char *)v23 + v29;
      uint64_t v30 = (char *)v24 + v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35(v33, v30, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, Alias);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v49 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16(v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *(void *)(v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      *(void *)(v12 + 24) = *(void *)(v13 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      *(void *)(v12 + 40) = *(void *)(v13 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
      *(void *)(v12 + 56) = *(void *)(v13 + 56);
      *(void *)(v12 + 64) = *(void *)(v13 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(RangeVar + 40), v13 + *(int *)(RangeVar + 40), v50);
      uint64_t v30 = *(int *)(RangeVar + 44);
      uint64_t v31 = (void *)(v12 + v30);
      unint64_t v32 = (void *)(v13 + v30);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v34 = *(void *)(Alias - 8);
      unint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
      int v36 = v35(v31, 1, Alias);
      int v37 = v35(v32, 1, Alias);
      if (v36)
      {
        if (!v37)
        {
          *uint64_t v31 = *v32;
          v31[1] = v32[1];
          v31[2] = v32[2];
          uint64_t v38 = *(int *)(Alias + 24);
          unint64_t v39 = (char *)v31 + v38;
          unint64_t v40 = (char *)v32 + v38;
          unint64_t v41 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v41(v39, v40, v50);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v37)
        {
          *uint64_t v31 = *v32;
          v31[1] = v32[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v31[2] = v32[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          ((void (*)(char *, char *, uint64_t))v10)((char *)v31 + *(int *)(Alias + 24), (char *)v32 + *(int *)(Alias + 24), v50);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_Alias);
      }
      size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v28 = v31;
      uint64_t v29 = v32;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v28 = (void *)v12;
    uint64_t v29 = (const void *)v13;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  *(void *)(v12 + 24) = *(void *)(v13 + 24);
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  *(void *)(v12 + 40) = *(void *)(v13 + 40);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
  *(void *)(v12 + 56) = *(void *)(v13 + 56);
  *(void *)(v12 + 64) = *(void *)(v13 + 64);
  *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
  uint64_t v18 = *(int *)(RangeVar + 40);
  unint64_t v46 = (char *)(v13 + v18);
  unint64_t v47 = (char *)(v12 + v18);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = v47;
  unint64_t v48 = v19;
  v19(v20, v46, v50);
  uint64_t v21 = *(int *)(RangeVar + 44);
  uint64_t v22 = (void *)(v12 + v21);
  uint64_t v23 = (void *)(v13 + v21);
  uint64_t v24 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *uint64_t v22 = *v23;
    v22[1] = v23[1];
    v22[2] = v23[2];
    uint64_t v42 = *(int *)(v24 + 24);
    unint64_t v43 = (char *)v22 + v42;
    unint64_t v44 = (char *)v23 + v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v43, v44, v50);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return a1;
}

uint64_t initializeWithTake for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    uint64_t v18 = *(int *)(RangeVar + 44);
    __dst = (void *)((char *)v12 + v18);
    uint64_t v19 = (void *)((char *)v13 + v18);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v21 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, Alias))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      __dst[2] = v19[2];
      v10((char *)__dst + *(int *)(Alias + 24), (char *)v19 + *(int *)(Alias + 24), v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v42 + 40);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16(v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v28 = *(void *)(v13 + 8);
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = v28;
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(v13 + 24);
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      *(void *)(v12 + 24) = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = *(void *)(v13 + 40);
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      *(void *)(v12 + 40) = v30;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
      uint64_t v31 = *(void *)(v13 + 64);
      *(void *)(v12 + 56) = *(void *)(v13 + 56);
      *(void *)(v12 + 64) = v31;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(RangeVar + 40), v13 + *(int *)(RangeVar + 40), v44);
      uint64_t v32 = *(int *)(RangeVar + 44);
      uint64_t v33 = v12 + v32;
      uint64_t v34 = (char *)(v13 + v32);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v36 = *(void *)(Alias - 8);
      int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      int v38 = v37(v33, 1, Alias);
      int v39 = v37((uint64_t)v34, 1, Alias);
      if (v38)
      {
        if (!v39)
        {
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v33 + *(int *)(Alias + 24), &v34[*(int *)(Alias + 24)], v44);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v39)
        {
          uint64_t v41 = *((void *)v34 + 1);
          *(void *)uint64_t v33 = *(void *)v34;
          *(void *)(v33 + 8) = v41;
          swift_bridgeObjectRelease();
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, char *, uint64_t))v10)(v33 + *(int *)(Alias + 24), &v34[*(int *)(Alias + 24)], v44);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Alias);
      }
      size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v26 = (void *)v33;
      size_t v27 = v34;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v26 = (void *)v12;
    size_t v27 = (char *)v13;
LABEL_8:
    memcpy(v26, v27, v25);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  long long v18 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v18;
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 56);
  *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
  unint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
  v43(v12 + *(int *)(RangeVar + 40), v13 + *(int *)(RangeVar + 40), v44);
  uint64_t v19 = *(int *)(RangeVar + 44);
  uint64_t v20 = (void *)(v12 + v19);
  uint64_t v21 = (void *)(v13 + v19);
  uint64_t v22 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    v20[2] = v21[2];
    v43((uint64_t)v20 + *(int *)(v22 + 24), (uint64_t)v21 + *(int *)(v22 + 24), v44);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E95E0C0);
}

uint64_t sub_18E95E0C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3513Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RangeVar?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E95E0E0);
}

uint64_t sub_18E95E0E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

char *initializeBufferWithCopyOfBuffer for PgQuery_PartitionCmd(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    uint64_t v13 = *(void *)(RangeVar - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, RangeVar))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v45 = v13;
      uint64_t v16 = *((void *)v11 + 1);
      *(void *)uint64_t v10 = *(void *)v11;
      *((void *)v10 + 1) = v16;
      unint64_t v47 = v8;
      uint64_t v17 = *((void *)v11 + 3);
      *((void *)v10 + 2) = *((void *)v11 + 2);
      *((void *)v10 + 3) = v17;
      uint64_t v18 = *((void *)v11 + 5);
      *((void *)v10 + 4) = *((void *)v11 + 4);
      *((void *)v10 + 5) = v18;
      v10[48] = v11[48];
      uint64_t v19 = v7;
      uint64_t v20 = *((void *)v11 + 8);
      *((void *)v10 + 7) = *((void *)v11 + 7);
      *((void *)v10 + 8) = v20;
      *((_DWORD *)v10 + 18) = *((_DWORD *)v11 + 18);
      uint64_t v21 = *(int *)(RangeVar + 40);
      unint64_t v46 = &v10[v21];
      unint64_t v43 = &v11[v21];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47(v46, v43, v19);
      uint64_t v22 = *(int *)(RangeVar + 44);
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v26 = *(void *)(Alias - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, Alias))
      {
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        uint64_t v28 = *((void *)v24 + 1);
        *(void *)uint64_t v23 = *(void *)v24;
        *((void *)v23 + 1) = v28;
        *((void *)v23 + 2) = *((void *)v24 + 2);
        uint64_t v29 = *(int *)(Alias + 24);
        uint64_t v44 = &v23[v29];
        uint64_t v30 = &v24[v29];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v47(v44, v30, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, Alias);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v10, 0, 1, RangeVar);
      uint64_t v7 = v19;
      uint64_t v8 = v47;
    }
    uint64_t v31 = *(int *)(a3 + 24);
    uint64_t v32 = &a1[v31];
    uint64_t v33 = &a2[v31];
    uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
    uint64_t v35 = *(void *)(PartitionBoundSpec - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, PartitionBoundSpec))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      uint64_t v37 = *((void *)v33 + 1);
      *(void *)uint64_t v32 = *(void *)v33;
      *((void *)v32 + 1) = v37;
      v32[16] = v33[16];
      *(void *)(v32 + 20) = *(void *)(v33 + 20);
      uint64_t v38 = *((void *)v33 + 5);
      *((void *)v32 + 4) = *((void *)v33 + 4);
      *((void *)v32 + 5) = v38;
      *((void *)v32 + 6) = *((void *)v33 + 6);
      *((_DWORD *)v32 + 14) = *((_DWORD *)v33 + 14);
      uint64_t v39 = *(int *)(PartitionBoundSpec + 48);
      unint64_t v48 = v8;
      unint64_t v40 = &v32[v39];
      uint64_t v41 = &v33[v39];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v48(v40, v41, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, PartitionBoundSpec);
    }
  }
  return a1;
}

uint64_t destroy for PgQuery_PartitionCmd(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v13(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 48))(v5, 1, RangeVar))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13(v5 + *(int *)(RangeVar + 40), v4);
    uint64_t v7 = v5 + *(int *)(RangeVar + 44);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 48))(v7, 1, Alias))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13(v7 + *(int *)(Alias + 24), v4);
    }
  }
  uint64_t v9 = a1 + *(int *)(a2 + 24);
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(PartitionBoundSpec - 8) + 48))(v9, 1, PartitionBoundSpec);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = v9 + *(int *)(PartitionBoundSpec + 48);
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v12, v4);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_PartitionCmd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  unint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v46(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v11 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, RangeVar))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v43 = a3;
    uint64_t v44 = a1;
    uint64_t v13 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v13;
    uint64_t v14 = v9[3];
    v8[2] = v9[2];
    v8[3] = v14;
    uint64_t v15 = v9[5];
    v8[4] = v9[4];
    v8[5] = v15;
    *((unsigned char *)v8 + 48) = *((unsigned char *)v9 + 48);
    uint64_t v16 = v9[8];
    v8[7] = v9[7];
    v8[8] = v16;
    *((_DWORD *)v8 + 18) = *((_DWORD *)v9 + 18);
    uint64_t v17 = *(int *)(RangeVar + 40);
    uint64_t v18 = (char *)v8 + v17;
    uint64_t v45 = v6;
    uint64_t v19 = (char *)v9 + v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = v19;
    uint64_t v6 = v45;
    v46((uint64_t)v18, (uint64_t)v20, v45);
    uint64_t v21 = *(int *)(RangeVar + 44);
    uint64_t v22 = (void *)((char *)v8 + v21);
    uint64_t v23 = (void *)((char *)v9 + v21);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v25 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, Alias))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      uint64_t v27 = v23[1];
      *uint64_t v22 = *v23;
      v22[1] = v27;
      v22[2] = v23[2];
      uint64_t v28 = *(int *)(Alias + 24);
      uint64_t v29 = (char *)v22 + v28;
      uint64_t v30 = (char *)v23 + v28;
      swift_bridgeObjectRetain();
      uint64_t v6 = v45;
      swift_bridgeObjectRetain();
      v46((uint64_t)v29, (uint64_t)v30, v45);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, Alias);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, RangeVar);
    a3 = v43;
    a1 = v44;
  }
  uint64_t v31 = *(int *)(a3 + 24);
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  uint64_t v35 = *(void *)(PartitionBoundSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, PartitionBoundSpec))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    uint64_t v37 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v37;
    *((unsigned char *)v32 + 16) = *((unsigned char *)v33 + 16);
    *(void *)((char *)v32 + 20) = *(void *)((char *)v33 + 20);
    uint64_t v38 = v33[5];
    v32[4] = v33[4];
    v32[5] = v38;
    v32[6] = v33[6];
    *((_DWORD *)v32 + 14) = *((_DWORD *)v33 + 14);
    uint64_t v39 = *(int *)(PartitionBoundSpec + 48);
    unint64_t v40 = (char *)v32 + v39;
    uint64_t v41 = (char *)v33 + v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46((uint64_t)v40, (uint64_t)v41, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, PartitionBoundSpec);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_PartitionCmd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 24);
  v7(a1, a2, v6);
  uint64_t v64 = a3;
  uint64_t v65 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v67 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v12 = *(void *)(RangeVar - 8);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, RangeVar);
  int v15 = v13(v10, 1, RangeVar);
  if (!v14)
  {
    if (!v15)
    {
      *(void *)uint64_t v9 = *(void *)v10;
      *(void *)(v9 + 8) = *(void *)(v10 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v9 + 16) = *(void *)(v10 + 16);
      *(void *)(v9 + 24) = *(void *)(v10 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v9 + 32) = *(void *)(v10 + 32);
      *(void *)(v9 + 40) = *(void *)(v10 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v9 + 48) = *(unsigned char *)(v10 + 48);
      *(void *)(v9 + 56) = *(void *)(v10 + 56);
      *(void *)(v9 + 64) = *(void *)(v10 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
      v7(v9 + *(int *)(RangeVar + 40), v10 + *(int *)(RangeVar + 40), v6);
      uint64_t v30 = *(int *)(RangeVar + 44);
      uint64_t v31 = (void *)(v9 + v30);
      uint64_t v32 = (void *)(v10 + v30);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v34 = *(void *)(Alias - 8);
      uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
      int v36 = v35(v31, 1, Alias);
      int v37 = v35(v32, 1, Alias);
      if (v36)
      {
        if (!v37)
        {
          *uint64_t v31 = *v32;
          v31[1] = v32[1];
          v31[2] = v32[2];
          uint64_t v38 = *(int *)(Alias + 24);
          uint64_t v39 = v6;
          unint64_t v40 = (char *)v31 + v38;
          uint64_t v41 = (char *)v32 + v38;
          uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v43 = v40;
          uint64_t v6 = v39;
          v42(v43, v41, v39);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, Alias);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v37)
        {
          *uint64_t v31 = *v32;
          v31[1] = v32[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v31[2] = v32[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v7((uint64_t)v31 + *(int *)(Alias + 24), (uint64_t)v32 + *(int *)(Alias + 24), v6);
          goto LABEL_14;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_Alias);
      }
      size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v28 = v31;
      uint64_t v29 = v32;
LABEL_8:
      memcpy(v28, v29, v27);
      goto LABEL_14;
    }
    outlined destroy of PgQuery_Alias(v9, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v28 = (void *)v9;
    uint64_t v29 = (const void *)v10;
    goto LABEL_8;
  }
  if (v15) {
    goto LABEL_7;
  }
  unint64_t v62 = v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(void *)(v9 + 24) = *(void *)(v10 + 24);
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  *(void *)(v9 + 40) = *(void *)(v10 + 40);
  *(unsigned char *)(v9 + 48) = *(unsigned char *)(v10 + 48);
  *(void *)(v9 + 56) = *(void *)(v10 + 56);
  *(void *)(v9 + 64) = *(void *)(v10 + 64);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(v10 + 72);
  uint64_t v16 = *(int *)(RangeVar + 40);
  uint64_t v17 = v9 + v16;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
  uint64_t v61 = v10 + v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = v17;
  uint64_t v20 = v6;
  v18(v19, v61, v6);
  uint64_t v21 = *(int *)(RangeVar + 44);
  uint64_t v22 = (void *)(v9 + v21);
  uint64_t v23 = (void *)(v10 + v21);
  uint64_t v24 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    uint64_t v6 = v20;
  }
  else
  {
    *uint64_t v22 = *v23;
    v22[1] = v23[1];
    uint64_t v44 = v20;
    v22[2] = v23[2];
    uint64_t v45 = *(int *)(v24 + 24);
    unint64_t v46 = (char *)v22 + v45;
    unint64_t v47 = (char *)v23 + v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18((uint64_t)v46, (uint64_t)v47, v44);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    uint64_t v6 = v44;
  }
  uint64_t v7 = v62;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, RangeVar);
LABEL_14:
  uint64_t v48 = *(int *)(v64 + 24);
  uint64_t v49 = v67 + v48;
  uint64_t v50 = v65 + v48;
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  uint64_t v52 = *(void *)(PartitionBoundSpec - 8);
  unint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v49, 1, PartitionBoundSpec);
  int v55 = v53(v50, 1, PartitionBoundSpec);
  if (!v54)
  {
    if (!v55)
    {
      *(void *)uint64_t v49 = *(void *)v50;
      *(void *)(v49 + 8) = *(void *)(v50 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v49 + 16) = *(unsigned char *)(v50 + 16);
      *(_DWORD *)(v49 + 20) = *(_DWORD *)(v50 + 20);
      *(_DWORD *)(v49 + 24) = *(_DWORD *)(v50 + 24);
      *(void *)(v49 + 32) = *(void *)(v50 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v49 + 40) = *(void *)(v50 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v49 + 48) = *(void *)(v50 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v49 + 56) = *(_DWORD *)(v50 + 56);
      v7(v49 + *(int *)(PartitionBoundSpec + 48), v50 + *(int *)(PartitionBoundSpec + 48), v6);
      return v67;
    }
    outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_PartitionBoundSpec);
    goto LABEL_19;
  }
  if (v55)
  {
LABEL_19:
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    memcpy((void *)v49, (const void *)v50, *(void *)(*(void *)(v59 - 8) + 64));
    return v67;
  }
  *(void *)uint64_t v49 = *(void *)v50;
  *(void *)(v49 + 8) = *(void *)(v50 + 8);
  *(unsigned char *)(v49 + 16) = *(unsigned char *)(v50 + 16);
  *(_DWORD *)(v49 + 20) = *(_DWORD *)(v50 + 20);
  *(_DWORD *)(v49 + 24) = *(_DWORD *)(v50 + 24);
  *(void *)(v49 + 32) = *(void *)(v50 + 32);
  *(void *)(v49 + 40) = *(void *)(v50 + 40);
  *(void *)(v49 + 48) = *(void *)(v50 + 48);
  *(_DWORD *)(v49 + 56) = *(_DWORD *)(v50 + 56);
  uint64_t v56 = *(int *)(PartitionBoundSpec + 48);
  uint64_t v57 = v49 + v56;
  uint64_t v58 = v50 + v56;
  unint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v66(v57, v58, v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, PartitionBoundSpec);
  return v67;
}

char *initializeWithTake for PgQuery_PartitionCmd(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v12 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, RangeVar))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v29 = a3;
    long long v14 = *((_OWORD *)v10 + 1);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v14;
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    v9[48] = v10[48];
    *(_OWORD *)(v9 + 56) = *(_OWORD *)(v10 + 56);
    *((_DWORD *)v9 + 18) = *((_DWORD *)v10 + 18);
    v7(&v9[*(int *)(RangeVar + 40)], &v10[*(int *)(RangeVar + 40)], v6);
    uint64_t v15 = *(int *)(RangeVar + 44);
    __dst = &v9[v15];
    uint64_t v16 = &v10[v15];
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v18 = v7;
    uint64_t v19 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, Alias))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v16;
      *((void *)__dst + 2) = *((void *)v16 + 2);
      v18(&__dst[*(int *)(Alias + 24)], &v16[*(int *)(Alias + 24)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, Alias);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, RangeVar);
    uint64_t v7 = v18;
    a3 = v29;
  }
  uint64_t v21 = *(int *)(a3 + 24);
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  uint64_t v25 = *(void *)(PartitionBoundSpec - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, PartitionBoundSpec))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    v22[16] = v23[16];
    *(void *)(v22 + 20) = *(void *)(v23 + 20);
    *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
    *((void *)v22 + 6) = *((void *)v23 + 6);
    *((_DWORD *)v22 + 14) = *((_DWORD *)v23 + 14);
    v7(&v22[*(int *)(PartitionBoundSpec + 48)], &v23[*(int *)(PartitionBoundSpec + 48)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, PartitionBoundSpec);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_PartitionCmd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v6 - 8);
  int v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 40);
  v54(a1, a2, v6);
  uint64_t v56 = a3;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v11 = *(void *)(RangeVar - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, RangeVar);
  int v14 = v12(v9, 1, RangeVar);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of PgQuery_Alias(v8, type metadata accessor for PgQuery_RangeVar);
      goto LABEL_7;
    }
    uint64_t v24 = a1;
    uint64_t v25 = *(void *)(v9 + 8);
    *(void *)uint64_t v8 = *(void *)v9;
    *(void *)(v8 + 8) = v25;
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void *)(v9 + 24);
    *(void *)(v8 + 16) = *(void *)(v9 + 16);
    *(void *)(v8 + 24) = v26;
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void *)(v9 + 40);
    *(void *)(v8 + 32) = *(void *)(v9 + 32);
    *(void *)(v8 + 40) = v27;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v8 + 48) = *(unsigned char *)(v9 + 48);
    uint64_t v28 = *(void *)(v9 + 64);
    *(void *)(v8 + 56) = *(void *)(v9 + 56);
    *(void *)(v8 + 64) = v28;
    swift_bridgeObjectRelease();
    *(_DWORD *)(v8 + 72) = *(_DWORD *)(v9 + 72);
    uint64_t v29 = v6;
    v54(v8 + *(int *)(RangeVar + 40), v9 + *(int *)(RangeVar + 40), v6);
    uint64_t v30 = *(int *)(RangeVar + 44);
    uint64_t v31 = (char *)(v8 + v30);
    uint64_t v32 = (char *)(v9 + v30);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v34 = *(void *)(Alias - 8);
    uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
    int v36 = v35(v31, 1, Alias);
    int v37 = v35(v32, 1, Alias);
    if (v36)
    {
      if (!v37)
      {
        *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
        *((void *)v31 + 2) = *((void *)v32 + 2);
        uint64_t v6 = v29;
        (*(void (**)(char *, char *, uint64_t))(v55 + 32))(&v31[*(int *)(Alias + 24)], &v32[*(int *)(Alias + 24)], v29);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, Alias);
LABEL_16:
        a1 = v24;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v37)
      {
        uint64_t v50 = *((void *)v32 + 1);
        *(void *)uint64_t v31 = *(void *)v32;
        *((void *)v31 + 1) = v50;
        swift_bridgeObjectRelease();
        *((void *)v31 + 2) = *((void *)v32 + 2);
        swift_bridgeObjectRelease();
        uint64_t v6 = v29;
        v54((uint64_t)&v31[*(int *)(Alias + 24)], (uint64_t)&v32[*(int *)(Alias + 24)], v29);
        goto LABEL_16;
      }
      outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_Alias);
    }
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64));
    uint64_t v6 = v29;
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_7:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy((void *)v8, (const void *)v9, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_17;
  }
  long long v15 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v15;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(unsigned char *)(v8 + 48) = *(unsigned char *)(v9 + 48);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
  *(_DWORD *)(v8 + 72) = *(_DWORD *)(v9 + 72);
  unint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32);
  uint64_t v52 = a1;
  v51(v8 + *(int *)(RangeVar + 40), v9 + *(int *)(RangeVar + 40), v6);
  uint64_t v16 = *(int *)(RangeVar + 44);
  uint64_t v17 = (void *)(v8 + v16);
  uint64_t v18 = (void *)(v9 + v16);
  uint64_t v19 = v6;
  uint64_t v20 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v53 = v19;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    v17[2] = v18[2];
    v51((uint64_t)v17 + *(int *)(v20 + 24), (uint64_t)v18 + *(int *)(v20 + 24), v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, RangeVar);
  a1 = v52;
  uint64_t v6 = v53;
LABEL_17:
  uint64_t v39 = *(int *)(v56 + 24);
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  uint64_t v43 = *(void *)(PartitionBoundSpec - 8);
  uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  int v45 = v44(v40, 1, PartitionBoundSpec);
  int v46 = v44(v41, 1, PartitionBoundSpec);
  if (!v45)
  {
    if (!v46)
    {
      uint64_t v49 = *(void *)(v41 + 8);
      *(void *)uint64_t v40 = *(void *)v41;
      *(void *)(v40 + 8) = v49;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v40 + 16) = *(unsigned char *)(v41 + 16);
      *(void *)(v40 + 20) = *(void *)(v41 + 20);
      *(void *)(v40 + 32) = *(void *)(v41 + 32);
      swift_bridgeObjectRelease();
      *(void *)(v40 + 40) = *(void *)(v41 + 40);
      swift_bridgeObjectRelease();
      *(void *)(v40 + 48) = *(void *)(v41 + 48);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v40 + 56) = *(_DWORD *)(v41 + 56);
      v54(v40 + *(int *)(PartitionBoundSpec + 48), v41 + *(int *)(PartitionBoundSpec + 48), v6);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_PartitionBoundSpec);
    goto LABEL_22;
  }
  if (v46)
  {
LABEL_22:
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    memcpy((void *)v40, (const void *)v41, *(void *)(*(void *)(v47 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(unsigned char *)(v40 + 16) = *(unsigned char *)(v41 + 16);
  *(void *)(v40 + 20) = *(void *)(v41 + 20);
  *(_OWORD *)(v40 + 32) = *(_OWORD *)(v41 + 32);
  *(void *)(v40 + 48) = *(void *)(v41 + 48);
  *(_DWORD *)(v40 + 56) = *(_DWORD *)(v41 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v40 + *(int *)(PartitionBoundSpec + 48), v41 + *(int *)(PartitionBoundSpec + 48), v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, PartitionBoundSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_PartitionCmd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E95FFCC);
}

uint64_t sub_18E95FFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  long long v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for PgQuery_PartitionCmd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E960134);
}

uint64_t sub_18E960134(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

void type metadata completion function for PgQuery_PartitionCmd()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_PartitionBoundSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_PartitionRangeDatum(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_14);
}

uint64_t storeEnumTagSinglePayload for PgQuery_PartitionRangeDatum(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_14);
}

uint64_t getEnumTagSinglePayload for PgQuery_PartitionElem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_15);
}

uint64_t storeEnumTagSinglePayload for PgQuery_PartitionElem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_15);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_TriggerTransition(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t initializeWithCopy for PgQuery_TriggerTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_TriggerTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_TriggerTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_TriggerTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_TriggerTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3317Tm_0);
}

uint64_t storeEnumTagSinglePayload for PgQuery_TriggerTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3318Tm_0);
}

uint64_t type metadata completion function for PgQuery_TriggerTransition()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t getEnumTagSinglePayload for PgQuery_CommonTableExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_16);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CommonTableExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_16);
}

uint64_t getEnumTagSinglePayload for PgQuery_XmlSerialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_17);
}

uint64_t storeEnumTagSinglePayload for PgQuery_XmlSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_17);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_RowMarkClause(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    uint64_t v5 = *(int *)(a3 + 32);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for PgQuery_RowMarkClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_RowMarkClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_RowMarkClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_RowMarkClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v6, v5, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_RowMarkClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E960BBC);
}

uint64_t sub_18E960BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 33);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 32);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_RowMarkClause(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E960C80);
}

uint64_t sub_18E960C80(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 33) = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_RowMarkClause()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_LockingClause(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t initializeWithCopy for PgQuery_LockingClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_LockingClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for PgQuery_LockingClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_LockingClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_LockingClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3296Tm_1);
}

uint64_t storeEnumTagSinglePayload for PgQuery_LockingClause(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3297Tm_1);
}

uint64_t type metadata completion function for PgQuery_LockingClause()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t getEnumTagSinglePayload for PgQuery_FunctionParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_18);
}

uint64_t storeEnumTagSinglePayload for PgQuery_FunctionParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_18);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_TableLikeClause(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v13 = (uint64_t *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    uint64_t v16 = *(void *)(RangeVar - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v19;
      uint64_t v20 = v14[3];
      v13[2] = v14[2];
      v13[3] = v20;
      uint64_t v21 = v14[5];
      v13[4] = v14[4];
      v13[5] = v21;
      *((unsigned char *)v13 + 48) = *((unsigned char *)v14 + 48);
      int v37 = v11;
      uint64_t v22 = v14[8];
      v13[7] = v14[7];
      v13[8] = v22;
      *((_DWORD *)v13 + 18) = *((_DWORD *)v14 + 18);
      uint64_t v23 = *(int *)(RangeVar + 40);
      uint64_t v34 = (char *)v14 + v23;
      int v36 = (char *)v13 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v36, v34, v10);
      uint64_t v24 = *(int *)(RangeVar + 44);
      uint64_t v25 = (void *)((char *)v13 + v24);
      uint64_t v26 = (void *)((char *)v14 + v24);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v28 = *(void *)(Alias - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        uint64_t v30 = v26[1];
        *uint64_t v25 = *v26;
        v25[1] = v30;
        v25[2] = v26[2];
        uint64_t v31 = *(int *)(Alias + 24);
        uint64_t v35 = (char *)v25 + v31;
        uint64_t v32 = (char *)v26 + v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37(v35, v32, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
    }
  }
  return v4;
}

void *initializeWithCopy for PgQuery_TableLikeClause(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    uint64_t v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    uint64_t v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    uint64_t v35 = v10;
    uint64_t v20 = v13[8];
    v12[7] = v13[7];
    v12[8] = v20;
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    uint64_t v21 = *(int *)(RangeVar + 40);
    uint64_t v32 = (char *)v13 + v21;
    uint64_t v34 = (char *)v12 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(v34, v32, v9);
    uint64_t v22 = *(int *)(RangeVar + 44);
    uint64_t v23 = (void *)((char *)v12 + v22);
    uint64_t v24 = (void *)((char *)v13 + v22);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v26 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, Alias))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v28;
      v23[2] = v24[2];
      uint64_t v29 = *(int *)(Alias + 24);
      uint64_t v33 = (char *)v23 + v29;
      uint64_t v30 = (char *)v24 + v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35(v33, v30, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, Alias);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

_DWORD *assignWithCopy for PgQuery_TableLikeClause(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v49 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16((uint64_t)v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *((void *)v13 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = *((void *)v13 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 32) = *((void *)v13 + 4);
      *(void *)(v12 + 40) = *((void *)v13 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = v13[48];
      *(void *)(v12 + 56) = *((void *)v13 + 7);
      *(void *)(v12 + 64) = *((void *)v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *((_DWORD *)v13 + 18);
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(RangeVar + 40), &v13[*(int *)(RangeVar + 40)], v50);
      uint64_t v30 = *(int *)(RangeVar + 44);
      uint64_t v31 = (char *)(v12 + v30);
      uint64_t v32 = &v13[v30];
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v34 = *(void *)(Alias - 8);
      uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
      int v36 = v35(v31, 1, Alias);
      int v37 = v35(v32, 1, Alias);
      if (v36)
      {
        if (!v37)
        {
          *(void *)uint64_t v31 = *(void *)v32;
          *((void *)v31 + 1) = *((void *)v32 + 1);
          *((void *)v31 + 2) = *((void *)v32 + 2);
          uint64_t v38 = *(int *)(Alias + 24);
          uint64_t v39 = &v31[v38];
          uint64_t v40 = &v32[v38];
          uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v41(v39, v40, v50);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v37)
        {
          *(void *)uint64_t v31 = *(void *)v32;
          *((void *)v31 + 1) = *((void *)v32 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *((void *)v31 + 2) = *((void *)v32 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          ((void (*)(char *, char *, uint64_t))v10)(&v31[*(int *)(Alias + 24)], &v32[*(int *)(Alias + 24)], v50);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_Alias);
      }
      size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v28 = v31;
      uint64_t v29 = v32;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v28 = (void *)v12;
    uint64_t v29 = v13;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *((void *)v13 + 1);
  *(void *)(v12 + 16) = *((void *)v13 + 2);
  *(void *)(v12 + 24) = *((void *)v13 + 3);
  *(void *)(v12 + 32) = *((void *)v13 + 4);
  *(void *)(v12 + 40) = *((void *)v13 + 5);
  *(unsigned char *)(v12 + 48) = v13[48];
  *(void *)(v12 + 56) = *((void *)v13 + 7);
  *(void *)(v12 + 64) = *((void *)v13 + 8);
  *(_DWORD *)(v12 + 72) = *((_DWORD *)v13 + 18);
  uint64_t v18 = *(int *)(RangeVar + 40);
  int v46 = &v13[v18];
  uint64_t v47 = (char *)(v12 + v18);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = v47;
  uint64_t v48 = v19;
  v19(v20, v46, v50);
  uint64_t v21 = *(int *)(RangeVar + 44);
  uint64_t v22 = (void *)(v12 + v21);
  uint64_t v23 = &v13[v21];
  uint64_t v24 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *uint64_t v22 = *(void *)v23;
    v22[1] = *((void *)v23 + 1);
    v22[2] = *((void *)v23 + 2);
    uint64_t v42 = *(int *)(v24 + 24);
    uint64_t v43 = (char *)v22 + v42;
    uint64_t v44 = &v23[v42];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v43, v44, v50);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return a1;
}

void *initializeWithTake for PgQuery_TableLikeClause(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    uint64_t v18 = *(int *)(RangeVar + 44);
    __dst = (void *)((char *)v12 + v18);
    uint64_t v19 = (void *)((char *)v13 + v18);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v21 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, Alias))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      __dst[2] = v19[2];
      v10((char *)__dst + *(int *)(Alias + 24), (char *)v19 + *(int *)(Alias + 24), v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

void *assignWithTake for PgQuery_TableLikeClause(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v9 - 8);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v43 + 40);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v44 = a1;
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16((uint64_t)v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v29 = *((void *)v13 + 1);
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = *((void *)v13 + 3);
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = v30;
      swift_bridgeObjectRelease();
      uint64_t v31 = *((void *)v13 + 5);
      *(void *)(v12 + 32) = *((void *)v13 + 4);
      *(void *)(v12 + 40) = v31;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = v13[48];
      uint64_t v32 = *((void *)v13 + 8);
      *(void *)(v12 + 56) = *((void *)v13 + 7);
      *(void *)(v12 + 64) = v32;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *((_DWORD *)v13 + 18);
      v10((char *)(v12 + *(int *)(RangeVar + 40)), &v13[*(int *)(RangeVar + 40)], v9);
      uint64_t v33 = *(int *)(RangeVar + 44);
      uint64_t v34 = v12 + v33;
      uint64_t v35 = &v13[v33];
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v37 = *(void *)(Alias - 8);
      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      int v39 = v38(v34, 1, Alias);
      int v40 = v38((uint64_t)v35, 1, Alias);
      if (v39)
      {
        if (!v40)
        {
          *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
          *(void *)(v34 + 16) = *((void *)v35 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v34 + *(int *)(Alias + 24), &v35[*(int *)(Alias + 24)], v9);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, Alias);
          return v44;
        }
      }
      else
      {
        if (!v40)
        {
          uint64_t v42 = *((void *)v35 + 1);
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = v42;
          swift_bridgeObjectRelease();
          *(void *)(v34 + 16) = *((void *)v35 + 2);
          swift_bridgeObjectRelease();
          v10((char *)(v34 + *(int *)(Alias + 24)), &v35[*(int *)(Alias + 24)], v9);
          return v44;
        }
        outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Alias);
      }
      size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      size_t v27 = (void *)v34;
      uint64_t v28 = v35;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    size_t v27 = (void *)v12;
    uint64_t v28 = v13;
LABEL_8:
    memcpy(v27, v28, v26);
    return v44;
  }
  if (v17) {
    goto LABEL_7;
  }
  long long v18 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v18;
  *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
  *(unsigned char *)(v12 + 48) = v13[48];
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 56);
  *(_DWORD *)(v12 + 72) = *((_DWORD *)v13 + 18);
  uint64_t v19 = *(void (**)(uint64_t, char *, uint64_t))(v43 + 32);
  v19(v12 + *(int *)(RangeVar + 40), &v13[*(int *)(RangeVar + 40)], v9);
  uint64_t v20 = *(int *)(RangeVar + 44);
  uint64_t v21 = (void *)(v12 + v20);
  uint64_t v22 = &v13[v20];
  uint64_t v23 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    v21[2] = *((void *)v22 + 2);
    v19((uint64_t)v21 + *(int *)(v23 + 24), &v22[*(int *)(v23 + 24)], v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return v44;
}

uint64_t getEnumTagSinglePayload for PgQuery_TableLikeClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E962480);
}

uint64_t sub_18E962480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 28);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_TableLikeClause(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E962594);
}

uint64_t sub_18E962594(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + *(int *)(a4 + 28);
    return v15(v17, a2, a2, v16);
  }
}

void type metadata completion function for PgQuery_TableLikeClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateOpClassItem(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = a3[8];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[9];
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
    uint64_t v17 = *(void *)(ObjectWithArgs - 8);
    int v36 = v12;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, ObjectWithArgs))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v35 = v11;
      uint64_t v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      *((unsigned char *)v14 + 16) = *((unsigned char *)v15 + 16);
      uint64_t v21 = *(int *)(ObjectWithArgs + 28);
      uint64_t v22 = (char *)v14 + v21;
      uint64_t v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v24 = v22;
      uint64_t v11 = v35;
      v12(v24, v23, v35);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, ObjectWithArgs);
    }
    uint64_t v25 = a3[10];
    size_t v26 = (uint64_t *)((char *)v4 + v25);
    size_t v27 = (uint64_t *)((char *)a2 + v25);
    uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
    uint64_t v29 = *(void *)(TypeName - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, TypeName))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      *size_t v26 = *v27;
      *((_DWORD *)v26 + 2) = *((_DWORD *)v27 + 2);
      *((_WORD *)v26 + 6) = *((_WORD *)v27 + 6);
      v26[2] = v27[2];
      *((_DWORD *)v26 + 6) = *((_DWORD *)v27 + 6);
      v26[4] = v27[4];
      *((_DWORD *)v26 + 10) = *((_DWORD *)v27 + 10);
      uint64_t v31 = *(int *)(TypeName + 48);
      uint64_t v32 = (char *)v26 + v31;
      uint64_t v33 = (char *)v27 + v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v32, v33, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, TypeName);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateOpClassItem(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[9];
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ObjectWithArgs - 8) + 48))(v6, 1, ObjectWithArgs))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(ObjectWithArgs + 28), v5);
  }
  uint64_t v8 = a1 + a2[10];
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 48))(v8, 1, TypeName);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v8 + *(int *)(TypeName + 48);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

void *initializeWithCopy for PgQuery_CreateOpClassItem(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  uint64_t v7 = a3[8];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[9];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v16 = *(void *)(ObjectWithArgs - 8);
  uint64_t v34 = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, ObjectWithArgs))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v33 = v10;
    uint64_t v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    *((unsigned char *)v13 + 16) = *((unsigned char *)v14 + 16);
    uint64_t v19 = *(int *)(ObjectWithArgs + 28);
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = v20;
    uint64_t v10 = v33;
    v11(v22, v21, v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, ObjectWithArgs);
  }
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v27 = *(void *)(TypeName - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, TypeName))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    *uint64_t v24 = *v25;
    *((_DWORD *)v24 + 2) = *((_DWORD *)v25 + 2);
    *((_WORD *)v24 + 6) = *((_WORD *)v25 + 6);
    v24[2] = v25[2];
    *((_DWORD *)v24 + 6) = *((_DWORD *)v25 + 6);
    v24[4] = v25[4];
    *((_DWORD *)v24 + 10) = *((_DWORD *)v25 + 10);
    uint64_t v29 = *(int *)(TypeName + 48);
    uint64_t v30 = (char *)v24 + v29;
    uint64_t v31 = (char *)v25 + v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v34(v30, v31, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, TypeName);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateOpClassItem(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v39 = v9;
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v38 + 24);
  v37(v7, v8);
  uint64_t v10 = a3[9];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v14 = *(void *)(ObjectWithArgs - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, ObjectWithArgs);
  int v17 = v15(v12, 1, ObjectWithArgs);
  if (v16)
  {
    if (!v17)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      *(void *)(v11 + 8) = *(void *)(v12 + 8);
      *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
      uint64_t v18 = *(int *)(ObjectWithArgs + 28);
      uint64_t v19 = v11 + v18;
      uint64_t v20 = v12 + v18;
      int v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v19, v20, v39);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, ObjectWithArgs);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v11, (const void *)v12, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v11 = *(void *)v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v37)(v11 + *(int *)(ObjectWithArgs + 28), v12 + *(int *)(ObjectWithArgs + 28), v39);
LABEL_7:
  uint64_t v22 = a3[10];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v26 = *(void *)(TypeName - 8);
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, TypeName);
  int v29 = v27(v24, 1, TypeName);
  if (!v28)
  {
    if (!v29)
    {
      *(void *)uint64_t v23 = *(void *)v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v23 + 8) = *(_DWORD *)(v24 + 8);
      *(unsigned char *)(v23 + 12) = *(unsigned char *)(v24 + 12);
      *(unsigned char *)(v23 + 13) = *(unsigned char *)(v24 + 13);
      *(void *)(v23 + 16) = *(void *)(v24 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v23 + 24) = *(_DWORD *)(v24 + 24);
      *(void *)(v23 + 32) = *(void *)(v24 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v23 + 40) = *(_DWORD *)(v24 + 40);
      ((void (*)(uint64_t, uint64_t, uint64_t))v37)(v23 + *(int *)(TypeName + 48), v24 + *(int *)(TypeName + 48), v39);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_TypeName);
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v23, (const void *)v24, *(void *)(*(void *)(v34 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v23 = *(void *)v24;
  *(_DWORD *)(v23 + 8) = *(_DWORD *)(v24 + 8);
  *(unsigned char *)(v23 + 12) = *(unsigned char *)(v24 + 12);
  *(unsigned char *)(v23 + 13) = *(unsigned char *)(v24 + 13);
  *(void *)(v23 + 16) = *(void *)(v24 + 16);
  *(_DWORD *)(v23 + 24) = *(_DWORD *)(v24 + 24);
  *(void *)(v23 + 32) = *(void *)(v24 + 32);
  *(_DWORD *)(v23 + 40) = *(_DWORD *)(v24 + 40);
  uint64_t v30 = *(int *)(TypeName + 48);
  uint64_t v31 = v23 + v30;
  uint64_t v32 = v24 + v30;
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33(v31, v32, v39);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, TypeName);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateOpClassItem(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[8];
  uint64_t v7 = (unsigned char *)(a1 + v6);
  uint64_t v8 = (unsigned char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[9];
  uint64_t v12 = (unsigned char *)(a1 + v11);
  uint64_t v13 = (unsigned char *)(a2 + v11);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v15 = *(void *)(ObjectWithArgs - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, ObjectWithArgs))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[16] = v13[16];
    v10(&v12[*(int *)(ObjectWithArgs + 28)], &v13[*(int *)(ObjectWithArgs + 28)], v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, ObjectWithArgs);
  }
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v21 = *(void *)(TypeName - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, TypeName))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *uint64_t v18 = *v19;
    *((_DWORD *)v18 + 2) = *((_DWORD *)v19 + 2);
    *((_WORD *)v18 + 6) = *((_WORD *)v19 + 6);
    v18[2] = v19[2];
    *((_DWORD *)v18 + 6) = *((_DWORD *)v19 + 6);
    v18[4] = v19[4];
    *((_DWORD *)v18 + 10) = *((_DWORD *)v19 + 10);
    v10((unsigned char *)v18 + *(int *)(TypeName + 48), (unsigned char *)v19 + *(int *)(TypeName + 48), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, TypeName);
  }
  return a1;
}

void *assignWithTake for PgQuery_CreateOpClassItem(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  int v29 = *(void (**)(char *, char *))(v30 + 40);
  v29(v7, v8);
  uint64_t v10 = a3[9];
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v14 = *(void *)(ObjectWithArgs - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, ObjectWithArgs);
  int v17 = v15((uint64_t)v12, 1, ObjectWithArgs);
  if (v16)
  {
    if (!v17)
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *(unsigned char *)(v11 + 16) = v12[16];
      (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v11 + *(int *)(ObjectWithArgs + 28), &v12[*(int *)(ObjectWithArgs + 28)], v31);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, ObjectWithArgs);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v11 = *(void *)v12;
  swift_bridgeObjectRelease();
  *(void *)(v11 + 8) = *((void *)v12 + 1);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v11 + 16) = v12[16];
  ((void (*)(uint64_t, char *, uint64_t))v29)(v11 + *(int *)(ObjectWithArgs + 28), &v12[*(int *)(ObjectWithArgs + 28)], v31);
LABEL_7:
  uint64_t v19 = a3[10];
  uint64_t v20 = (uint64_t)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v23 = *(void *)(TypeName - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, TypeName);
  int v26 = v24((uint64_t)v21, 1, TypeName);
  if (!v25)
  {
    if (!v26)
    {
      *(void *)uint64_t v20 = *(void *)v21;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v20 + 8) = *((_DWORD *)v21 + 2);
      *(unsigned char *)(v20 + 12) = v21[12];
      *(unsigned char *)(v20 + 13) = v21[13];
      *(void *)(v20 + 16) = *((void *)v21 + 2);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v20 + 24) = *((_DWORD *)v21 + 6);
      *(void *)(v20 + 32) = *((void *)v21 + 4);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v20 + 40) = *((_DWORD *)v21 + 10);
      ((void (*)(uint64_t, char *, uint64_t))v29)(v20 + *(int *)(TypeName + 48), &v21[*(int *)(TypeName + 48)], v31);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_TypeName);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v20 = *(void *)v21;
  *(_DWORD *)(v20 + 8) = *((_DWORD *)v21 + 2);
  *(_WORD *)(v20 + 12) = *((_WORD *)v21 + 6);
  *(void *)(v20 + 16) = *((void *)v21 + 2);
  *(_DWORD *)(v20 + 24) = *((_DWORD *)v21 + 6);
  *(void *)(v20 + 32) = *((void *)v21 + 4);
  *(_DWORD *)(v20 + 40) = *((_DWORD *)v21 + 10);
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v20 + *(int *)(TypeName + 48), &v21[*(int *)(TypeName + 48)], v31);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, TypeName);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateOpClassItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E963AA8);
}

uint64_t sub_18E963AA8(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[8];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[9];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[10];

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateOpClassItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E963C3C);
}

uint64_t sub_18E963C3C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[8];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[9];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[10];

  return v15(v17, a2, a2, v16);
}

void type metadata completion function for PgQuery_CreateOpClassItem()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_ObjectWithArgs?, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_AccessPriv(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3407Tm_0);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AccessPriv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3408Tm_0);
}

uint64_t getEnumTagSinglePayload for PgQuery_WindowClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_19);
}

uint64_t storeEnumTagSinglePayload for PgQuery_WindowClause(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_19);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_GroupingSet(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PgQuery_GroupingSet(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_GroupingSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_GroupingSet(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_GroupingSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_GroupingSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_GroupingSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E964398);
}

uint64_t sub_18E964398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_GroupingSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E96445C);
}

uint64_t sub_18E96445C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_GroupingSet()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

void *initializeBufferWithCopyOfBuffer for PgQuery_SortGroupClause(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
    uint64_t v5 = *(int *)(a3 + 36);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PgQuery_SortGroupClause(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 36);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t initializeWithCopy for PgQuery_SortGroupClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_SortGroupClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for PgQuery_SortGroupClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_SortGroupClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_SortGroupClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E9648C8);
}

uint64_t sub_18E9648C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 36);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_SortGroupClause(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E96498C);
}

uint64_t sub_18E96498C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 12) = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_SortGroupClause()
{
  return type metadata completion function for PgQuery_SortGroupClause();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_WithCheckOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_20);
}

uint64_t storeEnumTagSinglePayload for PgQuery_WithCheckOption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_20);
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeTblFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_21);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeTblFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_21);
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeTblEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_22);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeTblEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_22);
}

uint64_t getEnumTagSinglePayload for PgQuery_DefElem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_23);
}

uint64_t storeEnumTagSinglePayload for PgQuery_DefElem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_23);
}

uint64_t getEnumTagSinglePayload for PgQuery_Constraint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_24);
}

uint64_t storeEnumTagSinglePayload for PgQuery_Constraint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_24);
}

uint64_t getEnumTagSinglePayload for PgQuery_IndexElem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_25);
}

uint64_t storeEnumTagSinglePayload for PgQuery_IndexElem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_25);
}

uint64_t getEnumTagSinglePayload for PgQuery_ColumnDef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_26);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ColumnDef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_26);
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeTableFuncCol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_27);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeTableFuncCol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_27);
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeTableFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_28);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeTableFunc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_28);
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeTableSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_29);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeTableSample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_29);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_RangeFunction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v17 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, Alias))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      v14[2] = v15[2];
      uint64_t v21 = *(int *)(Alias + 24);
      uint64_t v22 = (char *)v14 + v21;
      uint64_t v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12((uint64_t)v22, (uint64_t)v23, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, Alias);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_RangeFunction(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 48))(v6, 1, Alias);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(Alias + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v16 = *(void *)(Alias - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, Alias))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    v13[2] = v14[2];
    uint64_t v19 = *(int *)(Alias + 24);
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11((uint64_t)v20, (uint64_t)v21, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, Alias);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v24 + 24);
  ((void (*)(uint64_t, uint64_t))v10)(v7, v8);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v15 = *(void *)(Alias - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, Alias);
  int v17 = v16(v13, 1, Alias);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = *((void *)v13 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v12 + 2) = *((void *)v13 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v10(&v12[*(int *)(Alias + 24)], &v13[*(int *)(Alias + 24)], v25);
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Alias);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v12, v13, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  *((void *)v12 + 2) = *((void *)v13 + 2);
  uint64_t v18 = *(int *)(Alias + 24);
  uint64_t v19 = &v12[v18];
  uint64_t v20 = &v13[v18];
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v19, v20, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, Alias);
  return a1;
}

uint64_t initializeWithTake for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v15 = *(void *)(Alias - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, Alias))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(Alias + 24), (char *)v13 + *(int *)(Alias + 24), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, Alias);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void *)(v9 - 8);
  uint64_t v22 = v9;
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v21 + 40);
  ((void (*)(uint64_t, uint64_t))v10)(v7, v8);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v15 = *(void *)(Alias - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, Alias);
  int v17 = v16(v13, 1, Alias);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v20 = *((void *)v13 + 1);
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = v20;
      swift_bridgeObjectRelease();
      *((void *)v12 + 2) = *((void *)v13 + 2);
      swift_bridgeObjectRelease();
      v10(&v12[*(int *)(Alias + 24)], &v13[*(int *)(Alias + 24)], v22);
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Alias);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((void *)v12 + 2) = *((void *)v13 + 2);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(&v12[*(int *)(Alias + 24)], &v13[*(int *)(Alias + 24)], v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, Alias);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E9657A4);
}

uint64_t sub_18E9657A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3591Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_Alias?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E9657C4);
}

uint64_t sub_18E9657C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3592Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_Alias?);
}

void type metadata completion function for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeSubselect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_30);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeSubselect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_30);
}

uint64_t getEnumTagSinglePayload for PgQuery_SortBy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_31);
}

uint64_t storeEnumTagSinglePayload for PgQuery_SortBy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_31);
}

uint64_t getEnumTagSinglePayload for PgQuery_TypeCast(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_32);
}

uint64_t storeEnumTagSinglePayload for PgQuery_TypeCast(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_32);
}

uint64_t getEnumTagSinglePayload for PgQuery_MultiAssignRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_33);
}

uint64_t storeEnumTagSinglePayload for PgQuery_MultiAssignRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_33);
}

uint64_t getEnumTagSinglePayload for PgQuery_ResTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_34);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ResTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_34);
}

uint64_t getEnumTagSinglePayload for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3609Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3610Tm);
}

uint64_t type metadata completion function for PgQuery_A_ArrayExpr()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t getEnumTagSinglePayload for PgQuery_A_Indirection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_35);
}

uint64_t storeEnumTagSinglePayload for PgQuery_A_Indirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_35);
}

uint64_t getEnumTagSinglePayload for PgQuery_A_Indices(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_36);
}

uint64_t storeEnumTagSinglePayload for PgQuery_A_Indices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_36);
}

uint64_t getEnumTagSinglePayload for PgQuery_A_Const(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_37);
}

uint64_t storeEnumTagSinglePayload for PgQuery_A_Const(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_37);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_ParamRef(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PgQuery_ParamRef(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

void *initializeWithCopy for PgQuery_ParamRef(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for PgQuery_ParamRef(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

void *initializeWithTake for PgQuery_ParamRef(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for PgQuery_ParamRef(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ParamRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E965D1C);
}

uint64_t sub_18E965D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ParamRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E965DA0);
}

uint64_t sub_18E965DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for PgQuery_ParamRef()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t initializeWithCopy for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ColumnRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3609Tm_0);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ColumnRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3610Tm_0);
}

uint64_t getEnumTagSinglePayload for PgQuery_A_Expr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_38);
}

uint64_t storeEnumTagSinglePayload for PgQuery_A_Expr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_38);
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3296Tm_2);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3297Tm_2);
}

uint64_t type metadata completion function for PgQuery_AlterStatsStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t getEnumTagSinglePayload for PgQuery_CallStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_39);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CallStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_39);
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterCollationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3486Tm_2);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterCollationStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3487Tm_2);
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = a2[5];
    uint64_t v8 = *(int *)(a3 + 40);
    uint64_t v13 = (uint64_t)a2 + v8;
    uint64_t v9 = a1 + v8;
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v13, v10);
  }
  return v5;
}

uint64_t destroy for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v12 = a2 + v7;
  uint64_t v8 = a1 + v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v12, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3639Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3640Tm);
}

uint64_t type metadata completion function for PgQuery_CreateStatsStmt()
{
  return type metadata completion function for PgQuery_CreateStatsStmt();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_TriggerTransition(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3317Tm_1);
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3318Tm_1);
}

uint64_t type metadata completion function for PgQuery_DropSubscriptionStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

void *initializeBufferWithCopyOfBuffer for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v6;
    uint64_t v7 = a2[7];
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v7;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  return v3;
}

uint64_t destroy for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 36);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E967158);
}

uint64_t sub_18E967158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E96721C);
}

uint64_t sub_18E96721C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_AlterSubscriptionStmt()
{
  return type metadata completion function for PgQuery_SortGroupClause();
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3510Tm_0);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateSubscriptionStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3511Tm_0);
}

uint64_t type metadata completion function for PgQuery_CreateSubscriptionStmt()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

void *initializeBufferWithCopyOfBuffer for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(void *)(a1 + 40) = a2[5];
    uint64_t v7 = *(int *)(a3 + 36);
    uint64_t v8 = (uint64_t)a2 + v7;
    uint64_t v9 = a1 + v7;
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a2 + v6;
  uint64_t v8 = a1 + v6;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 36);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3651Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3652Tm);
}

uint64_t type metadata completion function for PgQuery_AlterPublicationStmt()
{
  return type metadata completion function for PgQuery_SortGroupClause();
}

void *initializeBufferWithCopyOfBuffer for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = *(int *)(a3 + 32);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3510Tm_1);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3511Tm_1);
}

uint64_t type metadata completion function for PgQuery_CreatePublicationStmt()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateAmStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    a1[4] = a2[4];
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreateAmStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for PgQuery_CreateAmStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  a1[4] = a2[4];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *assignWithCopy for PgQuery_CreateAmStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateAmStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for PgQuery_CreateAmStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateAmStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3317Tm_2);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateAmStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3318Tm_2);
}

uint64_t type metadata completion function for PgQuery_CreateAmStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateTransformStmt(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    uint64_t v44 = v12;
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
    uint64_t v17 = *(void *)(TypeName - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, TypeName))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((_DWORD *)v14 + 2) = *((_DWORD *)v15 + 2);
      *((_WORD *)v14 + 6) = *((_WORD *)v15 + 6);
      v14[2] = v15[2];
      *((_DWORD *)v14 + 6) = *((_DWORD *)v15 + 6);
      v14[4] = v15[4];
      *((_DWORD *)v14 + 10) = *((_DWORD *)v15 + 10);
      uint64_t v20 = *(int *)(TypeName + 48);
      uint64_t v41 = (char *)v14 + v20;
      uint64_t v21 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44(v41, v21, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, TypeName);
    }
    uint64_t v22 = a3[8];
    uint64_t v23 = (uint64_t *)((char *)v4 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
    uint64_t v26 = *(void *)(ObjectWithArgs - 8);
    uint64_t v27 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48);
    if (v27(v24, 1, ObjectWithArgs))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v43 = v11;
      uint64_t v29 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v29;
      *((unsigned char *)v23 + 16) = *((unsigned char *)v24 + 16);
      uint64_t v30 = *(int *)(ObjectWithArgs + 28);
      uint64_t v42 = (char *)v23 + v30;
      uint64_t v31 = (char *)v24 + v30;
      swift_bridgeObjectRetain();
      uint64_t v11 = v43;
      swift_bridgeObjectRetain();
      v44(v42, v31, v43);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, ObjectWithArgs);
    }
    uint64_t v32 = a3[9];
    uint64_t v33 = (uint64_t *)((char *)v4 + v32);
    uint64_t v34 = (uint64_t *)((char *)a2 + v32);
    if (v27(v34, 1, ObjectWithArgs))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      uint64_t v36 = v34[1];
      *uint64_t v33 = *v34;
      v33[1] = v36;
      *((unsigned char *)v33 + 16) = *((unsigned char *)v34 + 16);
      uint64_t v37 = *(int *)(ObjectWithArgs + 28);
      uint64_t v38 = (char *)v33 + v37;
      uint64_t v39 = (char *)v34 + v37;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44(v38, v39, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v33, 0, 1, ObjectWithArgs);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateTransformStmt(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v14(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 48))(v6, 1, TypeName))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14(v6 + *(int *)(TypeName + 48), v5);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ObjectWithArgs - 8) + 48);
  if (!v10(v8, 1, ObjectWithArgs))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14(v8 + *(int *)(ObjectWithArgs + 28), v5);
  }
  uint64_t v11 = a1 + a2[9];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10)(v11, 1, ObjectWithArgs);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v11 + *(int *)(ObjectWithArgs + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  uint64_t v44 = v11;
  v11(v8, v9, v10);
  uint64_t v45 = a3;
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v16 = *(void *)(TypeName - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, TypeName))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
    *((_WORD *)v13 + 6) = *((_WORD *)v14 + 6);
    v13[2] = v14[2];
    *((_DWORD *)v13 + 6) = *((_DWORD *)v14 + 6);
    v13[4] = v14[4];
    *((_DWORD *)v13 + 10) = *((_DWORD *)v14 + 10);
    uint64_t v18 = *(int *)(TypeName + 48);
    uint64_t v19 = (char *)v13 + v18;
    uint64_t v20 = (char *)v14 + v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v19, v20, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, TypeName);
  }
  uint64_t v21 = v45;
  uint64_t v22 = *(int *)(v45 + 32);
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v26 = *(void *)(ObjectWithArgs - 8);
  uint64_t v27 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48);
  if (v27(v24, 1, ObjectWithArgs))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v43 = v10;
    uint64_t v29 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v29;
    *((unsigned char *)v23 + 16) = *((unsigned char *)v24 + 16);
    uint64_t v30 = *(int *)(ObjectWithArgs + 28);
    uint64_t v31 = (char *)v23 + v30;
    uint64_t v32 = (char *)v24 + v30;
    swift_bridgeObjectRetain();
    uint64_t v10 = v43;
    swift_bridgeObjectRetain();
    uint64_t v33 = v31;
    uint64_t v21 = v45;
    v44(v33, v32, v43);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, ObjectWithArgs);
  }
  uint64_t v34 = *(int *)(v21 + 36);
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  if (v27(v36, 1, ObjectWithArgs))
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    uint64_t v38 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v38;
    *((unsigned char *)v35 + 16) = *((unsigned char *)v36 + 16);
    uint64_t v39 = *(int *)(ObjectWithArgs + 28);
    int v40 = (char *)v35 + v39;
    uint64_t v41 = (char *)v36 + v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44(v40, v41, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v35, 0, 1, ObjectWithArgs);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 24);
  v47(v7, v8, v9);
  uint64_t v52 = a3;
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v14 = *(void *)(TypeName - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, TypeName);
  int v17 = v15(v12, 1, TypeName);
  if (v16)
  {
    if (!v17)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
      *(unsigned char *)(v11 + 12) = *(unsigned char *)(v12 + 12);
      *(unsigned char *)(v11 + 13) = *(unsigned char *)(v12 + 13);
      *(void *)(v11 + 16) = *(void *)(v12 + 16);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
      *(void *)(v11 + 32) = *(void *)(v12 + 32);
      *(_DWORD *)(v11 + 40) = *(_DWORD *)(v12 + 40);
      uint64_t v18 = *(int *)(TypeName + 48);
      uint64_t v19 = v11 + v18;
      uint64_t v48 = v12 + v18;
      uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45(v19, v48, v9);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, TypeName);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_TypeName);
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v11, (const void *)v12, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v11 = *(void *)v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(unsigned char *)(v11 + 12) = *(unsigned char *)(v12 + 12);
  *(unsigned char *)(v11 + 13) = *(unsigned char *)(v12 + 13);
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
  *(void *)(v11 + 32) = *(void *)(v12 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(v12 + 40);
  v47(v11 + *(int *)(TypeName + 48), v12 + *(int *)(TypeName + 48), v9);
LABEL_7:
  uint64_t v21 = v52;
  uint64_t v22 = *(int *)(v52 + 32);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v49 = *(void *)(ObjectWithArgs - 8);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  int v27 = v26(v23, 1, ObjectWithArgs);
  int v28 = v26(v24, 1, ObjectWithArgs);
  uint64_t v50 = v9;
  if (v27)
  {
    if (!v28)
    {
      *(void *)uint64_t v23 = *(void *)v24;
      *(void *)(v23 + 8) = *(void *)(v24 + 8);
      *(unsigned char *)(v23 + 16) = *(unsigned char *)(v24 + 16);
      uint64_t v29 = *(int *)(ObjectWithArgs + 28);
      uint64_t v30 = v23 + v29;
      uint64_t v31 = v24 + v29;
      int v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v32 = v30;
      uint64_t v21 = v52;
      v46(v32, v31, v9);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56))(v23, 0, 1, ObjectWithArgs);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_12:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v23, (const void *)v24, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  *(void *)uint64_t v23 = *(void *)v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v23 + 16) = *(unsigned char *)(v24 + 16);
  v47(v23 + *(int *)(ObjectWithArgs + 28), v24 + *(int *)(ObjectWithArgs + 28), v9);
LABEL_13:
  uint64_t v34 = *(int *)(v21 + 36);
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  int v37 = v26(a1 + v34, 1, ObjectWithArgs);
  int v38 = v26(v36, 1, ObjectWithArgs);
  if (!v37)
  {
    if (!v38)
    {
      *(void *)uint64_t v35 = *(void *)v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v35 + 8) = *(void *)(v36 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v35 + 16) = *(unsigned char *)(v36 + 16);
      v47(v35 + *(int *)(ObjectWithArgs + 28), v36 + *(int *)(ObjectWithArgs + 28), v50);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_18;
  }
  if (v38)
  {
LABEL_18:
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v35, (const void *)v36, *(void *)(*(void *)(v43 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v35 = *(void *)v36;
  *(void *)(v35 + 8) = *(void *)(v36 + 8);
  *(unsigned char *)(v35 + 16) = *(unsigned char *)(v36 + 16);
  uint64_t v39 = *(int *)(ObjectWithArgs + 28);
  uint64_t v40 = v35 + v39;
  uint64_t v41 = v36 + v39;
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v42(v40, v41, v50);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56))(v35, 0, 1, ObjectWithArgs);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v15 = *(void *)(TypeName - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, TypeName))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((_DWORD *)v12 + 2) = *((_DWORD *)v13 + 2);
    *((_WORD *)v12 + 6) = *((_WORD *)v13 + 6);
    v12[2] = v13[2];
    *((_DWORD *)v12 + 6) = *((_DWORD *)v13 + 6);
    v12[4] = v13[4];
    *((_DWORD *)v12 + 10) = *((_DWORD *)v13 + 10);
    v10((char *)v12 + *(int *)(TypeName + 48), (char *)v13 + *(int *)(TypeName + 48), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, TypeName);
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = (unsigned char *)(a1 + v17);
  uint64_t v19 = (unsigned char *)(a2 + v17);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v21 = *(void *)(ObjectWithArgs - 8);
  uint64_t v22 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v19, 1, ObjectWithArgs))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    v18[16] = v19[16];
    v10(&v18[*(int *)(ObjectWithArgs + 28)], &v19[*(int *)(ObjectWithArgs + 28)], v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, ObjectWithArgs);
  }
  uint64_t v24 = a3[9];
  uint64_t v25 = (unsigned char *)(a1 + v24);
  uint64_t v26 = (unsigned char *)(a2 + v24);
  if (v22(v26, 1, ObjectWithArgs))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    v25[16] = v26[16];
    v10(&v25[*(int *)(ObjectWithArgs + 28)], &v26[*(int *)(ObjectWithArgs + 28)], v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v21 + 56))(v25, 0, 1, ObjectWithArgs);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v37 = *(void *)(v10 - 8);
  uint64_t v38 = v10;
  uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v37 + 40);
  v36(v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v15 = *(void *)(TypeName - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, TypeName);
  int v18 = v16(v13, 1, TypeName);
  if (v17)
  {
    if (!v18)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
      *(_WORD *)(v12 + 12) = *(_WORD *)(v13 + 12);
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      *(_DWORD *)(v12 + 40) = *(_DWORD *)(v13 + 40);
      uint64_t v19 = v38;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v12 + *(int *)(TypeName + 48), v13 + *(int *)(TypeName + 48), v38);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, TypeName);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_TypeName);
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v20 - 8) + 64));
    uint64_t v19 = v38;
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
  *(unsigned char *)(v12 + 12) = *(unsigned char *)(v13 + 12);
  *(unsigned char *)(v12 + 13) = *(unsigned char *)(v13 + 13);
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v12 + 40) = *(_DWORD *)(v13 + 40);
  uint64_t v19 = v38;
  ((void (*)(uint64_t, uint64_t, uint64_t))v36)(v12 + *(int *)(TypeName + 48), v13 + *(int *)(TypeName + 48), v38);
LABEL_7:
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v39 = *(void *)(ObjectWithArgs - 8);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  int v26 = v25(v22, 1, ObjectWithArgs);
  int v27 = v25(v23, 1, ObjectWithArgs);
  if (v26)
  {
    if (!v27)
    {
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v22 + *(int *)(ObjectWithArgs + 28), v23 + *(int *)(ObjectWithArgs + 28), v19);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v22, 0, 1, ObjectWithArgs);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_12:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v22, (const void *)v23, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  *(void *)uint64_t v22 = *(void *)v23;
  swift_bridgeObjectRelease();
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v36)(v22 + *(int *)(ObjectWithArgs + 28), v23 + *(int *)(ObjectWithArgs + 28), v19);
LABEL_13:
  uint64_t v29 = a3[9];
  uint64_t v30 = (unsigned char *)(a1 + v29);
  uint64_t v31 = (unsigned char *)(a2 + v29);
  int v32 = v25(a1 + v29, 1, ObjectWithArgs);
  int v33 = v25((uint64_t)v31, 1, ObjectWithArgs);
  if (!v32)
  {
    if (!v33)
    {
      *(void *)uint64_t v30 = *(void *)v31;
      swift_bridgeObjectRelease();
      *((void *)v30 + 1) = *((void *)v31 + 1);
      swift_bridgeObjectRelease();
      v30[16] = v31[16];
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v36)(&v30[*(int *)(ObjectWithArgs + 28)], &v31[*(int *)(ObjectWithArgs + 28)], v19);
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v30, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_18;
  }
  if (v33)
  {
LABEL_18:
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  v30[16] = v31[16];
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v37 + 32))(&v30[*(int *)(ObjectWithArgs + 28)], &v31[*(int *)(ObjectWithArgs + 28)], v19);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v39 + 56))(v30, 0, 1, ObjectWithArgs);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E969AEC);
}

uint64_t sub_18E969AEC(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[8];

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E969C80);
}

uint64_t sub_18E969C80(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[8];

  return v15(v17, a2, a2, v16);
}

void type metadata completion function for PgQuery_CreateTransformStmt()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_ObjectWithArgs?, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterPolicyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_40);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterPolicyStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_40);
}

uint64_t getEnumTagSinglePayload for PgQuery_CreatePolicyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_41);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreatePolicyStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_41);
}

char *initializeBufferWithCopyOfBuffer for PgQuery_AlterSystemStmt(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
    uint64_t v13 = *(void *)(VariableSetStmt - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, VariableSetStmt))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v10 = *v11;
      v10[8] = *((unsigned char *)v11 + 8);
      uint64_t v16 = v11[3];
      *((void *)v10 + 2) = v11[2];
      *((void *)v10 + 3) = v16;
      *((void *)v10 + 4) = v11[4];
      v10[40] = *((unsigned char *)v11 + 40);
      uint64_t v17 = *(int *)(VariableSetStmt + 32);
      int v18 = &v10[v17];
      uint64_t v19 = (char *)v11 + v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(v18, v19, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, VariableSetStmt);
    }
  }
  return a1;
}

uint64_t destroy for PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v9(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(VariableSetStmt - 8) + 48))(v5, 1, VariableSetStmt);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = v5 + *(int *)(VariableSetStmt + 32);
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v8, v4);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v12 = *(void *)(VariableSetStmt - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, VariableSetStmt))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *uint64_t v9 = *v10;
    *((unsigned char *)v9 + 8) = *((unsigned char *)v10 + 8);
    uint64_t v14 = v10[3];
    v9[2] = v10[2];
    v9[3] = v14;
    v9[4] = v10[4];
    *((unsigned char *)v9 + 40) = *((unsigned char *)v10 + 40);
    uint64_t v15 = *(int *)(VariableSetStmt + 32);
    uint64_t v16 = (char *)v9 + v15;
    uint64_t v17 = (char *)v10 + v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7((uint64_t)v16, (uint64_t)v17, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, VariableSetStmt);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v25 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v12 = *(void *)(VariableSetStmt - 8);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, VariableSetStmt);
  int v15 = v13(v10, 1, VariableSetStmt);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v23 = *(void *)v10;
      *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
      *(void *)uint64_t v9 = v23;
      *(void *)(v9 + 16) = *(void *)(v10 + 16);
      *(void *)(v9 + 24) = *(void *)(v10 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v9 + 32) = *(void *)(v10 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v9 + 40) = *(unsigned char *)(v10 + 40);
      v7(v9 + *(int *)(VariableSetStmt + 32), v10 + *(int *)(VariableSetStmt + 32), v6);
      return v25;
    }
    outlined destroy of PgQuery_Alias(v9, type metadata accessor for PgQuery_VariableSetStmt);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy((void *)v9, (const void *)v10, *(void *)(*(void *)(v21 - 8) + 64));
    return v25;
  }
  uint64_t v16 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)uint64_t v9 = v16;
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(void *)(v9 + 24) = *(void *)(v10 + 24);
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  *(unsigned char *)(v9 + 40) = *(unsigned char *)(v10 + 40);
  uint64_t v17 = *(int *)(VariableSetStmt + 32);
  uint64_t v18 = v9 + v17;
  uint64_t v19 = v10 + v17;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20(v18, v19, v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, VariableSetStmt);
  return v25;
}

char *initializeWithTake for PgQuery_AlterSystemStmt(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v12 = *(void *)(VariableSetStmt - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, VariableSetStmt))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
    *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
    *((void *)v9 + 4) = *((void *)v10 + 4);
    v9[40] = v10[40];
    v7(&v9[*(int *)(VariableSetStmt + 32)], &v10[*(int *)(VariableSetStmt + 32)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, VariableSetStmt);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v19 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v20 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v12 = *(void *)(VariableSetStmt - 8);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, VariableSetStmt);
  int v15 = v13(v10, 1, VariableSetStmt);
  if (!v14)
  {
    if (!v15)
    {
      *(void *)uint64_t v9 = *(void *)v10;
      *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
      uint64_t v18 = *(void *)(v10 + 24);
      *(void *)(v9 + 16) = *(void *)(v10 + 16);
      *(void *)(v9 + 24) = v18;
      swift_bridgeObjectRelease();
      *(void *)(v9 + 32) = *(void *)(v10 + 32);
      swift_bridgeObjectRelease();
      *(unsigned char *)(v9 + 40) = *(unsigned char *)(v10 + 40);
      v7(v9 + *(int *)(VariableSetStmt + 32), v10 + *(int *)(VariableSetStmt + 32), v6);
      return v20;
    }
    outlined destroy of PgQuery_Alias(v9, type metadata accessor for PgQuery_VariableSetStmt);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy((void *)v9, (const void *)v10, *(void *)(*(void *)(v16 - 8) + 64));
    return v20;
  }
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v10 + 16);
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  *(unsigned char *)(v9 + 40) = *(unsigned char *)(v10 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v9 + *(int *)(VariableSetStmt + 32), v10 + *(int *)(VariableSetStmt + 32), v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, VariableSetStmt);
  return v20;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E96AACC);
}

uint64_t sub_18E96AACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E96ABDC);
}

uint64_t sub_18E96ABDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for PgQuery_AlterSystemStmt()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_VariableSetStmt?, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_ReplicaIdentityStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3407Tm_1);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ReplicaIdentityStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3408Tm_1);
}

uint64_t type metadata completion function for PgQuery_ReplicaIdentityStmt()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_RefreshMatViewStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v13 = (uint64_t *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    uint64_t v16 = *(void *)(RangeVar - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v19;
      uint64_t v20 = v14[3];
      v13[2] = v14[2];
      v13[3] = v20;
      uint64_t v21 = v14[5];
      v13[4] = v14[4];
      v13[5] = v21;
      *((unsigned char *)v13 + 48) = *((unsigned char *)v14 + 48);
      uint64_t v37 = v11;
      uint64_t v22 = v14[8];
      v13[7] = v14[7];
      v13[8] = v22;
      *((_DWORD *)v13 + 18) = *((_DWORD *)v14 + 18);
      uint64_t v23 = *(int *)(RangeVar + 40);
      uint64_t v34 = (char *)v14 + v23;
      uint64_t v36 = (char *)v13 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v36, v34, v10);
      uint64_t v24 = *(int *)(RangeVar + 44);
      uint64_t v25 = (void *)((char *)v13 + v24);
      int v26 = (void *)((char *)v14 + v24);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v28 = *(void *)(Alias - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        uint64_t v30 = v26[1];
        *uint64_t v25 = *v26;
        v25[1] = v30;
        v25[2] = v26[2];
        uint64_t v31 = *(int *)(Alias + 24);
        uint64_t v35 = (char *)v25 + v31;
        int v32 = (char *)v26 + v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37(v35, v32, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_TableLikeClause(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 48))(v6, 1, RangeVar);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(RangeVar + 40), v5);
    uint64_t v9 = v6 + *(int *)(RangeVar + 44);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 48))(v9, 1, Alias);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v9 + *(int *)(Alias + 24);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

_WORD *initializeWithCopy for PgQuery_RefreshMatViewStmt(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    uint64_t v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    uint64_t v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    uint64_t v35 = v10;
    uint64_t v20 = v13[8];
    v12[7] = v13[7];
    v12[8] = v20;
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    uint64_t v21 = *(int *)(RangeVar + 40);
    int v32 = (char *)v13 + v21;
    uint64_t v34 = (char *)v12 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(v34, v32, v9);
    uint64_t v22 = *(int *)(RangeVar + 44);
    uint64_t v23 = (void *)((char *)v12 + v22);
    uint64_t v24 = (void *)((char *)v13 + v22);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v26 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, Alias))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v28;
      v23[2] = v24[2];
      uint64_t v29 = *(int *)(Alias + 24);
      int v33 = (char *)v23 + v29;
      uint64_t v30 = (char *)v24 + v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35(v33, v30, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, Alias);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

unsigned char *assignWithCopy for PgQuery_RefreshMatViewStmt(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  uint64_t v10 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v49 + 24);
  ((void (*)(unsigned char *, unsigned char *))v10)(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (uint64_t)&a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16((uint64_t)v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *((void *)v13 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = *((void *)v13 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 32) = *((void *)v13 + 4);
      *(void *)(v12 + 40) = *((void *)v13 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = v13[48];
      *(void *)(v12 + 56) = *((void *)v13 + 7);
      *(void *)(v12 + 64) = *((void *)v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *((_DWORD *)v13 + 18);
      v10(v12 + *(int *)(RangeVar + 40), &v13[*(int *)(RangeVar + 40)], v50);
      uint64_t v30 = *(int *)(RangeVar + 44);
      uint64_t v31 = (void *)(v12 + v30);
      int v32 = &v13[v30];
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v34 = *(void *)(Alias - 8);
      uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
      int v36 = v35(v31, 1, Alias);
      int v37 = v35(v32, 1, Alias);
      if (v36)
      {
        if (!v37)
        {
          *uint64_t v31 = *v32;
          v31[1] = v32[1];
          v31[2] = v32[2];
          uint64_t v38 = *(int *)(Alias + 24);
          uint64_t v39 = (char *)v31 + v38;
          uint64_t v40 = (char *)v32 + v38;
          uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v41(v39, v40, v50);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v37)
        {
          *uint64_t v31 = *v32;
          v31[1] = v32[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v31[2] = v32[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v10((uint64_t)v31 + *(int *)(Alias + 24), (unsigned char *)v32 + *(int *)(Alias + 24), v50);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_Alias);
      }
      size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v28 = v31;
      uint64_t v29 = v32;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v28 = (void *)v12;
    uint64_t v29 = v13;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *((void *)v13 + 1);
  *(void *)(v12 + 16) = *((void *)v13 + 2);
  *(void *)(v12 + 24) = *((void *)v13 + 3);
  *(void *)(v12 + 32) = *((void *)v13 + 4);
  *(void *)(v12 + 40) = *((void *)v13 + 5);
  *(unsigned char *)(v12 + 48) = v13[48];
  *(void *)(v12 + 56) = *((void *)v13 + 7);
  *(void *)(v12 + 64) = *((void *)v13 + 8);
  *(_DWORD *)(v12 + 72) = *((_DWORD *)v13 + 18);
  uint64_t v18 = *(int *)(RangeVar + 40);
  int v46 = &v13[v18];
  uint64_t v47 = (char *)(v12 + v18);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = v47;
  uint64_t v48 = v19;
  v19(v20, v46, v50);
  uint64_t v21 = *(int *)(RangeVar + 44);
  uint64_t v22 = (void *)(v12 + v21);
  uint64_t v23 = &v13[v21];
  uint64_t v24 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *uint64_t v22 = *v23;
    v22[1] = v23[1];
    v22[2] = v23[2];
    uint64_t v42 = *(int *)(v24 + 24);
    uint64_t v43 = (char *)v22 + v42;
    uint64_t v44 = (char *)v23 + v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v43, v44, v50);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return a1;
}

_WORD *initializeWithTake for PgQuery_RefreshMatViewStmt(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    uint64_t v18 = *(int *)(RangeVar + 44);
    __dst = (void *)((char *)v12 + v18);
    uint64_t v19 = (void *)((char *)v13 + v18);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v21 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, Alias))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      __dst[2] = v19[2];
      v10((char *)__dst + *(int *)(Alias + 24), (char *)v19 + *(int *)(Alias + 24), v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

unsigned char *assignWithTake for PgQuery_RefreshMatViewStmt(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  uint64_t v10 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v42 + 40);
  ((void (*)(unsigned char *, unsigned char *))v10)(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (uint64_t)&a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16((uint64_t)v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v28 = *((void *)v13 + 1);
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = v28;
      swift_bridgeObjectRelease();
      uint64_t v29 = *((void *)v13 + 3);
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = *((void *)v13 + 5);
      *(void *)(v12 + 32) = *((void *)v13 + 4);
      *(void *)(v12 + 40) = v30;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = v13[48];
      uint64_t v31 = *((void *)v13 + 8);
      *(void *)(v12 + 56) = *((void *)v13 + 7);
      *(void *)(v12 + 64) = v31;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *((_DWORD *)v13 + 18);
      v10(v12 + *(int *)(RangeVar + 40), &v13[*(int *)(RangeVar + 40)], v44);
      uint64_t v32 = *(int *)(RangeVar + 44);
      uint64_t v33 = v12 + v32;
      uint64_t v34 = &v13[v32];
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v36 = *(void *)(Alias - 8);
      int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      int v38 = v37(v33, 1, Alias);
      int v39 = v37((uint64_t)v34, 1, Alias);
      if (v38)
      {
        if (!v39)
        {
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v33 + *(int *)(Alias + 24), &v34[*(int *)(Alias + 24)], v44);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v39)
        {
          uint64_t v41 = *((void *)v34 + 1);
          *(void *)uint64_t v33 = *(void *)v34;
          *(void *)(v33 + 8) = v41;
          swift_bridgeObjectRelease();
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          swift_bridgeObjectRelease();
          v10(v33 + *(int *)(Alias + 24), &v34[*(int *)(Alias + 24)], v44);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Alias);
      }
      size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v26 = (void *)v33;
      size_t v27 = v34;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v26 = (void *)v12;
    size_t v27 = v13;
LABEL_8:
    memcpy(v26, v27, v25);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  long long v18 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v18;
  *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
  *(unsigned char *)(v12 + 48) = v13[48];
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 56);
  *(_DWORD *)(v12 + 72) = *((_DWORD *)v13 + 18);
  uint64_t v43 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v42 + 32);
  v43(v12 + *(int *)(RangeVar + 40), &v13[*(int *)(RangeVar + 40)], v44);
  uint64_t v19 = *(int *)(RangeVar + 44);
  uint64_t v20 = (void *)(v12 + v19);
  uint64_t v21 = &v13[v19];
  uint64_t v22 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    v20[2] = v21[2];
    v43((uint64_t)v20 + *(int *)(v22 + 24), (unsigned char *)v21 + *(int *)(v22 + 24), v44);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_RefreshMatViewStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E96C2E4);
}

uint64_t sub_18E96C2E4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = &a1[*(int *)(a3 + 24)];
      uint64_t v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v11 + 48);
      return v14(v13, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      uint64_t v16 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
      uint64_t v17 = v15;
      long long v18 = &a1[*(int *)(a3 + 28)];
      return v16(v18, a2, v17);
    }
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_RefreshMatViewStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E96C428);
}

unsigned char *sub_18E96C428(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = &v5[*(int *)(a4 + 24)];
      uint64_t v12 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (unsigned char *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      uint64_t v14 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = &v5[*(int *)(a4 + 28)];
      return (unsigned char *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for PgQuery_RefreshMatViewStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterEventTrigStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3407Tm_2);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterEventTrigStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3408Tm_2);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateSubscriptionStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    uint64_t v8 = *(int *)(a3 + 32);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreateSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for PgQuery_CreateSubscriptionStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  return a1;
}

void *assignWithCopy for PgQuery_CreateSubscriptionStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_CreateSubscriptionStmt(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for PgQuery_CreateSubscriptionStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateEventTrigStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3510Tm_2);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateEventTrigStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3511Tm_2);
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterExtensionContentsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_42);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterExtensionContentsStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_42);
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterExtensionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3407Tm_3);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterExtensionStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3408Tm_3);
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3317Tm_3);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3318Tm_3);
}

uint64_t type metadata completion function for PgQuery_CreateExtensionStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

void *initializeBufferWithCopyOfBuffer for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = a2[6];
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v8 = a2[9];
    uint64_t v9 = *(int *)(a3 + 40);
    uint64_t v15 = a1 + v9;
    uint64_t v10 = (uint64_t)a2 + v9;
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v15, v10, v11);
  }
  return v3;
}

uint64_t destroy for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v8;
  uint64_t v9 = a2 + v8;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v13, v9, v10);
  return a1;
}

uint64_t assignWithCopy for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3693Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3694Tm);
}

uint64_t type metadata completion function for PgQuery_ImportForeignSchemaStmt()
{
  return type metadata completion function for PgQuery_CreateForeignServerStmt();
}

uint64_t type metadata completion function for PgQuery_CreateForeignServerStmt()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

{
  return type metadata completion function for PgQuery_CreateForeignServerStmt();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateForeignTableStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
    uint64_t v17 = *(void *)(Stmt - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, Stmt))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      *(void *)&v14[*(int *)(Stmt + 20)] = *(void *)&v15[*(int *)(Stmt + 20)];
      uint64_t v20 = *(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56);
      swift_retain();
      v20(v14, 0, 1, Stmt);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateForeignTableStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Stmt - 8) + 48))(v7, 1, Stmt);
  if (!result)
  {
    v6(v7, v5);
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for PgQuery_CreateForeignTableStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  uint64_t v16 = *(void *)(Stmt - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, Stmt))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    *(void *)&v13[*(int *)(Stmt + 20)] = *(void *)&v14[*(int *)(Stmt + 20)];
    uint64_t v18 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
    swift_retain();
    v18(v13, 0, 1, Stmt);
  }
  return a1;
}

void *assignWithCopy for PgQuery_CreateForeignTableStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v22 = *(void *)(v9 - 8);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v22 + 24);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  uint64_t v15 = *(void *)(Stmt - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  uint64_t v23 = (uint64_t)v12;
  LODWORD(v12) = v16(v12, 1, Stmt);
  int v17 = v16(v13, 1, Stmt);
  if (v12)
  {
    if (!v17)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))(v23, v13, v9);
      *(void *)(v23 + *(int *)(Stmt + 20)) = *(void *)&v13[*(int *)(Stmt + 20)];
      uint64_t v20 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56);
      swift_retain();
      v20(v23, 0, 1, Stmt);
      return a1;
    }
    size_t v18 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?)
                                - 8)
                    + 64);
    uint64_t v19 = (void *)v23;
  }
  else
  {
    if (!v17)
    {
      v10((char *)v23, v13, v9);
      *(void *)(v23 + *(int *)(Stmt + 20)) = *(void *)&v13[*(int *)(Stmt + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_CreateStmt);
    size_t v18 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?)
                                - 8)
                    + 64);
    uint64_t v19 = (void *)v23;
  }
  memcpy(v19, v13, v18);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateForeignTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  uint64_t v15 = *(void *)(Stmt - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, Stmt))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    *(void *)&v12[*(int *)(Stmt + 20)] = *(void *)&v13[*(int *)(Stmt + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, Stmt);
  }
  return a1;
}

void *assignWithTake for PgQuery_CreateForeignTableStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v22 = *(void *)(v10 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v22 + 40);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  uint64_t v16 = *(void *)(Stmt - 8);
  int v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v23 = (uint64_t)v13;
  LODWORD(v13) = v17(v13, 1, Stmt);
  int v18 = v17(v14, 1, Stmt);
  if (v13)
  {
    if (!v18)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v23, v14, v10);
      *(void *)(v23 + *(int *)(Stmt + 20)) = *(void *)&v14[*(int *)(Stmt + 20)];
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v23, 0, 1, Stmt);
      return a1;
    }
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?)
                                - 8)
                    + 64);
    uint64_t v20 = (void *)v23;
  }
  else
  {
    if (!v18)
    {
      v11((char *)v23, v14, v10);
      *(void *)(v23 + *(int *)(Stmt + 20)) = *(void *)&v14[*(int *)(Stmt + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_CreateStmt);
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?)
                                - 8)
                    + 64);
    uint64_t v20 = (void *)v23;
  }
  memcpy(v20, v14, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateForeignTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E96DCB4);
}

uint64_t sub_18E96DCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3513Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateForeignTableStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E96DCD4);
}

uint64_t sub_18E96DCD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3697Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
}

void type metadata completion function for PgQuery_CreateForeignTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for PgQuery_SecLabelStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_43);
}

uint64_t storeEnumTagSinglePayload for PgQuery_SecLabelStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_43);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v6 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = a2[6];
    uint64_t v7 = *(int *)(a3 + 36);
    uint64_t v8 = (uint64_t)a2 + v7;
    uint64_t v9 = a1 + v7;
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a2 + v6;
  uint64_t v8 = a1 + v6;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E96E234);
}

uint64_t __swift_get_extra_inhabitant_index_3651Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E96E2FC);
}

uint64_t __swift_store_extra_inhabitant_index_3652Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_AlterTableMoveAllStmt()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_PartitionSpec(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3317Tm_4);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3318Tm_4);
}

uint64_t type metadata completion function for PgQuery_AlterTableSpaceOptionsStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

void *initializeBufferWithCopyOfBuffer for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    uint64_t v17 = *(void *)(RoleSpec - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
      uint64_t v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      uint64_t v21 = *(int *)(RoleSpec + 28);
      uint64_t v22 = (char *)v14 + v21;
      uint64_t v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12((uint64_t)v22, (uint64_t)v23, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(RoleSpec + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v16 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((unsigned char *)v13 + 8) = *((unsigned char *)v14 + 8);
    uint64_t v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    uint64_t v19 = *(int *)(RoleSpec + 28);
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11((uint64_t)v20, (uint64_t)v21, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v26 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RoleSpec);
  int v17 = v16((uint64_t)v13, 1, RoleSpec);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v25 = *v13;
      *(unsigned char *)(v12 + 8) = *((unsigned char *)v13 + 8);
      *(void *)uint64_t v12 = v25;
      *(void *)(v12 + 16) = v13[2];
      *(void *)(v12 + 24) = v13[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v27);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  uint64_t v18 = *v13;
  *(unsigned char *)(v12 + 8) = *((unsigned char *)v13 + 8);
  *(void *)uint64_t v12 = v18;
  *(void *)(v12 + 16) = v13[2];
  *(void *)(v12 + 24) = v13[3];
  *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
  uint64_t v19 = *(int *)(RoleSpec + 28);
  uint64_t v20 = v12 + v19;
  uint64_t v21 = (uint64_t)v13 + v19;
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v27);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v22 = *(void *)(v10 - 8);
  uint64_t v23 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v22 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v16 = *(void *)(RoleSpec - 8);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, RoleSpec);
  int v18 = v17(v14, 1, RoleSpec);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      uint64_t v21 = *(void *)(v14 + 24);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = v21;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v23);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v23);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E96F40C);
}

uint64_t sub_18E96F40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3513Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E96F42C);
}

uint64_t sub_18E96F42C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3697Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

void type metadata completion function for PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterUserMappingStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    uint64_t v17 = *(void *)(RoleSpec - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
      uint64_t v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      uint64_t v21 = *(int *)(RoleSpec + 28);
      uint64_t v22 = (char *)v14 + v21;
      uint64_t v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12(v22, v23, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_AlterUserMappingStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(RoleSpec + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for PgQuery_AlterUserMappingStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v16 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((unsigned char *)v13 + 8) = *((unsigned char *)v14 + 8);
    uint64_t v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    uint64_t v19 = *(int *)(RoleSpec + 28);
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11(v20, v21, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  return a1;
}

void *assignWithCopy for PgQuery_AlterUserMappingStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v26 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RoleSpec);
  int v17 = v16((uint64_t)v13, 1, RoleSpec);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v25 = *(void *)v13;
      *(unsigned char *)(v12 + 8) = v13[8];
      *(void *)uint64_t v12 = v25;
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = *((void *)v13 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(RoleSpec + 28), &v13[*(int *)(RoleSpec + 28)], v27);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  uint64_t v18 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v13[8];
  *(void *)uint64_t v12 = v18;
  *(void *)(v12 + 16) = *((void *)v13 + 2);
  *(void *)(v12 + 24) = *((void *)v13 + 3);
  *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
  uint64_t v19 = *(int *)(RoleSpec + 28);
  uint64_t v20 = v12 + v19;
  uint64_t v21 = &v13[v19];
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v27);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

void *assignWithTake for PgQuery_AlterUserMappingStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v22 = *(void *)(v10 - 8);
  uint64_t v23 = v10;
  uint64_t v11 = *(void (**)(char *, char *))(v22 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (uint64_t)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v16 = *(void *)(RoleSpec - 8);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, RoleSpec);
  int v18 = v17((uint64_t)v14, 1, RoleSpec);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = v14[8];
      uint64_t v21 = *((void *)v14 + 3);
      *(void *)(v13 + 16) = *((void *)v14 + 2);
      *(void *)(v13 + 24) = v21;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *((_DWORD *)v14 + 8);
      ((void (*)(uint64_t, char *, uint64_t))v11)(v13 + *(int *)(RoleSpec + 28), &v14[*(int *)(RoleSpec + 28)], v23);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = v14[8];
  *(_OWORD *)(v13 + 16) = *((_OWORD *)v14 + 1);
  *(_DWORD *)(v13 + 32) = *((_DWORD *)v14 + 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v13 + *(int *)(RoleSpec + 28), &v14[*(int *)(RoleSpec + 28)], v23);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E96FFD4);
}

uint64_t sub_18E96FFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3513Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E96FFF4);
}

uint64_t sub_18E96FFF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3697Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

void type metadata completion function for PgQuery_AlterUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *initializeBufferWithCopyOfBuffer for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    uint64_t v17 = *(void *)(RoleSpec - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
      uint64_t v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      uint64_t v21 = *(int *)(RoleSpec + 28);
      uint64_t v22 = (char *)v14 + v21;
      uint64_t v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12((uint64_t)v22, (uint64_t)v23, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(RoleSpec + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v16 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((unsigned char *)v13 + 8) = *((unsigned char *)v14 + 8);
    uint64_t v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    uint64_t v19 = *(int *)(RoleSpec + 28);
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11((uint64_t)v20, (uint64_t)v21, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v26 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RoleSpec);
  int v17 = v16((uint64_t)v13, 1, RoleSpec);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v25 = *v13;
      *(unsigned char *)(v12 + 8) = *((unsigned char *)v13 + 8);
      *(void *)uint64_t v12 = v25;
      *(void *)(v12 + 16) = v13[2];
      *(void *)(v12 + 24) = v13[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v27);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  uint64_t v18 = *v13;
  *(unsigned char *)(v12 + 8) = *((unsigned char *)v13 + 8);
  *(void *)uint64_t v12 = v18;
  *(void *)(v12 + 16) = v13[2];
  *(void *)(v12 + 24) = v13[3];
  *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
  uint64_t v19 = *(int *)(RoleSpec + 28);
  uint64_t v20 = v12 + v19;
  uint64_t v21 = (uint64_t)v13 + v19;
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v27);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v22 = *(void *)(v10 - 8);
  uint64_t v23 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v22 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v16 = *(void *)(RoleSpec - 8);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, RoleSpec);
  int v18 = v17(v14, 1, RoleSpec);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      uint64_t v21 = *(void *)(v14 + 24);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = v21;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v23);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v23);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3714Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3715Tm);
}

void type metadata completion function for PgQuery_CreateUserMappingStmt()
{
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v7 = *(int *)(a3 + 32);
    uint64_t v8 = (uint64_t)a2 + v7;
    uint64_t v9 = a1 + v7;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a2 + v6;
  uint64_t v8 = a1 + v6;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E971094);
}

uint64_t __swift_get_extra_inhabitant_index_3510Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E97115C);
}

uint64_t __swift_store_extra_inhabitant_index_3511Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_AlterForeignServerStmt()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

void *initializeBufferWithCopyOfBuffer for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v7;
    uint64_t v8 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v8;
    *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
    uint64_t v9 = *(int *)(a3 + 40);
    uint64_t v15 = a1 + v9;
    uint64_t v10 = (uint64_t)a2 + v9;
    *(void *)(a1 + 72) = a2[9];
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v15, v10, v11);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v8;
  uint64_t v9 = a2 + v8;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v13, v9, v10);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a2 + v6;
  uint64_t v8 = a1 + v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, v7, v9);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E971794);
}

uint64_t __swift_get_extra_inhabitant_index_3693Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E97185C);
}

uint64_t __swift_store_extra_inhabitant_index_3694Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterFdwStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3317Tm_5);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterFdwStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3318Tm_5);
}

uint64_t type metadata completion function for PgQuery_AlterFdwStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterFdwStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_AlterFdwStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for PgQuery_AlterFdwStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *assignWithCopy for PgQuery_AlterFdwStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_AlterFdwStmt(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for PgQuery_AlterFdwStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateFdwStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3317Tm_6);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateFdwStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3318Tm_6);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v6 = *(int *)(a3 + 44);
    uint64_t v7 = (uint64_t)a2 + v6;
    uint64_t v8 = a1 + v6;
    *(_WORD *)(a1 + 41) = *(_WORD *)((char *)a2 + 41);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t initializeWithCopy for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
  *(unsigned char *)(a1 + 42) = *((unsigned char *)a2 + 42);
  uint64_t v7 = *(int *)(a3 + 44);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3729Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3730Tm);
}

uint64_t type metadata completion function for PgQuery_AlterTSConfigurationStmt()
{
  return type metadata completion function for PgQuery_AlterTSConfigurationStmt();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTSDictionaryStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3609Tm_1);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTSDictionaryStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3610Tm_1);
}

uint64_t type metadata completion function for PgQuery_AlterTSDictionaryStmt()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    uint64_t v8 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v8;
    uint64_t v9 = *(int *)(a3 + 40);
    uint64_t v10 = (uint64_t)a2 + v9;
    uint64_t v11 = a1 + v9;
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v11, v10, v12);
  }
  return v5;
}

uint64_t destroy for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = a2 + v7;
  uint64_t v9 = a1 + v7;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E972804);
}

uint64_t __swift_get_extra_inhabitant_index_3639Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E9728CC);
}

void *__swift_store_extra_inhabitant_index_3640Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 40);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_AlterEnumStmt()
{
  return type metadata completion function for PgQuery_CreateStatsStmt();
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateRangeStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3609Tm_2);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateRangeStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3610Tm_2);
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateEnumStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3609Tm_3);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateEnumStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3610Tm_3);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CompositeTypeStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    uint64_t v17 = *(void *)(RangeVar - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v19;
      uint64_t v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      uint64_t v21 = v15[5];
      v14[4] = v15[4];
      v14[5] = v21;
      *((unsigned char *)v14 + 48) = *((unsigned char *)v15 + 48);
      int v37 = v12;
      uint64_t v22 = v15[8];
      v14[7] = v15[7];
      v14[8] = v22;
      *((_DWORD *)v14 + 18) = *((_DWORD *)v15 + 18);
      uint64_t v23 = *(int *)(RangeVar + 40);
      uint64_t v34 = (char *)v15 + v23;
      uint64_t v36 = (char *)v14 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v36, v34, v11);
      uint64_t v24 = *(int *)(RangeVar + 44);
      uint64_t v25 = (void *)((char *)v14 + v24);
      uint64_t v26 = (void *)((char *)v15 + v24);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v28 = *(void *)(Alias - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        uint64_t v30 = v26[1];
        *uint64_t v25 = *v26;
        v25[1] = v30;
        v25[2] = v26[2];
        uint64_t v31 = *(int *)(Alias + 24);
        uint64_t v35 = (char *)v25 + v31;
        uint64_t v32 = (char *)v26 + v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37(v35, v32, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RangeVar);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_CompositeTypeStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 48))(v6, 1, RangeVar);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(RangeVar + 40), v5);
    uint64_t v9 = v6 + *(int *)(RangeVar + 44);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 48))(v9, 1, Alias);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v9 + *(int *)(Alias + 24);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

void *initializeWithCopy for PgQuery_CompositeTypeStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    uint64_t v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    uint64_t v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    uint64_t v35 = v10;
    uint64_t v20 = v13[8];
    v12[7] = v13[7];
    v12[8] = v20;
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    uint64_t v21 = *(int *)(RangeVar + 40);
    uint64_t v32 = (char *)v13 + v21;
    uint64_t v34 = (char *)v12 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(v34, v32, v9);
    uint64_t v22 = *(int *)(RangeVar + 44);
    uint64_t v23 = (void *)((char *)v12 + v22);
    uint64_t v24 = (void *)((char *)v13 + v22);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v26 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, Alias))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v28;
      v23[2] = v24[2];
      uint64_t v29 = *(int *)(Alias + 24);
      uint64_t v33 = (char *)v23 + v29;
      uint64_t v30 = (char *)v24 + v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35(v33, v30, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, Alias);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

void *assignWithCopy for PgQuery_CompositeTypeStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v49 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16((uint64_t)v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *((void *)v13 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = *((void *)v13 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 32) = *((void *)v13 + 4);
      *(void *)(v12 + 40) = *((void *)v13 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = v13[48];
      *(void *)(v12 + 56) = *((void *)v13 + 7);
      *(void *)(v12 + 64) = *((void *)v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *((_DWORD *)v13 + 18);
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(RangeVar + 40), &v13[*(int *)(RangeVar + 40)], v50);
      uint64_t v30 = *(int *)(RangeVar + 44);
      uint64_t v31 = (char *)(v12 + v30);
      uint64_t v32 = &v13[v30];
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v34 = *(void *)(Alias - 8);
      uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
      int v36 = v35(v31, 1, Alias);
      int v37 = v35(v32, 1, Alias);
      if (v36)
      {
        if (!v37)
        {
          *(void *)uint64_t v31 = *(void *)v32;
          *((void *)v31 + 1) = *((void *)v32 + 1);
          *((void *)v31 + 2) = *((void *)v32 + 2);
          uint64_t v38 = *(int *)(Alias + 24);
          int v39 = &v31[v38];
          uint64_t v40 = &v32[v38];
          uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v41(v39, v40, v50);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v37)
        {
          *(void *)uint64_t v31 = *(void *)v32;
          *((void *)v31 + 1) = *((void *)v32 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *((void *)v31 + 2) = *((void *)v32 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          ((void (*)(char *, char *, uint64_t))v10)(&v31[*(int *)(Alias + 24)], &v32[*(int *)(Alias + 24)], v50);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_Alias);
      }
      size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v28 = v31;
      uint64_t v29 = v32;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v28 = (void *)v12;
    uint64_t v29 = v13;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *((void *)v13 + 1);
  *(void *)(v12 + 16) = *((void *)v13 + 2);
  *(void *)(v12 + 24) = *((void *)v13 + 3);
  *(void *)(v12 + 32) = *((void *)v13 + 4);
  *(void *)(v12 + 40) = *((void *)v13 + 5);
  *(unsigned char *)(v12 + 48) = v13[48];
  *(void *)(v12 + 56) = *((void *)v13 + 7);
  *(void *)(v12 + 64) = *((void *)v13 + 8);
  *(_DWORD *)(v12 + 72) = *((_DWORD *)v13 + 18);
  uint64_t v18 = *(int *)(RangeVar + 40);
  int v46 = &v13[v18];
  uint64_t v47 = (char *)(v12 + v18);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = v47;
  uint64_t v48 = v19;
  v19(v20, v46, v50);
  uint64_t v21 = *(int *)(RangeVar + 44);
  uint64_t v22 = (void *)(v12 + v21);
  uint64_t v23 = &v13[v21];
  uint64_t v24 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *uint64_t v22 = *(void *)v23;
    v22[1] = *((void *)v23 + 1);
    v22[2] = *((void *)v23 + 2);
    uint64_t v42 = *(int *)(v24 + 24);
    uint64_t v43 = (char *)v22 + v42;
    uint64_t v44 = &v23[v42];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v43, v44, v50);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return a1;
}

void *initializeWithTake for PgQuery_CompositeTypeStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    uint64_t v18 = *(int *)(RangeVar + 44);
    __dst = (void *)((char *)v12 + v18);
    uint64_t v19 = (void *)((char *)v13 + v18);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v21 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, Alias))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      __dst[2] = v19[2];
      v10((char *)__dst + *(int *)(Alias + 24), (char *)v19 + *(int *)(Alias + 24), v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

void *assignWithTake for PgQuery_CompositeTypeStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v42 + 40);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16((uint64_t)v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v28 = *((void *)v13 + 1);
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = v28;
      swift_bridgeObjectRelease();
      uint64_t v29 = *((void *)v13 + 3);
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = *((void *)v13 + 5);
      *(void *)(v12 + 32) = *((void *)v13 + 4);
      *(void *)(v12 + 40) = v30;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = v13[48];
      uint64_t v31 = *((void *)v13 + 8);
      *(void *)(v12 + 56) = *((void *)v13 + 7);
      *(void *)(v12 + 64) = v31;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *((_DWORD *)v13 + 18);
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(RangeVar + 40), &v13[*(int *)(RangeVar + 40)], v44);
      uint64_t v32 = *(int *)(RangeVar + 44);
      uint64_t v33 = v12 + v32;
      uint64_t v34 = &v13[v32];
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v36 = *(void *)(Alias - 8);
      int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      int v38 = v37(v33, 1, Alias);
      int v39 = v37((uint64_t)v34, 1, Alias);
      if (v38)
      {
        if (!v39)
        {
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v33 + *(int *)(Alias + 24), &v34[*(int *)(Alias + 24)], v44);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v39)
        {
          uint64_t v41 = *((void *)v34 + 1);
          *(void *)uint64_t v33 = *(void *)v34;
          *(void *)(v33 + 8) = v41;
          swift_bridgeObjectRelease();
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, char *, uint64_t))v10)(v33 + *(int *)(Alias + 24), &v34[*(int *)(Alias + 24)], v44);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Alias);
      }
      size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v26 = (void *)v33;
      size_t v27 = v34;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v26 = (void *)v12;
    size_t v27 = v13;
LABEL_8:
    memcpy(v26, v27, v25);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  long long v18 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v18;
  *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
  *(unsigned char *)(v12 + 48) = v13[48];
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 56);
  *(_DWORD *)(v12 + 72) = *((_DWORD *)v13 + 18);
  uint64_t v43 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 32);
  v43(v12 + *(int *)(RangeVar + 40), &v13[*(int *)(RangeVar + 40)], v44);
  uint64_t v19 = *(int *)(RangeVar + 44);
  uint64_t v20 = (void *)(v12 + v19);
  uint64_t v21 = &v13[v19];
  uint64_t v22 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    v20[2] = *((void *)v21 + 2);
    v43((uint64_t)v20 + *(int *)(v22 + 24), &v21[*(int *)(v22 + 24)], v44);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CompositeTypeStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E973EDC);
}

uint64_t sub_18E973EDC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3744Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RangeVar?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CompositeTypeStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E973EFC);
}

void *sub_18E973EFC(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3745Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_RangeVar?);
}

void type metadata completion function for PgQuery_CompositeTypeStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_ReassignOwnedStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    uint64_t v17 = *(void *)(RoleSpec - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
      uint64_t v19 = v15[3];
      v14[2] = v15[2];
      v14[3] = v19;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      uint64_t v20 = *(int *)(RoleSpec + 28);
      uint64_t v21 = (char *)v14 + v20;
      uint64_t v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      v12(v21, v22, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_ReassignOwnedStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(RoleSpec + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for PgQuery_ReassignOwnedStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    uint64_t v17 = v13[3];
    v12[2] = v13[2];
    v12[3] = v17;
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    uint64_t v18 = *(int *)(RoleSpec + 28);
    uint64_t v19 = (char *)v12 + v18;
    uint64_t v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10(v19, v20, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

void *assignWithCopy for PgQuery_ReassignOwnedStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v26 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RoleSpec);
  int v17 = v16((uint64_t)v13, 1, RoleSpec);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v25 = *(void *)v13;
      *(unsigned char *)(v12 + 8) = v13[8];
      *(void *)uint64_t v12 = v25;
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = *((void *)v13 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(RoleSpec + 28), &v13[*(int *)(RoleSpec + 28)], v27);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  uint64_t v18 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v13[8];
  *(void *)uint64_t v12 = v18;
  *(void *)(v12 + 16) = *((void *)v13 + 2);
  *(void *)(v12 + 24) = *((void *)v13 + 3);
  *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
  uint64_t v19 = *(int *)(RoleSpec + 28);
  uint64_t v20 = v12 + v19;
  uint64_t v21 = &v13[v19];
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v27);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  return a1;
}

void *initializeWithTake for PgQuery_ReassignOwnedStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

void *assignWithTake for PgQuery_ReassignOwnedStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void *)(v9 - 8);
  uint64_t v22 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v21 + 40);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RoleSpec);
  int v17 = v16((uint64_t)v13, 1, RoleSpec);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(unsigned char *)(v12 + 8) = v13[8];
      uint64_t v20 = *((void *)v13 + 3);
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = v20;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(RoleSpec + 28), &v13[*(int *)(RoleSpec + 28)], v22);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v13[8];
  *(_OWORD *)(v12 + 16) = *((_OWORD *)v13 + 1);
  *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v12 + *(int *)(RoleSpec + 28), &v13[*(int *)(RoleSpec + 28)], v22);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ReassignOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E974A3C);
}

uint64_t sub_18E974A3C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3744Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ReassignOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E974A5C);
}

void *sub_18E974A5C(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3745Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

void type metadata completion function for PgQuery_ReassignOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_DropOwnedStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t initializeWithCopy for PgQuery_DropOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_DropOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DropOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_DropOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3609Tm_4);
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropOwnedStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3610Tm_4);
}

uint64_t type metadata completion function for PgQuery_DropOwnedStmt()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterTSDictionaryStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_AlterTSDictionaryStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for PgQuery_AlterTSDictionaryStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for PgQuery_AlterTSDictionaryStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_AlterTSDictionaryStmt(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for PgQuery_AlterTSDictionaryStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTypeStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3609Tm_5);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTypeStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3610Tm_5);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterOperatorStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
    uint64_t v17 = *(void *)(ObjectWithArgs - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, ObjectWithArgs))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v19;
      *((unsigned char *)v14 + 16) = *((unsigned char *)v15 + 16);
      uint64_t v20 = *(int *)(ObjectWithArgs + 28);
      uint64_t v21 = (char *)v14 + v20;
      uint64_t v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v21, v22, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, ObjectWithArgs);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_AlterOperatorStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ObjectWithArgs - 8) + 48))(v6, 1, ObjectWithArgs);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(ObjectWithArgs + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for PgQuery_AlterOperatorStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v15 = *(void *)(ObjectWithArgs - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, ObjectWithArgs))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    *((unsigned char *)v12 + 16) = *((unsigned char *)v13 + 16);
    uint64_t v18 = *(int *)(ObjectWithArgs + 28);
    uint64_t v19 = (char *)v12 + v18;
    uint64_t v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v19, v20, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, ObjectWithArgs);
  }
  return a1;
}

void *assignWithCopy for PgQuery_AlterOperatorStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *))(v10 + 24);
  uint64_t v25 = v9;
  v11(v7, v8);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v26 = a1;
  uint64_t v13 = (uint64_t)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v16 = *(void *)(ObjectWithArgs - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, ObjectWithArgs);
  int v18 = v17((uint64_t)v14, 1, ObjectWithArgs);
  if (!v8)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 8) = *((void *)v14 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v13 + 16) = v14[16];
      ((void (*)(uint64_t, char *, uint64_t))v11)(v13 + *(int *)(ObjectWithArgs + 28), &v14[*(int *)(ObjectWithArgs + 28)], v25);
      return v26;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v13, v14, *(void *)(*(void *)(v23 - 8) + 64));
    return v26;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = *((void *)v14 + 1);
  *(unsigned char *)(v13 + 16) = v14[16];
  uint64_t v19 = *(int *)(ObjectWithArgs + 28);
  uint64_t v20 = v13 + v19;
  uint64_t v21 = &v14[v19];
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v25);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, ObjectWithArgs);
  return v26;
}

void *initializeWithTake for PgQuery_AlterOperatorStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v15 = *(void *)(ObjectWithArgs - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, ObjectWithArgs))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[16] = v13[16];
    v10(&v12[*(int *)(ObjectWithArgs + 28)], &v13[*(int *)(ObjectWithArgs + 28)], v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, ObjectWithArgs);
  }
  return a1;
}

void *assignWithTake for PgQuery_AlterOperatorStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *))(v10 + 40);
  uint64_t v21 = v9;
  v11(v7, v8);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v22 = a1;
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v16 = *(void *)(ObjectWithArgs - 8);
  uint64_t v17 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, ObjectWithArgs);
  int v18 = v17(v14, 1, ObjectWithArgs);
  if (!v8)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      swift_bridgeObjectRelease();
      *((void *)v13 + 1) = *((void *)v14 + 1);
      swift_bridgeObjectRelease();
      v13[16] = v14[16];
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v11)(&v13[*(int *)(ObjectWithArgs + 28)], &v14[*(int *)(ObjectWithArgs + 28)], v21);
      return v22;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    return v22;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  v13[16] = v14[16];
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(&v13[*(int *)(ObjectWithArgs + 28)], &v14[*(int *)(ObjectWithArgs + 28)], v21);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, ObjectWithArgs);
  return v22;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterOperatorStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E975D20);
}

uint64_t sub_18E975D20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3744Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterOperatorStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E975D40);
}

void *sub_18E975D40(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3745Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
}

void type metadata completion function for PgQuery_AlterOperatorStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterOwnerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_44);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterOwnerStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_44);
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterObjectSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_45);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterObjectSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_45);
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterObjectDependsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_46);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterObjectDependsStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_46);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t initializeWithCopy for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3407Tm_4);
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3408Tm_4);
}

uint64_t type metadata completion function for PgQuery_DropTableSpaceStmt()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateTableSpaceStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 28);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v25 = (char *)a2 + v9;
    a1[4] = a2[4];
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v25, v11);
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    uint64_t v17 = *(void *)(RoleSpec - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
      uint64_t v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      uint64_t v21 = *(int *)(RoleSpec + 28);
      uint64_t v22 = (char *)v14 + v21;
      uint64_t v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12(v22, v23, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateTableSpaceStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(RoleSpec + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for PgQuery_CreateTableSpaceStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v23 = (char *)a2 + v8;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v23, v10);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v16 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((unsigned char *)v13 + 8) = *((unsigned char *)v14 + 8);
    uint64_t v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    uint64_t v19 = *(int *)(RoleSpec + 28);
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11(v20, v21, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  return a1;
}

void *assignWithCopy for PgQuery_CreateTableSpaceStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v26 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RoleSpec);
  int v17 = v16((uint64_t)v13, 1, RoleSpec);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v25 = *(void *)v13;
      *(unsigned char *)(v12 + 8) = v13[8];
      *(void *)uint64_t v12 = v25;
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = *((void *)v13 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(RoleSpec + 28), &v13[*(int *)(RoleSpec + 28)], v27);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  uint64_t v18 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v13[8];
  *(void *)uint64_t v12 = v18;
  *(void *)(v12 + 16) = *((void *)v13 + 2);
  *(void *)(v12 + 24) = *((void *)v13 + 3);
  *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
  uint64_t v19 = *(int *)(RoleSpec + 28);
  uint64_t v20 = v12 + v19;
  uint64_t v21 = &v13[v19];
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v27);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v16 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((unsigned char *)v13 + 8) = *((unsigned char *)v14 + 8);
    *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    v11((char *)v13 + *(int *)(RoleSpec + 28), (char *)v14 + *(int *)(RoleSpec + 28), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  return a1;
}

void *assignWithTake for PgQuery_CreateTableSpaceStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v23 = *(void *)(v11 - 8);
  uint64_t v24 = v11;
  uint64_t v12 = *(void (**)(char *, char *))(v23 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (uint64_t)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v17 = *(void *)(RoleSpec - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, RoleSpec);
  int v19 = v18((uint64_t)v15, 1, RoleSpec);
  if (!v10)
  {
    if (!v19)
    {
      *(void *)uint64_t v14 = *(void *)v15;
      *(unsigned char *)(v14 + 8) = v15[8];
      uint64_t v22 = *((void *)v15 + 3);
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      *(void *)(v14 + 24) = v22;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v14 + 32) = *((_DWORD *)v15 + 8);
      ((void (*)(uint64_t, char *, uint64_t))v12)(v14 + *(int *)(RoleSpec + 28), &v15[*(int *)(RoleSpec + 28)], v24);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = v15[8];
  *(_OWORD *)(v14 + 16) = *((_OWORD *)v15 + 1);
  *(_DWORD *)(v14 + 32) = *((_DWORD *)v15 + 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v14 + *(int *)(RoleSpec + 28), &v15[*(int *)(RoleSpec + 28)], v24);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3714Tm_0);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateTableSpaceStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3715Tm_0);
}

void type metadata completion function for PgQuery_CreateTableSpaceStmt()
{
}

uint64_t getEnumTagSinglePayload for PgQuery_DeclareCursorStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_47);
}

uint64_t storeEnumTagSinglePayload for PgQuery_DeclareCursorStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_47);
}

uint64_t getEnumTagSinglePayload for PgQuery_DeallocateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3495Tm_2);
}

uint64_t storeEnumTagSinglePayload for PgQuery_DeallocateStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3496Tm_2);
}

uint64_t getEnumTagSinglePayload for PgQuery_ExecuteStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3407Tm_5);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ExecuteStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3408Tm_5);
}

uint64_t getEnumTagSinglePayload for PgQuery_PrepareStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_48);
}

uint64_t storeEnumTagSinglePayload for PgQuery_PrepareStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_48);
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v6;
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(void *)(a1 + 32) = a2[4];
    uint64_t v7 = *(int *)(a3 + 32);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E977300);
}

uint64_t sub_18E977300(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E9773C4);
}

void *sub_18E9773C4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_AlterOpFamilyStmt()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateOpFamilyStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for PgQuery_CreateOpFamilyStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for PgQuery_CreateOpFamilyStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for PgQuery_CreateOpFamilyStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for PgQuery_CreateOpFamilyStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3609Tm_6);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateOpFamilyStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3610Tm_6);
}

uint64_t type metadata completion function for PgQuery_CreateOpFamilyStmt()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v9;
    uint64_t v10 = *(int *)(a3 + 36);
    uint64_t v23 = (uint64_t)a2 + v10;
    uint64_t v24 = a1 + v10;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v24, v23, v11);
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v14 = (void *)(v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
    uint64_t v17 = *(void *)(TypeName - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, TypeName))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((_DWORD *)v14 + 2) = *((_DWORD *)v15 + 2);
      *((_WORD *)v14 + 6) = *((_WORD *)v15 + 6);
      v14[2] = v15[2];
      *((_DWORD *)v14 + 6) = *((_DWORD *)v15 + 6);
      v14[4] = v15[4];
      *((_DWORD *)v14 + 10) = *((_DWORD *)v15 + 10);
      uint64_t v19 = *(int *)(TypeName + 48);
      uint64_t v20 = (char *)v14 + v19;
      uint64_t v21 = (char *)v15 + v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12((uint64_t)v20, (uint64_t)v21, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, TypeName);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 48))(v6, 1, TypeName);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(TypeName + 48);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v22 = a2 + v9;
  uint64_t v23 = a1 + v9;
  *(void *)(a1 + 32) = v8;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v23, v22, v10);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v16 = *(void *)(TypeName - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, TypeName))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
    *((_WORD *)v13 + 6) = *((_WORD *)v14 + 6);
    v13[2] = v14[2];
    *((_DWORD *)v13 + 6) = *((_DWORD *)v14 + 6);
    v13[4] = v14[4];
    *((_DWORD *)v13 + 10) = *((_DWORD *)v14 + 10);
    uint64_t v18 = *(int *)(TypeName + 48);
    uint64_t v19 = (char *)v13 + v18;
    uint64_t v20 = (char *)v14 + v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11((uint64_t)v19, (uint64_t)v20, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, TypeName);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v24 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v15 = *(void *)(TypeName - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, TypeName);
  int v17 = v16(v13, 1, TypeName);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
      *(unsigned char *)(v12 + 12) = *(unsigned char *)(v13 + 12);
      *(unsigned char *)(v12 + 13) = *(unsigned char *)(v13 + 13);
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 40) = *(_DWORD *)(v13 + 40);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(TypeName + 48), v13 + *(int *)(TypeName + 48), v25);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_TypeName);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
  *(unsigned char *)(v12 + 12) = *(unsigned char *)(v13 + 12);
  *(unsigned char *)(v12 + 13) = *(unsigned char *)(v13 + 13);
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  *(_DWORD *)(v12 + 40) = *(_DWORD *)(v13 + 40);
  uint64_t v18 = *(int *)(TypeName + 48);
  uint64_t v19 = v12 + v18;
  uint64_t v20 = v13 + v18;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v19, v20, v25);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, TypeName);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v16 = *(void *)(TypeName - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, TypeName))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
    *((_WORD *)v13 + 6) = *((_WORD *)v14 + 6);
    v13[2] = v14[2];
    *((_DWORD *)v13 + 6) = *((_DWORD *)v14 + 6);
    v13[4] = v14[4];
    *((_DWORD *)v13 + 10) = *((_DWORD *)v14 + 10);
    v11((char *)v13 + *(int *)(TypeName + 48), (char *)v14 + *(int *)(TypeName + 48), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, TypeName);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v21 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v16 = *(void *)(TypeName - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, TypeName);
  int v18 = v17(v14, 1, TypeName);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(unsigned char *)(v13 + 12) = *(unsigned char *)(v14 + 12);
      *(unsigned char *)(v13 + 13) = *(unsigned char *)(v14 + 13);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
      *(void *)(v13 + 32) = *(void *)(v14 + 32);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 40) = *(_DWORD *)(v14 + 40);
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(TypeName + 48), v14 + *(int *)(TypeName + 48), v22);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_TypeName);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
  *(_WORD *)(v13 + 12) = *(_WORD *)(v14 + 12);
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(v14 + 24);
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  *(_DWORD *)(v13 + 40) = *(_DWORD *)(v14 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v13 + *(int *)(TypeName + 48), v14 + *(int *)(TypeName + 48), v22);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, TypeName);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E978628);
}

uint64_t sub_18E978628(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3792Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_TypeName?);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E978648);
}

void *sub_18E978648(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3793Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_TypeName?);
}

void type metadata completion function for PgQuery_CreateOpClassStmt()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateCastStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_49);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateCastStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_49);
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = a2[5];
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = (uint64_t)a2 + v8;
    uint64_t v10 = a1 + v8;
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v5;
}

uint64_t destroy for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a2 + v7;
  uint64_t v9 = a1 + v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3798Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3799Tm);
}

uint64_t type metadata completion function for PgQuery_CreateConversionStmt()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterRoleSetStmt(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    uint64_t v17 = *(void *)(RoleSpec - 8);
    uint64_t v35 = v12;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
      uint64_t v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      uint64_t v21 = *(int *)(RoleSpec + 28);
      uint64_t v22 = (char *)v14 + v21;
      uint64_t v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12(v22, v23, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
    uint64_t v24 = a3[7];
    uint64_t v25 = (uint64_t *)((char *)v4 + v24);
    uint64_t v26 = (uint64_t *)((char *)a2 + v24);
    VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
    uint64_t v28 = *(void *)(VariableSetStmt - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, VariableSetStmt))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      *uint64_t v25 = *v26;
      *((unsigned char *)v25 + 8) = *((unsigned char *)v26 + 8);
      uint64_t v30 = v26[3];
      v25[2] = v26[2];
      v25[3] = v30;
      v25[4] = v26[4];
      *((unsigned char *)v25 + 40) = *((unsigned char *)v26 + 40);
      uint64_t v31 = *(int *)(VariableSetStmt + 32);
      uint64_t v32 = (char *)v25 + v31;
      uint64_t v33 = (char *)v26 + v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35(v32, v33, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, VariableSetStmt);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_AlterRoleSetStmt(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec))
  {
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(RoleSpec + 28), v5);
  }
  uint64_t v8 = a1 + a2[7];
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(VariableSetStmt - 8) + 48))(v8, 1, VariableSetStmt);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v8 + *(int *)(VariableSetStmt + 32);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

void *initializeWithCopy for PgQuery_AlterRoleSetStmt(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v16 = *(void *)(RoleSpec - 8);
  uint64_t v33 = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((unsigned char *)v13 + 8) = *((unsigned char *)v14 + 8);
    uint64_t v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    uint64_t v19 = *(int *)(RoleSpec + 28);
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11(v20, v21, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  uint64_t v22 = a3[7];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v26 = *(void *)(VariableSetStmt - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, VariableSetStmt))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    *uint64_t v23 = *v24;
    *((unsigned char *)v23 + 8) = *((unsigned char *)v24 + 8);
    uint64_t v28 = v24[3];
    v23[2] = v24[2];
    v23[3] = v28;
    v23[4] = v24[4];
    *((unsigned char *)v23 + 40) = *((unsigned char *)v24 + 40);
    uint64_t v29 = *(int *)(VariableSetStmt + 32);
    uint64_t v30 = (char *)v23 + v29;
    uint64_t v31 = (char *)v24 + v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33(v30, v31, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, VariableSetStmt);
  }
  return a1;
}

void *assignWithCopy for PgQuery_AlterRoleSetStmt(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v43 = v9;
  uint64_t v41 = *(void (**)(char *, char *))(v42 + 24);
  v41(v7, v8);
  uint64_t v10 = a3[6];
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v14 = *(void *)(RoleSpec - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, RoleSpec);
  int v17 = v15((uint64_t)v12, 1, RoleSpec);
  if (v16)
  {
    if (!v17)
    {
      uint64_t v18 = *(void *)v12;
      *(unsigned char *)(v11 + 8) = v12[8];
      *(void *)uint64_t v11 = v18;
      *(void *)(v11 + 16) = *((void *)v12 + 2);
      *(void *)(v11 + 24) = *((void *)v12 + 3);
      *(_DWORD *)(v11 + 32) = *((_DWORD *)v12 + 8);
      uint64_t v19 = *(int *)(RoleSpec + 28);
      uint64_t v20 = v11 + v19;
      uint64_t v21 = &v12[v19];
      uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 16);
      swift_bridgeObjectRetain();
      v22(v20, v21, v43);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, RoleSpec);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_RoleSpec);
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v11, v12, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v39 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = v12[8];
  *(void *)uint64_t v11 = v39;
  *(void *)(v11 + 16) = *((void *)v12 + 2);
  *(void *)(v11 + 24) = *((void *)v12 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v11 + 32) = *((_DWORD *)v12 + 8);
  ((void (*)(uint64_t, char *, uint64_t))v41)(v11 + *(int *)(RoleSpec + 28), &v12[*(int *)(RoleSpec + 28)], v43);
LABEL_7:
  uint64_t v24 = a3[7];
  uint64_t v25 = (uint64_t)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v28 = *(void *)(VariableSetStmt - 8);
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, VariableSetStmt);
  int v31 = v29((uint64_t)v26, 1, VariableSetStmt);
  if (!v30)
  {
    if (!v31)
    {
      uint64_t v40 = *(void *)v26;
      *(unsigned char *)(v25 + 8) = v26[8];
      *(void *)uint64_t v25 = v40;
      *(void *)(v25 + 16) = *((void *)v26 + 2);
      *(void *)(v25 + 24) = *((void *)v26 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v25 + 32) = *((void *)v26 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v25 + 40) = v26[40];
      ((void (*)(uint64_t, char *, uint64_t))v41)(v25 + *(int *)(VariableSetStmt + 32), &v26[*(int *)(VariableSetStmt + 32)], v43);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v25, type metadata accessor for PgQuery_VariableSetStmt);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy((void *)v25, v26, *(void *)(*(void *)(v37 - 8) + 64));
    return a1;
  }
  uint64_t v32 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = v26[8];
  *(void *)uint64_t v25 = v32;
  *(void *)(v25 + 16) = *((void *)v26 + 2);
  *(void *)(v25 + 24) = *((void *)v26 + 3);
  *(void *)(v25 + 32) = *((void *)v26 + 4);
  *(unsigned char *)(v25 + 40) = v26[40];
  uint64_t v33 = *(int *)(VariableSetStmt + 32);
  uint64_t v34 = v25 + v33;
  uint64_t v35 = &v26[v33];
  uint64_t v36 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36(v34, v35, v43);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, VariableSetStmt);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_AlterRoleSetStmt(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v21 = *(void *)(VariableSetStmt - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, VariableSetStmt))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *uint64_t v18 = *v19;
    *((unsigned char *)v18 + 8) = *((unsigned char *)v19 + 8);
    *((_OWORD *)v18 + 1) = *((_OWORD *)v19 + 1);
    v18[4] = v19[4];
    *((unsigned char *)v18 + 40) = *((unsigned char *)v19 + 40);
    v10((char *)v18 + *(int *)(VariableSetStmt + 32), (char *)v19 + *(int *)(VariableSetStmt + 32), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, VariableSetStmt);
  }
  return a1;
}

void *assignWithTake for PgQuery_AlterRoleSetStmt(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  uint64_t v32 = *(void (**)(char *, char *))(v33 + 40);
  v32(v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, RoleSpec);
  int v18 = v16((uint64_t)v13, 1, RoleSpec);
  if (v17)
  {
    if (!v18)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(unsigned char *)(v12 + 8) = v13[8];
      *(_OWORD *)(v12 + 16) = *((_OWORD *)v13 + 1);
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v12 + *(int *)(RoleSpec + 28), &v13[*(int *)(RoleSpec + 28)], v34);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RoleSpec);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v13[8];
  uint64_t v30 = *((void *)v13 + 3);
  *(void *)(v12 + 16) = *((void *)v13 + 2);
  *(void *)(v12 + 24) = v30;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
  ((void (*)(uint64_t, char *, uint64_t))v32)(v12 + *(int *)(RoleSpec + 28), &v13[*(int *)(RoleSpec + 28)], v34);
LABEL_7:
  uint64_t v20 = a3[7];
  uint64_t v21 = (uint64_t)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v24 = *(void *)(VariableSetStmt - 8);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, VariableSetStmt);
  int v27 = v25((uint64_t)v22, 1, VariableSetStmt);
  if (!v26)
  {
    if (!v27)
    {
      *(void *)uint64_t v21 = *(void *)v22;
      *(unsigned char *)(v21 + 8) = v22[8];
      uint64_t v31 = *((void *)v22 + 3);
      *(void *)(v21 + 16) = *((void *)v22 + 2);
      *(void *)(v21 + 24) = v31;
      swift_bridgeObjectRelease();
      *(void *)(v21 + 32) = *((void *)v22 + 4);
      swift_bridgeObjectRelease();
      *(unsigned char *)(v21 + 40) = v22[40];
      ((void (*)(uint64_t, char *, uint64_t))v32)(v21 + *(int *)(VariableSetStmt + 32), &v22[*(int *)(VariableSetStmt + 32)], v34);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_VariableSetStmt);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy((void *)v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = v22[8];
  *(_OWORD *)(v21 + 16) = *((_OWORD *)v22 + 1);
  *(void *)(v21 + 32) = *((void *)v22 + 4);
  *(unsigned char *)(v21 + 40) = v22[40];
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v21 + *(int *)(VariableSetStmt + 32), &v22[*(int *)(VariableSetStmt + 32)], v34);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, VariableSetStmt);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterRoleSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E97A02C);
}

uint64_t sub_18E97A02C(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[7];

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterRoleSetStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E97A1C0);
}

uint64_t sub_18E97A1C0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[7];

  return v15(v17, a2, a2, v16);
}

void type metadata completion function for PgQuery_AlterRoleSetStmt()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_VariableSetStmt?, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterDatabaseSetStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
    uint64_t v17 = *(void *)(VariableSetStmt - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, VariableSetStmt))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
      uint64_t v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      v14[4] = v15[4];
      *((unsigned char *)v14 + 40) = *((unsigned char *)v15 + 40);
      uint64_t v21 = *(int *)(VariableSetStmt + 32);
      uint64_t v22 = (char *)v14 + v21;
      uint64_t v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v22, v23, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, VariableSetStmt);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_AlterDatabaseSetStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(VariableSetStmt - 8) + 48))(v6, 1, VariableSetStmt);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(VariableSetStmt + 32);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for PgQuery_AlterDatabaseSetStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v16 = *(void *)(VariableSetStmt - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, VariableSetStmt))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((unsigned char *)v13 + 8) = *((unsigned char *)v14 + 8);
    uint64_t v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    v13[4] = v14[4];
    *((unsigned char *)v13 + 40) = *((unsigned char *)v14 + 40);
    uint64_t v19 = *(int *)(VariableSetStmt + 32);
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v20, v21, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, VariableSetStmt);
  }
  return a1;
}

void *assignWithCopy for PgQuery_AlterDatabaseSetStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v26 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v15 = *(void *)(VariableSetStmt - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, VariableSetStmt);
  int v17 = v16((uint64_t)v13, 1, VariableSetStmt);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v25 = *(void *)v13;
      *(unsigned char *)(v12 + 8) = v13[8];
      *(void *)uint64_t v12 = v25;
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = *((void *)v13 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 32) = *((void *)v13 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 40) = v13[40];
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(VariableSetStmt + 32), &v13[*(int *)(VariableSetStmt + 32)], v27);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_VariableSetStmt);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  uint64_t v18 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v13[8];
  *(void *)uint64_t v12 = v18;
  *(void *)(v12 + 16) = *((void *)v13 + 2);
  *(void *)(v12 + 24) = *((void *)v13 + 3);
  *(void *)(v12 + 32) = *((void *)v13 + 4);
  *(unsigned char *)(v12 + 40) = v13[40];
  uint64_t v19 = *(int *)(VariableSetStmt + 32);
  uint64_t v20 = v12 + v19;
  uint64_t v21 = &v13[v19];
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v27);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, VariableSetStmt);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_AlterDatabaseSetStmt(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v15 = *(void *)(VariableSetStmt - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, VariableSetStmt))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    v12[4] = v13[4];
    *((unsigned char *)v12 + 40) = *((unsigned char *)v13 + 40);
    v10((char *)v12 + *(int *)(VariableSetStmt + 32), (char *)v13 + *(int *)(VariableSetStmt + 32), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, VariableSetStmt);
  }
  return a1;
}

void *assignWithTake for PgQuery_AlterDatabaseSetStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v22 = *(void *)(v10 - 8);
  uint64_t v23 = v10;
  uint64_t v11 = *(void (**)(char *, char *))(v22 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (uint64_t)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v16 = *(void *)(VariableSetStmt - 8);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, VariableSetStmt);
  int v18 = v17((uint64_t)v14, 1, VariableSetStmt);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = v14[8];
      uint64_t v21 = *((void *)v14 + 3);
      *(void *)(v13 + 16) = *((void *)v14 + 2);
      *(void *)(v13 + 24) = v21;
      swift_bridgeObjectRelease();
      *(void *)(v13 + 32) = *((void *)v14 + 4);
      swift_bridgeObjectRelease();
      *(unsigned char *)(v13 + 40) = v14[40];
      ((void (*)(uint64_t, char *, uint64_t))v11)(v13 + *(int *)(VariableSetStmt + 32), &v14[*(int *)(VariableSetStmt + 32)], v23);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_VariableSetStmt);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    memcpy((void *)v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = v14[8];
  *(_OWORD *)(v13 + 16) = *((_OWORD *)v14 + 1);
  *(void *)(v13 + 32) = *((void *)v14 + 4);
  *(unsigned char *)(v13 + 40) = v14[40];
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v13 + *(int *)(VariableSetStmt + 32), &v14[*(int *)(VariableSetStmt + 32)], v23);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, VariableSetStmt);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterDatabaseSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E97B00C);
}

uint64_t sub_18E97B00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterDatabaseSetStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E97B150);
}

uint64_t sub_18E97B150(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 24);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for PgQuery_AlterDatabaseSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterDatabaseStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3407Tm_6);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterDatabaseStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3408Tm_6);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    uint64_t v17 = *(void *)(RoleSpec - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
      uint64_t v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      uint64_t v21 = *(int *)(RoleSpec + 28);
      uint64_t v22 = (char *)v14 + v21;
      uint64_t v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12((uint64_t)v22, (uint64_t)v23, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(RoleSpec + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v16 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((unsigned char *)v13 + 8) = *((unsigned char *)v14 + 8);
    uint64_t v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    uint64_t v19 = *(int *)(RoleSpec + 28);
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11((uint64_t)v20, (uint64_t)v21, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v26 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RoleSpec);
  int v17 = v16((uint64_t)v13, 1, RoleSpec);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v25 = *v13;
      *(unsigned char *)(v12 + 8) = *((unsigned char *)v13 + 8);
      *(void *)uint64_t v12 = v25;
      *(void *)(v12 + 16) = v13[2];
      *(void *)(v12 + 24) = v13[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v27);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  uint64_t v18 = *v13;
  *(unsigned char *)(v12 + 8) = *((unsigned char *)v13 + 8);
  *(void *)uint64_t v12 = v18;
  *(void *)(v12 + 16) = v13[2];
  *(void *)(v12 + 24) = v13[3];
  *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
  uint64_t v19 = *(int *)(RoleSpec + 28);
  uint64_t v20 = v12 + v19;
  uint64_t v21 = (uint64_t)v13 + v19;
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v27);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v22 = *(void *)(v10 - 8);
  uint64_t v23 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v22 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v16 = *(void *)(RoleSpec - 8);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, RoleSpec);
  int v18 = v17(v14, 1, RoleSpec);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      uint64_t v21 = *(void *)(v14 + 24);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = v21;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v23);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v13 + *(int *)(RoleSpec + 28), v14 + *(int *)(RoleSpec + 28), v23);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E97BE6C);
}

uint64_t __swift_get_extra_inhabitant_index_3714Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E97BFB4);
}

uint64_t __swift_store_extra_inhabitant_index_3715Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for PgQuery_CreateSchemaStmt()
{
}

void *initializeBufferWithCopyOfBuffer for PgQuery_ReindexStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    *(unsigned char *)(a1 + 36) = *((unsigned char *)a2 + 36);
    uint64_t v9 = *(int *)(a3 + 32);
    uint64_t v10 = (char *)(a1 + v9);
    uint64_t v11 = (char *)a2 + v9;
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 36);
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    uint64_t v18 = *(void *)(RangeVar - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, RangeVar))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v21;
      uint64_t v22 = v16[3];
      v15[2] = v16[2];
      v15[3] = v22;
      uint64_t v23 = v16[5];
      v15[4] = v16[4];
      v15[5] = v23;
      *((unsigned char *)v15 + 48) = *((unsigned char *)v16 + 48);
      uint64_t v39 = v13;
      uint64_t v24 = v16[8];
      v15[7] = v16[7];
      v15[8] = v24;
      *((_DWORD *)v15 + 18) = *((_DWORD *)v16 + 18);
      uint64_t v25 = *(int *)(RangeVar + 40);
      uint64_t v36 = (char *)v16 + v25;
      int v38 = (char *)v15 + v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v39(v38, v36, v12);
      uint64_t v26 = *(int *)(RangeVar + 44);
      uint64_t v27 = (void *)((char *)v15 + v26);
      uint64_t v28 = (void *)((char *)v16 + v26);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v30 = *(void *)(Alias - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, Alias))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        uint64_t v32 = v28[1];
        *uint64_t v27 = *v28;
        v27[1] = v32;
        v27[2] = v28[2];
        uint64_t v33 = *(int *)(Alias + 24);
        uint64_t v37 = (char *)v27 + v33;
        uint64_t v34 = (char *)v28 + v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v39(v37, v34, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, Alias);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, RangeVar);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_ReindexStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 48))(v6, 1, RangeVar);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(RangeVar + 40), v5);
    uint64_t v9 = v6 + *(int *)(RangeVar + 44);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 48))(v9, 1, Alias);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v9 + *(int *)(Alias + 24);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_ReindexStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v17 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    uint64_t v20 = v15[3];
    v14[2] = v15[2];
    v14[3] = v20;
    uint64_t v21 = v15[5];
    v14[4] = v15[4];
    v14[5] = v21;
    *((unsigned char *)v14 + 48) = *((unsigned char *)v15 + 48);
    uint64_t v37 = v12;
    uint64_t v22 = v15[8];
    v14[7] = v15[7];
    v14[8] = v22;
    *((_DWORD *)v14 + 18) = *((_DWORD *)v15 + 18);
    uint64_t v23 = *(int *)(RangeVar + 40);
    uint64_t v34 = (char *)v15 + v23;
    uint64_t v36 = (char *)v14 + v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37(v36, v34, v11);
    uint64_t v24 = *(int *)(RangeVar + 44);
    uint64_t v25 = (void *)((char *)v14 + v24);
    uint64_t v26 = (void *)((char *)v15 + v24);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v28 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      uint64_t v30 = v26[1];
      *uint64_t v25 = *v26;
      v25[1] = v30;
      v25[2] = v26[2];
      uint64_t v31 = *(int *)(Alias + 24);
      uint64_t v35 = (char *)v25 + v31;
      uint64_t v32 = (char *)v26 + v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v35, v32, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_ReindexStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(unsigned char *)(a1 + 36) = *((unsigned char *)a2 + 36);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v51 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v50 + 24);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t)a2 + v12;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v16 = *(void *)(RangeVar - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, RangeVar);
  int v18 = v17(v14, 1, RangeVar);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = *(void *)(v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 32) = *(void *)(v14 + 32);
      *(void *)(v13 + 40) = *(void *)(v14 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
      *(void *)(v13 + 56) = *(void *)(v14 + 56);
      *(void *)(v13 + 64) = *(void *)(v14 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v51);
      uint64_t v31 = *(int *)(RangeVar + 44);
      uint64_t v32 = (void *)(v13 + v31);
      uint64_t v33 = (void *)(v14 + v31);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v35 = *(void *)(Alias - 8);
      uint64_t v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v35 + 48);
      int v37 = v36(v32, 1, Alias);
      int v38 = v36(v33, 1, Alias);
      if (v37)
      {
        if (!v38)
        {
          *uint64_t v32 = *v33;
          v32[1] = v33[1];
          v32[2] = v33[2];
          uint64_t v39 = *(int *)(Alias + 24);
          uint64_t v40 = (char *)v32 + v39;
          uint64_t v41 = (char *)v33 + v39;
          uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v42(v40, v41, v51);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          *uint64_t v32 = *v33;
          v32[1] = v33[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v32[2] = v33[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          ((void (*)(char *, char *, uint64_t))v11)((char *)v32 + *(int *)(Alias + 24), (char *)v33 + *(int *)(Alias + 24), v51);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_Alias);
      }
      size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v29 = v32;
      uint64_t v30 = v33;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v29 = (void *)v13;
    uint64_t v30 = (const void *)v14;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v18) {
    goto LABEL_7;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  *(void *)(v13 + 24) = *(void *)(v14 + 24);
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  *(void *)(v13 + 40) = *(void *)(v14 + 40);
  *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
  *(void *)(v13 + 56) = *(void *)(v14 + 56);
  *(void *)(v13 + 64) = *(void *)(v14 + 64);
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
  uint64_t v19 = *(int *)(RangeVar + 40);
  uint64_t v47 = (char *)(v14 + v19);
  uint64_t v48 = (char *)(v13 + v19);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = v48;
  uint64_t v49 = v20;
  v20(v21, v47, v51);
  uint64_t v22 = *(int *)(RangeVar + 44);
  uint64_t v23 = (void *)(v13 + v22);
  uint64_t v24 = (void *)(v14 + v22);
  uint64_t v25 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    *uint64_t v23 = *v24;
    v23[1] = v24[1];
    v23[2] = v24[2];
    uint64_t v43 = *(int *)(v25 + 24);
    uint64_t v44 = (char *)v23 + v43;
    uint64_t v45 = (char *)v24 + v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49(v44, v45, v51);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t initializeWithTake for PgQuery_ReindexStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 36);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    uint64_t v18 = *(int *)(RangeVar + 44);
    __dst = (void *)((char *)v12 + v18);
    uint64_t v19 = (void *)((char *)v13 + v18);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v21 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, Alias))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      __dst[2] = v19[2];
      v10((char *)__dst + *(int *)(Alias + 24), (char *)v19 + *(int *)(Alias + 24), v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_ReindexStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v45 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v43 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v16 = *(void *)(RangeVar - 8);
  long long v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, RangeVar);
  int v18 = v17(v14, 1, RangeVar);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v29 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = *(void *)(v14 + 24);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = v30;
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void *)(v14 + 40);
      *(void *)(v13 + 32) = *(void *)(v14 + 32);
      *(void *)(v13 + 40) = v31;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
      uint64_t v32 = *(void *)(v14 + 64);
      *(void *)(v13 + 56) = *(void *)(v14 + 56);
      *(void *)(v13 + 64) = v32;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v45);
      uint64_t v33 = *(int *)(RangeVar + 44);
      uint64_t v34 = v13 + v33;
      uint64_t v35 = (char *)(v14 + v33);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v37 = *(void *)(Alias - 8);
      int v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      int v39 = v38(v34, 1, Alias);
      int v40 = v38((uint64_t)v35, 1, Alias);
      if (v39)
      {
        if (!v40)
        {
          *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
          *(void *)(v34 + 16) = *((void *)v35 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v34 + *(int *)(Alias + 24), &v35[*(int *)(Alias + 24)], v45);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v40)
        {
          uint64_t v42 = *((void *)v35 + 1);
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = v42;
          swift_bridgeObjectRelease();
          *(void *)(v34 + 16) = *((void *)v35 + 2);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, char *, uint64_t))v11)(v34 + *(int *)(Alias + 24), &v35[*(int *)(Alias + 24)], v45);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Alias);
      }
      size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v27 = (void *)v34;
      size_t v28 = v35;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v27 = (void *)v13;
    size_t v28 = (char *)v14;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v18) {
    goto LABEL_7;
  }
  long long v19 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v19;
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32);
  v44(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v45);
  uint64_t v20 = *(int *)(RangeVar + 44);
  uint64_t v21 = (void *)(v13 + v20);
  uint64_t v22 = (void *)(v14 + v20);
  uint64_t v23 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    v21[2] = v22[2];
    v44((uint64_t)v21 + *(int *)(v23 + 24), (uint64_t)v22 + *(int *)(v23 + 24), v45);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ReindexStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E97D780);
}

uint64_t sub_18E97D780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_ReindexStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E97D8C4);
}

uint64_t sub_18E97D8C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for PgQuery_ReindexStmt()
{
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3609Tm_7);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3610Tm_7);
}

uint64_t type metadata completion function for PgQuery_ConstraintsSetStmt()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_AlterStatsStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t initializeWithCopy for PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_LockStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3296Tm_3);
}

uint64_t storeEnumTagSinglePayload for PgQuery_LockStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3297Tm_3);
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E97E1D4);
}

uint64_t __swift_get_extra_inhabitant_index_3609Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E97E29C);
}

void *__swift_store_extra_inhabitant_index_3610Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (void *)(v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    uint64_t v17 = *(void *)(RoleSpec - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
      uint64_t v19 = v15[3];
      v14[2] = v15[2];
      v14[3] = v19;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      uint64_t v20 = *(int *)(RoleSpec + 28);
      uint64_t v21 = (char *)v14 + v20;
      uint64_t v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      v12((uint64_t)v21, (uint64_t)v22, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(RoleSpec + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    uint64_t v17 = v13[3];
    v12[2] = v13[2];
    v12[3] = v17;
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    uint64_t v18 = *(int *)(RoleSpec + 28);
    uint64_t v19 = (char *)v12 + v18;
    uint64_t v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10((uint64_t)v19, (uint64_t)v20, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v26 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RoleSpec);
  int v17 = v16((uint64_t)v13, 1, RoleSpec);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v25 = *v13;
      *(unsigned char *)(v12 + 8) = *((unsigned char *)v13 + 8);
      *(void *)uint64_t v12 = v25;
      *(void *)(v12 + 16) = v13[2];
      *(void *)(v12 + 24) = v13[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v27);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  uint64_t v18 = *v13;
  *(unsigned char *)(v12 + 8) = *((unsigned char *)v13 + 8);
  *(void *)uint64_t v12 = v18;
  *(void *)(v12 + 16) = v13[2];
  *(void *)(v12 + 24) = v13[3];
  *(_DWORD *)(v12 + 32) = *((_DWORD *)v13 + 8);
  uint64_t v19 = *(int *)(RoleSpec + 28);
  uint64_t v20 = v12 + v19;
  uint64_t v21 = (uint64_t)v13 + v19;
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v27);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void *)(v9 - 8);
  uint64_t v22 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v21 + 40);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RoleSpec);
  int v17 = v16(v13, 1, RoleSpec);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
      uint64_t v20 = *(void *)(v13 + 24);
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      *(void *)(v12 + 24) = v20;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 32) = *(_DWORD *)(v13 + 32);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(RoleSpec + 28), v13 + *(int *)(RoleSpec + 28), v22);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
  *(_DWORD *)(v12 + 32) = *(_DWORD *)(v13 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v12 + *(int *)(RoleSpec + 28), v13 + *(int *)(RoleSpec + 28), v22);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E97EE78);
}

uint64_t sub_18E97EE78(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E97EFBC);
}

void *sub_18E97EFBC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *initializeBufferWithCopyOfBuffer for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E97F57C);
}

uint64_t __swift_get_extra_inhabitant_index_3335Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E97F644);
}

uint64_t __swift_store_extra_inhabitant_index_3336Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_CreateRoleStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

void *initializeBufferWithCopyOfBuffer for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v5;
    uint64_t v6 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = a2[5];
    uint64_t v7 = *(int *)(a3 + 40);
    uint64_t v8 = (uint64_t)a2 + v7;
    uint64_t v9 = a1 + v7;
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a2 + v6;
  uint64_t v8 = a1 + v6;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E97FC10);
}

uint64_t sub_18E97FC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E97FCD4);
}

uint64_t sub_18E97FCD4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_CreatePLangStmt()
{
  return type metadata completion function for PgQuery_CreateStatsStmt();
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateTrigStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_50);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateTrigStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_50);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_DiscardStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for PgQuery_DiscardStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_DiscardStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DiscardStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_DiscardStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DiscardStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3504Tm_0);
}

uint64_t storeEnumTagSinglePayload for PgQuery_DiscardStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3505Tm_0);
}

uint64_t type metadata completion function for PgQuery_DiscardStmt()
{
  return type metadata completion function for PgQuery_OidList();
}

uint64_t getEnumTagSinglePayload for PgQuery_VariableShowStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3495Tm_3);
}

uint64_t storeEnumTagSinglePayload for PgQuery_VariableShowStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3496Tm_3);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_VariableSetStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v6 = *(int *)(a3 + 32);
    uint64_t v7 = (uint64_t)a2 + v6;
    uint64_t v8 = a1 + v6;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_VariableSetStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_VariableSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_VariableSetStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_VariableSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_VariableSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_VariableSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E980640);
}

uint64_t sub_18E980640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_VariableSetStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E980704);
}

uint64_t sub_18E980704(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_VariableSetStmt()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (char *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = (void *)(v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    uint64_t v17 = *(void *)(RangeVar - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v19;
      uint64_t v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      uint64_t v21 = v15[5];
      v14[4] = v15[4];
      v14[5] = v21;
      *((unsigned char *)v14 + 48) = *((unsigned char *)v15 + 48);
      uint64_t v37 = v12;
      uint64_t v22 = v15[8];
      v14[7] = v15[7];
      v14[8] = v22;
      *((_DWORD *)v14 + 18) = *((_DWORD *)v15 + 18);
      uint64_t v23 = *(int *)(RangeVar + 40);
      uint64_t v34 = (char *)v15 + v23;
      uint64_t v36 = (char *)v14 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v36, v34, v11);
      uint64_t v24 = *(int *)(RangeVar + 44);
      uint64_t v25 = (void *)((char *)v14 + v24);
      uint64_t v26 = (void *)((char *)v15 + v24);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v28 = *(void *)(Alias - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        uint64_t v30 = v26[1];
        *uint64_t v25 = *v26;
        v25[1] = v30;
        v25[2] = v26[2];
        uint64_t v31 = *(int *)(Alias + 24);
        uint64_t v35 = (char *)v25 + v31;
        uint64_t v32 = (char *)v26 + v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37(v35, v32, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RangeVar);
    }
  }
  return v7;
}

uint64_t initializeWithCopy for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    uint64_t v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    uint64_t v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    uint64_t v35 = v10;
    uint64_t v20 = v13[8];
    v12[7] = v13[7];
    v12[8] = v20;
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    uint64_t v21 = *(int *)(RangeVar + 40);
    uint64_t v32 = (char *)v13 + v21;
    uint64_t v34 = (char *)v12 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(v34, v32, v9);
    uint64_t v22 = *(int *)(RangeVar + 44);
    uint64_t v23 = (void *)((char *)v12 + v22);
    uint64_t v24 = (void *)((char *)v13 + v22);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v26 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, Alias))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v28;
      v23[2] = v24[2];
      uint64_t v29 = *(int *)(Alias + 24);
      uint64_t v33 = (char *)v23 + v29;
      uint64_t v30 = (char *)v24 + v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35(v33, v30, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, Alias);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v49 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16(v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *(void *)(v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      *(void *)(v12 + 24) = *(void *)(v13 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      *(void *)(v12 + 40) = *(void *)(v13 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
      *(void *)(v12 + 56) = *(void *)(v13 + 56);
      *(void *)(v12 + 64) = *(void *)(v13 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(RangeVar + 40), v13 + *(int *)(RangeVar + 40), v50);
      uint64_t v30 = *(int *)(RangeVar + 44);
      uint64_t v31 = (void *)(v12 + v30);
      uint64_t v32 = (void *)(v13 + v30);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v34 = *(void *)(Alias - 8);
      uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
      int v36 = v35(v31, 1, Alias);
      int v37 = v35(v32, 1, Alias);
      if (v36)
      {
        if (!v37)
        {
          *uint64_t v31 = *v32;
          v31[1] = v32[1];
          v31[2] = v32[2];
          uint64_t v38 = *(int *)(Alias + 24);
          int v39 = (char *)v31 + v38;
          int v40 = (char *)v32 + v38;
          uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v41(v39, v40, v50);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v37)
        {
          *uint64_t v31 = *v32;
          v31[1] = v32[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v31[2] = v32[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          ((void (*)(char *, char *, uint64_t))v10)((char *)v31 + *(int *)(Alias + 24), (char *)v32 + *(int *)(Alias + 24), v50);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_Alias);
      }
      size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v28 = v31;
      uint64_t v29 = v32;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v28 = (void *)v12;
    uint64_t v29 = (const void *)v13;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  *(void *)(v12 + 24) = *(void *)(v13 + 24);
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  *(void *)(v12 + 40) = *(void *)(v13 + 40);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
  *(void *)(v12 + 56) = *(void *)(v13 + 56);
  *(void *)(v12 + 64) = *(void *)(v13 + 64);
  *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
  uint64_t v18 = *(int *)(RangeVar + 40);
  int v46 = (char *)(v13 + v18);
  uint64_t v47 = (char *)(v12 + v18);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = v47;
  uint64_t v48 = v19;
  v19(v20, v46, v50);
  uint64_t v21 = *(int *)(RangeVar + 44);
  uint64_t v22 = (void *)(v12 + v21);
  uint64_t v23 = (void *)(v13 + v21);
  uint64_t v24 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *uint64_t v22 = *v23;
    v22[1] = v23[1];
    v22[2] = v23[2];
    uint64_t v42 = *(int *)(v24 + 24);
    uint64_t v43 = (char *)v22 + v42;
    uint64_t v44 = (char *)v23 + v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v43, v44, v50);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    uint64_t v18 = *(int *)(RangeVar + 44);
    __dst = (void *)((char *)v12 + v18);
    uint64_t v19 = (void *)((char *)v13 + v18);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v21 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, Alias))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      __dst[2] = v19[2];
      v10((char *)__dst + *(int *)(Alias + 24), (char *)v19 + *(int *)(Alias + 24), v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v42 + 40);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16(v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v28 = *(void *)(v13 + 8);
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = v28;
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(v13 + 24);
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      *(void *)(v12 + 24) = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = *(void *)(v13 + 40);
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      *(void *)(v12 + 40) = v30;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
      uint64_t v31 = *(void *)(v13 + 64);
      *(void *)(v12 + 56) = *(void *)(v13 + 56);
      *(void *)(v12 + 64) = v31;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(RangeVar + 40), v13 + *(int *)(RangeVar + 40), v44);
      uint64_t v32 = *(int *)(RangeVar + 44);
      uint64_t v33 = v12 + v32;
      uint64_t v34 = (char *)(v13 + v32);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v36 = *(void *)(Alias - 8);
      int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      int v38 = v37(v33, 1, Alias);
      int v39 = v37((uint64_t)v34, 1, Alias);
      if (v38)
      {
        if (!v39)
        {
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v33 + *(int *)(Alias + 24), &v34[*(int *)(Alias + 24)], v44);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v39)
        {
          uint64_t v41 = *((void *)v34 + 1);
          *(void *)uint64_t v33 = *(void *)v34;
          *(void *)(v33 + 8) = v41;
          swift_bridgeObjectRelease();
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, char *, uint64_t))v10)(v33 + *(int *)(Alias + 24), &v34[*(int *)(Alias + 24)], v44);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Alias);
      }
      size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v26 = (void *)v33;
      size_t v27 = v34;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v26 = (void *)v12;
    size_t v27 = (char *)v13;
LABEL_8:
    memcpy(v26, v27, v25);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  long long v18 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v18;
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 56);
  *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
  v43(v12 + *(int *)(RangeVar + 40), v13 + *(int *)(RangeVar + 40), v44);
  uint64_t v19 = *(int *)(RangeVar + 44);
  uint64_t v20 = (void *)(v12 + v19);
  uint64_t v21 = (void *)(v13 + v19);
  uint64_t v22 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    v20[2] = v21[2];
    v43((uint64_t)v20 + *(int *)(v22 + 24), (uint64_t)v21 + *(int *)(v22 + 24), v44);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3846Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3847Tm);
}

void type metadata completion function for PgQuery_AlterSeqStmt()
{
}

void type metadata completion function for PgQuery_AlterTableStmt()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

{
  type metadata completion function for PgQuery_AlterTableStmt();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
    uint64_t v8 = *(int *)(a3 + 32);
    uint64_t v9 = (char *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 36);
    uint64_t v14 = (void *)(v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    uint64_t v17 = *(void *)(RangeVar - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v19;
      uint64_t v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      uint64_t v21 = v15[5];
      v14[4] = v15[4];
      v14[5] = v21;
      *((unsigned char *)v14 + 48) = *((unsigned char *)v15 + 48);
      int v37 = v12;
      uint64_t v22 = v15[8];
      v14[7] = v15[7];
      v14[8] = v22;
      *((_DWORD *)v14 + 18) = *((_DWORD *)v15 + 18);
      uint64_t v23 = *(int *)(RangeVar + 40);
      uint64_t v34 = (char *)v15 + v23;
      uint64_t v36 = (char *)v14 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v36, v34, v11);
      uint64_t v24 = *(int *)(RangeVar + 44);
      size_t v25 = (void *)((char *)v14 + v24);
      uint64_t v26 = (void *)((char *)v15 + v24);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v28 = *(void *)(Alias - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        uint64_t v30 = v26[1];
        *size_t v25 = *v26;
        v25[1] = v30;
        v25[2] = v26[2];
        uint64_t v31 = *(int *)(Alias + 24);
        uint64_t v35 = (char *)v25 + v31;
        uint64_t v32 = (char *)v26 + v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37(v35, v32, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RangeVar);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 48))(v6, 1, RangeVar);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(RangeVar + 40), v5);
    uint64_t v9 = v6 + *(int *)(RangeVar + 44);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 48))(v9, 1, Alias);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v9 + *(int *)(Alias + 24);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 36);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    uint64_t v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    uint64_t v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    uint64_t v35 = v10;
    uint64_t v20 = v13[8];
    v12[7] = v13[7];
    v12[8] = v20;
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    uint64_t v21 = *(int *)(RangeVar + 40);
    uint64_t v32 = (char *)v13 + v21;
    uint64_t v34 = (char *)v12 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(v34, v32, v9);
    uint64_t v22 = *(int *)(RangeVar + 44);
    uint64_t v23 = (void *)((char *)v12 + v22);
    uint64_t v24 = (void *)((char *)v13 + v22);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v26 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, Alias))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v28;
      v23[2] = v24[2];
      uint64_t v29 = *(int *)(Alias + 24);
      uint64_t v33 = (char *)v23 + v29;
      uint64_t v30 = (char *)v24 + v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35(v33, v30, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, Alias);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v49 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 36);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16(v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *(void *)(v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      *(void *)(v12 + 24) = *(void *)(v13 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      *(void *)(v12 + 40) = *(void *)(v13 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
      *(void *)(v12 + 56) = *(void *)(v13 + 56);
      *(void *)(v12 + 64) = *(void *)(v13 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(RangeVar + 40), v13 + *(int *)(RangeVar + 40), v50);
      uint64_t v30 = *(int *)(RangeVar + 44);
      uint64_t v31 = (void *)(v12 + v30);
      uint64_t v32 = (void *)(v13 + v30);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v34 = *(void *)(Alias - 8);
      uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
      int v36 = v35(v31, 1, Alias);
      int v37 = v35(v32, 1, Alias);
      if (v36)
      {
        if (!v37)
        {
          *uint64_t v31 = *v32;
          v31[1] = v32[1];
          v31[2] = v32[2];
          uint64_t v38 = *(int *)(Alias + 24);
          int v39 = (char *)v31 + v38;
          int v40 = (char *)v32 + v38;
          uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v41(v39, v40, v50);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v37)
        {
          *uint64_t v31 = *v32;
          v31[1] = v32[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v31[2] = v32[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          ((void (*)(char *, char *, uint64_t))v10)((char *)v31 + *(int *)(Alias + 24), (char *)v32 + *(int *)(Alias + 24), v50);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_Alias);
      }
      size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v28 = v31;
      uint64_t v29 = v32;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v28 = (void *)v12;
    uint64_t v29 = (const void *)v13;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  *(void *)(v12 + 24) = *(void *)(v13 + 24);
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  *(void *)(v12 + 40) = *(void *)(v13 + 40);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
  *(void *)(v12 + 56) = *(void *)(v13 + 56);
  *(void *)(v12 + 64) = *(void *)(v13 + 64);
  *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
  uint64_t v18 = *(int *)(RangeVar + 40);
  int v46 = (char *)(v13 + v18);
  uint64_t v47 = (char *)(v12 + v18);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = v47;
  uint64_t v48 = v19;
  v19(v20, v46, v50);
  uint64_t v21 = *(int *)(RangeVar + 44);
  uint64_t v22 = (void *)(v12 + v21);
  uint64_t v23 = (void *)(v13 + v21);
  uint64_t v24 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *uint64_t v22 = *v23;
    v22[1] = v23[1];
    v22[2] = v23[2];
    uint64_t v42 = *(int *)(v24 + 24);
    uint64_t v43 = (char *)v22 + v42;
    uint64_t v44 = (char *)v23 + v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v43, v44, v50);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 36);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    uint64_t v18 = *(int *)(RangeVar + 44);
    __dst = (void *)((char *)v12 + v18);
    uint64_t v19 = (void *)((char *)v13 + v18);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v21 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, Alias))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      __dst[2] = v19[2];
      v10((char *)__dst + *(int *)(Alias + 24), (char *)v19 + *(int *)(Alias + 24), v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v42 + 40);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 36);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16(v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v28 = *(void *)(v13 + 8);
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = v28;
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(v13 + 24);
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      *(void *)(v12 + 24) = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = *(void *)(v13 + 40);
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      *(void *)(v12 + 40) = v30;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
      uint64_t v31 = *(void *)(v13 + 64);
      *(void *)(v12 + 56) = *(void *)(v13 + 56);
      *(void *)(v12 + 64) = v31;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(RangeVar + 40), v13 + *(int *)(RangeVar + 40), v44);
      uint64_t v32 = *(int *)(RangeVar + 44);
      uint64_t v33 = v12 + v32;
      uint64_t v34 = (char *)(v13 + v32);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v36 = *(void *)(Alias - 8);
      int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      int v38 = v37(v33, 1, Alias);
      int v39 = v37((uint64_t)v34, 1, Alias);
      if (v38)
      {
        if (!v39)
        {
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v33 + *(int *)(Alias + 24), &v34[*(int *)(Alias + 24)], v44);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v39)
        {
          uint64_t v41 = *((void *)v34 + 1);
          *(void *)uint64_t v33 = *(void *)v34;
          *(void *)(v33 + 8) = v41;
          swift_bridgeObjectRelease();
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, char *, uint64_t))v10)(v33 + *(int *)(Alias + 24), &v34[*(int *)(Alias + 24)], v44);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Alias);
      }
      size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v26 = (void *)v33;
      size_t v27 = v34;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v26 = (void *)v12;
    size_t v27 = (char *)v13;
LABEL_8:
    memcpy(v26, v27, v25);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  long long v18 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v18;
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 56);
  *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
  v43(v12 + *(int *)(RangeVar + 40), v13 + *(int *)(RangeVar + 40), v44);
  uint64_t v19 = *(int *)(RangeVar + 44);
  uint64_t v20 = (void *)(v12 + v19);
  uint64_t v21 = (void *)(v13 + v19);
  uint64_t v22 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    v20[2] = v21[2];
    v43((uint64_t)v20 + *(int *)(v22 + 24), (uint64_t)v21 + *(int *)(v22 + 24), v44);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E9831B4);
}

uint64_t sub_18E9831B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E9832F8);
}

void *sub_18E9832F8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 36);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for PgQuery_CreateSeqStmt()
{
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateTableAsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_51);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateTableAsStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_51);
}

uint64_t getEnumTagSinglePayload for PgQuery_ExplainStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_52);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ExplainStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_52);
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_VacuumStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3296Tm_4);
}

uint64_t storeEnumTagSinglePayload for PgQuery_VacuumStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3297Tm_4);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropdbStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E983E00);
}

uint64_t __swift_get_extra_inhabitant_index_3317Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropdbStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E983EC8);
}

uint64_t __swift_store_extra_inhabitant_index_3318Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_Alias(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_Alias(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for PgQuery_Alias(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for PgQuery_Alias(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_Alias(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for PgQuery_Alias(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreatedbStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3407Tm_7);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreatedbStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3408Tm_7);
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateDomainStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_53);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateDomainStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_53);
}

uint64_t getEnumTagSinglePayload for PgQuery_LoadStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3495Tm_4);
}

uint64_t storeEnumTagSinglePayload for PgQuery_LoadStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3496Tm_4);
}

uint64_t getEnumTagSinglePayload for PgQuery_ViewStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_54);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ViewStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_54);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_TransactionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = a2[6];
    uint64_t v7 = *(int *)(a3 + 36);
    uint64_t v8 = (uint64_t)a2 + v7;
    uint64_t v9 = a1 + v7;
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_TransactionStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_TransactionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a2 + v6;
  uint64_t v8 = a1 + v6;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_TransactionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_TransactionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_TransactionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_TransactionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E984918);
}

uint64_t sub_18E984918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_TransactionStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E9849DC);
}

uint64_t sub_18E9849DC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_TransactionStmt()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_UnlistenStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3495Tm_5);
}

uint64_t storeEnumTagSinglePayload for PgQuery_UnlistenStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3496Tm_5);
}

uint64_t getEnumTagSinglePayload for PgQuery_ListenStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3495Tm_6);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ListenStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3496Tm_6);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_ReplicaIdentityStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_ReplicaIdentityStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for PgQuery_ReplicaIdentityStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *assignWithCopy for PgQuery_ReplicaIdentityStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_ReplicaIdentityStmt(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for PgQuery_ReplicaIdentityStmt(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_NotifyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3407Tm_8);
}

uint64_t storeEnumTagSinglePayload for PgQuery_NotifyStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E984FC0);
}

uint64_t __swift_store_extra_inhabitant_index_3408Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_RuleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_55);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RuleStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_55);
}

uint64_t getEnumTagSinglePayload for PgQuery_RenameStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_56);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RenameStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_56);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_OidList(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_OidList(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for PgQuery_OidList(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *assignWithCopy for PgQuery_OidList(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *initializeWithTake for PgQuery_OidList(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for PgQuery_OidList(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DoStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E985470);
}

uint64_t __swift_get_extra_inhabitant_index_3486Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_DoStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E985538);
}

void *__swift_store_extra_inhabitant_index_3487Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v13 = (void *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
    uint64_t v16 = *(void *)(ObjectWithArgs - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, ObjectWithArgs))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v19;
      *((unsigned char *)v13 + 16) = *((unsigned char *)v14 + 16);
      uint64_t v20 = *(int *)(ObjectWithArgs + 28);
      uint64_t v21 = (char *)v13 + v20;
      uint64_t v22 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11((uint64_t)v21, (uint64_t)v22, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, ObjectWithArgs);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ObjectWithArgs - 8) + 48))(v6, 1, ObjectWithArgs);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(ObjectWithArgs + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v15 = *(void *)(ObjectWithArgs - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, ObjectWithArgs))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    *((unsigned char *)v12 + 16) = *((unsigned char *)v13 + 16);
    uint64_t v18 = *(int *)(ObjectWithArgs + 28);
    uint64_t v19 = (char *)v12 + v18;
    uint64_t v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10((uint64_t)v19, (uint64_t)v20, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, ObjectWithArgs);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v25 = *(void *)(v10 - 8);
  uint64_t v26 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v25 + 24);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t)a2 + v12;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v16 = *(void *)(ObjectWithArgs - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, ObjectWithArgs);
  int v18 = v17(v14, 1, ObjectWithArgs);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 8) = *(void *)(v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(ObjectWithArgs + 28), v14 + *(int *)(ObjectWithArgs + 28), v26);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  uint64_t v19 = *(int *)(ObjectWithArgs + 28);
  uint64_t v20 = v13 + v19;
  uint64_t v21 = v14 + v19;
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v26);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, ObjectWithArgs);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (unsigned char *)(a1 + v6);
  uint64_t v8 = (unsigned char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (unsigned char *)(a1 + v11);
  uint64_t v13 = (unsigned char *)(a2 + v11);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v15 = *(void *)(ObjectWithArgs - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, ObjectWithArgs))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[16] = v13[16];
    v10(&v12[*(int *)(ObjectWithArgs + 28)], &v13[*(int *)(ObjectWithArgs + 28)], v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, ObjectWithArgs);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v20 = *(void *)(v9 - 8);
  uint64_t v21 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v20 + 40);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (unsigned char *)(a1 + v11);
  uint64_t v13 = (unsigned char *)(a2 + v11);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v15 = *(void *)(ObjectWithArgs - 8);
  uint64_t v16 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, ObjectWithArgs);
  int v17 = v16(v13, 1, ObjectWithArgs);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      swift_bridgeObjectRelease();
      *((void *)v12 + 1) = *((void *)v13 + 1);
      swift_bridgeObjectRelease();
      v12[16] = v13[16];
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v10)(&v12[*(int *)(ObjectWithArgs + 28)], &v13[*(int *)(ObjectWithArgs + 28)], v21);
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  v12[16] = v13[16];
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 32))(&v12[*(int *)(ObjectWithArgs + 28)], &v13[*(int *)(ObjectWithArgs + 28)], v21);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, ObjectWithArgs);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E986110);
}

uint64_t sub_18E986110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E986254);
}

uint64_t sub_18E986254(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_CreateFunctionStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    a1[3] = a2[3];
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v24 = (char *)a1 + v8;
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = v10;
    v11(v24, v9, v10);
    uint64_t v12 = *(int *)(a3 + 40);
    uint64_t v13 = (uint64_t *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
    uint64_t v16 = *(void *)(TypeName - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, TypeName))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      *uint64_t v13 = *v14;
      *((_DWORD *)v13 + 2) = *((_DWORD *)v14 + 2);
      *((_WORD *)v13 + 6) = *((_WORD *)v14 + 6);
      v13[2] = v14[2];
      *((_DWORD *)v13 + 6) = *((_DWORD *)v14 + 6);
      v13[4] = v14[4];
      *((_DWORD *)v13 + 10) = *((_DWORD *)v14 + 10);
      uint64_t v19 = *(int *)(TypeName + 48);
      uint64_t v20 = (char *)v13 + v19;
      uint64_t v21 = (char *)v14 + v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11(v20, v21, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, TypeName);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 48))(v6, 1, TypeName);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(TypeName + 48);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v22 = a1 + v7;
  uint64_t v8 = a2 + v7;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = v9;
  v10(v22, v8, v9);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v15 = *(void *)(TypeName - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, TypeName))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((_DWORD *)v12 + 2) = *((_DWORD *)v13 + 2);
    *((_WORD *)v12 + 6) = *((_WORD *)v13 + 6);
    v12[2] = v13[2];
    *((_DWORD *)v12 + 6) = *((_DWORD *)v13 + 6);
    v12[4] = v13[4];
    *((_DWORD *)v12 + 10) = *((_DWORD *)v13 + 10);
    uint64_t v17 = *(int *)(TypeName + 48);
    uint64_t v18 = (char *)v12 + v17;
    uint64_t v19 = (char *)v13 + v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10((uint64_t)v18, (uint64_t)v19, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, TypeName);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v24 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v15 = *(void *)(TypeName - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, TypeName);
  int v17 = v16(v13, 1, TypeName);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
      *(unsigned char *)(v12 + 12) = *(unsigned char *)(v13 + 12);
      *(unsigned char *)(v12 + 13) = *(unsigned char *)(v13 + 13);
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 40) = *(_DWORD *)(v13 + 40);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(TypeName + 48), v13 + *(int *)(TypeName + 48), v25);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_TypeName);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
  *(unsigned char *)(v12 + 12) = *(unsigned char *)(v13 + 12);
  *(unsigned char *)(v12 + 13) = *(unsigned char *)(v13 + 13);
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  *(_DWORD *)(v12 + 40) = *(_DWORD *)(v13 + 40);
  uint64_t v18 = *(int *)(TypeName + 48);
  uint64_t v19 = v12 + v18;
  uint64_t v20 = v13 + v18;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v19, v20, v25);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, TypeName);
  return a1;
}

uint64_t initializeWithTake for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v15 = *(void *)(TypeName - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, TypeName))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((_DWORD *)v12 + 2) = *((_DWORD *)v13 + 2);
    *((_WORD *)v12 + 6) = *((_WORD *)v13 + 6);
    v12[2] = v13[2];
    *((_DWORD *)v12 + 6) = *((_DWORD *)v13 + 6);
    v12[4] = v13[4];
    *((_DWORD *)v12 + 10) = *((_DWORD *)v13 + 10);
    v10((char *)v12 + *(int *)(TypeName + 48), (char *)v13 + *(int *)(TypeName + 48), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, TypeName);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v20 = *(void *)(v9 - 8);
  uint64_t v21 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v20 + 40);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v15 = *(void *)(TypeName - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, TypeName);
  int v17 = v16(v13, 1, TypeName);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
      *(unsigned char *)(v12 + 12) = *(unsigned char *)(v13 + 12);
      *(unsigned char *)(v12 + 13) = *(unsigned char *)(v13 + 13);
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 40) = *(_DWORD *)(v13 + 40);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(TypeName + 48), v13 + *(int *)(TypeName + 48), v21);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_TypeName);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
    memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
  *(_WORD *)(v12 + 12) = *(_WORD *)(v13 + 12);
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  *(_DWORD *)(v12 + 40) = *(_DWORD *)(v13 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v12 + *(int *)(TypeName + 48), v13 + *(int *)(TypeName + 48), v21);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, TypeName);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E9870D4);
}

uint64_t sub_18E9870D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3591Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_TypeName?);
}

uint64_t __swift_get_extra_inhabitant_index_3591Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = a1 + *(int *)(a3 + 36);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      return v14(v13, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
      uint64_t v17 = v15;
      uint64_t v18 = a1 + *(int *)(a3 + 40);
      return v16(v18, a2, v17);
    }
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E987224);
}

uint64_t sub_18E987224(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3592Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_TypeName?);
}

uint64_t __swift_store_extra_inhabitant_index_3592Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      uint64_t v12 = v10;
      uint64_t v13 = v6 + *(int *)(a4 + 36);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      return v14(v13, a2, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
      uint64_t v17 = v15;
      uint64_t v18 = v6 + *(int *)(a4 + 40);
      return v16(v18, a2, a2, v17);
    }
  }
  return result;
}

void type metadata completion function for PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for PgQuery_RangeFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, a5, a6);
    if (v9 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for PgQuery_IndexStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_57);
}

uint64_t storeEnumTagSinglePayload for PgQuery_IndexStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_57);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_FetchStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    uint64_t v5 = *(int *)(a3 + 32);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PgQuery_FetchStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_FetchStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_FetchStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_FetchStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_FetchStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_FetchStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E98791C);
}

uint64_t sub_18E98791C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_FetchStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E9879E0);
}

uint64_t sub_18E9879E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_FetchStmt()
{
  return type metadata completion function for PgQuery_InlineCodeBlock();
}

uint64_t getEnumTagSinglePayload for PgQuery_CommentStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_58);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CommentStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_58);
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_TruncateStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_WithClause(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_TruncateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_TruncateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_TruncateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_TruncateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_TruncateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E987EFC);
}

uint64_t __swift_get_extra_inhabitant_index_3296Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_TruncateStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E987FC4);
}

void *__swift_store_extra_inhabitant_index_3297Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_TruncateStmt()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_DropStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v6 = *(int *)(a3 + 36);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    *(_WORD *)(a1 + 33) = *(_WORD *)((char *)a2 + 33);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_DropStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_DropStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 36);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_DropStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DropStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 36);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, v6, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_DropStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  char v6 = *(unsigned char *)(a2 + 34);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a2 + v7;
  uint64_t v9 = a1 + v7;
  *(unsigned char *)(a1 + 34) = v6;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v9, v8, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DropStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E988590);
}

uint64_t __swift_get_extra_inhabitant_index_3798Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_DropStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E988658);
}

void *__swift_store_extra_inhabitant_index_3799Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 36);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_DropStmt()
{
  return type metadata completion function for PgQuery_SortGroupClause();
}

void *initializeBufferWithCopyOfBuffer for PgQuery_DefineStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v6 = *(int *)(a3 + 44);
    uint64_t v7 = (uint64_t)a2 + v6;
    uint64_t v8 = a1 + v6;
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_DefineStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_DefineStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
  uint64_t v7 = *(int *)(a3 + 44);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_DefineStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_DefineStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_DefineStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E988CA8);
}

uint64_t __swift_get_extra_inhabitant_index_3729Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_DefineStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E988D70);
}

uint64_t __swift_store_extra_inhabitant_index_3730Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_DefineStmt()
{
  return type metadata completion function for PgQuery_AlterTSConfigurationStmt();
}

uint64_t getEnumTagSinglePayload for PgQuery_CreateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_59);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CreateStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_59);
}

uint64_t getEnumTagSinglePayload for PgQuery_CopyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_60);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CopyStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_60);
}

void *initializeBufferWithCopyOfBuffer for PgQuery_ClusterStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    uint64_t v17 = *(void *)(RangeVar - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      uint64_t v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      uint64_t v22 = v15[5];
      v14[4] = v15[4];
      v14[5] = v22;
      *((unsigned char *)v14 + 48) = *((unsigned char *)v15 + 48);
      int v38 = v12;
      uint64_t v23 = v15[8];
      v14[7] = v15[7];
      v14[8] = v23;
      *((_DWORD *)v14 + 18) = *((_DWORD *)v15 + 18);
      uint64_t v24 = *(int *)(RangeVar + 40);
      uint64_t v35 = (char *)v15 + v24;
      int v37 = (char *)v14 + v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v37, v35, v11);
      uint64_t v25 = *(int *)(RangeVar + 44);
      uint64_t v26 = (void *)((char *)v14 + v25);
      size_t v27 = (void *)((char *)v15 + v25);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v29 = *(void *)(Alias - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, Alias))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        uint64_t v31 = v27[1];
        *uint64_t v26 = *v27;
        v26[1] = v31;
        v26[2] = v27[2];
        uint64_t v32 = *(int *)(Alias + 24);
        uint64_t v36 = (char *)v26 + v32;
        uint64_t v33 = (char *)v27 + v32;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38(v36, v33, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, Alias);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RangeVar);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 48))(v6, 1, RangeVar);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(RangeVar + 40), v5);
    uint64_t v9 = v6 + *(int *)(RangeVar + 44);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 48))(v9, 1, Alias);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v9 + *(int *)(Alias + 24);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_ClusterStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v16 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    uint64_t v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    uint64_t v20 = v14[5];
    v13[4] = v14[4];
    v13[5] = v20;
    *((unsigned char *)v13 + 48) = *((unsigned char *)v14 + 48);
    uint64_t v36 = v11;
    uint64_t v21 = v14[8];
    v13[7] = v14[7];
    v13[8] = v21;
    *((_DWORD *)v13 + 18) = *((_DWORD *)v14 + 18);
    uint64_t v22 = *(int *)(RangeVar + 40);
    uint64_t v33 = (char *)v14 + v22;
    uint64_t v35 = (char *)v13 + v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v35, v33, v10);
    uint64_t v23 = *(int *)(RangeVar + 44);
    uint64_t v24 = (void *)((char *)v13 + v23);
    uint64_t v25 = (void *)((char *)v14 + v23);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v27 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, Alias))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v29 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v29;
      v24[2] = v25[2];
      uint64_t v30 = *(int *)(Alias + 24);
      uint64_t v34 = (char *)v24 + v30;
      uint64_t v31 = (char *)v25 + v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v34, v31, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, Alias);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_ClusterStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v49 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16(v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *(void *)(v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      *(void *)(v12 + 24) = *(void *)(v13 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      *(void *)(v12 + 40) = *(void *)(v13 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
      *(void *)(v12 + 56) = *(void *)(v13 + 56);
      *(void *)(v12 + 64) = *(void *)(v13 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(RangeVar + 40), v13 + *(int *)(RangeVar + 40), v50);
      uint64_t v30 = *(int *)(RangeVar + 44);
      uint64_t v31 = (void *)(v12 + v30);
      uint64_t v32 = (void *)(v13 + v30);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v34 = *(void *)(Alias - 8);
      uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
      int v36 = v35(v31, 1, Alias);
      int v37 = v35(v32, 1, Alias);
      if (v36)
      {
        if (!v37)
        {
          *uint64_t v31 = *v32;
          v31[1] = v32[1];
          v31[2] = v32[2];
          uint64_t v38 = *(int *)(Alias + 24);
          int v39 = (char *)v31 + v38;
          int v40 = (char *)v32 + v38;
          uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v41(v39, v40, v50);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v37)
        {
          *uint64_t v31 = *v32;
          v31[1] = v32[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v31[2] = v32[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          ((void (*)(char *, char *, uint64_t))v10)((char *)v31 + *(int *)(Alias + 24), (char *)v32 + *(int *)(Alias + 24), v50);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_Alias);
      }
      size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v28 = v31;
      uint64_t v29 = v32;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v28 = (void *)v12;
    uint64_t v29 = (const void *)v13;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  *(void *)(v12 + 24) = *(void *)(v13 + 24);
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  *(void *)(v12 + 40) = *(void *)(v13 + 40);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
  *(void *)(v12 + 56) = *(void *)(v13 + 56);
  *(void *)(v12 + 64) = *(void *)(v13 + 64);
  *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
  uint64_t v18 = *(int *)(RangeVar + 40);
  int v46 = (char *)(v13 + v18);
  uint64_t v47 = (char *)(v12 + v18);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = v47;
  uint64_t v48 = v19;
  v19(v20, v46, v50);
  uint64_t v21 = *(int *)(RangeVar + 44);
  uint64_t v22 = (void *)(v12 + v21);
  uint64_t v23 = (void *)(v13 + v21);
  uint64_t v24 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *uint64_t v22 = *v23;
    v22[1] = v23[1];
    v22[2] = v23[2];
    uint64_t v42 = *(int *)(v24 + 24);
    uint64_t v43 = (char *)v22 + v42;
    uint64_t v44 = (char *)v23 + v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v43, v44, v50);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return a1;
}

uint64_t initializeWithTake for PgQuery_ClusterStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    *((unsigned char *)v12 + 48) = *((unsigned char *)v13 + 48);
    *(_OWORD *)((char *)v12 + 56) = *(_OWORD *)((char *)v13 + 56);
    *((_DWORD *)v12 + 18) = *((_DWORD *)v13 + 18);
    v10((char *)v12 + *(int *)(RangeVar + 40), (char *)v13 + *(int *)(RangeVar + 40), v9);
    uint64_t v18 = *(int *)(RangeVar + 44);
    __dst = (void *)((char *)v12 + v18);
    uint64_t v19 = (void *)((char *)v13 + v18);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v21 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, Alias))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      __dst[2] = v19[2];
      v10((char *)__dst + *(int *)(Alias + 24), (char *)v19 + *(int *)(Alias + 24), v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_ClusterStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v45 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v43 + 40);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v16 = *(void *)(RangeVar - 8);
  long long v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, RangeVar);
  int v18 = v17(v14, 1, RangeVar);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v29 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = *(void *)(v14 + 24);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = v30;
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void *)(v14 + 40);
      *(void *)(v13 + 32) = *(void *)(v14 + 32);
      *(void *)(v13 + 40) = v31;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
      uint64_t v32 = *(void *)(v14 + 64);
      *(void *)(v13 + 56) = *(void *)(v14 + 56);
      *(void *)(v13 + 64) = v32;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v45);
      uint64_t v33 = *(int *)(RangeVar + 44);
      uint64_t v34 = v13 + v33;
      uint64_t v35 = (char *)(v14 + v33);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v37 = *(void *)(Alias - 8);
      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      int v39 = v38(v34, 1, Alias);
      int v40 = v38((uint64_t)v35, 1, Alias);
      if (v39)
      {
        if (!v40)
        {
          *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
          *(void *)(v34 + 16) = *((void *)v35 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v34 + *(int *)(Alias + 24), &v35[*(int *)(Alias + 24)], v45);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v40)
        {
          uint64_t v42 = *((void *)v35 + 1);
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = v42;
          swift_bridgeObjectRelease();
          *(void *)(v34 + 16) = *((void *)v35 + 2);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, char *, uint64_t))v11)(v34 + *(int *)(Alias + 24), &v35[*(int *)(Alias + 24)], v45);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Alias);
      }
      size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      size_t v27 = (void *)v34;
      uint64_t v28 = v35;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    size_t v27 = (void *)v13;
    uint64_t v28 = (char *)v14;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v18) {
    goto LABEL_7;
  }
  long long v19 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v19;
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(v14 + 56);
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32);
  v44(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v45);
  uint64_t v20 = *(int *)(RangeVar + 44);
  uint64_t v21 = (void *)(v13 + v20);
  uint64_t v22 = (void *)(v14 + v20);
  uint64_t v23 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    v21[2] = v22[2];
    v44((uint64_t)v21 + *(int *)(v23 + 24), (uint64_t)v22 + *(int *)(v23 + 24), v45);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ClusterStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E98A460);
}

uint64_t sub_18E98A460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3513Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RangeVar?);
}

uint64_t __swift_get_extra_inhabitant_index_3513Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = a1 + *(int *)(a3 + 24);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      return v14(v13, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
      uint64_t v17 = v15;
      uint64_t v18 = a1 + *(int *)(a3 + 28);
      return v16(v18, a2, v17);
    }
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_ClusterStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E98A5B0);
}

uint64_t sub_18E98A5B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3697Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_RangeVar?);
}

uint64_t __swift_store_extra_inhabitant_index_3697Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      uint64_t v12 = v10;
      uint64_t v13 = v6 + *(int *)(a4 + 24);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      return v14(v13, a2, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
      uint64_t v17 = v15;
      uint64_t v18 = v6 + *(int *)(a4 + 28);
      return v16(v18, a2, a2, v17);
    }
  }
  return result;
}

void type metadata completion function for PgQuery_ClusterStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v9 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, a6, a7);
    if (v10 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_BitString(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    unint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_BitString(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for PgQuery_BitString(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for PgQuery_BitString(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PgQuery_BitString(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for PgQuery_BitString(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ClosePortalStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E98ABC4);
}

uint64_t __swift_get_extra_inhabitant_index_3495Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_ClosePortalStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E98AC8C);
}

uint64_t __swift_store_extra_inhabitant_index_3496Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_AlterDefaultPrivilegesStmt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
    uint64_t v17 = *(void *)(GrantStmt - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, GrantStmt))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((void *)v14 + 1) = *((void *)v15 + 1);
      v14[16] = v15[16];
      *((void *)v14 + 3) = *((void *)v15 + 3);
      v14[32] = v15[32];
      uint64_t v19 = *((void *)v15 + 6);
      *((void *)v14 + 5) = *((void *)v15 + 5);
      *((void *)v14 + 6) = v19;
      *((void *)v14 + 7) = *((void *)v15 + 7);
      v14[64] = v15[64];
      *((void *)v14 + 9) = *((void *)v15 + 9);
      v14[80] = v15[80];
      uint64_t v20 = *(int *)(GrantStmt + 48);
      uint64_t v23 = &v14[v20];
      uint64_t v21 = &v15[v20];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12(v23, v21, v11);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, GrantStmt);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_AlterDefaultPrivilegesStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(GrantStmt - 8) + 48))(v6, 1, GrantStmt);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(GrantStmt + 48);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for PgQuery_AlterDefaultPrivilegesStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  uint64_t v15 = *(void *)(GrantStmt - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, GrantStmt))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 1) = *((void *)v13 + 1);
    v12[16] = v13[16];
    *((void *)v12 + 3) = *((void *)v13 + 3);
    v12[32] = v13[32];
    uint64_t v17 = *((void *)v13 + 6);
    *((void *)v12 + 5) = *((void *)v13 + 5);
    *((void *)v12 + 6) = v17;
    *((void *)v12 + 7) = *((void *)v13 + 7);
    v12[64] = v13[64];
    *((void *)v12 + 9) = *((void *)v13 + 9);
    v12[80] = v13[80];
    uint64_t v18 = *(int *)(GrantStmt + 48);
    uint64_t v21 = &v12[v18];
    uint64_t v19 = &v13[v18];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v21, v19, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, GrantStmt);
  }
  return a1;
}

void *assignWithCopy for PgQuery_AlterDefaultPrivilegesStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *))(v10 + 24);
  uint64_t v31 = v9;
  v11(v7, v8);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v32 = a1;
  uint64_t v13 = (uint64_t)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  uint64_t v16 = *(void *)(GrantStmt - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, GrantStmt);
  int v18 = v17((uint64_t)v14, 1, GrantStmt);
  if (!v8)
  {
    if (!v18)
    {
      *(unsigned char *)uint64_t v13 = *v14;
      uint64_t v28 = *((void *)v14 + 1);
      *(unsigned char *)(v13 + 16) = v14[16];
      *(void *)(v13 + 8) = v28;
      uint64_t v29 = *((void *)v14 + 3);
      *(unsigned char *)(v13 + 32) = v14[32];
      *(void *)(v13 + 24) = v29;
      *(void *)(v13 + 40) = *((void *)v14 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 48) = *((void *)v14 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 56) = *((void *)v14 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v13 + 64) = v14[64];
      uint64_t v30 = *((void *)v14 + 9);
      *(unsigned char *)(v13 + 80) = v14[80];
      *(void *)(v13 + 72) = v30;
      ((void (*)(uint64_t, char *, uint64_t))v11)(v13 + *(int *)(GrantStmt + 48), &v14[*(int *)(GrantStmt + 48)], v31);
      return v32;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_GrantStmt);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
    memcpy((void *)v13, v14, *(void *)(*(void *)(v26 - 8) + 64));
    return v32;
  }
  *(unsigned char *)uint64_t v13 = *v14;
  uint64_t v19 = *((void *)v14 + 1);
  *(unsigned char *)(v13 + 16) = v14[16];
  *(void *)(v13 + 8) = v19;
  uint64_t v20 = *((void *)v14 + 3);
  *(unsigned char *)(v13 + 32) = v14[32];
  *(void *)(v13 + 24) = v20;
  *(void *)(v13 + 40) = *((void *)v14 + 5);
  *(void *)(v13 + 48) = *((void *)v14 + 6);
  *(void *)(v13 + 56) = *((void *)v14 + 7);
  *(unsigned char *)(v13 + 64) = v14[64];
  uint64_t v21 = *((void *)v14 + 9);
  *(unsigned char *)(v13 + 80) = v14[80];
  *(void *)(v13 + 72) = v21;
  uint64_t v22 = *(int *)(GrantStmt + 48);
  uint64_t v23 = v13 + v22;
  uint64_t v24 = &v14[v22];
  uint64_t v25 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25(v23, v24, v31);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, GrantStmt);
  return v32;
}

void *initializeWithTake for PgQuery_AlterDefaultPrivilegesStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  uint64_t v15 = *(void *)(GrantStmt - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, GrantStmt))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 1) = *((void *)v13 + 1);
    v12[16] = v13[16];
    *((void *)v12 + 3) = *((void *)v13 + 3);
    v12[32] = v13[32];
    *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
    *((void *)v12 + 7) = *((void *)v13 + 7);
    v12[64] = v13[64];
    uint64_t v17 = *((void *)v13 + 9);
    v12[80] = v13[80];
    *((void *)v12 + 9) = v17;
    v10(&v12[*(int *)(GrantStmt + 48)], &v13[*(int *)(GrantStmt + 48)], v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, GrantStmt);
  }
  return a1;
}

void *assignWithTake for PgQuery_AlterDefaultPrivilegesStmt(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *))(v10 + 40);
  uint64_t v22 = v9;
  v11(v7, v8);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v23 = a1;
  uint64_t v13 = (uint64_t)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  uint64_t v16 = *(void *)(GrantStmt - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, GrantStmt);
  int v18 = v17((uint64_t)v14, 1, GrantStmt);
  if (!v8)
  {
    if (!v18)
    {
      *(unsigned char *)uint64_t v13 = *v14;
      *(void *)(v13 + 8) = *((void *)v14 + 1);
      *(unsigned char *)(v13 + 16) = v14[16];
      *(void *)(v13 + 24) = *((void *)v14 + 3);
      *(unsigned char *)(v13 + 32) = v14[32];
      *(void *)(v13 + 40) = *((void *)v14 + 5);
      swift_bridgeObjectRelease();
      *(void *)(v13 + 48) = *((void *)v14 + 6);
      swift_bridgeObjectRelease();
      *(void *)(v13 + 56) = *((void *)v14 + 7);
      swift_bridgeObjectRelease();
      *(unsigned char *)(v13 + 64) = v14[64];
      *(void *)(v13 + 72) = *((void *)v14 + 9);
      *(unsigned char *)(v13 + 80) = v14[80];
      ((void (*)(uint64_t, char *, uint64_t))v11)(v13 + *(int *)(GrantStmt + 48), &v14[*(int *)(GrantStmt + 48)], v22);
      return v23;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_GrantStmt);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
    memcpy((void *)v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    return v23;
  }
  *(unsigned char *)uint64_t v13 = *v14;
  *(void *)(v13 + 8) = *((void *)v14 + 1);
  *(unsigned char *)(v13 + 16) = v14[16];
  *(void *)(v13 + 24) = *((void *)v14 + 3);
  *(unsigned char *)(v13 + 32) = v14[32];
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(v14 + 40);
  *(void *)(v13 + 56) = *((void *)v14 + 7);
  *(unsigned char *)(v13 + 64) = v14[64];
  uint64_t v19 = *((void *)v14 + 9);
  *(unsigned char *)(v13 + 80) = v14[80];
  *(void *)(v13 + 72) = v19;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v13 + *(int *)(GrantStmt + 48), &v14[*(int *)(GrantStmt + 48)], v22);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, GrantStmt);
  return v23;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterDefaultPrivilegesStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E98BA2C);
}

uint64_t sub_18E98BA2C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3744Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
}

uint64_t __swift_get_extra_inhabitant_index_3744Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v5 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = (char *)a1 + *(int *)(a3 + 20);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
      return v14(v13, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
      uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
      uint64_t v17 = v15;
      int v18 = (char *)a1 + *(int *)(a3 + 24);
      return v16(v18, a2, v17);
    }
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterDefaultPrivilegesStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E98BB7C);
}

void *sub_18E98BB7C(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3745Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
}

void *__swift_store_extra_inhabitant_index_3745Tm(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      uint64_t v12 = v10;
      uint64_t v13 = (char *)v6 + *(int *)(a4 + 20);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      return (void *)v14(v13, a2, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
      uint64_t v17 = v15;
      int v18 = (char *)v6 + *(int *)(a4 + 24);
      return (void *)v16(v18, a2, a2, v17);
    }
  }
  return result;
}

void type metadata completion function for PgQuery_AlterDefaultPrivilegesStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for PgQuery_CompositeTypeStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, a5, a6);
    if (v9 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v14 = (void *)(v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
    uint64_t v17 = *(void *)(RoleSpec - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RoleSpec))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
      uint64_t v19 = v15[3];
      v14[2] = v15[2];
      v14[3] = v19;
      *((_DWORD *)v14 + 8) = *((_DWORD *)v15 + 8);
      uint64_t v20 = *(int *)(RoleSpec + 28);
      uint64_t v21 = (char *)v14 + v20;
      uint64_t v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      v12((uint64_t)v21, (uint64_t)v22, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RoleSpec);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 48))(v6, 1, RoleSpec);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(RoleSpec + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v16 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RoleSpec))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((unsigned char *)v13 + 8) = *((unsigned char *)v14 + 8);
    uint64_t v18 = v14[3];
    v13[2] = v14[2];
    v13[3] = v18;
    *((_DWORD *)v13 + 8) = *((_DWORD *)v14 + 8);
    uint64_t v19 = *(int *)(RoleSpec + 28);
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11((uint64_t)v20, (uint64_t)v21, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v6 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v27 = *(void *)(v10 - 8);
  uint64_t v28 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v27 + 24);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v16 = *(void *)(RoleSpec - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, RoleSpec);
  int v18 = v17((uint64_t)v14, 1, RoleSpec);
  if (!v9)
  {
    if (!v18)
    {
      uint64_t v26 = *v14;
      *(unsigned char *)(v13 + 8) = *((unsigned char *)v14 + 8);
      *(void *)uint64_t v13 = v26;
      *(void *)(v13 + 16) = v14[2];
      *(void *)(v13 + 24) = v14[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 32) = *((_DWORD *)v14 + 8);
      ((void (*)(uint64_t, char *, uint64_t))v11)(v13 + *(int *)(RoleSpec + 28), (char *)v14 + *(int *)(RoleSpec + 28), v28);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v13, v14, *(void *)(*(void *)(v24 - 8) + 64));
    return a1;
  }
  uint64_t v19 = *v14;
  *(unsigned char *)(v13 + 8) = *((unsigned char *)v14 + 8);
  *(void *)uint64_t v13 = v19;
  *(void *)(v13 + 16) = v14[2];
  *(void *)(v13 + 24) = v14[3];
  *(_DWORD *)(v13 + 32) = *((_DWORD *)v14 + 8);
  uint64_t v20 = *(int *)(RoleSpec + 28);
  uint64_t v21 = v13 + v20;
  uint64_t v22 = (uint64_t)v14 + v20;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  swift_bridgeObjectRetain();
  v23(v21, v22, v28);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RoleSpec);
  return a1;
}

uint64_t initializeWithTake for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
    v10((char *)v12 + *(int *)(RoleSpec + 28), (char *)v13 + *(int *)(RoleSpec + 28), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void *)(v9 - 8);
  uint64_t v22 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v21 + 40);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RoleSpec);
  int v17 = v16(v13, 1, RoleSpec);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
      uint64_t v20 = *(void *)(v13 + 24);
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      *(void *)(v12 + 24) = v20;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 32) = *(_DWORD *)(v13 + 32);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(RoleSpec + 28), v13 + *(int *)(RoleSpec + 28), v22);
      return a1;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
    memcpy((void *)v12, (const void *)v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
  *(_DWORD *)(v12 + 32) = *(_DWORD *)(v13 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v12 + *(int *)(RoleSpec + 28), v13 + *(int *)(RoleSpec + 28), v22);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RoleSpec);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E98C9B0);
}

uint64_t sub_18E98C9B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3792Tm(a1, a2, a3, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

uint64_t __swift_get_extra_inhabitant_index_3792Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v5 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = (char *)a1 + *(int *)(a3 + 36);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
      return v14(v13, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
      uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
      uint64_t v17 = v15;
      uint64_t v18 = (char *)a1 + *(int *)(a3 + 40);
      return v16(v18, a2, v17);
    }
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E98CB00);
}

void *sub_18E98CB00(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_3793Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
}

void *__swift_store_extra_inhabitant_index_3793Tm(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      uint64_t v12 = v10;
      uint64_t v13 = (char *)v6 + *(int *)(a4 + 36);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      return (void *)v14(v13, a2, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
      uint64_t v17 = v15;
      uint64_t v18 = (char *)v6 + *(int *)(a4 + 40);
      return (void *)v16(v18, a2, a2, v17);
    }
  }
  return result;
}

void type metadata completion function for PgQuery_GrantRoleStmt()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for PgQuery_GrantStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v5 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v5;
    *(void *)(a1 + 56) = a2[7];
    *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
    *(void *)(a1 + 72) = a2[9];
    uint64_t v6 = *(int *)(a3 + 48);
    uint64_t v7 = (uint64_t)a2 + v6;
    uint64_t v8 = a1 + v6;
    *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_GrantStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_GrantStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v5 = *(int *)(a3 + 48);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_GrantStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(int *)(a3 + 48);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for PgQuery_GrantStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v5 = *(int *)(a3 + 48);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)(a1 + 72) = v4;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PgQuery_GrantStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_GrantStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E98D2E8);
}

uint64_t sub_18E98D2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 48);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_GrantStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E98D3AC);
}

uint64_t sub_18E98D3AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 40) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 48);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_GrantStmt()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_SetOperationStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_61);
}

uint64_t storeEnumTagSinglePayload for PgQuery_SetOperationStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_61);
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterDomainStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_62);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterDomainStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_62);
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTableCmd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_63);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTableCmd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_63);
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_AlterTableStmt(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(void *)(a1 + 8) = a2[1];
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (char *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = (void *)(v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
    uint64_t v17 = *(void *)(RangeVar - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v19;
      uint64_t v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      uint64_t v21 = v15[5];
      v14[4] = v15[4];
      v14[5] = v21;
      *((unsigned char *)v14 + 48) = *((unsigned char *)v15 + 48);
      uint64_t v37 = v12;
      uint64_t v22 = v15[8];
      v14[7] = v15[7];
      v14[8] = v22;
      *((_DWORD *)v14 + 18) = *((_DWORD *)v15 + 18);
      uint64_t v23 = *(int *)(RangeVar + 40);
      uint64_t v34 = (char *)v15 + v23;
      int v36 = (char *)v14 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v36, v34, v11);
      uint64_t v24 = *(int *)(RangeVar + 44);
      uint64_t v25 = (void *)((char *)v14 + v24);
      uint64_t v26 = (void *)((char *)v15 + v24);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v28 = *(void *)(Alias - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, Alias))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        uint64_t v30 = v26[1];
        *uint64_t v25 = *v26;
        v25[1] = v30;
        v25[2] = v26[2];
        uint64_t v31 = *(int *)(Alias + 24);
        uint64_t v35 = (char *)v25 + v31;
        uint64_t v32 = (char *)v26 + v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37(v35, v32, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Alias);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, RangeVar);
    }
  }
  return v7;
}

uint64_t destroy for PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 48))(v6, 1, RangeVar);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(RangeVar + 40), v5);
    uint64_t v9 = v6 + *(int *)(RangeVar + 44);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 48))(v9, 1, Alias);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v9 + *(int *)(Alias + 24);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v16 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    uint64_t v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    uint64_t v20 = v14[5];
    v13[4] = v14[4];
    v13[5] = v20;
    *((unsigned char *)v13 + 48) = *((unsigned char *)v14 + 48);
    int v36 = v11;
    uint64_t v21 = v14[8];
    v13[7] = v14[7];
    v13[8] = v21;
    *((_DWORD *)v13 + 18) = *((_DWORD *)v14 + 18);
    uint64_t v22 = *(int *)(RangeVar + 40);
    uint64_t v33 = (char *)v14 + v22;
    uint64_t v35 = (char *)v13 + v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v35, v33, v10);
    uint64_t v23 = *(int *)(RangeVar + 44);
    uint64_t v24 = (void *)((char *)v13 + v23);
    uint64_t v25 = (void *)((char *)v14 + v23);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v27 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, Alias))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v29 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v29;
      v24[2] = v25[2];
      uint64_t v30 = *(int *)(Alias + 24);
      uint64_t v34 = (char *)v24 + v30;
      uint64_t v31 = (char *)v25 + v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v34, v31, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, Alias);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v51 = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v50 + 24);
  v11(v8, v9);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v16 = *(void *)(RangeVar - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1, RangeVar);
  int v18 = v17(v14, 1, RangeVar);
  if (!v9)
  {
    if (!v18)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = *(void *)(v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 32) = *(void *)(v14 + 32);
      *(void *)(v13 + 40) = *(void *)(v14 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
      *(void *)(v13 + 56) = *(void *)(v14 + 56);
      *(void *)(v13 + 64) = *(void *)(v14 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
      ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v13 + *(int *)(RangeVar + 40), v14 + *(int *)(RangeVar + 40), v51);
      uint64_t v31 = *(int *)(RangeVar + 44);
      uint64_t v32 = (void *)(v13 + v31);
      uint64_t v33 = (void *)(v14 + v31);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v35 = *(void *)(Alias - 8);
      int v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v35 + 48);
      int v37 = v36(v32, 1, Alias);
      int v38 = v36(v33, 1, Alias);
      if (v37)
      {
        if (!v38)
        {
          *uint64_t v32 = *v33;
          v32[1] = v33[1];
          v32[2] = v33[2];
          uint64_t v39 = *(int *)(Alias + 24);
          int v40 = (char *)v32 + v39;
          uint64_t v41 = (char *)v33 + v39;
          uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v42(v40, v41, v51);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          *uint64_t v32 = *v33;
          v32[1] = v33[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v32[2] = v33[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          ((void (*)(char *, char *, uint64_t))v11)((char *)v32 + *(int *)(Alias + 24), (char *)v33 + *(int *)(Alias + 24), v51);
          return a1;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_Alias);
      }
      size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v29 = v32;
      uint64_t v30 = v33;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v29 = (void *)v13;
    uint64_t v30 = (const void *)v14;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v18) {
    goto LABEL_7;
  }
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  *(void *)(v13 + 24) = *(void *)(v14 + 24);
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  *(void *)(v13 + 40) = *(void *)(v14 + 40);
  *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
  *(void *)(v13 + 56) = *(void *)(v14 + 56);
  *(void *)(v13 + 64) = *(void *)(v14 + 64);
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 72);
  uint64_t v19 = *(int *)(RangeVar + 40);
  uint64_t v47 = (char *)(v14 + v19);
  uint64_t v48 = (char *)(v13 + v19);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = v48;
  uint64_t v49 = v20;
  v20(v21, v47, v51);
  uint64_t v22 = *(int *)(RangeVar + 44);
  uint64_t v23 = (void *)(v13 + v22);
  uint64_t v24 = (void *)(v14 + v22);
  uint64_t v25 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    *uint64_t v23 = *v24;
    v23[1] = v24[1];
    v23[2] = v24[2];
    uint64_t v43 = *(int *)(v25 + 24);
    uint64_t v44 = (char *)v23 + v43;
    uint64_t v45 = (char *)v24 + v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49(v44, v45, v51);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  return a1;
}

uint64_t initializeWithTake for PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v16 = *(void *)(RangeVar - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    long long v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    v13[2] = v14[2];
    *((unsigned char *)v13 + 48) = *((unsigned char *)v14 + 48);
    *(_OWORD *)((char *)v13 + 56) = *(_OWORD *)((char *)v14 + 56);
    *((_DWORD *)v13 + 18) = *((_DWORD *)v14 + 18);
    v11((char *)v13 + *(int *)(RangeVar + 40), (char *)v14 + *(int *)(RangeVar + 40), v10);
    uint64_t v19 = *(int *)(RangeVar + 44);
    __dst = (void *)((char *)v13 + v19);
    uint64_t v20 = (void *)((char *)v14 + v19);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v22 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, Alias))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(__dst, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v20;
      __dst[2] = v20[2];
      v11((char *)__dst + *(int *)(Alias + 24), (char *)v20 + *(int *)(Alias + 24), v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, Alias);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, RangeVar);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v42 + 40);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, RangeVar);
  int v17 = v16(v13, 1, RangeVar);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v28 = *(void *)(v13 + 8);
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = v28;
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(v13 + 24);
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      *(void *)(v12 + 24) = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = *(void *)(v13 + 40);
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      *(void *)(v12 + 40) = v30;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
      uint64_t v31 = *(void *)(v13 + 64);
      *(void *)(v12 + 56) = *(void *)(v13 + 56);
      *(void *)(v12 + 64) = v31;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
      ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v12 + *(int *)(RangeVar + 40), v13 + *(int *)(RangeVar + 40), v44);
      uint64_t v32 = *(int *)(RangeVar + 44);
      uint64_t v33 = v12 + v32;
      uint64_t v34 = (char *)(v13 + v32);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v36 = *(void *)(Alias - 8);
      int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      int v38 = v37(v33, 1, Alias);
      int v39 = v37((uint64_t)v34, 1, Alias);
      if (v38)
      {
        if (!v39)
        {
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v33 + *(int *)(Alias + 24), &v34[*(int *)(Alias + 24)], v44);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, Alias);
          return a1;
        }
      }
      else
      {
        if (!v39)
        {
          uint64_t v41 = *((void *)v34 + 1);
          *(void *)uint64_t v33 = *(void *)v34;
          *(void *)(v33 + 8) = v41;
          swift_bridgeObjectRelease();
          *(void *)(v33 + 16) = *((void *)v34 + 2);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, char *, uint64_t))v10)(v33 + *(int *)(Alias + 24), &v34[*(int *)(Alias + 24)], v44);
          return a1;
        }
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Alias);
      }
      size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?)
                                  - 8)
                      + 64);
      uint64_t v26 = (void *)v33;
      uint64_t v27 = v34;
      goto LABEL_8;
    }
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_RangeVar);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?)
                                - 8)
                    + 64);
    uint64_t v26 = (void *)v12;
    uint64_t v27 = (char *)v13;
LABEL_8:
    memcpy(v26, v27, v25);
    return a1;
  }
  if (v17) {
    goto LABEL_7;
  }
  long long v18 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v18;
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 56);
  *(_DWORD *)(v12 + 72) = *(_DWORD *)(v13 + 72);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
  v43(v12 + *(int *)(RangeVar + 40), v13 + *(int *)(RangeVar + 40), v44);
  uint64_t v19 = *(int *)(RangeVar + 44);
  uint64_t v20 = (void *)(v12 + v19);
  uint64_t v21 = (void *)(v13 + v19);
  uint64_t v22 = type metadata accessor for PgQuery_Alias(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    v20[2] = v21[2];
    v43((uint64_t)v20 + *(int *)(v22 + 24), (uint64_t)v21 + *(int *)(v22 + 24), v44);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, RangeVar);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E98EACC);
}

uint64_t __swift_get_extra_inhabitant_index_3846Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E98EC14);
}

void *__swift_store_extra_inhabitant_index_3847Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 32);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_UpdateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_64);
}

uint64_t storeEnumTagSinglePayload for PgQuery_UpdateStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_64);
}

uint64_t getEnumTagSinglePayload for PgQuery_DeleteStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_65);
}

uint64_t storeEnumTagSinglePayload for PgQuery_DeleteStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_65);
}

uint64_t getEnumTagSinglePayload for PgQuery_InsertStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_66);
}

uint64_t storeEnumTagSinglePayload for PgQuery_InsertStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_66);
}

uint64_t getEnumTagSinglePayload for PgQuery_RawStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_67);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RawStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_67);
}

uint64_t getEnumTagSinglePayload for PgQuery_JoinExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_68);
}

uint64_t storeEnumTagSinglePayload for PgQuery_JoinExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_68);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_Integer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PgQuery_Integer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

_DWORD *initializeWithCopy for PgQuery_Integer(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for PgQuery_Integer(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_DWORD *initializeWithTake for PgQuery_Integer(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithTake for PgQuery_Integer(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeTblRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E98F17C);
}

uint64_t __swift_get_extra_inhabitant_index_3504Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeTblRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E98F204);
}

uint64_t __swift_store_extra_inhabitant_index_3505Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t getEnumTagSinglePayload for PgQuery_TargetEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_69);
}

uint64_t storeEnumTagSinglePayload for PgQuery_TargetEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_69);
}

uint64_t getEnumTagSinglePayload for PgQuery_InferenceElem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_70);
}

uint64_t storeEnumTagSinglePayload for PgQuery_InferenceElem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_70);
}

uint64_t getEnumTagSinglePayload for PgQuery_NextValueExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_71);
}

uint64_t storeEnumTagSinglePayload for PgQuery_NextValueExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_71);
}

uint64_t getEnumTagSinglePayload for PgQuery_CurrentOfExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_72);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CurrentOfExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_72);
}

uint64_t getEnumTagSinglePayload for PgQuery_SetToDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_73);
}

uint64_t storeEnumTagSinglePayload for PgQuery_SetToDefault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_73);
}

uint64_t getEnumTagSinglePayload for PgQuery_CoerceToDomainValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_74);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CoerceToDomainValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_74);
}

uint64_t getEnumTagSinglePayload for PgQuery_CoerceToDomain(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_75);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CoerceToDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_75);
}

uint64_t getEnumTagSinglePayload for PgQuery_BooleanTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_76);
}

uint64_t storeEnumTagSinglePayload for PgQuery_BooleanTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_76);
}

uint64_t getEnumTagSinglePayload for PgQuery_NullTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_77);
}

uint64_t storeEnumTagSinglePayload for PgQuery_NullTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_77);
}

uint64_t getEnumTagSinglePayload for PgQuery_XmlExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_78);
}

uint64_t storeEnumTagSinglePayload for PgQuery_XmlExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_78);
}

uint64_t getEnumTagSinglePayload for PgQuery_SQLValueFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_79);
}

uint64_t storeEnumTagSinglePayload for PgQuery_SQLValueFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_79);
}

uint64_t getEnumTagSinglePayload for PgQuery_MinMaxExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_80);
}

uint64_t storeEnumTagSinglePayload for PgQuery_MinMaxExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_80);
}

uint64_t getEnumTagSinglePayload for PgQuery_CoalesceExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_81);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CoalesceExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_81);
}

uint64_t getEnumTagSinglePayload for PgQuery_RowCompareExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_82);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RowCompareExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_82);
}

uint64_t getEnumTagSinglePayload for PgQuery_RowExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_83);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RowExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_83);
}

uint64_t getEnumTagSinglePayload for PgQuery_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_84);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_84);
}

uint64_t getEnumTagSinglePayload for PgQuery_CaseTestExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_85);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CaseTestExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_85);
}

uint64_t getEnumTagSinglePayload for PgQuery_CaseWhen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_86);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CaseWhen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_86);
}

uint64_t getEnumTagSinglePayload for PgQuery_CaseExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_87);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CaseExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_87);
}

uint64_t getEnumTagSinglePayload for PgQuery_CollateExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_88);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CollateExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_88);
}

uint64_t getEnumTagSinglePayload for PgQuery_ConvertRowtypeExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_89);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ConvertRowtypeExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_89);
}

uint64_t getEnumTagSinglePayload for PgQuery_ArrayCoerceExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_90);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ArrayCoerceExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_90);
}

uint64_t getEnumTagSinglePayload for PgQuery_CoerceViaIO(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_91);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CoerceViaIO(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_91);
}

uint64_t getEnumTagSinglePayload for PgQuery_RelabelType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_92);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RelabelType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_92);
}

uint64_t getEnumTagSinglePayload for PgQuery_FieldStore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_93);
}

uint64_t storeEnumTagSinglePayload for PgQuery_FieldStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_93);
}

uint64_t getEnumTagSinglePayload for PgQuery_FieldSelect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_94);
}

uint64_t storeEnumTagSinglePayload for PgQuery_FieldSelect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_94);
}

uint64_t getEnumTagSinglePayload for PgQuery_AlternativeSubPlan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_95);
}

uint64_t storeEnumTagSinglePayload for PgQuery_AlternativeSubPlan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_95);
}

uint64_t getEnumTagSinglePayload for PgQuery_SubPlan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_96);
}

uint64_t storeEnumTagSinglePayload for PgQuery_SubPlan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_96);
}

uint64_t getEnumTagSinglePayload for PgQuery_SubLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_97);
}

uint64_t storeEnumTagSinglePayload for PgQuery_SubLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_97);
}

uint64_t getEnumTagSinglePayload for PgQuery_BoolExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_98);
}

uint64_t storeEnumTagSinglePayload for PgQuery_BoolExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_98);
}

uint64_t getEnumTagSinglePayload for PgQuery_ScalarArrayOpExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_99);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ScalarArrayOpExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_99);
}

uint64_t getEnumTagSinglePayload for PgQuery_NullIfExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_100);
}

uint64_t storeEnumTagSinglePayload for PgQuery_NullIfExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_100);
}

uint64_t getEnumTagSinglePayload for PgQuery_DistinctExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_101);
}

uint64_t storeEnumTagSinglePayload for PgQuery_DistinctExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_101);
}

uint64_t getEnumTagSinglePayload for PgQuery_OpExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_102);
}

uint64_t storeEnumTagSinglePayload for PgQuery_OpExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_102);
}

uint64_t getEnumTagSinglePayload for PgQuery_NamedArgExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_103);
}

uint64_t storeEnumTagSinglePayload for PgQuery_NamedArgExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_103);
}

uint64_t getEnumTagSinglePayload for PgQuery_SubscriptingRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_104);
}

uint64_t storeEnumTagSinglePayload for PgQuery_SubscriptingRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_104);
}

uint64_t getEnumTagSinglePayload for PgQuery_WindowFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_105);
}

uint64_t storeEnumTagSinglePayload for PgQuery_WindowFunc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_105);
}

uint64_t getEnumTagSinglePayload for PgQuery_GroupingFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_106);
}

uint64_t storeEnumTagSinglePayload for PgQuery_GroupingFunc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_106);
}

uint64_t getEnumTagSinglePayload for PgQuery_Aggref(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_107);
}

uint64_t storeEnumTagSinglePayload for PgQuery_Aggref(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_107);
}

uint64_t getEnumTagSinglePayload for PgQuery_Param(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_108);
}

uint64_t storeEnumTagSinglePayload for PgQuery_Param(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_108);
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_InferClause(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for PgQuery_InferClause(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t initializeWithCopy for PgQuery_InferClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PgQuery_InferClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PgQuery_InferClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PgQuery_InferClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_Var(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E98FDEC);
}

uint64_t __swift_get_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_Var(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E98FEC4);
}

uint64_t __swift_store_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_InferClause()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_ParseResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3407Tm_9);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ParseResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3408Tm_8);
}

uint64_t type metadata accessor for PgQuery_ParseResult(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ParseResult);
}

uint64_t type metadata completion function for PgQuery_ParseResult()
{
  return type metadata completion function for PgQuery_Alias();
}

uint64_t *initializeBufferWithCopyOfBuffer for PgQuery_ParseResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    a1[1] = a2[1];
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_ParseResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_ParseResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_ParseResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_ParseResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_ScanResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E99046C);
}

uint64_t __swift_get_extra_inhabitant_index_3407Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_ScanResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3408Tm_9);
}

uint64_t type metadata accessor for PgQuery_ScanResult(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ScanResult);
}

unint64_t lazy protocol witness table accessor for type PgQuery_ParamKind and conformance PgQuery_ParamKind()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind;
  if (!lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind;
  if (!lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind;
  if (!lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind;
  if (!lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ParamKind and conformance PgQuery_ParamKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_AggSplit and conformance PgQuery_AggSplit()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit;
  if (!lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit;
  if (!lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit;
  if (!lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit;
  if (!lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AggSplit and conformance PgQuery_AggSplit);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType;
  if (!lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType;
  if (!lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType;
  if (!lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType;
  if (!lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType;
  if (!lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType;
  if (!lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType;
  if (!lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType;
  if (!lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp;
  if (!lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp;
  if (!lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp;
  if (!lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp;
  if (!lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp;
  if (!lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp;
  if (!lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp;
  if (!lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp;
  if (!lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType;
  if (!lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_NullTestType and conformance PgQuery_NullTestType()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_NullTestType and conformance PgQuery_NullTestType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType;
  if (!lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_JoinType and conformance PgQuery_JoinType()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType;
  if (!lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType;
  if (!lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType;
  if (!lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType;
  if (!lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_JoinType and conformance PgQuery_JoinType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction;
  if (!lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_CmdType and conformance PgQuery_CmdType()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType;
  if (!lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType;
  if (!lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType;
  if (!lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType;
  if (!lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CmdType and conformance PgQuery_CmdType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_QuerySource and conformance PgQuery_QuerySource()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource;
  if (!lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource;
  if (!lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource;
  if (!lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource;
  if (!lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_QuerySource and conformance PgQuery_QuerySource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind;
  if (!lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind;
  if (!lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind;
  if (!lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind;
  if (!lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_LimitOption and conformance PgQuery_LimitOption()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption;
  if (!lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption;
  if (!lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption;
  if (!lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption;
  if (!lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_LimitOption and conformance PgQuery_LimitOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_SetOperation and conformance PgQuery_SetOperation()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation;
  if (!lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation;
  if (!lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation;
  if (!lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation;
  if (!lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SetOperation and conformance PgQuery_SetOperation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType;
  if (!lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType;
  if (!lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType;
  if (!lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType;
  if (!lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior;
  if (!lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior;
  if (!lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior;
  if (!lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior;
  if (!lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType;
  if (!lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType;
  if (!lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType;
  if (!lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType;
  if (!lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ObjectType and conformance PgQuery_ObjectType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption;
  if (!lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption;
  if (!lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption;
  if (!lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption;
  if (!lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext;
  if (!lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind;
  if (!lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind;
  if (!lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind;
  if (!lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind;
  if (!lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_SortByDir and conformance PgQuery_SortByDir()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByDir and conformance PgQuery_SortByDir);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls;
  if (!lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_ConstrType and conformance PgQuery_ConstrType()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType;
  if (!lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType;
  if (!lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType;
  if (!lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType;
  if (!lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ConstrType and conformance PgQuery_ConstrType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction;
  if (!lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction;
  if (!lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction;
  if (!lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction;
  if (!lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_RTEKind and conformance PgQuery_RTEKind()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind;
  if (!lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind;
  if (!lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind;
  if (!lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind;
  if (!lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_RTEKind and conformance PgQuery_RTEKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_WCOKind and conformance PgQuery_WCOKind()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind;
  if (!lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind;
  if (!lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind;
  if (!lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind;
  if (!lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_WCOKind and conformance PgQuery_WCOKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode;
  if (!lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode;
  if (!lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode;
  if (!lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode;
  if (!lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize;
  if (!lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize;
  if (!lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize;
  if (!lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize;
  if (!lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind()
{
  unint64_t result = lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind;
  if (!lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind;
  if (!lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind;
  if (!lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind;
  if (!lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind);
  }
  return result;
}

uint64_t PgQuery_PartitionRangeDatum.decodeMessage<A>(decoder:)()
{
  uint64_t v1 = v0;
  specialized PgQuery_PartitionRangeDatum._uniqueStorage()();
  type metadata accessor for PgQuery_PartitionRangeDatum(0);
  swift_retain();
  uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v3) {
        return swift_release();
      }
      if (v2 == 1) {
        break;
      }
      if (v2 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v5 = v1;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (v2 == 3)
      {
        uint64_t v5 = v1;
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    lazy protocol witness table accessor for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind();
    uint64_t v5 = v1;
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
    uint64_t v1 = v5;
    goto LABEL_6;
  }
  return swift_release();
}

uint64_t PgQuery_PartitionRangeDatum.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v18 = (uint64_t)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for PgQuery_PartitionRangeDatum(0) + 20);
  uint64_t v17 = v2;
  uint64_t v12 = *(void *)(v2 + v11);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v21 = a2;
  if (v13)
  {
    char v14 = *(unsigned char *)(v12 + 24);
    uint64_t v19 = v13;
    char v20 = v14;
    lazy protocol witness table accessor for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v3) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__value, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) != 1)
  {
    uint64_t v15 = v18;
    outlined init with take of PgQuery_OidList((uint64_t)v7, v18, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v15, type metadata accessor for PgQuery_Node);
    if (!v3) {
      goto LABEL_8;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v3) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_PartitionRangeDatum@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_PartitionRangeDatum._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Node@<X0>(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(a1 + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;

  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_PartitionRangeDatum()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_PartitionRangeDatum()
{
  return PgQuery_PartitionRangeDatum.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_PartitionRangeDatum(uint64_t a1, uint64_t a2)
{
  return PgQuery_PartitionRangeDatum.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_PartitionRangeDatum(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionRangeDatum);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PartitionRangeDatum@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PartitionRangeDatum._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_PartitionRangeDatum(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionRangeDatum);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PartitionRangeDatum(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionRangeDatum);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_PartitionCmd.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_PartitionCmd(0);
        type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar;
        unint64_t v4 = &lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar;
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_PartitionCmd(0);
    type metadata accessor for PgQuery_PartitionBoundSpec(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec;
    unint64_t v4 = &lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec;
LABEL_5:
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_PartitionCmd.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v27 = a3;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v23 = (uint64_t)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  uint64_t v22 = *(void *)(PartitionBoundSpec - 8);
  MEMORY[0x1F4188790](PartitionBoundSpec);
  uint64_t v21 = (uint64_t)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v13 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
  outlined init with copy of PgQuery_Alias?(v5 + *(int *)(PartitionCmd + 20), (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v15, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_RangeVar);
    if (v4) {
      return result;
    }
  }
  uint64_t v18 = v23;
  outlined init with copy of PgQuery_Alias?(v5 + *(int *)(PartitionCmd + 24), v23, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v18, 1, PartitionBoundSpec) == 1)
  {
    outlined destroy of AnyValue?(v18, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  }
  else
  {
    uint64_t v19 = v18;
    uint64_t v20 = v21;
    outlined init with take of PgQuery_OidList(v19, v21, type metadata accessor for PgQuery_PartitionBoundSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_PartitionBoundSpec);
    if (v4) {
      return result;
    }
  }
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_PartitionCmd@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v4, 1, 1, RangeVar);
  uint64_t v6 = a2 + *(int *)(a1 + 24);
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(PartitionBoundSpec - 8) + 56);

  return v8(v6, 1, 1, PartitionBoundSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_PartitionCmd()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_Node@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_Node(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_PartitionCmd()
{
  return PgQuery_PartitionCmd.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_PartitionCmd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_PartitionCmd.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_PartitionCmd(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionCmd);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PartitionCmd@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PartitionCmd._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_PartitionCmd(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionCmd);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PartitionCmd(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionCmd);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_VacuumRelation.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_VacuumRelation(0);
        type metadata accessor for PgQuery_RangeVar(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_VacuumRelation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  v14[3] = a3;
  v14[1] = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v10 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = type metadata accessor for PgQuery_VacuumRelation(0);
  outlined init with copy of PgQuery_Alias?(v5 + *(int *)(v14[0] + 28), (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_RangeVar);
    if (v4) {
      return result;
    }
  }
  if (!*(_DWORD *)v5 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!*(void *)(*(void *)(v5 + 8) + 16)) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v4) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_VacuumRelation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = MEMORY[0x1E4FBC860];
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56);

  return v6(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_VacuumRelation()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_ParseResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_ParseResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_VacuumRelation()
{
  return PgQuery_VacuumRelation.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_VacuumRelation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_VacuumRelation.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_VacuumRelation(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumRelation);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_VacuumRelation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_VacuumRelation._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_VacuumRelation(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumRelation);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_VacuumRelation(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumRelation);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_InlineCodeBlock.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_InlineCodeBlock.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 16)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      if (*(unsigned char *)(v0 + 20) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        if (*(unsigned char *)(v0 + 21) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_InlineCodeBlock(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_InlineCodeBlock@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 20) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_InlineCodeBlock()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_InlineCodeBlock()
{
  return PgQuery_InlineCodeBlock.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_InlineCodeBlock()
{
  return PgQuery_InlineCodeBlock.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, (void (*)(uint64_t))type metadata accessor for PgQuery_InlineCodeBlock);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_InlineCodeBlock@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_InlineCodeBlock._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_InlineCodeBlock(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, (void (*)(uint64_t))type metadata accessor for PgQuery_InlineCodeBlock);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_InlineCodeBlock(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, (void (*)(uint64_t))type metadata accessor for PgQuery_InlineCodeBlock);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CallContext.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
  }
  return result;
}

uint64_t PgQuery_CallContext.traverse<A>(visitor:)()
{
  if (*v0 != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for PgQuery_CallContext(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CallContext@<X0>(unsigned char *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CallContext()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_Integer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_Integer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CallContext()
{
  return PgQuery_CallContext.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CallContext()
{
  return PgQuery_CallContext.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CallContext(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, (void (*)(uint64_t))type metadata accessor for PgQuery_CallContext);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CallContext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CallContext._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CallContext(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, (void (*)(uint64_t))type metadata accessor for PgQuery_CallContext);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CallContext(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, (void (*)(uint64_t))type metadata accessor for PgQuery_CallContext);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_ScanToken.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 4:
          lazy protocol witness table accessor for type PgQuery_Token and conformance PgQuery_Token();
          goto LABEL_9;
        case 5:
          lazy protocol witness table accessor for type PgQuery_KeywordKind and conformance PgQuery_KeywordKind();
LABEL_9:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ScanToken.traverse<A>(visitor:)()
{
  if (!*(_DWORD *)v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 4) || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!PgQuery_Token.rawValue.getter(*(void *)(v0 + 8), *(unsigned char *)(v0 + 16))
        || (lazy protocol witness table accessor for type PgQuery_Token and conformance PgQuery_Token(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        if (!*(void *)(v0 + 24)
          || (lazy protocol witness table accessor for type PgQuery_KeywordKind and conformance PgQuery_KeywordKind(),
              uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v1))
        {
          type metadata accessor for PgQuery_ScanToken(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ScanToken@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ScanToken()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_FetchStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_FetchStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ScanToken()
{
  return PgQuery_ScanToken.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ScanToken()
{
  return PgQuery_ScanToken.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ScanToken(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanToken);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ScanToken@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ScanToken._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ScanToken(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanToken);

  return MEMORY[0x1F4127378](a1, Scan);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PgQuery_ParseResult()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ScanToken(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanToken);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PgQuery_ParseResult()
{
  return Hasher._finalize()();
}

uint64_t base witness table accessor for Equatable in PgQuery_ScanToken()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanToken);
}

uint64_t type metadata accessor for PgQuery_ScanToken(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ScanToken);
}

uint64_t base witness table accessor for Message in PgQuery_ScanToken()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanToken);
}

uint64_t lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Hashable in PgQuery_ScanToken()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanToken);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ScanToken()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanToken);
}

uint64_t base witness table accessor for Equatable in PgQuery_CallContext()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, (void (*)(uint64_t))type metadata accessor for PgQuery_CallContext);
}

uint64_t base witness table accessor for Message in PgQuery_CallContext()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, (void (*)(uint64_t))type metadata accessor for PgQuery_CallContext);
}

uint64_t base witness table accessor for Hashable in PgQuery_CallContext()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, (void (*)(uint64_t))type metadata accessor for PgQuery_CallContext);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CallContext()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, (void (*)(uint64_t))type metadata accessor for PgQuery_CallContext);
}

uint64_t base witness table accessor for Equatable in PgQuery_InlineCodeBlock()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, (void (*)(uint64_t))type metadata accessor for PgQuery_InlineCodeBlock);
}

uint64_t base witness table accessor for Message in PgQuery_InlineCodeBlock()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, (void (*)(uint64_t))type metadata accessor for PgQuery_InlineCodeBlock);
}

uint64_t base witness table accessor for Hashable in PgQuery_InlineCodeBlock()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, (void (*)(uint64_t))type metadata accessor for PgQuery_InlineCodeBlock);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_InlineCodeBlock()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, (void (*)(uint64_t))type metadata accessor for PgQuery_InlineCodeBlock);
}

uint64_t base witness table accessor for Equatable in PgQuery_VacuumRelation()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumRelation);
}

uint64_t base witness table accessor for Message in PgQuery_VacuumRelation()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumRelation);
}

uint64_t base witness table accessor for Hashable in PgQuery_VacuumRelation()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumRelation);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_VacuumRelation()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumRelation);
}

uint64_t base witness table accessor for Equatable in PgQuery_PartitionCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionCmd);
}

uint64_t base witness table accessor for Message in PgQuery_PartitionCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionCmd);
}

uint64_t base witness table accessor for Hashable in PgQuery_PartitionCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionCmd);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_PartitionCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionCmd);
}

uint64_t base witness table accessor for Equatable in PgQuery_PartitionRangeDatum()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionRangeDatum);
}

uint64_t base witness table accessor for Message in PgQuery_PartitionRangeDatum()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionRangeDatum);
}

uint64_t base witness table accessor for Hashable in PgQuery_PartitionRangeDatum()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionRangeDatum);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_PartitionRangeDatum()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionRangeDatum);
}

uint64_t base witness table accessor for Equatable in PgQuery_PartitionBoundSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);
}

uint64_t base witness table accessor for Message in PgQuery_PartitionBoundSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);
}

uint64_t base witness table accessor for Hashable in PgQuery_PartitionBoundSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_PartitionBoundSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);
}

uint64_t base witness table accessor for Equatable in PgQuery_PartitionSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionSpec);
}

uint64_t base witness table accessor for Message in PgQuery_PartitionSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionSpec);
}

uint64_t base witness table accessor for Hashable in PgQuery_PartitionSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionSpec);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_PartitionSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionSpec);
}

uint64_t base witness table accessor for Equatable in PgQuery_PartitionElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionElem);
}

uint64_t base witness table accessor for Message in PgQuery_PartitionElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionElem);
}

uint64_t base witness table accessor for Hashable in PgQuery_PartitionElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionElem);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_PartitionElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionElem);
}

uint64_t base witness table accessor for Equatable in PgQuery_TriggerTransition()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, (void (*)(uint64_t))type metadata accessor for PgQuery_TriggerTransition);
}

uint64_t base witness table accessor for Message in PgQuery_TriggerTransition()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, (void (*)(uint64_t))type metadata accessor for PgQuery_TriggerTransition);
}

uint64_t base witness table accessor for Hashable in PgQuery_TriggerTransition()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, (void (*)(uint64_t))type metadata accessor for PgQuery_TriggerTransition);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TriggerTransition()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, (void (*)(uint64_t))type metadata accessor for PgQuery_TriggerTransition);
}

uint64_t base witness table accessor for Equatable in PgQuery_RoleSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
}

uint64_t base witness table accessor for Message in PgQuery_RoleSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
}

uint64_t base witness table accessor for Hashable in PgQuery_RoleSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RoleSpec()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
}

uint64_t base witness table accessor for Equatable in PgQuery_CommonTableExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CommonTableExpr);
}

uint64_t base witness table accessor for Message in PgQuery_CommonTableExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CommonTableExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_CommonTableExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CommonTableExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CommonTableExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CommonTableExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_OnConflictClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictClause);
}

uint64_t base witness table accessor for Message in PgQuery_OnConflictClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_OnConflictClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_OnConflictClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_InferClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, (void (*)(uint64_t))type metadata accessor for PgQuery_InferClause);
}

uint64_t base witness table accessor for Message in PgQuery_InferClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, (void (*)(uint64_t))type metadata accessor for PgQuery_InferClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_InferClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, (void (*)(uint64_t))type metadata accessor for PgQuery_InferClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_InferClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, (void (*)(uint64_t))type metadata accessor for PgQuery_InferClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_WithClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
}

uint64_t base witness table accessor for Message in PgQuery_WithClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_WithClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_WithClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_XmlSerialize()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlSerialize);
}

uint64_t base witness table accessor for Message in PgQuery_XmlSerialize()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlSerialize);
}

uint64_t base witness table accessor for Hashable in PgQuery_XmlSerialize()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlSerialize);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_XmlSerialize()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlSerialize);
}

uint64_t base witness table accessor for Equatable in PgQuery_RowMarkClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, (void (*)(uint64_t))type metadata accessor for PgQuery_RowMarkClause);
}

uint64_t base witness table accessor for Message in PgQuery_RowMarkClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, (void (*)(uint64_t))type metadata accessor for PgQuery_RowMarkClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_RowMarkClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, (void (*)(uint64_t))type metadata accessor for PgQuery_RowMarkClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RowMarkClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, (void (*)(uint64_t))type metadata accessor for PgQuery_RowMarkClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_LockingClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, (void (*)(uint64_t))type metadata accessor for PgQuery_LockingClause);
}

uint64_t base witness table accessor for Message in PgQuery_LockingClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, (void (*)(uint64_t))type metadata accessor for PgQuery_LockingClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_LockingClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, (void (*)(uint64_t))type metadata accessor for PgQuery_LockingClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_LockingClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, (void (*)(uint64_t))type metadata accessor for PgQuery_LockingClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_FunctionParameter()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, (void (*)(uint64_t))type metadata accessor for PgQuery_FunctionParameter);
}

uint64_t base witness table accessor for Message in PgQuery_FunctionParameter()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, (void (*)(uint64_t))type metadata accessor for PgQuery_FunctionParameter);
}

uint64_t base witness table accessor for Hashable in PgQuery_FunctionParameter()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, (void (*)(uint64_t))type metadata accessor for PgQuery_FunctionParameter);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FunctionParameter()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, (void (*)(uint64_t))type metadata accessor for PgQuery_FunctionParameter);
}

uint64_t base witness table accessor for Equatable in PgQuery_TableLikeClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableLikeClause);
}

uint64_t base witness table accessor for Message in PgQuery_TableLikeClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableLikeClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_TableLikeClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableLikeClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TableLikeClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableLikeClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateOpClassItem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassItem);
}

uint64_t base witness table accessor for Message in PgQuery_CreateOpClassItem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassItem);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateOpClassItem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassItem);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateOpClassItem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassItem);
}

uint64_t base witness table accessor for Equatable in PgQuery_AccessPriv()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, (void (*)(uint64_t))type metadata accessor for PgQuery_AccessPriv);
}

uint64_t base witness table accessor for Message in PgQuery_AccessPriv()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, (void (*)(uint64_t))type metadata accessor for PgQuery_AccessPriv);
}

uint64_t base witness table accessor for Hashable in PgQuery_AccessPriv()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, (void (*)(uint64_t))type metadata accessor for PgQuery_AccessPriv);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AccessPriv()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, (void (*)(uint64_t))type metadata accessor for PgQuery_AccessPriv);
}

uint64_t base witness table accessor for Equatable in PgQuery_ObjectWithArgs()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
}

uint64_t base witness table accessor for Message in PgQuery_ObjectWithArgs()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
}

uint64_t base witness table accessor for Hashable in PgQuery_ObjectWithArgs()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ObjectWithArgs()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
}

uint64_t base witness table accessor for Equatable in PgQuery_WindowClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowClause);
}

uint64_t base witness table accessor for Message in PgQuery_WindowClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_WindowClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_WindowClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_GroupingSet()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingSet);
}

uint64_t base witness table accessor for Message in PgQuery_GroupingSet()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingSet);
}

uint64_t base witness table accessor for Hashable in PgQuery_GroupingSet()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingSet);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_GroupingSet()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingSet);
}

uint64_t base witness table accessor for Equatable in PgQuery_SortGroupClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, (void (*)(uint64_t))type metadata accessor for PgQuery_SortGroupClause);
}

uint64_t base witness table accessor for Message in PgQuery_SortGroupClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, (void (*)(uint64_t))type metadata accessor for PgQuery_SortGroupClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_SortGroupClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, (void (*)(uint64_t))type metadata accessor for PgQuery_SortGroupClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SortGroupClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, (void (*)(uint64_t))type metadata accessor for PgQuery_SortGroupClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_WithCheckOption()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, (void (*)(uint64_t))type metadata accessor for PgQuery_WithCheckOption);
}

uint64_t base witness table accessor for Message in PgQuery_WithCheckOption()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, (void (*)(uint64_t))type metadata accessor for PgQuery_WithCheckOption);
}

uint64_t base witness table accessor for Hashable in PgQuery_WithCheckOption()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, (void (*)(uint64_t))type metadata accessor for PgQuery_WithCheckOption);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_WithCheckOption()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, (void (*)(uint64_t))type metadata accessor for PgQuery_WithCheckOption);
}

uint64_t base witness table accessor for Equatable in PgQuery_TableSampleClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableSampleClause);
}

uint64_t base witness table accessor for Message in PgQuery_TableSampleClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableSampleClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_TableSampleClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableSampleClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TableSampleClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableSampleClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeTblFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblFunction);
}

uint64_t base witness table accessor for Message in PgQuery_RangeTblFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblFunction);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeTblFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblFunction);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeTblFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblFunction);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeTblEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblEntry);
}

uint64_t base witness table accessor for Message in PgQuery_RangeTblEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblEntry);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeTblEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblEntry);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeTblEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblEntry);
}

uint64_t base witness table accessor for Equatable in PgQuery_DefElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, (void (*)(uint64_t))type metadata accessor for PgQuery_DefElem);
}

uint64_t base witness table accessor for Message in PgQuery_DefElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, (void (*)(uint64_t))type metadata accessor for PgQuery_DefElem);
}

uint64_t base witness table accessor for Hashable in PgQuery_DefElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, (void (*)(uint64_t))type metadata accessor for PgQuery_DefElem);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DefElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, (void (*)(uint64_t))type metadata accessor for PgQuery_DefElem);
}

uint64_t base witness table accessor for Equatable in PgQuery_Constraint()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, (void (*)(uint64_t))type metadata accessor for PgQuery_Constraint);
}

uint64_t base witness table accessor for Message in PgQuery_Constraint()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, (void (*)(uint64_t))type metadata accessor for PgQuery_Constraint);
}

uint64_t base witness table accessor for Hashable in PgQuery_Constraint()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, (void (*)(uint64_t))type metadata accessor for PgQuery_Constraint);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Constraint()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, (void (*)(uint64_t))type metadata accessor for PgQuery_Constraint);
}

uint64_t base witness table accessor for Equatable in PgQuery_IndexElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexElem);
}

uint64_t base witness table accessor for Message in PgQuery_IndexElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexElem);
}

uint64_t base witness table accessor for Hashable in PgQuery_IndexElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexElem);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_IndexElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexElem);
}

uint64_t base witness table accessor for Equatable in PgQuery_ColumnDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnDef);
}

uint64_t base witness table accessor for Message in PgQuery_ColumnDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnDef);
}

uint64_t base witness table accessor for Hashable in PgQuery_ColumnDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnDef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ColumnDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnDef);
}

uint64_t base witness table accessor for Equatable in PgQuery_TypeName()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
}

uint64_t base witness table accessor for Message in PgQuery_TypeName()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
}

uint64_t base witness table accessor for Hashable in PgQuery_TypeName()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TypeName()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeTableFuncCol()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFuncCol);
}

uint64_t base witness table accessor for Message in PgQuery_RangeTableFuncCol()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFuncCol);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeTableFuncCol()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFuncCol);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeTableFuncCol()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFuncCol);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeTableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFunc);
}

uint64_t base witness table accessor for Message in PgQuery_RangeTableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFunc);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeTableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFunc);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeTableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFunc);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeTableSample()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableSample);
}

uint64_t base witness table accessor for Message in PgQuery_RangeTableSample()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableSample);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeTableSample()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeTableSample()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableSample);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeFunction);
}

uint64_t base witness table accessor for Message in PgQuery_RangeFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeFunction);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeFunction);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeFunction);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeSubselect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeSubselect);
}

uint64_t base witness table accessor for Message in PgQuery_RangeSubselect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeSubselect);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeSubselect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeSubselect);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeSubselect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeSubselect);
}

uint64_t base witness table accessor for Equatable in PgQuery_WindowDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowDef);
}

uint64_t base witness table accessor for Message in PgQuery_WindowDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowDef);
}

uint64_t base witness table accessor for Hashable in PgQuery_WindowDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowDef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_WindowDef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowDef);
}

uint64_t base witness table accessor for Equatable in PgQuery_SortBy()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, (void (*)(uint64_t))type metadata accessor for PgQuery_SortBy);
}

uint64_t base witness table accessor for Message in PgQuery_SortBy()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, (void (*)(uint64_t))type metadata accessor for PgQuery_SortBy);
}

uint64_t base witness table accessor for Hashable in PgQuery_SortBy()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, (void (*)(uint64_t))type metadata accessor for PgQuery_SortBy);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SortBy()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, (void (*)(uint64_t))type metadata accessor for PgQuery_SortBy);
}

uint64_t base witness table accessor for Equatable in PgQuery_CollateClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
}

uint64_t base witness table accessor for Message in PgQuery_CollateClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_CollateClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CollateClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_TypeCast()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeCast);
}

uint64_t base witness table accessor for Message in PgQuery_TypeCast()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeCast);
}

uint64_t base witness table accessor for Hashable in PgQuery_TypeCast()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeCast);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TypeCast()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeCast);
}

uint64_t base witness table accessor for Equatable in PgQuery_MultiAssignRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, (void (*)(uint64_t))type metadata accessor for PgQuery_MultiAssignRef);
}

uint64_t base witness table accessor for Message in PgQuery_MultiAssignRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, (void (*)(uint64_t))type metadata accessor for PgQuery_MultiAssignRef);
}

uint64_t base witness table accessor for Hashable in PgQuery_MultiAssignRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, (void (*)(uint64_t))type metadata accessor for PgQuery_MultiAssignRef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_MultiAssignRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, (void (*)(uint64_t))type metadata accessor for PgQuery_MultiAssignRef);
}

uint64_t base witness table accessor for Equatable in PgQuery_ResTarget()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, (void (*)(uint64_t))type metadata accessor for PgQuery_ResTarget);
}

uint64_t base witness table accessor for Message in PgQuery_ResTarget()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, (void (*)(uint64_t))type metadata accessor for PgQuery_ResTarget);
}

uint64_t base witness table accessor for Hashable in PgQuery_ResTarget()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, (void (*)(uint64_t))type metadata accessor for PgQuery_ResTarget);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ResTarget()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, (void (*)(uint64_t))type metadata accessor for PgQuery_ResTarget);
}

uint64_t base witness table accessor for Equatable in PgQuery_A_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_ArrayExpr);
}

uint64_t base witness table accessor for Message in PgQuery_A_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_ArrayExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_A_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_ArrayExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_A_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_ArrayExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_A_Indirection()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indirection);
}

uint64_t base witness table accessor for Message in PgQuery_A_Indirection()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indirection);
}

uint64_t base witness table accessor for Hashable in PgQuery_A_Indirection()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indirection);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_A_Indirection()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indirection);
}

uint64_t base witness table accessor for Equatable in PgQuery_A_Indices()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indices);
}

uint64_t base witness table accessor for Message in PgQuery_A_Indices()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indices);
}

uint64_t base witness table accessor for Hashable in PgQuery_A_Indices()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indices);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_A_Indices()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indices);
}

uint64_t base witness table accessor for Equatable in PgQuery_A_Star()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Star);
}

uint64_t type metadata accessor for PgQuery_A_Star(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Star);
}

uint64_t base witness table accessor for Message in PgQuery_A_Star()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Star);
}

uint64_t base witness table accessor for Hashable in PgQuery_A_Star()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Star);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_A_Star()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Star);
}

uint64_t base witness table accessor for Equatable in PgQuery_FuncCall()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncCall);
}

uint64_t base witness table accessor for Message in PgQuery_FuncCall()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncCall);
}

uint64_t base witness table accessor for Hashable in PgQuery_FuncCall()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncCall);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FuncCall()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncCall);
}

uint64_t base witness table accessor for Equatable in PgQuery_A_Const()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Const);
}

uint64_t base witness table accessor for Message in PgQuery_A_Const()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Const);
}

uint64_t base witness table accessor for Hashable in PgQuery_A_Const()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Const);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_A_Const()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Const);
}

uint64_t base witness table accessor for Equatable in PgQuery_ParamRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ParamRef);
}

uint64_t base witness table accessor for Message in PgQuery_ParamRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ParamRef);
}

uint64_t base witness table accessor for Hashable in PgQuery_ParamRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ParamRef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ParamRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ParamRef);
}

uint64_t base witness table accessor for Equatable in PgQuery_ColumnRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnRef);
}

uint64_t base witness table accessor for Message in PgQuery_ColumnRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnRef);
}

uint64_t base witness table accessor for Hashable in PgQuery_ColumnRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnRef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ColumnRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnRef);
}

uint64_t base witness table accessor for Equatable in PgQuery_A_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Expr);
}

uint64_t base witness table accessor for Message in PgQuery_A_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Expr);
}

uint64_t base witness table accessor for Hashable in PgQuery_A_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Expr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_A_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Expr);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterStatsStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterStatsStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterStatsStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterStatsStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CallStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CallStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CallStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CallStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CallStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CallStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CallStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CallStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterCollationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterCollationStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterCollationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterCollationStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterCollationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterCollationStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterCollationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterCollationStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStatsStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStatsStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStatsStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateStatsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStatsStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropSubscriptionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropSubscriptionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropSubscriptionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropSubscriptionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSubscriptionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSubscriptionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSubscriptionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSubscriptionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSubscriptionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSubscriptionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSubscriptionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateSubscriptionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSubscriptionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterPublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPublicationStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterPublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPublicationStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterPublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPublicationStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterPublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPublicationStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreatePublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePublicationStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreatePublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePublicationStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreatePublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePublicationStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreatePublicationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePublicationStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateAmStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateAmStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateAmStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateAmStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateAmStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateAmStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateAmStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateAmStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateTransformStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTransformStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateTransformStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTransformStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateTransformStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTransformStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateTransformStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTransformStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterPolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPolicyStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterPolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPolicyStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterPolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPolicyStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterPolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPolicyStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreatePolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePolicyStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreatePolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePolicyStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreatePolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePolicyStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreatePolicyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePolicyStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterSystemStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSystemStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterSystemStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSystemStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterSystemStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSystemStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterSystemStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSystemStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ReplicaIdentityStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReplicaIdentityStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ReplicaIdentityStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReplicaIdentityStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ReplicaIdentityStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReplicaIdentityStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ReplicaIdentityStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReplicaIdentityStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_RefreshMatViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RefreshMatViewStmt);
}

uint64_t base witness table accessor for Message in PgQuery_RefreshMatViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RefreshMatViewStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_RefreshMatViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RefreshMatViewStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RefreshMatViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RefreshMatViewStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEventTrigStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEventTrigStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEventTrigStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEventTrigStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEventTrigStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEventTrigStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEventTrigStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateEventTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEventTrigStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterExtensionContentsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionContentsStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterExtensionContentsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionContentsStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterExtensionContentsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionContentsStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterExtensionContentsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionContentsStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateExtensionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateExtensionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateExtensionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateExtensionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateExtensionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ImportForeignSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ImportForeignSchemaStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ImportForeignSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ImportForeignSchemaStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ImportForeignSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ImportForeignSchemaStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ImportForeignSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ImportForeignSchemaStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateForeignTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignTableStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateForeignTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignTableStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateForeignTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignTableStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateForeignTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignTableStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_SecLabelStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SecLabelStmt);
}

uint64_t base witness table accessor for Message in PgQuery_SecLabelStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SecLabelStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_SecLabelStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SecLabelStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SecLabelStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SecLabelStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTableMoveAllStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableMoveAllStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTableMoveAllStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableMoveAllStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTableMoveAllStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableMoveAllStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTableMoveAllStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableMoveAllStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTableSpaceOptionsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTableSpaceOptionsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTableSpaceOptionsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTableSpaceOptionsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropUserMappingStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropUserMappingStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropUserMappingStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropUserMappingStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterUserMappingStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterUserMappingStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterUserMappingStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterUserMappingStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateUserMappingStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateUserMappingStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateUserMappingStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateUserMappingStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateUserMappingStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterForeignServerStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterForeignServerStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterForeignServerStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterForeignServerStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignServerStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignServerStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignServerStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateForeignServerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignServerStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFdwStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFdwStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFdwStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFdwStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFdwStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFdwStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFdwStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateFdwStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFdwStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTSConfigurationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSConfigurationStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTSConfigurationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSConfigurationStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTSConfigurationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSConfigurationStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTSConfigurationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSConfigurationStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTSDictionaryStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSDictionaryStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTSDictionaryStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSDictionaryStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTSDictionaryStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSDictionaryStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTSDictionaryStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSDictionaryStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEnumStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEnumStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEnumStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEnumStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateRangeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRangeStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateRangeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRangeStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateRangeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRangeStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateRangeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRangeStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEnumStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEnumStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEnumStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateEnumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEnumStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CompositeTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CompositeTypeStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CompositeTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CompositeTypeStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CompositeTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CompositeTypeStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CompositeTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CompositeTypeStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ReassignOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReassignOwnedStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ReassignOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReassignOwnedStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ReassignOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReassignOwnedStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ReassignOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReassignOwnedStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropOwnedStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropOwnedStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropOwnedStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropOwnedStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropOwnedStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTypeStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTypeStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTypeStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTypeStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTypeStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterOperatorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOperatorStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterOperatorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOperatorStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterOperatorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOperatorStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterOperatorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOperatorStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterOwnerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOwnerStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterOwnerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOwnerStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterOwnerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOwnerStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterOwnerStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOwnerStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterObjectSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectSchemaStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterObjectSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectSchemaStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterObjectSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectSchemaStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterObjectSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectSchemaStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterObjectDependsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectDependsStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterObjectDependsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectDependsStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterObjectDependsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectDependsStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterObjectDependsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectDependsStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropTableSpaceStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropTableSpaceStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropTableSpaceStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropTableSpaceStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableSpaceStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableSpaceStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableSpaceStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateTableSpaceStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableSpaceStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DeclareCursorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeclareCursorStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DeclareCursorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeclareCursorStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DeclareCursorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeclareCursorStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DeclareCursorStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeclareCursorStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DeallocateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeallocateStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DeallocateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeallocateStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DeallocateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeallocateStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DeallocateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeallocateStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ExecuteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExecuteStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ExecuteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExecuteStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ExecuteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExecuteStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ExecuteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExecuteStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_PrepareStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_PrepareStmt);
}

uint64_t base witness table accessor for Message in PgQuery_PrepareStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_PrepareStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_PrepareStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_PrepareStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_PrepareStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_PrepareStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOpFamilyStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOpFamilyStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOpFamilyStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOpFamilyStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpFamilyStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpFamilyStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpFamilyStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateOpFamilyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpFamilyStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateOpClassStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateOpClassStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateOpClassStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateOpClassStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateCastStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateCastStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateCastStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateCastStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateCastStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateCastStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateCastStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateCastStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateConversionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateConversionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateConversionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateConversionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateConversionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateConversionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateConversionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateConversionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterRoleSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleSetStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterRoleSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleSetStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterRoleSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleSetStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterRoleSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleSetStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterDatabaseSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseSetStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterDatabaseSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseSetStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterDatabaseSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseSetStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterDatabaseSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseSetStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterDatabaseStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterDatabaseStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterDatabaseStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterDatabaseStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSchemaStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSchemaStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSchemaStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateSchemaStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSchemaStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CheckPointStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CheckPointStmt);
}

uint64_t type metadata accessor for PgQuery_CheckPointStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CheckPointStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CheckPointStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CheckPointStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CheckPointStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CheckPointStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CheckPointStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CheckPointStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ReindexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReindexStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ReindexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReindexStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ReindexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReindexStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ReindexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReindexStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ConstraintsSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ConstraintsSetStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ConstraintsSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ConstraintsSetStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ConstraintsSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ConstraintsSetStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ConstraintsSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ConstraintsSetStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_LockStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LockStmt);
}

uint64_t base witness table accessor for Message in PgQuery_LockStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LockStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_LockStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LockStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_LockStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LockStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropRoleStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropRoleStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropRoleStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropRoleStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRoleStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRoleStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRoleStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRoleStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreatePLangStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePLangStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreatePLangStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePLangStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreatePLangStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePLangStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreatePLangStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePLangStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTrigStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTrigStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTrigStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateTrigStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTrigStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DiscardStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DiscardStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DiscardStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DiscardStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DiscardStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DiscardStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DiscardStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DiscardStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_VariableShowStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableShowStmt);
}

uint64_t base witness table accessor for Message in PgQuery_VariableShowStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableShowStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_VariableShowStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableShowStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_VariableShowStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableShowStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_VariableSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
}

uint64_t base witness table accessor for Message in PgQuery_VariableSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_VariableSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_VariableSetStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSeqStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSeqStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSeqStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSeqStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSeqStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSeqStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSeqStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateSeqStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSeqStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateTableAsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableAsStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateTableAsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableAsStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateTableAsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableAsStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateTableAsStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableAsStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ExplainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExplainStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ExplainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExplainStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ExplainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExplainStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ExplainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExplainStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_VacuumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumStmt);
}

uint64_t base witness table accessor for Message in PgQuery_VacuumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_VacuumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_VacuumStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropdbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropdbStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropdbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropdbStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropdbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropdbStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropdbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropdbStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreatedbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatedbStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreatedbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatedbStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreatedbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatedbStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreatedbStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatedbStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateDomainStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateDomainStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateDomainStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateDomainStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_LoadStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LoadStmt);
}

uint64_t base witness table accessor for Message in PgQuery_LoadStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LoadStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_LoadStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LoadStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_LoadStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LoadStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ViewStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ViewStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ViewStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ViewStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ViewStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_TransactionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TransactionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_TransactionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TransactionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_TransactionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TransactionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TransactionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TransactionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_UnlistenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UnlistenStmt);
}

uint64_t base witness table accessor for Message in PgQuery_UnlistenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UnlistenStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_UnlistenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UnlistenStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_UnlistenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UnlistenStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ListenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ListenStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ListenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ListenStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ListenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ListenStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ListenStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ListenStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_NotifyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_NotifyStmt);
}

uint64_t base witness table accessor for Message in PgQuery_NotifyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_NotifyStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_NotifyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_NotifyStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_NotifyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_NotifyStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_RuleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RuleStmt);
}

uint64_t base witness table accessor for Message in PgQuery_RuleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RuleStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_RuleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RuleStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RuleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RuleStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_RenameStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RenameStmt);
}

uint64_t base witness table accessor for Message in PgQuery_RenameStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RenameStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_RenameStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RenameStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RenameStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RenameStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DoStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DoStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DoStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DoStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DoStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DoStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DoStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DoStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFunctionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFunctionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFunctionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFunctionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFunctionStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFunctionStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFunctionStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateFunctionStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFunctionStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_IndexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexStmt);
}

uint64_t base witness table accessor for Message in PgQuery_IndexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_IndexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_IndexStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_FetchStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_FetchStmt);
}

uint64_t base witness table accessor for Message in PgQuery_FetchStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_FetchStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_FetchStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_FetchStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FetchStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_FetchStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CommentStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CommentStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CommentStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CommentStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CommentStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CommentStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CommentStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CommentStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_TruncateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TruncateStmt);
}

uint64_t base witness table accessor for Message in PgQuery_TruncateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TruncateStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_TruncateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TruncateStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TruncateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TruncateStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DropStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DropStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DropStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DropStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DefineStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DefineStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DefineStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DefineStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DefineStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DefineStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DefineStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DefineStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CreateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CreateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CreateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CreateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_CopyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CopyStmt);
}

uint64_t base witness table accessor for Message in PgQuery_CopyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CopyStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_CopyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CopyStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CopyStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CopyStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ClusterStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClusterStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ClusterStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClusterStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ClusterStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClusterStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ClusterStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClusterStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_ClosePortalStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClosePortalStmt);
}

uint64_t base witness table accessor for Message in PgQuery_ClosePortalStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClosePortalStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_ClosePortalStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClosePortalStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ClosePortalStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClosePortalStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterDefaultPrivilegesStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterDefaultPrivilegesStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterDefaultPrivilegesStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterDefaultPrivilegesStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_GrantRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantRoleStmt);
}

uint64_t base witness table accessor for Message in PgQuery_GrantRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantRoleStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_GrantRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantRoleStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_GrantRoleStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantRoleStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_GrantStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantStmt);
}

uint64_t base witness table accessor for Message in PgQuery_GrantStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_GrantStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_GrantStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_SetOperationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SetOperationStmt);
}

uint64_t base witness table accessor for Message in PgQuery_SetOperationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SetOperationStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_SetOperationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SetOperationStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SetOperationStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SetOperationStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDomainStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDomainStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDomainStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterDomainStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDomainStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTableCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableCmd);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTableCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableCmd);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTableCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableCmd);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTableCmd()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableCmd);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlterTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableStmt);
}

uint64_t base witness table accessor for Message in PgQuery_AlterTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlterTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlterTableStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_SelectStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);
}

uint64_t base witness table accessor for Message in PgQuery_SelectStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_SelectStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SelectStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_UpdateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UpdateStmt);
}

uint64_t base witness table accessor for Message in PgQuery_UpdateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UpdateStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_UpdateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UpdateStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_UpdateStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UpdateStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_DeleteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeleteStmt);
}

uint64_t base witness table accessor for Message in PgQuery_DeleteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeleteStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_DeleteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeleteStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DeleteStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeleteStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_InsertStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_InsertStmt);
}

uint64_t base witness table accessor for Message in PgQuery_InsertStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_InsertStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_InsertStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_InsertStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_InsertStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_InsertStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_Query()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, (void (*)(uint64_t))type metadata accessor for PgQuery_Query);
}

uint64_t base witness table accessor for Message in PgQuery_Query()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, (void (*)(uint64_t))type metadata accessor for PgQuery_Query);
}

uint64_t base witness table accessor for Hashable in PgQuery_Query()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, (void (*)(uint64_t))type metadata accessor for PgQuery_Query);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Query()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, (void (*)(uint64_t))type metadata accessor for PgQuery_Query);
}

uint64_t base witness table accessor for Equatable in PgQuery_RawStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RawStmt);
}

uint64_t base witness table accessor for Message in PgQuery_RawStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RawStmt);
}

uint64_t base witness table accessor for Hashable in PgQuery_RawStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RawStmt);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RawStmt()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RawStmt);
}

uint64_t base witness table accessor for Equatable in PgQuery_IntoClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
}

uint64_t base witness table accessor for Message in PgQuery_IntoClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
}

uint64_t base witness table accessor for Hashable in PgQuery_IntoClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_IntoClause()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
}

uint64_t base witness table accessor for Equatable in PgQuery_OnConflictExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictExpr);
}

uint64_t base witness table accessor for Message in PgQuery_OnConflictExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_OnConflictExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_OnConflictExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_FromExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FromExpr);
}

uint64_t base witness table accessor for Message in PgQuery_FromExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FromExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_FromExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FromExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FromExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FromExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_JoinExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_JoinExpr);
}

uint64_t base witness table accessor for Message in PgQuery_JoinExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_JoinExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_JoinExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_JoinExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_JoinExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_JoinExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeTblRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblRef);
}

uint64_t base witness table accessor for Message in PgQuery_RangeTblRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblRef);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeTblRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblRef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeTblRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblRef);
}

uint64_t base witness table accessor for Equatable in PgQuery_TargetEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_TargetEntry);
}

uint64_t base witness table accessor for Message in PgQuery_TargetEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_TargetEntry);
}

uint64_t base witness table accessor for Hashable in PgQuery_TargetEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_TargetEntry);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TargetEntry()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_TargetEntry);
}

uint64_t base witness table accessor for Equatable in PgQuery_InferenceElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, (void (*)(uint64_t))type metadata accessor for PgQuery_InferenceElem);
}

uint64_t base witness table accessor for Message in PgQuery_InferenceElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, (void (*)(uint64_t))type metadata accessor for PgQuery_InferenceElem);
}

uint64_t base witness table accessor for Hashable in PgQuery_InferenceElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, (void (*)(uint64_t))type metadata accessor for PgQuery_InferenceElem);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_InferenceElem()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, (void (*)(uint64_t))type metadata accessor for PgQuery_InferenceElem);
}

uint64_t base witness table accessor for Equatable in PgQuery_NextValueExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NextValueExpr);
}

uint64_t base witness table accessor for Message in PgQuery_NextValueExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NextValueExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_NextValueExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NextValueExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_NextValueExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NextValueExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_CurrentOfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CurrentOfExpr);
}

uint64_t base witness table accessor for Message in PgQuery_CurrentOfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CurrentOfExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_CurrentOfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CurrentOfExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CurrentOfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CurrentOfExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_SetToDefault()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, (void (*)(uint64_t))type metadata accessor for PgQuery_SetToDefault);
}

uint64_t base witness table accessor for Message in PgQuery_SetToDefault()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, (void (*)(uint64_t))type metadata accessor for PgQuery_SetToDefault);
}

uint64_t base witness table accessor for Hashable in PgQuery_SetToDefault()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, (void (*)(uint64_t))type metadata accessor for PgQuery_SetToDefault);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SetToDefault()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, (void (*)(uint64_t))type metadata accessor for PgQuery_SetToDefault);
}

uint64_t base witness table accessor for Equatable in PgQuery_CoerceToDomainValue()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomainValue);
}

uint64_t base witness table accessor for Message in PgQuery_CoerceToDomainValue()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomainValue);
}

uint64_t base witness table accessor for Hashable in PgQuery_CoerceToDomainValue()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomainValue);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CoerceToDomainValue()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomainValue);
}

uint64_t base witness table accessor for Equatable in PgQuery_CoerceToDomain()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomain);
}

uint64_t base witness table accessor for Message in PgQuery_CoerceToDomain()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomain);
}

uint64_t base witness table accessor for Hashable in PgQuery_CoerceToDomain()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomain);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CoerceToDomain()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomain);
}

uint64_t base witness table accessor for Equatable in PgQuery_BooleanTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, (void (*)(uint64_t))type metadata accessor for PgQuery_BooleanTest);
}

uint64_t base witness table accessor for Message in PgQuery_BooleanTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, (void (*)(uint64_t))type metadata accessor for PgQuery_BooleanTest);
}

uint64_t base witness table accessor for Hashable in PgQuery_BooleanTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, (void (*)(uint64_t))type metadata accessor for PgQuery_BooleanTest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_BooleanTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, (void (*)(uint64_t))type metadata accessor for PgQuery_BooleanTest);
}

uint64_t base witness table accessor for Equatable in PgQuery_NullTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, (void (*)(uint64_t))type metadata accessor for PgQuery_NullTest);
}

uint64_t base witness table accessor for Message in PgQuery_NullTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, (void (*)(uint64_t))type metadata accessor for PgQuery_NullTest);
}

uint64_t base witness table accessor for Hashable in PgQuery_NullTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, (void (*)(uint64_t))type metadata accessor for PgQuery_NullTest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_NullTest()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, (void (*)(uint64_t))type metadata accessor for PgQuery_NullTest);
}

uint64_t base witness table accessor for Equatable in PgQuery_XmlExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlExpr);
}

uint64_t base witness table accessor for Message in PgQuery_XmlExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_XmlExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_XmlExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_SQLValueFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_SQLValueFunction);
}

uint64_t base witness table accessor for Message in PgQuery_SQLValueFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_SQLValueFunction);
}

uint64_t base witness table accessor for Hashable in PgQuery_SQLValueFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_SQLValueFunction);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SQLValueFunction()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_SQLValueFunction);
}

uint64_t base witness table accessor for Equatable in PgQuery_MinMaxExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_MinMaxExpr);
}

uint64_t base witness table accessor for Message in PgQuery_MinMaxExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_MinMaxExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_MinMaxExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_MinMaxExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_MinMaxExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_MinMaxExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_CoalesceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CoalesceExpr);
}

uint64_t base witness table accessor for Message in PgQuery_CoalesceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CoalesceExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_CoalesceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CoalesceExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CoalesceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CoalesceExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_RowCompareExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowCompareExpr);
}

uint64_t base witness table accessor for Message in PgQuery_RowCompareExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowCompareExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_RowCompareExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowCompareExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RowCompareExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowCompareExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_RowExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowExpr);
}

uint64_t base witness table accessor for Message in PgQuery_RowExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_RowExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RowExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayExpr);
}

uint64_t base witness table accessor for Message in PgQuery_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ArrayExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_CaseTestExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseTestExpr);
}

uint64_t base witness table accessor for Message in PgQuery_CaseTestExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseTestExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_CaseTestExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseTestExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CaseTestExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseTestExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_CaseWhen()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseWhen);
}

uint64_t base witness table accessor for Message in PgQuery_CaseWhen()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseWhen);
}

uint64_t base witness table accessor for Hashable in PgQuery_CaseWhen()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseWhen);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CaseWhen()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseWhen);
}

uint64_t base witness table accessor for Equatable in PgQuery_CaseExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseExpr);
}

uint64_t base witness table accessor for Message in PgQuery_CaseExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_CaseExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CaseExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_CollateExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateExpr);
}

uint64_t base witness table accessor for Message in PgQuery_CollateExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_CollateExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CollateExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_ConvertRowtypeExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ConvertRowtypeExpr);
}

uint64_t base witness table accessor for Message in PgQuery_ConvertRowtypeExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ConvertRowtypeExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_ConvertRowtypeExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ConvertRowtypeExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ConvertRowtypeExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ConvertRowtypeExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_ArrayCoerceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayCoerceExpr);
}

uint64_t base witness table accessor for Message in PgQuery_ArrayCoerceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayCoerceExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_ArrayCoerceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayCoerceExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ArrayCoerceExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayCoerceExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_CoerceViaIO()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceViaIO);
}

uint64_t base witness table accessor for Message in PgQuery_CoerceViaIO()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceViaIO);
}

uint64_t base witness table accessor for Hashable in PgQuery_CoerceViaIO()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceViaIO);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_CoerceViaIO()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceViaIO);
}

uint64_t base witness table accessor for Equatable in PgQuery_RelabelType()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, (void (*)(uint64_t))type metadata accessor for PgQuery_RelabelType);
}

uint64_t base witness table accessor for Message in PgQuery_RelabelType()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, (void (*)(uint64_t))type metadata accessor for PgQuery_RelabelType);
}

uint64_t base witness table accessor for Hashable in PgQuery_RelabelType()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, (void (*)(uint64_t))type metadata accessor for PgQuery_RelabelType);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RelabelType()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, (void (*)(uint64_t))type metadata accessor for PgQuery_RelabelType);
}

uint64_t base witness table accessor for Equatable in PgQuery_FieldStore()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldStore);
}

uint64_t base witness table accessor for Message in PgQuery_FieldStore()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldStore);
}

uint64_t base witness table accessor for Hashable in PgQuery_FieldStore()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldStore);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FieldStore()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldStore);
}

uint64_t base witness table accessor for Equatable in PgQuery_FieldSelect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldSelect);
}

uint64_t base witness table accessor for Message in PgQuery_FieldSelect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldSelect);
}

uint64_t base witness table accessor for Hashable in PgQuery_FieldSelect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldSelect);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FieldSelect()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldSelect);
}

uint64_t base witness table accessor for Equatable in PgQuery_AlternativeSubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_AlternativeSubPlan);
}

uint64_t base witness table accessor for Message in PgQuery_AlternativeSubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_AlternativeSubPlan);
}

uint64_t base witness table accessor for Hashable in PgQuery_AlternativeSubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_AlternativeSubPlan);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_AlternativeSubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_AlternativeSubPlan);
}

uint64_t base witness table accessor for Equatable in PgQuery_SubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_SubPlan);
}

uint64_t base witness table accessor for Message in PgQuery_SubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_SubPlan);
}

uint64_t base witness table accessor for Hashable in PgQuery_SubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_SubPlan);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SubPlan()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_SubPlan);
}

uint64_t base witness table accessor for Equatable in PgQuery_SubLink()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, (void (*)(uint64_t))type metadata accessor for PgQuery_SubLink);
}

uint64_t base witness table accessor for Message in PgQuery_SubLink()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, (void (*)(uint64_t))type metadata accessor for PgQuery_SubLink);
}

uint64_t base witness table accessor for Hashable in PgQuery_SubLink()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, (void (*)(uint64_t))type metadata accessor for PgQuery_SubLink);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SubLink()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, (void (*)(uint64_t))type metadata accessor for PgQuery_SubLink);
}

uint64_t base witness table accessor for Equatable in PgQuery_BoolExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_BoolExpr);
}

uint64_t base witness table accessor for Message in PgQuery_BoolExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_BoolExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_BoolExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_BoolExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_BoolExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_BoolExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_ScalarArrayOpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ScalarArrayOpExpr);
}

uint64_t base witness table accessor for Message in PgQuery_ScalarArrayOpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ScalarArrayOpExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_ScalarArrayOpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ScalarArrayOpExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ScalarArrayOpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ScalarArrayOpExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_NullIfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NullIfExpr);
}

uint64_t base witness table accessor for Message in PgQuery_NullIfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NullIfExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_NullIfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NullIfExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_NullIfExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NullIfExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_DistinctExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_DistinctExpr);
}

uint64_t base witness table accessor for Message in PgQuery_DistinctExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_DistinctExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_DistinctExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_DistinctExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_DistinctExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_DistinctExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_OpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OpExpr);
}

uint64_t base witness table accessor for Message in PgQuery_OpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OpExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_OpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OpExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_OpExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OpExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_NamedArgExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NamedArgExpr);
}

uint64_t base witness table accessor for Message in PgQuery_NamedArgExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NamedArgExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_NamedArgExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NamedArgExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_NamedArgExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NamedArgExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_FuncExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncExpr);
}

uint64_t base witness table accessor for Message in PgQuery_FuncExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncExpr);
}

uint64_t base witness table accessor for Hashable in PgQuery_FuncExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncExpr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_FuncExpr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncExpr);
}

uint64_t base witness table accessor for Equatable in PgQuery_SubscriptingRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, (void (*)(uint64_t))type metadata accessor for PgQuery_SubscriptingRef);
}

uint64_t base witness table accessor for Message in PgQuery_SubscriptingRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, (void (*)(uint64_t))type metadata accessor for PgQuery_SubscriptingRef);
}

uint64_t base witness table accessor for Hashable in PgQuery_SubscriptingRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, (void (*)(uint64_t))type metadata accessor for PgQuery_SubscriptingRef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_SubscriptingRef()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, (void (*)(uint64_t))type metadata accessor for PgQuery_SubscriptingRef);
}

uint64_t base witness table accessor for Equatable in PgQuery_WindowFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowFunc);
}

uint64_t base witness table accessor for Message in PgQuery_WindowFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowFunc);
}

uint64_t base witness table accessor for Hashable in PgQuery_WindowFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowFunc);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_WindowFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowFunc);
}

uint64_t base witness table accessor for Equatable in PgQuery_GroupingFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingFunc);
}

uint64_t base witness table accessor for Message in PgQuery_GroupingFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingFunc);
}

uint64_t base witness table accessor for Hashable in PgQuery_GroupingFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingFunc);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_GroupingFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingFunc);
}

uint64_t base witness table accessor for Equatable in PgQuery_Aggref()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, (void (*)(uint64_t))type metadata accessor for PgQuery_Aggref);
}

uint64_t base witness table accessor for Message in PgQuery_Aggref()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, (void (*)(uint64_t))type metadata accessor for PgQuery_Aggref);
}

uint64_t base witness table accessor for Hashable in PgQuery_Aggref()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, (void (*)(uint64_t))type metadata accessor for PgQuery_Aggref);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Aggref()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, (void (*)(uint64_t))type metadata accessor for PgQuery_Aggref);
}

uint64_t base witness table accessor for Equatable in PgQuery_Param()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, (void (*)(uint64_t))type metadata accessor for PgQuery_Param);
}

uint64_t base witness table accessor for Message in PgQuery_Param()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, (void (*)(uint64_t))type metadata accessor for PgQuery_Param);
}

uint64_t base witness table accessor for Hashable in PgQuery_Param()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, (void (*)(uint64_t))type metadata accessor for PgQuery_Param);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Param()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, (void (*)(uint64_t))type metadata accessor for PgQuery_Param);
}

uint64_t base witness table accessor for Equatable in PgQuery_Var()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, (void (*)(uint64_t))type metadata accessor for PgQuery_Var);
}

uint64_t base witness table accessor for Message in PgQuery_Var()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, (void (*)(uint64_t))type metadata accessor for PgQuery_Var);
}

uint64_t base witness table accessor for Hashable in PgQuery_Var()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, (void (*)(uint64_t))type metadata accessor for PgQuery_Var);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Var()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, (void (*)(uint64_t))type metadata accessor for PgQuery_Var);
}

uint64_t base witness table accessor for Equatable in PgQuery_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_Expr);
}

uint64_t type metadata accessor for PgQuery_Expr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Expr);
}

uint64_t base witness table accessor for Message in PgQuery_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_Expr);
}

uint64_t base witness table accessor for Hashable in PgQuery_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_Expr);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Expr()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_Expr);
}

uint64_t base witness table accessor for Equatable in PgQuery_TableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_TableFunc);
}

uint64_t base witness table accessor for Message in PgQuery_TableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_TableFunc);
}

uint64_t base witness table accessor for Hashable in PgQuery_TableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_TableFunc);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_TableFunc()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_TableFunc);
}

uint64_t base witness table accessor for Equatable in PgQuery_RangeVar()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
}

uint64_t base witness table accessor for Message in PgQuery_RangeVar()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
}

uint64_t base witness table accessor for Hashable in PgQuery_RangeVar()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_RangeVar()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
}

uint64_t base witness table accessor for Equatable in PgQuery_Alias()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
}

uint64_t base witness table accessor for Message in PgQuery_Alias()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
}

uint64_t base witness table accessor for Hashable in PgQuery_Alias()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Alias()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
}

uint64_t base witness table accessor for Equatable in PgQuery_IntList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, (void (*)(uint64_t))type metadata accessor for PgQuery_IntList);
}

uint64_t base witness table accessor for Message in PgQuery_IntList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, (void (*)(uint64_t))type metadata accessor for PgQuery_IntList);
}

uint64_t base witness table accessor for Hashable in PgQuery_IntList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, (void (*)(uint64_t))type metadata accessor for PgQuery_IntList);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_IntList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, (void (*)(uint64_t))type metadata accessor for PgQuery_IntList);
}

uint64_t base witness table accessor for Equatable in PgQuery_OidList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, (void (*)(uint64_t))type metadata accessor for PgQuery_OidList);
}

uint64_t base witness table accessor for Message in PgQuery_OidList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, (void (*)(uint64_t))type metadata accessor for PgQuery_OidList);
}

uint64_t base witness table accessor for Hashable in PgQuery_OidList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, (void (*)(uint64_t))type metadata accessor for PgQuery_OidList);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_OidList()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, (void (*)(uint64_t))type metadata accessor for PgQuery_OidList);
}

uint64_t base witness table accessor for Equatable in PgQuery_List()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, (void (*)(uint64_t))type metadata accessor for PgQuery_List);
}

uint64_t base witness table accessor for Message in PgQuery_List()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, (void (*)(uint64_t))type metadata accessor for PgQuery_List);
}

uint64_t base witness table accessor for Hashable in PgQuery_List()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, (void (*)(uint64_t))type metadata accessor for PgQuery_List);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_List()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, (void (*)(uint64_t))type metadata accessor for PgQuery_List);
}

uint64_t base witness table accessor for Equatable in PgQuery_Null()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, (void (*)(uint64_t))type metadata accessor for PgQuery_Null);
}

uint64_t type metadata accessor for PgQuery_Null(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Null);
}

uint64_t type metadata accessor for PgQuery_Node._StorageClass(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t base witness table accessor for Message in PgQuery_Null()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, (void (*)(uint64_t))type metadata accessor for PgQuery_Null);
}

uint64_t base witness table accessor for Hashable in PgQuery_Null()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, (void (*)(uint64_t))type metadata accessor for PgQuery_Null);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Null()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, (void (*)(uint64_t))type metadata accessor for PgQuery_Null);
}

uint64_t base witness table accessor for Equatable in PgQuery_BitString()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, (void (*)(uint64_t))type metadata accessor for PgQuery_BitString);
}

uint64_t base witness table accessor for Message in PgQuery_BitString()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, (void (*)(uint64_t))type metadata accessor for PgQuery_BitString);
}

uint64_t base witness table accessor for Hashable in PgQuery_BitString()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, (void (*)(uint64_t))type metadata accessor for PgQuery_BitString);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_BitString()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, (void (*)(uint64_t))type metadata accessor for PgQuery_BitString);
}

uint64_t base witness table accessor for Equatable in PgQuery_String()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, (void (*)(uint64_t))type metadata accessor for PgQuery_String);
}

uint64_t base witness table accessor for Message in PgQuery_String()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, (void (*)(uint64_t))type metadata accessor for PgQuery_String);
}

uint64_t base witness table accessor for Hashable in PgQuery_String()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, (void (*)(uint64_t))type metadata accessor for PgQuery_String);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_String()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, (void (*)(uint64_t))type metadata accessor for PgQuery_String);
}

uint64_t base witness table accessor for Equatable in PgQuery_Float()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, (void (*)(uint64_t))type metadata accessor for PgQuery_Float);
}

uint64_t base witness table accessor for Message in PgQuery_Float()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, (void (*)(uint64_t))type metadata accessor for PgQuery_Float);
}

uint64_t base witness table accessor for Hashable in PgQuery_Float()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, (void (*)(uint64_t))type metadata accessor for PgQuery_Float);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Float()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, (void (*)(uint64_t))type metadata accessor for PgQuery_Float);
}

uint64_t base witness table accessor for Equatable in PgQuery_Integer()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, (void (*)(uint64_t))type metadata accessor for PgQuery_Integer);
}

uint64_t base witness table accessor for Message in PgQuery_Integer()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, (void (*)(uint64_t))type metadata accessor for PgQuery_Integer);
}

uint64_t base witness table accessor for Hashable in PgQuery_Integer()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, (void (*)(uint64_t))type metadata accessor for PgQuery_Integer);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Integer()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, (void (*)(uint64_t))type metadata accessor for PgQuery_Integer);
}

uint64_t base witness table accessor for Equatable in PgQuery_Node()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
}

uint64_t base witness table accessor for Message in PgQuery_Node()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
}

uint64_t base witness table accessor for Hashable in PgQuery_Node()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_Node()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
}

uint64_t base witness table accessor for Equatable in PgQuery_ScanResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanResult);
}

uint64_t base witness table accessor for Message in PgQuery_ScanResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanResult);
}

uint64_t base witness table accessor for Hashable in PgQuery_ScanResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanResult);
}

uint64_t base witness table accessor for Equatable in PgQuery_ParseResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ParseResult);
}

uint64_t base witness table accessor for Message in PgQuery_ParseResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ParseResult);
}

uint64_t base witness table accessor for Hashable in PgQuery_ParseResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ParseResult);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_Token()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_Token] and conformance [A], &demangling cache variable for type metadata for [PgQuery_Token]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_KeywordKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_KeywordKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_KeywordKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_LockTupleMode()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_LockTupleMode] and conformance [A], &demangling cache variable for type metadata for [PgQuery_LockTupleMode]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_LockWaitPolicy()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_LockWaitPolicy] and conformance [A], &demangling cache variable for type metadata for [PgQuery_LockWaitPolicy]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_LockClauseStrength()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_LockClauseStrength] and conformance [A], &demangling cache variable for type metadata for [PgQuery_LockClauseStrength]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_LimitOption()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_LimitOption] and conformance [A], &demangling cache variable for type metadata for [PgQuery_LimitOption]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_OnConflictAction()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_OnConflictAction] and conformance [A], &demangling cache variable for type metadata for [PgQuery_OnConflictAction]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SetOpStrategy()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SetOpStrategy] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SetOpStrategy]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SetOpCmd()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SetOpCmd] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SetOpCmd]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_AggSplit()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_AggSplit] and conformance [A], &demangling cache variable for type metadata for [PgQuery_AggSplit]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_AggStrategy()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_AggStrategy] and conformance [A], &demangling cache variable for type metadata for [PgQuery_AggStrategy]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_JoinType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_JoinType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_JoinType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_CmdType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_CmdType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_CmdType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_BoolTestType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_BoolTestType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_BoolTestType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_NullTestType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_NullTestType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_NullTestType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_XmlOptionType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_XmlOptionType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_XmlOptionType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_XmlExprOp()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_XmlExprOp] and conformance [A], &demangling cache variable for type metadata for [PgQuery_XmlExprOp]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SQLValueFunctionOp()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SQLValueFunctionOp] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SQLValueFunctionOp]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_MinMaxOp()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_MinMaxOp] and conformance [A], &demangling cache variable for type metadata for [PgQuery_MinMaxOp]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_RowCompareType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_RowCompareType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_RowCompareType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SubLinkType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SubLinkType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SubLinkType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_BoolExprType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_BoolExprType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_BoolExprType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_CoercionForm()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_CoercionForm] and conformance [A], &demangling cache variable for type metadata for [PgQuery_CoercionForm]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_CoercionContext()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_CoercionContext] and conformance [A], &demangling cache variable for type metadata for [PgQuery_CoercionContext]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ParamKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ParamKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ParamKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_OnCommitAction()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_OnCommitAction] and conformance [A], &demangling cache variable for type metadata for [PgQuery_OnCommitAction]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_AlterSubscriptionType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_AlterSubscriptionType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_AlterSubscriptionType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_AlterTSConfigType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_AlterTSConfigType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_AlterTSConfigType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ReindexObjectType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ReindexObjectType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ReindexObjectType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_DiscardMode()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_DiscardMode] and conformance [A], &demangling cache variable for type metadata for [PgQuery_DiscardMode]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ClusterOption()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ClusterOption] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ClusterOption]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ViewCheckOption()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ViewCheckOption] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ViewCheckOption]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_TransactionStmtKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_TransactionStmtKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_TransactionStmtKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_FunctionParameterMode()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_FunctionParameterMode] and conformance [A], &demangling cache variable for type metadata for [PgQuery_FunctionParameterMode]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_FetchDirection()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_FetchDirection] and conformance [A], &demangling cache variable for type metadata for [PgQuery_FetchDirection]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_RoleStmtType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_RoleStmtType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_RoleStmtType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ImportForeignSchemaType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ImportForeignSchemaType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ImportForeignSchemaType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ConstrType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ConstrType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ConstrType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_VariableSetKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_VariableSetKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_VariableSetKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_GrantTargetType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_GrantTargetType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_GrantTargetType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_AlterTableType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_AlterTableType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_AlterTableType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_DropBehavior()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_DropBehavior] and conformance [A], &demangling cache variable for type metadata for [PgQuery_DropBehavior]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_ObjectType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_ObjectType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_ObjectType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SetOperation()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SetOperation] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SetOperation]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_CTEMaterialize()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_CTEMaterialize] and conformance [A], &demangling cache variable for type metadata for [PgQuery_CTEMaterialize]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_GroupingSetKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_GroupingSetKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_GroupingSetKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_WCOKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_WCOKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_WCOKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_RTEKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_RTEKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_RTEKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_PartitionRangeDatumKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_PartitionRangeDatumKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_PartitionRangeDatumKind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_DefElemAction()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_DefElemAction] and conformance [A], &demangling cache variable for type metadata for [PgQuery_DefElemAction]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_TableLikeOption()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_TableLikeOption] and conformance [A], &demangling cache variable for type metadata for [PgQuery_TableLikeOption]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_RoleSpecType()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_RoleSpecType] and conformance [A], &demangling cache variable for type metadata for [PgQuery_RoleSpecType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_A_Expr_Kind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_A_Expr_Kind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_A_Expr_Kind]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SortByNulls()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SortByNulls] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SortByNulls]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_SortByDir()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_SortByDir] and conformance [A], &demangling cache variable for type metadata for [PgQuery_SortByDir]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_QuerySource()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_QuerySource] and conformance [A], &demangling cache variable for type metadata for [PgQuery_QuerySource]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PgQuery_OverridingKind()
{
  return lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](&lazy protocol witness table cache variable for type [PgQuery_OverridingKind] and conformance [A], &demangling cache variable for type metadata for [PgQuery_OverridingKind]);
}

uint64_t lazy protocol witness table accessor for type [PgQuery_Token] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ScanResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanResult);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PgQuery_ParseResult()
{
  return lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken((unint64_t *)&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ParseResult);
}

uint64_t specialized PgQuery_Token.init(rawValue:)(uint64_t result)
{
  switch(result)
  {
    case 0:
      return result;
    case 37:
      uint64_t result = 1;
      break;
    case 40:
      uint64_t result = 2;
      break;
    case 41:
      uint64_t result = 3;
      break;
    case 42:
      uint64_t result = 4;
      break;
    case 43:
      uint64_t result = 5;
      break;
    case 44:
      uint64_t result = 6;
      break;
    case 45:
      uint64_t result = 7;
      break;
    case 46:
      uint64_t result = 8;
      break;
    case 47:
      uint64_t result = 9;
      break;
    case 58:
      uint64_t result = 10;
      break;
    case 59:
      uint64_t result = 11;
      break;
    case 60:
      uint64_t result = 12;
      break;
    case 61:
      uint64_t result = 13;
      break;
    case 62:
      uint64_t result = 14;
      break;
    case 63:
      uint64_t result = 15;
      break;
    case 91:
      uint64_t result = 16;
      break;
    case 92:
      uint64_t result = 17;
      break;
    case 93:
      uint64_t result = 18;
      break;
    case 94:
      uint64_t result = 19;
      break;
    case 258:
      uint64_t result = 20;
      break;
    case 259:
      uint64_t result = 21;
      break;
    case 260:
      uint64_t result = 22;
      break;
    case 261:
      uint64_t result = 23;
      break;
    case 262:
      uint64_t result = 24;
      break;
    case 263:
      uint64_t result = 25;
      break;
    case 264:
      uint64_t result = 26;
      break;
    case 265:
      uint64_t result = 27;
      break;
    case 266:
      uint64_t result = 28;
      break;
    case 267:
      uint64_t result = 29;
      break;
    case 268:
      uint64_t result = 30;
      break;
    case 269:
      uint64_t result = 31;
      break;
    case 270:
      uint64_t result = 32;
      break;
    case 271:
      uint64_t result = 33;
      break;
    case 272:
      uint64_t result = 34;
      break;
    case 273:
      uint64_t result = 35;
      break;
    case 274:
      uint64_t result = 36;
      break;
    case 275:
      uint64_t result = 37;
      break;
    case 276:
      uint64_t result = 38;
      break;
    case 277:
      uint64_t result = 39;
      break;
    case 278:
      uint64_t result = 40;
      break;
    case 279:
      uint64_t result = 41;
      break;
    case 280:
      uint64_t result = 42;
      break;
    case 281:
      uint64_t result = 43;
      break;
    case 282:
      uint64_t result = 44;
      break;
    case 283:
      uint64_t result = 45;
      break;
    case 284:
      uint64_t result = 46;
      break;
    case 285:
      uint64_t result = 47;
      break;
    case 286:
      uint64_t result = 48;
      break;
    case 287:
      uint64_t result = 49;
      break;
    case 288:
      uint64_t result = 50;
      break;
    case 289:
      uint64_t result = 51;
      break;
    case 290:
      uint64_t result = 52;
      break;
    case 291:
      uint64_t result = 53;
      break;
    case 292:
      uint64_t result = 54;
      break;
    case 293:
      uint64_t result = 55;
      break;
    case 294:
      uint64_t result = 56;
      break;
    case 295:
      uint64_t result = 57;
      break;
    case 296:
      uint64_t result = 58;
      break;
    case 297:
      uint64_t result = 59;
      break;
    case 298:
      uint64_t result = 60;
      break;
    case 299:
      uint64_t result = 61;
      break;
    case 300:
      uint64_t result = 62;
      break;
    case 301:
      uint64_t result = 63;
      break;
    case 302:
      uint64_t result = 64;
      break;
    case 303:
      uint64_t result = 65;
      break;
    case 304:
      uint64_t result = 66;
      break;
    case 305:
      uint64_t result = 67;
      break;
    case 306:
      uint64_t result = 68;
      break;
    case 307:
      uint64_t result = 69;
      break;
    case 308:
      uint64_t result = 70;
      break;
    case 309:
      uint64_t result = 71;
      break;
    case 310:
      uint64_t result = 72;
      break;
    case 311:
      uint64_t result = 73;
      break;
    case 312:
      uint64_t result = 74;
      break;
    case 313:
      uint64_t result = 75;
      break;
    case 314:
      uint64_t result = 76;
      break;
    case 315:
      uint64_t result = 77;
      break;
    case 316:
      uint64_t result = 78;
      break;
    case 317:
      uint64_t result = 79;
      break;
    case 318:
      uint64_t result = 80;
      break;
    case 319:
      uint64_t result = 81;
      break;
    case 320:
      uint64_t result = 82;
      break;
    case 321:
      uint64_t result = 83;
      break;
    case 322:
      uint64_t result = 84;
      break;
    case 323:
      uint64_t result = 85;
      break;
    case 324:
      uint64_t result = 86;
      break;
    case 325:
      uint64_t result = 87;
      break;
    case 326:
      uint64_t result = 88;
      break;
    case 327:
      uint64_t result = 89;
      break;
    case 328:
      uint64_t result = 90;
      break;
    case 329:
      uint64_t result = 91;
      break;
    case 330:
      uint64_t result = 92;
      break;
    case 331:
      uint64_t result = 93;
      break;
    case 332:
      uint64_t result = 94;
      break;
    case 333:
      uint64_t result = 95;
      break;
    case 334:
      uint64_t result = 96;
      break;
    case 335:
      uint64_t result = 97;
      break;
    case 336:
      uint64_t result = 98;
      break;
    case 337:
      uint64_t result = 99;
      break;
    case 338:
      uint64_t result = 100;
      break;
    case 339:
      uint64_t result = 101;
      break;
    case 340:
      uint64_t result = 102;
      break;
    case 341:
      uint64_t result = 103;
      break;
    case 342:
      uint64_t result = 104;
      break;
    case 343:
      uint64_t result = 105;
      break;
    case 344:
      uint64_t result = 106;
      break;
    case 345:
      uint64_t result = 107;
      break;
    case 346:
      uint64_t result = 108;
      break;
    case 347:
      uint64_t result = 109;
      break;
    case 348:
      uint64_t result = 110;
      break;
    case 349:
      uint64_t result = 111;
      break;
    case 350:
      uint64_t result = 112;
      break;
    case 351:
      uint64_t result = 113;
      break;
    case 352:
      uint64_t result = 114;
      break;
    case 353:
      uint64_t result = 115;
      break;
    case 354:
      uint64_t result = 116;
      break;
    case 355:
      uint64_t result = 117;
      break;
    case 356:
      uint64_t result = 118;
      break;
    case 357:
      uint64_t result = 119;
      break;
    case 358:
      uint64_t result = 120;
      break;
    case 359:
      uint64_t result = 121;
      break;
    case 360:
      uint64_t result = 122;
      break;
    case 361:
      uint64_t result = 123;
      break;
    case 362:
      uint64_t result = 124;
      break;
    case 363:
      uint64_t result = 125;
      break;
    case 364:
      uint64_t result = 126;
      break;
    case 365:
      uint64_t result = 127;
      break;
    default:
      uint64_t v1 = result - 366;
      uint64_t result = 128;
      switch(v1)
      {
        case 0:
          return result;
        case 1:
          uint64_t result = 129;
          break;
        case 2:
          uint64_t result = 130;
          break;
        case 3:
          uint64_t result = 131;
          break;
        case 4:
          uint64_t result = 132;
          break;
        case 5:
          uint64_t result = 133;
          break;
        case 6:
          uint64_t result = 134;
          break;
        case 7:
          uint64_t result = 135;
          break;
        case 8:
          uint64_t result = 136;
          break;
        case 9:
          uint64_t result = 137;
          break;
        case 10:
          uint64_t result = 138;
          break;
        case 11:
          uint64_t result = 139;
          break;
        case 12:
          uint64_t result = 140;
          break;
        case 13:
          uint64_t result = 141;
          break;
        case 14:
          uint64_t result = 142;
          break;
        case 15:
          uint64_t result = 143;
          break;
        case 16:
          uint64_t result = 144;
          break;
        case 17:
          uint64_t result = 145;
          break;
        case 18:
          uint64_t result = 146;
          break;
        case 19:
          uint64_t result = 147;
          break;
        case 20:
          uint64_t result = 148;
          break;
        case 21:
          uint64_t result = 149;
          break;
        case 22:
          uint64_t result = 150;
          break;
        case 23:
          uint64_t result = 151;
          break;
        case 24:
          uint64_t result = 152;
          break;
        case 25:
          uint64_t result = 153;
          break;
        case 26:
          uint64_t result = 154;
          break;
        case 27:
          uint64_t result = 155;
          break;
        case 28:
          uint64_t result = 156;
          break;
        case 29:
          uint64_t result = 157;
          break;
        case 30:
          uint64_t result = 158;
          break;
        case 31:
          uint64_t result = 159;
          break;
        case 32:
          uint64_t result = 160;
          break;
        case 33:
          uint64_t result = 161;
          break;
        case 34:
          uint64_t result = 162;
          break;
        case 35:
          uint64_t result = 163;
          break;
        case 36:
          uint64_t result = 164;
          break;
        case 37:
          uint64_t result = 165;
          break;
        case 38:
          uint64_t result = 166;
          break;
        case 39:
          uint64_t result = 167;
          break;
        case 40:
          uint64_t result = 168;
          break;
        case 41:
          uint64_t result = 169;
          break;
        case 42:
          uint64_t result = 170;
          break;
        case 43:
          uint64_t result = 171;
          break;
        case 44:
          uint64_t result = 172;
          break;
        case 45:
          uint64_t result = 173;
          break;
        case 46:
          uint64_t result = 174;
          break;
        case 47:
          uint64_t result = 175;
          break;
        case 48:
          uint64_t result = 176;
          break;
        case 49:
          uint64_t result = 177;
          break;
        case 50:
          uint64_t result = 178;
          break;
        case 51:
          uint64_t result = 179;
          break;
        case 52:
          uint64_t result = 180;
          break;
        case 53:
          uint64_t result = 181;
          break;
        case 54:
          uint64_t result = 182;
          break;
        case 55:
          uint64_t result = 183;
          break;
        case 56:
          uint64_t result = 184;
          break;
        case 57:
          uint64_t result = 185;
          break;
        case 58:
          uint64_t result = 186;
          break;
        case 59:
          uint64_t result = 187;
          break;
        case 60:
          uint64_t result = 188;
          break;
        case 61:
          uint64_t result = 189;
          break;
        case 62:
          uint64_t result = 190;
          break;
        case 63:
          uint64_t result = 191;
          break;
        default:
          uint64_t result = 448;
          break;
      }
      break;
  }
  return result;
}

uint64_t specialized static PgQuery_AlterTableSpaceOptionsStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a2 + 16)) & 1) != 0
      && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
    {
      AlterTableSpaceOptionsuint64_t Stmt = type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0);
      uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v14(v10, a1 + *(int *)(AlterTableSpaceOptionsStmt + 28), v4);
      v14(v8, a2 + *(int *)(AlterTableSpaceOptionsStmt + 28), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_AlterExtensionContentsStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v49 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v54 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v53 = (uint64_t)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v55 = (uint64_t)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v56 = (uint64_t)&v49 - v19;
  AlterExtensionContentsuint64_t Stmt = type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
  uint64_t v21 = a1;
  uint64_t v22 = *(int *)(AlterExtensionContentsStmt + 20);
  uint64_t v23 = *(void *)(a1 + v22);
  uint64_t v24 = *(void *)(a2 + v22);
  if (v23 == v24) {
    goto LABEL_19;
  }
  uint64_t v51 = v21;
  uint64_t v52 = a2;
  BOOL v25 = *(void *)(v23 + 16) == *(void *)(v24 + 16) && *(void *)(v23 + 24) == *(void *)(v24 + 24);
  if (v25 || (char v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_DWORD *)(v23 + 32) != *(_DWORD *)(v24 + 32)) {
      goto LABEL_24;
    }
    uint64_t v49 = v8;
    uint64_t v50 = v5;
    uint64_t v27 = *(void *)(v24 + 40);
    uint64_t v28 = *(unsigned __int8 *)(v24 + 48);
    uint64_t v29 = destructiveProjectEnumData for StorableValue(*(void *)(v23 + 40), *(unsigned __int8 *)(v23 + 48));
    if (v29 != destructiveProjectEnumData for StorableValue(v27, v28)) {
      goto LABEL_24;
    }
    uint64_t v30 = v23
        + OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
    uint64_t v31 = v56;
    outlined init with copy of PgQuery_Alias?(v24+ OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v56, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v32 = v55;
    uint64_t v33 = v55 + *(int *)(v13 + 48);
    outlined init with copy of PgQuery_Alias?(v30, v55, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v31, v33, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
    if (v34(v32, 1, Node) == 1)
    {
      int v35 = v34(v33, 1, Node);
      swift_retain();
      swift_retain();
      uint64_t v5 = v50;
      a2 = v52;
      if (v35 == 1)
      {
        outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_18:
        swift_release();
        swift_release();
        uint64_t v8 = v49;
        uint64_t v21 = v51;
LABEL_19:
        int v46 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v46(v10, v21, v4);
        v46(v8, a2, v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v47 = *(void (**)(char *, uint64_t))(v5 + 8);
        v47(v8, v4);
        v47(v10, v4);
        return v26 & 1;
      }
      int v37 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      uint64_t v38 = v55;
    }
    else
    {
      outlined init with copy of PgQuery_Alias?(v32, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      int v36 = v34(v33, 1, Node);
      uint64_t v5 = v50;
      a2 = v52;
      if (v36 == 1)
      {
        swift_retain();
        swift_retain();
        int v37 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        uint64_t v39 = v53;
        outlined init with take of PgQuery_OidList(v33, v53, type metadata accessor for PgQuery_Node);
        uint64_t v40 = *(int *)(Node + 20);
        uint64_t v41 = *(void *)&v18[v40];
        uint64_t v42 = *(void *)(v39 + v40);
        swift_retain();
        swift_retain();
        if (v41 == v42
          || (swift_retain(),
              swift_retain(),
              BOOL v43 = closure #1 in static PgQuery_Node.== infix(_:_:)(v41, v42),
              swift_release(),
              swift_release(),
              v43))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          uint64_t v44 = v53;
          char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
          outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
          if (v45) {
            goto LABEL_18;
          }
          goto LABEL_23;
        }
        outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_Node);
        int v37 = &demangling cache variable for type metadata for PgQuery_Node?;
      }
      uint64_t v38 = v55;
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of AnyValue?(v38, v37);
    outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_23:
    swift_release();
    swift_release();
LABEL_24:
    char v26 = 0;
  }
  return v26 & 1;
}

uint64_t specialized static PgQuery_AlterDefaultPrivilegesStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  unint64_t v60 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v59 = (char *)&v52 - v8;
  uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  uint64_t v10 = *(void *)(GrantStmt - 8);
  MEMORY[0x1F4188790](GrantStmt);
  uint64_t v58 = (unsigned __int8 *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_GrantStmt?, PgQuery_GrantStmt?));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v61 = (unsigned __int8 *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v52 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v52 - v21;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v57 = v5;
  uint64_t v55 = v4;
  uint64_t AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
  uint64_t v24 = *(int *)(AlterDefaultPrivilegesStmt + 24);
  uint64_t v54 = a1;
  outlined init with copy of PgQuery_Alias?((uint64_t)a1 + v24, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  uint64_t v53 = AlterDefaultPrivilegesStmt;
  uint64_t v25 = *(int *)(AlterDefaultPrivilegesStmt + 24);
  uint64_t v56 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v25, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v26, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v27((uint64_t)v14, 1, GrantStmt) != 1)
  {
    uint64_t v52 = v22;
    uint64_t v38 = v61;
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v61, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    if (v27(v26, 1, GrantStmt) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
      outlined destroy of AnyValue?((uint64_t)v52, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
      outlined destroy of PgQuery_Alias((uint64_t)v38, type metadata accessor for PgQuery_GrantStmt);
      goto LABEL_8;
    }
    uint64_t v41 = (uint64_t)v14;
    uint64_t v42 = v58;
    outlined init with take of PgQuery_OidList(v26, (uint64_t)v58, type metadata accessor for PgQuery_GrantStmt);
    uint64_t v29 = v56;
    uint64_t v28 = v57;
    if (*v38 != *v42) {
      goto LABEL_10;
    }
    uint64_t v44 = *((void *)v38 + 1);
    uint64_t v45 = *((void *)v42 + 1);
    if (v42[16] == 1)
    {
      switch(v45)
      {
        case 1:
          if (v44 == 1) {
            goto LABEL_25;
          }
          goto LABEL_10;
        case 2:
          if (v44 == 2) {
            goto LABEL_25;
          }
          goto LABEL_10;
        case 3:
          if (v44 == 3) {
            goto LABEL_25;
          }
          goto LABEL_10;
        default:
          if (!v44) {
            goto LABEL_25;
          }
          goto LABEL_10;
      }
    }
    if (v44 != v45) {
      goto LABEL_10;
    }
LABEL_25:
    uint64_t v46 = *((void *)v42 + 3);
    uint64_t v47 = v42[32];
    uint64_t v48 = destructiveProjectEnumData for StorableValue(*((void *)v38 + 3), v38[32]);
    if (v48 != destructiveProjectEnumData for StorableValue(v46, v47)
      || (specialized static Array<A>.== infix(_:_:)(*((void *)v38 + 5), *((void *)v42 + 5)) & 1) == 0
      || (specialized static Array<A>.== infix(_:_:)(*((void *)v38 + 6), *((void *)v42 + 6)) & 1) == 0
      || (specialized static Array<A>.== infix(_:_:)(*((void *)v38 + 7), *((void *)v42 + 7)) & 1) == 0
      || v38[64] != v42[64])
    {
      goto LABEL_10;
    }
    uint64_t v49 = *((void *)v38 + 9);
    uint64_t v50 = *((void *)v42 + 9);
    if (v42[80] == 1)
    {
      if (v50)
      {
        if (v50 == 1)
        {
          if (v49 == 1) {
            goto LABEL_40;
          }
        }
        else if (v49 == 2)
        {
          goto LABEL_40;
        }
LABEL_10:
        outlined destroy of PgQuery_Alias((uint64_t)v42, type metadata accessor for PgQuery_GrantStmt);
        outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
        outlined destroy of AnyValue?((uint64_t)v52, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
        outlined destroy of PgQuery_Alias((uint64_t)v38, type metadata accessor for PgQuery_GrantStmt);
        uint64_t v40 = v41;
        uint64_t v39 = &demangling cache variable for type metadata for PgQuery_GrantStmt?;
        goto LABEL_11;
      }
      if (v49) {
        goto LABEL_10;
      }
    }
    else if (v49 != v50)
    {
      goto LABEL_10;
    }
LABEL_40:
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias((uint64_t)v42, type metadata accessor for PgQuery_GrantStmt);
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    outlined destroy of AnyValue?((uint64_t)v52, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    outlined destroy of PgQuery_Alias((uint64_t)v38, type metadata accessor for PgQuery_GrantStmt);
    outlined destroy of AnyValue?(v41, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    if (v51) {
      goto LABEL_5;
    }
LABEL_12:
    char v36 = 0;
    return v36 & 1;
  }
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  if (v27(v26, 1, GrantStmt) != 1)
  {
LABEL_8:
    uint64_t v39 = &demangling cache variable for type metadata for (PgQuery_GrantStmt?, PgQuery_GrantStmt?);
    uint64_t v40 = (uint64_t)v14;
LABEL_11:
    outlined destroy of AnyValue?(v40, v39);
    goto LABEL_12;
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  uint64_t v29 = v56;
  uint64_t v28 = v57;
LABEL_5:
  uint64_t v30 = v53;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  uint64_t v32 = v59;
  uint64_t v33 = v55;
  v31(v59, (char *)v54 + *(int *)(v53 + 20), v55);
  uint64_t v34 = (char *)v29 + *(int *)(v30 + 20);
  int v35 = v60;
  v31(v60, v34, v33);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v37 = *(void (**)(char *, uint64_t))(v28 + 8);
  v37(v35, v33);
  v37(v32, v33);
  return v36 & 1;
}

uint64_t specialized static PgQuery_AlterTSConfigurationStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_6;
        }
        goto LABEL_22;
      case 2:
        if (v11 == 2) {
          goto LABEL_6;
        }
        goto LABEL_22;
      case 3:
        if (v11 == 3) {
          goto LABEL_6;
        }
        goto LABEL_22;
      case 4:
        if (v11 == 4) {
          goto LABEL_6;
        }
        goto LABEL_22;
      case 5:
        if (v11 != 5) {
          goto LABEL_22;
        }
        goto LABEL_6;
      default:
        if (!v11) {
          goto LABEL_6;
        }
        goto LABEL_22;
    }
  }
  if (v11 != v12) {
    goto LABEL_22;
  }
LABEL_6:
  if ((specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(a1[3], a2[3]) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(a1[4], a2[4]) & 1) == 0
    || *((unsigned __int8 *)a1 + 40) != *((unsigned __int8 *)a2 + 40)
    || *((unsigned __int8 *)a1 + 41) != *((unsigned __int8 *)a2 + 41)
    || *((unsigned __int8 *)a1 + 42) != *((unsigned __int8 *)a2 + 42))
  {
LABEL_22:
    char v15 = 0;
    return v15 & 1;
  }
  AlterTSConfigurationuint64_t Stmt = type metadata accessor for PgQuery_AlterTSConfigurationStmt(0);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v10, (char *)a1 + *(int *)(AlterTSConfigurationStmt + 44), v4);
  v14(v8, (char *)a2 + *(int *)(AlterTSConfigurationStmt + 44), v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t specialized static PgQuery_ImportForeignSchemaStmt.== infix(_:_:)(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v20 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *(void *)(a2 + 16) && *((void *)a1 + 3) == *(void *)(a2 + 24);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*((void *)a1 + 4) == *(void *)(a2 + 32) && *((void *)a1 + 5) == *(void *)(a2 + 40)
        || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        uint64_t v14 = *((void *)a1 + 6);
        uint64_t v15 = *(void *)(a2 + 48);
        if (*(unsigned char *)(a2 + 56) == 1)
        {
          switch(v15)
          {
            case 1:
              if (v14 == 1) {
                goto LABEL_25;
              }
              goto LABEL_28;
            case 2:
              if (v14 == 2) {
                goto LABEL_25;
              }
              goto LABEL_28;
            case 3:
              if (v14 == 3) {
                goto LABEL_25;
              }
              goto LABEL_28;
            default:
              if (!v14) {
                goto LABEL_25;
              }
              goto LABEL_28;
          }
        }
        if (v14 == v15)
        {
LABEL_25:
          if ((specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 8), *(void *)(a2 + 64)) & 1) != 0
            && (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 9), *(void *)(a2 + 72)) & 1) != 0)
          {
            ImportForeignSchemauint64_t Stmt = type metadata accessor for PgQuery_ImportForeignSchemaStmt(0);
            uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
            v17(v10, &a1[*(int *)(ImportForeignSchemaStmt + 40)], v4);
            v17(v8, (char *)(a2 + *(int *)(ImportForeignSchemaStmt + 40)), v4);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
            char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
            v18(v8, v4);
            v18(v10, v4);
            return v12 & 1;
          }
        }
LABEL_28:
        char v12 = 0;
      }
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateForeignServerStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)
        || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*(void *)(a1 + 48) == *(void *)(a2 + 48) && *(void *)(a1 + 56) == *(void *)(a2 + 56)
          || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          if (*(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64)
            && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 72), *(void *)(a2 + 72)) & 1) != 0)
          {
            ForeignServeruint64_t Stmt = type metadata accessor for PgQuery_CreateForeignServerStmt(0);
            uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
            v15(v10, a1 + *(int *)(ForeignServerStmt + 40), v4);
            v15(v8, a2 + *(int *)(ForeignServerStmt + 40), v4);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
            char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
            v16(v8, v4);
            v16(v10, v4);
          }
          else
          {
            char v12 = 0;
          }
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateForeignTableStmt.== infix(_:_:)(void *a1, void *a2)
{
  unint64_t v170 = a1;
  unint64_t v171 = a2;
  uint64_t v166 = type metadata accessor for UnknownStorage();
  uint64_t v163 = *(void *)(v166 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v166);
  unint64_t v162 = (char *)&v133 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  unint64_t v161 = (char *)&v133 - v4;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v141 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v137 = (uint64_t)&v133 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1F4188790](v140);
  uint64_t v143 = (uint64_t)&v133 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v138 = (uint64_t)&v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v145 = (uint64_t)&v133 - v10;
  uint64_t PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  uint64_t v148 = *(void *)(PartitionSpec - 8);
  MEMORY[0x1F4188790](PartitionSpec);
  uint64_t v139 = (uint64_t)&v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_PartitionSpec?, PgQuery_PartitionSpec?));
  MEMORY[0x1F4188790](v147);
  uint64_t v150 = (uint64_t)&v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v144 = (uint64_t)&v133 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v152 = (uint64_t)&v133 - v16;
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  uint64_t v154 = *(void *)(PartitionBoundSpec - 8);
  uint64_t v155 = PartitionBoundSpec;
  MEMORY[0x1F4188790](PartitionBoundSpec);
  uint64_t v146 = (uint64_t)&v133 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_PartitionBoundSpec?, PgQuery_PartitionBoundSpec?));
  MEMORY[0x1F4188790](v153);
  uint64_t v156 = (uint64_t)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v151 = (uint64_t)&v133 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v157 = (uint64_t)&v133 - v23;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v164 = *(void *)(RangeVar - 8);
  uint64_t v165 = RangeVar;
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v158 = (uint64_t)&v133 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v26);
  uint64_t v167 = (uint64_t)&v133 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v29 = MEMORY[0x1F4188790](v28 - 8);
  uint64_t v159 = (uint64_t)&v133 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v168 = (uint64_t)&v133 - v31;
  uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  uint64_t v33 = *(void *)(Stmt - 8);
  MEMORY[0x1F4188790](Stmt);
  uint64_t v169 = (uint64_t)&v133 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_CreateStmt?, PgQuery_CreateStmt?));
  uint64_t v36 = v35 - 8;
  MEMORY[0x1F4188790](v35);
  uint64_t v38 = (char *)&v133 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
  uint64_t v40 = MEMORY[0x1F4188790](v39 - 8);
  uint64_t v42 = (char *)&v133 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = MEMORY[0x1F4188790](v40);
  uint64_t v45 = (char *)&v133 - v44;
  MEMORY[0x1F4188790](v43);
  uint64_t v47 = (char *)&v133 - v46;
  ForeignTableuint64_t Stmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)v170 + *(int *)(ForeignTableStmt + 28), (uint64_t)v47, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  uint64_t v160 = ForeignTableStmt;
  outlined init with copy of PgQuery_Alias?((uint64_t)v171 + *(int *)(ForeignTableStmt + 28), (uint64_t)v45, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  uint64_t v49 = (uint64_t)&v38[*(int *)(v36 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v47, (uint64_t)v38, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v45, v49, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  if (v50((uint64_t)v38, 1, Stmt) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v45, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
    outlined destroy of AnyValue?((uint64_t)v47, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
    if (v50(v49, 1, Stmt) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v38, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v38, (uint64_t)v42, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  if (v50(v49, 1, Stmt) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v45, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
    outlined destroy of AnyValue?((uint64_t)v47, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
    outlined destroy of PgQuery_Alias((uint64_t)v42, type metadata accessor for PgQuery_CreateStmt);
LABEL_11:
    uint64_t v63 = &demangling cache variable for type metadata for (PgQuery_CreateStmt?, PgQuery_CreateStmt?);
    uint64_t v64 = (uint64_t)v38;
LABEL_66:
    outlined destroy of AnyValue?(v64, v63);
    goto LABEL_67;
  }
  unint64_t v135 = v38;
  unint64_t v136 = v47;
  uint64_t v65 = v169;
  outlined init with take of PgQuery_OidList(v49, v169, type metadata accessor for PgQuery_CreateStmt);
  uint64_t v66 = *(int *)(Stmt + 20);
  uint64_t v67 = *(void *)&v42[v66];
  uint64_t v68 = *(void *)(v65 + v66);
  if (v67 != v68)
  {
    uint64_t v69 = v67
        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
    uint64_t v70 = v168;
    outlined init with copy of PgQuery_Alias?(v68+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v168, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v71 = v167;
    uint64_t v72 = v167 + *(int *)(v26 + 48);
    outlined init with copy of PgQuery_Alias?(v69, v167, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined init with copy of PgQuery_Alias?(v70, v72, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v73 = v165;
    unint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v164 + 48);
    int v75 = v74(v71, 1, v165);
    unint64_t v134 = v45;
    if (v75 == 1)
    {
      unint64_t v76 = v42;
      int v77 = v74(v72, 1, v73);
      swift_retain();
      swift_retain();
      uint64_t v78 = v67;
      uint64_t v79 = v68;
      if (v77 == 1)
      {
        outlined destroy of AnyValue?(v167, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of AnyValue?(v168, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_21:
        uint64_t v85 = *(void *)(v78
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts);
        uint64_t v86 = *(void *)(v79
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v87 = specialized static Array<A>.== infix(_:_:)(v85, v86);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v87 & 1) == 0) {
          goto LABEL_64;
        }
        uint64_t v88 = *(void *)(v78
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations);
        uint64_t v89 = *(void *)(v79
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v90 = specialized static Array<A>.== infix(_:_:)(v88, v89);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v90 & 1) == 0) {
          goto LABEL_64;
        }
        uint64_t v91 = v78
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound;
        uint64_t v92 = v157;
        outlined init with copy of PgQuery_Alias?(v79+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound, v157, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
        uint64_t v93 = v156;
        uint64_t v94 = v156 + *(int *)(v153 + 48);
        outlined init with copy of PgQuery_Alias?(v91, v156, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
        outlined init with copy of PgQuery_Alias?(v92, v94, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
        uint64_t v95 = v155;
        unint64_t v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v154 + 48);
        if (v96(v93, 1, v155) == 1)
        {
          if (v96(v94, 1, v95) == 1)
          {
            outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
            outlined destroy of AnyValue?(v157, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v117 = v151;
          outlined init with copy of PgQuery_Alias?(v93, v151, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
          if (v96(v94, 1, v95) != 1)
          {
            uint64_t v118 = v146;
            outlined init with take of PgQuery_OidList(v94, v146, type metadata accessor for PgQuery_PartitionBoundSpec);
            if ((*(void *)v117 != *(void *)v118 || *(void *)(v117 + 8) != *(void *)(v118 + 8))
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
              || *(unsigned __int8 *)(v117 + 16) != *(unsigned __int8 *)(v118 + 16)
              || *(_DWORD *)(v117 + 20) != *(_DWORD *)(v118 + 20)
              || *(_DWORD *)(v117 + 24) != *(_DWORD *)(v118 + 24)
              || (specialized static Array<A>.== infix(_:_:)(*(void *)(v117 + 32), *(void *)(v118 + 32)) & 1) == 0
              || (specialized static Array<A>.== infix(_:_:)(*(void *)(v117 + 40), *(void *)(v118 + 40)) & 1) == 0
              || (specialized static Array<A>.== infix(_:_:)(*(void *)(v117 + 48), *(void *)(v118 + 48)) & 1) == 0
              || *(_DWORD *)(v117 + 56) != *(_DWORD *)(v118 + 56))
            {
              outlined destroy of PgQuery_Alias(v118, type metadata accessor for PgQuery_PartitionBoundSpec);
              outlined destroy of PgQuery_Alias(v117, type metadata accessor for PgQuery_PartitionBoundSpec);
              unint64_t v120 = &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?;
              outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
              uint64_t v82 = v157;
              goto LABEL_54;
            }
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
            char v119 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of PgQuery_Alias(v118, type metadata accessor for PgQuery_PartitionBoundSpec);
            outlined destroy of PgQuery_Alias(v117, type metadata accessor for PgQuery_PartitionBoundSpec);
            outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
            outlined destroy of AnyValue?(v157, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
            if ((v119 & 1) == 0) {
              goto LABEL_64;
            }
LABEL_26:
            uint64_t v97 = v78
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec;
            uint64_t v98 = v152;
            outlined init with copy of PgQuery_Alias?(v79+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec, v152, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
            uint64_t v99 = v150;
            uint64_t v100 = v150 + *(int *)(v147 + 48);
            outlined init with copy of PgQuery_Alias?(v97, v150, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
            outlined init with copy of PgQuery_Alias?(v98, v100, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
            unint64_t v101 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48);
            uint64_t v102 = PartitionSpec;
            if (v101(v99, 1, PartitionSpec) == 1)
            {
              if (v101(v100, 1, v102) == 1)
              {
                outlined destroy of AnyValue?(v99, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
                outlined destroy of AnyValue?(v152, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
LABEL_29:
                uint64_t v103 = v78
                     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename;
                uint64_t v104 = v145;
                outlined init with copy of PgQuery_Alias?(v79+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename, v145, &demangling cache variable for type metadata for PgQuery_TypeName?);
                uint64_t v105 = v143;
                uint64_t v106 = v143 + *(int *)(v140 + 48);
                outlined init with copy of PgQuery_Alias?(v103, v143, &demangling cache variable for type metadata for PgQuery_TypeName?);
                outlined init with copy of PgQuery_Alias?(v104, v106, &demangling cache variable for type metadata for PgQuery_TypeName?);
                unint64_t v107 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48);
                uint64_t v108 = TypeName;
                if (v107(v105, 1, TypeName) == 1)
                {
                  if (v107(v106, 1, v108) == 1)
                  {
                    outlined destroy of AnyValue?(v105, &demangling cache variable for type metadata for PgQuery_TypeName?);
                    outlined destroy of AnyValue?(v145, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_32:
                    uint64_t v109 = *(void *)(v78
                                     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
                    uint64_t v110 = *(void *)(v79
                                     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    char v111 = specialized static Array<A>.== infix(_:_:)(v109, v110);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (v111)
                    {
                      uint64_t v112 = *(void *)(v78
                                       + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
                      uint64_t v113 = *(void *)(v79
                                       + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      char v114 = specialized static Array<A>.== infix(_:_:)(v112, v113);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if (v114)
                      {
                        uint64_t v115 = *(void *)(v78
                                         + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit);
                        uint64_t v116 = *(void *)(v79
                                         + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit);
                        if (*(unsigned char *)(v79
                                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit
                                      + 8) == 1)
                        {
                          switch(v116)
                          {
                            case 1:
                              if (v115 != 1) {
                                goto LABEL_64;
                              }
                              goto LABEL_85;
                            case 2:
                              if (v115 != 2) {
                                goto LABEL_64;
                              }
                              goto LABEL_85;
                            case 3:
                              if (v115 != 3) {
                                goto LABEL_64;
                              }
                              goto LABEL_85;
                            case 4:
                              if (v115 != 4) {
                                goto LABEL_64;
                              }
                              goto LABEL_85;
                            default:
                              if (!v115) {
                                goto LABEL_85;
                              }
                              goto LABEL_64;
                          }
                        }
                        if (v115 == v116)
                        {
LABEL_85:
                          if ((*(void *)(v78
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename) == *(void *)(v79 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename)
                             && *(void *)(v78
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename
                                          + 8) == *(void *)(v79
                                                            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename
                                                            + 8)
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            && (*(void *)(v78
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) == *(void *)(v79 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod)
                             && *(void *)(v78
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                          + 8) == *(void *)(v79
                                                            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                                            + 8)
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
                          {
                            int v128 = *(unsigned __int8 *)(v78
                                                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
                            int v129 = *(unsigned __int8 *)(v79
                                                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
                            swift_release();
                            swift_release();
                            uint64_t v42 = v76;
                            uint64_t v45 = v134;
                            if (v128 == v129) {
                              goto LABEL_92;
                            }
LABEL_65:
                            outlined destroy of PgQuery_Alias(v169, type metadata accessor for PgQuery_CreateStmt);
                            outlined destroy of AnyValue?((uint64_t)v45, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
                            outlined destroy of AnyValue?((uint64_t)v136, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
                            outlined destroy of PgQuery_Alias((uint64_t)v42, type metadata accessor for PgQuery_CreateStmt);
                            uint64_t v64 = (uint64_t)v135;
                            uint64_t v63 = &demangling cache variable for type metadata for PgQuery_CreateStmt?;
                            goto LABEL_66;
                          }
                        }
                      }
                    }
LABEL_64:
                    swift_release();
                    swift_release();
                    uint64_t v42 = v76;
                    uint64_t v45 = v134;
                    goto LABEL_65;
                  }
                  goto LABEL_72;
                }
                uint64_t v125 = v138;
                outlined init with copy of PgQuery_Alias?(v105, v138, &demangling cache variable for type metadata for PgQuery_TypeName?);
                if (v107(v106, 1, v108) == 1)
                {
                  outlined destroy of PgQuery_Alias(v125, type metadata accessor for PgQuery_TypeName);
LABEL_72:
                  outlined destroy of AnyValue?(v105, &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
                  unint64_t v81 = &demangling cache variable for type metadata for PgQuery_TypeName?;
                  uint64_t v82 = v145;
                  goto LABEL_19;
                }
                uint64_t v126 = v137;
                outlined init with take of PgQuery_OidList(v106, v137, type metadata accessor for PgQuery_TypeName);
                if ((specialized static Array<A>.== infix(_:_:)(*(void *)v125, *(void *)v126) & 1) != 0
                  && *(_DWORD *)(v125 + 8) == *(_DWORD *)(v126 + 8)
                  && *(unsigned __int8 *)(v125 + 12) == *(unsigned __int8 *)(v126 + 12)
                  && *(unsigned __int8 *)(v125 + 13) == *(unsigned __int8 *)(v126 + 13)
                  && (specialized static Array<A>.== infix(_:_:)(*(void *)(v125 + 16), *(void *)(v126 + 16)) & 1) != 0
                  && *(_DWORD *)(v125 + 24) == *(_DWORD *)(v126 + 24)
                  && (specialized static Array<A>.== infix(_:_:)(*(void *)(v125 + 32), *(void *)(v126 + 32)) & 1) != 0
                  && *(_DWORD *)(v125 + 40) == *(_DWORD *)(v126 + 40))
                {
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                  char v127 = dispatch thunk of static Equatable.== infix(_:_:)();
                  outlined destroy of PgQuery_Alias(v126, type metadata accessor for PgQuery_TypeName);
                  outlined destroy of PgQuery_Alias(v125, type metadata accessor for PgQuery_TypeName);
                  outlined destroy of AnyValue?(v105, &demangling cache variable for type metadata for PgQuery_TypeName?);
                  outlined destroy of AnyValue?(v145, &demangling cache variable for type metadata for PgQuery_TypeName?);
                  if ((v127 & 1) == 0) {
                    goto LABEL_64;
                  }
                  goto LABEL_32;
                }
                outlined destroy of PgQuery_Alias(v126, type metadata accessor for PgQuery_TypeName);
                outlined destroy of PgQuery_Alias(v125, type metadata accessor for PgQuery_TypeName);
                unint64_t v120 = &demangling cache variable for type metadata for PgQuery_TypeName?;
                outlined destroy of AnyValue?(v105, &demangling cache variable for type metadata for PgQuery_TypeName?);
                uint64_t v82 = v145;
                goto LABEL_54;
              }
LABEL_57:
              outlined destroy of AnyValue?(v99, &demangling cache variable for type metadata for (PgQuery_PartitionSpec?, PgQuery_PartitionSpec?));
              unint64_t v81 = &demangling cache variable for type metadata for PgQuery_PartitionSpec?;
              uint64_t v82 = v152;
              goto LABEL_19;
            }
            uint64_t v121 = v144;
            outlined init with copy of PgQuery_Alias?(v99, v144, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
            if (v101(v100, 1, v102) == 1)
            {
              outlined destroy of PgQuery_Alias(v121, type metadata accessor for PgQuery_PartitionSpec);
              goto LABEL_57;
            }
            uint64_t v122 = v139;
            outlined init with take of PgQuery_OidList(v100, v139, type metadata accessor for PgQuery_PartitionSpec);
            if ((*(void *)v121 == *(void *)v122 && *(void *)(v121 + 8) == *(void *)(v122 + 8)
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              && (specialized static Array<A>.== infix(_:_:)(*(void *)(v121 + 16), *(void *)(v122 + 16)) & 1) != 0
              && *(_DWORD *)(v121 + 24) == *(_DWORD *)(v122 + 24))
            {
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
              char v123 = dispatch thunk of static Equatable.== infix(_:_:)();
              outlined destroy of PgQuery_Alias(v122, type metadata accessor for PgQuery_PartitionSpec);
              outlined destroy of PgQuery_Alias(v121, type metadata accessor for PgQuery_PartitionSpec);
              outlined destroy of AnyValue?(v99, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
              outlined destroy of AnyValue?(v152, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
              if ((v123 & 1) == 0) {
                goto LABEL_64;
              }
              goto LABEL_29;
            }
            outlined destroy of PgQuery_Alias(v122, type metadata accessor for PgQuery_PartitionSpec);
            outlined destroy of PgQuery_Alias(v121, type metadata accessor for PgQuery_PartitionSpec);
            unint64_t v120 = &demangling cache variable for type metadata for PgQuery_PartitionSpec?;
            outlined destroy of AnyValue?(v99, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
            uint64_t v82 = v152;
LABEL_54:
            unint64_t v81 = v120;
            goto LABEL_19;
          }
          outlined destroy of PgQuery_Alias(v117, type metadata accessor for PgQuery_PartitionBoundSpec);
        }
        outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for (PgQuery_PartitionBoundSpec?, PgQuery_PartitionBoundSpec?));
        unint64_t v81 = &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?;
        uint64_t v82 = v157;
LABEL_19:
        outlined destroy of AnyValue?(v82, v81);
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v80 = v159;
      outlined init with copy of PgQuery_Alias?(v71, v159, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      unint64_t v76 = v42;
      if (v74(v72, 1, v73) != 1)
      {
        uint64_t v83 = v158;
        outlined init with take of PgQuery_OidList(v72, v158, type metadata accessor for PgQuery_RangeVar);
        uint64_t v78 = v67;
        swift_retain();
        uint64_t v79 = v68;
        swift_retain();
        char v84 = specialized static PgQuery_RangeVar.== infix(_:_:)(v80, v83);
        outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of AnyValue?(v71, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of AnyValue?(v168, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        if ((v84 & 1) == 0) {
          goto LABEL_64;
        }
        goto LABEL_21;
      }
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_RangeVar);
    }
    outlined destroy of AnyValue?(v167, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    unint64_t v81 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    uint64_t v82 = v168;
    goto LABEL_19;
  }
LABEL_92:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v130 = (uint64_t)v45;
  uint64_t v131 = v169;
  char v132 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v131, type metadata accessor for PgQuery_CreateStmt);
  outlined destroy of AnyValue?(v130, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  outlined destroy of AnyValue?((uint64_t)v136, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  outlined destroy of PgQuery_Alias((uint64_t)v42, type metadata accessor for PgQuery_CreateStmt);
  outlined destroy of AnyValue?((uint64_t)v135, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  if ((v132 & 1) == 0) {
    goto LABEL_67;
  }
LABEL_4:
  char v51 = v170;
  uint64_t v52 = v171;
  if (*v170 == *v171 && v170[1] == v171[1] || (char v53 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (specialized static Array<A>.== infix(_:_:)(v51[2], v52[2]))
    {
      uint64_t v55 = v160;
      uint64_t v54 = v161;
      uint64_t v56 = (char *)v51 + *(int *)(v160 + 24);
      uint64_t v57 = v163;
      uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v163 + 16);
      uint64_t v59 = v166;
      v58(v161, v56, v166);
      unint64_t v60 = (char *)v52 + *(int *)(v55 + 24);
      uint64_t v61 = v162;
      v58(v162, v60, v59);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v62 = *(void (**)(char *, uint64_t))(v57 + 8);
      v62(v61, v59);
      v62(v54, v59);
      return v53 & 1;
    }
LABEL_67:
    char v53 = 0;
  }
  return v53 & 1;
}

uint64_t specialized static PgQuery_AlterObjectDependsStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v117 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v97 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v110 = *(void *)(Node - 8);
  uint64_t v10 = MEMORY[0x1F4188790](Node);
  uint64_t v103 = (uint64_t)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v106 = (uint64_t)&v97 - v12;
  uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v13 = MEMORY[0x1F4188790](v113);
  uint64_t v105 = (uint64_t)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v111 = (uint64_t)&v97 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v104 = (uint64_t)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v108 = (uint64_t)&v97 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v109 = (uint64_t)&v97 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v115 = (uint64_t)&v97 - v23;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v116 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v107 = (uint64_t)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v97 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  uint64_t v112 = (uint64_t)&v97 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)&v97 - v32;
  AlterObjectDependsuint64_t Stmt = type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
  uint64_t v35 = a1;
  uint64_t v36 = *(int *)(AlterObjectDependsStmt + 20);
  uint64_t v37 = *(void *)(a1 + v36);
  uint64_t v38 = *(void *)(a2 + v36);
  uint64_t v39 = a2;
  if (v37 == v38) {
    goto LABEL_31;
  }
  uint64_t v98 = a2;
  uint64_t v99 = v35;
  uint64_t v100 = v9;
  unint64_t v101 = v7;
  uint64_t v102 = v4;
  uint64_t v40 = *(void *)(v38 + 16);
  uint64_t v41 = *(unsigned __int8 *)(v38 + 24);
  uint64_t v42 = destructiveProjectEnumData for StorableValue(*(void *)(v37 + 16), *(unsigned __int8 *)(v37 + 24));
  if (v42 != destructiveProjectEnumData for StorableValue(v40, v41))
  {
LABEL_36:
    char v94 = 0;
    return v94 & 1;
  }
  uint64_t v43 = v37
      + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v44 = (uint64_t)&v28[*(int *)(v26 + 48)];
  outlined init with copy of PgQuery_Alias?(v43, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v33, v44, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  if (v45((uint64_t)v28, 1, RangeVar) == 1)
  {
    int v46 = v45(v44, 1, RangeVar);
    swift_retain();
    swift_retain();
    uint64_t v4 = v102;
    if (v46 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_12;
    }
LABEL_8:
    outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    uint64_t v49 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    uint64_t v50 = (uint64_t)v33;
LABEL_9:
    outlined destroy of AnyValue?(v50, v49);
    goto LABEL_35;
  }
  uint64_t v47 = v112;
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v112, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  int v48 = v45(v44, 1, RangeVar);
  uint64_t v4 = v102;
  if (v48 == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_8;
  }
  uint64_t v51 = v44;
  uint64_t v52 = v107;
  outlined init with take of PgQuery_OidList(v51, v107, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  char v53 = specialized static PgQuery_RangeVar.== infix(_:_:)(v47, v52);
  outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v53 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_12:
  uint64_t v54 = v37;
  uint64_t v55 = v37
      + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  uint64_t v56 = v115;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v115, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v57 = v111;
  uint64_t v58 = v111 + *(int *)(v113 + 48);
  outlined init with copy of PgQuery_Alias?(v55, v111, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v59 = v57;
  outlined init with copy of PgQuery_Alias?(v56, v58, &demangling cache variable for type metadata for PgQuery_Node?);
  unint64_t v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
  uint64_t v61 = Node;
  if (v60(v59, 1, Node) == 1)
  {
    if (v60(v58, 1, v61) == 1)
    {
      outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v115, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v62 = v54;
      goto LABEL_21;
    }
    uint64_t v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_34;
  }
  uint64_t v63 = v109;
  outlined init with copy of PgQuery_Alias?(v59, v109, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v60(v58, 1, v61) == 1)
  {
    uint64_t v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    uint64_t v65 = v63;
LABEL_33:
    outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
LABEL_34:
    outlined destroy of AnyValue?(v59, v64);
    outlined destroy of AnyValue?(v115, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_35;
  }
  uint64_t v66 = v106;
  outlined init with take of PgQuery_OidList(v58, v106, type metadata accessor for PgQuery_Node);
  uint64_t v67 = *(int *)(v61 + 20);
  uint64_t v68 = *(void *)(v63 + v67);
  uint64_t v69 = *(void *)(v66 + v67);
  if (v68 != v69)
  {
    swift_retain();
    swift_retain();
    BOOL v70 = closure #1 in static PgQuery_Node.== infix(_:_:)(v68, v69);
    swift_release();
    swift_release();
    if (!v70)
    {
      outlined destroy of PgQuery_Alias(v106, type metadata accessor for PgQuery_Node);
      uint64_t v64 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v59 = v111;
      uint64_t v65 = v109;
      goto LABEL_33;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v71 = v109;
  uint64_t v72 = v106;
  char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v72, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v111, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v115, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v62 = v54;
  if ((v73 & 1) == 0)
  {
LABEL_35:
    swift_release();
    swift_release();
    goto LABEL_36;
  }
LABEL_21:
  uint64_t v74 = v62
      + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extname;
  uint64_t v75 = v108;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extname, v108, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v76 = v105 + *(int *)(v113 + 48);
  uint64_t v77 = v74;
  uint64_t v78 = v105;
  outlined init with copy of PgQuery_Alias?(v77, v105, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v75, v76, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v79 = Node;
  if (v60(v78, 1, Node) == 1)
  {
    if (v60(v76, 1, v79) == 1)
    {
      outlined destroy of AnyValue?(v78, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v108, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v80 = v54;
      goto LABEL_30;
    }
    uint64_t v82 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_40;
  }
  uint64_t v81 = v104;
  outlined init with copy of PgQuery_Alias?(v78, v104, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v60(v76, 1, v79) == 1)
  {
    uint64_t v82 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_39:
    outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_Node);
LABEL_40:
    outlined destroy of AnyValue?(v78, v82);
    uint64_t v49 = &demangling cache variable for type metadata for PgQuery_Node?;
    uint64_t v50 = v108;
    goto LABEL_9;
  }
  uint64_t v83 = v103;
  outlined init with take of PgQuery_OidList(v76, v103, type metadata accessor for PgQuery_Node);
  uint64_t v84 = *(int *)(v79 + 20);
  uint64_t v85 = *(void *)(v81 + v84);
  uint64_t v86 = *(void *)(v83 + v84);
  if (v85 != v86)
  {
    swift_retain();
    swift_retain();
    BOOL v87 = closure #1 in static PgQuery_Node.== infix(_:_:)(v85, v86);
    swift_release();
    swift_release();
    if (!v87)
    {
      outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_Node);
      uint64_t v82 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v78 = v105;
      goto LABEL_39;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v88 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v105, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v108, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v80 = v54;
  if ((v88 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_30:
  int v89 = *(unsigned __int8 *)(v80
                           + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__remove);
  int v90 = *(unsigned __int8 *)(v38
                           + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__remove);
  swift_release();
  swift_release();
  uint64_t v9 = v100;
  uint64_t v7 = v101;
  uint64_t v39 = v98;
  uint64_t v35 = v99;
  if (v89 != v90) {
    goto LABEL_36;
  }
LABEL_31:
  uint64_t v91 = v117;
  uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v117 + 16);
  uint64_t v93 = v39;
  v92(v9, v35, v4);
  v92(v7, v93, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v94 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v95 = *(void (**)(char *, uint64_t))(v91 + 8);
  v95(v7, v4);
  v95(v9, v4);
  return v94 & 1;
}

uint64_t specialized static PgQuery_AlterForeignServerStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if ((specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 32), *(void *)(a2 + 32)) & 1) != 0
        && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
      {
        AlterForeignServeruint64_t Stmt = type metadata accessor for PgQuery_AlterForeignServerStmt(0);
        uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v15(v10, a1 + *(int *)(AlterForeignServerStmt + 32), v4);
        v15(v8, a2 + *(int *)(AlterForeignServerStmt + 32), v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
        v16(v8, v4);
        v16(v10, v4);
      }
      else
      {
        char v12 = 0;
      }
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateUserMappingStmt.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v51 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v50 = (char *)&v49 - v7;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v9 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v54 = (uint64_t)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v49 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v49 - v22;
  UserMappinguint64_t Stmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
  uint64_t v25 = *(int *)(UserMappingStmt + 32);
  uint64_t v55 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = UserMappingStmt;
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v28 = *(int *)(v27 + 32);
  uint64_t v56 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v30(v29, 1, RoleSpec) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v30(v29, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
LABEL_12:
    uint64_t v42 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    uint64_t v43 = (uint64_t)v14;
LABEL_32:
    outlined destroy of AnyValue?(v43, v42);
    goto LABEL_33;
  }
  uint64_t v44 = v54;
  outlined init with take of PgQuery_OidList(v29, v54, type metadata accessor for PgQuery_RoleSpec);
  uint64_t v45 = *(void *)v18;
  uint64_t v46 = *(void *)v44;
  if (*(unsigned char *)(v44 + 8) == 1)
  {
    switch(v46)
    {
      case 1:
        if (v45 != 1) {
          goto LABEL_31;
        }
        goto LABEL_18;
      case 2:
        if (v45 != 2) {
          goto LABEL_31;
        }
        goto LABEL_18;
      case 3:
        if (v45 != 3) {
          goto LABEL_31;
        }
        goto LABEL_18;
      case 4:
        if (v45 != 4) {
          goto LABEL_31;
        }
        goto LABEL_18;
      default:
        if (!v45) {
          goto LABEL_18;
        }
        goto LABEL_31;
    }
  }
  if (v45 != v46)
  {
LABEL_31:
    outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_RoleSpec);
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
    uint64_t v43 = (uint64_t)v14;
    uint64_t v42 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    goto LABEL_32;
  }
LABEL_18:
  if ((*((void *)v18 + 2) != *(void *)(v44 + 16) || *((void *)v18 + 3) != *(void *)(v44 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *((_DWORD *)v18 + 8) != *(_DWORD *)(v44 + 32))
  {
    goto LABEL_31;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((v47 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v31 = v55;
  uint64_t v32 = v56;
  if (*v55 == *v56 && v55[1] == v56[1] || (char v33 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((unsigned __int8 *)v31 + 16) == *((unsigned __int8 *)v32 + 16)
      && (specialized static Array<A>.== infix(_:_:)(v31[3], v32[3]) & 1) != 0)
    {
      uint64_t v34 = (char *)v31 + *(int *)(v27 + 28);
      uint64_t v36 = v52;
      uint64_t v35 = v53;
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
      uint64_t v38 = v50;
      v37(v50, v34, v53);
      uint64_t v39 = (char *)v32 + *(int *)(v27 + 28);
      uint64_t v40 = v51;
      v37(v51, v39, v35);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v36 + 8);
      v41(v40, v35);
      v41(v38, v35);
      return v33 & 1;
    }
LABEL_33:
    char v33 = 0;
  }
  return v33 & 1;
}

uint64_t specialized static PgQuery_CreatePublicationStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a2 + 16)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a2 + 24)) & 1) != 0
      && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
    {
      Publicationuint64_t Stmt = type metadata accessor for PgQuery_CreatePublicationStmt(0);
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, a1 + *(int *)(PublicationStmt + 32), v4);
      v15(v8, a2 + *(int *)(PublicationStmt + 32), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_AlterTableMoveAllStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v20 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v13 = *(void *)(a2 + 16);
    uint64_t v14 = *(unsigned __int8 *)(a2 + 24);
    uint64_t v15 = destructiveProjectEnumData for StorableValue(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
    if (v15 != destructiveProjectEnumData for StorableValue(v13, v14)
      || (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 32), *(void *)(a2 + 32)) & 1) == 0)
    {
LABEL_12:
      char v12 = 0;
      return v12 & 1;
    }
    if (*(void *)(a1 + 40) == *(void *)(a2 + 40) && *(void *)(a1 + 48) == *(void *)(a2 + 48)
      || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
      {
        AlterTableMoveAlluint64_t Stmt = type metadata accessor for PgQuery_AlterTableMoveAllStmt(0);
        uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v18(v10, a1 + *(int *)(AlterTableMoveAllStmt + 36), v4);
        v18(v8, a2 + *(int *)(AlterTableMoveAllStmt + 36), v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
        v19(v8, v4);
        v19(v10, v4);
        return v12 & 1;
      }
      goto LABEL_12;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_AlterSubscriptionStmt.== infix(_:_:)(char *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 != 1) {
          goto LABEL_26;
        }
        goto LABEL_6;
      case 2:
        if (v11 != 2) {
          goto LABEL_26;
        }
        goto LABEL_6;
      case 3:
        if (v11 != 3) {
          goto LABEL_26;
        }
        goto LABEL_6;
      case 4:
        if (v11 != 4) {
          goto LABEL_26;
        }
        goto LABEL_6;
      case 5:
        if (v11 != 5) {
          goto LABEL_26;
        }
        goto LABEL_6;
      default:
        if (!v11) {
          goto LABEL_6;
        }
        goto LABEL_26;
    }
  }
  if (v11 != v12) {
    goto LABEL_26;
  }
LABEL_6:
  BOOL v13 = *((void *)a1 + 2) == a2[2] && *((void *)a1 + 3) == a2[3];
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((void *)a1 + 4) == a2[4] && *((void *)a1 + 5) == a2[5]
      || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if ((specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 6), a2[6]) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 7), a2[7]) & 1) != 0)
      {
        AlterSubscriptionuint64_t Stmt = type metadata accessor for PgQuery_AlterSubscriptionStmt(0);
        uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
        v16(v10, &a1[*(int *)(AlterSubscriptionStmt + 36)], v4);
        v16(v8, (char *)a2 + *(int *)(AlterSubscriptionStmt + 36), v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
        v17(v8, v4);
        v17(v10, v4);
        return v14 & 1;
      }
LABEL_26:
      char v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_AlterObjectSchemaStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v84 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v94 = *(void *)(Node - 8);
  uint64_t v95 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v90 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v93);
  uint64_t v97 = (uint64_t)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v92 = (uint64_t)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v96 = (uint64_t)&v84 - v17;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v99 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v91 = (uint64_t)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v98 = (uint64_t)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v84 - v26;
  AlterObjectSchemauint64_t Stmt = type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  uint64_t v31 = *(int *)(AlterObjectSchemaStmt + 20);
  uint64_t v32 = *(void *)(a1 + v31);
  uint64_t v33 = *(void *)(v29 + v31);
  if (v32 == v33) {
    goto LABEL_24;
  }
  uint64_t v85 = v29;
  uint64_t v86 = a1;
  BOOL v87 = v8;
  uint64_t v88 = v4;
  uint64_t v89 = v5;
  uint64_t v34 = *(void *)(v32 + 16);
  uint64_t v35 = *(unsigned __int8 *)(v32 + 24);
  uint64_t v36 = *(void *)(v33 + 16);
  uint64_t v37 = v32;
  uint64_t v38 = v33;
  uint64_t v39 = *(unsigned __int8 *)(v33 + 24);
  uint64_t v40 = destructiveProjectEnumData for StorableValue(v34, v35);
  if (v40 != destructiveProjectEnumData for StorableValue(v36, v39))
  {
LABEL_29:
    char v81 = 0;
    return v81 & 1;
  }
  uint64_t v41 = v37
      + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t v42 = (uint64_t)v27;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v43 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of PgQuery_Alias?(v41, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v43, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 48);
  if (v44((uint64_t)v22, 1, RangeVar) == 1)
  {
    int v45 = v44(v43, 1, RangeVar);
    swift_retain();
    swift_retain();
    uint64_t v46 = v37;
    uint64_t v47 = v38;
    if (v45 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?(v42, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_10;
    }
LABEL_8:
    outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of AnyValue?(v42, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_28;
  }
  uint64_t v48 = v38;
  uint64_t v49 = v37;
  uint64_t v50 = v98;
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, v98, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v44(v43, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_8;
  }
  uint64_t v51 = v50;
  uint64_t v52 = v91;
  outlined init with take of PgQuery_OidList(v43, v91, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  char v53 = specialized static PgQuery_RangeVar.== infix(_:_:)(v51, v52);
  outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v47 = v48;
  uint64_t v46 = v49;
  outlined destroy of AnyValue?(v42, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v53 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_10:
  uint64_t v54 = v46;
  uint64_t v55 = v47;
  uint64_t v56 = v46
      + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  uint64_t v57 = v55;
  uint64_t v58 = v96;
  outlined init with copy of PgQuery_Alias?(v55+ OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v96, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v59 = v97;
  uint64_t v60 = v97 + *(int *)(v93 + 48);
  outlined init with copy of PgQuery_Alias?(v56, v97, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v58, v60, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v61 = v95;
  uint64_t v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
  if (v62(v59, 1, v95) == 1)
  {
    int v63 = v62(v60, 1, v61);
    uint64_t v5 = v89;
    if (v63 == 1)
    {
      outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v58, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v64 = v54;
      goto LABEL_20;
    }
    uint64_t v67 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_27;
  }
  uint64_t v65 = v92;
  outlined init with copy of PgQuery_Alias?(v59, v92, &demangling cache variable for type metadata for PgQuery_Node?);
  int v66 = v62(v60, 1, v61);
  uint64_t v5 = v89;
  if (v66 == 1)
  {
    uint64_t v67 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
LABEL_27:
    outlined destroy of AnyValue?(v59, v67);
    outlined destroy of AnyValue?(v58, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_28;
  }
  uint64_t v68 = v60;
  uint64_t v69 = v61;
  uint64_t v70 = v90;
  outlined init with take of PgQuery_OidList(v68, v90, type metadata accessor for PgQuery_Node);
  uint64_t v71 = *(int *)(v69 + 20);
  uint64_t v72 = *(void *)(v65 + v71);
  uint64_t v73 = *(void *)(v70 + v71);
  if (v72 != v73)
  {
    swift_retain();
    swift_retain();
    BOOL v74 = closure #1 in static PgQuery_Node.== infix(_:_:)(v72, v73);
    swift_release();
    swift_release();
    if (!v74)
    {
      outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_Node);
      uint64_t v67 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v65 = v92;
      goto LABEL_26;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v75 = v92;
  char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v58, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v64 = v54;
  if ((v76 & 1) == 0)
  {
LABEL_28:
    swift_release();
    swift_release();
    goto LABEL_29;
  }
LABEL_20:
  if ((*(void *)(v64
                  + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema) != *(void *)(v57 + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema)
     || *(void *)(v64
                  + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema
                  + 8) != *(void *)(v57
                                    + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_28;
  }
  int v77 = *(unsigned __int8 *)(v64
                           + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
  int v78 = *(unsigned __int8 *)(v57
                           + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
  swift_release();
  swift_release();
  uint64_t v30 = v86;
  uint64_t v8 = v87;
  uint64_t v29 = v85;
  uint64_t v4 = v88;
  if (v77 != v78) {
    goto LABEL_29;
  }
LABEL_24:
  uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v80 = v29;
  v79(v10, v30, v4);
  v79(v8, v80, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v81 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v82 = *(void (**)(char *, uint64_t))(v5 + 8);
  v82(v8, v4);
  v82(v10, v4);
  return v81 & 1;
}

uint64_t specialized static PgQuery_DropSubscriptionStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
      goto LABEL_15;
    }
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t v14 = *(void *)(a2 + 24);
    if (*(unsigned char *)(a2 + 32) == 1)
    {
      if (v14)
      {
        if (v14 == 1)
        {
          if (v13 == 1) {
            goto LABEL_13;
          }
        }
        else if (v13 == 2)
        {
          goto LABEL_13;
        }
LABEL_15:
        char v12 = 0;
        return v12 & 1;
      }
      if (v13) {
        goto LABEL_15;
      }
    }
    else if (v13 != v14)
    {
      goto LABEL_15;
    }
LABEL_13:
    DropSubscriptionuint64_t Stmt = type metadata accessor for PgQuery_DropSubscriptionStmt(0);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v10, a1 + *(int *)(DropSubscriptionStmt + 28), v4);
    v16(v8, a2 + *(int *)(DropSubscriptionStmt + 28), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateTableSpaceStmt.== infix(_:_:)(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v51 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v50 = (char *)&v48 - v7;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v9 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  BOOL v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v48 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *((void *)a1 + 1);
  uint64_t v55 = a1;
  if (v24 != *a2 || v25 != a2[1])
  {
    char v26 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v26 & 1;
    }
  }
  uint64_t v49 = v11;
  TableSpaceuint64_t Stmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)&v55[*(int *)(TableSpaceStmt + 32)], (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v48 = TableSpaceStmt;
  uint64_t v28 = *(int *)(TableSpaceStmt + 32);
  uint64_t v54 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v30(v29, 1, RoleSpec) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      uint64_t v31 = v54;
      goto LABEL_7;
    }
    goto LABEL_14;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v30(v29, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
LABEL_14:
    uint64_t v41 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    uint64_t v42 = (uint64_t)v14;
LABEL_34:
    outlined destroy of AnyValue?(v42, v41);
    goto LABEL_35;
  }
  uint64_t v43 = (uint64_t)v49;
  outlined init with take of PgQuery_OidList(v29, (uint64_t)v49, type metadata accessor for PgQuery_RoleSpec);
  uint64_t v44 = *(void *)v18;
  uint64_t v45 = *(void *)v43;
  if (*(unsigned char *)(v43 + 8) == 1)
  {
    uint64_t v31 = v54;
    switch(v45)
    {
      case 1:
        if (v44 != 1) {
          goto LABEL_33;
        }
        goto LABEL_20;
      case 2:
        if (v44 != 2) {
          goto LABEL_33;
        }
        goto LABEL_20;
      case 3:
        if (v44 != 3) {
          goto LABEL_33;
        }
        goto LABEL_20;
      case 4:
        if (v44 != 4) {
          goto LABEL_33;
        }
        goto LABEL_20;
      default:
        if (!v44) {
          goto LABEL_20;
        }
        goto LABEL_33;
    }
  }
  uint64_t v31 = v54;
  if (v44 != v45)
  {
LABEL_33:
    outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_RoleSpec);
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
    uint64_t v42 = (uint64_t)v14;
    uint64_t v41 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    goto LABEL_34;
  }
LABEL_20:
  if ((*((void *)v18 + 2) != *(void *)(v43 + 16) || *((void *)v18 + 3) != *(void *)(v43 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *((_DWORD *)v18 + 8) != *(_DWORD *)(v43 + 32))
  {
    goto LABEL_33;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((v46 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_7:
  if (*((void *)v55 + 2) == v31[2] && *((void *)v55 + 3) == v31[3]
    || (char v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v32 = v55;
    if (specialized static Array<A>.== infix(_:_:)(*((void *)v55 + 4), v31[4]))
    {
      uint64_t v33 = v48;
      uint64_t v35 = v52;
      uint64_t v34 = v53;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
      uint64_t v37 = v50;
      v36(v50, &v32[*(int *)(v48 + 28)], v53);
      uint64_t v38 = (char *)v31 + *(int *)(v33 + 28);
      uint64_t v39 = v51;
      v36(v51, v38, v34);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v40 = *(void (**)(char *, uint64_t))(v35 + 8);
      v40(v39, v34);
      v40(v37, v34);
      return v26 & 1;
    }
LABEL_35:
    char v26 = 0;
  }
  return v26 & 1;
}

uint64_t specialized static PgQuery_CreateConversionStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0)
  {
LABEL_12:
    char v12 = 0;
    return v12 & 1;
  }
  BOOL v11 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32)
      || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if ((specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 40), *(void *)(a2 + 40)) & 1) != 0
        && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
      {
        Conversionuint64_t Stmt = type metadata accessor for PgQuery_CreateConversionStmt(0);
        uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v15(v10, a1 + *(int *)(ConversionStmt + 36), v4);
        v15(v8, a2 + *(int *)(ConversionStmt + 36), v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
        v16(v8, v4);
        v16(v10, v4);
        return v12 & 1;
      }
      goto LABEL_12;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_AlterUserMappingStmt.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v51 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v50 = (char *)&v49 - v7;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v9 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v54 = (uint64_t)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v49 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v49 - v22;
  AlterUserMappinguint64_t Stmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
  uint64_t v25 = *(int *)(AlterUserMappingStmt + 28);
  uint64_t v55 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = AlterUserMappingStmt;
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v28 = *(int *)(v27 + 28);
  uint64_t v56 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v30(v29, 1, RoleSpec) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v30(v29, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
LABEL_11:
    uint64_t v42 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    uint64_t v43 = (uint64_t)v14;
LABEL_31:
    outlined destroy of AnyValue?(v43, v42);
    goto LABEL_32;
  }
  uint64_t v44 = v54;
  outlined init with take of PgQuery_OidList(v29, v54, type metadata accessor for PgQuery_RoleSpec);
  uint64_t v45 = *(void *)v18;
  uint64_t v46 = *(void *)v44;
  if (*(unsigned char *)(v44 + 8) == 1)
  {
    switch(v46)
    {
      case 1:
        if (v45 != 1) {
          goto LABEL_30;
        }
        goto LABEL_17;
      case 2:
        if (v45 != 2) {
          goto LABEL_30;
        }
        goto LABEL_17;
      case 3:
        if (v45 != 3) {
          goto LABEL_30;
        }
        goto LABEL_17;
      case 4:
        if (v45 != 4) {
          goto LABEL_30;
        }
        goto LABEL_17;
      default:
        if (!v45) {
          goto LABEL_17;
        }
        goto LABEL_30;
    }
  }
  if (v45 != v46)
  {
LABEL_30:
    outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_RoleSpec);
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
    uint64_t v43 = (uint64_t)v14;
    uint64_t v42 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    goto LABEL_31;
  }
LABEL_17:
  if ((*((void *)v18 + 2) != *(void *)(v44 + 16) || *((void *)v18 + 3) != *(void *)(v44 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *((_DWORD *)v18 + 8) != *(_DWORD *)(v44 + 32))
  {
    goto LABEL_30;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((v47 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_4:
  uint64_t v31 = v55;
  uint64_t v32 = v56;
  if (*v55 == *v56 && v55[1] == v56[1] || (char v33 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (specialized static Array<A>.== infix(_:_:)(v31[2], v32[2]))
    {
      uint64_t v34 = (char *)v31 + *(int *)(v27 + 24);
      uint64_t v36 = v52;
      uint64_t v35 = v53;
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
      uint64_t v38 = v50;
      v37(v50, v34, v53);
      uint64_t v39 = (char *)v32 + *(int *)(v27 + 24);
      uint64_t v40 = v51;
      v37(v51, v39, v35);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v36 + 8);
      v41(v40, v35);
      v41(v38, v35);
      return v33 & 1;
    }
LABEL_32:
    char v33 = 0;
  }
  return v33 & 1;
}

uint64_t specialized static PgQuery_AlterPublicationStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a2 + 16)) & 1) == 0
      || (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a2 + 24)) & 1) == 0
      || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    {
      goto LABEL_9;
    }
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(a2 + 40);
    if (*(unsigned char *)(a2 + 48) == 1)
    {
      switch(v15)
      {
        case 1:
          if (v14 == 1) {
            goto LABEL_16;
          }
          goto LABEL_9;
        case 2:
          if (v14 == 2) {
            goto LABEL_16;
          }
          goto LABEL_9;
        case 3:
          if (v14 == 3) {
            goto LABEL_16;
          }
          goto LABEL_9;
        case 4:
          if (v14 == 4) {
            goto LABEL_16;
          }
          goto LABEL_9;
        default:
          if (!v14) {
            goto LABEL_16;
          }
          goto LABEL_9;
      }
    }
    if (v14 == v15)
    {
LABEL_16:
      AlterPublicationuint64_t Stmt = type metadata accessor for PgQuery_AlterPublicationStmt(0);
      uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v17(v10, a1 + *(int *)(AlterPublicationStmt + 36), v4);
      v17(v8, a2 + *(int *)(AlterPublicationStmt + 36), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v8, v4);
      v18(v10, v4);
    }
    else
    {
LABEL_9:
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_AlterDatabaseSetStmt.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v45 = (char *)&v42 - v7;
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v9 = *(void *)(VariableSetStmt - 8);
  MEMORY[0x1F4188790](VariableSetStmt);
  uint64_t v44 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_VariableSetStmt?, PgQuery_VariableSetStmt?));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v42 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v42 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  if (v23 == *(void *)a2 && v24 == *((void *)a2 + 1)
    || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v43 = v4;
    AlterDatabaseSetuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
    outlined init with copy of PgQuery_Alias?((uint64_t)&v48[*(int *)(AlterDatabaseSetStmt + 24)], (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    outlined init with copy of PgQuery_Alias?((uint64_t)&v49[*(int *)(AlterDatabaseSetStmt + 24)], (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v20, v27, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, VariableSetStmt) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      if (v28(v27, 1, VariableSetStmt) == 1)
      {
        outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
LABEL_7:
        uint64_t v29 = v47;
        uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
        uint64_t v31 = v45;
        uint64_t v32 = v43;
        v30(v45, &v48[*(int *)(AlterDatabaseSetStmt + 20)], v43);
        char v33 = v46;
        v30(v46, &v49[*(int *)(AlterDatabaseSetStmt + 20)], v32);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v34 = *(void (**)(char *, uint64_t))(v29 + 8);
        v34(v33, v32);
        v34(v31, v32);
        return v25 & 1;
      }
    }
    else
    {
      outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      if (v28(v27, 1, VariableSetStmt) != 1)
      {
        uint64_t v37 = v44;
        outlined init with take of PgQuery_OidList(v27, v44, type metadata accessor for PgQuery_VariableSetStmt);
        uint64_t v38 = *(void *)v17;
        uint64_t v39 = *(void *)v37;
        if (*(unsigned char *)(v37 + 8) == 1)
        {
          switch(v39)
          {
            case 1:
              if (v38 != 1) {
                goto LABEL_34;
              }
              goto LABEL_16;
            case 2:
              if (v38 != 2) {
                goto LABEL_34;
              }
              goto LABEL_16;
            case 3:
              if (v38 != 3) {
                goto LABEL_34;
              }
              goto LABEL_16;
            case 4:
              if (v38 != 4) {
                goto LABEL_34;
              }
              goto LABEL_16;
            case 5:
              if (v38 != 5) {
                goto LABEL_34;
              }
              goto LABEL_16;
            case 6:
              if (v38 != 6) {
                goto LABEL_34;
              }
              goto LABEL_16;
            default:
              if (!v38) {
                goto LABEL_16;
              }
              goto LABEL_34;
          }
        }
        if (v38 == v39)
        {
LABEL_16:
          if ((*((void *)v17 + 2) == *(void *)(v37 + 16) && *((void *)v17 + 3) == *(void *)(v37 + 24)
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && (specialized static Array<A>.== infix(_:_:)(*((void *)v17 + 4), *(void *)(v37 + 32)) & 1) != 0
            && v17[40] == *(unsigned char *)(v37 + 40))
          {
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
            char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_VariableSetStmt);
            outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
            outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
            outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_VariableSetStmt);
            outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
            if (v40) {
              goto LABEL_7;
            }
LABEL_36:
            char v25 = 0;
            return v25 & 1;
          }
        }
LABEL_34:
        outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_VariableSetStmt);
        outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_VariableSetStmt);
        uint64_t v36 = (uint64_t)v13;
        uint64_t v35 = &demangling cache variable for type metadata for PgQuery_VariableSetStmt?;
LABEL_35:
        outlined destroy of AnyValue?(v36, v35);
        goto LABEL_36;
      }
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_VariableSetStmt);
    }
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_VariableSetStmt?, PgQuery_VariableSetStmt?);
    uint64_t v36 = (uint64_t)v13;
    goto LABEL_35;
  }
  return v25 & 1;
}

uint64_t specialized static PgQuery_PartitionRangeDatum.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v56 = (char *)&v50 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v54 = (uint64_t)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v57 = (uint64_t)&v50 - v20;
  uint64_t PartitionRangeDatum = type metadata accessor for PgQuery_PartitionRangeDatum(0);
  uint64_t v22 = a1;
  uint64_t v23 = *(int *)(PartitionRangeDatum + 20);
  uint64_t v24 = *(void *)(a1 + v23);
  uint64_t v55 = a2;
  uint64_t v25 = *(void *)(a2 + v23);
  if (v24 == v25) {
    goto LABEL_24;
  }
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = *(void *)(v25 + 16);
  if (*(unsigned char *)(v25 + 24) == 1)
  {
    switch(v27)
    {
      case 1:
        if (v26 != 1) {
          goto LABEL_29;
        }
        goto LABEL_13;
      case 2:
        if (v26 != 2) {
          goto LABEL_29;
        }
        goto LABEL_13;
      case 3:
        if (v26 == 3) {
          goto LABEL_13;
        }
        goto LABEL_29;
      default:
        if (!v26) {
          goto LABEL_13;
        }
        goto LABEL_29;
    }
  }
  if (v26 != v27) {
    goto LABEL_29;
  }
LABEL_13:
  uint64_t v50 = v13;
  uint64_t v51 = v22;
  uint64_t v52 = v8;
  uint64_t v53 = v5;
  uint64_t v28 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__value;
  uint64_t v29 = v57;
  outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__value, v57, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = (uint64_t)&v16[*(int *)(v14 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v29, v30, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v16, 1, Node) == 1)
  {
    int v32 = v31(v30, 1, Node);
    swift_retain();
    swift_retain();
    uint64_t v5 = v53;
    if (v32 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_22;
    }
    uint64_t v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_27;
  }
  uint64_t v33 = v54;
  outlined init with copy of PgQuery_Alias?((uint64_t)v16, v54, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v31(v30, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
LABEL_27:
    outlined destroy of AnyValue?((uint64_t)v16, v34);
    outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_28;
  }
  uint64_t v35 = (uint64_t)v50;
  outlined init with take of PgQuery_OidList(v30, (uint64_t)v50, type metadata accessor for PgQuery_Node);
  uint64_t v36 = *(int *)(Node + 20);
  uint64_t v37 = *(void *)(v33 + v36);
  uint64_t v38 = *(void *)(v35 + v36);
  swift_retain();
  swift_retain();
  if (v37 != v38)
  {
    swift_retain();
    swift_retain();
    BOOL v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38);
    swift_release();
    swift_release();
    if (!v39)
    {
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
      uint64_t v34 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_26;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v5 = v53;
  if ((v40 & 1) == 0)
  {
LABEL_28:
    swift_release();
    swift_release();
LABEL_29:
    char v47 = 0;
    return v47 & 1;
  }
LABEL_22:
  int v41 = *(_DWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v42 = *(_DWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  BOOL v43 = v41 == v42;
  uint64_t v22 = v51;
  uint64_t v8 = v52;
  if (!v43) {
    goto LABEL_29;
  }
LABEL_24:
  uint64_t v44 = v8;
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v56;
  v45(v56, v22, v4);
  v45(v44, v55, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v48 = *(void (**)(char *, uint64_t))(v5 + 8);
  v48(v44, v4);
  v48(v46, v4);
  return v47 & 1;
}

uint64_t specialized static PgQuery_DropUserMappingStmt.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v51 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v50 = (char *)&v49 - v7;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v9 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v54 = (uint64_t)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v49 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v49 - v22;
  DropUserMappinguint64_t Stmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
  uint64_t v25 = *(int *)(DropUserMappingStmt + 28);
  uint64_t v55 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = DropUserMappingStmt;
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v28 = *(int *)(v27 + 28);
  uint64_t v56 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v30(v29, 1, RoleSpec) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v30(v29, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
LABEL_11:
    int v42 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    uint64_t v43 = (uint64_t)v14;
LABEL_31:
    outlined destroy of AnyValue?(v43, v42);
    goto LABEL_32;
  }
  uint64_t v44 = v54;
  outlined init with take of PgQuery_OidList(v29, v54, type metadata accessor for PgQuery_RoleSpec);
  uint64_t v45 = *(void *)v18;
  uint64_t v46 = *(void *)v44;
  if (*(unsigned char *)(v44 + 8) == 1)
  {
    switch(v46)
    {
      case 1:
        if (v45 != 1) {
          goto LABEL_30;
        }
        goto LABEL_17;
      case 2:
        if (v45 != 2) {
          goto LABEL_30;
        }
        goto LABEL_17;
      case 3:
        if (v45 != 3) {
          goto LABEL_30;
        }
        goto LABEL_17;
      case 4:
        if (v45 != 4) {
          goto LABEL_30;
        }
        goto LABEL_17;
      default:
        if (!v45) {
          goto LABEL_17;
        }
        goto LABEL_30;
    }
  }
  if (v45 != v46)
  {
LABEL_30:
    outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_RoleSpec);
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
    uint64_t v43 = (uint64_t)v14;
    int v42 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    goto LABEL_31;
  }
LABEL_17:
  if ((*((void *)v18 + 2) != *(void *)(v44 + 16) || *((void *)v18 + 3) != *(void *)(v44 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *((_DWORD *)v18 + 8) != *(_DWORD *)(v44 + 32))
  {
    goto LABEL_30;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((v47 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_4:
  uint64_t v31 = v55;
  int v32 = v56;
  if (*v55 == *v56 && v55[1] == v56[1] || (char v33 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((unsigned __int8 *)v31 + 16) == *((unsigned __int8 *)v32 + 16))
    {
      uint64_t v34 = (char *)v31 + *(int *)(v27 + 24);
      uint64_t v36 = v52;
      uint64_t v35 = v53;
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
      uint64_t v38 = v50;
      v37(v50, v34, v53);
      BOOL v39 = (char *)v32 + *(int *)(v27 + 24);
      char v40 = v51;
      v37(v51, v39, v35);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v41 = *(void (**)(char *, uint64_t))(v36 + 8);
      v41(v40, v35);
      v41(v38, v35);
      return v33 & 1;
    }
LABEL_32:
    char v33 = 0;
  }
  return v33 & 1;
}

uint64_t specialized static PgQuery_CreateTransformStmt.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v96 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v95 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v94 = (char *)&v87 - v7;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v104 = *(void *)(ObjectWithArgs - 8);
  uint64_t v105 = ObjectWithArgs;
  uint64_t v9 = MEMORY[0x1F4188790](ObjectWithArgs);
  uint64_t v93 = (uint64_t)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v98 = (uint64_t)&v87 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?));
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v99 = (uint64_t)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v103 = (uint64_t)&v87 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v97 = (uint64_t)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v102 = (char *)&v87 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v100 = (uint64_t)&v87 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v101 = (uint64_t)&v87 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v108 = (uint64_t)&v87 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v106 = (uint64_t)&v87 - v27;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v29 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v107 = (uint64_t)&v87 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1F4188790](v31);
  char v33 = (char *)&v87 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v35 = MEMORY[0x1F4188790](v34 - 8);
  uint64_t v109 = (uint64_t)&v87 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  BOOL v39 = (char *)&v87 - v38;
  MEMORY[0x1F4188790](v37);
  int v41 = (char *)&v87 - v40;
  if (*a1 != *a2) {
    goto LABEL_41;
  }
  uint64_t v89 = v12;
  uint64_t v88 = v4;
  Transformuint64_t Stmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
  uint64_t v43 = *(int *)(TransformStmt + 28);
  uint64_t v90 = a1;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a1[v43], (uint64_t)v41, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v91 = a2;
  uint64_t v92 = (int *)TransformStmt;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a2[*(int *)(TransformStmt + 28)], (uint64_t)v39, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v44 = (uint64_t)&v33[*(int *)(v31 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v41, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v39, v44, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  if (v45((uint64_t)v33, 1, TypeName) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v39, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of AnyValue?((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_TypeName?);
    if (v45(v44, 1, TypeName) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_TypeName?);
      goto LABEL_5;
    }
LABEL_17:
    uint64_t v71 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
    uint64_t v72 = (uint64_t)v33;
LABEL_40:
    outlined destroy of AnyValue?(v72, v71);
    goto LABEL_41;
  }
  uint64_t v70 = v109;
  outlined init with copy of PgQuery_Alias?((uint64_t)v33, v109, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if (v45(v44, 1, TypeName) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v39, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of AnyValue?((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_TypeName);
    goto LABEL_17;
  }
  uint64_t v73 = v107;
  outlined init with take of PgQuery_OidList(v44, v107, type metadata accessor for PgQuery_TypeName);
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)v70, *(void *)v73) & 1) == 0
    || *(_DWORD *)(v70 + 8) != *(_DWORD *)(v73 + 8)
    || *(unsigned __int8 *)(v70 + 12) != *(unsigned __int8 *)(v73 + 12)
    || *(unsigned __int8 *)(v70 + 13) != *(unsigned __int8 *)(v73 + 13)
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(v70 + 16), *(void *)(v73 + 16)) & 1) == 0
    || *(_DWORD *)(v70 + 24) != *(_DWORD *)(v73 + 24)
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(v70 + 32), *(void *)(v73 + 32)) & 1) == 0
    || *(_DWORD *)(v70 + 40) != *(_DWORD *)(v73 + 40))
  {
    outlined destroy of PgQuery_Alias(v73, type metadata accessor for PgQuery_TypeName);
    uint64_t v75 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    outlined destroy of AnyValue?((uint64_t)v39, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of AnyValue?((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_TypeName);
    uint64_t v72 = (uint64_t)v33;
LABEL_29:
    uint64_t v71 = v75;
    goto LABEL_40;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v73, type metadata accessor for PgQuery_TypeName);
  outlined destroy of AnyValue?((uint64_t)v39, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of AnyValue?((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_TypeName);
  outlined destroy of AnyValue?((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((v74 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_5:
  char v47 = v90;
  uint64_t v46 = v91;
  if (*((void *)v90 + 1) == *((void *)v91 + 1) && *((void *)v90 + 2) == *((void *)v91 + 2)
    || (char v48 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v49 = v92;
    uint64_t v50 = v106;
    outlined init with copy of PgQuery_Alias?((uint64_t)&v47[v92[8]], v106, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    uint64_t v51 = v108;
    outlined init with copy of PgQuery_Alias?((uint64_t)&v46[v49[8]], v108, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    uint64_t v52 = v103;
    uint64_t v53 = v103 + *(int *)(v89 + 48);
    outlined init with copy of PgQuery_Alias?(v50, v103, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined init with copy of PgQuery_Alias?(v51, v53, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    uint64_t v54 = v105;
    uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
    if (v55(v52, 1, v105) == 1)
    {
      outlined destroy of AnyValue?(v51, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined destroy of AnyValue?(v50, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      int v56 = v55(v53, 1, v54);
      uint64_t v57 = (uint64_t)v102;
      if (v56 == 1)
      {
        outlined destroy of AnyValue?(v52, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
LABEL_11:
        uint64_t v58 = v92;
        uint64_t v59 = v100;
        outlined init with copy of PgQuery_Alias?((uint64_t)&v47[v92[9]], v100, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        outlined init with copy of PgQuery_Alias?((uint64_t)&v46[v58[9]], v57, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        uint64_t v60 = v99;
        uint64_t v61 = v99 + *(int *)(v89 + 48);
        outlined init with copy of PgQuery_Alias?(v59, v99, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        outlined init with copy of PgQuery_Alias?(v57, v61, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        if (v55(v60, 1, v54) == 1)
        {
          outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          if (v55(v61, 1, v54) == 1)
          {
            outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
            uint64_t v62 = v88;
LABEL_14:
            int v63 = v92;
            uint64_t v64 = v96;
            uint64_t v65 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v96 + 16);
            int v66 = v94;
            v65(v94, &v47[v92[6]], v62);
            uint64_t v67 = &v46[v63[6]];
            uint64_t v68 = v95;
            v65(v95, v67, v62);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
            char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v69 = *(void (**)(char *, uint64_t))(v64 + 8);
            v69(v68, v62);
            v69(v66, v62);
            return v48 & 1;
          }
          goto LABEL_39;
        }
        uint64_t v79 = v97;
        outlined init with copy of PgQuery_Alias?(v60, v97, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        if (v55(v61, 1, v54) == 1)
        {
          outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of AnyValue?(v100, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of PgQuery_Alias(v79, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_39:
          uint64_t v71 = &demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?);
          uint64_t v72 = v60;
          goto LABEL_40;
        }
        uint64_t v81 = v93;
        outlined init with take of PgQuery_OidList(v61, v93, type metadata accessor for PgQuery_ObjectWithArgs);
        char v82 = specialized static Array<A>.== infix(_:_:)(*(void *)v79, *(void *)v81);
        uint64_t v83 = v100;
        if ((v82 & 1) != 0
          && (specialized static Array<A>.== infix(_:_:)(*(void *)(v79 + 8), *(void *)(v81 + 8)) & 1) != 0
          && *(unsigned __int8 *)(v79 + 16) == *(unsigned __int8 *)(v81 + 16))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          uint64_t v62 = v88;
          char v86 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_ObjectWithArgs);
          outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of AnyValue?(v83, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of PgQuery_Alias(v79, type metadata accessor for PgQuery_ObjectWithArgs);
          outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          if (v86) {
            goto LABEL_14;
          }
LABEL_41:
          char v48 = 0;
          return v48 & 1;
        }
        outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_ObjectWithArgs);
        uint64_t v84 = v79;
        uint64_t v75 = &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?;
        outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        outlined destroy of AnyValue?(v83, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        outlined destroy of PgQuery_Alias(v84, type metadata accessor for PgQuery_ObjectWithArgs);
        uint64_t v72 = v60;
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v76 = v101;
      outlined init with copy of PgQuery_Alias?(v52, v101, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      int v77 = v55(v53, 1, v54);
      uint64_t v57 = (uint64_t)v102;
      if (v77 != 1)
      {
        uint64_t v78 = v98;
        outlined init with take of PgQuery_OidList(v53, v98, type metadata accessor for PgQuery_ObjectWithArgs);
        if ((specialized static Array<A>.== infix(_:_:)(*(void *)v76, *(void *)v78) & 1) == 0
          || (specialized static Array<A>.== infix(_:_:)(*(void *)(v76 + 8), *(void *)(v78 + 8)) & 1) == 0
          || *(unsigned __int8 *)(v76 + 16) != *(unsigned __int8 *)(v78 + 16))
        {
          outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_ObjectWithArgs);
          outlined destroy of AnyValue?(v108, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of AnyValue?(v106, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          outlined destroy of PgQuery_Alias(v76, type metadata accessor for PgQuery_ObjectWithArgs);
          uint64_t v72 = v52;
          uint64_t v71 = &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?;
          goto LABEL_40;
        }
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v85 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_ObjectWithArgs);
        outlined destroy of AnyValue?(v108, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        outlined destroy of AnyValue?(v106, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        outlined destroy of PgQuery_Alias(v101, type metadata accessor for PgQuery_ObjectWithArgs);
        outlined destroy of AnyValue?(v52, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        if ((v85 & 1) == 0) {
          goto LABEL_41;
        }
        goto LABEL_11;
      }
      outlined destroy of AnyValue?(v108, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined destroy of AnyValue?(v50, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined destroy of PgQuery_Alias(v76, type metadata accessor for PgQuery_ObjectWithArgs);
    }
    uint64_t v71 = &demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?);
    uint64_t v72 = v52;
    goto LABEL_40;
  }
  return v48 & 1;
}

uint64_t specialized static PgQuery_CreateSubscriptionStmt.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v20 - v11;
  BOOL v13 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v15 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v15 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if ((specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 4), *((void *)a2 + 4)) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 5), *((void *)a2 + 5)) & 1) != 0)
      {
        uint64_t v16 = a3(0);
        uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
        v17(v12, &a1[*(int *)(v16 + 32)], v6);
        v17(v10, &a2[*(int *)(v16 + 32)], v6);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
        v18(v10, v6);
        v18(v12, v6);
      }
      else
      {
        char v14 = 0;
      }
    }
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_RefreshMatViewStmt.== infix(_:_:)(unsigned __int8 *a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v50 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v49 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  char v48 = (char *)&v43 - v5;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v7 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v43 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v43 - v21;
  if (*a1 != *v20 || a1[1] != v20[1]) {
    goto LABEL_11;
  }
  uint64_t v43 = v9;
  uint64_t v47 = v2;
  uint64_t v23 = a1;
  uint64_t v24 = v20;
  uint64_t v25 = v7;
  RefreshMatViewuint64_t Stmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
  uint64_t v27 = *(int *)(RefreshMatViewStmt + 28);
  uint64_t v45 = v23;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v23[v27], (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v44 = RefreshMatViewStmt;
  uint64_t v28 = *(int *)(RefreshMatViewStmt + 28);
  uint64_t v46 = v24;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v24[v28], (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v29 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v30((uint64_t)v12, 1, RangeVar) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v30(v29, 1, RangeVar) != 1)
    {
      uint64_t v31 = (uint64_t)v43;
      outlined init with take of PgQuery_OidList(v29, (uint64_t)v43, type metadata accessor for PgQuery_RangeVar);
      char v32 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v16, v31);
      outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if (v32) {
        goto LABEL_10;
      }
LABEL_11:
      char v40 = 0;
      return v40 & 1;
    }
    outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RangeVar);
LABEL_8:
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    goto LABEL_11;
  }
  outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v30(v29, 1, RangeVar) != 1) {
    goto LABEL_8;
  }
  outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_10:
  uint64_t v33 = v44;
  uint64_t v34 = v50;
  uint64_t v35 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v50 + 16);
  uint64_t v36 = v47;
  uint64_t v37 = v48;
  v35(v48, &v45[*(int *)(v44 + 24)], v47);
  uint64_t v38 = &v46[*(int *)(v33 + 24)];
  BOOL v39 = v49;
  v35(v49, v38, v36);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v41 = *(void (**)(char *, uint64_t))(v34 + 8);
  v41(v39, v36);
  v41(v37, v36);
  return v40 & 1;
}

uint64_t specialized static PgQuery_DropTableSpaceStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
    {
      DropTableSpaceuint64_t Stmt = type metadata accessor for PgQuery_DropTableSpaceStmt(0);
      uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v14(v10, a1 + *(int *)(DropTableSpaceStmt + 24), v4);
      v14(v8, a2 + *(int *)(DropTableSpaceStmt + 24), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateOpFamilyStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2))
  {
    BOOL v11 = a1[1] == a2[1] && a1[2] == a2[2];
    if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      OpFamilyuint64_t Stmt = type metadata accessor for PgQuery_CreateOpFamilyStmt(0);
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v14(v10, (char *)a1 + *(int *)(OpFamilyStmt + 24), v4);
      v14(v8, (char *)a2 + *(int *)(OpFamilyStmt + 24), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateFunctionStmt.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v48 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v47 = (char *)&v43 - v7;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v9 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  BOOL v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v43 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v43 - v22;
  if (*a1 != *a2
    || a1[1] != a2[1]
    || (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 1), *((void *)a2 + 1)) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 2), *((void *)a2 + 2)) & 1) == 0)
  {
    goto LABEL_25;
  }
  Functionuint64_t Stmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
  uint64_t v45 = v9;
  uint64_t v25 = FunctionStmt;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a1[*(int *)(FunctionStmt + 40)], (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v44 = v25;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a2[*(int *)(v25 + 40)], (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v46 = v26;
  uint64_t v27 = v45;
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v26, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v28((uint64_t)v14, 1, TypeName) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
    if (v28(v46, 1, TypeName) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_TypeName?);
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if (v28(v46, 1, TypeName) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_TypeName);
LABEL_12:
    BOOL v39 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
    uint64_t v40 = (uint64_t)v14;
LABEL_24:
    outlined destroy of AnyValue?(v40, v39);
    goto LABEL_25;
  }
  outlined init with take of PgQuery_OidList(v46, (uint64_t)v11, type metadata accessor for PgQuery_TypeName);
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)v18, *(void *)v11) & 1) == 0
    || *((_DWORD *)v18 + 2) != *((_DWORD *)v11 + 2)
    || v18[12] != v11[12]
    || v18[13] != v11[13]
    || (specialized static Array<A>.== infix(_:_:)(*((void *)v18 + 2), *((void *)v11 + 2)) & 1) == 0
    || *((_DWORD *)v18 + 6) != *((_DWORD *)v11 + 6)
    || (specialized static Array<A>.== infix(_:_:)(*((void *)v18 + 4), *((void *)v11 + 4)) & 1) == 0
    || *((_DWORD *)v18 + 10) != *((_DWORD *)v11 + 10))
  {
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_TypeName);
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_TypeName);
    uint64_t v40 = (uint64_t)v14;
    BOOL v39 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    goto LABEL_24;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_TypeName);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_TypeName);
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((v41 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_8:
  if ((specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 3), *((void *)a2 + 3)) & 1) == 0)
  {
LABEL_25:
    char v37 = 0;
    return v37 & 1;
  }
  uint64_t v29 = v44;
  uint64_t v30 = &a1[*(int *)(v44 + 36)];
  uint64_t v32 = v49;
  uint64_t v31 = v50;
  uint64_t v33 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v49 + 16);
  uint64_t v34 = v47;
  v33(v47, v30, v50);
  uint64_t v35 = &a2[*(int *)(v29 + 36)];
  uint64_t v36 = v48;
  v33(v48, v35, v31);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v32 + 8);
  v38(v36, v31);
  v38(v34, v31);
  return v37 & 1;
}

uint64_t specialized static PgQuery_ConvertRowtypeExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v92 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v81 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  uint64_t v11 = MEMORY[0x1F4188790](Node);
  uint64_t v89 = (uint64_t)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v90 = (uint64_t)&v81 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v94 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v81 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v91 = (uint64_t)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v93 = (uint64_t)&v81 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v95 = (uint64_t)&v81 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v81 - v26;
  uint64_t ConvertRowtypeExpr = type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
  uint64_t v29 = a1;
  uint64_t v30 = *(int *)(ConvertRowtypeExpr + 20);
  uint64_t v31 = *(void *)(a1 + v30);
  uint64_t v32 = *(void *)(a2 + v30);
  uint64_t v33 = a2;
  if (v31 == v32)
  {
LABEL_41:
    uint64_t v76 = v92;
    int v77 = *(void (**)(char *, uint64_t, uint64_t))(v92 + 16);
    uint64_t v78 = v33;
    v77(v9, v29, v4);
    v77(v7, v78, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v79 = *(void (**)(char *, uint64_t))(v76 + 8);
    v79(v7, v4);
    v79(v9, v4);
    return v73 & 1;
  }
  uint64_t v85 = v29;
  uint64_t v86 = a2;
  uint64_t v83 = v7;
  uint64_t v84 = v9;
  uint64_t v88 = v4;
  uint64_t v34 = v31
      + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v32+ OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v87 = v14;
  uint64_t v35 = (uint64_t)&v18[*(int *)(v14 + 48)];
  outlined init with copy of PgQuery_Alias?(v34, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  uint64_t v37 = Node;
  if (v36((uint64_t)v18, 1, Node) == 1)
  {
    unsigned int v38 = v36(v35, 1, v37);
    BOOL v39 = v36;
    unsigned int v40 = v38;
    swift_retain();
    swift_retain();
    uint64_t v41 = (uint64_t)v94;
    if (v40 == 1)
    {
      char v82 = v39;
      outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v42 = v88;
      goto LABEL_11;
    }
    uint64_t v44 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_27:
    outlined destroy of AnyValue?((uint64_t)v18, v44);
    uint64_t v72 = (uint64_t)v27;
LABEL_33:
    outlined destroy of AnyValue?(v72, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_34;
  }
  uint64_t v43 = v95;
  outlined init with copy of PgQuery_Alias?((uint64_t)v18, v95, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36(v35, 1, v37) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v44 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
    goto LABEL_27;
  }
  char v82 = v36;
  uint64_t v45 = v90;
  outlined init with take of PgQuery_OidList(v35, v90, type metadata accessor for PgQuery_Node);
  uint64_t v46 = *(int *)(v37 + 20);
  uint64_t v47 = *(void *)(v43 + v46);
  uint64_t v48 = *(void *)(v45 + v46);
  swift_retain();
  swift_retain();
  if (v47 != v48)
  {
    swift_retain();
    swift_retain();
    BOOL v49 = closure #1 in static PgQuery_Node.== infix(_:_:)(v47, v48);
    swift_release();
    swift_release();
    if (!v49)
    {
      outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
      uint64_t v44 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v43 = v95;
      goto LABEL_26;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v81 = v31;
  uint64_t v50 = v32;
  uint64_t v51 = v95;
  uint64_t v52 = v45;
  uint64_t v42 = v88;
  char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
  uint64_t v54 = v51;
  uint64_t v32 = v50;
  outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v31 = v81;
  outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v41 = (uint64_t)v94;
  if ((v53 & 1) == 0) {
    goto LABEL_34;
  }
LABEL_11:
  uint64_t v55 = v31
      + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  uint64_t v56 = v37;
  uint64_t v57 = v93;
  outlined init with copy of PgQuery_Alias?(v32+ OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v93, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v58 = v41 + *(int *)(v87 + 48);
  outlined init with copy of PgQuery_Alias?(v55, v41, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v57, v58, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v59 = v82;
  if (v82(v41, 1, v56) != 1)
  {
    uint64_t v60 = v59;
    uint64_t v61 = v91;
    outlined init with copy of PgQuery_Alias?(v41, v91, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v60(v58, 1, v56) == 1)
    {
      uint64_t v62 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v63 = v89;
      outlined init with take of PgQuery_OidList(v58, v89, type metadata accessor for PgQuery_Node);
      uint64_t v64 = *(int *)(v56 + 20);
      uint64_t v65 = *(void *)(v61 + v64);
      uint64_t v66 = *(void *)(v63 + v64);
      if (v65 == v66
        || (swift_retain(),
            swift_retain(),
            BOOL v67 = closure #1 in static PgQuery_Node.== infix(_:_:)(v65, v66),
            swift_release(),
            swift_release(),
            v67))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v68 = v91;
        char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v41, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v69 & 1) == 0) {
          goto LABEL_34;
        }
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
      uint64_t v62 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v61 = v91;
    }
    outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
    goto LABEL_32;
  }
  if (v59(v58, 1, v56) != 1)
  {
    uint64_t v62 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_32:
    outlined destroy of AnyValue?(v41, v62);
    uint64_t v72 = v93;
    goto LABEL_33;
  }
  outlined destroy of AnyValue?(v41, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_20:
  if (*(_DWORD *)(v31
                 + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) == *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype))
  {
    uint64_t v70 = *(void *)(v31
                    + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat);
    uint64_t v71 = *(void *)(v32
                    + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat);
    if (*(unsigned char *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat
                  + 8) == 1)
    {
      switch(v71)
      {
        case 1:
          if (v70 == 1) {
            goto LABEL_40;
          }
          goto LABEL_34;
        case 2:
          if (v70 == 2) {
            goto LABEL_40;
          }
          goto LABEL_34;
        case 3:
          if (v70 == 3) {
            goto LABEL_40;
          }
          goto LABEL_34;
        default:
          if (!v70) {
            goto LABEL_40;
          }
          goto LABEL_34;
      }
    }
    if (v70 == v71)
    {
LABEL_40:
      int v74 = *(_DWORD *)(v31
                      + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      int v75 = *(_DWORD *)(v32
                      + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      uint64_t v7 = v83;
      uint64_t v9 = v84;
      uint64_t v4 = v42;
      uint64_t v29 = v85;
      uint64_t v33 = v86;
      if (v74 != v75)
      {
        char v73 = 0;
        return v73 & 1;
      }
      goto LABEL_41;
    }
  }
LABEL_34:
  swift_release();
  swift_release();
  char v73 = 0;
  return v73 & 1;
}

uint64_t specialized static PgQuery_TriggerTransition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17))
    {
      uint64_t TriggerTransition = type metadata accessor for PgQuery_TriggerTransition(0);
      uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v14(v10, a1 + *(int *)(TriggerTransition + 28), v4);
      v14(v8, a2 + *(int *)(TriggerTransition + 28), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_ScalarArrayOpExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v54 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v59 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v60 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v54 - v19;
  ScalarArrayuint64_t OpExpr = type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(ScalarArrayOpExpr + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26) {
    goto LABEL_17;
  }
  uint64_t v55 = a2;
  uint64_t v56 = v23;
  uint64_t v54 = v10;
  uint64_t v57 = v22;
  uint64_t v58 = v4;
  uint64_t v28 = v25
      + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v26+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v33 = v26;
    uint64_t v34 = v60;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v60, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v31(v29, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v36 = v59;
      outlined init with take of PgQuery_OidList(v29, v59, type metadata accessor for PgQuery_Node);
      uint64_t v37 = *(int *)(Node + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v36 + v37);
      swift_retain();
      swift_retain();
      if (v38 == v39
        || (swift_retain(),
            swift_retain(),
            BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
            swift_release(),
            swift_release(),
            v40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v41) {
          goto LABEL_11;
        }
LABEL_21:
        swift_release();
        swift_release();
        goto LABEL_22;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v35 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_20:
    outlined destroy of AnyValue?((uint64_t)v15, v35);
    outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_21;
  }
  unsigned int v32 = v31(v29, 1, Node);
  swift_retain();
  uint64_t v33 = v26;
  swift_retain();
  if (v32 != 1)
  {
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_20;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
    goto LABEL_21;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
    goto LABEL_21;
  if (*(unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOr) != *(unsigned __int8 *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOr))
    goto LABEL_21;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
    goto LABEL_21;
  uint64_t v42 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v43 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v44 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v45 = specialized static Array<A>.== infix(_:_:)(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0) {
    goto LABEL_21;
  }
  int v46 = *(_DWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v47 = *(_DWORD *)(v44
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  uint64_t v22 = v57;
  uint64_t v4 = v58;
  uint64_t v10 = v54;
  uint64_t v27 = v55;
  uint64_t v23 = v56;
  if (v46 != v47)
  {
LABEL_22:
    char v51 = 0;
    return v51 & 1;
  }
LABEL_17:
  uint64_t v48 = v22;
  BOOL v49 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v50 = v27;
  v49(v10, v23, v4);
  v49(v8, v50, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v52 = *(void (**)(char *, uint64_t))(v48 + 8);
  v52(v8, v4);
  v52(v10, v4);
  return v51 & 1;
}

uint64_t specialized static PgQuery_ReassignOwnedStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v54 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  char v53 = (char *)&v46 - v8;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v10 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v52 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v55 = (uint64_t)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v46 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v46 - v21;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    goto LABEL_29;
  }
  uint64_t v51 = v5;
  uint64_t v49 = v4;
  ReassignOwneduint64_t Stmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
  uint64_t v24 = *(int *)(ReassignOwnedStmt + 24);
  uint64_t v48 = a1;
  outlined init with copy of PgQuery_Alias?((uint64_t)a1 + v24, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v47 = ReassignOwnedStmt;
  uint64_t v25 = *(int *)(ReassignOwnedStmt + 24);
  uint64_t v50 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v25, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v26, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v27((uint64_t)v14, 1, RoleSpec) != 1)
  {
    uint64_t v38 = v55;
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, v55, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v27(v26, 1, RoleSpec) != 1)
    {
      uint64_t v41 = v52;
      outlined init with take of PgQuery_OidList(v26, v52, type metadata accessor for PgQuery_RoleSpec);
      uint64_t v42 = *(void *)v38;
      uint64_t v43 = *(void *)v41;
      if (*(unsigned char *)(v41 + 8) == 1)
      {
        uint64_t v29 = v50;
        uint64_t v28 = v51;
        switch(v43)
        {
          case 1:
            if (v42 != 1) {
              goto LABEL_27;
            }
            goto LABEL_14;
          case 2:
            if (v42 != 2) {
              goto LABEL_27;
            }
            goto LABEL_14;
          case 3:
            if (v42 != 3) {
              goto LABEL_27;
            }
            goto LABEL_14;
          case 4:
            if (v42 != 4) {
              goto LABEL_27;
            }
            goto LABEL_14;
          default:
            if (!v42) {
              goto LABEL_14;
            }
            goto LABEL_27;
        }
      }
      uint64_t v29 = v50;
      uint64_t v28 = v51;
      if (v42 == v43)
      {
LABEL_14:
        if ((*(void *)(v38 + 16) == *(void *)(v41 + 16) && *(void *)(v38 + 24) == *(void *)(v41 + 24)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && *(_DWORD *)(v38 + 32) == *(_DWORD *)(v41 + 32))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_RoleSpec);
          outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_RoleSpec);
          outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          if (v44) {
            goto LABEL_5;
          }
LABEL_29:
          char v36 = 0;
          return v36 & 1;
        }
      }
LABEL_27:
      outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_RoleSpec);
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_RoleSpec);
      uint64_t v40 = (uint64_t)v14;
      uint64_t v39 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
LABEL_28:
      outlined destroy of AnyValue?(v40, v39);
      goto LABEL_29;
    }
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_RoleSpec);
LABEL_8:
    uint64_t v39 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    uint64_t v40 = (uint64_t)v14;
    goto LABEL_28;
  }
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v27(v26, 1, RoleSpec) != 1) {
    goto LABEL_8;
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v29 = v50;
  uint64_t v28 = v51;
LABEL_5:
  uint64_t v30 = v47;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  unsigned int v32 = v53;
  uint64_t v33 = v49;
  v31(v53, (char *)v48 + *(int *)(v47 + 20), v49);
  uint64_t v34 = (char *)v29 + *(int *)(v30 + 20);
  uint64_t v35 = v54;
  v31(v54, v34, v33);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v28 + 8);
  v37(v35, v33);
  v37(v32, v33);
  return v36 & 1;
}

uint64_t specialized static PgQuery_FunctionParameter.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v74 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v83 = *(void *)(Node - 8);
  uint64_t v84 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v80 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v82);
  uint64_t v87 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v81 = (uint64_t)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v85 = (uint64_t)&v74 - v17;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v19 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v86 = (uint64_t)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v88 = (uint64_t)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v89 = (uint64_t)&v74 - v27;
  uint64_t FunctionParameter = type metadata accessor for PgQuery_FunctionParameter(0);
  uint64_t v29 = a1;
  uint64_t v30 = *(int *)(FunctionParameter + 20);
  uint64_t v31 = *(void *)(a1 + v30);
  uint64_t v32 = *(void *)(a2 + v30);
  if (v31 == v32) {
    goto LABEL_40;
  }
  int v77 = v10;
  uint64_t v78 = v29;
  uint64_t v76 = v8;
  uint64_t v79 = v5;
  if (*(void *)(v31 + 16) == *(void *)(v32 + 16) && *(void *)(v31 + 24) == *(void *)(v32 + 24)
    || (uint64_t v33 = v32, v34 = _stringCompareWithSmolCheck(_:_:expecting:)(), v32 = v33, v35 = 0, (v34 & 1) != 0))
  {
    uint64_t v75 = v4;
    uint64_t v36 = v31
        + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType;
    uint64_t v37 = v89;
    uint64_t v38 = v32;
    outlined init with copy of PgQuery_Alias?(v32+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType, v89, &demangling cache variable for type metadata for PgQuery_TypeName?);
    uint64_t v39 = (uint64_t)&v23[*(int *)(v21 + 48)];
    outlined init with copy of PgQuery_Alias?(v36, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined init with copy of PgQuery_Alias?(v37, v39, &demangling cache variable for type metadata for PgQuery_TypeName?);
    uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
    if (v40((uint64_t)v23, 1, TypeName) == 1)
    {
      int v41 = v40(v39, 1, TypeName);
      uint64_t v42 = v31;
      swift_retain();
      uint64_t v43 = v38;
      swift_retain();
      if (v41 == 1)
      {
        outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
        outlined destroy of AnyValue?(v89, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_8:
        uint64_t v44 = *(void *)(v42
                        + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode);
        uint64_t v45 = *(void *)(v43
                        + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode);
        if (*(unsigned char *)(v43
                      + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode
                      + 8) == 1)
        {
          uint64_t v46 = (uint64_t)v87;
          switch(v45)
          {
            case 1:
              if (v44 == 1) {
                goto LABEL_30;
              }
              goto LABEL_28;
            case 2:
              if (v44 == 2) {
                goto LABEL_30;
              }
              goto LABEL_28;
            case 3:
              if (v44 == 3) {
                goto LABEL_30;
              }
              goto LABEL_28;
            case 4:
              if (v44 == 4) {
                goto LABEL_30;
              }
              goto LABEL_28;
            case 5:
              if (v44 == 5) {
                goto LABEL_30;
              }
              goto LABEL_28;
            default:
              if (!v44) {
                goto LABEL_30;
              }
              goto LABEL_28;
          }
        }
        uint64_t v46 = (uint64_t)v87;
        if (v44 == v45)
        {
LABEL_30:
          uint64_t v53 = v42
              + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr;
          uint64_t v54 = v85;
          outlined init with copy of PgQuery_Alias?(v43+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr, v85, &demangling cache variable for type metadata for PgQuery_Node?);
          uint64_t v55 = v46 + *(int *)(v82 + 48);
          outlined init with copy of PgQuery_Alias?(v53, v46, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined init with copy of PgQuery_Alias?(v54, v55, &demangling cache variable for type metadata for PgQuery_Node?);
          uint64_t v56 = v84;
          uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
          if (v57(v46, 1, v84) == 1)
          {
            if (v57(v55, 1, v56) == 1)
            {
              outlined destroy of AnyValue?(v46, &demangling cache variable for type metadata for PgQuery_Node?);
              outlined destroy of AnyValue?(v85, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_39:
              swift_release();
              swift_release();
              uint64_t v4 = v75;
              uint64_t v8 = v76;
              uint64_t v29 = v78;
              uint64_t v5 = v79;
              uint64_t v10 = v77;
LABEL_40:
              uint64_t v69 = v4;
              uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
              v70(v10, v29, v69);
              v70(v8, a2, v69);
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
              uint64_t v71 = v5;
              char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v72 = *(void (**)(char *, uint64_t))(v71 + 8);
              v72(v8, v69);
              v72(v10, v69);
              return v35 & 1;
            }
            uint64_t v59 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
          }
          else
          {
            uint64_t v58 = v81;
            outlined init with copy of PgQuery_Alias?(v46, v81, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v57(v55, 1, v56) == 1)
            {
              uint64_t v59 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
            }
            else
            {
              uint64_t v60 = v55;
              uint64_t v61 = v56;
              uint64_t v62 = v80;
              outlined init with take of PgQuery_OidList(v60, v80, type metadata accessor for PgQuery_Node);
              uint64_t v63 = *(int *)(v61 + 20);
              uint64_t v64 = *(void *)(v58 + v63);
              uint64_t v65 = *(void *)(v62 + v63);
              if (v64 == v65
                || (swift_retain(),
                    swift_retain(),
                    BOOL v66 = closure #1 in static PgQuery_Node.== infix(_:_:)(v64, v65),
                    swift_release(),
                    swift_release(),
                    v66))
              {
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                uint64_t v67 = v81;
                char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
                outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
                outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
                outlined destroy of AnyValue?(v46, &demangling cache variable for type metadata for PgQuery_Node?);
                outlined destroy of AnyValue?(v85, &demangling cache variable for type metadata for PgQuery_Node?);
                if (v68) {
                  goto LABEL_39;
                }
                goto LABEL_28;
              }
              outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
              uint64_t v59 = &demangling cache variable for type metadata for PgQuery_Node?;
              uint64_t v58 = v81;
            }
            outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_Node);
          }
          outlined destroy of AnyValue?(v46, v59);
          outlined destroy of AnyValue?(v85, &demangling cache variable for type metadata for PgQuery_Node?);
        }
LABEL_28:
        swift_release();
        swift_release();
        char v35 = 0;
        return v35 & 1;
      }
      uint64_t v48 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
    }
    else
    {
      uint64_t v43 = v38;
      uint64_t v42 = v31;
      uint64_t v47 = v88;
      outlined init with copy of PgQuery_Alias?((uint64_t)v23, v88, &demangling cache variable for type metadata for PgQuery_TypeName?);
      if (v40(v39, 1, TypeName) == 1)
      {
        swift_retain();
        swift_retain();
        uint64_t v48 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
      }
      else
      {
        uint64_t v49 = v86;
        outlined init with take of PgQuery_OidList(v39, v86, type metadata accessor for PgQuery_TypeName);
        uint64_t v50 = *(void *)v47;
        uint64_t v51 = *(void *)v49;
        swift_retain();
        swift_retain();
        if ((specialized static Array<A>.== infix(_:_:)(v50, v51) & 1) != 0
          && *(_DWORD *)(v47 + 8) == *(_DWORD *)(v49 + 8)
          && *(unsigned __int8 *)(v47 + 12) == *(unsigned __int8 *)(v49 + 12)
          && *(unsigned __int8 *)(v47 + 13) == *(unsigned __int8 *)(v49 + 13)
          && (specialized static Array<A>.== infix(_:_:)(*(void *)(v47 + 16), *(void *)(v49 + 16)) & 1) != 0
          && *(_DWORD *)(v47 + 24) == *(_DWORD *)(v49 + 24)
          && (specialized static Array<A>.== infix(_:_:)(*(void *)(v47 + 32), *(void *)(v49 + 32)) & 1) != 0
          && *(_DWORD *)(v47 + 40) == *(_DWORD *)(v49 + 40))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_TypeName);
          outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_TypeName);
          outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
          outlined destroy of AnyValue?(v89, &demangling cache variable for type metadata for PgQuery_TypeName?);
          if ((v52 & 1) == 0) {
            goto LABEL_28;
          }
          goto LABEL_8;
        }
        outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_TypeName);
        uint64_t v48 = &demangling cache variable for type metadata for PgQuery_TypeName?;
      }
      outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_TypeName);
    }
    outlined destroy of AnyValue?((uint64_t)v23, v48);
    outlined destroy of AnyValue?(v89, &demangling cache variable for type metadata for PgQuery_TypeName?);
    goto LABEL_28;
  }
  return v35 & 1;
}

uint64_t specialized static PgQuery_CreateTableAsStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v175 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v147 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v147 - v8;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v162 = *(void *)(RangeVar - 8);
  uint64_t v163 = RangeVar;
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v159 = (uint64_t)&v147 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v161);
  uint64_t v164 = (uint64_t)&v147 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v160 = (uint64_t)&v147 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v165 = (uint64_t)&v147 - v16;
  uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  uint64_t v169 = *(void *)(IntoClause - 8);
  uint64_t v170 = IntoClause;
  MEMORY[0x1F4188790](IntoClause);
  uint64_t v166 = (uint64_t)&v147 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_IntoClause?, PgQuery_IntoClause?));
  MEMORY[0x1F4188790](v168);
  uint64_t v172 = (uint64_t)&v147 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IntoClause?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v167 = (uint64_t)&v147 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v171 = (uint64_t)&v147 - v23;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v25 = *(void *)(Node - 8);
  uint64_t v26 = MEMORY[0x1F4188790](Node);
  uint64_t v155 = (uint64_t)&v147 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v173 = (uint64_t)&v147 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v30 = MEMORY[0x1F4188790](v29);
  uint64_t v157 = (uint64_t)&v147 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)&v147 - v32;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v35 = MEMORY[0x1F4188790](v34 - 8);
  uint64_t v156 = (uint64_t)&v147 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v158 = (uint64_t)&v147 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v174 = (uint64_t)&v147 - v40;
  MEMORY[0x1F4188790](v39);
  uint64_t v42 = (char *)&v147 - v41;
  TableAsuint64_t Stmt = type metadata accessor for PgQuery_CreateTableAsStmt(0);
  uint64_t v44 = a1;
  uint64_t v45 = *(int *)(TableAsStmt + 20);
  uint64_t v46 = *(void *)(a1 + v45);
  uint64_t v47 = a2;
  uint64_t v48 = *(void *)(a2 + v45);
  uint64_t v49 = v47;
  if (v46 == v48) {
    goto LABEL_33;
  }
  uint64_t v150 = v44;
  uint64_t v151 = v47;
  uint64_t v152 = v9;
  uint64_t v153 = v7;
  uint64_t v154 = v4;
  uint64_t v50 = v46
      + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  outlined init with copy of PgQuery_Alias?(v48+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, (uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v51 = v46;
  uint64_t v52 = (uint64_t)&v33[*(int *)(v29 + 48)];
  outlined init with copy of PgQuery_Alias?(v50, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v42, v52, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  uint64_t v53 = v25 + 48;
  uint64_t v54 = v55;
  unsigned int v56 = v55((uint64_t)v33, 1, Node);
  uint64_t v176 = v48;
  uint64_t v177 = v51;
  if (v56 == 1)
  {
    unsigned int v57 = v54(v52, 1, Node);
    swift_retain();
    swift_retain();
    if (v57 == 1)
    {
      uint64_t v58 = v54;
      uint64_t v149 = v29;
      uint64_t v148 = v53;
      uint64_t v147 = Node;
      outlined destroy of AnyValue?((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v4 = v154;
      goto LABEL_11;
    }
    uint64_t v60 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of AnyValue?((uint64_t)v33, v60);
    outlined destroy of AnyValue?((uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_48;
  }
  uint64_t v59 = v174;
  outlined init with copy of PgQuery_Alias?((uint64_t)v33, v174, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v54(v52, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v60 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_25:
    outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
    goto LABEL_26;
  }
  uint64_t v61 = (uint64_t)v42;
  uint64_t v62 = v173;
  outlined init with take of PgQuery_OidList(v52, v173, type metadata accessor for PgQuery_Node);
  uint64_t v63 = *(int *)(Node + 20);
  uint64_t v64 = *(void *)(v59 + v63);
  uint64_t v65 = *(void *)(v62 + v63);
  swift_retain();
  swift_retain();
  if (v64 != v65)
  {
    swift_retain();
    swift_retain();
    BOOL v66 = closure #1 in static PgQuery_Node.== infix(_:_:)(v64, v65);
    swift_release();
    swift_release();
    if (!v66)
    {
      outlined destroy of PgQuery_Alias(v173, type metadata accessor for PgQuery_Node);
      uint64_t v60 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v42 = (char *)v61;
      goto LABEL_25;
    }
  }
  uint64_t v67 = v59;
  uint64_t v58 = v54;
  uint64_t v149 = v29;
  uint64_t v148 = v53;
  uint64_t v147 = Node;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v68 = v173;
  uint64_t v4 = v154;
  char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v69 & 1) == 0) {
    goto LABEL_48;
  }
LABEL_11:
  uint64_t v70 = v177
      + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__into;
  uint64_t v71 = v171;
  outlined init with copy of PgQuery_Alias?(v176+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__into, v171, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  uint64_t v72 = v172;
  uint64_t v73 = v172 + *(int *)(v168 + 48);
  outlined init with copy of PgQuery_Alias?(v70, v172, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  outlined init with copy of PgQuery_Alias?(v71, v73, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  uint64_t v74 = v170;
  uint64_t v75 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 48);
  if (v75(v72, 1, v170) == 1)
  {
    int v76 = v75(v73, 1, v74);
    int v77 = v153;
    if (v76 == 1)
    {
      outlined destroy of AnyValue?(v72, &demangling cache variable for type metadata for PgQuery_IntoClause?);
      outlined destroy of AnyValue?(v71, &demangling cache variable for type metadata for PgQuery_IntoClause?);
      uint64_t v78 = v177;
      goto LABEL_14;
    }
    uint64_t v88 = &demangling cache variable for type metadata for (PgQuery_IntoClause?, PgQuery_IntoClause?);
    goto LABEL_47;
  }
  uint64_t v86 = v167;
  outlined init with copy of PgQuery_Alias?(v72, v167, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  int v87 = v75(v73, 1, v74);
  int v77 = v153;
  if (v87 == 1)
  {
    uint64_t v88 = &demangling cache variable for type metadata for (PgQuery_IntoClause?, PgQuery_IntoClause?);
LABEL_46:
    outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_IntoClause);
LABEL_47:
    outlined destroy of AnyValue?(v72, v88);
    outlined destroy of AnyValue?(v71, &demangling cache variable for type metadata for PgQuery_IntoClause?);
LABEL_48:
    swift_release();
    swift_release();
    goto LABEL_49;
  }
  uint64_t v89 = v73;
  uint64_t v90 = v166;
  outlined init with take of PgQuery_OidList(v89, v166, type metadata accessor for PgQuery_IntoClause);
  uint64_t v91 = *(int *)(v74 + 20);
  uint64_t v92 = *(void *)(v86 + v91);
  uint64_t v93 = *(void *)(v90 + v91);
  if (v92 == v93) {
    goto LABEL_74;
  }
  uint64_t v94 = v92
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel;
  uint64_t v95 = v165;
  outlined init with copy of PgQuery_Alias?(v93 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel, v165, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v96 = v164;
  uint64_t v97 = v164 + *(int *)(v161 + 48);
  outlined init with copy of PgQuery_Alias?(v94, v164, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?(v95, v97, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v98 = v163;
  uint64_t v99 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v162 + 48);
  int v100 = v99(v96, 1, v163);
  uint64_t v174 = v93;
  if (v100 == 1)
  {
    int v101 = v99(v97, 1, v98);
    swift_retain();
    swift_retain();
    uint64_t v86 = v167;
    if (v101 == 1)
    {
      uint64_t v102 = v58;
      outlined destroy of AnyValue?(v96, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?(v165, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_35;
    }
LABEL_30:
    outlined destroy of AnyValue?(v96, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of AnyValue?(v165, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_44;
  }
  uint64_t v103 = v160;
  outlined init with copy of PgQuery_Alias?(v96, v160, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v99(v97, 1, v98) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias(v103, type metadata accessor for PgQuery_RangeVar);
    uint64_t v86 = v167;
    goto LABEL_30;
  }
  uint64_t v102 = v58;
  uint64_t v111 = v159;
  outlined init with take of PgQuery_OidList(v97, v159, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  char v112 = specialized static PgQuery_RangeVar.== infix(_:_:)(v103, v111);
  outlined destroy of PgQuery_Alias(v111, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias(v103, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?(v96, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?(v165, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v86 = v167;
  if ((v112 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_35:
  uint64_t v113 = v102;
  uint64_t v114 = *(void *)(v92
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames);
  uint64_t v115 = v174;
  uint64_t v116 = *(void *)(v174
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v117 = specialized static Array<A>.== infix(_:_:)(v114, v116);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v117 & 1) == 0
    || (*(void *)(v92
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) != *(void *)(v115 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod)
     || *(void *)(v92
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8) != *(void *)(v115
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_44;
  }
  uint64_t v118 = *(void *)(v92
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  uint64_t v119 = *(void *)(v115
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v120 = specialized static Array<A>.== infix(_:_:)(v118, v119);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v120 & 1) == 0) {
    goto LABEL_44;
  }
  uint64_t v121 = *(void *)(v92
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit);
  uint64_t v122 = *(void *)(v115
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit);
  uint64_t v90 = v166;
  if (*(unsigned char *)(v115
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit
                + 8) == 1)
  {
    switch(v122)
    {
      case 1:
        if (v121 != 1) {
          goto LABEL_67;
        }
        goto LABEL_52;
      case 2:
        if (v121 != 2) {
          goto LABEL_67;
        }
        goto LABEL_52;
      case 3:
        if (v121 != 3) {
          goto LABEL_67;
        }
        goto LABEL_52;
      case 4:
        if (v121 != 4) {
          goto LABEL_67;
        }
        goto LABEL_52;
      default:
        if (!v121) {
          goto LABEL_52;
        }
        goto LABEL_67;
    }
  }
  if (v121 != v122)
  {
LABEL_67:
    swift_release();
    swift_release();
    goto LABEL_45;
  }
LABEL_52:
  if ((*(void *)(v92
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName) != *(void *)(v115 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName)
     || *(void *)(v92
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName
                  + 8) != *(void *)(v115
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_67;
  }
  uint64_t v173 = v92;
  uint64_t v124 = v92
       + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery;
  uint64_t v125 = v115;
  uint64_t v126 = v158;
  outlined init with copy of PgQuery_Alias?(v115+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery, v158, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v127 = v157 + *(int *)(v149 + 48);
  uint64_t v128 = v124;
  uint64_t v129 = v157;
  outlined init with copy of PgQuery_Alias?(v128, v157, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v126, v127, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v130 = v147;
  if (v113(v129, 1, v147) == 1)
  {
    if (v113(v127, 1, v130) == 1)
    {
      outlined destroy of AnyValue?(v129, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v158, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_72;
    }
    char v132 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_78;
  }
  uint64_t v131 = v156;
  outlined init with copy of PgQuery_Alias?(v129, v156, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v113(v127, 1, v130) == 1)
  {
    char v132 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_77:
    outlined destroy of PgQuery_Alias(v131, type metadata accessor for PgQuery_Node);
LABEL_78:
    outlined destroy of AnyValue?(v129, v132);
    outlined destroy of AnyValue?(v158, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_44;
  }
  uint64_t v133 = v155;
  outlined init with take of PgQuery_OidList(v127, v155, type metadata accessor for PgQuery_Node);
  uint64_t v134 = *(int *)(v130 + 20);
  uint64_t v135 = *(void *)(v131 + v134);
  uint64_t v136 = *(void *)(v133 + v134);
  if (v135 != v136)
  {
    swift_retain();
    swift_retain();
    BOOL v137 = closure #1 in static PgQuery_Node.== infix(_:_:)(v135, v136);
    swift_release();
    swift_release();
    if (!v137)
    {
      outlined destroy of PgQuery_Alias(v155, type metadata accessor for PgQuery_Node);
      char v132 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v129 = v157;
      uint64_t v131 = v156;
      goto LABEL_77;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v138 = v156;
  uint64_t v139 = v155;
  char v140 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v139, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v138, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v157, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v158, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v140 & 1) == 0)
  {
LABEL_44:
    swift_release();
    swift_release();
    uint64_t v90 = v166;
LABEL_45:
    outlined destroy of PgQuery_Alias(v90, type metadata accessor for PgQuery_IntoClause);
    uint64_t v88 = &demangling cache variable for type metadata for PgQuery_IntoClause?;
    goto LABEL_46;
  }
LABEL_72:
  int v141 = *(unsigned __int8 *)(v173
                            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData);
  int v142 = *(unsigned __int8 *)(v125
                            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData);
  swift_release();
  swift_release();
  BOOL v143 = v141 == v142;
  uint64_t v90 = v166;
  int v77 = v153;
  if (!v143) {
    goto LABEL_45;
  }
LABEL_74:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v4 = v154;
  char v144 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v145 = v90;
  char v146 = v144;
  outlined destroy of PgQuery_Alias(v145, type metadata accessor for PgQuery_IntoClause);
  outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_IntoClause);
  outlined destroy of AnyValue?(v72, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  outlined destroy of AnyValue?(v71, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  uint64_t v78 = v177;
  if ((v146 & 1) == 0) {
    goto LABEL_48;
  }
LABEL_14:
  uint64_t v7 = v77;
  uint64_t v79 = *(void *)(v78
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind);
  uint64_t v80 = *(unsigned __int8 *)(v78
                           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind
                           + 8);
  uint64_t v81 = v176;
  uint64_t v82 = *(void *)(v176
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind);
  uint64_t v83 = v78;
  uint64_t v84 = *(unsigned __int8 *)(v176
                           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind
                           + 8);
  uint64_t v85 = destructiveProjectEnumData for StorableValue(v79, v80);
  if (v85 != destructiveProjectEnumData for StorableValue(v82, v84)
    || *(unsigned __int8 *)(v83
                          + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isSelectInto) != *(unsigned __int8 *)(v81 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isSelectInto))
  {
    goto LABEL_48;
  }
  int v104 = *(unsigned __int8 *)(v83
                            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
  int v105 = *(unsigned __int8 *)(v81
                            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
  swift_release();
  swift_release();
  uint64_t v9 = v152;
  uint64_t v49 = v151;
  uint64_t v44 = v150;
  if (v104 != v105)
  {
LABEL_49:
    char v109 = 0;
    return v109 & 1;
  }
LABEL_33:
  uint64_t v106 = v175;
  uint64_t v107 = *(void (**)(char *, uint64_t, uint64_t))(v175 + 16);
  uint64_t v108 = v49;
  v107(v9, v44, v4);
  v107(v7, v108, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v109 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v110 = *(void (**)(char *, uint64_t))(v106 + 8);
  v110(v7, v4);
  v110(v9, v4);
  return v109 & 1;
}

uint64_t specialized static PgQuery_CreateOpClassStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v47 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v46 = (char *)&v42 - v7;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v9 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v49 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v42 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v42 - v21;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 8), *(void *)(a2 + 8)) & 1) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v44 = v4;
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)
    || (char v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v45 = v17;
    OpClassuint64_t Stmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
    outlined init with copy of PgQuery_Alias?(a1 + *(int *)(OpClassStmt + 40), (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_TypeName?);
    uint64_t v43 = OpClassStmt;
    outlined init with copy of PgQuery_Alias?(a2 + *(int *)(OpClassStmt + 40), (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_TypeName?);
    uint64_t v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v20, v25, &demangling cache variable for type metadata for PgQuery_TypeName?);
    uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v26((uint64_t)v13, 1, TypeName) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_TypeName?);
      if (v26(v25, 1, TypeName) == 1)
      {
        outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_9:
        if ((specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 32), *(void *)(a2 + 32)) & 1) != 0
          && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
        {
          uint64_t v27 = v43;
          uint64_t v28 = a1 + *(int *)(v43 + 36);
          uint64_t v29 = v48;
          uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
          uint64_t v31 = v46;
          uint64_t v32 = v44;
          v30(v46, v28, v44);
          uint64_t v33 = a2 + *(int *)(v27 + 36);
          uint64_t v34 = v47;
          v30(v47, v33, v32);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v35 = *(void (**)(char *, uint64_t))(v29 + 8);
          v35(v34, v32);
          v35(v31, v32);
          return v23 & 1;
        }
LABEL_27:
        char v23 = 0;
        return v23 & 1;
      }
    }
    else
    {
      uint64_t v36 = (uint64_t)v45;
      outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v45, &demangling cache variable for type metadata for PgQuery_TypeName?);
      if (v26(v25, 1, TypeName) != 1)
      {
        uint64_t v39 = v49;
        outlined init with take of PgQuery_OidList(v25, v49, type metadata accessor for PgQuery_TypeName);
        if ((specialized static Array<A>.== infix(_:_:)(*(void *)v36, *(void *)v39) & 1) != 0
          && *(_DWORD *)(v36 + 8) == *(_DWORD *)(v39 + 8)
          && *(unsigned __int8 *)(v36 + 12) == *(unsigned __int8 *)(v39 + 12)
          && *(unsigned __int8 *)(v36 + 13) == *(unsigned __int8 *)(v39 + 13)
          && (specialized static Array<A>.== infix(_:_:)(*(void *)(v36 + 16), *(void *)(v39 + 16)) & 1) != 0
          && *(_DWORD *)(v36 + 24) == *(_DWORD *)(v39 + 24)
          && (specialized static Array<A>.== infix(_:_:)(*(void *)(v36 + 32), *(void *)(v39 + 32)) & 1) != 0
          && *(_DWORD *)(v36 + 40) == *(_DWORD *)(v39 + 40))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_TypeName);
          outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_TypeName?);
          outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_TypeName?);
          outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_TypeName);
          outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_TypeName?);
          if ((v40 & 1) == 0) {
            goto LABEL_27;
          }
          goto LABEL_9;
        }
        outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_TypeName);
        outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_TypeName?);
        outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_TypeName?);
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_TypeName);
        uint64_t v38 = (uint64_t)v13;
        uint64_t v37 = &demangling cache variable for type metadata for PgQuery_TypeName?;
LABEL_26:
        outlined destroy of AnyValue?(v38, v37);
        goto LABEL_27;
      }
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_TypeName);
    }
    uint64_t v37 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
    uint64_t v38 = (uint64_t)v13;
    goto LABEL_26;
  }
  return v23 & 1;
}

uint64_t specialized static PgQuery_CreateOpClassItem.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v72 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v71 = (char *)&v66 - v7;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v76 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v70 = (uint64_t)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1F4188790](v75);
  uint64_t v79 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v74 = (uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v80 = (uint64_t)&v66 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v77 = (uint64_t)&v66 - v15;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v17 = *(void *)(ObjectWithArgs - 8);
  MEMORY[0x1F4188790](ObjectWithArgs);
  uint64_t v81 = (uint64_t)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?));
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v25 = (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v28 = (char *)&v66 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v66 - v29;
  if (*a1 != *a2) {
    goto LABEL_21;
  }
  uint64_t v67 = v4;
  uint64_t OpClassItem = type metadata accessor for PgQuery_CreateOpClassItem(0);
  uint64_t v32 = *(int *)(OpClassItem + 36);
  uint64_t v68 = a1;
  outlined init with copy of PgQuery_Alias?((uint64_t)a1 + v32, (uint64_t)v30, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v66 = OpClassItem;
  uint64_t v33 = *(int *)(OpClassItem + 36);
  char v69 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v33, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v34 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v34, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v35((uint64_t)v21, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if (v35(v34, 1, ObjectWithArgs) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      goto LABEL_5;
    }
LABEL_14:
    unsigned int v56 = &demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?);
    uint64_t v57 = (uint64_t)v21;
LABEL_20:
    outlined destroy of AnyValue?(v57, v56);
    goto LABEL_21;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if (v35(v34, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_ObjectWithArgs);
    goto LABEL_14;
  }
  uint64_t v58 = v81;
  outlined init with take of PgQuery_OidList(v34, v81, type metadata accessor for PgQuery_ObjectWithArgs);
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)v25, *(void *)v58) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*((void *)v25 + 1), *(void *)(v58 + 8)) & 1) == 0
    || v25[16] != *(unsigned char *)(v58 + 16))
  {
    outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_ObjectWithArgs);
    uint64_t v59 = &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?;
    outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_ObjectWithArgs);
    uint64_t v57 = (uint64_t)v21;
LABEL_19:
    unsigned int v56 = v59;
    goto LABEL_20;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_ObjectWithArgs);
  outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_ObjectWithArgs);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if ((v61 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v37 = v68;
  uint64_t v36 = v69;
  if (v68[1] != v69[1]
    || (specialized static Array<A>.== infix(_:_:)(*((void *)v68 + 1), *((void *)v69 + 1)) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*((void *)v37 + 2), *((void *)v36 + 2)) & 1) == 0)
  {
    goto LABEL_21;
  }
  uint64_t v38 = v66;
  uint64_t v39 = v77;
  outlined init with copy of PgQuery_Alias?((uint64_t)v37 + *(int *)(v66 + 40), v77, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v40 = v80;
  outlined init with copy of PgQuery_Alias?((uint64_t)v36 + *(int *)(v38 + 40), v80, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v41 = v79;
  uint64_t v42 = v79 + *(int *)(v75 + 48);
  outlined init with copy of PgQuery_Alias?(v39, v79, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?(v40, v42, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  uint64_t v44 = TypeName;
  if (v43(v41, 1, TypeName) != 1)
  {
    uint64_t v62 = v74;
    outlined init with copy of PgQuery_Alias?(v41, v74, &demangling cache variable for type metadata for PgQuery_TypeName?);
    int v63 = v43(v42, 1, v44);
    uint64_t v46 = v67;
    if (v63 == 1)
    {
      outlined destroy of AnyValue?(v80, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_TypeName);
      goto LABEL_27;
    }
    uint64_t v64 = v70;
    outlined init with take of PgQuery_OidList(v42, v70, type metadata accessor for PgQuery_TypeName);
    if ((specialized static Array<A>.== infix(_:_:)(*(void *)v62, *(void *)v64) & 1) != 0
      && *(_DWORD *)(v62 + 8) == *(_DWORD *)(v64 + 8)
      && *(unsigned __int8 *)(v62 + 12) == *(unsigned __int8 *)(v64 + 12)
      && *(unsigned __int8 *)(v62 + 13) == *(unsigned __int8 *)(v64 + 13)
      && (specialized static Array<A>.== infix(_:_:)(*(void *)(v62 + 16), *(void *)(v64 + 16)) & 1) != 0
      && *(_DWORD *)(v62 + 24) == *(_DWORD *)(v64 + 24)
      && (specialized static Array<A>.== infix(_:_:)(*(void *)(v62 + 32), *(void *)(v64 + 32)) & 1) != 0
      && *(_DWORD *)(v62 + 40) == *(_DWORD *)(v64 + 40))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_TypeName);
      outlined destroy of AnyValue?(v80, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_TypeName);
      outlined destroy of AnyValue?(v41, &demangling cache variable for type metadata for PgQuery_TypeName?);
      if (v65) {
        goto LABEL_11;
      }
LABEL_21:
      char v54 = 0;
      return v54 & 1;
    }
    outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_TypeName);
    uint64_t v59 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    outlined destroy of AnyValue?(v80, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_TypeName);
    uint64_t v57 = v41;
    goto LABEL_19;
  }
  outlined destroy of AnyValue?(v40, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_TypeName?);
  int v45 = v43(v42, 1, v44);
  uint64_t v46 = v67;
  if (v45 != 1)
  {
LABEL_27:
    unsigned int v56 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
    uint64_t v57 = v41;
    goto LABEL_20;
  }
  outlined destroy of AnyValue?(v41, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_11:
  uint64_t v47 = v66;
  uint64_t v48 = (uint64_t)v37 + *(int *)(v66 + 32);
  uint64_t v49 = v73;
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
  uint64_t v51 = v71;
  v50(v71, v48, v46);
  uint64_t v52 = (uint64_t)v36 + *(int *)(v47 + 32);
  uint64_t v53 = v72;
  v50(v72, v52, v46);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v55 = *(void (**)(char *, uint64_t))(v49 + 8);
  v55(v53, v46);
  v55(v51, v46);
  return v54 & 1;
}

uint64_t specialized static PgQuery_CompositeTypeStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  int v45 = (char *)&v44 - v7;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v9 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v49 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v44 - v22;
  CompositeTypeuint64_t Stmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
  uint64_t v25 = *(int *)(CompositeTypeStmt + 24);
  uint64_t v50 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = CompositeTypeStmt;
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v28 = *(int *)(v27 + 24);
  uint64_t v51 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v30(v29, 1, RangeVar) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v30(v29, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
LABEL_10:
    char v41 = 0;
    return v41 & 1;
  }
  uint64_t v31 = v49;
  outlined init with take of PgQuery_OidList(v29, v49, type metadata accessor for PgQuery_RangeVar);
  char v32 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v18, v31);
  outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v32 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v33 = v50;
  uint64_t v34 = v51;
  if ((specialized static Array<A>.== infix(_:_:)(*v50, *v51) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v36 = v47;
  uint64_t v35 = v48;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  uint64_t v38 = v45;
  v37(v45, (char *)v33 + *(int *)(v27 + 20), v48);
  uint64_t v39 = (char *)v34 + *(int *)(v27 + 20);
  uint64_t v40 = v46;
  v37(v46, v39, v35);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v36 + 8);
  v42(v40, v35);
  v42(v38, v35);
  return v41 & 1;
}

uint64_t specialized static PgQuery_AlterOperatorStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v48 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v47 = (char *)&v46 - v7;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v9 = *(void *)(ObjectWithArgs - 8);
  MEMORY[0x1F4188790](ObjectWithArgs);
  uint64_t v51 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v46 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v46 - v22;
  AlterOperatoruint64_t Stmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
  uint64_t v25 = *(int *)(AlterOperatorStmt + 24);
  uint64_t v52 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = AlterOperatorStmt;
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v28 = *(int *)(v27 + 24);
  uint64_t v53 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if (v30(v29, 1, ObjectWithArgs) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if (v30(v29, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_8:
    char v41 = &demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?);
    uint64_t v42 = (uint64_t)v14;
LABEL_13:
    outlined destroy of AnyValue?(v42, v41);
    goto LABEL_14;
  }
  uint64_t v43 = v51;
  outlined init with take of PgQuery_OidList(v29, v51, type metadata accessor for PgQuery_ObjectWithArgs);
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)v18, *(void *)v43) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*((void *)v18 + 1), *(void *)(v43 + 8)) & 1) == 0
    || v18[16] != *(unsigned char *)(v43 + 16))
  {
    outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_ObjectWithArgs);
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_ObjectWithArgs);
    uint64_t v42 = (uint64_t)v14;
    char v41 = &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?;
    goto LABEL_13;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_ObjectWithArgs);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_ObjectWithArgs);
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if ((v45 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_4:
  uint64_t v31 = v52;
  char v32 = v53;
  if ((specialized static Array<A>.== infix(_:_:)(*v52, *v53) & 1) == 0)
  {
LABEL_14:
    char v39 = 0;
    return v39 & 1;
  }
  uint64_t v34 = v49;
  uint64_t v33 = v50;
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  uint64_t v36 = v47;
  v35(v47, (char *)v31 + *(int *)(v27 + 20), v50);
  uint64_t v37 = (char *)v32 + *(int *)(v27 + 20);
  uint64_t v38 = v48;
  v35(v48, v37, v33);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v34 + 8);
  v40(v38, v33);
  v40(v36, v33);
  return v39 & 1;
}

uint64_t specialized static PgQuery_AlterOpFamilyStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0) {
    goto LABEL_10;
  }
  BOOL v11 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
      && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 32), *(void *)(a2 + 32)) & 1) != 0)
    {
      AlterOpFamilyuint64_t Stmt = type metadata accessor for PgQuery_AlterOpFamilyStmt(0);
      uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v14(v10, a1 + *(int *)(AlterOpFamilyStmt + 32), v4);
      v14(v8, a2 + *(int *)(AlterOpFamilyStmt + 32), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
      return v12 & 1;
    }
LABEL_10:
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_AlterFunctionStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unsigned int v56 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v55 = (char *)&v52 - v7;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v9 = *(void *)(ObjectWithArgs - 8);
  uint64_t v60 = ObjectWithArgs;
  char v61 = (char *)v9;
  MEMORY[0x1F4188790](ObjectWithArgs);
  BOOL v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?));
  MEMORY[0x1F4188790](v59);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v52 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v52 - v21;
  uint64_t v23 = *a1;
  uint64_t v24 = a1;
  uint64_t v25 = *((unsigned __int8 *)a1 + 8);
  uint64_t v26 = *a2;
  uint64_t v27 = (uint64_t)a2;
  uint64_t v28 = *((unsigned __int8 *)a2 + 8);
  uint64_t v29 = destructiveProjectEnumData for StorableValue(v23, v25);
  if (v29 != destructiveProjectEnumData for StorableValue(v26, v28)) {
    goto LABEL_16;
  }
  uint64_t v53 = v11;
  uint64_t v30 = (uint64_t)v17;
  AlterFunctionuint64_t Stmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
  uint64_t v32 = *(int *)(AlterFunctionStmt + 28);
  char v54 = (char *)v24;
  outlined init with copy of PgQuery_Alias?((uint64_t)v24 + v32, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v33 = v27;
  outlined init with copy of PgQuery_Alias?(v27 + *(int *)(AlterFunctionStmt + 28), (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v34 = (uint64_t)&v13[*(int *)(v59 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v34, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v35 = v60;
  uint64_t v36 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v61 + 6);
  if (v36((uint64_t)v13, 1, v60) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if (v36(v34, 1, v35) != 1)
    {
LABEL_10:
      uint64_t v47 = &demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?);
      uint64_t v48 = (uint64_t)v13;
LABEL_15:
      outlined destroy of AnyValue?(v48, v47);
      goto LABEL_16;
    }
    outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    uint64_t v37 = v58;
  }
  else
  {
    uint64_t v59 = v33;
    char v61 = v22;
    outlined init with copy of PgQuery_Alias?((uint64_t)v13, v30, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if (v36(v34, 1, v35) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined destroy of AnyValue?((uint64_t)v61, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_ObjectWithArgs);
      goto LABEL_10;
    }
    uint64_t v49 = (uint64_t)v53;
    outlined init with take of PgQuery_OidList(v34, (uint64_t)v53, type metadata accessor for PgQuery_ObjectWithArgs);
    if ((specialized static Array<A>.== infix(_:_:)(*(void *)v30, *(void *)v49) & 1) == 0
      || (specialized static Array<A>.== infix(_:_:)(*(void *)(v30 + 8), *(void *)(v49 + 8)) & 1) == 0
      || *(unsigned __int8 *)(v30 + 16) != *(unsigned __int8 *)(v49 + 16))
    {
      outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_ObjectWithArgs);
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined destroy of AnyValue?((uint64_t)v61, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_ObjectWithArgs);
      uint64_t v48 = (uint64_t)v13;
      uint64_t v47 = &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?;
      goto LABEL_15;
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    uint64_t v37 = v58;
    char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_ObjectWithArgs);
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of AnyValue?((uint64_t)v61, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_ObjectWithArgs);
    outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    uint64_t v33 = v59;
    if ((v51 & 1) == 0) {
      goto LABEL_16;
    }
  }
  uint64_t v38 = v54;
  if ((specialized static Array<A>.== infix(_:_:)(*((void *)v54 + 2), *(void *)(v33 + 16)) & 1) == 0)
  {
LABEL_16:
    char v45 = 0;
    return v45 & 1;
  }
  uint64_t v39 = v33;
  uint64_t v40 = v57;
  char v41 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  uint64_t v42 = v55;
  v41(v55, &v38[*(int *)(AlterFunctionStmt + 24)], v37);
  uint64_t v43 = v39 + *(int *)(AlterFunctionStmt + 24);
  uint64_t v44 = v56;
  v41(v56, (char *)v43, v37);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v46 = *(void (**)(char *, uint64_t))(v40 + 8);
  v46(v44, v37);
  v46(v42, v37);
  return v45 & 1;
}

uint64_t specialized static PgQuery_SetOperationStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v84 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void *)(Node - 8);
  uint64_t v96 = Node;
  uint64_t v97 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](Node);
  uint64_t v91 = (uint64_t)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v84 - v15;
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v17 = MEMORY[0x1F4188790](v95);
  uint64_t v94 = (uint64_t)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v84 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v92 = (uint64_t)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v93 = (uint64_t)&v84 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v84 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v84 - v29;
  uint64_t SetOperationStmt = type metadata accessor for PgQuery_SetOperationStmt(0);
  uint64_t v32 = a2;
  uint64_t v33 = *(int *)(SetOperationStmt + 20);
  uint64_t v34 = *(void *)(a1 + v33);
  uint64_t v35 = *(void *)(a2 + v33);
  if (v34 == v35) {
    goto LABEL_38;
  }
  uint64_t v89 = v10;
  uint64_t v90 = v4;
  uint64_t v36 = *(void *)(v34 + 16);
  uint64_t v37 = *(void *)(v35 + 16);
  if (*(unsigned char *)(v35 + 24) == 1)
  {
    switch(v37)
    {
      case 1:
        if (v36 != 1) {
          goto LABEL_48;
        }
        goto LABEL_7;
      case 2:
        if (v36 != 2) {
          goto LABEL_48;
        }
        goto LABEL_7;
      case 3:
        if (v36 != 3) {
          goto LABEL_48;
        }
        goto LABEL_7;
      case 4:
        if (v36 != 4) {
          goto LABEL_48;
        }
        goto LABEL_7;
      default:
        if (!v36) {
          goto LABEL_7;
        }
        goto LABEL_48;
    }
  }
  if (v36 != v37)
  {
LABEL_48:
    char v80 = 0;
    return v80 & 1;
  }
LABEL_7:
  if (*(unsigned __int8 *)(v34 + 25) != *(unsigned __int8 *)(v35 + 25)) {
    goto LABEL_48;
  }
  uint64_t v84 = a1;
  uint64_t v85 = v32;
  uint64_t v86 = v8;
  uint64_t v87 = v5;
  uint64_t v38 = v34
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  uint64_t v39 = v34;
  outlined init with copy of PgQuery_Alias?(v35+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, (uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v40 = (uint64_t)&v20[*(int *)(v95 + 48)];
  outlined init with copy of PgQuery_Alias?(v38, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v30, v40, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v41 = v96;
  uint64_t v43 = v97 + 48;
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  int v44 = v42(v20, 1, v96);
  uint64_t v88 = v39;
  if (v44 == 1)
  {
    int v45 = v42((char *)v40, 1, v41);
    swift_retain();
    swift_retain();
    if (v45 == 1)
    {
      uint64_t v97 = v43;
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_25;
    }
    uint64_t v46 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_42:
    outlined destroy of AnyValue?((uint64_t)v20, v46);
    uint64_t v82 = (uint64_t)v30;
LABEL_46:
    outlined destroy of AnyValue?(v82, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_47;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v42((char *)v40, 1, v41) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v46 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_41:
    outlined destroy of PgQuery_Alias((uint64_t)v28, type metadata accessor for PgQuery_Node);
    goto LABEL_42;
  }
  uint64_t v97 = v43;
  outlined init with take of PgQuery_OidList(v40, (uint64_t)v16, type metadata accessor for PgQuery_Node);
  uint64_t v47 = *(int *)(v41 + 20);
  uint64_t v48 = *(void *)&v28[v47];
  uint64_t v49 = *(void *)&v16[v47];
  swift_retain();
  swift_retain();
  if (v48 != v49)
  {
    swift_retain();
    swift_retain();
    BOOL v50 = closure #1 in static PgQuery_Node.== infix(_:_:)(v48, v49);
    swift_release();
    swift_release();
    if (!v50)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
      uint64_t v46 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_41;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v28, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v51 & 1) == 0) {
    goto LABEL_47;
  }
LABEL_25:
  uint64_t v52 = v88
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg;
  uint64_t v53 = v93;
  outlined init with copy of PgQuery_Alias?(v35+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v93, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v54 = v94;
  uint64_t v55 = v94 + *(int *)(v95 + 48);
  outlined init with copy of PgQuery_Alias?(v52, v94, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v53, v55, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v56 = v96;
  if (v42((char *)v54, 1, v96) != 1)
  {
    uint64_t v57 = v92;
    outlined init with copy of PgQuery_Alias?(v54, v92, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v42((char *)v55, 1, v56) == 1)
    {
      uint64_t v58 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_44:
      outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
      goto LABEL_45;
    }
    uint64_t v59 = v91;
    outlined init with take of PgQuery_OidList(v55, v91, type metadata accessor for PgQuery_Node);
    uint64_t v60 = *(int *)(v56 + 20);
    uint64_t v61 = *(void *)(v57 + v60);
    uint64_t v62 = *(void *)(v59 + v60);
    if (v61 != v62)
    {
      swift_retain();
      swift_retain();
      BOOL v63 = closure #1 in static PgQuery_Node.== infix(_:_:)(v61, v62);
      swift_release();
      swift_release();
      if (!v63)
      {
        outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
        uint64_t v58 = &demangling cache variable for type metadata for PgQuery_Node?;
        goto LABEL_44;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    uint64_t v4 = v90;
    char v64 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
    outlined destroy of AnyValue?(v54, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of AnyValue?(v53, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v64) {
      goto LABEL_34;
    }
LABEL_47:
    swift_release();
    swift_release();
    goto LABEL_48;
  }
  if (v42((char *)v55, 1, v56) != 1)
  {
    uint64_t v58 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_45:
    outlined destroy of AnyValue?(v54, v58);
    uint64_t v82 = v53;
    goto LABEL_46;
  }
  outlined destroy of AnyValue?(v54, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v53, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v4 = v90;
LABEL_34:
  uint64_t v65 = v88;
  uint64_t v66 = *(void *)(v88
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes);
  uint64_t v67 = *(void *)(v35
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v68 = specialized static Array<A>.== infix(_:_:)(v66, v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v68 & 1) == 0) {
    goto LABEL_47;
  }
  uint64_t v69 = *(void *)(v65
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods);
  uint64_t v70 = *(void *)(v35
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v71 = specialized static Array<A>.== infix(_:_:)(v69, v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v71 & 1) == 0) {
    goto LABEL_47;
  }
  uint64_t v72 = *(void *)(v65
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations);
  uint64_t v73 = *(void *)(v35
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v74 = specialized static Array<A>.== infix(_:_:)(v72, v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v74 & 1) == 0) {
    goto LABEL_47;
  }
  uint64_t v75 = *(void *)(v65
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses);
  uint64_t v76 = *(void *)(v35
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v77 = specialized static Array<A>.== infix(_:_:)(v75, v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v8 = v86;
  uint64_t v5 = v87;
  uint64_t v10 = v89;
  a1 = v84;
  uint64_t v32 = v85;
  if ((v77 & 1) == 0) {
    goto LABEL_48;
  }
LABEL_38:
  uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v79 = v32;
  v78(v10, a1, v4);
  v78(v8, v79, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v80 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v81 = *(void (**)(char *, uint64_t))(v5 + 8);
  v81(v8, v4);
  v81(v10, v4);
  return v80 & 1;
}

uint64_t specialized static PgQuery_SQLValueFunction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v55 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v60 = (uint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v61 = (uint64_t)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v55 - v19;
  uint64_t SQLValueFunction = type metadata accessor for PgQuery_SQLValueFunction(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(SQLValueFunction + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26) {
    goto LABEL_15;
  }
  uint64_t v56 = a2;
  uint64_t v57 = v23;
  uint64_t v55 = v10;
  uint64_t v58 = v22;
  uint64_t v59 = v4;
  uint64_t v28 = v25
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v26+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v31 = Node;
  if (v30((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v33 = v61;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v61, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v29, 1, v31) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v35 = v31;
      uint64_t v36 = (uint64_t)v20;
      uint64_t v37 = v29;
      uint64_t v38 = v33;
      uint64_t v39 = v60;
      outlined init with take of PgQuery_OidList(v37, v60, type metadata accessor for PgQuery_Node);
      uint64_t v40 = *(int *)(v35 + 20);
      uint64_t v41 = *(void *)(v38 + v40);
      uint64_t v42 = *(void *)(v39 + v40);
      swift_retain();
      swift_retain();
      if (v41 == v42
        || (swift_retain(),
            swift_retain(),
            BOOL v43 = closure #1 in static PgQuery_Node.== infix(_:_:)(v41, v42),
            swift_release(),
            swift_release(),
            v43))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v44 = v61;
        uint64_t v45 = v39;
        uint64_t v4 = v59;
        char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v36, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v46) {
          goto LABEL_11;
        }
LABEL_19:
        swift_release();
        swift_release();
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
      uint64_t v34 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v20 = (char *)v36;
      uint64_t v33 = v61;
    }
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
LABEL_18:
    outlined destroy of AnyValue?((uint64_t)v15, v34);
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_19;
  }
  unsigned int v32 = v30(v29, 1, v31);
  swift_retain();
  swift_retain();
  if (v32 != 1)
  {
    uint64_t v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_18;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v4 = v59;
LABEL_11:
  if ((specialized == infix<A>(_:_:)(*(void *)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op), *(unsigned __int8 *)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op+ 8), *(void *)(v26+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op), *(unsigned __int8 *)(v26+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op+ 8)) & 1) == 0|| *(_DWORD *)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type) != *(_DWORD *)(v26 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type)|| *(_DWORD *)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod) != *(_DWORD *)(v26 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod))
  {
    goto LABEL_19;
  }
  int v47 = *(_DWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v48 = *(_DWORD *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  uint64_t v23 = v57;
  uint64_t v22 = v58;
  uint64_t v10 = v55;
  uint64_t v27 = v56;
  if (v47 != v48)
  {
LABEL_20:
    char v52 = 0;
    return v52 & 1;
  }
LABEL_15:
  uint64_t v49 = v22;
  BOOL v50 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v51 = v27;
  v50(v10, v23, v4);
  v50(v8, v51, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v53 = *(void (**)(char *, uint64_t))(v49 + 8);
  v53(v8, v4);
  v53(v10, v4);
  return v52 & 1;
}

uint64_t specialized static PgQuery_RangeTblFunction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v67 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v68 = (uint64_t)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v62 - v19;
  uint64_t RangeTblFunction = type metadata accessor for PgQuery_RangeTblFunction(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(RangeTblFunction + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26) {
    goto LABEL_17;
  }
  uint64_t v63 = a2;
  uint64_t v64 = v23;
  uint64_t v65 = v22;
  uint64_t v66 = v4;
  uint64_t v28 = v25
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
  outlined init with copy of PgQuery_Alias?(v26+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v30((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v32 = v68;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v68, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v29, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v33 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v34 = v32;
      uint64_t v35 = (uint64_t)v20;
      uint64_t v36 = v67;
      outlined init with take of PgQuery_OidList(v29, v67, type metadata accessor for PgQuery_Node);
      uint64_t v37 = *(int *)(Node + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v36 + v37);
      swift_retain();
      swift_retain();
      if (v38 == v39
        || (swift_retain(),
            swift_retain(),
            BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
            swift_release(),
            swift_release(),
            v40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v41 = v68;
        char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v42) {
          goto LABEL_11;
        }
LABEL_21:
        swift_release();
        swift_release();
        goto LABEL_22;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v33 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v20 = (char *)v35;
      uint64_t v32 = v68;
    }
    outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_Node);
LABEL_20:
    outlined destroy of AnyValue?((uint64_t)v15, v33);
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_21;
  }
  unsigned int v31 = v30(v29, 1, Node);
  swift_retain();
  swift_retain();
  if (v31 != 1)
  {
    uint64_t v33 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_20;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount) != *(_DWORD *)(v26 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount))
    goto LABEL_21;
  uint64_t v43 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames);
  uint64_t v44 = *(void *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v45 = specialized static Array<A>.== infix(_:_:)(v43, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v46 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes);
  uint64_t v47 = *(void *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v48 = specialized static Array<A>.== infix(_:_:)(v46, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v48 & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v49 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods);
  uint64_t v50 = *(void *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v51 = specialized static Array<A>.== infix(_:_:)(v49, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v52 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations);
  uint64_t v53 = *(void *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v54 = specialized static Array<A>.== infix(_:_:)(v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0) {
    goto LABEL_21;
  }
  BOOL v55 = specialized static Array<A>.== infix(_:_:)(*(void **)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams), *(void **)(v26+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams));
  swift_release();
  swift_release();
  uint64_t v22 = v65;
  uint64_t v4 = v66;
  uint64_t v27 = v63;
  uint64_t v23 = v64;
  if (!v55)
  {
LABEL_22:
    char v59 = 0;
    return v59 & 1;
  }
LABEL_17:
  uint64_t v56 = v22;
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v58 = v27;
  v57(v10, v23, v4);
  v57(v8, v58, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v60 = *(void (**)(char *, uint64_t))(v56 + 8);
  v60(v8, v4);
  v60(v10, v4);
  return v59 & 1;
}

uint64_t specialized static PgQuery_RangeTableSample.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v84 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  uint64_t v12 = MEMORY[0x1F4188790](Node);
  uint64_t v92 = (uint64_t)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v96 = (uint64_t)&v84 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v95 = (uint64_t)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v84 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v93 = (uint64_t)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v94 = (uint64_t)&v84 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v98 = (uint64_t)&v84 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v84 - v27;
  uint64_t RangeTableSample = type metadata accessor for PgQuery_RangeTableSample(0);
  uint64_t v30 = a1;
  uint64_t v31 = *(int *)(RangeTableSample + 20);
  uint64_t v32 = *(void *)(a1 + v31);
  uint64_t v33 = *(void *)(a2 + v31);
  uint64_t v34 = a2;
  if (v32 == v33)
  {
LABEL_27:
    char v80 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v81 = v34;
    v80(v10, v30, v4);
    v80(v8, v81, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v82 = *(void (**)(char *, uint64_t))(v5 + 8);
    v82(v8, v4);
    v82(v10, v4);
    return v68 & 1;
  }
  uint64_t v88 = v10;
  uint64_t v89 = v30;
  uint64_t v86 = v8;
  uint64_t v87 = a2;
  uint64_t v90 = v5;
  uint64_t v91 = v4;
  uint64_t v35 = v32
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t v36 = v33;
  outlined init with copy of PgQuery_Alias?(v33+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v37 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v35, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v97 = v28;
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v37, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v39 = Node;
  if (v38((uint64_t)v19, 1, Node) != 1)
  {
    uint64_t v41 = v36;
    uint64_t v43 = v98;
    outlined init with copy of PgQuery_Alias?((uint64_t)v19, v98, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v44 = (uint64_t)v19;
    if (v38(v37, 1, v39) == 1)
    {
      swift_retain();
      swift_retain();
      char v45 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      uint64_t v46 = (uint64_t)v97;
    }
    else
    {
      uint64_t v85 = v38;
      uint64_t v47 = v96;
      outlined init with take of PgQuery_OidList(v37, v96, type metadata accessor for PgQuery_Node);
      uint64_t v48 = v43;
      uint64_t v42 = v39;
      uint64_t v49 = *(int *)(v39 + 20);
      uint64_t v50 = *(void *)(v48 + v49);
      uint64_t v51 = *(void *)(v47 + v49);
      swift_retain();
      swift_retain();
      if (v50 == v51
        || (swift_retain(),
            swift_retain(),
            BOOL v52 = closure #1 in static PgQuery_Node.== infix(_:_:)(v50, v51),
            swift_release(),
            swift_release(),
            v52))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v53 = v98;
        char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v44, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?((uint64_t)v97, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v54 & 1) == 0) {
          goto LABEL_19;
        }
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
      char v45 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v46 = (uint64_t)v97;
      uint64_t v43 = v98;
    }
    outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
LABEL_18:
    outlined destroy of AnyValue?(v44, v45);
    outlined destroy of AnyValue?(v46, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_19;
  }
  unsigned int v40 = v38(v37, 1, v39);
  swift_retain();
  uint64_t v41 = v36;
  swift_retain();
  if (v40 != 1)
  {
    char v45 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    uint64_t v44 = (uint64_t)v19;
    uint64_t v46 = (uint64_t)v97;
    goto LABEL_18;
  }
  uint64_t v85 = v38;
  uint64_t v42 = v39;
  outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v97, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  uint64_t v55 = *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__method);
  uint64_t v56 = *(void *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__method);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v57 = specialized static Array<A>.== infix(_:_:)(v55, v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v57 & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v58 = *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v59 = *(void *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v60 = specialized static Array<A>.== infix(_:_:)(v58, v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v60 & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v61 = v32
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable;
  uint64_t Node = v41;
  uint64_t v62 = v94;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable, v94, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v63 = v95;
  uint64_t v64 = v95 + *(int *)(v15 + 48);
  outlined init with copy of PgQuery_Alias?(v61, v95, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v62, v64, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v65 = v42;
  uint64_t v66 = v42;
  uint64_t v67 = v85;
  if (v85(v63, 1, v66) == 1)
  {
    if (v67(v64, 1, v65) == 1)
    {
      outlined destroy of AnyValue?(v63, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v4 = v91;
      goto LABEL_26;
    }
    uint64_t v70 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_32;
  }
  uint64_t v69 = v93;
  outlined init with copy of PgQuery_Alias?(v63, v93, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v67(v64, 1, v65) == 1)
  {
    uint64_t v70 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_31:
    outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_Node);
LABEL_32:
    outlined destroy of AnyValue?(v63, v70);
    outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_19;
  }
  uint64_t v71 = v92;
  outlined init with take of PgQuery_OidList(v64, v92, type metadata accessor for PgQuery_Node);
  uint64_t v72 = *(int *)(v65 + 20);
  uint64_t v73 = *(void *)(v69 + v72);
  uint64_t v74 = *(void *)(v71 + v72);
  if (v73 != v74)
  {
    swift_retain();
    swift_retain();
    BOOL v75 = closure #1 in static PgQuery_Node.== infix(_:_:)(v73, v74);
    swift_release();
    swift_release();
    if (!v75)
    {
      outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_Node);
      uint64_t v70 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v69 = v93;
      goto LABEL_31;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v76 = v93;
  uint64_t v4 = v91;
  char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v76, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v63, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v77)
  {
LABEL_26:
    int v78 = *(_DWORD *)(v32
                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    int v79 = *(_DWORD *)(Node
                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    uint64_t v30 = v89;
    uint64_t v5 = v90;
    uint64_t v8 = v86;
    uint64_t v34 = v87;
    uint64_t v10 = v88;
    if (v78 != v79)
    {
      char v68 = 0;
      return v68 & 1;
    }
    goto LABEL_27;
  }
LABEL_19:
  swift_release();
  swift_release();
  char v68 = 0;
  return v68 & 1;
}

uint64_t specialized static PgQuery_OnConflictClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v111 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v127 = *(void *)(Node - 8);
  uint64_t v128 = Node;
  uint64_t v12 = MEMORY[0x1F4188790](Node);
  uint64_t v119 = (uint64_t)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v118 = (uint64_t)&v111 - v14;
  uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v15 = MEMORY[0x1F4188790](v126);
  uint64_t v124 = (uint64_t)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v122 = (uint64_t)&v111 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v121 = (uint64_t)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v123 = (uint64_t)&v111 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v120 = (uint64_t)&v111 - v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v125 = (uint64_t)&v111 - v25;
  uint64_t InferClause = type metadata accessor for PgQuery_InferClause(0);
  uint64_t v27 = *(void *)(InferClause - 8);
  MEMORY[0x1F4188790](InferClause);
  uint64_t v129 = (uint64_t)&v111 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_InferClause?, PgQuery_InferClause?));
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v111 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_InferClause?);
  uint64_t v33 = MEMORY[0x1F4188790](v32 - 8);
  uint64_t v130 = (uint64_t)&v111 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  uint64_t v131 = (uint64_t)&v111 - v35;
  uint64_t v36 = type metadata accessor for PgQuery_OnConflictClause(0);
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v39 = *(int *)(v36 + 20);
  uint64_t v40 = *(void *)(a1 + v39);
  uint64_t v41 = *(void *)(a2 + v39);
  if (v40 == v41) {
    goto LABEL_41;
  }
  uint64_t v42 = v4;
  char v117 = v10;
  uint64_t v43 = *(void *)(v40 + 16);
  uint64_t v44 = *(void *)(v41 + 16);
  if (*(unsigned char *)(v41 + 24) == 1)
  {
    switch(v44)
    {
      case 1:
        if (v43 != 1) {
          goto LABEL_63;
        }
        goto LABEL_13;
      case 2:
        if (v43 != 2) {
          goto LABEL_63;
        }
        goto LABEL_13;
      case 3:
        if (v43 == 3) {
          goto LABEL_13;
        }
        goto LABEL_63;
      default:
        if (!v43) {
          goto LABEL_13;
        }
        goto LABEL_63;
    }
  }
  if (v43 != v44) {
    goto LABEL_63;
  }
LABEL_13:
  uint64_t v113 = v37;
  uint64_t v114 = v38;
  uint64_t v115 = v8;
  uint64_t v116 = v5;
  uint64_t v45 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infer;
  uint64_t v46 = v40;
  uint64_t v47 = v131;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infer, v131, &demangling cache variable for type metadata for PgQuery_InferClause?);
  uint64_t v48 = (uint64_t)&v31[*(int *)(v29 + 48)];
  outlined init with copy of PgQuery_Alias?(v45, (uint64_t)v31, &demangling cache variable for type metadata for PgQuery_InferClause?);
  outlined init with copy of PgQuery_Alias?(v47, v48, &demangling cache variable for type metadata for PgQuery_InferClause?);
  uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v49((uint64_t)v31, 1, InferClause) == 1)
  {
    int v50 = v49(v48, 1, InferClause);
    uint64_t v51 = v46;
    swift_retain();
    swift_retain();
    if (v50 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v31, &demangling cache variable for type metadata for PgQuery_InferClause?);
      outlined destroy of AnyValue?(v131, &demangling cache variable for type metadata for PgQuery_InferClause?);
      uint64_t v4 = v42;
      goto LABEL_16;
    }
    uint64_t v63 = &demangling cache variable for type metadata for (PgQuery_InferClause?, PgQuery_InferClause?);
LABEL_61:
    outlined destroy of AnyValue?((uint64_t)v31, v63);
    outlined destroy of AnyValue?(v131, &demangling cache variable for type metadata for PgQuery_InferClause?);
    goto LABEL_62;
  }
  uint64_t v51 = v46;
  uint64_t v62 = v130;
  outlined init with copy of PgQuery_Alias?((uint64_t)v31, v130, &demangling cache variable for type metadata for PgQuery_InferClause?);
  if (v49(v48, 1, InferClause) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v63 = &demangling cache variable for type metadata for (PgQuery_InferClause?, PgQuery_InferClause?);
LABEL_60:
    outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_InferClause);
    goto LABEL_61;
  }
  uint64_t v64 = v129;
  outlined init with take of PgQuery_OidList(v48, v129, type metadata accessor for PgQuery_InferClause);
  uint64_t v65 = *(int *)(InferClause + 20);
  uint64_t v66 = *(void *)(v62 + v65);
  uint64_t v67 = *(void *)(v64 + v65);
  if (v66 == v67)
  {
    swift_retain();
    swift_retain();
    goto LABEL_29;
  }
  uint64_t v68 = *(void *)(v66 + 16);
  uint64_t v69 = *(void *)(v67 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v70 = specialized static Array<A>.== infix(_:_:)(v68, v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v70 & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v111 = v67;
  uint64_t v112 = v66;
  uint64_t v71 = v66
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t v72 = v67
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t v73 = v125;
  outlined init with copy of PgQuery_Alias?(v72, v125, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v74 = v122;
  uint64_t v75 = v122 + *(int *)(v126 + 48);
  outlined init with copy of PgQuery_Alias?(v71, v122, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v73, v75, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v76 = v128;
  char v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48);
  if (v77(v74, 1, v128) == 1)
  {
    if (v77(v75, 1, v76) == 1)
    {
      outlined destroy of AnyValue?(v74, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v125, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v62 = v130;
      uint64_t v78 = v111;
      uint64_t v79 = v112;
      goto LABEL_46;
    }
    uint64_t v86 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_57;
  }
  uint64_t v85 = v120;
  outlined init with copy of PgQuery_Alias?(v74, v120, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v77(v75, 1, v76) == 1)
  {
    uint64_t v86 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_56:
    outlined destroy of PgQuery_Alias(v85, type metadata accessor for PgQuery_Node);
LABEL_57:
    outlined destroy of AnyValue?(v74, v86);
    outlined destroy of AnyValue?(v125, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v62 = v130;
    goto LABEL_58;
  }
  uint64_t v101 = v118;
  outlined init with take of PgQuery_OidList(v75, v118, type metadata accessor for PgQuery_Node);
  uint64_t v102 = *(int *)(v76 + 20);
  uint64_t v103 = *(void *)(v85 + v102);
  uint64_t v104 = *(void *)(v101 + v102);
  if (v103 != v104)
  {
    swift_retain();
    swift_retain();
    BOOL v105 = closure #1 in static PgQuery_Node.== infix(_:_:)(v103, v104);
    swift_release();
    swift_release();
    if (!v105)
    {
      outlined destroy of PgQuery_Alias(v101, type metadata accessor for PgQuery_Node);
      uint64_t v86 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v74 = v122;
      goto LABEL_56;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v106 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v101, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v85, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v122, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v125, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v62 = v130;
  uint64_t v78 = v111;
  uint64_t v79 = v112;
  if ((v106 & 1) == 0)
  {
LABEL_58:
    swift_release();
    swift_release();
LABEL_59:
    outlined destroy of PgQuery_Alias(v129, type metadata accessor for PgQuery_InferClause);
    uint64_t v63 = &demangling cache variable for type metadata for PgQuery_InferClause?;
    goto LABEL_60;
  }
LABEL_46:
  if ((*(void *)(v79
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname) != *(void *)(v78 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname)
     || *(void *)(v79
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname
                  + 8) != *(void *)(v78
                                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_58;
  }
  uint64_t v107 = v78;
  int v108 = *(_DWORD *)(v79
                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v109 = *(_DWORD *)(v107
                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  if (v108 != v109) {
    goto LABEL_59;
  }
LABEL_29:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v80 = v129;
  uint64_t v81 = v62;
  uint64_t v4 = v42;
  char v82 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_InferClause);
  outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_InferClause);
  outlined destroy of AnyValue?((uint64_t)v31, &demangling cache variable for type metadata for PgQuery_InferClause?);
  outlined destroy of AnyValue?(v131, &demangling cache variable for type metadata for PgQuery_InferClause?);
  if ((v82 & 1) == 0) {
    goto LABEL_62;
  }
LABEL_16:
  uint64_t v52 = *(void *)(v51
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  uint64_t v53 = *(void *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v54 = specialized static Array<A>.== infix(_:_:)(v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0) {
    goto LABEL_62;
  }
  uint64_t v55 = v51;
  uint64_t v56 = v51
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t v57 = v123;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v123, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v58 = v124;
  uint64_t v59 = v124 + *(int *)(v126 + 48);
  outlined init with copy of PgQuery_Alias?(v56, v124, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v57, v59, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v60 = v128;
  uint64_t v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48);
  if (v61(v58, 1, v128) == 1)
  {
    if (v61(v59, 1, v60) == 1)
    {
      outlined destroy of AnyValue?(v58, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_39;
    }
    uint64_t v84 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_53;
  }
  uint64_t v83 = v121;
  outlined init with copy of PgQuery_Alias?(v58, v121, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v61(v59, 1, v60) == 1)
  {
    uint64_t v84 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_52:
    outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_Node);
LABEL_53:
    outlined destroy of AnyValue?(v58, v84);
    outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_62;
  }
  uint64_t v87 = v119;
  outlined init with take of PgQuery_OidList(v59, v119, type metadata accessor for PgQuery_Node);
  uint64_t v88 = *(int *)(v60 + 20);
  uint64_t v89 = *(void *)(v83 + v88);
  uint64_t v90 = *(void *)(v87 + v88);
  if (v89 != v90)
  {
    swift_retain();
    swift_retain();
    BOOL v91 = closure #1 in static PgQuery_Node.== infix(_:_:)(v89, v90);
    swift_release();
    swift_release();
    if (!v91)
    {
      outlined destroy of PgQuery_Alias(v87, type metadata accessor for PgQuery_Node);
      uint64_t v84 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_52;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v92 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v87, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v58, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v92 & 1) == 0)
  {
LABEL_62:
    swift_release();
    swift_release();
LABEL_63:
    char v99 = 0;
    return v99 & 1;
  }
LABEL_39:
  int v93 = *(_DWORD *)(v55
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v94 = *(_DWORD *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  BOOL v95 = v93 == v94;
  uint64_t v8 = v115;
  uint64_t v5 = v116;
  uint64_t v10 = v117;
  uint64_t v37 = v113;
  uint64_t v38 = v114;
  if (!v95) {
    goto LABEL_63;
  }
LABEL_41:
  uint64_t v96 = v8;
  uint64_t v97 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v98 = v38;
  v97(v10, v37, v4);
  v97(v96, v98, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v100 = *(void (**)(char *, uint64_t))(v5 + 8);
  v100(v96, v4);
  v100(v10, v4);
  return v99 & 1;
}

uint64_t specialized static PgQuery_CreateSchemaStmt.== infix(_:_:)(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v51 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  int v50 = (char *)&v48 - v7;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v9 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v48 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *((void *)a1 + 1);
  uint64_t v55 = a1;
  if (v24 == *a2 && v25 == a2[1] || (char v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v49 = v11;
    Schemauint64_t Stmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
    outlined init with copy of PgQuery_Alias?((uint64_t)&v55[*(int *)(SchemaStmt + 32)], (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    uint64_t v48 = SchemaStmt;
    uint64_t v28 = *(int *)(SchemaStmt + 32);
    char v54 = a2;
    outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 48)];
    outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v30((uint64_t)v14, 1, RoleSpec) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      if (v30(v29, 1, RoleSpec) == 1)
      {
        outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        uint64_t v31 = v54;
LABEL_7:
        uint64_t v32 = v55;
        if ((specialized static Array<A>.== infix(_:_:)(*((void *)v55 + 2), v31[2]) & 1) != 0
          && v32[24] == *((unsigned char *)v31 + 24))
        {
          uint64_t v33 = v48;
          uint64_t v35 = v52;
          uint64_t v34 = v53;
          uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
          uint64_t v37 = v50;
          v36(v50, &v32[*(int *)(v48 + 28)], v53);
          uint64_t v38 = (char *)v31 + *(int *)(v33 + 28);
          uint64_t v39 = v51;
          v36(v51, v38, v34);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v40 = *(void (**)(char *, uint64_t))(v35 + 8);
          v40(v39, v34);
          v40(v37, v34);
          return v26 & 1;
        }
LABEL_33:
        char v26 = 0;
        return v26 & 1;
      }
    }
    else
    {
      outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      if (v30(v29, 1, RoleSpec) != 1)
      {
        uint64_t v43 = (uint64_t)v49;
        outlined init with take of PgQuery_OidList(v29, (uint64_t)v49, type metadata accessor for PgQuery_RoleSpec);
        uint64_t v44 = *(void *)v18;
        uint64_t v45 = *(void *)v43;
        if (*(unsigned char *)(v43 + 8) == 1)
        {
          uint64_t v31 = v54;
          switch(v45)
          {
            case 1:
              if (v44 != 1) {
                goto LABEL_31;
              }
              goto LABEL_18;
            case 2:
              if (v44 != 2) {
                goto LABEL_31;
              }
              goto LABEL_18;
            case 3:
              if (v44 != 3) {
                goto LABEL_31;
              }
              goto LABEL_18;
            case 4:
              if (v44 != 4) {
                goto LABEL_31;
              }
              goto LABEL_18;
            default:
              if (!v44) {
                goto LABEL_18;
              }
              goto LABEL_31;
          }
        }
        uint64_t v31 = v54;
        if (v44 == v45)
        {
LABEL_18:
          if ((*((void *)v18 + 2) == *(void *)(v43 + 16) && *((void *)v18 + 3) == *(void *)(v43 + 24)
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && *((_DWORD *)v18 + 8) == *(_DWORD *)(v43 + 32))
          {
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
            char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_RoleSpec);
            outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
            outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
            outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
            outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
            if ((v46 & 1) == 0) {
              goto LABEL_33;
            }
            goto LABEL_7;
          }
        }
LABEL_31:
        outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_RoleSpec);
        outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
        uint64_t v42 = (uint64_t)v14;
        uint64_t v41 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
LABEL_32:
        outlined destroy of AnyValue?(v42, v41);
        goto LABEL_33;
      }
      outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
    }
    uint64_t v41 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    uint64_t v42 = (uint64_t)v14;
    goto LABEL_32;
  }
  return v26 & 1;
}

uint64_t specialized static PgQuery_CreatePolicyStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v100 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v115 = *(void *)(Node - 8);
  uint64_t v116 = Node;
  uint64_t v12 = MEMORY[0x1F4188790](Node);
  uint64_t v107 = (uint64_t)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v110 = (uint64_t)&v100 - v14;
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v15 = MEMORY[0x1F4188790](v114);
  uint64_t v109 = (uint64_t)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v113 = (uint64_t)&v100 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v108 = (uint64_t)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v111 = (uint64_t)&v100 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v112 = (uint64_t)&v100 - v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v117 = (uint64_t)&v100 - v25;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v120 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v118 = (uint64_t)&v100 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v100 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v32 = MEMORY[0x1F4188790](v31 - 8);
  uint64_t v119 = (uint64_t)&v100 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v100 - v34;
  Policyuint64_t Stmt = type metadata accessor for PgQuery_CreatePolicyStmt(0);
  uint64_t v37 = v5;
  uint64_t v38 = a1;
  uint64_t v39 = *(int *)(PolicyStmt + 20);
  uint64_t v40 = *(void *)(a1 + v39);
  uint64_t v41 = *(void *)(a2 + v39);
  if (v40 == v41) {
    goto LABEL_37;
  }
  uint64_t v42 = a2;
  uint64_t v43 = v37;
  uint64_t v104 = v38;
  uint64_t v105 = v42;
  uint64_t v102 = v8;
  uint64_t v103 = v10;
  uint64_t v106 = v4;
  if (*(void *)(v40 + 16) == *(void *)(v41 + 16) && *(void *)(v40 + 24) == *(void *)(v41 + 24)
    || (char v44 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v101 = v43;
    uint64_t v45 = v40
        + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table;
    uint64_t v46 = v41;
    outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v47 = (uint64_t)&v30[*(int *)(v28 + 48)];
    outlined init with copy of PgQuery_Alias?(v45, (uint64_t)v30, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v35, v47, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
    if (v48((uint64_t)v30, 1, RangeVar) == 1)
    {
      int v49 = v48(v47, 1, RangeVar);
      uint64_t v50 = v40;
      swift_retain();
      uint64_t v51 = v46;
      swift_retain();
      if (v49 == 1)
      {
        outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_12:
        if ((*(void *)(v50
                        + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName) != *(void *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName)
           || *(void *)(v50
                        + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName
                        + 8) != *(void *)(v51
                                          + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_20;
        }
        if (*(unsigned __int8 *)(v50
                                + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive) != *(unsigned __int8 *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive))
          goto LABEL_20;
        uint64_t v55 = *(void *)(v50
                        + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles);
        uint64_t v56 = *(void *)(v51
                        + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v57 = specialized static Array<A>.== infix(_:_:)(v55, v56);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v57 & 1) == 0) {
          goto LABEL_20;
        }
        uint64_t v58 = v50;
        uint64_t v59 = v50
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
        uint64_t v120 = v51;
        uint64_t v60 = v117;
        outlined init with copy of PgQuery_Alias?(v51+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v117, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v61 = v113;
        uint64_t v62 = v114;
        uint64_t v63 = v113 + *(int *)(v114 + 48);
        outlined init with copy of PgQuery_Alias?(v59, v113, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined init with copy of PgQuery_Alias?(v60, v63, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v64 = v116;
        uint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
        if (v65(v61, 1, v116) == 1)
        {
          if (v65(v63, 1, v64) == 1)
          {
            outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of AnyValue?(v117, &demangling cache variable for type metadata for PgQuery_Node?);
            uint64_t v66 = v50;
LABEL_27:
            uint64_t v77 = v66
                + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck;
            uint64_t v78 = v111;
            outlined init with copy of PgQuery_Alias?(v120+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, v111, &demangling cache variable for type metadata for PgQuery_Node?);
            uint64_t v79 = *(int *)(v62 + 48);
            uint64_t v80 = v109;
            uint64_t v81 = v109 + v79;
            outlined init with copy of PgQuery_Alias?(v77, v109, &demangling cache variable for type metadata for PgQuery_Node?);
            uint64_t v82 = v80;
            outlined init with copy of PgQuery_Alias?(v78, v81, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v65(v80, 1, v64) == 1)
            {
              int v83 = v65(v81, 1, v64);
              uint64_t v84 = v101;
              if (v83 == 1)
              {
                outlined destroy of AnyValue?(v80, &demangling cache variable for type metadata for PgQuery_Node?);
                outlined destroy of AnyValue?(v111, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_36:
                swift_release();
                swift_release();
                uint64_t v37 = v84;
                uint64_t v8 = v102;
                uint64_t v10 = v103;
                uint64_t v38 = v104;
                a2 = v105;
                uint64_t v4 = v106;
LABEL_37:
                uint64_t v94 = v37;
                BOOL v95 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
                v95(v10, v38, v4);
                v95(v8, a2, v4);
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                uint64_t v96 = v4;
                char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v97 = *(void (**)(char *, uint64_t))(v94 + 8);
                v97(v8, v96);
                v97(v10, v96);
                return v44 & 1;
              }
              uint64_t v87 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
            }
            else
            {
              uint64_t v85 = v80;
              uint64_t v86 = v108;
              outlined init with copy of PgQuery_Alias?(v85, v108, &demangling cache variable for type metadata for PgQuery_Node?);
              if (v65(v81, 1, v64) == 1)
              {
                uint64_t v87 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
              }
              else
              {
                uint64_t v88 = v107;
                outlined init with take of PgQuery_OidList(v81, v107, type metadata accessor for PgQuery_Node);
                uint64_t v89 = *(int *)(v64 + 20);
                uint64_t v90 = *(void *)(v86 + v89);
                uint64_t v91 = *(void *)(v88 + v89);
                if (v90 == v91
                  || (swift_retain(),
                      swift_retain(),
                      BOOL v92 = closure #1 in static PgQuery_Node.== infix(_:_:)(v90, v91),
                      swift_release(),
                      swift_release(),
                      v92))
                {
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                  char v93 = dispatch thunk of static Equatable.== infix(_:_:)();
                  outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_Node);
                  outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_Node);
                  outlined destroy of AnyValue?(v109, &demangling cache variable for type metadata for PgQuery_Node?);
                  outlined destroy of AnyValue?(v111, &demangling cache variable for type metadata for PgQuery_Node?);
                  uint64_t v84 = v101;
                  if (v93) {
                    goto LABEL_36;
                  }
                  goto LABEL_20;
                }
                outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_Node);
                uint64_t v87 = &demangling cache variable for type metadata for PgQuery_Node?;
                uint64_t v82 = v109;
              }
              outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_Node);
            }
            outlined destroy of AnyValue?(v82, v87);
            uint64_t v99 = v111;
            goto LABEL_45;
          }
          uint64_t v68 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_41:
          outlined destroy of AnyValue?(v61, v68);
          uint64_t v99 = v117;
LABEL_45:
          outlined destroy of AnyValue?(v99, &demangling cache variable for type metadata for PgQuery_Node?);
          goto LABEL_20;
        }
        uint64_t v67 = v112;
        outlined init with copy of PgQuery_Alias?(v61, v112, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v65(v63, 1, v64) == 1)
        {
          uint64_t v68 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_40:
          outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
          goto LABEL_41;
        }
        uint64_t v69 = v110;
        outlined init with take of PgQuery_OidList(v63, v110, type metadata accessor for PgQuery_Node);
        uint64_t v70 = *(int *)(v64 + 20);
        uint64_t v71 = *(void *)(v67 + v70);
        uint64_t v72 = *(void *)(v69 + v70);
        if (v71 != v72)
        {
          swift_retain();
          swift_retain();
          BOOL v73 = closure #1 in static PgQuery_Node.== infix(_:_:)(v71, v72);
          swift_release();
          swift_release();
          if (!v73)
          {
            outlined destroy of PgQuery_Alias(v110, type metadata accessor for PgQuery_Node);
            uint64_t v68 = &demangling cache variable for type metadata for PgQuery_Node?;
            uint64_t v67 = v112;
            goto LABEL_40;
          }
        }
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v74 = v112;
        uint64_t v75 = v110;
        char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v74, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v117, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v66 = v58;
        if (v76) {
          goto LABEL_27;
        }
LABEL_20:
        swift_release();
        swift_release();
        char v44 = 0;
        return v44 & 1;
      }
    }
    else
    {
      uint64_t v51 = v46;
      uint64_t v50 = v40;
      uint64_t v52 = v119;
      outlined init with copy of PgQuery_Alias?((uint64_t)v30, v119, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if (v48(v47, 1, RangeVar) != 1)
      {
        uint64_t v53 = v118;
        outlined init with take of PgQuery_OidList(v47, v118, type metadata accessor for PgQuery_RangeVar);
        swift_retain();
        swift_retain();
        char v54 = specialized static PgQuery_RangeVar.== infix(_:_:)(v52, v53);
        outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        if ((v54 & 1) == 0) {
          goto LABEL_20;
        }
        goto LABEL_12;
      }
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_RangeVar);
    }
    outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_20;
  }
  return v44 & 1;
}

uint64_t specialized static PgQuery_CreateDomainStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v130 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v106 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v116 = *(void *)(Node - 8);
  uint64_t v117 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v113 = (uint64_t)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v115);
  uint64_t v118 = (uint64_t)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v114 = (uint64_t)&v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v119 = (uint64_t)&v106 - v16;
  uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  uint64_t v124 = *(void *)(CollateClause - 8);
  uint64_t v125 = CollateClause;
  MEMORY[0x1F4188790](CollateClause);
  uint64_t v120 = (uint64_t)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_CollateClause?, PgQuery_CollateClause?));
  MEMORY[0x1F4188790](v123);
  uint64_t v127 = (uint64_t)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CollateClause?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v121 = (uint64_t)&v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v126 = (uint64_t)&v106 - v23;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v24 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v122 = (uint64_t)&v106 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v106 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  uint64_t v128 = (uint64_t)&v106 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)&v106 - v32;
  Domainuint64_t Stmt = type metadata accessor for PgQuery_CreateDomainStmt(0);
  uint64_t v35 = a1;
  uint64_t v36 = *(int *)(DomainStmt + 20);
  uint64_t v37 = *(void *)(a1 + v36);
  uint64_t v38 = *(void *)(a2 + v36);
  if (v37 == v38) {
    goto LABEL_10;
  }
  uint64_t v107 = v35;
  uint64_t v108 = a2;
  uint64_t v109 = v9;
  uint64_t v111 = v4;
  uint64_t v112 = v7;
  uint64_t v39 = *(void *)(v37 + 16);
  uint64_t v40 = *(void *)(v38 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v41 = specialized static Array<A>.== infix(_:_:)(v39, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) == 0) {
    goto LABEL_29;
  }
  uint64_t v42 = v37;
  uint64_t v43 = v37
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  uint64_t v110 = v38;
  uint64_t v44 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  uint64_t v45 = (uint64_t)v33;
  outlined init with copy of PgQuery_Alias?(v44, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v46 = (uint64_t)&v28[*(int *)(v26 + 48)];
  outlined init with copy of PgQuery_Alias?(v43, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v33, v46, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  uint64_t v48 = TypeName;
  if (v47((uint64_t)v28, 1, TypeName) == 1)
  {
    int v49 = v47(v46, 1, v48);
    uint64_t v7 = v112;
    if (v49 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of AnyValue?(v45, &demangling cache variable for type metadata for PgQuery_TypeName?);
      uint64_t v50 = v111;
      goto LABEL_6;
    }
    uint64_t v66 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_27:
    outlined destroy of AnyValue?((uint64_t)v28, v66);
    uint64_t v69 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    uint64_t v70 = v45;
LABEL_28:
    outlined destroy of AnyValue?(v70, v69);
LABEL_29:
    swift_release();
    swift_release();
    goto LABEL_30;
  }
  uint64_t v64 = v128;
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v128, &demangling cache variable for type metadata for PgQuery_TypeName?);
  int v65 = v47(v46, 1, v48);
  uint64_t v7 = v112;
  if (v65 == 1)
  {
    uint64_t v66 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_26:
    outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_TypeName);
    goto LABEL_27;
  }
  uint64_t v67 = v122;
  outlined init with take of PgQuery_OidList(v46, v122, type metadata accessor for PgQuery_TypeName);
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)v64, *(void *)v67) & 1) == 0
    || *(_DWORD *)(v64 + 8) != *(_DWORD *)(v67 + 8)
    || *(unsigned __int8 *)(v64 + 12) != *(unsigned __int8 *)(v67 + 12)
    || *(unsigned __int8 *)(v64 + 13) != *(unsigned __int8 *)(v67 + 13)
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(v64 + 16), *(void *)(v67 + 16)) & 1) == 0
    || *(_DWORD *)(v64 + 24) != *(_DWORD *)(v67 + 24)
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(v64 + 32), *(void *)(v67 + 32)) & 1) == 0
    || *(_DWORD *)(v64 + 40) != *(_DWORD *)(v67 + 40))
  {
    outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_TypeName);
    uint64_t v66 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    goto LABEL_26;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v50 = v111;
  char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_TypeName);
  outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_TypeName);
  outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of AnyValue?(v45, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((v68 & 1) == 0) {
    goto LABEL_29;
  }
LABEL_6:
  uint64_t v51 = v42
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause;
  uint64_t v52 = v126;
  outlined init with copy of PgQuery_Alias?(v110+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, v126, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  uint64_t v53 = v127;
  uint64_t v54 = v127 + *(int *)(v123 + 48);
  outlined init with copy of PgQuery_Alias?(v51, v127, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  outlined init with copy of PgQuery_Alias?(v52, v54, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  uint64_t v55 = v125;
  uint64_t v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48);
  if (v56(v53, 1, v125) == 1)
  {
    if (v56(v54, 1, v55) == 1)
    {
      outlined destroy of AnyValue?(v53, &demangling cache variable for type metadata for PgQuery_CollateClause?);
      outlined destroy of AnyValue?(v52, &demangling cache variable for type metadata for PgQuery_CollateClause?);
      goto LABEL_9;
    }
    BOOL v73 = &demangling cache variable for type metadata for (PgQuery_CollateClause?, PgQuery_CollateClause?);
    goto LABEL_57;
  }
  uint64_t v72 = v121;
  outlined init with copy of PgQuery_Alias?(v53, v121, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  if (v56(v54, 1, v55) == 1)
  {
    BOOL v73 = &demangling cache variable for type metadata for (PgQuery_CollateClause?, PgQuery_CollateClause?);
LABEL_56:
    outlined destroy of PgQuery_Alias(v72, type metadata accessor for PgQuery_CollateClause);
LABEL_57:
    outlined destroy of AnyValue?(v53, v73);
    uint64_t v69 = &demangling cache variable for type metadata for PgQuery_CollateClause?;
    uint64_t v70 = v52;
    goto LABEL_28;
  }
  uint64_t v74 = v54;
  uint64_t v75 = v120;
  outlined init with take of PgQuery_OidList(v74, v120, type metadata accessor for PgQuery_CollateClause);
  uint64_t v76 = *(int *)(v55 + 20);
  uint64_t v77 = *(void *)(v72 + v76);
  uint64_t v78 = *(void *)(v75 + v76);
  if (v77 == v78) {
    goto LABEL_48;
  }
  uint64_t v79 = v77
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  uint64_t TypeName = *(void *)(v75 + v76);
  uint64_t v80 = v119;
  outlined init with copy of PgQuery_Alias?(v78+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v119, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v81 = v118;
  uint64_t v82 = v118 + *(int *)(v115 + 48);
  outlined init with copy of PgQuery_Alias?(v79, v118, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v80, v82, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v83 = v117;
  uint64_t v84 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  if (v84(v81, 1, v117) == 1)
  {
    int v85 = v84(v82, 1, v83);
    swift_retain();
    uint64_t v86 = TypeName;
    swift_retain();
    if (v85 == 1)
    {
      outlined destroy of AnyValue?(v81, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v119, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_45;
    }
    uint64_t v88 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    uint64_t v72 = v121;
    goto LABEL_53;
  }
  uint64_t v128 = v77;
  uint64_t v87 = v114;
  outlined init with copy of PgQuery_Alias?(v81, v114, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v84(v82, 1, v83) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v88 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_52:
    outlined destroy of PgQuery_Alias(v87, type metadata accessor for PgQuery_Node);
    uint64_t v72 = v121;
LABEL_53:
    outlined destroy of AnyValue?(v118, v88);
    outlined destroy of AnyValue?(v119, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_54;
  }
  uint64_t v89 = v82;
  uint64_t v90 = v83;
  uint64_t v91 = v113;
  outlined init with take of PgQuery_OidList(v89, v113, type metadata accessor for PgQuery_Node);
  uint64_t v92 = *(int *)(v90 + 20);
  uint64_t v93 = *(void *)(v87 + v92);
  uint64_t v94 = *(void *)(v91 + v92);
  swift_retain();
  swift_retain();
  if (v93 != v94)
  {
    swift_retain();
    swift_retain();
    BOOL v95 = closure #1 in static PgQuery_Node.== infix(_:_:)(v93, v94);
    swift_release();
    swift_release();
    if (!v95)
    {
      outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_Node);
      uint64_t v88 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_52;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v96 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v87, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v118, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v119, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v72 = v121;
  uint64_t v77 = v128;
  uint64_t v86 = TypeName;
  if ((v96 & 1) == 0)
  {
LABEL_54:
    swift_release();
    swift_release();
    uint64_t v75 = v120;
    goto LABEL_55;
  }
LABEL_45:
  uint64_t v97 = *(void *)(v77
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname);
  uint64_t v98 = *(void *)(v86
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v99 = specialized static Array<A>.== infix(_:_:)(v97, v98);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v99 & 1) == 0)
  {
    swift_release();
    swift_release();
    uint64_t v75 = v120;
    uint64_t v72 = v121;
LABEL_55:
    outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_CollateClause);
    BOOL v73 = &demangling cache variable for type metadata for PgQuery_CollateClause?;
    goto LABEL_56;
  }
  int v100 = *(_DWORD *)(v77
                   + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v101 = *(_DWORD *)(v86
                   + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  BOOL v102 = v100 == v101;
  uint64_t v75 = v120;
  uint64_t v72 = v121;
  if (!v102) {
    goto LABEL_55;
  }
LABEL_48:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v50 = v111;
  char v103 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v104 = v75;
  char v105 = v103;
  outlined destroy of PgQuery_Alias(v104, type metadata accessor for PgQuery_CollateClause);
  outlined destroy of PgQuery_Alias(v72, type metadata accessor for PgQuery_CollateClause);
  outlined destroy of AnyValue?(v53, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  outlined destroy of AnyValue?(v52, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  if ((v105 & 1) == 0) {
    goto LABEL_29;
  }
LABEL_9:
  uint64_t v57 = *(void *)(v42
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
  uint64_t v4 = v50;
  uint64_t v58 = *(void *)(v110
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v59 = specialized static Array<A>.== infix(_:_:)(v57, v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v9 = v109;
  a2 = v108;
  uint64_t v35 = v107;
  if ((v59 & 1) == 0)
  {
LABEL_30:
    char v62 = 0;
    return v62 & 1;
  }
LABEL_10:
  uint64_t v60 = v130;
  uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v130 + 16);
  v61(v9, v35, v4);
  v61(v7, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v63 = *(void (**)(char *, uint64_t))(v60 + 8);
  v63(v7, v4);
  v63(v9, v4);
  return v62 & 1;
}

uint64_t specialized static PgQuery_AlterRoleSetStmt.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v82 = a2;
  uint64_t v72 = type metadata accessor for UnknownStorage();
  uint64_t v70 = *(void *)(v72 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v72);
  uint64_t v69 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  char v68 = (char *)&v67 - v5;
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v74 = *(void *)(VariableSetStmt - 8);
  MEMORY[0x1F4188790](VariableSetStmt);
  uint64_t v67 = (uint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_VariableSetStmt?, PgQuery_VariableSetStmt?));
  MEMORY[0x1F4188790](v73);
  uint64_t v77 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v71 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v81 = (char *)&v67 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v75 = (uint64_t)&v67 - v13;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v78 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  uint64_t v18 = v17 - 8;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  uint64_t v27 = (char *)&v67 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v67 - v28;
  AlterRoleSetuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleSetStmt(0);
  uint64_t v31 = *(int *)(AlterRoleSetStmt + 24);
  uint64_t v80 = a1;
  outlined init with copy of PgQuery_Alias?((uint64_t)a1 + v31, (uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v79 = AlterRoleSetStmt;
  outlined init with copy of PgQuery_Alias?((uint64_t)v82 + *(int *)(AlterRoleSetStmt + 24), (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v32 = (uint64_t)&v20[*(int *)(v18 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v32, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v33((uint64_t)v20, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v33(v32, 1, RoleSpec) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      uint64_t v34 = (uint64_t)v81;
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v52 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    uint64_t v53 = (uint64_t)v20;
LABEL_49:
    outlined destroy of AnyValue?(v53, v52);
    goto LABEL_50;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v33(v32, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v24, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_13;
  }
  uint64_t v54 = v78;
  outlined init with take of PgQuery_OidList(v32, v78, type metadata accessor for PgQuery_RoleSpec);
  uint64_t v55 = *(void *)v24;
  uint64_t v56 = *(void *)v54;
  if (*(unsigned char *)(v54 + 8) == 1)
  {
    uint64_t v34 = (uint64_t)v81;
    switch(v56)
    {
      case 1:
        if (v55 != 1) {
          goto LABEL_47;
        }
        goto LABEL_19;
      case 2:
        if (v55 != 2) {
          goto LABEL_47;
        }
        goto LABEL_19;
      case 3:
        if (v55 != 3) {
          goto LABEL_47;
        }
        goto LABEL_19;
      case 4:
        if (v55 != 4) {
          goto LABEL_47;
        }
        goto LABEL_19;
      default:
        if (!v55) {
          goto LABEL_19;
        }
        goto LABEL_47;
    }
  }
  uint64_t v34 = (uint64_t)v81;
  if (v55 != v56)
  {
LABEL_47:
    uint64_t v63 = type metadata accessor for PgQuery_RoleSpec;
    outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_RoleSpec);
    uint64_t v64 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    uint64_t v65 = (uint64_t)v24;
    goto LABEL_48;
  }
LABEL_19:
  if ((*((void *)v24 + 2) != *(void *)(v54 + 16) || *((void *)v24 + 3) != *(void *)(v54 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *((_DWORD *)v24 + 8) != *(_DWORD *)(v54 + 32))
  {
    goto LABEL_47;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of PgQuery_Alias((uint64_t)v24, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((v57 & 1) == 0) {
    goto LABEL_50;
  }
LABEL_4:
  uint64_t v35 = v80;
  uint64_t v36 = v82;
  if (*v80 == *v82 && v80[1] == v82[1] || (char v37 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v38 = v79;
    uint64_t v39 = v75;
    outlined init with copy of PgQuery_Alias?((uint64_t)v35 + *(int *)(v79 + 28), v75, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v36 + *(int *)(v38 + 28), v34, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    uint64_t v20 = v77;
    uint64_t v40 = (uint64_t)&v77[*(int *)(v73 + 48)];
    outlined init with copy of PgQuery_Alias?(v39, (uint64_t)v77, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    outlined init with copy of PgQuery_Alias?(v34, v40, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    char v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
    uint64_t v42 = VariableSetStmt;
    if (v41((uint64_t)v20, 1, VariableSetStmt) == 1)
    {
      outlined destroy of AnyValue?(v34, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      if (v41(v40, 1, v42) == 1)
      {
        outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
LABEL_10:
        uint64_t v43 = v79;
        uint64_t v44 = (char *)v35 + *(int *)(v79 + 20);
        uint64_t v45 = v70;
        uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
        uint64_t v47 = v68;
        uint64_t v48 = v72;
        v46(v68, v44, v72);
        int v49 = (char *)v36 + *(int *)(v43 + 20);
        uint64_t v50 = v69;
        v46(v69, v49, v48);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v51 = *(void (**)(char *, uint64_t))(v45 + 8);
        v51(v50, v48);
        v51(v47, v48);
        return v37 & 1;
      }
      goto LABEL_27;
    }
    uint64_t v58 = v71;
    outlined init with copy of PgQuery_Alias?((uint64_t)v20, v71, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    if (v41(v40, 1, v42) == 1)
    {
      outlined destroy of AnyValue?(v34, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_VariableSetStmt);
LABEL_27:
      uint64_t v52 = &demangling cache variable for type metadata for (PgQuery_VariableSetStmt?, PgQuery_VariableSetStmt?);
      uint64_t v53 = (uint64_t)v20;
      goto LABEL_49;
    }
    uint64_t v59 = v67;
    outlined init with take of PgQuery_OidList(v40, v67, type metadata accessor for PgQuery_VariableSetStmt);
    uint64_t v60 = *(void *)v58;
    uint64_t v61 = *(void *)v59;
    if (*(unsigned char *)(v59 + 8) == 1)
    {
      switch(v61)
      {
        case 1:
          if (v60 != 1) {
            goto LABEL_63;
          }
          goto LABEL_33;
        case 2:
          if (v60 != 2) {
            goto LABEL_63;
          }
          goto LABEL_33;
        case 3:
          if (v60 != 3) {
            goto LABEL_63;
          }
          goto LABEL_33;
        case 4:
          if (v60 != 4) {
            goto LABEL_63;
          }
          goto LABEL_33;
        case 5:
          if (v60 != 5) {
            goto LABEL_63;
          }
          goto LABEL_33;
        case 6:
          if (v60 != 6) {
            goto LABEL_63;
          }
          goto LABEL_33;
        default:
          if (!v60) {
            goto LABEL_33;
          }
          goto LABEL_63;
      }
    }
    if (v60 == v61)
    {
LABEL_33:
      if ((*(void *)(v58 + 16) == *(void *)(v59 + 16) && *(void *)(v58 + 24) == *(void *)(v59 + 24)
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (specialized static Array<A>.== infix(_:_:)(*(void *)(v58 + 32), *(void *)(v59 + 32)) & 1) != 0
        && *(unsigned __int8 *)(v58 + 40) == *(unsigned __int8 *)(v59 + 40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_VariableSetStmt);
        outlined destroy of AnyValue?(v34, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_VariableSetStmt);
        outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        if (v62) {
          goto LABEL_10;
        }
LABEL_50:
        char v37 = 0;
        return v37 & 1;
      }
    }
LABEL_63:
    uint64_t v63 = type metadata accessor for PgQuery_VariableSetStmt;
    outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_VariableSetStmt);
    uint64_t v64 = &demangling cache variable for type metadata for PgQuery_VariableSetStmt?;
    outlined destroy of AnyValue?(v34, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    uint64_t v65 = v58;
LABEL_48:
    outlined destroy of PgQuery_Alias(v65, v63);
    uint64_t v53 = (uint64_t)v20;
    uint64_t v52 = v64;
    goto LABEL_49;
  }
  return v37 & 1;
}

uint64_t specialized static PgQuery_WithCheckOption.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v54 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v60 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v59 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v61 = (uint64_t)&v54 - v20;
  uint64_t v21 = type metadata accessor for PgQuery_WithCheckOption(0);
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = *(int *)(v21 + 20);
  uint64_t v25 = *(void **)(a1 + v24);
  uint64_t v26 = *(void *)(v23 + v24);
  if (v25 == (void *)v26)
  {
LABEL_36:
    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v49 = v23;
    v48(v10, v22, v4);
    v48(v8, v49, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v51 = v8;
    char v30 = v50;
    uint64_t v52 = *(void (**)(char *, uint64_t))(v5 + 8);
    v52(v51, v4);
    v52(v10, v4);
    return v30 & 1;
  }
  uint64_t v27 = v25[2];
  uint64_t v28 = *(void *)(v26 + 16);
  if (*(unsigned char *)(v26 + 24) == 1)
  {
    switch(v28)
    {
      case 1:
        if (v27 != 1) {
          goto LABEL_41;
        }
        goto LABEL_7;
      case 2:
        if (v27 != 2) {
          goto LABEL_41;
        }
        goto LABEL_7;
      case 3:
        if (v27 != 3) {
          goto LABEL_41;
        }
        goto LABEL_7;
      case 4:
        if (v27 != 4) {
          goto LABEL_41;
        }
        goto LABEL_7;
      default:
        if (!v27) {
          goto LABEL_7;
        }
        goto LABEL_41;
    }
  }
  if (v27 != v28) {
    goto LABEL_41;
  }
LABEL_7:
  uint64_t v56 = v22;
  uint64_t v57 = v23;
  uint64_t v58 = v8;
  BOOL v29 = v25[4] == *(void *)(v26 + 32) && v25[5] == *(void *)(v26 + 40);
  if (v29 || (char v30 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v31 = v25[6] == *(void *)(v26 + 48) && v25[7] == *(void *)(v26 + 56);
    if (v31 || (char v30 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v54 = v5;
      uint64_t v55 = v10;
      uint64_t v32 = (uint64_t)v25
          + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
      uint64_t v33 = v61;
      outlined init with copy of PgQuery_Alias?(v26+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v61, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v34 = (uint64_t)&v15[*(int *)(v13 + 48)];
      outlined init with copy of PgQuery_Alias?(v32, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined init with copy of PgQuery_Alias?(v33, v34, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
      if (v35((uint64_t)v15, 1, Node) == 1)
      {
        int v36 = v35(v34, 1, Node);
        swift_retain();
        swift_retain();
        uint64_t v10 = v55;
        if (v36 == 1)
        {
          outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
          goto LABEL_34;
        }
        uint64_t v38 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        outlined init with copy of PgQuery_Alias?((uint64_t)v15, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
        int v37 = v35(v34, 1, Node);
        uint64_t v10 = v55;
        if (v37 == 1)
        {
          swift_retain();
          swift_retain();
          uint64_t v38 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        }
        else
        {
          uint64_t v39 = v34;
          uint64_t v40 = v59;
          outlined init with take of PgQuery_OidList(v39, v59, type metadata accessor for PgQuery_Node);
          uint64_t v41 = *(int *)(Node + 20);
          uint64_t v42 = *(void *)&v19[v41];
          uint64_t v43 = *(void *)(v40 + v41);
          swift_retain();
          swift_retain();
          if (v42 == v43
            || (swift_retain(),
                swift_retain(),
                BOOL v44 = closure #1 in static PgQuery_Node.== infix(_:_:)(v42, v43),
                swift_release(),
                swift_release(),
                v44))
          {
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
            char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_Node);
            outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v45)
            {
LABEL_34:
              int v46 = *((unsigned __int8 *)v25
                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cascaded);
              int v47 = *(unsigned __int8 *)(v26
                                       + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cascaded);
              swift_release();
              swift_release();
              BOOL v29 = v46 == v47;
              uint64_t v5 = v54;
              uint64_t v23 = v57;
              uint64_t v8 = v58;
              uint64_t v22 = v56;
              if (!v29) {
                goto LABEL_41;
              }
              goto LABEL_36;
            }
LABEL_40:
            swift_release();
            swift_release();
LABEL_41:
            char v30 = 0;
            return v30 & 1;
          }
          outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
          uint64_t v38 = &demangling cache variable for type metadata for PgQuery_Node?;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_Node);
      }
      outlined destroy of AnyValue?((uint64_t)v15, v38);
      outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_40;
    }
  }
  return v30 & 1;
}

uint64_t specialized static PgQuery_TransactionStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 != 1) {
          goto LABEL_34;
        }
        goto LABEL_6;
      case 2:
        if (v11 != 2) {
          goto LABEL_34;
        }
        goto LABEL_6;
      case 3:
        if (v11 != 3) {
          goto LABEL_34;
        }
        goto LABEL_6;
      case 4:
        if (v11 != 4) {
          goto LABEL_34;
        }
        goto LABEL_6;
      case 5:
        if (v11 != 5) {
          goto LABEL_34;
        }
        goto LABEL_6;
      case 6:
        if (v11 != 6) {
          goto LABEL_34;
        }
        goto LABEL_6;
      case 7:
        if (v11 != 7) {
          goto LABEL_34;
        }
        goto LABEL_6;
      case 8:
        if (v11 != 8) {
          goto LABEL_34;
        }
        goto LABEL_6;
      case 9:
        if (v11 != 9) {
          goto LABEL_34;
        }
        goto LABEL_6;
      case 10:
        if (v11 != 10) {
          goto LABEL_34;
        }
        goto LABEL_6;
      default:
        if (!v11) {
          goto LABEL_6;
        }
        goto LABEL_34;
    }
  }
  if (v11 != v12) {
    goto LABEL_34;
  }
LABEL_6:
  if ((specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]) & 1) == 0)
  {
LABEL_34:
    char v13 = 0;
    return v13 & 1;
  }
  if (a1[3] == a2[3] && a1[4] == a2[4] || (char v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (a1[5] == a2[5] && a1[6] == a2[6] || (char v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*((unsigned __int8 *)a1 + 56) == *((unsigned __int8 *)a2 + 56))
      {
        Transactionuint64_t Stmt = type metadata accessor for PgQuery_TransactionStmt(0);
        uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
        v15(v10, (char *)a1 + *(int *)(TransactionStmt + 36), v4);
        v15(v8, (char *)a2 + *(int *)(TransactionStmt + 36), v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
        v16(v8, v4);
        v16(v10, v4);
        return v13 & 1;
      }
      goto LABEL_34;
    }
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_TableLikeClause.== infix(_:_:)(char *a1, _DWORD *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v47 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  BOOL v44 = (char *)&v43 - v7;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v9 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  char v50 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v43 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v43 - v22;
  uint64_t TableLikeClause = type metadata accessor for PgQuery_TableLikeClause(0);
  uint64_t v25 = *(int *)(TableLikeClause + 28);
  uint64_t v48 = a1;
  uint64_t v26 = (uint64_t)&a1[v25];
  uint64_t v27 = TableLikeClause;
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v28 = *(int *)(v27 + 28);
  uint64_t v49 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  char v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, RangeVar) != 1)
  {
    uint64_t v31 = (uint64_t)v50;
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v30(v29, 1, RangeVar) != 1)
    {
      outlined init with take of PgQuery_OidList(v29, v31, type metadata accessor for PgQuery_RangeVar);
      char v32 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v18, v31);
      outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if (v32) {
        goto LABEL_8;
      }
LABEL_11:
      char v40 = 0;
      return v40 & 1;
    }
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    goto LABEL_11;
  }
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v30(v29, 1, RangeVar) != 1) {
    goto LABEL_6;
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_8:
  uint64_t v33 = v49;
  if (*(_DWORD *)v48 != *v49 || *((_DWORD *)v48 + 1) != v49[1]) {
    goto LABEL_11;
  }
  uint64_t v35 = v46;
  uint64_t v34 = v47;
  int v36 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  int v37 = v44;
  v36(v44, &v48[*(int *)(v27 + 24)], v47);
  uint64_t v38 = (char *)v33 + *(int *)(v27 + 24);
  uint64_t v39 = v45;
  v36(v45, v38, v34);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v35 + 8);
  v41(v39, v34);
  v41(v37, v34);
  return v40 & 1;
}

uint64_t specialized static PgQuery_SubscriptingRef.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v122 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v104 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  uint64_t v11 = MEMORY[0x1F4188790](Node);
  uint64_t v112 = (uint64_t)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v114 = (uint64_t)&v104 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v120 = (uint64_t)&v104 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v115 = (uint64_t)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v118 = (uint64_t)&v104 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v104 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v113 = (uint64_t)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v116 = (uint64_t)&v104 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v117 = (uint64_t)&v104 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v119 = (uint64_t)&v104 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v123 = (uint64_t)&v104 - v33;
  MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v104 - v34;
  uint64_t SubscriptingRef = type metadata accessor for PgQuery_SubscriptingRef(0);
  uint64_t v37 = a1;
  uint64_t v38 = *(int *)(SubscriptingRef + 20);
  uint64_t v39 = *(void *)(a1 + v38);
  uint64_t v40 = *(void *)(a2 + v38);
  if (v39 == v40) {
    goto LABEL_40;
  }
  uint64_t v106 = v37;
  uint64_t v107 = a2;
  char v105 = v9;
  uint64_t v108 = v7;
  uint64_t v110 = v4;
  uint64_t v41 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v109 = v16;
  uint64_t v42 = (uint64_t)&v22[*(int *)(v16 + 48)];
  outlined init with copy of PgQuery_Alias?(v41, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v121 = v35;
  outlined init with copy of PgQuery_Alias?((uint64_t)v35, v42, &demangling cache variable for type metadata for PgQuery_Node?);
  char v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  uint64_t v44 = v10 + 48;
  uint64_t v43 = v45;
  uint64_t v46 = Node;
  uint64_t v47 = (uint64_t)v22;
  if (v45((uint64_t)v22, 1, Node) == 1)
  {
    unsigned int v48 = v43(v42, 1, v46);
    swift_retain();
    uint64_t v49 = v40;
    swift_retain();
    uint64_t v50 = v39;
    if (v48 == 1)
    {
      outlined destroy of AnyValue?(v47, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v121, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_11;
    }
    uint64_t v52 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    uint64_t v53 = (uint64_t)v121;
LABEL_22:
    outlined destroy of AnyValue?(v47, v52);
    outlined destroy of AnyValue?(v53, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  uint64_t v49 = v40;
  uint64_t v111 = v39;
  uint64_t v51 = v123;
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, v123, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v43(v42, 1, v46) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v52 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_21:
    uint64_t v53 = (uint64_t)v121;
    outlined destroy of PgQuery_Alias(v123, type metadata accessor for PgQuery_Node);
    goto LABEL_22;
  }
  uint64_t v104 = v44;
  uint64_t v54 = v120;
  outlined init with take of PgQuery_OidList(v42, v120, type metadata accessor for PgQuery_Node);
  uint64_t v55 = v46;
  uint64_t v56 = *(int *)(v46 + 20);
  uint64_t v57 = *(void *)(v51 + v56);
  uint64_t v58 = *(void *)(v54 + v56);
  swift_retain();
  swift_retain();
  if (v57 != v58)
  {
    swift_retain();
    swift_retain();
    BOOL v59 = closure #1 in static PgQuery_Node.== infix(_:_:)(v57, v58);
    swift_release();
    swift_release();
    if (!v59)
    {
      outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_Node);
      uint64_t v52 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_21;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v60 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v47, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v121, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v50 = v111;
  uint64_t v46 = v55;
  if ((v60 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_11:
  if (*(_DWORD *)(v50
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype) != *(_DWORD *)(v49 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype))
    goto LABEL_23;
  if (*(_DWORD *)(v50
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype) != *(_DWORD *)(v49 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype))
    goto LABEL_23;
  if (*(_DWORD *)(v50
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod) != *(_DWORD *)(v49 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod))
    goto LABEL_23;
  if (*(_DWORD *)(v50
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollid) != *(_DWORD *)(v49 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollid))
    goto LABEL_23;
  uint64_t v61 = v43;
  uint64_t v62 = *(void *)(v50
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr);
  uint64_t v63 = *(void *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v64 = specialized static Array<A>.== infix(_:_:)(v62, v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v64 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v65 = *(void *)(v50
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr);
  uint64_t v66 = *(void *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v67 = specialized static Array<A>.== infix(_:_:)(v65, v66);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v67 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v68 = v50
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr;
  uint64_t Node = v49;
  uint64_t v69 = v119;
  outlined init with copy of PgQuery_Alias?(v49+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr, v119, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v70 = v109;
  uint64_t v71 = v118;
  uint64_t v72 = v118 + *(int *)(v109 + 48);
  outlined init with copy of PgQuery_Alias?(v68, v118, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v69, v72, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v61(v71, 1, v46) != 1)
  {
    uint64_t v74 = v117;
    outlined init with copy of PgQuery_Alias?(v71, v117, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v61(v72, 1, v46) == 1)
    {
      uint64_t v75 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v76 = v114;
      outlined init with take of PgQuery_OidList(v72, v114, type metadata accessor for PgQuery_Node);
      uint64_t v77 = *(int *)(v46 + 20);
      uint64_t v78 = *(void *)(v74 + v77);
      uint64_t v79 = *(void *)(v76 + v77);
      if (v78 == v79
        || (swift_retain(),
            swift_retain(),
            BOOL v80 = closure #1 in static PgQuery_Node.== infix(_:_:)(v78, v79),
            swift_release(),
            swift_release(),
            v80))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v81 = v117;
        uint64_t v82 = v76;
        char v83 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v82, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v71, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v119, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v83 & 1) == 0) {
          goto LABEL_23;
        }
        goto LABEL_30;
      }
      outlined destroy of PgQuery_Alias(v76, type metadata accessor for PgQuery_Node);
      uint64_t v75 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v74 = v117;
    }
    outlined destroy of PgQuery_Alias(v74, type metadata accessor for PgQuery_Node);
LABEL_44:
    outlined destroy of AnyValue?(v71, v75);
    uint64_t v103 = v119;
LABEL_48:
    outlined destroy of AnyValue?(v103, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  if (v61(v72, 1, v46) != 1)
  {
    uint64_t v75 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_44;
  }
  outlined destroy of AnyValue?(v71, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v119, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_30:
  uint64_t v84 = v50
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr;
  uint64_t v85 = v116;
  outlined init with copy of PgQuery_Alias?(Node+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr, v116, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v86 = v115 + *(int *)(v70 + 48);
  uint64_t v87 = v84;
  uint64_t v88 = v115;
  outlined init with copy of PgQuery_Alias?(v87, v115, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v85, v86, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v61(v88, 1, v46) == 1)
  {
    if (v61(v86, 1, v46) == 1)
    {
      outlined destroy of AnyValue?(v88, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v116, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_39:
      swift_release();
      swift_release();
      uint64_t v4 = v110;
      uint64_t v9 = v105;
      uint64_t v37 = v106;
      a2 = v107;
      uint64_t v7 = v108;
LABEL_40:
      uint64_t v99 = v122;
      int v100 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
      v100(v9, v37, v4);
      v100(v7, a2, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v101 = *(void (**)(char *, uint64_t))(v99 + 8);
      v101(v7, v4);
      v101(v9, v4);
      return v73 & 1;
    }
    uint64_t v90 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_47;
  }
  uint64_t v89 = v113;
  outlined init with copy of PgQuery_Alias?(v88, v113, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v61(v86, 1, v46) == 1)
  {
    uint64_t v90 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_46:
    outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_Node);
LABEL_47:
    outlined destroy of AnyValue?(v88, v90);
    uint64_t v103 = v116;
    goto LABEL_48;
  }
  uint64_t v91 = v112;
  outlined init with take of PgQuery_OidList(v86, v112, type metadata accessor for PgQuery_Node);
  uint64_t v92 = *(int *)(v46 + 20);
  uint64_t v93 = *(void *)(v89 + v92);
  uint64_t v94 = *(void *)(v91 + v92);
  if (v93 != v94)
  {
    swift_retain();
    swift_retain();
    BOOL v95 = closure #1 in static PgQuery_Node.== infix(_:_:)(v93, v94);
    swift_release();
    swift_release();
    if (!v95)
    {
      outlined destroy of PgQuery_Alias(v112, type metadata accessor for PgQuery_Node);
      uint64_t v90 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v88 = v115;
      uint64_t v89 = v113;
      goto LABEL_46;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v96 = v112;
  uint64_t v97 = v113;
  char v98 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v96, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v97, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v115, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v116, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v98) {
    goto LABEL_39;
  }
LABEL_23:
  swift_release();
  swift_release();
  char v73 = 0;
  return v73 & 1;
}

uint64_t specialized static PgQuery_SortGroupClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12)
    && *(unsigned __int8 *)(a1 + 13) == *(unsigned __int8 *)(a2 + 13))
  {
    uint64_t SortGroupClause = type metadata accessor for PgQuery_SortGroupClause(0);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, a1 + *(int *)(SortGroupClause + 36), v4);
    v14(v8, a2 + *(int *)(SortGroupClause + 36), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t specialized static PgQuery_InlineCodeBlock.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20)
      && *(unsigned __int8 *)(a1 + 21) == *(unsigned __int8 *)(a2 + 21))
    {
      uint64_t InlineCodeBlock = type metadata accessor for PgQuery_InlineCodeBlock(0);
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, a1 + *(int *)(InlineCodeBlock + 32), v4);
      v15(v8, a2 + *(int *)(InlineCodeBlock + 32), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateStatsStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 8), *(void *)(a2 + 8)) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a2 + 16)) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a2 + 24)) & 1) == 0)
  {
LABEL_9:
    char v11 = 0;
    return v11 & 1;
  }
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)
    || (char v11 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
    {
      Statsuint64_t Stmt = type metadata accessor for PgQuery_CreateStatsStmt(0);
      uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v14(v10, a1 + *(int *)(StatsStmt + 40), v4);
      v14(v8, a2 + *(int *)(StatsStmt + 40), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
      return v11 & 1;
    }
    goto LABEL_9;
  }
  return v11 & 1;
}

uint64_t specialized static PgQuery_CreatePLangStmt.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  if (*a1 != *a2)
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }
  BOOL v11 = *((void *)a1 + 1) == *((void *)a2 + 1) && *((void *)a1 + 2) == *((void *)a2 + 2);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 3), *((void *)a2 + 3)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 4), *((void *)a2 + 4)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 5), *((void *)a2 + 5)) & 1) != 0
      && a1[48] == a2[48])
    {
      PLanguint64_t Stmt = type metadata accessor for PgQuery_CreatePLangStmt(0);
      uint64_t v15 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
      v15(v10, &a1[*(int *)(PLangStmt + 40)], v4);
      v15(v8, &a2[*(int *)(PLangStmt + 40)], v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CommonTableExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v68 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v73 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v71 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v74 = (uint64_t)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v72 = (uint64_t)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v75 = (uint64_t)&v68 - v18;
  uint64_t CommonTableExpr = type metadata accessor for PgQuery_CommonTableExpr(0);
  uint64_t v20 = a1;
  uint64_t v21 = *(int *)(CommonTableExpr + 20);
  uint64_t v22 = *(void **)(a1 + v21);
  uint64_t v23 = *(void *)(a2 + v21);
  if (v22 == (void *)v23) {
    goto LABEL_36;
  }
  uint64_t v70 = a1;
  BOOL v24 = v22[2] == *(void *)(v23 + 16) && v22[3] == *(void *)(v23 + 24);
  if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_retain();
    swift_retain();
    goto LABEL_40;
  }
  uint64_t v68 = a2;
  uint64_t v69 = v5;
  uint64_t v25 = v10;
  uint64_t v26 = v8;
  uint64_t v27 = v22[4];
  uint64_t v28 = *(void *)(v23 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v29 = specialized static Array<A>.== infix(_:_:)(v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0) {
    goto LABEL_40;
  }
  uint64_t v30 = v22[5];
  uint64_t v31 = *(void *)(v23 + 40);
  if (*(unsigned char *)(v23 + 48) == 1)
  {
    uint64_t v8 = v26;
    uint64_t v10 = v25;
    switch(v31)
    {
      case 1:
        if (v30 != 1) {
          goto LABEL_40;
        }
        goto LABEL_20;
      case 2:
        if (v30 != 2) {
          goto LABEL_40;
        }
        goto LABEL_20;
      case 3:
        if (v30 == 3) {
          goto LABEL_20;
        }
        goto LABEL_40;
      default:
        if (!v30) {
          goto LABEL_20;
        }
        goto LABEL_40;
    }
  }
  uint64_t v8 = v26;
  uint64_t v10 = v25;
  if (v30 != v31) {
    goto LABEL_40;
  }
LABEL_20:
  uint64_t v32 = (uint64_t)v22
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery;
  uint64_t v33 = v75;
  outlined init with copy of PgQuery_Alias?(v23+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery, v75, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v34 = v74;
  uint64_t v35 = v74 + *(int *)(v13 + 48);
  outlined init with copy of PgQuery_Alias?(v32, v74, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v33, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  int v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  if (v36(v34, 1, Node) != 1)
  {
    uint64_t v38 = v34;
    uint64_t v39 = v72;
    outlined init with copy of PgQuery_Alias?(v38, v72, &demangling cache variable for type metadata for PgQuery_Node?);
    int v40 = v36(v35, 1, Node);
    uint64_t v5 = v69;
    if (v40 == 1)
    {
      uint64_t v41 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_38:
      outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
      uint64_t v34 = v74;
      goto LABEL_39;
    }
    uint64_t v42 = v35;
    uint64_t v43 = v39;
    uint64_t v44 = v71;
    outlined init with take of PgQuery_OidList(v42, v71, type metadata accessor for PgQuery_Node);
    uint64_t v45 = *(int *)(Node + 20);
    uint64_t v46 = *(void *)(v43 + v45);
    uint64_t v47 = *(void *)(v44 + v45);
    if (v46 != v47)
    {
      swift_retain();
      swift_retain();
      BOOL v48 = closure #1 in static PgQuery_Node.== infix(_:_:)(v46, v47);
      swift_release();
      swift_release();
      if (!v48)
      {
        outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
        uint64_t v41 = &demangling cache variable for type metadata for PgQuery_Node?;
        uint64_t v39 = v72;
        goto LABEL_38;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    uint64_t v49 = v72;
    char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Node);
    outlined destroy of AnyValue?(v74, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of AnyValue?(v75, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v50) {
      goto LABEL_29;
    }
LABEL_40:
    swift_release();
    swift_release();
    goto LABEL_41;
  }
  int v37 = v36(v35, 1, Node);
  uint64_t v5 = v69;
  if (v37 != 1)
  {
    uint64_t v41 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_39:
    outlined destroy of AnyValue?(v34, v41);
    outlined destroy of AnyValue?(v75, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_40;
  }
  outlined destroy of AnyValue?(v34, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v75, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_29:
  if (*(_DWORD *)((char *)v22
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) != *(_DWORD *)(v23 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
    goto LABEL_40;
  if (*((unsigned __int8 *)v22
       + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive) != *(unsigned __int8 *)(v23 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive))
    goto LABEL_40;
  if (*(_DWORD *)((char *)v22
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount) != *(_DWORD *)(v23 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount))
    goto LABEL_40;
  uint64_t v51 = *(void *)((char *)v22
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames);
  uint64_t v52 = *(void *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v53 = specialized static Array<A>.== infix(_:_:)(v51, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v53 & 1) == 0) {
    goto LABEL_40;
  }
  uint64_t v54 = *(void *)((char *)v22
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes);
  uint64_t v55 = *(void *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v56 = specialized static Array<A>.== infix(_:_:)(v54, v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v56 & 1) == 0) {
    goto LABEL_40;
  }
  uint64_t v57 = *(void *)((char *)v22
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods);
  uint64_t v58 = *(void *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v59 = specialized static Array<A>.== infix(_:_:)(v57, v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v59 & 1) == 0) {
    goto LABEL_40;
  }
  uint64_t v60 = *(void *)((char *)v22
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations);
  uint64_t v61 = *(void *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v62 = specialized static Array<A>.== infix(_:_:)(v60, v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  a2 = v68;
  uint64_t v20 = v70;
  if ((v62 & 1) == 0)
  {
LABEL_41:
    char v65 = 0;
    return v65 & 1;
  }
LABEL_36:
  uint64_t v63 = a2;
  char v64 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v64(v10, v20, v4);
  v64(v8, v63, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v66 = *(void (**)(char *, uint64_t))(v5 + 8);
  v66(v8, v4);
  v66(v10, v4);
  return v65 & 1;
}

uint64_t specialized static PgQuery_ArrayCoerceExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v126 = a1;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v108 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  uint64_t v12 = MEMORY[0x1F4188790](Node);
  uint64_t v115 = (uint64_t)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v117 = (uint64_t)&v108 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v122 = (uint64_t)&v108 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v118 = (uint64_t)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v121 = (uint64_t)&v108 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v108 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v116 = (uint64_t)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v119 = (uint64_t)&v108 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v120 = (uint64_t)&v108 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v123 = (uint64_t)&v108 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v124 = (uint64_t)&v108 - v34;
  MEMORY[0x1F4188790](v33);
  int v36 = (char *)&v108 - v35;
  uint64_t ArrayCoerceExpr = type metadata accessor for PgQuery_ArrayCoerceExpr(0);
  uint64_t v38 = v4;
  uint64_t v39 = *(int *)(ArrayCoerceExpr + 20);
  uint64_t v40 = *(void *)(v126 + v39);
  uint64_t v41 = *(void *)(a2 + v39);
  uint64_t v42 = a2;
  if (v40 == v41)
  {
LABEL_56:
    uint64_t v103 = v38;
    uint64_t v104 = *(void (**)(char *))(v38 + 16);
    uint64_t v105 = v42;
    v104(v9);
    ((void (*)(char *, uint64_t, uint64_t))v104)(v7, v105, v3);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v100 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v106 = *(void (**)(char *, uint64_t))(v103 + 8);
    v106(v7, v3);
    v106(v9, v3);
    return v100 & 1;
  }
  uint64_t v110 = a2;
  uint64_t v111 = v9;
  uint64_t v109 = v7;
  uint64_t v112 = v38;
  uint64_t v114 = v3;
  uint64_t v43 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v44 = v41;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v113 = v17;
  uint64_t v45 = v40;
  uint64_t v46 = (uint64_t)&v23[*(int *)(v17 + 48)];
  outlined init with copy of PgQuery_Alias?(v43, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v36, v46, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  unsigned int v48 = v47(v23, 1, Node);
  uint64_t v49 = (uint64_t)v23;
  uint64_t v125 = v44;
  if (v48 == 1)
  {
    uint64_t v50 = Node;
    unsigned int v51 = v47((char *)v46, 1, Node);
    swift_retain();
    swift_retain();
    if (v51 == 1)
    {
      outlined destroy of AnyValue?(v49, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v3 = v114;
      goto LABEL_11;
    }
    char v53 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_25:
    outlined destroy of AnyValue?(v49, v53);
    outlined destroy of AnyValue?((uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_47;
  }
  uint64_t v52 = v124;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v124, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v47((char *)v46, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    char v53 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_24:
    outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
    goto LABEL_25;
  }
  uint64_t v108 = v23;
  uint64_t v54 = v122;
  outlined init with take of PgQuery_OidList(v46, v122, type metadata accessor for PgQuery_Node);
  uint64_t v50 = Node;
  uint64_t v55 = *(int *)(Node + 20);
  uint64_t v56 = *(void *)(v52 + v55);
  uint64_t v57 = *(void *)(v54 + v55);
  swift_retain();
  swift_retain();
  if (v56 != v57)
  {
    swift_retain();
    swift_retain();
    BOOL v58 = closure #1 in static PgQuery_Node.== infix(_:_:)(v56, v57);
    swift_release();
    swift_release();
    if (!v58)
    {
      outlined destroy of PgQuery_Alias(v122, type metadata accessor for PgQuery_Node);
      char v53 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v49 = (uint64_t)v108;
      uint64_t v52 = v124;
      goto LABEL_24;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v59 = v124;
  uint64_t v60 = v122;
  uint64_t v61 = v114;
  char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
  uint64_t v63 = v59;
  uint64_t v3 = v61;
  outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v108, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v62 & 1) == 0) {
    goto LABEL_47;
  }
LABEL_11:
  uint64_t v124 = v45;
  uint64_t v64 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  char v65 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v47;
  uint64_t v66 = v123;
  outlined init with copy of PgQuery_Alias?(v125+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v123, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v67 = v113;
  uint64_t v68 = v121;
  uint64_t v69 = v121 + *(int *)(v113 + 48);
  outlined init with copy of PgQuery_Alias?(v64, v121, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v66, v69, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v70 = v50;
  if (v65(v68, 1, v50) == 1)
  {
    uint64_t v71 = v65;
    if (v65(v69, 1, v50) == 1)
    {
      uint64_t v72 = v50;
      outlined destroy of AnyValue?(v68, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v123, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v73 = v124;
      goto LABEL_20;
    }
    uint64_t v75 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_42:
    outlined destroy of AnyValue?(v68, v75);
    uint64_t v99 = v123;
LABEL_46:
    outlined destroy of AnyValue?(v99, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_47;
  }
  uint64_t v74 = v120;
  outlined init with copy of PgQuery_Alias?(v68, v120, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v71 = v65;
  if (v65(v69, 1, v50) == 1)
  {
    uint64_t v75 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_41:
    outlined destroy of PgQuery_Alias(v74, type metadata accessor for PgQuery_Node);
    goto LABEL_42;
  }
  uint64_t v76 = v117;
  outlined init with take of PgQuery_OidList(v69, v117, type metadata accessor for PgQuery_Node);
  uint64_t v72 = v70;
  uint64_t v77 = *(int *)(v70 + 20);
  uint64_t v78 = *(void *)(v74 + v77);
  uint64_t v79 = *(void *)(v76 + v77);
  if (v78 != v79)
  {
    swift_retain();
    swift_retain();
    BOOL v80 = closure #1 in static PgQuery_Node.== infix(_:_:)(v78, v79);
    swift_release();
    swift_release();
    if (!v80)
    {
      outlined destroy of PgQuery_Alias(v76, type metadata accessor for PgQuery_Node);
      uint64_t v75 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v74 = v120;
      goto LABEL_41;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v81 = v120;
  char v82 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v76, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v68, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v123, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v73 = v124;
  if ((v82 & 1) == 0) {
    goto LABEL_47;
  }
LABEL_20:
  uint64_t v83 = v73
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elemexpr;
  uint64_t v84 = v119;
  outlined init with copy of PgQuery_Alias?(v125+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elemexpr, v119, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v85 = *(int *)(v67 + 48);
  uint64_t v86 = v118;
  uint64_t v87 = v118 + v85;
  outlined init with copy of PgQuery_Alias?(v83, v118, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v84, v87, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v71(v86, 1, v72) != 1)
  {
    uint64_t v89 = v116;
    outlined init with copy of PgQuery_Alias?(v86, v116, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v71(v87, 1, v72) == 1)
    {
      uint64_t v90 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v91 = v115;
      outlined init with take of PgQuery_OidList(v87, v115, type metadata accessor for PgQuery_Node);
      uint64_t v92 = *(int *)(v72 + 20);
      uint64_t v93 = *(void *)(v89 + v92);
      uint64_t v94 = *(void *)(v91 + v92);
      if (v93 == v94
        || (swift_retain(),
            swift_retain(),
            BOOL v95 = closure #1 in static PgQuery_Node.== infix(_:_:)(v93, v94),
            swift_release(),
            swift_release(),
            v95))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v96 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v118, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v119, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v88 = v124;
        if ((v96 & 1) == 0) {
          goto LABEL_47;
        }
        goto LABEL_33;
      }
      outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_Node);
      uint64_t v90 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v86 = v118;
    }
    outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_Node);
    goto LABEL_45;
  }
  if (v71(v87, 1, v72) != 1)
  {
    uint64_t v90 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_45:
    outlined destroy of AnyValue?(v86, v90);
    uint64_t v99 = v119;
    goto LABEL_46;
  }
  outlined destroy of AnyValue?(v86, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v119, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v88 = v124;
LABEL_33:
  if (*(_DWORD *)(v88
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) == *(_DWORD *)(v125 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
    && *(_DWORD *)(v88
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) == *(_DWORD *)(v125 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod)
    && *(_DWORD *)(v88
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) == *(_DWORD *)(v125 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid))
  {
    uint64_t v97 = *(void *)(v88
                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat);
    uint64_t v98 = *(void *)(v125
                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat);
    if (*(unsigned char *)(v125
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat
                  + 8) == 1)
    {
      switch(v98)
      {
        case 1:
          if (v97 == 1) {
            goto LABEL_55;
          }
          goto LABEL_47;
        case 2:
          if (v97 == 2) {
            goto LABEL_55;
          }
          goto LABEL_47;
        case 3:
          if (v97 == 3) {
            goto LABEL_55;
          }
          goto LABEL_47;
        default:
          if (!v97) {
            goto LABEL_55;
          }
          goto LABEL_47;
      }
    }
    if (v97 == v98)
    {
LABEL_55:
      int v101 = *(_DWORD *)(v88
                       + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      int v102 = *(_DWORD *)(v125
                       + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      uint64_t v9 = v111;
      uint64_t v38 = v112;
      uint64_t v7 = v109;
      uint64_t v42 = v110;
      if (v101 != v102)
      {
        char v100 = 0;
        return v100 & 1;
      }
      goto LABEL_56;
    }
  }
LABEL_47:
  swift_release();
  swift_release();
  char v100 = 0;
  return v100 & 1;
}

uint64_t specialized static PgQuery_VariableSetStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 != 1) {
          goto LABEL_25;
        }
        goto LABEL_6;
      case 2:
        if (v11 != 2) {
          goto LABEL_25;
        }
        goto LABEL_6;
      case 3:
        if (v11 != 3) {
          goto LABEL_25;
        }
        goto LABEL_6;
      case 4:
        if (v11 != 4) {
          goto LABEL_25;
        }
        goto LABEL_6;
      case 5:
        if (v11 != 5) {
          goto LABEL_25;
        }
        goto LABEL_6;
      case 6:
        if (v11 != 6) {
          goto LABEL_25;
        }
        goto LABEL_6;
      default:
        if (!v11) {
          goto LABEL_6;
        }
        goto LABEL_25;
    }
  }
  if (v11 != v12) {
    goto LABEL_25;
  }
LABEL_6:
  BOOL v13 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(a1[4], a2[4]) & 1) != 0
      && *((unsigned __int8 *)a1 + 40) == *((unsigned __int8 *)a2 + 40))
    {
      VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, (char *)a1 + *(int *)(VariableSetStmt + 32), v4);
      v16(v8, (char *)a2 + *(int *)(VariableSetStmt + 32), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
      return v14 & 1;
    }
LABEL_25:
    char v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_AlterSystemStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v42 = (char *)&v39 - v7;
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v9 = *(void *)(VariableSetStmt - 8);
  MEMORY[0x1F4188790](VariableSetStmt);
  uint64_t v39 = (uint64_t *)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_VariableSetStmt?, PgQuery_VariableSetStmt?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  char v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v46 = (uint64_t *)((char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v39 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v39 - v21;
  AlterSystemuint64_t Stmt = type metadata accessor for PgQuery_AlterSystemStmt(0);
  uint64_t v24 = *(int *)(AlterSystemStmt + 20);
  uint64_t v40 = a1;
  outlined init with copy of PgQuery_Alias?(a1 + v24, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  uint64_t v25 = *(int *)(AlterSystemStmt + 20);
  uint64_t v41 = a2;
  outlined init with copy of PgQuery_Alias?(a2 + v25, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v26, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v14, 1, VariableSetStmt) != 1)
  {
    uint64_t v28 = v46;
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v46, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    if (v27(v26, 1, VariableSetStmt) != 1)
    {
      uint64_t v29 = v39;
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v39, type metadata accessor for PgQuery_VariableSetStmt);
      char v30 = specialized static PgQuery_VariableSetStmt.== infix(_:_:)(v28, v29);
      outlined destroy of PgQuery_Alias((uint64_t)v29, type metadata accessor for PgQuery_VariableSetStmt);
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined destroy of PgQuery_Alias((uint64_t)v28, type metadata accessor for PgQuery_VariableSetStmt);
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      if (v30) {
        goto LABEL_8;
      }
LABEL_9:
      char v36 = 0;
      return v36 & 1;
    }
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    outlined destroy of PgQuery_Alias((uint64_t)v28, type metadata accessor for PgQuery_VariableSetStmt);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_VariableSetStmt?, PgQuery_VariableSetStmt?));
    goto LABEL_9;
  }
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  if (v27(v26, 1, VariableSetStmt) != 1) {
    goto LABEL_6;
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
LABEL_8:
  uint64_t v32 = v44;
  uint64_t v31 = v45;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  uint64_t v34 = v42;
  v33(v42, v40, v45);
  uint64_t v35 = v43;
  v33(v43, v41, v31);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v37 = *(void (**)(char *, uint64_t))(v32 + 8);
  v37(v35, v31);
  v37(v34, v31);
  return v36 & 1;
}

uint64_t specialized static PgQuery_AlterPolicyStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v119 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v99 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v113 = *(void *)(Node - 8);
  uint64_t v114 = Node;
  uint64_t v11 = MEMORY[0x1F4188790](Node);
  uint64_t v105 = (uint64_t)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v108 = (uint64_t)&v99 - v13;
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v14 = MEMORY[0x1F4188790](v112);
  uint64_t v107 = (uint64_t)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v111 = (uint64_t)&v99 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v106 = (uint64_t)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v109 = (uint64_t)&v99 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v110 = (uint64_t)&v99 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v117 = (uint64_t)&v99 - v24;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v26 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v115 = (uint64_t)&v99 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v28);
  char v30 = (char *)&v99 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v32 = MEMORY[0x1F4188790](v31 - 8);
  uint64_t v118 = (uint64_t)&v99 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v99 - v34;
  AlterPolicyuint64_t Stmt = type metadata accessor for PgQuery_AlterPolicyStmt(0);
  uint64_t v37 = v119;
  uint64_t v38 = a1;
  uint64_t v39 = *(int *)(AlterPolicyStmt + 20);
  uint64_t v40 = *(void *)(a1 + v39);
  uint64_t v41 = *(void *)(v119 + v39);
  if (v40 == v41) {
    goto LABEL_33;
  }
  int v102 = v9;
  uint64_t v103 = v38;
  int v101 = v7;
  uint64_t v104 = v3;
  uint64_t v42 = v41;
  if (*(void *)(v40 + 16) == *(void *)(v41 + 16) && *(void *)(v40 + 24) == *(void *)(v41 + 24)
    || (char v43 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v100 = v4;
    uint64_t v44 = v40
        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table;
    uint64_t v45 = v40;
    outlined init with copy of PgQuery_Alias?(v42+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v46 = (uint64_t)&v30[*(int *)(v28 + 48)];
    outlined init with copy of PgQuery_Alias?(v44, (uint64_t)v30, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v35, v46, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
    int v48 = v47(v30, 1, RangeVar);
    uint64_t v116 = v45;
    if (v48 == 1)
    {
      int v49 = v47((char *)v46, 1, RangeVar);
      swift_retain();
      swift_retain();
      uint64_t v50 = v42;
      if (v49 == 1)
      {
        outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v51 = v118;
      outlined init with copy of PgQuery_Alias?((uint64_t)v30, v118, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if (v47((char *)v46, 1, RangeVar) != 1)
      {
        uint64_t v52 = v115;
        outlined init with take of PgQuery_OidList(v46, v115, type metadata accessor for PgQuery_RangeVar);
        swift_retain();
        uint64_t v50 = v42;
        swift_retain();
        char v53 = specialized static PgQuery_RangeVar.== infix(_:_:)(v51, v52);
        outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_RangeVar);
        outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
        if ((v53 & 1) == 0) {
          goto LABEL_41;
        }
LABEL_12:
        uint64_t v54 = v116;
        uint64_t v55 = *(void *)(v116
                        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles);
        uint64_t v56 = *(void *)(v50
                        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v57 = specialized static Array<A>.== infix(_:_:)(v55, v56);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v57 & 1) == 0) {
          goto LABEL_41;
        }
        uint64_t v58 = v50;
        uint64_t v59 = v54;
        uint64_t v60 = v54
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
        uint64_t v118 = v58;
        uint64_t v61 = v117;
        outlined init with copy of PgQuery_Alias?(v58+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v117, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v63 = v111;
        uint64_t v62 = v112;
        uint64_t v64 = v111 + *(int *)(v112 + 48);
        outlined init with copy of PgQuery_Alias?(v60, v111, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined init with copy of PgQuery_Alias?(v61, v64, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v65 = v114;
        uint64_t v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48);
        if (v66(v63, 1, v114) == 1)
        {
          if (v66(v64, 1, v65) == 1)
          {
            outlined destroy of AnyValue?(v63, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of AnyValue?(v117, &demangling cache variable for type metadata for PgQuery_Node?);
            uint64_t v67 = v59;
LABEL_23:
            uint64_t v78 = v67
                + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck;
            uint64_t v79 = v109;
            outlined init with copy of PgQuery_Alias?(v118+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, v109, &demangling cache variable for type metadata for PgQuery_Node?);
            uint64_t v80 = *(int *)(v62 + 48);
            uint64_t v81 = v107;
            uint64_t v82 = v107 + v80;
            outlined init with copy of PgQuery_Alias?(v78, v107, &demangling cache variable for type metadata for PgQuery_Node?);
            uint64_t v83 = v81;
            outlined init with copy of PgQuery_Alias?(v79, v82, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v66(v81, 1, v65) == 1)
            {
              int v84 = v66(v82, 1, v65);
              uint64_t v85 = v100;
              if (v84 == 1)
              {
                outlined destroy of AnyValue?(v83, &demangling cache variable for type metadata for PgQuery_Node?);
                outlined destroy of AnyValue?(v109, &demangling cache variable for type metadata for PgQuery_Node?);
                uint64_t v3 = v104;
LABEL_32:
                swift_release();
                swift_release();
                uint64_t v7 = v101;
                uint64_t v9 = v102;
                uint64_t v37 = v119;
                uint64_t v38 = v103;
                uint64_t v4 = v85;
LABEL_33:
                uint64_t v94 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
                uint64_t v95 = v37;
                v94(v9, v38, v3);
                v94(v7, v95, v3);
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                uint64_t v96 = v3;
                char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v97 = *(void (**)(char *, uint64_t))(v4 + 8);
                v97(v7, v96);
                v97(v9, v96);
                return v43 & 1;
              }
              uint64_t v87 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
              goto LABEL_40;
            }
            uint64_t v86 = v106;
            outlined init with copy of PgQuery_Alias?(v81, v106, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v66(v82, 1, v65) == 1)
            {
              uint64_t v87 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_39:
              outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_Node);
LABEL_40:
              outlined destroy of AnyValue?(v83, v87);
              outlined destroy of AnyValue?(v109, &demangling cache variable for type metadata for PgQuery_Node?);
              goto LABEL_41;
            }
            uint64_t v88 = v105;
            outlined init with take of PgQuery_OidList(v82, v105, type metadata accessor for PgQuery_Node);
            uint64_t v89 = *(int *)(v65 + 20);
            uint64_t v90 = *(void *)(v86 + v89);
            uint64_t v91 = *(void *)(v88 + v89);
            if (v90 != v91)
            {
              swift_retain();
              swift_retain();
              BOOL v92 = closure #1 in static PgQuery_Node.== infix(_:_:)(v90, v91);
              swift_release();
              swift_release();
              if (!v92)
              {
                outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_Node);
                uint64_t v87 = &demangling cache variable for type metadata for PgQuery_Node?;
                uint64_t v83 = v107;
                goto LABEL_39;
              }
            }
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
            uint64_t v3 = v104;
            char v93 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_Node);
            outlined destroy of AnyValue?(v107, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of AnyValue?(v109, &demangling cache variable for type metadata for PgQuery_Node?);
            uint64_t v85 = v100;
            if (v93) {
              goto LABEL_32;
            }
LABEL_41:
            swift_release();
            swift_release();
            char v43 = 0;
            return v43 & 1;
          }
          uint64_t v69 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        }
        else
        {
          uint64_t v68 = v110;
          outlined init with copy of PgQuery_Alias?(v63, v110, &demangling cache variable for type metadata for PgQuery_Node?);
          if (v66(v64, 1, v65) == 1)
          {
            uint64_t v69 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
          }
          else
          {
            uint64_t v70 = v108;
            outlined init with take of PgQuery_OidList(v64, v108, type metadata accessor for PgQuery_Node);
            uint64_t v71 = *(int *)(v65 + 20);
            uint64_t v72 = *(void *)(v68 + v71);
            uint64_t v73 = *(void *)(v70 + v71);
            if (v72 == v73
              || (swift_retain(),
                  swift_retain(),
                  BOOL v74 = closure #1 in static PgQuery_Node.== infix(_:_:)(v72, v73),
                  swift_release(),
                  swift_release(),
                  v74))
            {
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
              uint64_t v75 = v110;
              uint64_t v76 = v108;
              char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
              outlined destroy of PgQuery_Alias(v76, type metadata accessor for PgQuery_Node);
              outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_Node);
              outlined destroy of AnyValue?(v63, &demangling cache variable for type metadata for PgQuery_Node?);
              outlined destroy of AnyValue?(v117, &demangling cache variable for type metadata for PgQuery_Node?);
              uint64_t v67 = v59;
              if ((v77 & 1) == 0) {
                goto LABEL_41;
              }
              goto LABEL_23;
            }
            outlined destroy of PgQuery_Alias(v108, type metadata accessor for PgQuery_Node);
            uint64_t v69 = &demangling cache variable for type metadata for PgQuery_Node?;
            uint64_t v68 = v110;
          }
          outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_Node);
        }
        outlined destroy of AnyValue?(v63, v69);
        outlined destroy of AnyValue?(v117, &demangling cache variable for type metadata for PgQuery_Node?);
        goto LABEL_41;
      }
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_RangeVar);
    }
    outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_41;
  }
  return v43 & 1;
}

uint64_t specialized static PgQuery_AlterDomainStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v54 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v61 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v59 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v62 = (uint64_t)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v60 = (uint64_t)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v63 = (uint64_t)&v54 - v18;
  uint64_t AlterDomainStmt = type metadata accessor for PgQuery_AlterDomainStmt(0);
  uint64_t v20 = a1;
  uint64_t v21 = *(int *)(AlterDomainStmt + 20);
  uint64_t v22 = *(void **)(a1 + v21);
  uint64_t v23 = *(void **)(a2 + v21);
  if (v22 == v23) {
    goto LABEL_36;
  }
  uint64_t v57 = a2;
  uint64_t v58 = a1;
  BOOL v24 = v22[2] == v23[2] && v22[3] == v23[3];
  if (v24 || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v55 = v8;
    uint64_t v56 = v5;
    uint64_t v26 = v22[4];
    uint64_t v27 = v23[4];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v28 = specialized static Array<A>.== infix(_:_:)(v26, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0
      || (v22[5] != v23[5] || v22[6] != v23[6]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_30;
    }
    uint64_t v29 = (uint64_t)v22
        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def;
    uint64_t v30 = v63;
    outlined init with copy of PgQuery_Alias?((uint64_t)v23+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, v63, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v31 = v62;
    uint64_t v32 = v62 + *(int *)(v13 + 48);
    outlined init with copy of PgQuery_Alias?(v29, v62, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v30, v32, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
    if (v33(v31, 1, Node) == 1)
    {
      int v34 = v33(v32, 1, Node);
      uint64_t v8 = v55;
      uint64_t v5 = v56;
      if (v34 == 1)
      {
        outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v63, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_20:
        uint64_t v47 = *(void *)((char *)v22
                        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
        uint64_t v48 = *(void *)((char *)v23
                        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
        if (*((unsigned char *)v23
             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
             + 8) == 1)
        {
          if (v48)
          {
            if (v48 == 1)
            {
              if (v47 == 1) {
                goto LABEL_34;
              }
            }
            else if (v47 == 2)
            {
              goto LABEL_34;
            }
            goto LABEL_30;
          }
          if (!v47)
          {
LABEL_34:
            int v49 = *((unsigned __int8 *)v22
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
            int v50 = *((unsigned __int8 *)v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
            swift_release();
            swift_release();
            a2 = v57;
            uint64_t v20 = v58;
            if (v49 != v50)
            {
              char v25 = 0;
              return v25 & 1;
            }
LABEL_36:
            uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
            v51(v10, v20, v4);
            v51(v8, a2, v4);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
            char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v52 = *(void (**)(char *, uint64_t))(v5 + 8);
            v52(v8, v4);
            v52(v10, v4);
            return v25 & 1;
          }
        }
        else if (v47 == v48)
        {
          goto LABEL_34;
        }
LABEL_30:
        swift_release();
        swift_release();
        char v25 = 0;
        return v25 & 1;
      }
      uint64_t v37 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v35 = v60;
      outlined init with copy of PgQuery_Alias?(v31, v60, &demangling cache variable for type metadata for PgQuery_Node?);
      int v36 = v33(v32, 1, Node);
      uint64_t v8 = v55;
      uint64_t v5 = v56;
      if (v36 == 1)
      {
        uint64_t v37 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        uint64_t v38 = v32;
        uint64_t v39 = v35;
        uint64_t v40 = v59;
        outlined init with take of PgQuery_OidList(v38, v59, type metadata accessor for PgQuery_Node);
        uint64_t v41 = *(int *)(Node + 20);
        uint64_t v42 = *(void *)(v39 + v41);
        uint64_t v43 = *(void *)(v40 + v41);
        if (v42 == v43
          || (swift_retain(),
              swift_retain(),
              BOOL v44 = closure #1 in static PgQuery_Node.== infix(_:_:)(v42, v43),
              swift_release(),
              swift_release(),
              v44))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          uint64_t v45 = v60;
          char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
          outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of AnyValue?(v63, &demangling cache variable for type metadata for PgQuery_Node?);
          if ((v46 & 1) == 0) {
            goto LABEL_30;
          }
          goto LABEL_20;
        }
        outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
        uint64_t v37 = &demangling cache variable for type metadata for PgQuery_Node?;
        uint64_t v35 = v60;
      }
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of AnyValue?(v62, v37);
    outlined destroy of AnyValue?(v63, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_30;
  }
  return v25 & 1;
}

uint64_t specialized static PgQuery_VacuumRelation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v45 = (char *)&v44 - v7;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v9 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v51 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t VacuumRelation = type metadata accessor for PgQuery_VacuumRelation(0);
  uint64_t v25 = *(int *)(VacuumRelation + 28);
  uint64_t v49 = a1;
  uint64_t v26 = a1 + v25;
  uint64_t v27 = VacuumRelation;
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v28 = *(int *)(v27 + 28);
  uint64_t v50 = a2;
  outlined init with copy of PgQuery_Alias?(a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, RangeVar) != 1)
  {
    uint64_t v31 = (uint64_t)v51;
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v30(v29, 1, RangeVar) != 1)
    {
      outlined init with take of PgQuery_OidList(v29, v31, type metadata accessor for PgQuery_RangeVar);
      char v32 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v18, v31);
      outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if (v32) {
        goto LABEL_8;
      }
LABEL_11:
      char v41 = 0;
      return v41 & 1;
    }
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    goto LABEL_11;
  }
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v30(v29, 1, RangeVar) != 1) {
    goto LABEL_6;
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_8:
  uint64_t v33 = v49;
  uint64_t v34 = v50;
  if (*(_DWORD *)v49 != *(_DWORD *)v50
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(v49 + 8), *(void *)(v50 + 8)) & 1) == 0)
  {
    goto LABEL_11;
  }
  uint64_t v36 = v47;
  uint64_t v35 = v48;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
  uint64_t v38 = v45;
  v37(v45, v33 + *(int *)(v27 + 24), v48);
  uint64_t v39 = v34 + *(int *)(v27 + 24);
  uint64_t v40 = v46;
  v37(v46, v39, v35);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v36 + 8);
  v42(v40, v35);
  v42(v38, v35);
  return v41 & 1;
}

uint64_t specialized static PgQuery_RowCompareExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v67 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v72 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v73 = (uint64_t)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v67 - v19;
  uint64_t RowCompareExpr = type metadata accessor for PgQuery_RowCompareExpr(0);
  uint64_t v22 = a1;
  uint64_t v23 = *(int *)(RowCompareExpr + 20);
  uint64_t v24 = *(void *)(a1 + v23);
  uint64_t v25 = *(void *)(a2 + v23);
  uint64_t v26 = a2;
  if (v24 == v25) {
    goto LABEL_21;
  }
  uint64_t v68 = a2;
  uint64_t v69 = v22;
  uint64_t v67 = v10;
  uint64_t v70 = v5;
  uint64_t v71 = v4;
  uint64_t v27 = v24;
  uint64_t v28 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1, Node) == 1)
  {
    int v32 = v31(v29, 1, Node);
    swift_retain();
    swift_retain();
    uint64_t v33 = v27;
    if (v32 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v4 = v71;
      goto LABEL_11;
    }
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_25:
    outlined destroy of AnyValue?((uint64_t)v15, v35);
    outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_26;
  }
  uint64_t v33 = v27;
  uint64_t v34 = v73;
  outlined init with copy of PgQuery_Alias?((uint64_t)v15, v73, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v31(v29, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_24:
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
    goto LABEL_25;
  }
  uint64_t v36 = (uint64_t)v15;
  uint64_t v37 = v72;
  outlined init with take of PgQuery_OidList(v29, v72, type metadata accessor for PgQuery_Node);
  uint64_t v38 = *(int *)(Node + 20);
  uint64_t v39 = *(void *)(v34 + v38);
  uint64_t v40 = *(void *)(v37 + v38);
  swift_retain();
  swift_retain();
  if (v39 != v40)
  {
    swift_retain();
    swift_retain();
    BOOL v41 = closure #1 in static PgQuery_Node.== infix(_:_:)(v39, v40);
    swift_release();
    swift_release();
    if (!v41)
    {
      outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_Node);
      uint64_t v35 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v15 = (char *)v36;
      goto LABEL_24;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v4 = v71;
  char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v36, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v42 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_11:
  uint64_t v43 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype);
  uint64_t v44 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype);
  if (*(unsigned char *)(v25
                + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype
                + 8) == 1)
  {
    switch(v44)
    {
      case 1:
        if (v43 != 1) {
          goto LABEL_26;
        }
        goto LABEL_16;
      case 2:
        if (v43 != 2) {
          goto LABEL_26;
        }
        goto LABEL_16;
      case 3:
        if (v43 != 3) {
          goto LABEL_26;
        }
        goto LABEL_16;
      case 4:
        if (v43 != 4) {
          goto LABEL_26;
        }
        goto LABEL_16;
      case 5:
        if (v43 != 5) {
          goto LABEL_26;
        }
        goto LABEL_16;
      case 6:
        if (v43 != 6) {
          goto LABEL_26;
        }
        goto LABEL_16;
      default:
        if (!v43) {
          goto LABEL_16;
        }
        goto LABEL_26;
    }
  }
  if (v43 != v44) {
    goto LABEL_26;
  }
LABEL_16:
  uint64_t v45 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos);
  uint64_t v46 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v47 = v33;
  char v48 = specialized static Array<A>.== infix(_:_:)(v45, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v48 & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v49 = *(void *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies);
  uint64_t v50 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v51 = specialized static Array<A>.== infix(_:_:)(v49, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v52 = *(void *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids);
  uint64_t v53 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v54 = specialized static Array<A>.== infix(_:_:)(v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0
    || (uint64_t v55 = *(void *)(v47
                        + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs),
        uint64_t v56 = *(void *)(v25
                        + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        char v57 = specialized static Array<A>.== infix(_:_:)(v55, v56),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v57 & 1) == 0))
  {
LABEL_26:
    swift_release();
    swift_release();
    goto LABEL_27;
  }
  uint64_t v58 = *(void *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs);
  uint64_t v59 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v60 = specialized static Array<A>.== infix(_:_:)(v58, v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v22 = v69;
  uint64_t v5 = v70;
  uint64_t v10 = v67;
  uint64_t v26 = v68;
  if ((v60 & 1) == 0)
  {
LABEL_27:
    char v64 = 0;
    return v64 & 1;
  }
LABEL_21:
  uint64_t v61 = v5;
  uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v63 = v26;
  v62(v10, v22, v4);
  v62(v8, v63, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v64 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v65 = *(void (**)(char *, uint64_t))(v61 + 8);
  v65(v8, v4);
  v65(v10, v4);
  return v64 & 1;
}

uint64_t specialized static PgQuery_RangeTableFunc.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v100 - v9;
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v112 = *(void *)(Alias - 8);
  uint64_t v113 = Alias;
  MEMORY[0x1F4188790](Alias);
  uint64_t v109 = (uint64_t *)((char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?));
  MEMORY[0x1F4188790](v111);
  uint64_t v114 = (uint64_t)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v110 = (uint64_t *)((char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v15);
  uint64_t v115 = (uint64_t)&v100 - v17;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v122 = *(void *)(Node - 8);
  uint64_t v18 = MEMORY[0x1F4188790](Node);
  uint64_t v116 = (uint64_t)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v100 - v20;
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v22 = MEMORY[0x1F4188790](v121);
  uint64_t v119 = (uint64_t)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v100 - v24;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v27 = MEMORY[0x1F4188790](v26 - 8);
  uint64_t v117 = (uint64_t)&v100 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v118 = (uint64_t)&v100 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v33 = (char *)&v100 - v32;
  MEMORY[0x1F4188790](v31);
  uint64_t v35 = (char *)&v100 - v34;
  Rangeuint64_t TableFunc = type metadata accessor for PgQuery_RangeTableFunc(0);
  uint64_t v37 = a1;
  uint64_t v38 = *(int *)(RangeTableFunc + 20);
  uint64_t v39 = *(void *)(a1 + v38);
  uint64_t v40 = *(void *)(a2 + v38);
  if (v39 == v40) {
    goto LABEL_28;
  }
  uint64_t v108 = v10;
  if (*(unsigned __int8 *)(v39 + 16) != *(unsigned __int8 *)(v40 + 16))
  {
LABEL_37:
    char v90 = 0;
    return v90 & 1;
  }
  uint64_t v102 = v37;
  uint64_t v101 = a2;
  uint64_t v103 = v8;
  uint64_t v105 = v5;
  uint64_t v107 = v4;
  uint64_t v41 = v39;
  uint64_t v42 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v43 = (uint64_t)&v25[*(int *)(v121 + 48)];
  outlined init with copy of PgQuery_Alias?(v42, (uint64_t)v25, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v35, v43, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v44 = v122 + 48;
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
  uint64_t v46 = Node;
  if (v45((uint64_t)v25, 1, Node) == 1)
  {
    uint64_t v122 = v44;
    uint64_t v104 = v45;
    unsigned int v47 = v45(v43, 1, v46);
    swift_retain();
    swift_retain();
    uint64_t v4 = v107;
    uint64_t v48 = v41;
    uint64_t v49 = v40;
    if (v47 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v25, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_12;
    }
    uint64_t v50 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_31:
    outlined destroy of AnyValue?((uint64_t)v25, v50);
    BOOL v92 = &demangling cache variable for type metadata for PgQuery_Node?;
    uint64_t v93 = (uint64_t)v35;
LABEL_35:
    outlined destroy of AnyValue?(v93, v92);
    goto LABEL_36;
  }
  uint64_t v106 = v40;
  outlined init with copy of PgQuery_Alias?((uint64_t)v25, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v45(v43, 1, v46) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v50 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_30:
    outlined destroy of PgQuery_Alias((uint64_t)v33, type metadata accessor for PgQuery_Node);
    goto LABEL_31;
  }
  uint64_t v104 = v45;
  uint64_t v122 = v44;
  outlined init with take of PgQuery_OidList(v43, (uint64_t)v21, type metadata accessor for PgQuery_Node);
  uint64_t v51 = *(int *)(v46 + 20);
  uint64_t v52 = *(void *)&v33[v51];
  uint64_t v53 = *(void *)&v21[v51];
  swift_retain();
  swift_retain();
  if (v52 != v53)
  {
    swift_retain();
    swift_retain();
    BOOL v54 = closure #1 in static PgQuery_Node.== infix(_:_:)(v52, v53);
    swift_release();
    swift_release();
    if (!v54)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v21, type metadata accessor for PgQuery_Node);
      uint64_t v50 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_30;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v4 = v107;
  char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias((uint64_t)v21, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v33, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v25, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v48 = v41;
  uint64_t v49 = v106;
  if ((v55 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_12:
  uint64_t v56 = v48
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr;
  uint64_t v57 = v118;
  outlined init with copy of PgQuery_Alias?(v49+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, v118, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v58 = v119;
  uint64_t v59 = v119 + *(int *)(v121 + 48);
  outlined init with copy of PgQuery_Alias?(v56, v119, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v57, v59, &demangling cache variable for type metadata for PgQuery_Node?);
  char v60 = v104;
  if (v104(v58, 1, v46) != 1)
  {
    uint64_t v63 = v117;
    outlined init with copy of PgQuery_Alias?(v58, v117, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v60(v59, 1, v46) == 1)
    {
      char v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_33:
      outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
      goto LABEL_34;
    }
    uint64_t v65 = v116;
    outlined init with take of PgQuery_OidList(v59, v116, type metadata accessor for PgQuery_Node);
    uint64_t v66 = *(int *)(v46 + 20);
    uint64_t v67 = *(void *)(v63 + v66);
    uint64_t v68 = *(void *)(v65 + v66);
    if (v67 != v68)
    {
      swift_retain();
      swift_retain();
      BOOL v69 = closure #1 in static PgQuery_Node.== infix(_:_:)(v67, v68);
      swift_release();
      swift_release();
      if (!v69)
      {
        outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
        char v64 = &demangling cache variable for type metadata for PgQuery_Node?;
        uint64_t v63 = v117;
        goto LABEL_33;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    uint64_t v70 = v117;
    char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_Node);
    outlined destroy of AnyValue?(v58, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v62 = v105;
    if (v71) {
      goto LABEL_21;
    }
LABEL_36:
    swift_release();
    swift_release();
    goto LABEL_37;
  }
  unsigned int v61 = v60(v59, 1, v46);
  uint64_t v62 = v105;
  if (v61 != 1)
  {
    char v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_34:
    outlined destroy of AnyValue?(v58, v64);
    BOOL v92 = &demangling cache variable for type metadata for PgQuery_Node?;
    uint64_t v93 = v57;
    goto LABEL_35;
  }
  outlined destroy of AnyValue?(v58, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_21:
  uint64_t v72 = *(void *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namespaces);
  uint64_t v73 = *(void *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namespaces);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v74 = specialized static Array<A>.== infix(_:_:)(v72, v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v74 & 1) == 0) {
    goto LABEL_36;
  }
  uint64_t v75 = *(void *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns);
  uint64_t v76 = *(void *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v77 = specialized static Array<A>.== infix(_:_:)(v75, v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v77 & 1) == 0) {
    goto LABEL_36;
  }
  uint64_t v78 = v48
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  uint64_t v79 = v115;
  outlined init with copy of PgQuery_Alias?(v49+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v115, &demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v80 = v114;
  uint64_t v81 = v114 + *(int *)(v111 + 48);
  outlined init with copy of PgQuery_Alias?(v78, v114, &demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v82 = v80;
  outlined init with copy of PgQuery_Alias?(v79, v81, &demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v83 = v113;
  int v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48);
  if (v84(v80, 1, v113) == 1)
  {
    if (v84(v81, 1, v83) == 1)
    {
      outlined destroy of AnyValue?(v80, &demangling cache variable for type metadata for PgQuery_Alias?);
      outlined destroy of AnyValue?(v115, &demangling cache variable for type metadata for PgQuery_Alias?);
      goto LABEL_26;
    }
    uint64_t v97 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
    goto LABEL_50;
  }
  uint64_t v95 = v62;
  uint64_t v96 = v110;
  outlined init with copy of PgQuery_Alias?(v80, (uint64_t)v110, &demangling cache variable for type metadata for PgQuery_Alias?);
  if (v84(v81, 1, v83) == 1)
  {
    uint64_t v97 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
LABEL_49:
    outlined destroy of PgQuery_Alias((uint64_t)v96, type metadata accessor for PgQuery_Alias);
LABEL_50:
    outlined destroy of AnyValue?(v82, v97);
    BOOL v92 = &demangling cache variable for type metadata for PgQuery_Alias?;
    uint64_t v93 = v115;
    goto LABEL_35;
  }
  uint64_t v98 = v109;
  outlined init with take of PgQuery_OidList(v81, (uint64_t)v109, type metadata accessor for PgQuery_Alias);
  if ((*v96 != *v98 || v96[1] != v98[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v96[2], v98[2]) & 1) == 0)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v98, type metadata accessor for PgQuery_Alias);
    uint64_t v97 = &demangling cache variable for type metadata for PgQuery_Alias?;
    goto LABEL_49;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias((uint64_t)v98, type metadata accessor for PgQuery_Alias);
  outlined destroy of PgQuery_Alias((uint64_t)v96, type metadata accessor for PgQuery_Alias);
  outlined destroy of AnyValue?(v82, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined destroy of AnyValue?(v115, &demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v62 = v95;
  if ((v99 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_26:
  int v85 = *(_DWORD *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v86 = *(_DWORD *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  BOOL v87 = v85 == v86;
  uint64_t v37 = v102;
  uint64_t v8 = v103;
  uint64_t v10 = v108;
  a2 = v101;
  uint64_t v5 = v62;
  if (!v87) {
    goto LABEL_37;
  }
LABEL_28:
  uint64_t v88 = v8;
  uint64_t v89 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v89(v10, v37, v4);
  v89(v88, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v90 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v91 = *(void (**)(char *, uint64_t))(v5 + 8);
  v91(v88, v4);
  v91(v10, v4);
  return v90 & 1;
}

uint64_t specialized static PgQuery_OnConflictExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v81 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void *)(Node - 8);
  uint64_t v93 = Node;
  uint64_t v94 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](Node);
  uint64_t v88 = (uint64_t)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v81 - v15;
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v17 = MEMORY[0x1F4188790](v92);
  uint64_t v91 = (uint64_t)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v81 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v89 = (uint64_t)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v90 = (uint64_t)&v81 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v81 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v81 - v29;
  uint64_t v31 = type metadata accessor for PgQuery_OnConflictExpr(0);
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v34 = *(int *)(v31 + 20);
  uint64_t v35 = *(void *)(a1 + v34);
  uint64_t v36 = *(void *)(v33 + v34);
  if (v35 == v36) {
    goto LABEL_41;
  }
  uint64_t v37 = *(void *)(v35 + 16);
  uint64_t v38 = *(void *)(v36 + 16);
  if (*(unsigned char *)(v36 + 24) == 1)
  {
    switch(v38)
    {
      case 1:
        if (v37 != 1) {
          goto LABEL_46;
        }
        goto LABEL_13;
      case 2:
        if (v37 != 2) {
          goto LABEL_46;
        }
        goto LABEL_13;
      case 3:
        if (v37 == 3) {
          goto LABEL_13;
        }
        goto LABEL_46;
      default:
        if (!v37) {
          goto LABEL_13;
        }
        goto LABEL_46;
    }
  }
  if (v37 != v38) {
    goto LABEL_46;
  }
LABEL_13:
  uint64_t v83 = v32;
  uint64_t v84 = v33;
  int v85 = v10;
  int v86 = v8;
  uint64_t v87 = v5;
  uint64_t v39 = *(void *)(v35 + 32);
  uint64_t v40 = *(void *)(v36 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v41 = specialized static Array<A>.== infix(_:_:)(v39, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) == 0) {
    goto LABEL_45;
  }
  uint64_t v82 = v35;
  uint64_t v42 = v35
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere;
  outlined init with copy of PgQuery_Alias?(v36+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere, (uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v43 = (uint64_t)&v20[*(int *)(v92 + 48)];
  outlined init with copy of PgQuery_Alias?(v42, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v30, v43, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v44 = v93;
  uint64_t v46 = v94 + 48;
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
  if (v45((uint64_t)v20, 1, v93) == 1)
  {
    if (v45(v43, 1, v44) == 1)
    {
      uint64_t v81 = v45;
      uint64_t v94 = v46;
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_23;
    }
    unsigned int v47 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_31:
    outlined destroy of AnyValue?((uint64_t)v20, v47);
    outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_45;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v45(v43, 1, v44) == 1)
  {
    unsigned int v47 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_30:
    outlined destroy of PgQuery_Alias((uint64_t)v28, type metadata accessor for PgQuery_Node);
    goto LABEL_31;
  }
  uint64_t v81 = v45;
  uint64_t v94 = v46;
  outlined init with take of PgQuery_OidList(v43, (uint64_t)v16, type metadata accessor for PgQuery_Node);
  uint64_t v48 = *(int *)(v44 + 20);
  uint64_t v49 = *(void *)&v28[v48];
  uint64_t v50 = *(void *)&v16[v48];
  if (v49 != v50)
  {
    swift_retain();
    swift_retain();
    BOOL v51 = closure #1 in static PgQuery_Node.== infix(_:_:)(v49, v50);
    swift_release();
    swift_release();
    if (!v51)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
      unsigned int v47 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_30;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v28, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v44 = v93;
  if ((v52 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_23:
  uint64_t v53 = v82;
  if (*(_DWORD *)(v82
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint) != *(_DWORD *)(v36 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint))
    goto LABEL_45;
  uint64_t v54 = v44;
  uint64_t v55 = *(void *)(v82
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet);
  uint64_t v56 = *(void *)(v36
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v57 = specialized static Array<A>.== infix(_:_:)(v55, v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v58 = v53;
  if ((v57 & 1) == 0) {
    goto LABEL_45;
  }
  uint64_t v59 = v53
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere;
  uint64_t v60 = v90;
  outlined init with copy of PgQuery_Alias?(v36+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere, v90, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v61 = v91;
  uint64_t v62 = v91 + *(int *)(v92 + 48);
  outlined init with copy of PgQuery_Alias?(v59, v91, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v60, v62, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v63 = v81;
  if (v81(v61, 1, v54) == 1)
  {
    if (v63(v62, 1, v54) == 1)
    {
      outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_39;
    }
    uint64_t v65 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_44:
    outlined destroy of AnyValue?(v61, v65);
    outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_45;
  }
  uint64_t v64 = v89;
  outlined init with copy of PgQuery_Alias?(v61, v89, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v63(v62, 1, v54) == 1)
  {
    uint64_t v65 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_43:
    outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
    goto LABEL_44;
  }
  uint64_t v66 = v88;
  outlined init with take of PgQuery_OidList(v62, v88, type metadata accessor for PgQuery_Node);
  uint64_t v67 = *(int *)(v54 + 20);
  uint64_t v68 = *(void *)(v64 + v67);
  uint64_t v69 = *(void *)(v66 + v67);
  if (v68 != v69)
  {
    swift_retain();
    swift_retain();
    BOOL v70 = closure #1 in static PgQuery_Node.== infix(_:_:)(v68, v69);
    swift_release();
    swift_release();
    if (!v70)
    {
      outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
      uint64_t v65 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_43;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v71 & 1) == 0)
  {
LABEL_45:
    swift_release();
    swift_release();
    goto LABEL_46;
  }
LABEL_39:
  if (*(_DWORD *)(v58
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex) != *(_DWORD *)(v36 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex))
    goto LABEL_45;
  uint64_t v72 = *(void *)(v58
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist);
  uint64_t v73 = *(void *)(v36
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v74 = specialized static Array<A>.== infix(_:_:)(v72, v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v8 = v86;
  uint64_t v5 = v87;
  uint64_t v33 = v84;
  uint64_t v10 = v85;
  uint64_t v32 = v83;
  if ((v74 & 1) == 0)
  {
LABEL_46:
    char v78 = 0;
    return v78 & 1;
  }
LABEL_41:
  uint64_t v75 = v10;
  uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v77 = v33;
  v76(v75, v32, v4);
  v76(v8, v77, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v78 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v79 = *(void (**)(char *, uint64_t))(v5 + 8);
  v79(v8, v4);
  v79(v75, v4);
  return v78 & 1;
}

uint64_t specialized static PgQuery_CreateTrigStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v86 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v100 = *(void *)(Node - 8);
  uint64_t v101 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v97 = (uint64_t)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v99);
  uint64_t v103 = (uint64_t)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v98 = (uint64_t)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v102 = (uint64_t)&v86 - v17;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v18 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v104 = (uint64_t)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  uint64_t v20 = MEMORY[0x1F4188790](v105);
  uint64_t v96 = (uint64_t)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v86 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v94 = (uint64_t)&v86 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v95 = (uint64_t)&v86 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v86 - v30;
  MEMORY[0x1F4188790](v29);
  uint64_t v33 = (char *)&v86 - v32;
  Triguint64_t Stmt = type metadata accessor for PgQuery_CreateTrigStmt(0);
  uint64_t v35 = a1;
  uint64_t v36 = *(int *)(TrigStmt + 20);
  uint64_t v37 = *(void *)(a1 + v36);
  uint64_t v38 = *(void *)(a2 + v36);
  if (v37 == v38) {
    goto LABEL_44;
  }
  uint64_t v92 = v35;
  uint64_t v93 = v4;
  uint64_t v91 = a2;
  uint64_t v39 = v37;
  if ((*(void *)(v37 + 16) != *(void *)(v38 + 16) || *(void *)(v37 + 24) != *(void *)(v38 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_retain();
    swift_retain();
    goto LABEL_38;
  }
  uint64_t v87 = v10;
  uint64_t v88 = v8;
  uint64_t v89 = v5;
  uint64_t v40 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v41 = (uint64_t)&v23[*(int *)(v105 + 48)];
  outlined init with copy of PgQuery_Alias?(v40, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v33, v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v43 = RangeVar;
  unsigned int v44 = v42(v23, 1, RangeVar);
  uint64_t v90 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v42;
  if (v44 == 1)
  {
    unsigned int v45 = v42((char *)v41, 1, v43);
    swift_retain();
    swift_retain();
    if (v45 == 1)
    {
      uint64_t v86 = v18 + 48;
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_13;
    }
LABEL_10:
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of AnyValue?((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_38;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v31, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v42((char *)v41, 1, v43) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_10;
  }
  uint64_t v86 = v18 + 48;
  uint64_t v46 = v41;
  uint64_t v47 = v104;
  outlined init with take of PgQuery_OidList(v46, v104, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  char v48 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v31, v47);
  outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v48 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_13:
  uint64_t v49 = *(void *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname);
  uint64_t v50 = *(void *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v51 = specialized static Array<A>.== infix(_:_:)(v49, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0) {
    goto LABEL_38;
  }
  uint64_t v52 = *(void *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v53 = *(void *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v54 = specialized static Array<A>.== infix(_:_:)(v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0) {
    goto LABEL_38;
  }
  if (*(unsigned __int8 *)(v39
                          + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row) != *(unsigned __int8 *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row))
    goto LABEL_38;
  if (*(_DWORD *)(v39
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing) != *(_DWORD *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing))
    goto LABEL_38;
  if (*(_DWORD *)(v39
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events) != *(_DWORD *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events))
    goto LABEL_38;
  uint64_t v55 = *(void *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns);
  uint64_t v56 = *(void *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v57 = specialized static Array<A>.== infix(_:_:)(v55, v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v57 & 1) == 0) {
    goto LABEL_38;
  }
  uint64_t v58 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause;
  uint64_t v59 = v102;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause, v102, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v60 = v103;
  uint64_t v61 = v103 + *(int *)(v99 + 48);
  outlined init with copy of PgQuery_Alias?(v58, v103, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v59, v61, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v62 = v101;
  uint64_t v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
  if (v63(v60, 1, v101) != 1)
  {
    uint64_t v64 = v98;
    outlined init with copy of PgQuery_Alias?(v60, v98, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v63(v61, 1, v62) == 1)
    {
      uint64_t v65 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v66 = v97;
      outlined init with take of PgQuery_OidList(v61, v97, type metadata accessor for PgQuery_Node);
      uint64_t v67 = *(int *)(v62 + 20);
      uint64_t v68 = *(void *)(v64 + v67);
      uint64_t v69 = *(void *)(v66 + v67);
      if (v68 == v69
        || (swift_retain(),
            swift_retain(),
            BOOL v70 = closure #1 in static PgQuery_Node.== infix(_:_:)(v68, v69),
            swift_release(),
            swift_release(),
            v70))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v71 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_28;
      }
      outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
      uint64_t v65 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
LABEL_37:
    outlined destroy of AnyValue?(v60, v65);
    outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_38;
  }
  if (v63(v61, 1, v62) != 1)
  {
    uint64_t v65 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_37;
  }
  outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_28:
  if (*(unsigned __int8 *)(v39
                          + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) != *(unsigned __int8 *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint))
    goto LABEL_38;
  uint64_t v72 = *(void *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels);
  uint64_t v73 = *(void *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v74 = specialized static Array<A>.== infix(_:_:)(v72, v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v74 & 1) == 0
    || *(unsigned __int8 *)(v39
                          + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) != *(unsigned __int8 *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable)
    || *(unsigned __int8 *)(v39
                          + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) != *(unsigned __int8 *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred))
  {
    goto LABEL_38;
  }
  uint64_t v75 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel;
  uint64_t v76 = v95;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel, v95, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v77 = v96;
  uint64_t v78 = v96 + *(int *)(v105 + 48);
  outlined init with copy of PgQuery_Alias?(v75, v96, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?(v76, v78, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v90(v77, 1, RangeVar) == 1)
  {
    if (v90(v78, 1, RangeVar) == 1)
    {
      outlined destroy of AnyValue?(v96, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?(v95, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_43:
      swift_release();
      swift_release();
      uint64_t v8 = v88;
      uint64_t v5 = v89;
      uint64_t v10 = v87;
      a2 = v91;
      uint64_t v35 = v92;
      uint64_t v4 = v93;
LABEL_44:
      uint64_t v83 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v83(v10, v35, v4);
      v83(v8, a2, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v79 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v84 = *(void (**)(char *, uint64_t))(v5 + 8);
      v84(v8, v4);
      v84(v10, v4);
      return v79 & 1;
    }
    goto LABEL_41;
  }
  outlined init with copy of PgQuery_Alias?(v96, v94, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v90(v78, 1, RangeVar) == 1)
  {
    outlined destroy of PgQuery_Alias(v94, type metadata accessor for PgQuery_RangeVar);
LABEL_41:
    outlined destroy of AnyValue?(v96, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of AnyValue?(v95, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_38;
  }
  uint64_t v80 = v104;
  outlined init with take of PgQuery_OidList(v78, v104, type metadata accessor for PgQuery_RangeVar);
  uint64_t v81 = v94;
  char v82 = specialized static PgQuery_RangeVar.== infix(_:_:)(v94, v80);
  outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?(v96, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?(v95, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v82) {
    goto LABEL_43;
  }
LABEL_38:
  swift_release();
  swift_release();
  char v79 = 0;
  return v79 & 1;
}

uint64_t specialized static PgQuery_CreateRoleStmt.== infix(_:_:)(char *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_12;
        }
        goto LABEL_19;
      case 2:
        if (v11 == 2) {
          goto LABEL_12;
        }
        goto LABEL_19;
      case 3:
        if (v11 == 3) {
          goto LABEL_12;
        }
        goto LABEL_19;
      default:
        if (!v11) {
          goto LABEL_12;
        }
        goto LABEL_19;
    }
  }
  if (v11 != v12) {
    goto LABEL_19;
  }
LABEL_12:
  BOOL v13 = *((void *)a1 + 2) == a2[2] && *((void *)a1 + 3) == a2[3];
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 4), a2[4]))
    {
      Roleuint64_t Stmt = type metadata accessor for PgQuery_CreateRoleStmt(0);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, &a1[*(int *)(RoleStmt + 28)], v4);
      v16(v8, (char *)a2 + *(int *)(RoleStmt + 28), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
      return v14 & 1;
    }
LABEL_19:
    char v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_CreateCastStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v115 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v93 - v8;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v103 = *(void *)(ObjectWithArgs - 8);
  uint64_t v104 = ObjectWithArgs;
  MEMORY[0x1F4188790](ObjectWithArgs);
  uint64_t v99 = (uint64_t)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?));
  MEMORY[0x1F4188790](v101);
  uint64_t v106 = (uint64_t)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v102 = (uint64_t)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v105 = (uint64_t)&v93 - v16;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v18 = *(void *)(TypeName - 8);
  uint64_t v19 = MEMORY[0x1F4188790](TypeName);
  uint64_t v100 = (uint64_t)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v108 = (uint64_t)&v93 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v110 = (uint64_t)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v93 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  uint64_t v107 = (uint64_t)&v93 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v109 = (uint64_t)&v93 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v112 = (uint64_t)&v93 - v33;
  MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v93 - v34;
  Castuint64_t Stmt = type metadata accessor for PgQuery_CreateCastStmt(0);
  uint64_t v37 = a1;
  uint64_t v38 = *(int *)(CastStmt + 20);
  uint64_t v39 = *(void *)(a1 + v38);
  uint64_t v40 = *(void *)(a2 + v38);
  uint64_t v41 = a2;
  uint64_t v42 = v115;
  if (v39 == v40) {
    goto LABEL_61;
  }
  uint64_t v95 = v41;
  uint64_t v96 = v37;
  uint64_t v97 = v9;
  uint64_t v94 = v7;
  uint64_t v98 = v4;
  uint64_t v43 = v39
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sourcetype;
  uint64_t v44 = v40;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sourcetype, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v45 = v39;
  uint64_t v46 = (uint64_t)&v26[*(int *)(v22 + 48)];
  outlined init with copy of PgQuery_Alias?(v43, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v111 = v35;
  outlined init with copy of PgQuery_Alias?((uint64_t)v35, v46, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v48 = v47(v26, 1, TypeName);
  uint64_t v49 = TypeName;
  uint64_t v113 = v45;
  uint64_t v114 = v44;
  if (v48 == 1)
  {
    int v50 = v47((char *)v46, 1, TypeName);
    swift_retain();
    swift_retain();
    if (v50 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of AnyValue?((uint64_t)v111, &demangling cache variable for type metadata for PgQuery_TypeName?);
      goto LABEL_5;
    }
    uint64_t v69 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_26:
    uint64_t v74 = (uint64_t)v111;
    outlined destroy of AnyValue?((uint64_t)v26, v69);
    outlined destroy of AnyValue?(v74, &demangling cache variable for type metadata for PgQuery_TypeName?);
    goto LABEL_46;
  }
  uint64_t v68 = v112;
  outlined init with copy of PgQuery_Alias?((uint64_t)v26, v112, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if (v47((char *)v46, 1, TypeName) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v69 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_25:
    outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_TypeName);
    goto LABEL_26;
  }
  uint64_t v70 = v108;
  outlined init with take of PgQuery_OidList(v46, v108, type metadata accessor for PgQuery_TypeName);
  uint64_t v71 = *(void *)v68;
  uint64_t v72 = *(void *)v70;
  swift_retain();
  swift_retain();
  if ((specialized static Array<A>.== infix(_:_:)(v71, v72) & 1) == 0
    || *(_DWORD *)(v68 + 8) != *(_DWORD *)(v70 + 8)
    || *(unsigned __int8 *)(v68 + 12) != *(unsigned __int8 *)(v70 + 12)
    || *(unsigned __int8 *)(v68 + 13) != *(unsigned __int8 *)(v70 + 13)
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(v68 + 16), *(void *)(v70 + 16)) & 1) == 0
    || *(_DWORD *)(v68 + 24) != *(_DWORD *)(v70 + 24)
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(v68 + 32), *(void *)(v70 + 32)) & 1) == 0
    || *(_DWORD *)(v68 + 40) != *(_DWORD *)(v70 + 40))
  {
    outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_TypeName);
    uint64_t v69 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    goto LABEL_25;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_TypeName);
  uint64_t v49 = TypeName;
  outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_TypeName);
  outlined destroy of AnyValue?((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of AnyValue?((uint64_t)v111, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((v73 & 1) == 0) {
    goto LABEL_46;
  }
LABEL_5:
  uint64_t v51 = v113
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targettype;
  uint64_t v52 = v109;
  outlined init with copy of PgQuery_Alias?(v114+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targettype, v109, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v53 = v110;
  uint64_t v54 = v110 + *(int *)(v22 + 48);
  outlined init with copy of PgQuery_Alias?(v51, v110, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?(v52, v54, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if (v47((char *)v53, 1, v49) == 1)
  {
    if (v47((char *)v54, 1, v49) == 1)
    {
      outlined destroy of AnyValue?(v53, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of AnyValue?(v52, &demangling cache variable for type metadata for PgQuery_TypeName?);
      uint64_t v55 = v98;
      uint64_t v56 = v113;
      goto LABEL_8;
    }
    uint64_t v76 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_42:
    outlined destroy of AnyValue?(v53, v76);
    outlined destroy of AnyValue?(v52, &demangling cache variable for type metadata for PgQuery_TypeName?);
    goto LABEL_46;
  }
  uint64_t v75 = v107;
  outlined init with copy of PgQuery_Alias?(v53, v107, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if (v47((char *)v54, 1, v49) == 1)
  {
    uint64_t v76 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_41:
    outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_TypeName);
    goto LABEL_42;
  }
  uint64_t v77 = v100;
  outlined init with take of PgQuery_OidList(v54, v100, type metadata accessor for PgQuery_TypeName);
  char v78 = specialized static Array<A>.== infix(_:_:)(*(void *)v75, *(void *)v77);
  uint64_t v56 = v113;
  if ((v78 & 1) == 0
    || *(_DWORD *)(v75 + 8) != *(_DWORD *)(v77 + 8)
    || *(unsigned __int8 *)(v75 + 12) != *(unsigned __int8 *)(v77 + 12)
    || *(unsigned __int8 *)(v75 + 13) != *(unsigned __int8 *)(v77 + 13)
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(v75 + 16), *(void *)(v77 + 16)) & 1) == 0
    || *(_DWORD *)(v75 + 24) != *(_DWORD *)(v77 + 24)
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(v75 + 32), *(void *)(v77 + 32)) & 1) == 0
    || *(_DWORD *)(v75 + 40) != *(_DWORD *)(v77 + 40))
  {
    outlined destroy of PgQuery_Alias(v77, type metadata accessor for PgQuery_TypeName);
    uint64_t v76 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    goto LABEL_41;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v79 = v98;
  char v80 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v77, type metadata accessor for PgQuery_TypeName);
  outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_TypeName);
  outlined destroy of AnyValue?(v53, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v81 = v52;
  uint64_t v55 = v79;
  outlined destroy of AnyValue?(v81, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((v80 & 1) == 0) {
    goto LABEL_46;
  }
LABEL_8:
  uint64_t v57 = v56;
  uint64_t v58 = v56
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__func;
  uint64_t v59 = v105;
  outlined init with copy of PgQuery_Alias?(v114+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__func, v105, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v60 = v106;
  uint64_t v61 = v106 + *(int *)(v101 + 48);
  outlined init with copy of PgQuery_Alias?(v58, v106, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined init with copy of PgQuery_Alias?(v59, v61, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v62 = v104;
  uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  int v64 = v63(v60, 1, v104);
  uint64_t v42 = v115;
  uint64_t v65 = v102;
  if (v64 != 1)
  {
    outlined init with copy of PgQuery_Alias?(v60, v102, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if (v63(v61, 1, v62) != 1)
    {
      uint64_t v83 = v99;
      outlined init with take of PgQuery_OidList(v61, v99, type metadata accessor for PgQuery_ObjectWithArgs);
      char v84 = specialized static PgQuery_ObjectWithArgs.== infix(_:_:)(v65, v83, type metadata accessor for PgQuery_ObjectWithArgs);
      outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_ObjectWithArgs);
      outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_ObjectWithArgs);
      outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      uint64_t v67 = v57;
      if ((v84 & 1) == 0) {
        goto LABEL_46;
      }
      goto LABEL_48;
    }
    outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_45:
    outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for (PgQuery_ObjectWithArgs?, PgQuery_ObjectWithArgs?));
    outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    goto LABEL_46;
  }
  int v66 = v63(v61, 1, v62);
  uint64_t v67 = v57;
  if (v66 != 1) {
    goto LABEL_45;
  }
  outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
LABEL_48:
  uint64_t v85 = *(void *)(v67
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context);
  uint64_t v86 = *(void *)(v114
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context);
  if (*(unsigned char *)(v114
                + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context
                + 8) == 1)
  {
    switch(v86)
    {
      case 1:
        if (v85 == 1) {
          goto LABEL_59;
        }
        goto LABEL_46;
      case 2:
        if (v85 == 2) {
          goto LABEL_59;
        }
        goto LABEL_46;
      case 3:
        if (v85 == 3) {
          goto LABEL_59;
        }
        goto LABEL_46;
      default:
        if (!v85) {
          goto LABEL_59;
        }
        goto LABEL_46;
    }
  }
  if (v85 == v86)
  {
LABEL_59:
    int v87 = *(unsigned __int8 *)(v67
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inout);
    int v88 = *(unsigned __int8 *)(v114
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inout);
    swift_release();
    swift_release();
    uint64_t v7 = v94;
    uint64_t v37 = v96;
    uint64_t v9 = v97;
    uint64_t v41 = v95;
    uint64_t v4 = v55;
    if (v87 != v88)
    {
      char v82 = 0;
      return v82 & 1;
    }
LABEL_61:
    uint64_t v89 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
    uint64_t v90 = v41;
    v89(v9, v37, v4);
    v89(v7, v90, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v82 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v91 = *(void (**)(char *, uint64_t))(v42 + 8);
    v91(v7, v4);
    v91(v9, v4);
    return v82 & 1;
  }
LABEL_46:
  swift_release();
  swift_release();
  char v82 = 0;
  return v82 & 1;
}

uint64_t specialized static PgQuery_CoerceToDomain.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v97 = a1;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v82 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  uint64_t v12 = MEMORY[0x1F4188790](Node);
  uint64_t v89 = (uint64_t)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v91 = (uint64_t)&v82 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v93 = (uint64_t)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v82 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v90 = (uint64_t)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v92 = (uint64_t)&v82 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v94 = (uint64_t)&v82 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v82 - v27;
  uint64_t v29 = *(int *)(type metadata accessor for PgQuery_CoerceToDomain(0) + 20);
  uint64_t v30 = *(void *)(v97 + v29);
  uint64_t v31 = *(void *)(a2 + v29);
  uint64_t v32 = a2;
  if (v30 == v31)
  {
LABEL_43:
    char v78 = *(void (**)(char *))(v4 + 16);
    uint64_t v79 = v32;
    v78(v9);
    ((void (*)(char *, uint64_t, uint64_t))v78)(v7, v79, v3);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v75 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v80 = *(void (**)(char *, uint64_t))(v4 + 8);
    v80(v7, v3);
    v80(v9, v3);
    return v75 & 1;
  }
  char v84 = v9;
  uint64_t v85 = a2;
  uint64_t v83 = v7;
  uint64_t v87 = v4;
  uint64_t v88 = v3;
  uint64_t v33 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v34 = v31;
  uint64_t v35 = v30;
  outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v36 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v33, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  unsigned int v38 = v37(v19, 1, Node);
  uint64_t v95 = v34;
  uint64_t v96 = v35;
  if (v38 == 1)
  {
    uint64_t v86 = Node;
    unsigned int v39 = v37((char *)v36, 1, Node);
    swift_retain();
    swift_retain();
    if (v39 == 1)
    {
      uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v37;
      outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v3 = v88;
      uint64_t v41 = v95;
      goto LABEL_11;
    }
    uint64_t v43 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_29:
    outlined destroy of AnyValue?((uint64_t)v19, v43);
    outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_34;
  }
  uint64_t v42 = v94;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v94, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v37((char *)v36, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v43 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_28:
    outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
    goto LABEL_29;
  }
  uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v37;
  uint64_t v44 = v42;
  uint64_t v45 = v91;
  outlined init with take of PgQuery_OidList(v36, v91, type metadata accessor for PgQuery_Node);
  uint64_t v86 = Node;
  uint64_t v46 = *(int *)(Node + 20);
  uint64_t v47 = *(void *)(v44 + v46);
  uint64_t v48 = *(void *)(v45 + v46);
  swift_retain();
  swift_retain();
  if (v47 != v48)
  {
    swift_retain();
    swift_retain();
    BOOL v49 = closure #1 in static PgQuery_Node.== infix(_:_:)(v47, v48);
    swift_release();
    swift_release();
    if (!v49)
    {
      outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
      uint64_t v43 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v42 = v94;
      goto LABEL_28;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v50 = v94;
  uint64_t v3 = v88;
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v41 = v95;
  if ((v51 & 1) == 0) {
    goto LABEL_34;
  }
LABEL_11:
  uint64_t v52 = v96
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  uint64_t v53 = v41;
  uint64_t v54 = v15;
  uint64_t v55 = v92;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v92, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v56 = v93;
  uint64_t v57 = v93 + *(int *)(v54 + 48);
  outlined init with copy of PgQuery_Alias?(v52, v93, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v55, v57, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v58 = v86;
  uint64_t v59 = v40;
  if (v40(v56, 1, v86) != 1)
  {
    uint64_t v64 = v90;
    outlined init with copy of PgQuery_Alias?(v56, v90, &demangling cache variable for type metadata for PgQuery_Node?);
    int v65 = v59(v57, 1, v58);
    uint64_t v61 = v87;
    if (v65 == 1)
    {
      int v66 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v67 = v89;
      outlined init with take of PgQuery_OidList(v57, v89, type metadata accessor for PgQuery_Node);
      uint64_t v68 = *(int *)(v58 + 20);
      uint64_t v69 = *(void *)(v64 + v68);
      uint64_t v70 = *(void *)(v67 + v68);
      if (v69 == v70
        || (swift_retain(),
            swift_retain(),
            BOOL v71 = closure #1 in static PgQuery_Node.== infix(_:_:)(v69, v70),
            swift_release(),
            swift_release(),
            v71))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v62 = v96;
        uint64_t v63 = v53;
        if ((v72 & 1) == 0) {
          goto LABEL_34;
        }
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
      int v66 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
LABEL_33:
    outlined destroy of AnyValue?(v56, v66);
    outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_34;
  }
  unsigned int v60 = v40(v57, 1, v58);
  uint64_t v61 = v87;
  if (v60 != 1)
  {
    int v66 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_33;
  }
  outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v62 = v96;
  uint64_t v63 = v53;
LABEL_20:
  if (*(_DWORD *)(v62
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) == *(_DWORD *)(v63 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
    && *(_DWORD *)(v62
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) == *(_DWORD *)(v63 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod)
    && *(_DWORD *)(v62
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) == *(_DWORD *)(v63 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid))
  {
    uint64_t v73 = *(void *)(v62
                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat);
    uint64_t v74 = *(void *)(v63
                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat);
    if (*(unsigned char *)(v63
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat
                  + 8) == 1)
    {
      switch(v74)
      {
        case 1:
          if (v73 == 1) {
            goto LABEL_42;
          }
          goto LABEL_34;
        case 2:
          if (v73 == 2) {
            goto LABEL_42;
          }
          goto LABEL_34;
        case 3:
          if (v73 == 3) {
            goto LABEL_42;
          }
          goto LABEL_34;
        default:
          if (!v73) {
            goto LABEL_42;
          }
          goto LABEL_34;
      }
    }
    if (v73 == v74)
    {
LABEL_42:
      int v76 = *(_DWORD *)(v62
                      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      int v77 = *(_DWORD *)(v63
                      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      uint64_t v7 = v83;
      uint64_t v9 = v84;
      uint64_t v32 = v85;
      uint64_t v4 = v61;
      if (v76 != v77)
      {
        char v75 = 0;
        return v75 & 1;
      }
      goto LABEL_43;
    }
  }
LABEL_34:
  swift_release();
  swift_release();
  char v75 = 0;
  return v75 & 1;
}

uint64_t specialized static PgQuery_AlterTableStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v50 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  BOOL v49 = (char *)&v48 - v7;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v9 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v53 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v48 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
  uint64_t v25 = *(int *)(AlterTableStmt + 32);
  uint64_t v54 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = AlterTableStmt;
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v28 = *(int *)(v27 + 32);
  uint64_t v55 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v30(v29, 1, RangeVar) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_8;
    }
  }
  else
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v30(v29, 1, RangeVar) != 1)
    {
      uint64_t v32 = v53;
      outlined init with take of PgQuery_OidList(v29, v53, type metadata accessor for PgQuery_RangeVar);
      char v33 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v18, v32);
      outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((v33 & 1) == 0)
      {
LABEL_11:
        char v31 = 0;
        return v31 & 1;
      }
LABEL_8:
      uint64_t v34 = v54;
      uint64_t v35 = v55;
      if (specialized static Array<A>.== infix(_:_:)(*v54, *v55))
      {
        uint64_t v36 = v35[1];
        uint64_t v37 = *((unsigned __int8 *)v35 + 16);
        uint64_t v38 = destructiveProjectEnumData for StorableValue(v34[1], *((unsigned __int8 *)v34 + 16));
        if (v38 == destructiveProjectEnumData for StorableValue(v36, v37)
          && *((unsigned __int8 *)v34 + 17) == *((unsigned __int8 *)v35 + 17))
        {
          uint64_t v40 = (char *)v34 + *(int *)(v27 + 28);
          uint64_t v42 = v51;
          uint64_t v41 = v52;
          uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
          uint64_t v44 = v49;
          v43(v49, v40, v52);
          uint64_t v45 = (char *)v35 + *(int *)(v27 + 28);
          uint64_t v46 = v50;
          v43(v50, v45, v41);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v47 = *(void (**)(char *, uint64_t))(v42 + 8);
          v47(v46, v41);
          v47(v44, v41);
          return v31 & 1;
        }
      }
      goto LABEL_11;
    }
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  char v31 = 0;
  return v31 & 1;
}

uint64_t specialized static PgQuery_AlterOwnerStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v118 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v96 - v8;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v105 = *(void *)(RoleSpec - 8);
  uint64_t v106 = RoleSpec;
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v102 = (uint64_t)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1F4188790](v104);
  uint64_t v107 = (uint64_t)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v103 = (uint64_t *)((char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v14);
  uint64_t v110 = (uint64_t)&v96 - v16;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v113 = *(void *)(Node - 8);
  uint64_t v114 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v108 = (uint64_t)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v112);
  uint64_t v116 = (uint64_t)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v111 = (uint64_t)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v115 = (char *)&v96 - v23;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v117 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v109 = (uint64_t)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v96 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  uint64_t v32 = (char *)&v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v96 - v33;
  AlterOwneruint64_t Stmt = type metadata accessor for PgQuery_AlterOwnerStmt(0);
  uint64_t v36 = a1;
  uint64_t v37 = *(int *)(AlterOwnerStmt + 20);
  uint64_t v38 = *(void *)(a1 + v37);
  uint64_t v39 = a2;
  uint64_t v40 = *(void *)(a2 + v37);
  uint64_t v41 = v39;
  if (v38 == v40) {
    goto LABEL_23;
  }
  uint64_t v96 = v36;
  uint64_t v97 = v39;
  uint64_t v98 = v9;
  uint64_t v99 = v4;
  uint64_t v101 = v7;
  uint64_t v42 = *(void *)(v40 + 16);
  uint64_t v43 = *(unsigned __int8 *)(v40 + 24);
  uint64_t v44 = destructiveProjectEnumData for StorableValue(*(void *)(v38 + 16), *(unsigned __int8 *)(v38 + 24));
  if (v44 != destructiveProjectEnumData for StorableValue(v42, v43))
  {
LABEL_36:
    char v85 = 0;
    return v85 & 1;
  }
  uint64_t v45 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v46 = (uint64_t)&v28[*(int *)(v26 + 48)];
  outlined init with copy of PgQuery_Alias?(v45, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v34, v46, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v117 + 48);
  int v48 = v47(v28, 1, RangeVar);
  uint64_t v100 = v38;
  if (v48 == 1)
  {
    int v49 = v47((char *)v46, 1, RangeVar);
    swift_retain();
    uint64_t v50 = v40;
    swift_retain();
    uint64_t v51 = v101;
    if (v49 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_10;
    }
LABEL_8:
    outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    uint64_t v53 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
LABEL_34:
    outlined destroy of AnyValue?((uint64_t)v34, v53);
    goto LABEL_35;
  }
  uint64_t v50 = v40;
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, (uint64_t)v32, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  int v52 = v47((char *)v46, 1, RangeVar);
  uint64_t v51 = v101;
  if (v52 == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_8;
  }
  uint64_t v54 = v109;
  outlined init with take of PgQuery_OidList(v46, v109, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  char v55 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v32, v54);
  outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v55 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_10:
  uint64_t v56 = v100
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  uint64_t v34 = v115;
  outlined init with copy of PgQuery_Alias?(v50+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, (uint64_t)v115, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v57 = v116;
  uint64_t v58 = v116 + *(int *)(v112 + 48);
  outlined init with copy of PgQuery_Alias?(v56, v116, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v34, v58, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v59 = v114;
  unsigned int v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48);
  if (v60(v57, 1, v114) == 1)
  {
    int v61 = v60(v58, 1, v59);
    uint64_t v62 = v99;
    if (v61 == 1)
    {
      outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_19;
    }
    uint64_t v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_33;
  }
  uint64_t v63 = v111;
  outlined init with copy of PgQuery_Alias?(v57, v111, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v60(v58, 1, v59) == 1)
  {
    uint64_t v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_32:
    outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
LABEL_33:
    outlined destroy of AnyValue?(v57, v64);
    uint64_t v53 = &demangling cache variable for type metadata for PgQuery_Node?;
    goto LABEL_34;
  }
  uint64_t v65 = v108;
  outlined init with take of PgQuery_OidList(v58, v108, type metadata accessor for PgQuery_Node);
  uint64_t v66 = *(int *)(v59 + 20);
  uint64_t v67 = *(void *)(v63 + v66);
  uint64_t v68 = *(void *)(v65 + v66);
  if (v67 != v68)
  {
    swift_retain();
    swift_retain();
    BOOL v69 = closure #1 in static PgQuery_Node.== infix(_:_:)(v67, v68);
    swift_release();
    swift_release();
    if (!v69)
    {
      outlined destroy of PgQuery_Alias(v108, type metadata accessor for PgQuery_Node);
      uint64_t v64 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v63 = v111;
      goto LABEL_32;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v70 = v111;
  uint64_t v71 = v108;
  uint64_t v72 = v99;
  char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_Node);
  uint64_t v74 = v70;
  uint64_t v62 = v72;
  outlined destroy of PgQuery_Alias(v74, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v51 = v101;
  if ((v73 & 1) == 0)
  {
LABEL_35:
    swift_release();
    swift_release();
    goto LABEL_36;
  }
LABEL_19:
  uint64_t v75 = v100
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner;
  uint64_t v76 = v110;
  outlined init with copy of PgQuery_Alias?(v50+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, v110, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v77 = v107;
  uint64_t v78 = v107 + *(int *)(v104 + 48);
  outlined init with copy of PgQuery_Alias?(v75, v107, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v79 = v77;
  outlined init with copy of PgQuery_Alias?(v76, v78, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v80 = v106;
  uint64_t v81 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48);
  if (v81(v77, 1, v106) != 1)
  {
    uint64_t v87 = v62;
    uint64_t v88 = v103;
    outlined init with copy of PgQuery_Alias?(v77, (uint64_t)v103, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v81(v78, 1, v80) == 1)
    {
      uint64_t v89 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
      uint64_t v90 = (uint64_t)v88;
    }
    else
    {
      uint64_t v91 = v102;
      outlined init with take of PgQuery_OidList(v78, v102, type metadata accessor for PgQuery_RoleSpec);
      uint64_t v92 = *v88;
      uint64_t v93 = *(void *)v91;
      uint64_t v90 = (uint64_t)v88;
      if (*(unsigned char *)(v91 + 8) == 1)
      {
        uint64_t v62 = v87;
        switch(v93)
        {
          case 1:
            if (v92 != 1) {
              goto LABEL_52;
            }
            goto LABEL_39;
          case 2:
            if (v92 != 2) {
              goto LABEL_52;
            }
            goto LABEL_39;
          case 3:
            if (v92 != 3) {
              goto LABEL_52;
            }
            goto LABEL_39;
          case 4:
            if (v92 != 4) {
              goto LABEL_52;
            }
            goto LABEL_39;
          default:
            if (!v92) {
              goto LABEL_39;
            }
            goto LABEL_52;
        }
      }
      uint64_t v62 = v87;
      if (v92 == v93)
      {
LABEL_39:
        if ((*(void *)(v90 + 16) == *(void *)(v91 + 16) && *(void *)(v90 + 24) == *(void *)(v91 + 24)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && *(_DWORD *)(v90 + 32) == *(_DWORD *)(v91 + 32))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v95 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_RoleSpec);
          outlined destroy of PgQuery_Alias(v90, type metadata accessor for PgQuery_RoleSpec);
          outlined destroy of AnyValue?(v79, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          outlined destroy of AnyValue?(v110, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          if (v95) {
            goto LABEL_22;
          }
          goto LABEL_35;
        }
      }
LABEL_52:
      outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_RoleSpec);
      uint64_t v89 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    }
    outlined destroy of PgQuery_Alias(v90, type metadata accessor for PgQuery_RoleSpec);
    goto LABEL_54;
  }
  if (v81(v78, 1, v80) != 1)
  {
    uint64_t v89 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
LABEL_54:
    outlined destroy of AnyValue?(v79, v89);
    outlined destroy of AnyValue?(v110, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    goto LABEL_35;
  }
  outlined destroy of AnyValue?(v77, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of AnyValue?(v110, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
LABEL_22:
  swift_release();
  swift_release();
  uint64_t v9 = v98;
  uint64_t v7 = v51;
  uint64_t v41 = v97;
  uint64_t v36 = v96;
  uint64_t v4 = v62;
LABEL_23:
  uint64_t v82 = v118;
  uint64_t v83 = *(void (**)(char *, uint64_t, uint64_t))(v118 + 16);
  uint64_t v84 = v41;
  v83(v9, v36, v4);
  v83(v7, v84, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v85 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v86 = *(void (**)(char *, uint64_t))(v82 + 8);
  v86(v7, v4);
  v86(v9, v4);
  return v85 & 1;
}

uint64_t specialized static PgQuery_RowMarkClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v20 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(void *)(a2 + 8);
    if (*(unsigned char *)(a2 + 16) == 1)
    {
      switch(v12)
      {
        case 1:
          if (v11 == 1) {
            goto LABEL_7;
          }
          goto LABEL_29;
        case 2:
          if (v11 == 2) {
            goto LABEL_7;
          }
          goto LABEL_29;
        case 3:
          if (v11 == 3) {
            goto LABEL_7;
          }
          goto LABEL_29;
        case 4:
          if (v11 == 4) {
            goto LABEL_7;
          }
          goto LABEL_29;
        case 5:
          if (v11 == 5) {
            goto LABEL_7;
          }
          goto LABEL_29;
        default:
          if (!v11) {
            goto LABEL_7;
          }
          goto LABEL_29;
      }
    }
    if (v11 == v12)
    {
LABEL_7:
      uint64_t v13 = *(void *)(a1 + 24);
      uint64_t v14 = *(void *)(a2 + 24);
      if (*(unsigned char *)(a2 + 32) == 1)
      {
        switch(v14)
        {
          case 1:
            if (v13 == 1) {
              goto LABEL_28;
            }
            goto LABEL_29;
          case 2:
            if (v13 == 2) {
              goto LABEL_28;
            }
            goto LABEL_29;
          case 3:
            if (v13 == 3) {
              goto LABEL_28;
            }
            goto LABEL_29;
          default:
            if (!v13) {
              goto LABEL_28;
            }
            goto LABEL_29;
        }
      }
      if (v13 == v14)
      {
LABEL_28:
        if (*(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33))
        {
          uint64_t RowMarkClause = type metadata accessor for PgQuery_RowMarkClause(0);
          uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
          v18(v10, a1 + *(int *)(RowMarkClause + 32), v4);
          v18(v8, a2 + *(int *)(RowMarkClause + 32), v4);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
          v19(v8, v4);
          v19(v10, v4);
          return v15 & 1;
        }
      }
    }
  }
LABEL_29:
  char v15 = 0;
  return v15 & 1;
}

uint64_t specialized static PgQuery_TableSampleClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v49 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v55 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v54 = (uint64_t)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  char v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v56 = (uint64_t)&v49 - v20;
  uint64_t TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = *(int *)(TableSampleClause + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(v23 + v24);
  if (v25 == v26) {
    goto LABEL_14;
  }
  if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v26 + 16))
  {
LABEL_19:
    char v46 = 0;
    return v46 & 1;
  }
  uint64_t v49 = v22;
  uint64_t v50 = v23;
  uint64_t v51 = v8;
  int v52 = v10;
  uint64_t v53 = v5;
  uint64_t v27 = *(void *)(v25 + 24);
  uint64_t v28 = *(void *)(v26 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v29 = specialized static Array<A>.== infix(_:_:)(v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
  {
LABEL_18:
    swift_release();
    swift_release();
    goto LABEL_19;
  }
  uint64_t v30 = v25
      + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable;
  uint64_t v31 = v56;
  outlined init with copy of PgQuery_Alias?(v26+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable, v56, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v32 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v30, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v31, v32, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
  if (v33((uint64_t)v15, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
    int v35 = v33(v32, 1, Node);
    uint64_t v5 = v53;
    if (v35 == 1)
    {
      uint64_t v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v37 = v54;
      outlined init with take of PgQuery_OidList(v32, v54, type metadata accessor for PgQuery_Node);
      uint64_t v38 = *(int *)(Node + 20);
      uint64_t v39 = *(void *)&v19[v38];
      uint64_t v40 = *(void *)(v37 + v38);
      if (v39 == v40
        || (swift_retain(),
            swift_retain(),
            BOOL v41 = closure #1 in static PgQuery_Node.== infix(_:_:)(v39, v40),
            swift_release(),
            swift_release(),
            v41))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v10 = v52;
        if (v42) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
      outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_Node);
      uint64_t v36 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_Node);
    goto LABEL_17;
  }
  int v34 = v33(v32, 1, Node);
  uint64_t v10 = v52;
  uint64_t v5 = v53;
  if (v34 != 1)
  {
    uint64_t v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_17:
    outlined destroy of AnyValue?((uint64_t)v15, v36);
    outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_18;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_13:
  swift_release();
  swift_release();
  uint64_t v23 = v50;
  uint64_t v8 = v51;
  uint64_t v22 = v49;
LABEL_14:
  uint64_t v43 = v10;
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v45 = v23;
  v44(v43, v22, v4);
  v44(v8, v45, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v47 = *(void (**)(char *, uint64_t))(v5 + 8);
  v47(v8, v4);
  v47(v43, v4);
  return v46 & 1;
}

uint64_t specialized static PgQuery_RangeFunction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  int v48 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v47 = (char *)&v43 - v7;
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v9 = *(void *)(Alias - 8);
  MEMORY[0x1F4188790](Alias);
  uint64_t v11 = (uint64_t *)((char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (uint64_t *)((char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v43 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v43 - v22;
  if (*a1 != *a2
    || a1[1] != a2[1]
    || a1[2] != a2[2]
    || (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 1), *((void *)a2 + 1)) & 1) == 0)
  {
    goto LABEL_21;
  }
  uint64_t RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
  uint64_t v45 = v9;
  uint64_t v25 = RangeFunction;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a1[*(int *)(RangeFunction + 40)], (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v44 = v25;
  outlined init with copy of PgQuery_Alias?((uint64_t)&a2[*(int *)(v25 + 40)], (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v46 = v26;
  uint64_t v27 = v45;
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v26, &demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v28((uint64_t)v14, 1, Alias) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Alias?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
    if (v28(v46, 1, Alias) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Alias?);
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Alias?);
  if (v28(v46, 1, Alias) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Alias?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Alias);
LABEL_12:
    uint64_t v39 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
    uint64_t v40 = (uint64_t)v14;
LABEL_20:
    outlined destroy of AnyValue?(v40, v39);
    goto LABEL_21;
  }
  outlined init with take of PgQuery_OidList(v46, (uint64_t)v11, type metadata accessor for PgQuery_Alias);
  if ((*v18 != *v11 || v18[1] != v11[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v18[2], v11[2]) & 1) == 0)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Alias);
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Alias?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Alias);
    uint64_t v40 = (uint64_t)v14;
    uint64_t v39 = &demangling cache variable for type metadata for PgQuery_Alias?;
    goto LABEL_20;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Alias);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Alias);
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Alias?);
  if ((v41 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_8:
  if ((specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 2), *((void *)a2 + 2)) & 1) == 0)
  {
LABEL_21:
    char v37 = 0;
    return v37 & 1;
  }
  uint64_t v29 = v44;
  uint64_t v30 = &a1[*(int *)(v44 + 36)];
  uint64_t v32 = v49;
  uint64_t v31 = v50;
  uint64_t v33 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v49 + 16);
  int v34 = v47;
  v33(v47, v30, v50);
  int v35 = &a2[*(int *)(v29 + 36)];
  uint64_t v36 = v48;
  v33(v48, v35, v31);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v32 + 8);
  v38(v36, v31);
  v38(v34, v31);
  return v37 & 1;
}

uint64_t specialized static PgQuery_PartitionSpec.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a2 + 16)) & 1) != 0
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24))
    {
      uint64_t PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
      uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v14(v10, a1 + *(int *)(PartitionSpec + 28), v4);
      v14(v8, a2 + *(int *)(PartitionSpec + 28), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_PartitionElem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v58 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v63 = (uint64_t)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v64 = (uint64_t)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v65 = (uint64_t)&v58 - v20;
  uint64_t PartitionElem = type metadata accessor for PgQuery_PartitionElem(0);
  uint64_t v22 = a1;
  uint64_t v23 = *(int *)(PartitionElem + 20);
  uint64_t v24 = *(void *)(a1 + v23);
  uint64_t v25 = *(void *)(a2 + v23);
  if (v24 == v25) {
    goto LABEL_19;
  }
  uint64_t v58 = a2;
  uint64_t v59 = v22;
  unsigned int v60 = v8;
  uint64_t v61 = v5;
  BOOL v26 = *(void *)(v24 + 16) == *(void *)(v25 + 16) && *(void *)(v24 + 24) == *(void *)(v25 + 24);
  uint64_t v27 = v24;
  if (v26 || (char v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v62 = v4;
    uint64_t v29 = v27
        + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
    uint64_t v30 = v65;
    outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, v65, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v31 = (uint64_t)&v16[*(int *)(v14 + 48)];
    outlined init with copy of PgQuery_Alias?(v29, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v30, v31, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (v32((uint64_t)v16, 1, Node) == 1)
    {
      int v33 = v32(v31, 1, Node);
      swift_retain();
      swift_retain();
      uint64_t v4 = v62;
      if (v33 == 1)
      {
        outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v65, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_16:
        uint64_t v46 = *(void *)(v27
                        + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
        uint64_t v47 = *(void *)(v25
                        + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v48 = specialized static Array<A>.== infix(_:_:)(v46, v47);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v48)
        {
          uint64_t v49 = *(void *)(v27
                          + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass);
          uint64_t v50 = *(void *)(v25
                          + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v51 = specialized static Array<A>.== infix(_:_:)(v49, v50);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v51)
          {
            int v52 = *(_DWORD *)(v27
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
            int v53 = *(_DWORD *)(v25
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
            swift_release();
            swift_release();
            uint64_t v8 = v60;
            uint64_t v5 = v61;
            a2 = v58;
            uint64_t v22 = v59;
            if (v52 == v53)
            {
LABEL_19:
              uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
              v54(v10, v22, v4);
              v54(v8, a2, v4);
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
              uint64_t v55 = v5;
              char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v56 = *(void (**)(char *, uint64_t))(v55 + 8);
              v56(v8, v4);
              v56(v10, v4);
              return v28 & 1;
            }
LABEL_24:
            char v28 = 0;
            return v28 & 1;
          }
        }
LABEL_23:
        swift_release();
        swift_release();
        goto LABEL_24;
      }
      uint64_t v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v34 = v64;
      outlined init with copy of PgQuery_Alias?((uint64_t)v16, v64, &demangling cache variable for type metadata for PgQuery_Node?);
      int v35 = v32(v31, 1, Node);
      uint64_t v4 = v62;
      if (v35 == 1)
      {
        swift_retain();
        swift_retain();
        uint64_t v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        uint64_t v37 = v31;
        uint64_t v38 = v34;
        uint64_t v39 = v63;
        outlined init with take of PgQuery_OidList(v37, v63, type metadata accessor for PgQuery_Node);
        uint64_t v40 = *(int *)(Node + 20);
        uint64_t v41 = *(void *)(v38 + v40);
        uint64_t v42 = *(void *)(v39 + v40);
        swift_retain();
        swift_retain();
        if (v41 == v42
          || (swift_retain(),
              swift_retain(),
              BOOL v43 = closure #1 in static PgQuery_Node.== infix(_:_:)(v41, v42),
              swift_release(),
              swift_release(),
              v43))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          uint64_t v44 = v64;
          char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
          outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of AnyValue?(v65, &demangling cache variable for type metadata for PgQuery_Node?);
          if ((v45 & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_16;
        }
        outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
        uint64_t v36 = &demangling cache variable for type metadata for PgQuery_Node?;
        uint64_t v34 = v64;
      }
      outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of AnyValue?((uint64_t)v16, v36);
    outlined destroy of AnyValue?(v65, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  return v28 & 1;
}

uint64_t specialized static PgQuery_LockingClause.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v20 - v9;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *(void *)a2))
  {
    uint64_t v11 = a1[1];
    uint64_t v12 = *(void *)(a2 + 8);
    if (*(unsigned char *)(a2 + 16) == 1)
    {
      switch(v12)
      {
        case 1:
          if (v11 == 1) {
            goto LABEL_7;
          }
          goto LABEL_24;
        case 2:
          if (v11 == 2) {
            goto LABEL_7;
          }
          goto LABEL_24;
        case 3:
          if (v11 == 3) {
            goto LABEL_7;
          }
          goto LABEL_24;
        case 4:
          if (v11 == 4) {
            goto LABEL_7;
          }
          goto LABEL_24;
        case 5:
          if (v11 == 5) {
            goto LABEL_7;
          }
          goto LABEL_24;
        default:
          if (!v11) {
            goto LABEL_7;
          }
          goto LABEL_24;
      }
    }
    if (v11 == v12)
    {
LABEL_7:
      uint64_t v13 = a1[3];
      uint64_t v14 = *(void *)(a2 + 24);
      if (*(unsigned char *)(a2 + 32) == 1)
      {
        switch(v14)
        {
          case 1:
            if (v13 == 1) {
              goto LABEL_27;
            }
            goto LABEL_24;
          case 2:
            if (v13 != 2) {
              goto LABEL_24;
            }
            goto LABEL_27;
          case 3:
            if (v13 == 3) {
              goto LABEL_27;
            }
            goto LABEL_24;
          default:
            if (!v13) {
              goto LABEL_27;
            }
            goto LABEL_24;
        }
      }
      if (v13 == v14)
      {
LABEL_27:
        uint64_t LockingClause = type metadata accessor for PgQuery_LockingClause(0);
        uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
        v18(v10, (char *)a1 + *(int *)(LockingClause + 28), v4);
        v18(v8, (char *)(a2 + *(int *)(LockingClause + 28)), v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
        v19(v8, v4);
        v19(v10, v4);
        return v15 & 1;
      }
    }
  }
LABEL_24:
  char v15 = 0;
  return v15 & 1;
}

uint64_t specialized static PgQuery_InferenceElem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for PgQuery_InferenceElem(0) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(),
        swift_retain(),
        BOOL v14 = closure #1 in static PgQuery_CollateExpr.== infix(_:_:)(v12, v13, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infercollid, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inferopclass), swift_release(), swift_release(), v14))
  {
    char v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static PgQuery_GrantRoleStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v60 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v58 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v57 = (char *)&v52 - v7;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v61 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v52 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v52 - v21;
  uint64_t v23 = a1;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0) {
    goto LABEL_42;
  }
  uint64_t v55 = v22;
  uint64_t v56 = v20;
  int v53 = v10;
  uint64_t v54 = v17;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 8), *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_42;
  }
  uint64_t v24 = a2;
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
    || *(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17))
  {
    goto LABEL_42;
  }
  uint64_t GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
  uint64_t v26 = (uint64_t)v55;
  outlined init with copy of PgQuery_Alias?(v23 + *(int *)(GrantRoleStmt + 40), (uint64_t)v55, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v27 = (uint64_t)v56;
  outlined init with copy of PgQuery_Alias?(a2 + *(int *)(GrantRoleStmt + 40), (uint64_t)v56, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?(v27, v28, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
  int v30 = v29(v13, 1, RoleSpec);
  int v52 = v13;
  if (v30 == 1)
  {
    outlined destroy of AnyValue?(v27, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?(v26, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v29((char *)v28, 1, RoleSpec) == 1)
    {
      uint64_t v31 = GrantRoleStmt;
      outlined destroy of AnyValue?((uint64_t)v52, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      goto LABEL_8;
    }
    goto LABEL_15;
  }
  uint64_t v40 = (uint64_t)v54;
  outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v54, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v29((char *)v28, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v56, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?(v26, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_RoleSpec);
LABEL_15:
    uint64_t v41 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    uint64_t v42 = (uint64_t)v52;
LABEL_41:
    outlined destroy of AnyValue?(v42, v41);
    goto LABEL_42;
  }
  uint64_t v31 = GrantRoleStmt;
  uint64_t v43 = (uint64_t)v53;
  outlined init with take of PgQuery_OidList(v28, (uint64_t)v53, type metadata accessor for PgQuery_RoleSpec);
  uint64_t v44 = *(void *)v40;
  uint64_t v45 = *(void *)v43;
  if (*(unsigned char *)(v43 + 8) == 1)
  {
    uint64_t v46 = (uint64_t)v56;
    switch(v45)
    {
      case 1:
        if (v44 != 1) {
          goto LABEL_40;
        }
        goto LABEL_23;
      case 2:
        if (v44 != 2) {
          goto LABEL_40;
        }
        goto LABEL_23;
      case 3:
        if (v44 != 3) {
          goto LABEL_40;
        }
        goto LABEL_23;
      case 4:
        if (v44 != 4) {
          goto LABEL_40;
        }
        goto LABEL_23;
      default:
        if (!v44) {
          goto LABEL_23;
        }
        goto LABEL_40;
    }
  }
  uint64_t v46 = (uint64_t)v56;
  if (v44 != v45)
  {
LABEL_40:
    outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_RoleSpec);
    outlined destroy of AnyValue?(v46, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v55, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_RoleSpec);
    uint64_t v42 = (uint64_t)v52;
    uint64_t v41 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
    goto LABEL_41;
  }
LABEL_23:
  if ((*(void *)(v40 + 16) != *(void *)(v43 + 16) || *(void *)(v40 + 24) != *(void *)(v43 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *(_DWORD *)(v40 + 32) != *(_DWORD *)(v43 + 32))
  {
    goto LABEL_40;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of AnyValue?(v46, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of AnyValue?((uint64_t)v55, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_RoleSpec);
  outlined destroy of AnyValue?((uint64_t)v52, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((v47 & 1) == 0) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v32 = v23;
  uint64_t v33 = *(void *)(v23 + 24);
  uint64_t v34 = *(void *)(v24 + 24);
  uint64_t v35 = v24;
  if (*(unsigned char *)(v24 + 32) != 1)
  {
    uint64_t v37 = v59;
    uint64_t v36 = v60;
    uint64_t v38 = v57;
    uint64_t v39 = v58;
    if (v33 != v34) {
      goto LABEL_42;
    }
    goto LABEL_32;
  }
  uint64_t v37 = v59;
  uint64_t v36 = v60;
  uint64_t v38 = v57;
  uint64_t v39 = v58;
  if (!v34)
  {
    if (!v33) {
      goto LABEL_32;
    }
    goto LABEL_42;
  }
  if (v34 != 1)
  {
    if (v33 == 2) {
      goto LABEL_32;
    }
LABEL_42:
    char v49 = 0;
    return v49 & 1;
  }
  if (v33 != 1) {
    goto LABEL_42;
  }
LABEL_32:
  char v48 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
  v48(v38, v32 + *(int *)(v31 + 36), v36);
  v48(v39, v35 + *(int *)(v31 + 36), v36);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v50 = *(void (**)(char *, uint64_t))(v37 + 8);
  v50(v39, v36);
  v50(v38, v36);
  return v49 & 1;
}

uint64_t specialized static PgQuery_DropOwnedStmt.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *(void *)a2) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 8);
  if (*(unsigned char *)(a2 + 16) != 1)
  {
    if (v11 == v12) {
      goto LABEL_8;
    }
LABEL_10:
    char v15 = 0;
    return v15 & 1;
  }
  if (!v12)
  {
    if (!v11) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  if (v12 != 1)
  {
    if (v11 == 2) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  if (v11 != 1) {
    goto LABEL_10;
  }
LABEL_8:
  DropOwneduint64_t Stmt = type metadata accessor for PgQuery_DropOwnedStmt(0);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v10, (char *)a1 + *(int *)(DropOwnedStmt + 24), v4);
  v14(v8, (char *)(a2 + *(int *)(DropOwnedStmt + 24)), v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t specialized static PgQuery_CreateSeqStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v45 = (char *)&v44 - v7;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v9 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  char v51 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v44 - v22;
  Sequint64_t Stmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
  uint64_t v25 = *(int *)(SeqStmt + 36);
  char v49 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = SeqStmt;
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v28 = *(int *)(v27 + 36);
  uint64_t v50 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  int v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v30(v29, 1, RangeVar) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v31 = (uint64_t)v51;
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v30(v29, 1, RangeVar) != 1)
    {
      outlined init with take of PgQuery_OidList(v29, v31, type metadata accessor for PgQuery_RangeVar);
      char v33 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v18, v31);
      outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((v33 & 1) == 0)
      {
LABEL_12:
        char v32 = 0;
        return v32 & 1;
      }
LABEL_8:
      uint64_t v34 = v49;
      uint64_t v35 = v50;
      if ((specialized static Array<A>.== infix(_:_:)(*v49, *v50) & 1) != 0
        && *((_DWORD *)v34 + 2) == *((_DWORD *)v35 + 2)
        && *((unsigned __int8 *)v34 + 12) == *((unsigned __int8 *)v35 + 12)
        && *((unsigned __int8 *)v34 + 13) == *((unsigned __int8 *)v35 + 13))
      {
        uint64_t v38 = v47;
        uint64_t v37 = v48;
        uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
        uint64_t v40 = v45;
        v39(v45, (char *)v34 + *(int *)(v27 + 32), v48);
        uint64_t v41 = (char *)v35 + *(int *)(v27 + 32);
        uint64_t v42 = v46;
        v39(v46, v41, v37);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v43 = *(void (**)(char *, uint64_t))(v38 + 8);
        v43(v42, v37);
        v43(v40, v37);
        return v32 & 1;
      }
      goto LABEL_12;
    }
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  char v32 = 0;
  return v32 & 1;
}

uint64_t specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v18 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0)
  {
    uint64_t v13 = a3(0);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v14(v12, (char *)a1 + *(int *)(v13 + 24), v6);
    v14(v10, (char *)a2 + *(int *)(v13 + 24), v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v10, v6);
    v16(v12, v6);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static PgQuery_AlterTableCmd.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v83 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v92 = *(void *)(Node - 8);
  uint64_t v93 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v88 = (uint64_t)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v91);
  uint64_t v95 = (uint64_t)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v89 = (uint64_t)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v94 = (uint64_t)&v83 - v17;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v19 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v90 = (uint64_t)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  MEMORY[0x1F4188790](v21);
  uint64_t v97 = (uint64_t)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v96 = (uint64_t)&v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v98 = (uint64_t)&v83 - v26;
  uint64_t AlterTableCmd = type metadata accessor for PgQuery_AlterTableCmd(0);
  uint64_t v28 = a1;
  uint64_t v29 = *(int *)(AlterTableCmd + 20);
  uint64_t v30 = *(void *)(a1 + v29);
  uint64_t v31 = *(void *)(a2 + v29);
  if (v30 == v31) {
    goto LABEL_60;
  }
  uint64_t v83 = a2;
  uint64_t v84 = v28;
  uint64_t v85 = v5;
  uint64_t v86 = v8;
  uint64_t v87 = v4;
  uint64_t v32 = *(void *)(v31 + 16);
  uint64_t v33 = *(unsigned __int8 *)(v31 + 24);
  uint64_t v34 = destructiveProjectEnumData for StorableValue(*(void *)(v30 + 16), *(unsigned __int8 *)(v30 + 24));
  if (v34 != destructiveProjectEnumData for StorableValue(v32, v33)) {
    goto LABEL_59;
  }
  if (*(void *)(v30 + 32) == *(void *)(v31 + 32) && *(void *)(v30 + 40) == *(void *)(v31 + 40)
    || (char v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_DWORD *)(v30 + 48) == *(_DWORD *)(v31 + 48))
    {
      uint64_t v36 = v30
          + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner;
      uint64_t v37 = v98;
      outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, v98, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      uint64_t v38 = *(int *)(v21 + 48);
      uint64_t v39 = v97;
      uint64_t v40 = v97 + v38;
      outlined init with copy of PgQuery_Alias?(v36, v97, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined init with copy of PgQuery_Alias?(v37, v40, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
      if (v41(v39, 1, RoleSpec) == 1)
      {
        int v42 = v41(v40, 1, RoleSpec);
        swift_retain();
        swift_retain();
        if (v42 == 1)
        {
          outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          outlined destroy of AnyValue?(v98, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          uint64_t v8 = v86;
          uint64_t v4 = v87;
          uint64_t v43 = v95;
LABEL_10:
          uint64_t v44 = v30
              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def;
          uint64_t v45 = v94;
          outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, v94, &demangling cache variable for type metadata for PgQuery_Node?);
          uint64_t v46 = v43 + *(int *)(v91 + 48);
          outlined init with copy of PgQuery_Alias?(v44, v43, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined init with copy of PgQuery_Alias?(v45, v46, &demangling cache variable for type metadata for PgQuery_Node?);
          uint64_t v47 = v93;
          uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48);
          if (v48(v43, 1, v93) == 1)
          {
            if (v48(v46, 1, v47) == 1)
            {
              outlined destroy of AnyValue?(v43, &demangling cache variable for type metadata for PgQuery_Node?);
              outlined destroy of AnyValue?(v94, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_33:
              uint64_t v70 = *(void *)(v30
                              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
              uint64_t v71 = *(void *)(v31
                              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
              if (*(unsigned char *)(v31
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
                            + 8) == 1)
              {
                if (v71)
                {
                  if (v71 == 1)
                  {
                    if (v70 == 1) {
                      goto LABEL_58;
                    }
                  }
                  else if (v70 == 2)
                  {
                    goto LABEL_58;
                  }
                  goto LABEL_51;
                }
                if (!v70)
                {
LABEL_58:
                  int v74 = *(unsigned __int8 *)(v30
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
                  int v75 = *(unsigned __int8 *)(v31
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
                  swift_release();
                  swift_release();
                  BOOL v76 = v74 == v75;
                  uint64_t v28 = v84;
                  uint64_t v5 = v85;
                  a2 = v83;
                  if (!v76) {
                    goto LABEL_59;
                  }
LABEL_60:
                  uint64_t v77 = v5;
                  uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
                  v78(v10, v28, v4);
                  v78(v8, a2, v4);
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                  char v79 = dispatch thunk of static Equatable.== infix(_:_:)();
                  uint64_t v80 = v8;
                  char v35 = v79;
                  uint64_t v81 = *(void (**)(char *, uint64_t))(v77 + 8);
                  v81(v80, v4);
                  v81(v10, v4);
                  return v35 & 1;
                }
              }
              else if (v70 == v71)
              {
                goto LABEL_58;
              }
LABEL_51:
              swift_release();
              swift_release();
              char v35 = 0;
              return v35 & 1;
            }
            uint64_t v56 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
          }
          else
          {
            uint64_t v54 = v43;
            uint64_t v55 = v89;
            outlined init with copy of PgQuery_Alias?(v54, v89, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v48(v46, 1, v47) == 1)
            {
              uint64_t v56 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
              uint64_t v57 = v55;
            }
            else
            {
              uint64_t v61 = v46;
              uint64_t v62 = v47;
              uint64_t v63 = v88;
              outlined init with take of PgQuery_OidList(v61, v88, type metadata accessor for PgQuery_Node);
              uint64_t v64 = *(int *)(v62 + 20);
              uint64_t v65 = *(void *)(v55 + v64);
              uint64_t v66 = *(void *)(v63 + v64);
              if (v65 == v66
                || (swift_retain(),
                    swift_retain(),
                    BOOL v67 = closure #1 in static PgQuery_Node.== infix(_:_:)(v65, v66),
                    swift_release(),
                    swift_release(),
                    v67))
              {
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                uint64_t v68 = v89;
                char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
                outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
                outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_Node);
                outlined destroy of AnyValue?(v95, &demangling cache variable for type metadata for PgQuery_Node?);
                outlined destroy of AnyValue?(v94, &demangling cache variable for type metadata for PgQuery_Node?);
                if ((v69 & 1) == 0) {
                  goto LABEL_51;
                }
                goto LABEL_33;
              }
              outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
              uint64_t v56 = &demangling cache variable for type metadata for PgQuery_Node?;
              uint64_t v57 = v89;
            }
            uint64_t v43 = v95;
            outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
          }
          outlined destroy of AnyValue?(v43, v56);
          uint64_t v72 = &demangling cache variable for type metadata for PgQuery_Node?;
          uint64_t v73 = v94;
LABEL_50:
          outlined destroy of AnyValue?(v73, v72);
          goto LABEL_51;
        }
        uint64_t v50 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
      }
      else
      {
        char v49 = (uint64_t *)v96;
        outlined init with copy of PgQuery_Alias?(v39, v96, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
        if (v41(v40, 1, RoleSpec) == 1)
        {
          swift_retain();
          swift_retain();
          uint64_t v50 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
        }
        else
        {
          uint64_t v51 = v90;
          outlined init with take of PgQuery_OidList(v40, v90, type metadata accessor for PgQuery_RoleSpec);
          uint64_t v52 = *v49;
          uint64_t v53 = *(void *)v51;
          if (*(unsigned char *)(v51 + 8) == 1)
          {
            uint64_t v8 = v86;
            uint64_t v4 = v87;
            uint64_t v43 = v95;
            switch(v53)
            {
              case 1:
                if (v52 != 1) {
                  goto LABEL_47;
                }
                goto LABEL_23;
              case 2:
                if (v52 != 2) {
                  goto LABEL_47;
                }
                goto LABEL_23;
              case 3:
                if (v52 != 3) {
                  goto LABEL_47;
                }
                goto LABEL_23;
              case 4:
                if (v52 != 4) {
                  goto LABEL_47;
                }
                goto LABEL_23;
              default:
                if (!v52) {
                  goto LABEL_23;
                }
                goto LABEL_47;
            }
          }
          uint64_t v8 = v86;
          uint64_t v4 = v87;
          uint64_t v43 = v95;
          if (v52 == v53)
          {
LABEL_23:
            if ((*(void *)(v96 + 16) == *(void *)(v51 + 16) && *(void *)(v96 + 24) == *(void *)(v51 + 24)
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              && *(_DWORD *)(v96 + 32) == *(_DWORD *)(v51 + 32))
            {
              uint64_t v58 = *(int *)(RoleSpec + 28);
              uint64_t v59 = v96;
              uint64_t v87 = v96 + v58;
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
              swift_retain();
              swift_retain();
              char v60 = dispatch thunk of static Equatable.== infix(_:_:)();
              outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_RoleSpec);
              outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_RoleSpec);
              outlined destroy of AnyValue?(v97, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
              outlined destroy of AnyValue?(v98, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
              if ((v60 & 1) == 0) {
                goto LABEL_51;
              }
              goto LABEL_10;
            }
          }
LABEL_47:
          swift_retain();
          swift_retain();
          outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_RoleSpec);
          uint64_t v50 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
          char v49 = (uint64_t *)v96;
          uint64_t v39 = v97;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v49, type metadata accessor for PgQuery_RoleSpec);
      }
      outlined destroy of AnyValue?(v39, v50);
      uint64_t v72 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
      uint64_t v73 = v98;
      goto LABEL_50;
    }
LABEL_59:
    char v35 = 0;
  }
  return v35 & 1;
}

uint64_t specialized static PgQuery_AlterRoleStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v50 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  char v49 = (char *)&v48 - v7;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v9 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v53 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v48 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v48 - v22;
  AlterRoleuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
  uint64_t v25 = *(int *)(AlterRoleStmt + 28);
  uint64_t v54 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = AlterRoleStmt;
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v28 = *(int *)(v27 + 28);
  uint64_t v55 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, RoleSpec) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if (v30(v29, 1, RoleSpec) != 1)
    {
      uint64_t v43 = v53;
      outlined init with take of PgQuery_OidList(v29, v53, type metadata accessor for PgQuery_RoleSpec);
      uint64_t v44 = *(void *)v18;
      uint64_t v45 = *(void *)v43;
      if (*(unsigned char *)(v43 + 8) == 1)
      {
        switch(v45)
        {
          case 1:
            if (v44 != 1) {
              goto LABEL_28;
            }
            goto LABEL_15;
          case 2:
            if (v44 != 2) {
              goto LABEL_28;
            }
            goto LABEL_15;
          case 3:
            if (v44 != 3) {
              goto LABEL_28;
            }
            goto LABEL_15;
          case 4:
            if (v44 != 4) {
              goto LABEL_28;
            }
            goto LABEL_15;
          default:
            if (!v44) {
              goto LABEL_15;
            }
            goto LABEL_28;
        }
      }
      if (v44 == v45)
      {
LABEL_15:
        if ((*((void *)v18 + 2) == *(void *)(v43 + 16) && *((void *)v18 + 3) == *(void *)(v43 + 24)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && *((_DWORD *)v18 + 8) == *(_DWORD *)(v43 + 32))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_RoleSpec);
          outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
          outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          if (v46) {
            goto LABEL_4;
          }
LABEL_30:
          char v39 = 0;
          return v39 & 1;
        }
      }
LABEL_28:
      outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_RoleSpec);
      outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
      uint64_t v42 = (uint64_t)v14;
      uint64_t v41 = &demangling cache variable for type metadata for PgQuery_RoleSpec?;
LABEL_29:
      outlined destroy of AnyValue?(v42, v41);
      goto LABEL_30;
    }
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RoleSpec);
LABEL_9:
    uint64_t v41 = &demangling cache variable for type metadata for (PgQuery_RoleSpec?, PgQuery_RoleSpec?);
    uint64_t v42 = (uint64_t)v14;
    goto LABEL_29;
  }
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if (v30(v29, 1, RoleSpec) != 1) {
    goto LABEL_9;
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
LABEL_4:
  uint64_t v31 = v54;
  uint64_t v32 = v55;
  if ((specialized static Array<A>.== infix(_:_:)(*v54, *v55) & 1) == 0 || *((_DWORD *)v31 + 2) != *((_DWORD *)v32 + 2)) {
    goto LABEL_30;
  }
  uint64_t v34 = v51;
  uint64_t v33 = v52;
  char v35 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  uint64_t v36 = v49;
  v35(v49, (char *)v31 + *(int *)(v27 + 24), v52);
  uint64_t v37 = (char *)v32 + *(int *)(v27 + 24);
  uint64_t v38 = v50;
  v35(v50, v37, v33);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v34 + 8);
  v40(v38, v33);
  v40(v36, v33);
  return v39 & 1;
}

uint64_t specialized static PgQuery_AlterEnumStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0)
  {
LABEL_15:
    char v12 = 0;
    return v12 & 1;
  }
  BOOL v11 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32)
      || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*(void *)(a1 + 40) == *(void *)(a2 + 40) && *(void *)(a1 + 48) == *(void *)(a2 + 48)
        || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56)
          && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a2 + 57))
        {
          AlterEnumuint64_t Stmt = type metadata accessor for PgQuery_AlterEnumStmt(0);
          uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
          v15(v10, a1 + *(int *)(AlterEnumStmt + 40), v4);
          v15(v8, a2 + *(int *)(AlterEnumStmt + 40), v4);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
          v16(v8, v4);
          v16(v10, v4);
          return v12 & 1;
        }
        goto LABEL_15;
      }
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_XmlSerialize.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v74 - v9;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v84 = *(void *)(TypeName - 8);
  uint64_t v85 = TypeName;
  MEMORY[0x1F4188790](TypeName);
  uint64_t v80 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1F4188790](v83);
  uint64_t v87 = (uint64_t)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v81 = (uint64_t)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v86 = (uint64_t)&v74 - v17;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v89 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v82 = (uint64_t)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v88 = (uint64_t)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v74 - v26;
  uint64_t v28 = *(int *)(type metadata accessor for PgQuery_XmlSerialize(0) + 20);
  uint64_t v29 = *(void *)(a1 + v28);
  uint64_t v30 = *(void *)(a2 + v28);
  if (v29 == v30) {
    goto LABEL_25;
  }
  uint64_t v78 = v8;
  char v79 = v10;
  uint64_t v31 = *(void *)(v29 + 16);
  uint64_t v32 = *(void *)(v30 + 16);
  if (*(unsigned char *)(v30 + 24) != 1)
  {
    if (v31 != v32) {
      goto LABEL_47;
    }
    goto LABEL_12;
  }
  if (!v32)
  {
    if (!v31) {
      goto LABEL_12;
    }
LABEL_47:
    char v64 = 0;
    return v64 & 1;
  }
  if (v32 != 1)
  {
    if (v31 == 2) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  if (v31 != 1) {
    goto LABEL_47;
  }
LABEL_12:
  uint64_t v74 = a1;
  uint64_t v75 = a2;
  uint64_t v76 = v5;
  uint64_t v77 = v4;
  uint64_t v33 = v29
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  uint64_t v34 = v30;
  uint64_t v35 = v29;
  uint64_t v36 = (uint64_t)v27;
  outlined init with copy of PgQuery_Alias?(v30+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v37 = (uint64_t)v22;
  uint64_t v38 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of PgQuery_Alias?(v33, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v38, &demangling cache variable for type metadata for PgQuery_Node?);
  char v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
  if (v39((uint64_t)v22, 1, Node) == 1)
  {
    int v40 = v39(v38, 1, Node);
    swift_retain();
    uint64_t v41 = v34;
    swift_retain();
    uint64_t v42 = v35;
    if (v40 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v43 = v77;
      goto LABEL_21;
    }
    char v46 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_44:
    outlined destroy of AnyValue?((uint64_t)v22, v46);
    uint64_t v71 = &demangling cache variable for type metadata for PgQuery_Node?;
    uint64_t v72 = v36;
    goto LABEL_45;
  }
  uint64_t v41 = v34;
  uint64_t v44 = v35;
  uint64_t v45 = v88;
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, v88, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v39(v38, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    char v46 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_43:
    outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
    goto LABEL_44;
  }
  uint64_t v47 = v82;
  outlined init with take of PgQuery_OidList(v38, v82, type metadata accessor for PgQuery_Node);
  uint64_t v48 = *(int *)(Node + 20);
  uint64_t v49 = *(void *)(v45 + v48);
  uint64_t v50 = *(void *)(v47 + v48);
  swift_retain();
  swift_retain();
  if (v49 != v50)
  {
    swift_retain();
    swift_retain();
    BOOL v51 = closure #1 in static PgQuery_Node.== infix(_:_:)(v49, v50);
    swift_release();
    swift_release();
    if (!v51)
    {
      outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
      char v46 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_43;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v52 = v77;
  char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
  uint64_t v43 = v52;
  outlined destroy of AnyValue?(v37, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v36, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v42 = v44;
  if ((v53 & 1) == 0)
  {
LABEL_46:
    swift_release();
    swift_release();
    goto LABEL_47;
  }
LABEL_21:
  uint64_t v54 = v42
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  uint64_t v55 = v86;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, v86, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v56 = v87;
  uint64_t v57 = v87 + *(int *)(v83 + 48);
  outlined init with copy of PgQuery_Alias?(v54, v87, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?(v55, v57, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v58 = v85;
  uint64_t v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
  if (v59(v56, 1, v85) == 1)
  {
    if (v59(v57, 1, v58) == 1)
    {
      uint64_t v60 = v43;
      outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_TypeName?);
      goto LABEL_24;
    }
    BOOL v67 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
    goto LABEL_41;
  }
  uint64_t v66 = v81;
  outlined init with copy of PgQuery_Alias?(v56, v81, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if (v59(v57, 1, v58) == 1)
  {
    BOOL v67 = &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?);
LABEL_40:
    outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_TypeName);
LABEL_41:
    outlined destroy of AnyValue?(v56, v67);
    uint64_t v71 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    uint64_t v72 = v55;
LABEL_45:
    outlined destroy of AnyValue?(v72, v71);
    goto LABEL_46;
  }
  uint64_t v68 = v80;
  outlined init with take of PgQuery_OidList(v57, v80, type metadata accessor for PgQuery_TypeName);
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)v66, *(void *)v68) & 1) == 0
    || *(_DWORD *)(v66 + 8) != *(_DWORD *)(v68 + 8)
    || *(unsigned __int8 *)(v66 + 12) != *(unsigned __int8 *)(v68 + 12)
    || *(unsigned __int8 *)(v66 + 13) != *(unsigned __int8 *)(v68 + 13)
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(v66 + 16), *(void *)(v68 + 16)) & 1) == 0
    || *(_DWORD *)(v66 + 24) != *(_DWORD *)(v68 + 24)
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(v66 + 32), *(void *)(v68 + 32)) & 1) == 0
    || *(_DWORD *)(v66 + 40) != *(_DWORD *)(v68 + 40))
  {
    outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_TypeName);
    BOOL v67 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    goto LABEL_40;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v69 = v66;
  uint64_t v60 = v43;
  char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_TypeName);
  outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_TypeName);
  outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((v70 & 1) == 0) {
    goto LABEL_46;
  }
LABEL_24:
  int v61 = *(_DWORD *)(v42
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v62 = *(_DWORD *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  uint64_t v8 = v78;
  uint64_t v10 = v79;
  a1 = v74;
  a2 = v75;
  uint64_t v4 = v60;
  uint64_t v5 = v76;
  if (v61 != v62) {
    goto LABEL_47;
  }
LABEL_25:
  uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v63(v10, a1, v4);
  v63(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v64 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v65 = *(void (**)(char *, uint64_t))(v5 + 8);
  v65(v8, v4);
  v65(v10, v4);
  return v64 & 1;
}

uint64_t specialized static PgQuery_WindowClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v79 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void *)(Node - 8);
  uint64_t v91 = Node;
  uint64_t v92 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](Node);
  uint64_t v85 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v88 = (uint64_t)&v79 - v15;
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v16 = MEMORY[0x1F4188790](v90);
  uint64_t v87 = (uint64_t)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v79 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v86 = (uint64_t)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v89 = (char *)&v79 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v79 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v79 - v28;
  uint64_t WindowClause = type metadata accessor for PgQuery_WindowClause(0);
  uint64_t v31 = a1;
  uint64_t v32 = *(int *)(WindowClause + 20);
  uint64_t v33 = *(void *)(a1 + v32);
  uint64_t v34 = *(void *)(a2 + v32);
  if (v33 == v34) {
    goto LABEL_41;
  }
  uint64_t v83 = a2;
  uint64_t v84 = v31;
  BOOL v35 = *(void *)(v33 + 16) == *(void *)(v34 + 16) && *(void *)(v33 + 24) == *(void *)(v34 + 24);
  if (!v35 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_retain();
    swift_retain();
    goto LABEL_17;
  }
  uint64_t v82 = v10;
  if (*(void *)(v33 + 32) == *(void *)(v34 + 32) && *(void *)(v33 + 40) == *(void *)(v34 + 40)
    || (char v36 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v80 = v8;
    uint64_t v81 = v5;
    uint64_t v37 = *(void *)(v33 + 48);
    uint64_t v38 = *(void *)(v34 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v39 = specialized static Array<A>.== infix(_:_:)(v37, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v39 & 1) == 0) {
      goto LABEL_17;
    }
    uint64_t v40 = *(void *)(v33 + 56);
    uint64_t v41 = *(void *)(v34 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v42 = specialized static Array<A>.== infix(_:_:)(v40, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0 || *(_DWORD *)(v33 + 64) != *(_DWORD *)(v34 + 64)) {
      goto LABEL_17;
    }
    uint64_t v43 = v33
        + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset;
    outlined init with copy of PgQuery_Alias?(v34+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset, (uint64_t)v29, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v44 = (uint64_t)&v19[*(int *)(v90 + 48)];
    outlined init with copy of PgQuery_Alias?(v43, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v45 = v44;
    outlined init with copy of PgQuery_Alias?((uint64_t)v29, v44, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v46 = v91;
    uint64_t v47 = v92 + 48;
    uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48);
    if (v48((uint64_t)v19, 1, v91) == 1)
    {
      if (v48(v45, 1, v46) == 1)
      {
        uint64_t v92 = v47;
        outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_24:
        uint64_t v58 = v33
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset;
        uint64_t v29 = v89;
        outlined init with copy of PgQuery_Alias?(v34+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset, (uint64_t)v89, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v59 = v87;
        uint64_t v60 = v87 + *(int *)(v90 + 48);
        outlined init with copy of PgQuery_Alias?(v58, v87, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined init with copy of PgQuery_Alias?((uint64_t)v29, v60, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v61 = v91;
        if (v48(v59, 1, v91) == 1)
        {
          if (v48(v60, 1, v61) == 1)
          {
            outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_33:
            if (*(_DWORD *)(v33
                           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startInRangeFunc) == *(_DWORD *)(v34 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startInRangeFunc)
              && *(_DWORD *)(v33
                           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endInRangeFunc) == *(_DWORD *)(v34 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endInRangeFunc)
              && *(_DWORD *)(v33
                           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeColl) == *(_DWORD *)(v34 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeColl)
              && *(unsigned __int8 *)(v33
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeAsc) == *(unsigned __int8 *)(v34 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeAsc)
              && *(unsigned __int8 *)(v33
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeNullsFirst) == *(unsigned __int8 *)(v34 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeNullsFirst)
              && *(_DWORD *)(v33
                           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref) == *(_DWORD *)(v34 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref))
            {
              int v71 = *(unsigned __int8 *)(v33
                                       + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__copiedOrder);
              int v72 = *(unsigned __int8 *)(v34
                                       + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__copiedOrder);
              swift_release();
              swift_release();
              BOOL v35 = v71 == v72;
              uint64_t v8 = v80;
              uint64_t v5 = v81;
              uint64_t v10 = v82;
              a2 = v83;
              uint64_t v31 = v84;
              if (!v35)
              {
                char v36 = 0;
                return v36 & 1;
              }
LABEL_41:
              uint64_t v73 = v10;
              uint64_t v74 = v8;
              uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
              v75(v10, v31, v4);
              v75(v74, a2, v4);
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
              char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v76 = *(void (**)(char *, uint64_t))(v5 + 8);
              v76(v74, v4);
              v76(v73, v4);
              return v36 & 1;
            }
            goto LABEL_17;
          }
          uint64_t v63 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
          goto LABEL_46;
        }
        uint64_t v62 = v86;
        outlined init with copy of PgQuery_Alias?(v59, v86, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v48(v60, 1, v61) == 1)
        {
          uint64_t v63 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_45:
          outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
          uint64_t v29 = v89;
LABEL_46:
          uint64_t v50 = v59;
          uint64_t v49 = v63;
          goto LABEL_47;
        }
        uint64_t v64 = v85;
        outlined init with take of PgQuery_OidList(v60, v85, type metadata accessor for PgQuery_Node);
        uint64_t v65 = *(int *)(v61 + 20);
        uint64_t v66 = *(void *)(v62 + v65);
        uint64_t v67 = *(void *)(v64 + v65);
        if (v66 != v67)
        {
          swift_retain();
          swift_retain();
          BOOL v68 = closure #1 in static PgQuery_Node.== infix(_:_:)(v66, v67);
          swift_release();
          swift_release();
          if (!v68)
          {
            outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
            uint64_t v63 = &demangling cache variable for type metadata for PgQuery_Node?;
            uint64_t v62 = v86;
            goto LABEL_45;
          }
        }
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v69 = v86;
        char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?((uint64_t)v89, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v70) {
          goto LABEL_33;
        }
LABEL_17:
        swift_release();
        swift_release();
        char v36 = 0;
        return v36 & 1;
      }
    }
    else
    {
      outlined init with copy of PgQuery_Alias?((uint64_t)v19, (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
      if (v48(v45, 1, v46) != 1)
      {
        uint64_t v92 = v47;
        uint64_t v51 = v88;
        outlined init with take of PgQuery_OidList(v45, v88, type metadata accessor for PgQuery_Node);
        uint64_t v52 = *(int *)(v46 + 20);
        uint64_t v53 = *(void *)&v27[v52];
        uint64_t v54 = *(void *)(v51 + v52);
        if (v53 != v54)
        {
          swift_retain();
          swift_retain();
          BOOL v55 = closure #1 in static PgQuery_Node.== infix(_:_:)(v53, v54);
          swift_release();
          swift_release();
          if (!v55)
          {
            outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias((uint64_t)v27, type metadata accessor for PgQuery_Node);
            outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
            uint64_t v78 = (uint64_t)v29;
LABEL_48:
            outlined destroy of AnyValue?(v78, &demangling cache variable for type metadata for PgQuery_Node?);
            goto LABEL_17;
          }
        }
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v56 = v88;
        char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias((uint64_t)v27, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v57 & 1) == 0) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }
      outlined destroy of PgQuery_Alias((uint64_t)v27, type metadata accessor for PgQuery_Node);
    }
    uint64_t v49 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    uint64_t v50 = (uint64_t)v19;
LABEL_47:
    outlined destroy of AnyValue?(v50, v49);
    uint64_t v78 = (uint64_t)v29;
    goto LABEL_48;
  }
  return v36 & 1;
}

uint64_t specialized static PgQuery_TruncateStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
  {
    goto LABEL_11;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 24) == 1)
  {
    if (v12)
    {
      if (v12 == 1)
      {
        if (v11 == 1) {
          goto LABEL_9;
        }
      }
      else if (v11 == 2)
      {
        goto LABEL_9;
      }
LABEL_11:
      char v15 = 0;
      return v15 & 1;
    }
    if (v11) {
      goto LABEL_11;
    }
  }
  else if (v11 != v12)
  {
    goto LABEL_11;
  }
LABEL_9:
  Truncateuint64_t Stmt = type metadata accessor for PgQuery_TruncateStmt(0);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v10, a1 + *(int *)(TruncateStmt + 28), v4);
  v14(v8, a2 + *(int *)(TruncateStmt + 28), v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t specialized static PgQuery_SecLabelStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v51 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v58 = *(void *)(Node - 8);
  uint64_t v59 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v56 = (uint64_t)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v60 = (uint64_t)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v57 = (uint64_t)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v51 - v18;
  SecLabeluint64_t Stmt = type metadata accessor for PgQuery_SecLabelStmt(0);
  uint64_t v21 = a1;
  uint64_t v22 = *(int *)(SecLabelStmt + 20);
  uint64_t v23 = *(void *)(a1 + v22);
  uint64_t v24 = *(void *)(a2 + v22);
  if (v23 == v24) {
    goto LABEL_19;
  }
  uint64_t v52 = a1;
  uint64_t v53 = a2;
  uint64_t v51 = v10;
  uint64_t v54 = v8;
  uint64_t v55 = v5;
  uint64_t v25 = *(void *)(v24 + 16);
  uint64_t v26 = *(unsigned __int8 *)(v24 + 24);
  uint64_t v27 = destructiveProjectEnumData for StorableValue(*(void *)(v23 + 16), *(unsigned __int8 *)(v23 + 24));
  if (v27 != destructiveProjectEnumData for StorableValue(v25, v26))
  {
LABEL_24:
    char v48 = 0;
    return v48 & 1;
  }
  uint64_t v28 = v23;
  uint64_t v29 = v23
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  uint64_t v30 = (uint64_t)v19;
  outlined init with copy of PgQuery_Alias?(v24+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v31 = v60;
  uint64_t v32 = v60 + *(int *)(v13 + 48);
  outlined init with copy of PgQuery_Alias?(v29, v60, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v32, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v33 = v59;
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  if (v34(v31, 1, v59) != 1)
  {
    uint64_t v36 = v57;
    outlined init with copy of PgQuery_Alias?(v31, v57, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v34(v32, 1, v33) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v37 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v38 = v32;
      uint64_t v39 = v33;
      uint64_t v40 = v56;
      outlined init with take of PgQuery_OidList(v38, v56, type metadata accessor for PgQuery_Node);
      uint64_t v41 = *(int *)(v39 + 20);
      uint64_t v42 = *(void *)(v36 + v41);
      uint64_t v43 = *(void *)(v40 + v41);
      swift_retain();
      swift_retain();
      if (v42 == v43
        || (swift_retain(),
            swift_retain(),
            BOOL v44 = closure #1 in static PgQuery_Node.== infix(_:_:)(v42, v43),
            swift_release(),
            swift_release(),
            v44))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v45 = v57;
        char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v31, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v46) {
          goto LABEL_12;
        }
LABEL_23:
        swift_release();
        swift_release();
        goto LABEL_24;
      }
      outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
      uint64_t v37 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v36 = v57;
    }
    outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
LABEL_22:
    outlined destroy of AnyValue?(v31, v37);
    outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  unsigned int v35 = v34(v32, 1, v33);
  swift_retain();
  swift_retain();
  if (v35 != 1)
  {
    uint64_t v37 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_22;
  }
  outlined destroy of AnyValue?(v31, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_12:
  if ((*(void *)(v28
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider) != *(void *)(v24 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider)
     || *(void *)(v28
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider
                  + 8) != *(void *)(v24
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (*(void *)(v28
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label) != *(void *)(v24 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label)
     || *(void *)(v28
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label
                  + 8) != *(void *)(v24
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_23;
  }
  swift_release();
  swift_release();
  uint64_t v8 = v54;
  uint64_t v5 = v55;
  uint64_t v10 = v51;
  uint64_t v21 = v52;
  a2 = v53;
LABEL_19:
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v47(v10, v21, v4);
  v47(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v49 = *(void (**)(char *, uint64_t))(v5 + 8);
  v49(v8, v4);
  v49(v10, v4);
  return v48 & 1;
}

uint64_t specialized static PgQuery_PartitionCmd.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = a1;
  uint64_t v70 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v61 = v2;
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v59 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v58 = (char *)&v57 - v5;
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  uint64_t v65 = *(void *)(PartitionBoundSpec - 8);
  uint64_t v66 = PartitionBoundSpec;
  MEMORY[0x1F4188790](PartitionBoundSpec);
  uint64_t v57 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_PartitionBoundSpec?, PgQuery_PartitionBoundSpec?));
  MEMORY[0x1F4188790](v63);
  uint64_t v67 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v62 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v68 = (uint64_t)&v57 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v64 = (uint64_t)&v57 - v14;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v16 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  uint64_t v20 = v19 - 8;
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v26 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)&v57 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v57 - v30;
  uint64_t PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
  outlined init with copy of PgQuery_Alias?(v69 + *(int *)(PartitionCmd + 20), (uint64_t)v31, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?(v70 + *(int *)(PartitionCmd + 20), (uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v29, v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, RangeVar) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v34(v33, 1, RangeVar) != 1)
    {
      outlined init with take of PgQuery_OidList(v33, (uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
      char v37 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v26, (uint64_t)v18);
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v31, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((v37 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }
    outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v31, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_RangeVar);
LABEL_6:
    unsigned int v35 = &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?);
    uint64_t v36 = (uint64_t)v22;
LABEL_14:
    outlined destroy of AnyValue?(v36, v35);
    goto LABEL_15;
  }
  outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v31, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v34(v33, 1, RangeVar) != 1) {
    goto LABEL_6;
  }
  outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_8:
  uint64_t v38 = v69;
  uint64_t v39 = v64;
  outlined init with copy of PgQuery_Alias?(v69 + *(int *)(PartitionCmd + 24), v64, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  uint64_t v40 = v70;
  uint64_t v41 = v68;
  outlined init with copy of PgQuery_Alias?(v70 + *(int *)(PartitionCmd + 24), v68, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  uint64_t v42 = v67;
  uint64_t v43 = v67 + *(int *)(v63 + 48);
  outlined init with copy of PgQuery_Alias?(v39, v67, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  outlined init with copy of PgQuery_Alias?(v41, v43, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  uint64_t v44 = v66;
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
  if (v45(v42, 1, v66) == 1)
  {
    outlined destroy of AnyValue?(v41, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    if (v45(v43, 1, v44) == 1)
    {
      outlined destroy of AnyValue?(v42, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
LABEL_18:
      uint64_t v52 = v60;
      uint64_t v51 = v61;
      uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
      uint64_t v54 = v58;
      v53(v58, v38, v61);
      uint64_t v55 = v59;
      v53(v59, v40, v51);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v56 = *(void (**)(char *, uint64_t))(v52 + 8);
      v56(v55, v51);
      v56(v54, v51);
      return v47 & 1;
    }
    goto LABEL_13;
  }
  uint64_t v46 = v62;
  outlined init with copy of PgQuery_Alias?(v42, v62, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  if (v45(v43, 1, v44) == 1)
  {
    outlined destroy of AnyValue?(v68, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_PartitionBoundSpec);
LABEL_13:
    unsigned int v35 = &demangling cache variable for type metadata for (PgQuery_PartitionBoundSpec?, PgQuery_PartitionBoundSpec?);
    uint64_t v36 = v42;
    goto LABEL_14;
  }
  uint64_t v49 = v57;
  outlined init with take of PgQuery_OidList(v43, v57, type metadata accessor for PgQuery_PartitionBoundSpec);
  char v50 = specialized static PgQuery_PartitionBoundSpec.== infix(_:_:)(v46, v49);
  outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_PartitionBoundSpec);
  outlined destroy of AnyValue?(v68, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_PartitionBoundSpec);
  outlined destroy of AnyValue?(v42, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  if (v50) {
    goto LABEL_18;
  }
LABEL_15:
  char v47 = 0;
  return v47 & 1;
}

uint64_t specialized static PgQuery_GroupingFunc.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v60 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v65 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v66 = (uint64_t)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v60 - v19;
  uint64_t GroupingFunc = type metadata accessor for PgQuery_GroupingFunc(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(GroupingFunc + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26) {
    goto LABEL_16;
  }
  uint64_t v61 = a2;
  uint64_t v62 = v23;
  uint64_t v63 = v22;
  uint64_t v64 = v4;
  uint64_t v28 = v25
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v26+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v30((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v32 = v66;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v66, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v29, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v33 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v34 = v32;
      uint64_t v35 = (uint64_t)v20;
      uint64_t v36 = v65;
      outlined init with take of PgQuery_OidList(v29, v65, type metadata accessor for PgQuery_Node);
      uint64_t v37 = *(int *)(Node + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v36 + v37);
      swift_retain();
      swift_retain();
      if (v38 == v39
        || (swift_retain(),
            swift_retain(),
            BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
            swift_release(),
            swift_release(),
            v40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v41 = v66;
        char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v42) {
          goto LABEL_11;
        }
LABEL_20:
        swift_release();
        swift_release();
        goto LABEL_21;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v33 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v20 = (char *)v35;
      uint64_t v32 = v66;
    }
    outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_Node);
LABEL_19:
    outlined destroy of AnyValue?((uint64_t)v15, v33);
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_20;
  }
  unsigned int v31 = v30(v29, 1, Node);
  swift_retain();
  swift_retain();
  if (v31 != 1)
  {
    uint64_t v33 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_19;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  uint64_t v43 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v44 = *(void *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v45 = specialized static Array<A>.== infix(_:_:)(v43, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v46 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refs);
  uint64_t v47 = *(void *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v48 = specialized static Array<A>.== infix(_:_:)(v46, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v48 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v49 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols);
  uint64_t v50 = *(void *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v51 = specialized static Array<A>.== infix(_:_:)(v49, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0
    || *(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup) != *(_DWORD *)(v26 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup))
  {
    goto LABEL_20;
  }
  int v52 = *(_DWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v53 = *(_DWORD *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  uint64_t v22 = v63;
  uint64_t v4 = v64;
  uint64_t v27 = v61;
  uint64_t v23 = v62;
  if (v52 != v53)
  {
LABEL_21:
    char v57 = 0;
    return v57 & 1;
  }
LABEL_16:
  uint64_t v54 = v22;
  uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v56 = v27;
  v55(v10, v23, v4);
  v55(v8, v56, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v58 = *(void (**)(char *, uint64_t))(v54 + 8);
  v58(v8, v4);
  v58(v10, v4);
  return v57 & 1;
}

uint64_t specialized static PgQuery_ConstraintsSetStmt.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v18 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) != 0
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    uint64_t v14 = a3(0);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v15(v12, a1 + *(int *)(v14 + 24), v6);
    v15(v10, a2 + *(int *)(v14 + 24), v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v10, v6);
    v16(v12, v6);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_DistinctExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v54 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v59 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v60 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v54 - v19;
  uint64_t DistinctExpr = type metadata accessor for PgQuery_DistinctExpr(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(DistinctExpr + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26) {
    goto LABEL_19;
  }
  uint64_t v55 = a2;
  uint64_t v56 = v23;
  uint64_t v54 = v10;
  uint64_t v57 = v22;
  uint64_t v58 = v4;
  uint64_t v28 = v25
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v26+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  unsigned int v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v33 = v26;
    uint64_t v34 = v60;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v60, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v31(v29, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v36 = v59;
      outlined init with take of PgQuery_OidList(v29, v59, type metadata accessor for PgQuery_Node);
      uint64_t v37 = *(int *)(Node + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v36 + v37);
      swift_retain();
      swift_retain();
      if (v38 == v39
        || (swift_retain(),
            swift_retain(),
            BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
            swift_release(),
            swift_release(),
            v40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v41) {
          goto LABEL_11;
        }
LABEL_23:
        swift_release();
        swift_release();
        goto LABEL_24;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v35 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_22:
    outlined destroy of AnyValue?((uint64_t)v15, v35);
    outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  unsigned int v32 = v31(v29, 1, Node);
  swift_retain();
  uint64_t v33 = v26;
  swift_retain();
  if (v32 != 1)
  {
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_22;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
    goto LABEL_23;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
    goto LABEL_23;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype))
    goto LABEL_23;
  if (*(unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) != *(unsigned __int8 *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset))
    goto LABEL_23;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid))
    goto LABEL_23;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
    goto LABEL_23;
  uint64_t v42 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v43 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v44 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v45 = specialized static Array<A>.== infix(_:_:)(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0) {
    goto LABEL_23;
  }
  int v46 = *(_DWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v47 = *(_DWORD *)(v44
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  uint64_t v22 = v57;
  uint64_t v4 = v58;
  uint64_t v10 = v54;
  uint64_t v27 = v55;
  uint64_t v23 = v56;
  if (v46 != v47)
  {
LABEL_24:
    char v51 = 0;
    return v51 & 1;
  }
LABEL_19:
  uint64_t v48 = v22;
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v50 = v27;
  v49(v10, v23, v4);
  v49(v8, v50, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v52 = *(void (**)(char *, uint64_t))(v48 + 8);
  v52(v8, v4);
  v52(v10, v4);
  return v51 & 1;
}

uint64_t specialized static PgQuery_CreateAmStmt.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 2), *((void *)a2 + 2)))
    {
      if (*((void *)a1 + 3) == *((void *)a2 + 3) && *((void *)a1 + 4) == *((void *)a2 + 4)
        || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        Amuint64_t Stmt = type metadata accessor for PgQuery_CreateAmStmt(0);
        uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
        v14(v10, &a1[*(int *)(AmStmt + 28)], v4);
        v14(v8, &a2[*(int *)(AmStmt + 28)], v4);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
        v15(v8, v4);
        v15(v10, v4);
      }
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CoalesceExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v54 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v59 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v60 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v54 - v19;
  uint64_t CoalesceExpr = type metadata accessor for PgQuery_CoalesceExpr(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(CoalesceExpr + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26) {
    goto LABEL_15;
  }
  uint64_t v55 = a2;
  uint64_t v56 = v23;
  uint64_t v54 = v10;
  uint64_t v57 = v22;
  uint64_t v58 = v4;
  uint64_t v28 = v25
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v26+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  unsigned int v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v33 = v26;
    uint64_t v34 = v60;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v60, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v31(v29, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v36 = v59;
      outlined init with take of PgQuery_OidList(v29, v59, type metadata accessor for PgQuery_Node);
      uint64_t v37 = *(int *)(Node + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v36 + v37);
      swift_retain();
      swift_retain();
      if (v38 == v39
        || (swift_retain(),
            swift_retain(),
            BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
            swift_release(),
            swift_release(),
            v40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v41) {
          goto LABEL_11;
        }
LABEL_19:
        swift_release();
        swift_release();
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v35 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_18:
    outlined destroy of AnyValue?((uint64_t)v15, v35);
    outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_19;
  }
  unsigned int v32 = v31(v29, 1, Node);
  swift_retain();
  uint64_t v33 = v26;
  swift_retain();
  if (v32 != 1)
  {
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_18;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescetype) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescetype))
    goto LABEL_19;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescecollid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescecollid))
    goto LABEL_19;
  uint64_t v42 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v43 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v44 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v45 = specialized static Array<A>.== infix(_:_:)(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0) {
    goto LABEL_19;
  }
  int v46 = *(_DWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v47 = *(_DWORD *)(v44
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  uint64_t v22 = v57;
  uint64_t v4 = v58;
  uint64_t v10 = v54;
  uint64_t v27 = v55;
  uint64_t v23 = v56;
  if (v46 != v47)
  {
LABEL_20:
    char v51 = 0;
    return v51 & 1;
  }
LABEL_15:
  uint64_t v48 = v22;
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v50 = v27;
  v49(v10, v23, v4);
  v49(v8, v50, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v52 = *(void (**)(char *, uint64_t))(v48 + 8);
  v52(v8, v4);
  v52(v10, v4);
  return v51 & 1;
}

uint64_t specialized static PgQuery_AlterSeqStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  int v46 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  char v45 = (char *)&v44 - v7;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v9 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v49 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v44 - v22;
  AlterSequint64_t Stmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
  uint64_t v25 = *(int *)(AlterSeqStmt + 32);
  uint64_t v50 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = AlterSeqStmt;
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v28 = *(int *)(v27 + 32);
  char v51 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v30(v29, 1, RangeVar) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_8;
    }
  }
  else
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v30(v29, 1, RangeVar) != 1)
    {
      uint64_t v32 = v49;
      outlined init with take of PgQuery_OidList(v29, v49, type metadata accessor for PgQuery_RangeVar);
      char v33 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v18, v32);
      outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((v33 & 1) == 0)
      {
LABEL_11:
        char v31 = 0;
        return v31 & 1;
      }
LABEL_8:
      uint64_t v34 = v50;
      uint64_t v35 = v51;
      if ((specialized static Array<A>.== infix(_:_:)(*v50, *v51) & 1) != 0
        && *((unsigned __int8 *)v34 + 8) == *((unsigned __int8 *)v35 + 8)
        && *((unsigned __int8 *)v34 + 9) == *((unsigned __int8 *)v35 + 9))
      {
        uint64_t v38 = v47;
        uint64_t v37 = v48;
        uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
        BOOL v40 = v45;
        v39(v45, (char *)v34 + *(int *)(v27 + 28), v48);
        char v41 = (char *)v35 + *(int *)(v27 + 28);
        uint64_t v42 = v46;
        v39(v46, v41, v37);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v43 = *(void (**)(char *, uint64_t))(v38 + 8);
        v43(v42, v37);
        v43(v40, v37);
        return v31 & 1;
      }
      goto LABEL_11;
    }
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  char v31 = 0;
  return v31 & 1;
}

uint64_t specialized static PgQuery_CreateFdwStmt.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v19 - v11;
  BOOL v13 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 2), *((void *)a2 + 2)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 3), *((void *)a2 + 3)) & 1) != 0)
    {
      uint64_t v15 = a3(0);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v16(v12, &a1[*(int *)(v15 + 28)], v6);
      v16(v10, &a2[*(int *)(v15 + 28)], v6);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
      v17(v10, v6);
      v17(v12, v6);
    }
    else
    {
      char v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_RelabelType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v97 = a1;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v82 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  uint64_t v12 = MEMORY[0x1F4188790](Node);
  uint64_t v89 = (uint64_t)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v91 = (uint64_t)&v82 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v93 = (uint64_t)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v82 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v90 = (uint64_t)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v92 = (uint64_t)&v82 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v94 = (uint64_t)&v82 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v82 - v27;
  uint64_t v29 = *(int *)(type metadata accessor for PgQuery_RelabelType(0) + 20);
  uint64_t v30 = *(void *)(v97 + v29);
  uint64_t v31 = *(void *)(a2 + v29);
  uint64_t v32 = a2;
  if (v30 == v31)
  {
LABEL_43:
    uint64_t v78 = *(void (**)(char *))(v4 + 16);
    uint64_t v79 = v32;
    v78(v9);
    ((void (*)(char *, uint64_t, uint64_t))v78)(v7, v79, v3);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v75 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v80 = *(void (**)(char *, uint64_t))(v4 + 8);
    v80(v7, v3);
    v80(v9, v3);
    return v75 & 1;
  }
  uint64_t v84 = v9;
  uint64_t v85 = a2;
  uint64_t v83 = v7;
  uint64_t v87 = v4;
  uint64_t v88 = v3;
  uint64_t v33 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v34 = v31;
  uint64_t v35 = v30;
  outlined init with copy of PgQuery_Alias?(v31 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v36 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v33, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  unsigned int v38 = v37(v19, 1, Node);
  uint64_t v95 = v34;
  uint64_t v96 = v35;
  if (v38 == 1)
  {
    uint64_t v86 = Node;
    unsigned int v39 = v37((char *)v36, 1, Node);
    swift_retain();
    swift_retain();
    if (v39 == 1)
    {
      BOOL v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v37;
      outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v3 = v88;
      uint64_t v41 = v95;
      goto LABEL_11;
    }
    uint64_t v43 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_29:
    outlined destroy of AnyValue?((uint64_t)v19, v43);
    outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_34;
  }
  uint64_t v42 = v94;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v94, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v37((char *)v36, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v43 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_28:
    outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
    goto LABEL_29;
  }
  BOOL v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v37;
  uint64_t v44 = v42;
  uint64_t v45 = v91;
  outlined init with take of PgQuery_OidList(v36, v91, type metadata accessor for PgQuery_Node);
  uint64_t v86 = Node;
  uint64_t v46 = *(int *)(Node + 20);
  uint64_t v47 = *(void *)(v44 + v46);
  uint64_t v48 = *(void *)(v45 + v46);
  swift_retain();
  swift_retain();
  if (v47 != v48)
  {
    swift_retain();
    swift_retain();
    BOOL v49 = closure #1 in static PgQuery_Node.== infix(_:_:)(v47, v48);
    swift_release();
    swift_release();
    if (!v49)
    {
      outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
      uint64_t v43 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v42 = v94;
      goto LABEL_28;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v50 = v94;
  uint64_t v3 = v88;
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v41 = v95;
  if ((v51 & 1) == 0) {
    goto LABEL_34;
  }
LABEL_11:
  uint64_t v52 = v96
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  uint64_t v53 = v41;
  uint64_t v54 = v15;
  uint64_t v55 = v92;
  outlined init with copy of PgQuery_Alias?(v41 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v92, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v56 = v93;
  uint64_t v57 = v93 + *(int *)(v54 + 48);
  outlined init with copy of PgQuery_Alias?(v52, v93, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v55, v57, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v58 = v86;
  uint64_t v59 = v40;
  if (v40(v56, 1, v86) != 1)
  {
    uint64_t v64 = v90;
    outlined init with copy of PgQuery_Alias?(v56, v90, &demangling cache variable for type metadata for PgQuery_Node?);
    int v65 = v59(v57, 1, v58);
    uint64_t v61 = v87;
    if (v65 == 1)
    {
      uint64_t v66 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v67 = v89;
      outlined init with take of PgQuery_OidList(v57, v89, type metadata accessor for PgQuery_Node);
      uint64_t v68 = *(int *)(v58 + 20);
      uint64_t v69 = *(void *)(v64 + v68);
      uint64_t v70 = *(void *)(v67 + v68);
      if (v69 == v70
        || (swift_retain(),
            swift_retain(),
            BOOL v71 = closure #1 in static PgQuery_Node.== infix(_:_:)(v69, v70),
            swift_release(),
            swift_release(),
            v71))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v62 = v96;
        uint64_t v63 = v53;
        if ((v72 & 1) == 0) {
          goto LABEL_34;
        }
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
      uint64_t v66 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
LABEL_33:
    outlined destroy of AnyValue?(v56, v66);
    outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_34;
  }
  unsigned int v60 = v40(v57, 1, v58);
  uint64_t v61 = v87;
  if (v60 != 1)
  {
    uint64_t v66 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_33;
  }
  outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v62 = v96;
  uint64_t v63 = v53;
LABEL_20:
  if (*(_DWORD *)(v62
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) == *(_DWORD *)(v63 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
    && *(_DWORD *)(v62
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) == *(_DWORD *)(v63 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod)
    && *(_DWORD *)(v62
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) == *(_DWORD *)(v63 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid))
  {
    uint64_t v73 = *(void *)(v62
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat);
    uint64_t v74 = *(void *)(v63
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat);
    if (*(unsigned char *)(v63
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat
                  + 8) == 1)
    {
      switch(v74)
      {
        case 1:
          if (v73 == 1) {
            goto LABEL_42;
          }
          goto LABEL_34;
        case 2:
          if (v73 == 2) {
            goto LABEL_42;
          }
          goto LABEL_34;
        case 3:
          if (v73 == 3) {
            goto LABEL_42;
          }
          goto LABEL_34;
        default:
          if (!v73) {
            goto LABEL_42;
          }
          goto LABEL_34;
      }
    }
    if (v73 == v74)
    {
LABEL_42:
      int v76 = *(_DWORD *)(v62
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      int v77 = *(_DWORD *)(v63
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      uint64_t v7 = v83;
      uint64_t v9 = v84;
      uint64_t v32 = v85;
      uint64_t v4 = v61;
      if (v76 != v77)
      {
        char v75 = 0;
        return v75 & 1;
      }
      goto LABEL_43;
    }
  }
LABEL_34:
  swift_release();
  swift_release();
  char v75 = 0;
  return v75 & 1;
}

uint64_t specialized static PgQuery_ReindexStmt.== infix(_:_:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v45 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v44 = (char *)&v42 - v7;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v9 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v47 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v42 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v42 - v21;
  uint64_t v48 = a1;
  BOOL v49 = a2;
  uint64_t v23 = *a1;
  uint64_t v24 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v24)
    {
      case 1:
        if (v23 != 1) {
          goto LABEL_28;
        }
        goto LABEL_6;
      case 2:
        if (v23 != 2) {
          goto LABEL_28;
        }
        goto LABEL_6;
      case 3:
        if (v23 != 3) {
          goto LABEL_28;
        }
        goto LABEL_6;
      case 4:
        if (v23 != 4) {
          goto LABEL_28;
        }
        goto LABEL_6;
      case 5:
        if (v23 != 5) {
          goto LABEL_28;
        }
        goto LABEL_6;
      default:
        if (!v23) {
          goto LABEL_6;
        }
        goto LABEL_28;
    }
  }
  if (v23 != v24) {
    goto LABEL_28;
  }
LABEL_6:
  uint64_t v43 = v4;
  Reindexuint64_t Stmt = type metadata accessor for PgQuery_ReindexStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)v48 + *(int *)(ReindexStmt + 36), (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v49 + *(int *)(ReindexStmt + 36), (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v26 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v13, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v27(v26, 1, RangeVar) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_13;
    }
LABEL_11:
    outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    goto LABEL_28;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v27(v26, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_11;
  }
  uint64_t v28 = v47;
  outlined init with take of PgQuery_OidList(v26, v47, type metadata accessor for PgQuery_RangeVar);
  char v29 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v17, v28);
  outlined destroy of PgQuery_Alias(v28, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v29 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_13:
  uint64_t v30 = v48;
  uint64_t v31 = v49;
  if (v48[2] == v49[2] && v48[3] == v49[3] || (char v32 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((_DWORD *)v30 + 8) == *((_DWORD *)v31 + 8)
      && *((unsigned __int8 *)v30 + 36) == *((unsigned __int8 *)v31 + 36))
    {
      uint64_t v33 = (uint64_t)v30 + *(int *)(ReindexStmt + 32);
      uint64_t v34 = v46;
      uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
      uint64_t v36 = v43;
      uint64_t v37 = v44;
      v35(v44, v33, v43);
      uint64_t v38 = (uint64_t)v31 + *(int *)(ReindexStmt + 32);
      unsigned int v39 = v45;
      v35(v45, v38, v36);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      BOOL v40 = *(void (**)(char *, uint64_t))(v34 + 8);
      v40(v39, v36);
      v40(v37, v36);
      return v32 & 1;
    }
LABEL_28:
    char v32 = 0;
  }
  return v32 & 1;
}

uint64_t specialized static PgQuery_PrepareStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v52 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v58 = *(void *)(Node - 8);
  uint64_t v59 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v14);
  uint64_t v60 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v57 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v61 = (uint64_t)&v52 - v19;
  Prepareuint64_t Stmt = type metadata accessor for PgQuery_PrepareStmt(0);
  uint64_t v21 = a1;
  uint64_t v22 = *(int *)(PrepareStmt + 20);
  uint64_t v23 = *(void **)(a1 + v22);
  uint64_t v24 = *(void **)(a2 + v22);
  if (v23 == v24) {
    goto LABEL_18;
  }
  uint64_t v56 = a1;
  BOOL v25 = v23[2] == v24[2] && v23[3] == v24[3];
  if (v25 || (char v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v54 = v8;
    uint64_t v55 = v5;
    uint64_t v27 = v23[4];
    uint64_t v28 = v24[4];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v29 = specialized static Array<A>.== infix(_:_:)(v27, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v29)
    {
      uint64_t v53 = v13;
      uint64_t v30 = (uint64_t)v23
          + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
      uint64_t v31 = v61;
      outlined init with copy of PgQuery_Alias?((uint64_t)v24+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, v61, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v32 = v60;
      uint64_t v33 = v60 + *(int *)(v14 + 48);
      outlined init with copy of PgQuery_Alias?(v30, v60, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined init with copy of PgQuery_Alias?(v31, v33, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v34 = v59;
      uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
      if (v35(v32, 1, v59) == 1)
      {
        int v36 = v35(v33, 1, v34);
        uint64_t v8 = v54;
        uint64_t v5 = v55;
        if (v36 == 1)
        {
          outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_17:
          swift_release();
          swift_release();
          uint64_t v21 = v56;
LABEL_18:
          uint64_t v48 = v8;
          BOOL v49 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
          v49(v10, v21, v4);
          v49(v48, a2, v4);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v50 = *(void (**)(char *, uint64_t))(v5 + 8);
          v50(v48, v4);
          v50(v10, v4);
          return v26 & 1;
        }
        unsigned int v39 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        goto LABEL_21;
      }
      uint64_t v37 = v57;
      outlined init with copy of PgQuery_Alias?(v32, v57, &demangling cache variable for type metadata for PgQuery_Node?);
      int v38 = v35(v33, 1, v34);
      uint64_t v5 = v55;
      if (v38 == 1)
      {
        unsigned int v39 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_20:
        outlined destroy of PgQuery_Alias(v37, type metadata accessor for PgQuery_Node);
LABEL_21:
        outlined destroy of AnyValue?(v60, v39);
        outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
        goto LABEL_22;
      }
      uint64_t v40 = (uint64_t)v53;
      outlined init with take of PgQuery_OidList(v33, (uint64_t)v53, type metadata accessor for PgQuery_Node);
      uint64_t v41 = *(int *)(v34 + 20);
      uint64_t v42 = *(void *)(v37 + v41);
      uint64_t v43 = *(void *)(v40 + v41);
      if (v42 != v43)
      {
        swift_retain();
        swift_retain();
        BOOL v44 = closure #1 in static PgQuery_Node.== infix(_:_:)(v42, v43);
        swift_release();
        swift_release();
        if (!v44)
        {
          outlined destroy of PgQuery_Alias((uint64_t)v53, type metadata accessor for PgQuery_Node);
          unsigned int v39 = &demangling cache variable for type metadata for PgQuery_Node?;
          uint64_t v37 = v57;
          goto LABEL_20;
        }
      }
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      uint64_t v45 = v57;
      uint64_t v46 = (uint64_t)v53;
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v8 = v54;
      if (v47) {
        goto LABEL_17;
      }
    }
LABEL_22:
    swift_release();
    swift_release();
    char v26 = 0;
  }
  return v26 & 1;
}

uint64_t specialized static PgQuery_InferClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v52 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v59 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v57 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v60 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v58 = (uint64_t)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v61 = (uint64_t)&v52 - v18;
  uint64_t InferClause = type metadata accessor for PgQuery_InferClause(0);
  uint64_t v20 = a1;
  uint64_t v21 = *(int *)(InferClause + 20);
  uint64_t v22 = *(void *)(a1 + v21);
  uint64_t v23 = *(void *)(a2 + v21);
  if (v22 == v23) {
    goto LABEL_17;
  }
  uint64_t v53 = a2;
  uint64_t v54 = a1;
  uint64_t v55 = v8;
  uint64_t v56 = v5;
  uint64_t v24 = *(void *)(v22 + 16);
  uint64_t v25 = *(void *)(v23 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v26 = specialized static Array<A>.== infix(_:_:)(v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v27 = v22;
  uint64_t v28 = v22
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t v29 = v61;
  outlined init with copy of PgQuery_Alias?(v23+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v61, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = v60;
  uint64_t v31 = v60 + *(int *)(v13 + 48);
  outlined init with copy of PgQuery_Alias?(v28, v60, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v29, v31, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
  if (v32(v30, 1, Node) == 1)
  {
    int v33 = v32(v31, 1, Node);
    uint64_t v8 = v55;
    uint64_t v5 = v56;
    if (v33 == 1)
    {
      outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_13;
    }
    int v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_20;
  }
  uint64_t v34 = v58;
  outlined init with copy of PgQuery_Alias?(v30, v58, &demangling cache variable for type metadata for PgQuery_Node?);
  int v35 = v32(v31, 1, Node);
  uint64_t v8 = v55;
  uint64_t v5 = v56;
  if (v35 == 1)
  {
    int v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_19:
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_20:
    outlined destroy of AnyValue?(v60, v36);
    outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_21;
  }
  uint64_t v37 = v31;
  uint64_t v38 = v34;
  uint64_t v39 = v57;
  outlined init with take of PgQuery_OidList(v37, v57, type metadata accessor for PgQuery_Node);
  uint64_t v40 = *(int *)(Node + 20);
  uint64_t v41 = *(void *)(v38 + v40);
  uint64_t v42 = *(void *)(v39 + v40);
  if (v41 != v42)
  {
    swift_retain();
    swift_retain();
    BOOL v43 = closure #1 in static PgQuery_Node.== infix(_:_:)(v41, v42);
    swift_release();
    swift_release();
    if (!v43)
    {
      outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
      int v36 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v34 = v58;
      goto LABEL_19;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v44 = v58;
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v45 & 1) == 0)
  {
LABEL_21:
    swift_release();
    swift_release();
    goto LABEL_22;
  }
LABEL_13:
  if ((*(void *)(v27
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname) != *(void *)(v23 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname)
     || *(void *)(v27
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname
                  + 8) != *(void *)(v23
                                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_21;
  }
  int v46 = *(_DWORD *)(v27
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v47 = *(_DWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  a2 = v53;
  uint64_t v20 = v54;
  if (v46 != v47)
  {
LABEL_22:
    char v49 = 0;
    return v49 & 1;
  }
LABEL_17:
  uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v48(v10, v20, v4);
  v48(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v50 = *(void (**)(char *, uint64_t))(v5 + 8);
  v50(v8, v4);
  v50(v10, v4);
  return v49 & 1;
}

uint64_t specialized static PgQuery_GroupingSet.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 != 1) {
          goto LABEL_18;
        }
        goto LABEL_6;
      case 2:
        if (v11 != 2) {
          goto LABEL_18;
        }
        goto LABEL_6;
      case 3:
        if (v11 != 3) {
          goto LABEL_18;
        }
        goto LABEL_6;
      case 4:
        if (v11 != 4) {
          goto LABEL_18;
        }
        goto LABEL_6;
      case 5:
        if (v11 != 5) {
          goto LABEL_18;
        }
        goto LABEL_6;
      default:
        if (!v11) {
          goto LABEL_6;
        }
        goto LABEL_18;
    }
  }
  if (v11 != v12) {
    goto LABEL_18;
  }
LABEL_6:
  if ((specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]) & 1) == 0 || *((_DWORD *)a1 + 6) != *((_DWORD *)a2 + 6))
  {
LABEL_18:
    char v15 = 0;
    return v15 & 1;
  }
  uint64_t GroupingSet = type metadata accessor for PgQuery_GroupingSet(0);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v10, (char *)a1 + *(int *)(GroupingSet + 28), v4);
  v14(v8, (char *)a2 + *(int *)(GroupingSet + 28), v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t specialized static PgQuery_AlternativeSubPlan.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4, void *a5)
{
  uint64_t v53 = a5;
  uint64_t v59 = a4;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v58 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v57 = (char *)&v50 - v12;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v52 = (uint64_t)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v54 = (uint64_t)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v50 - v22;
  uint64_t v24 = *(int *)(a3(0) + 20);
  uint64_t v55 = a1;
  uint64_t v56 = a2;
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  if (v25 == v26) {
    goto LABEL_12;
  }
  uint64_t v50 = v9;
  uint64_t v51 = v8;
  uint64_t v27 = v25 + *v59;
  outlined init with copy of PgQuery_Alias?(v26 + *v59, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v28 = (uint64_t)&v18[*(int *)(v16 + 48)];
  outlined init with copy of PgQuery_Alias?(v27, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v28, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v29((uint64_t)v18, 1, Node) == 1)
  {
    int v30 = v29(v28, 1, Node);
    swift_retain();
    swift_retain();
    if (v30 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v8 = v51;
      goto LABEL_11;
    }
    uint64_t v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_15;
  }
  uint64_t v31 = v54;
  outlined init with copy of PgQuery_Alias?((uint64_t)v18, v54, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v29(v28, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v32 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_14:
    outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
LABEL_15:
    outlined destroy of AnyValue?((uint64_t)v18, v32);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_16;
  }
  uint64_t v33 = v52;
  outlined init with take of PgQuery_OidList(v28, v52, type metadata accessor for PgQuery_Node);
  uint64_t v34 = *(int *)(Node + 20);
  uint64_t v35 = *(void *)(v31 + v34);
  uint64_t v36 = *(void *)(v33 + v34);
  swift_retain();
  swift_retain();
  if (v35 != v36)
  {
    swift_retain();
    swift_retain();
    BOOL v37 = closure #1 in static PgQuery_Node.== infix(_:_:)(v35, v36);
    swift_release();
    swift_release();
    if (!v37)
    {
      outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
      uint64_t v32 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_14;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v38 = v31;
  uint64_t v8 = v51;
  char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v39 & 1) == 0)
  {
LABEL_16:
    swift_release();
    swift_release();
    goto LABEL_17;
  }
LABEL_11:
  uint64_t v40 = *(void *)(v25 + *v53);
  uint64_t v41 = *(void *)(v26 + *v53);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v42 = specialized static Array<A>.== infix(_:_:)(v40, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v9 = v50;
  if ((v42 & 1) == 0)
  {
LABEL_17:
    char v47 = 0;
    return v47 & 1;
  }
LABEL_12:
  uint64_t v43 = v9;
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  char v45 = v57;
  v44(v57, v55, v8);
  int v46 = v58;
  v44(v58, v56, v8);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v48 = *(void (**)(char *, uint64_t))(v43 + 8);
  v48(v46, v8);
  v48(v45, v8);
  return v47 & 1;
}

uint64_t specialized static PgQuery_DiscardStmt.== infix(_:_:)(char *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_6;
        }
        goto LABEL_4;
      case 2:
        if (v11 == 2) {
          goto LABEL_6;
        }
        goto LABEL_4;
      case 3:
        if (v11 == 3) {
          goto LABEL_6;
        }
        goto LABEL_4;
      case 4:
        if (v11 == 4) {
          goto LABEL_6;
        }
        goto LABEL_4;
      default:
        if (v11) {
          goto LABEL_4;
        }
        goto LABEL_6;
    }
  }
  if (v11 == v12)
  {
LABEL_6:
    Discarduint64_t Stmt = type metadata accessor for PgQuery_DiscardStmt(0);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v10, &a1[*(int *)(DiscardStmt + 20)], v4);
    v15(v8, (char *)a2 + *(int *)(DiscardStmt + 20), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
LABEL_4:
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_CommentStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v50 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v57 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v55 = (uint64_t)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v58 = (uint64_t)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v56 = (uint64_t)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v59 = (uint64_t)&v50 - v18;
  Commentuint64_t Stmt = type metadata accessor for PgQuery_CommentStmt(0);
  uint64_t v20 = a1;
  uint64_t v21 = *(int *)(CommentStmt + 20);
  uint64_t v22 = *(void *)(a1 + v21);
  uint64_t v23 = *(void *)(a2 + v21);
  if (v22 == v23) {
    goto LABEL_16;
  }
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v50 = v10;
  uint64_t v53 = v8;
  uint64_t v54 = v5;
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = *(unsigned __int8 *)(v23 + 24);
  uint64_t v26 = destructiveProjectEnumData for StorableValue(*(void *)(v22 + 16), *(unsigned __int8 *)(v22 + 24));
  if (v26 != destructiveProjectEnumData for StorableValue(v24, v25))
  {
LABEL_21:
    char v47 = 0;
    return v47 & 1;
  }
  uint64_t v27 = v22
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  uint64_t v28 = v59;
  outlined init with copy of PgQuery_Alias?(v23+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v59, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = v58;
  uint64_t v30 = v58 + *(int *)(v13 + 48);
  outlined init with copy of PgQuery_Alias?(v27, v58, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v28, v30, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  if (v31(v29, 1, Node) == 1)
  {
    int v32 = v31(v30, 1, Node);
    swift_retain();
    uint64_t v33 = v23;
    swift_retain();
    uint64_t v8 = v53;
    uint64_t v5 = v54;
    if (v32 == 1)
    {
      outlined destroy of AnyValue?(v29, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_12;
    }
    uint64_t v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_19;
  }
  uint64_t v33 = v23;
  uint64_t v34 = v56;
  outlined init with copy of PgQuery_Alias?(v29, v56, &demangling cache variable for type metadata for PgQuery_Node?);
  int v35 = v31(v30, 1, Node);
  uint64_t v8 = v53;
  uint64_t v5 = v54;
  if (v35 == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_18:
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_19:
    outlined destroy of AnyValue?(v29, v36);
    outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_20;
  }
  uint64_t v37 = v30;
  uint64_t v38 = v34;
  uint64_t v39 = v55;
  outlined init with take of PgQuery_OidList(v37, v55, type metadata accessor for PgQuery_Node);
  uint64_t v40 = *(int *)(Node + 20);
  uint64_t v41 = *(void *)(v38 + v40);
  uint64_t v42 = *(void *)(v39 + v40);
  swift_retain();
  swift_retain();
  if (v41 != v42)
  {
    swift_retain();
    swift_retain();
    BOOL v43 = closure #1 in static PgQuery_Node.== infix(_:_:)(v41, v42);
    swift_release();
    swift_release();
    if (!v43)
    {
      outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
      uint64_t v36 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v34 = v56;
      goto LABEL_18;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v44 = v56;
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v29, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v59, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v45 & 1) == 0)
  {
LABEL_20:
    swift_release();
    swift_release();
    goto LABEL_21;
  }
LABEL_12:
  if ((*(void *)(v22
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment) != *(void *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment)
     || *(void *)(v22
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment
                  + 8) != *(void *)(v33
                                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_20;
  }
  swift_release();
  swift_release();
  uint64_t v10 = v50;
  uint64_t v20 = v51;
  a2 = v52;
LABEL_16:
  int v46 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v46(v10, v20, v4);
  v46(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v48 = *(void (**)(char *, uint64_t))(v5 + 8);
  v48(v8, v4);
  v48(v10, v4);
  return v47 & 1;
}

uint64_t specialized static PgQuery_CollateExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for PgQuery_CollateExpr(0) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(),
        swift_retain(),
        BOOL v14 = closure #1 in static PgQuery_CollateExpr.== infix(_:_:)(v12, v13, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location), swift_release(), swift_release(), v14))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static PgQuery_CoerceViaIO.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v97 = a1;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v82 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  uint64_t v12 = MEMORY[0x1F4188790](Node);
  uint64_t v88 = (uint64_t)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v90 = (uint64_t)&v82 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v92 = (uint64_t)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v82 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v89 = (uint64_t)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v91 = (uint64_t)&v82 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v94 = (uint64_t)&v82 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v82 - v27;
  uint64_t v29 = *(int *)(type metadata accessor for PgQuery_CoerceViaIO(0) + 20);
  uint64_t v30 = *(void *)(v97 + v29);
  uint64_t v31 = *(void *)(a2 + v29);
  uint64_t v32 = a2;
  if (v30 == v31)
  {
LABEL_42:
    uint64_t v78 = *(void (**)(char *))(v4 + 16);
    uint64_t v79 = v32;
    v78(v9);
    ((void (*)(char *, uint64_t, uint64_t))v78)(v7, v79, v3);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v75 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v80 = *(void (**)(char *, uint64_t))(v4 + 8);
    v80(v7, v3);
    v80(v9, v3);
    return v75 & 1;
  }
  uint64_t v83 = v9;
  uint64_t v84 = a2;
  uint64_t v82 = v7;
  uint64_t v86 = v4;
  uint64_t v87 = v3;
  uint64_t v33 = v30;
  uint64_t v34 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v35 = v31;
  outlined init with copy of PgQuery_Alias?(v31 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v36 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v34, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v93 = v28;
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v38 = v37(v19, 1, Node);
  uint64_t v39 = v15;
  uint64_t v95 = v35;
  uint64_t v96 = v33;
  if (v38 == 1)
  {
    uint64_t v85 = Node;
    int v40 = v37((char *)v36, 1, Node);
    swift_retain();
    swift_retain();
    if (v40 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v93, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v3 = v87;
      uint64_t v41 = v95;
      goto LABEL_11;
    }
    BOOL v43 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_28:
    uint64_t v74 = (uint64_t)v93;
    outlined destroy of AnyValue?((uint64_t)v19, v43);
    outlined destroy of AnyValue?(v74, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_33;
  }
  uint64_t v42 = v94;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v94, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v37((char *)v36, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    BOOL v43 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_27:
    outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
    goto LABEL_28;
  }
  uint64_t v44 = v15;
  uint64_t v45 = v90;
  outlined init with take of PgQuery_OidList(v36, v90, type metadata accessor for PgQuery_Node);
  uint64_t v85 = Node;
  uint64_t v46 = *(int *)(Node + 20);
  uint64_t v47 = *(void *)(v42 + v46);
  uint64_t v48 = *(void *)(v45 + v46);
  swift_retain();
  swift_retain();
  if (v47 != v48)
  {
    swift_retain();
    swift_retain();
    BOOL v49 = closure #1 in static PgQuery_Node.== infix(_:_:)(v47, v48);
    swift_release();
    swift_release();
    if (!v49)
    {
      outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
      BOOL v43 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_27;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v3 = v87;
  char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v93, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v41 = v95;
  uint64_t v39 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_11:
  uint64_t v51 = v96
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  uint64_t v52 = v41;
  uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v37;
  uint64_t v54 = v91;
  outlined init with copy of PgQuery_Alias?(v41 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v91, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v55 = *(int *)(v39 + 48);
  uint64_t v56 = v92;
  uint64_t v57 = v92 + v55;
  outlined init with copy of PgQuery_Alias?(v51, v92, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v54, v57, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v58 = v85;
  if (v53(v56, 1, v85) != 1)
  {
    uint64_t v63 = v89;
    outlined init with copy of PgQuery_Alias?(v56, v89, &demangling cache variable for type metadata for PgQuery_Node?);
    int v64 = v53(v57, 1, v58);
    uint64_t v60 = v86;
    if (v64 == 1)
    {
      int v65 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v66 = v88;
      outlined init with take of PgQuery_OidList(v57, v88, type metadata accessor for PgQuery_Node);
      uint64_t v67 = *(int *)(v58 + 20);
      uint64_t v68 = *(void *)(v63 + v67);
      uint64_t v69 = *(void *)(v66 + v67);
      if (v68 == v69
        || (swift_retain(),
            swift_retain(),
            BOOL v70 = closure #1 in static PgQuery_Node.== infix(_:_:)(v68, v69),
            swift_release(),
            swift_release(),
            v70))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v54, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v61 = v96;
        uint64_t v62 = v52;
        if ((v71 & 1) == 0) {
          goto LABEL_33;
        }
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
      int v65 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
LABEL_32:
    outlined destroy of AnyValue?(v56, v65);
    outlined destroy of AnyValue?(v54, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_33;
  }
  int v59 = v53(v57, 1, v58);
  uint64_t v60 = v86;
  if (v59 != 1)
  {
    int v65 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_32;
  }
  outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v54, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v61 = v96;
  uint64_t v62 = v52;
LABEL_20:
  if (*(_DWORD *)(v61
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) == *(_DWORD *)(v62 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
    && *(_DWORD *)(v61
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid) == *(_DWORD *)(v62 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid))
  {
    uint64_t v72 = *(void *)(v61
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat);
    uint64_t v73 = *(void *)(v62
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat);
    if (*(unsigned char *)(v62
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat
                  + 8) == 1)
    {
      switch(v73)
      {
        case 1:
          if (v72 == 1) {
            goto LABEL_41;
          }
          goto LABEL_33;
        case 2:
          if (v72 == 2) {
            goto LABEL_41;
          }
          goto LABEL_33;
        case 3:
          if (v72 == 3) {
            goto LABEL_41;
          }
          goto LABEL_33;
        default:
          if (!v72) {
            goto LABEL_41;
          }
          goto LABEL_33;
      }
    }
    if (v72 == v73)
    {
LABEL_41:
      int v76 = *(_DWORD *)(v61
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      int v77 = *(_DWORD *)(v62
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      uint64_t v7 = v82;
      uint64_t v9 = v83;
      uint64_t v32 = v84;
      uint64_t v4 = v60;
      if (v76 != v77)
      {
        char v75 = 0;
        return v75 & 1;
      }
      goto LABEL_42;
    }
  }
LABEL_33:
  swift_release();
  swift_release();
  char v75 = 0;
  return v75 & 1;
}

uint64_t specialized static PgQuery_ClusterStmt.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v47 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v46 = (char *)&v45 - v7;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v9 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v50 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v45 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v45 - v22;
  uint64_t ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
  uint64_t v25 = *(int *)(ClusterStmt + 28);
  uint64_t v51 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = ClusterStmt;
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v28 = *(int *)(v27 + 28);
  uint64_t v52 = a2;
  outlined init with copy of PgQuery_Alias?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v30(v29, 1, RangeVar) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    goto LABEL_13;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v30(v29, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_6;
  }
  uint64_t v31 = v50;
  outlined init with take of PgQuery_OidList(v29, v50, type metadata accessor for PgQuery_RangeVar);
  char v32 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v18, v31);
  outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v32 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v33 = v51;
  uint64_t v34 = v52;
  if (*v51 == *v52 && v51[1] == v52[1] || (char v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((_DWORD *)v33 + 4) == *((_DWORD *)v34 + 4))
    {
      uint64_t v36 = (char *)v33 + *(int *)(v27 + 24);
      uint64_t v38 = v48;
      uint64_t v37 = v49;
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
      int v40 = v46;
      v39(v46, v36, v49);
      uint64_t v41 = (char *)v34 + *(int *)(v27 + 24);
      uint64_t v42 = v47;
      v39(v47, v41, v37);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      BOOL v43 = *(void (**)(char *, uint64_t))(v38 + 8);
      v43(v42, v37);
      v43(v40, v37);
      return v35 & 1;
    }
LABEL_13:
    char v35 = 0;
  }
  return v35 & 1;
}

uint64_t specialized static PgQuery_CallContext.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*a1 == *a2)
  {
    uint64_t v12 = type metadata accessor for PgQuery_CallContext(0);
    uint64_t v13 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v13(v10, &a1[*(int *)(v12 + 20)], v4);
    v13(v8, &a2[*(int *)(v12 + 20)], v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t specialized static PgQuery_BooleanTest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v90 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v79 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  uint64_t v11 = MEMORY[0x1F4188790](Node);
  uint64_t v87 = (uint64_t)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v88 = (uint64_t)&v79 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v92 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v79 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v89 = (uint64_t)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v91 = (uint64_t)&v79 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v93 = (uint64_t)&v79 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v79 - v26;
  uint64_t BooleanTest = type metadata accessor for PgQuery_BooleanTest(0);
  uint64_t v29 = a1;
  uint64_t v30 = *(int *)(BooleanTest + 20);
  uint64_t v31 = *(void *)(a1 + v30);
  uint64_t v32 = *(void *)(a2 + v30);
  uint64_t v33 = a2;
  if (v31 == v32) {
    goto LABEL_29;
  }
  uint64_t v82 = v29;
  uint64_t v83 = a2;
  uint64_t v80 = v7;
  uint64_t v81 = v9;
  uint64_t v86 = v4;
  uint64_t v34 = v31
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v32 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v85 = v14;
  uint64_t v35 = (uint64_t)&v18[*(int *)(v14 + 48)];
  outlined init with copy of PgQuery_Alias?(v34, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  uint64_t v37 = Node;
  if (v36((uint64_t)v18, 1, Node) == 1)
  {
    uint64_t v84 = v36;
    unsigned int v38 = v36(v35, 1, v37);
    swift_retain();
    swift_retain();
    uint64_t v39 = (uint64_t)v92;
    if (v38 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v40 = v86;
      goto LABEL_11;
    }
    uint64_t v42 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of AnyValue?((uint64_t)v18, v42);
    uint64_t v70 = (uint64_t)v27;
LABEL_33:
    outlined destroy of AnyValue?(v70, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_34;
  }
  uint64_t v41 = v93;
  outlined init with copy of PgQuery_Alias?((uint64_t)v18, v93, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36(v35, 1, v37) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v42 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_25:
    outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_Node);
    goto LABEL_26;
  }
  uint64_t v84 = v36;
  uint64_t v43 = v88;
  outlined init with take of PgQuery_OidList(v35, v88, type metadata accessor for PgQuery_Node);
  uint64_t v44 = *(int *)(v37 + 20);
  uint64_t v45 = *(void *)(v41 + v44);
  uint64_t v46 = *(void *)(v43 + v44);
  swift_retain();
  swift_retain();
  if (v45 != v46)
  {
    swift_retain();
    swift_retain();
    BOOL v47 = closure #1 in static PgQuery_Node.== infix(_:_:)(v45, v46);
    swift_release();
    swift_release();
    if (!v47)
    {
      outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
      uint64_t v42 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v41 = v93;
      goto LABEL_25;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v79 = v31;
  uint64_t v48 = v32;
  uint64_t v49 = v93;
  uint64_t v50 = v43;
  uint64_t v40 = v86;
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
  uint64_t v52 = v49;
  uint64_t v32 = v48;
  outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v31 = v79;
  outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v39 = (uint64_t)v92;
  if ((v51 & 1) == 0) {
    goto LABEL_34;
  }
LABEL_11:
  uint64_t v53 = v31
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  uint64_t v54 = v37;
  uint64_t v55 = v91;
  outlined init with copy of PgQuery_Alias?(v32 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v91, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v56 = v39 + *(int *)(v85 + 48);
  outlined init with copy of PgQuery_Alias?(v53, v39, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v55, v56, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v57 = v84;
  if (v84(v39, 1, v54) == 1)
  {
    if (v57(v56, 1, v54) == 1)
    {
      outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v91, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_20;
    }
    uint64_t v60 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_32;
  }
  uint64_t v58 = v57;
  uint64_t v59 = v89;
  outlined init with copy of PgQuery_Alias?(v39, v89, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v58(v56, 1, v54) == 1)
  {
    uint64_t v60 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_31:
    outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
LABEL_32:
    outlined destroy of AnyValue?(v39, v60);
    uint64_t v70 = v91;
    goto LABEL_33;
  }
  uint64_t v61 = v87;
  outlined init with take of PgQuery_OidList(v56, v87, type metadata accessor for PgQuery_Node);
  uint64_t v62 = *(int *)(v54 + 20);
  uint64_t v63 = *(void *)(v59 + v62);
  uint64_t v64 = *(void *)(v61 + v62);
  if (v63 != v64)
  {
    swift_retain();
    swift_retain();
    BOOL v65 = closure #1 in static PgQuery_Node.== infix(_:_:)(v63, v64);
    swift_release();
    swift_release();
    if (!v65)
    {
      outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
      uint64_t v60 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v59 = v89;
      goto LABEL_31;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v66 = v89;
  char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v91, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v67 & 1) == 0)
  {
LABEL_34:
    swift_release();
    swift_release();
    goto LABEL_35;
  }
LABEL_20:
  uint64_t v68 = *(void *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype);
  uint64_t v69 = *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype);
  if (*(unsigned char *)(v32
                + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype
                + 8) == 1)
  {
    switch(v69)
    {
      case 1:
        if (v68 != 1) {
          goto LABEL_34;
        }
        goto LABEL_28;
      case 2:
        if (v68 != 2) {
          goto LABEL_34;
        }
        goto LABEL_28;
      case 3:
        if (v68 != 3) {
          goto LABEL_34;
        }
        goto LABEL_28;
      case 4:
        if (v68 != 4) {
          goto LABEL_34;
        }
        goto LABEL_28;
      case 5:
        if (v68 != 5) {
          goto LABEL_34;
        }
        goto LABEL_28;
      case 6:
        if (v68 != 6) {
          goto LABEL_34;
        }
        goto LABEL_28;
      default:
        if (!v68) {
          goto LABEL_28;
        }
        goto LABEL_34;
    }
  }
  if (v68 != v69) {
    goto LABEL_34;
  }
LABEL_28:
  int v71 = *(_DWORD *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v72 = *(_DWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  uint64_t v7 = v80;
  uint64_t v9 = v81;
  uint64_t v4 = v40;
  uint64_t v29 = v82;
  uint64_t v33 = v83;
  if (v71 != v72)
  {
LABEL_35:
    char v76 = 0;
    return v76 & 1;
  }
LABEL_29:
  uint64_t v73 = v90;
  uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 16);
  uint64_t v75 = v33;
  v74(v9, v29, v4);
  v74(v7, v75, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v77 = *(void (**)(char *, uint64_t))(v73 + 8);
  v77(v7, v4);
  v77(v9, v4);
  return v76 & 1;
}

uint64_t specialized static PgQuery_WindowFunc.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v93 = a1;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v80 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  uint64_t v12 = MEMORY[0x1F4188790](Node);
  uint64_t v86 = (uint64_t)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v90 = (uint64_t)&v80 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v88 = (uint64_t)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v80 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v87 = (uint64_t)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v89 = (uint64_t)&v80 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v91 = (uint64_t)&v80 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v80 - v27;
  uint64_t v29 = *(int *)(type metadata accessor for PgQuery_WindowFunc(0) + 20);
  uint64_t v30 = *(void *)(v93 + v29);
  uint64_t v31 = *(void *)(a2 + v29);
  uint64_t v32 = a2;
  if (v30 == v31)
  {
LABEL_35:
    char v76 = *(void (**)(char *))(v4 + 16);
    uint64_t v77 = v32;
    v76(v9);
    ((void (*)(char *, uint64_t, uint64_t))v76)(v7, v77, v3);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v78 = *(void (**)(char *, uint64_t))(v4 + 8);
    v78(v7, v3);
    v78(v9, v3);
    return v65 & 1;
  }
  uint64_t v80 = a2;
  uint64_t v81 = v7;
  uint64_t v82 = v9;
  uint64_t v83 = v4;
  uint64_t v84 = v3;
  uint64_t v33 = v30;
  uint64_t v34 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v35 = v31;
  outlined init with copy of PgQuery_Alias?(v31 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v85 = v15;
  uint64_t v36 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v34, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v38 = v37(v19, 1, Node);
  uint64_t v92 = v33;
  if (v38 == 1)
  {
    int v39 = v37((char *)v36, 1, Node);
    swift_retain();
    uint64_t v40 = v35;
    swift_retain();
    if (v39 == 1)
    {
      uint64_t v41 = Node;
      outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v42 = v85;
      goto LABEL_11;
    }
    uint64_t v44 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_22:
    outlined destroy of AnyValue?((uint64_t)v19, v44);
    outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  uint64_t v40 = v35;
  uint64_t v43 = v91;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v91, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v37((char *)v36, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v44 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_21:
    outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
    goto LABEL_22;
  }
  uint64_t v45 = v43;
  uint64_t v46 = v90;
  outlined init with take of PgQuery_OidList(v36, v90, type metadata accessor for PgQuery_Node);
  uint64_t v41 = Node;
  uint64_t v47 = *(int *)(Node + 20);
  uint64_t v48 = *(void *)(v45 + v47);
  uint64_t v49 = *(void *)(v46 + v47);
  swift_retain();
  swift_retain();
  if (v48 != v49)
  {
    swift_retain();
    swift_retain();
    BOOL v50 = closure #1 in static PgQuery_Node.== infix(_:_:)(v48, v49);
    swift_release();
    swift_release();
    if (!v50)
    {
      outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_Node);
      uint64_t v44 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v43 = v91;
      goto LABEL_21;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v51 = v91;
  char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v42 = v85;
  if ((v52 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_11:
  if (*(_DWORD *)(v92
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winfnoid) != *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winfnoid))
    goto LABEL_23;
  if (*(_DWORD *)(v92
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wintype) != *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wintype))
    goto LABEL_23;
  uint64_t v53 = v92;
  if (*(_DWORD *)(v92
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wincollid) != *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wincollid))
    goto LABEL_23;
  if (*(_DWORD *)(v92
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v40 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
    goto LABEL_23;
  uint64_t v54 = *(void *)(v92
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v55 = *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v56 = specialized static Array<A>.== infix(_:_:)(v54, v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v56 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v57 = v53
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter;
  uint64_t v58 = v40;
  uint64_t v59 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter;
  uint64_t v60 = v89;
  outlined init with copy of PgQuery_Alias?(v59, v89, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v61 = *(int *)(v42 + 48);
  uint64_t v62 = v88;
  uint64_t v63 = v88 + v61;
  outlined init with copy of PgQuery_Alias?(v57, v88, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v60, v63, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v37((char *)v62, 1, v41) != 1)
  {
    uint64_t v66 = v87;
    outlined init with copy of PgQuery_Alias?(v62, v87, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v37((char *)v63, 1, v41) == 1)
    {
      char v67 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v68 = v86;
      outlined init with take of PgQuery_OidList(v63, v86, type metadata accessor for PgQuery_Node);
      uint64_t v69 = *(int *)(v41 + 20);
      uint64_t v70 = *(void *)(v66 + v69);
      uint64_t v71 = *(void *)(v68 + v69);
      if (v70 == v71
        || (swift_retain(),
            swift_retain(),
            BOOL v72 = closure #1 in static PgQuery_Node.== infix(_:_:)(v70, v71),
            swift_release(),
            swift_release(),
            v72))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v3 = v84;
        char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v89, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v64 = v92;
        if ((v73 & 1) == 0) {
          goto LABEL_23;
        }
        goto LABEL_31;
      }
      outlined destroy of PgQuery_Alias(v68, type metadata accessor for PgQuery_Node);
      char v67 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
LABEL_39:
    outlined destroy of AnyValue?(v88, v67);
    outlined destroy of AnyValue?(v89, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  if (v37((char *)v63, 1, v41) != 1)
  {
    char v67 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_39;
  }
  outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v89, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v3 = v84;
  uint64_t v64 = v92;
LABEL_31:
  if (*(_DWORD *)(v64
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref) == *(_DWORD *)(v58 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref)
    && *(unsigned __int8 *)(v64
                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winstar) == *(unsigned __int8 *)(v58 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winstar)
    && *(unsigned __int8 *)(v64
                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winagg) == *(unsigned __int8 *)(v58 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winagg))
  {
    int v74 = *(_DWORD *)(v64
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    int v75 = *(_DWORD *)(v58
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    uint64_t v9 = v82;
    uint64_t v4 = v83;
    uint64_t v32 = v80;
    uint64_t v7 = v81;
    if (v74 != v75)
    {
      char v65 = 0;
      return v65 & 1;
    }
    goto LABEL_35;
  }
LABEL_23:
  swift_release();
  swift_release();
  char v65 = 0;
  return v65 & 1;
}

uint64_t specialized static PgQuery_ObjectWithArgs.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v18 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 8), *(void *)(a2 + 8)) & 1) != 0
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    uint64_t v15 = a3(0);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v16(v12, a1 + *(int *)(v15 + 28), v6);
    v16(v10, a2 + *(int *)(v15 + 28), v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v10, v6);
    v17(v12, v6);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_UpdateStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v110 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v109 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v108 = (char *)&v90 - v7;
  uint64_t v8 = type metadata accessor for PgQuery_WithClause(0);
  uint64_t v96 = *(void *)(v8 - 8);
  uint64_t v97 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v94 = (uint64_t)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
  MEMORY[0x1F4188790](v95);
  uint64_t v99 = (uint64_t)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v98 = (uint64_t)&v90 - v15;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v103 = *(void *)(Node - 8);
  uint64_t v104 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v100 = (uint64_t)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v102);
  uint64_t v106 = (uint64_t)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v101 = (uint64_t)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v105 = (uint64_t)&v90 - v22;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v24 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v107 = (uint64_t)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v90 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  uint64_t v32 = (char *)&v90 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v90 - v33;
  uint64_t UpdateStmt = type metadata accessor for PgQuery_UpdateStmt(0);
  uint64_t v36 = a1;
  uint64_t v37 = *(int *)(UpdateStmt + 20);
  uint64_t v38 = *(void *)(a1 + v37);
  uint64_t v39 = a2;
  uint64_t v40 = *(void *)(a2 + v37);
  uint64_t v41 = v39;
  if (v38 == v40) {
    goto LABEL_36;
  }
  uint64_t v91 = v39;
  uint64_t v92 = v14;
  uint64_t v90 = v36;
  uint64_t v93 = v4;
  uint64_t v42 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v43 = (uint64_t)&v28[*(int *)(v26 + 48)];
  outlined init with copy of PgQuery_Alias?(v42, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v34, v43, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v44((uint64_t)v28, 1, RangeVar) == 1)
  {
    int v45 = v44(v43, 1, RangeVar);
    swift_retain();
    swift_retain();
    if (v45 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_9;
    }
LABEL_7:
    outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of AnyValue?((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_13;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, (uint64_t)v32, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v44(v43, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  uint64_t v46 = v107;
  outlined init with take of PgQuery_OidList(v43, v107, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  char v47 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v32, v46);
  outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v47 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_9:
  uint64_t v48 = *(void *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  uint64_t v49 = *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v50 = specialized static Array<A>.== infix(_:_:)(v48, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v50 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v51 = v38;
  uint64_t v52 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t v53 = v105;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v105, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v54 = v106;
  uint64_t v55 = v106 + *(int *)(v102 + 48);
  outlined init with copy of PgQuery_Alias?(v52, v106, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v53, v55, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v56 = v104;
  uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  if (v57(v54, 1, v104) != 1)
  {
    uint64_t v60 = v101;
    outlined init with copy of PgQuery_Alias?(v54, v101, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v57(v55, 1, v56) == 1)
    {
      uint64_t v61 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v62 = v100;
      outlined init with take of PgQuery_OidList(v55, v100, type metadata accessor for PgQuery_Node);
      uint64_t v63 = *(int *)(v56 + 20);
      uint64_t v64 = *(void *)(v60 + v63);
      uint64_t v65 = *(void *)(v62 + v63);
      if (v64 == v65
        || (swift_retain(),
            swift_retain(),
            BOOL v66 = closure #1 in static PgQuery_Node.== infix(_:_:)(v64, v65),
            swift_release(),
            swift_release(),
            v66))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v58 = v93;
        char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v54, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v53, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v67 & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
      uint64_t v61 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
LABEL_28:
    outlined destroy of AnyValue?(v54, v61);
    uint64_t v79 = &demangling cache variable for type metadata for PgQuery_Node?;
LABEL_29:
    outlined destroy of AnyValue?(v53, v79);
    goto LABEL_13;
  }
  if (v57(v55, 1, v56) != 1)
  {
    uint64_t v61 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_28;
  }
  outlined destroy of AnyValue?(v54, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v53, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v58 = v93;
LABEL_20:
  uint64_t v68 = *(void *)(v51
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause);
  uint64_t v69 = *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v70 = specialized static Array<A>.== infix(_:_:)(v68, v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v70 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v71 = *(void *)(v51
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  uint64_t v72 = *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v73 = specialized static Array<A>.== infix(_:_:)(v71, v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v73 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v74 = v51
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  uint64_t v53 = v98;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v98, &demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v75 = v99;
  uint64_t v76 = v99 + *(int *)(v95 + 48);
  outlined init with copy of PgQuery_Alias?(v74, v99, &demangling cache variable for type metadata for PgQuery_WithClause?);
  outlined init with copy of PgQuery_Alias?(v53, v76, &demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v77 = v97;
  uint64_t v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48);
  if (v78(v75, 1, v97) == 1)
  {
    if (v78(v76, 1, v77) == 1)
    {
      outlined destroy of AnyValue?(v75, &demangling cache variable for type metadata for PgQuery_WithClause?);
      outlined destroy of AnyValue?(v53, &demangling cache variable for type metadata for PgQuery_WithClause?);
LABEL_35:
      swift_release();
      swift_release();
      uint64_t v36 = v90;
      uint64_t v41 = v91;
      uint64_t v4 = v58;
LABEL_36:
      uint64_t v83 = v110;
      uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t))(v110 + 16);
      uint64_t v85 = v108;
      uint64_t v86 = v41;
      v84(v108, v36, v4);
      uint64_t v87 = v109;
      v84(v109, v86, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v88 = *(void (**)(char *, uint64_t))(v83 + 8);
      v88(v87, v4);
      v88(v85, v4);
      return v59 & 1;
    }
    goto LABEL_33;
  }
  uint64_t v80 = (uint64_t)v92;
  outlined init with copy of PgQuery_Alias?(v75, (uint64_t)v92, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if (v78(v76, 1, v77) == 1)
  {
    outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_WithClause);
LABEL_33:
    outlined destroy of AnyValue?(v75, &demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
    uint64_t v79 = &demangling cache variable for type metadata for PgQuery_WithClause?;
    goto LABEL_29;
  }
  uint64_t v81 = v94;
  outlined init with take of PgQuery_OidList(v76, v94, type metadata accessor for PgQuery_WithClause);
  char v82 = specialized static PgQuery_WithClause.== infix(_:_:)(v80, v81);
  outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_WithClause);
  outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_WithClause);
  outlined destroy of AnyValue?(v75, &demangling cache variable for type metadata for PgQuery_WithClause?);
  outlined destroy of AnyValue?(v53, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if (v82) {
    goto LABEL_35;
  }
LABEL_13:
  swift_release();
  swift_release();
  char v59 = 0;
  return v59 & 1;
}

uint64_t specialized static PgQuery_WithClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) != 0
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12))
  {
    uint64_t v11 = type metadata accessor for PgQuery_WithClause(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 28), v4);
    v12(v8, a2 + *(int *)(v11 + 28), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_ParseResult.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v20 - v13;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && (a3(*(void *)(a1 + 8), *(void *)(a2 + 8)) & 1) != 0)
  {
    uint64_t v15 = a4(0);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v16(v14, a1 + *(int *)(v15 + 24), v8);
    v16(v12, a2 + *(int *)(v15 + 24), v8);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v12, v8);
    v18(v14, v8);
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static PgQuery_RenameStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v78 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v88 = *(void *)(Node - 8);
  uint64_t v89 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v84 = (uint64_t)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v87);
  uint64_t v91 = (uint64_t)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v86 = (uint64_t)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v90 = (uint64_t)&v78 - v17;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v93 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v85 = (uint64_t)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v20);
  uint64_t v94 = (uint64_t)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v92 = (uint64_t)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v95 = (uint64_t)&v78 - v25;
  Renameuint64_t Stmt = type metadata accessor for PgQuery_RenameStmt(0);
  uint64_t v27 = a1;
  uint64_t v28 = *(int *)(RenameStmt + 20);
  uint64_t v29 = *(void *)(a1 + v28);
  uint64_t v30 = *(void *)(a2 + v28);
  if (v29 == v30) {
    goto LABEL_43;
  }
  uint64_t v79 = a2;
  uint64_t v80 = a1;
  uint64_t v81 = v8;
  uint64_t v82 = v4;
  uint64_t v83 = v5;
  uint64_t v31 = *(void *)(v30 + 16);
  uint64_t v32 = *(unsigned __int8 *)(v30 + 24);
  uint64_t v33 = destructiveProjectEnumData for StorableValue(*(void *)(v29 + 16), *(unsigned __int8 *)(v29 + 24));
  if (v33 != destructiveProjectEnumData for StorableValue(v31, v32)) {
    goto LABEL_42;
  }
  uint64_t v34 = *(void *)(v30 + 32);
  uint64_t v35 = *(unsigned __int8 *)(v30 + 40);
  uint64_t v36 = destructiveProjectEnumData for StorableValue(*(void *)(v29 + 32), *(unsigned __int8 *)(v29 + 40));
  if (v36 != destructiveProjectEnumData for StorableValue(v34, v35)) {
    goto LABEL_42;
  }
  uint64_t v37 = v29
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t v38 = v95;
  outlined init with copy of PgQuery_Alias?(v30+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v95, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v39 = v94;
  uint64_t v40 = v94 + *(int *)(v20 + 48);
  outlined init with copy of PgQuery_Alias?(v37, v94, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?(v38, v40, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  if (v41(v39, 1, RangeVar) == 1)
  {
    int v42 = v41(v40, 1, RangeVar);
    uint64_t v43 = v29;
    swift_retain();
    uint64_t v44 = v30;
    swift_retain();
    if (v42 == 1)
    {
      outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?(v95, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_11;
    }
LABEL_9:
    outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of AnyValue?(v95, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_37;
  }
  uint64_t v44 = v30;
  uint64_t v43 = v29;
  uint64_t v45 = v92;
  outlined init with copy of PgQuery_Alias?(v39, v92, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v41(v40, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_9;
  }
  uint64_t v46 = v85;
  outlined init with take of PgQuery_OidList(v40, v85, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  char v47 = specialized static PgQuery_RangeVar.== infix(_:_:)(v45, v46);
  outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?(v39, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?(v95, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v47 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_11:
  uint64_t v48 = v43
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  uint64_t v95 = v44;
  uint64_t v49 = v90;
  outlined init with copy of PgQuery_Alias?(v44+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v90, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v50 = v91;
  uint64_t v51 = v91 + *(int *)(v87 + 48);
  outlined init with copy of PgQuery_Alias?(v48, v91, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v49, v51, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v52 = v89;
  uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  if (v53(v50, 1, v89) == 1)
  {
    int v54 = v53(v51, 1, v52);
    uint64_t v5 = v83;
    if (v54 == 1)
    {
      outlined destroy of AnyValue?(v50, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v49, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v55 = v95;
      goto LABEL_21;
    }
    char v59 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_36:
    outlined destroy of AnyValue?(v50, v59);
    outlined destroy of AnyValue?(v49, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_37;
  }
  uint64_t v56 = v86;
  outlined init with copy of PgQuery_Alias?(v50, v86, &demangling cache variable for type metadata for PgQuery_Node?);
  int v57 = v53(v51, 1, v52);
  uint64_t v58 = v52;
  uint64_t v5 = v83;
  if (v57 == 1)
  {
    char v59 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_35:
    outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
    goto LABEL_36;
  }
  uint64_t v60 = v84;
  outlined init with take of PgQuery_OidList(v51, v84, type metadata accessor for PgQuery_Node);
  uint64_t v61 = *(int *)(v58 + 20);
  uint64_t v62 = *(void *)(v56 + v61);
  uint64_t v63 = *(void *)(v60 + v61);
  if (v62 != v63)
  {
    swift_retain();
    swift_retain();
    BOOL v64 = closure #1 in static PgQuery_Node.== infix(_:_:)(v62, v63);
    swift_release();
    swift_release();
    if (!v64)
    {
      outlined destroy of PgQuery_Alias(v84, type metadata accessor for PgQuery_Node);
      char v59 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v56 = v86;
      goto LABEL_35;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v65 = v86;
  uint64_t v66 = v84;
  char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v50, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v49, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v55 = v95;
  if ((v67 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_21:
  if (*(void *)(v43
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname) != *(void *)(v55 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname)
    || *(void *)(v43
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname
                 + 8) != *(void *)(v55
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname
                                   + 8))
  {
    char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v55 = v95;
    if ((v68 & 1) == 0) {
      goto LABEL_37;
    }
  }
  if (*(void *)(v43
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname) != *(void *)(v55 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname)
    || *(void *)(v43
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname
                 + 8) != *(void *)(v55
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname
                                   + 8))
  {
    char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v55 = v95;
    if ((v69 & 1) == 0) {
      goto LABEL_37;
    }
  }
  uint64_t v70 = *(void *)(v43
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
  uint64_t v71 = *(void *)(v55
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
  if (*(unsigned char *)(v55
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
                + 8) != 1)
  {
    if (v70 != v71) {
      goto LABEL_37;
    }
LABEL_41:
    int v73 = *(unsigned __int8 *)(v43
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
    int v74 = *(unsigned __int8 *)(v55
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk);
    swift_release();
    swift_release();
    uint64_t v27 = v80;
    uint64_t v8 = v81;
    a2 = v79;
    uint64_t v4 = v82;
    if (v73 != v74)
    {
LABEL_42:
      char v72 = 0;
      return v72 & 1;
    }
LABEL_43:
    uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v75(v10, v27, v4);
    v75(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v76 = *(void (**)(char *, uint64_t))(v5 + 8);
    v76(v8, v4);
    v76(v10, v4);
    return v72 & 1;
  }
  if (!v71)
  {
    if (v70) {
      goto LABEL_37;
    }
    goto LABEL_41;
  }
  if (v71 == 1)
  {
    if (v70 == 1) {
      goto LABEL_41;
    }
  }
  else if (v70 == 2)
  {
    goto LABEL_41;
  }
LABEL_37:
  swift_release();
  swift_release();
  char v72 = 0;
  return v72 & 1;
}

uint64_t specialized static PgQuery_NullIfExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v54 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v59 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v60 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v54 - v19;
  uint64_t NullIfExpr = type metadata accessor for PgQuery_NullIfExpr(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(NullIfExpr + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26) {
    goto LABEL_19;
  }
  uint64_t v55 = a2;
  uint64_t v56 = v23;
  int v54 = v10;
  uint64_t v57 = v22;
  uint64_t v58 = v4;
  uint64_t v28 = v25
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v26 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v33 = v26;
    uint64_t v34 = v60;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v60, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v31(v29, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v36 = v59;
      outlined init with take of PgQuery_OidList(v29, v59, type metadata accessor for PgQuery_Node);
      uint64_t v37 = *(int *)(Node + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v36 + v37);
      swift_retain();
      swift_retain();
      if (v38 == v39
        || (swift_retain(),
            swift_retain(),
            BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
            swift_release(),
            swift_release(),
            v40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v41) {
          goto LABEL_11;
        }
LABEL_23:
        swift_release();
        swift_release();
        goto LABEL_24;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v35 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_22:
    outlined destroy of AnyValue?((uint64_t)v15, v35);
    outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  unsigned int v32 = v31(v29, 1, Node);
  swift_retain();
  uint64_t v33 = v26;
  swift_retain();
  if (v32 != 1)
  {
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_22;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
    goto LABEL_23;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
    goto LABEL_23;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype))
    goto LABEL_23;
  if (*(unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) != *(unsigned __int8 *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset))
    goto LABEL_23;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid))
    goto LABEL_23;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
    goto LABEL_23;
  uint64_t v42 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v43 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v44 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v45 = specialized static Array<A>.== infix(_:_:)(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0) {
    goto LABEL_23;
  }
  int v46 = *(_DWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v47 = *(_DWORD *)(v44
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  uint64_t v22 = v57;
  uint64_t v4 = v58;
  uint64_t v10 = v54;
  uint64_t v27 = v55;
  uint64_t v23 = v56;
  if (v46 != v47)
  {
LABEL_24:
    char v51 = 0;
    return v51 & 1;
  }
LABEL_19:
  uint64_t v48 = v22;
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v50 = v27;
  v49(v10, v23, v4);
  v49(v8, v50, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v52 = *(void (**)(char *, uint64_t))(v48 + 8);
  v52(v8, v4);
  v52(v10, v4);
  return v51 & 1;
}

uint64_t specialized static PgQuery_ReplicaIdentityStmt.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v20 - v11;
  BOOL v13 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v15 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v15 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v16 = a3(0);
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v17(v12, &a1[*(int *)(v16 + 24)], v6);
      v17(v10, &a2[*(int *)(v16 + 24)], v6);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
      v18(v10, v6);
      v18(v12, v6);
    }
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_MinMaxExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v56 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v61 = (uint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  BOOL v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v62 = (uint64_t)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v56 - v19;
  uint64_t MinMaxExpr = type metadata accessor for PgQuery_MinMaxExpr(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(MinMaxExpr + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26)
  {
LABEL_30:
    uint64_t v51 = v22;
    uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    uint64_t v53 = v27;
    v52(v10, v23, v4);
    v52(v8, v53, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v54 = *(void (**)(char *, uint64_t))(v51 + 8);
    v54(v8, v4);
    v54(v10, v4);
    return v44 & 1;
  }
  uint64_t v57 = a2;
  uint64_t v58 = v23;
  uint64_t v56 = v10;
  uint64_t v59 = v22;
  uint64_t v60 = v4;
  uint64_t v28 = v25
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v26 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v33 = v26;
    uint64_t v34 = v62;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v62, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v31(v29, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v36 = v61;
      outlined init with take of PgQuery_OidList(v29, v61, type metadata accessor for PgQuery_Node);
      uint64_t v37 = *(int *)(Node + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v36 + v37);
      swift_retain();
      swift_retain();
      if (v38 == v39
        || (swift_retain(),
            swift_retain(),
            BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
            swift_release(),
            swift_release(),
            v40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v41 & 1) == 0) {
          goto LABEL_22;
        }
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v35 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_21:
    outlined destroy of AnyValue?((uint64_t)v15, v35);
    outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_22;
  }
  unsigned int v32 = v31(v29, 1, Node);
  swift_retain();
  uint64_t v33 = v26;
  swift_retain();
  if (v32 != 1)
  {
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_21;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxtype) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxtype)
    || *(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxcollid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxcollid)
    || *(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    goto LABEL_22;
  }
  uint64_t v42 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
  uint64_t v43 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
  if (*(unsigned char *)(v33
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                + 8) == 1)
  {
    if (v43)
    {
      if (v43 == 1)
      {
        if (v42 != 1) {
          goto LABEL_22;
        }
      }
      else if (v42 != 2)
      {
        goto LABEL_22;
      }
    }
    else if (v42)
    {
      goto LABEL_22;
    }
  }
  else if (v42 != v43)
  {
    goto LABEL_22;
  }
  uint64_t v45 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v46 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v47 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v48 = specialized static Array<A>.== infix(_:_:)(v45, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v48)
  {
    int v49 = *(_DWORD *)(v25
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    int v50 = *(_DWORD *)(v47
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    uint64_t v22 = v59;
    uint64_t v4 = v60;
    uint64_t v10 = v56;
    uint64_t v27 = v57;
    uint64_t v23 = v58;
    if (v49 != v50)
    {
      char v44 = 0;
      return v44 & 1;
    }
    goto LABEL_30;
  }
LABEL_22:
  swift_release();
  swift_release();
  char v44 = 0;
  return v44 & 1;
}

uint64_t specialized static PgQuery_IntoClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v94 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v95 = (char *)&v82 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v89 = *(void *)(Node - 8);
  uint64_t v90 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v86 = (uint64_t)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v88);
  uint64_t v91 = (uint64_t)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v87 = (uint64_t)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v92 = (uint64_t)&v82 - v15;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v17 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v93 = (uint64_t)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v25 = (char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v82 - v26;
  uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  uint64_t v29 = v5;
  uint64_t v30 = a1;
  uint64_t v31 = *(int *)(IntoClause + 20);
  uint64_t v32 = *(void *)(a1 + v31);
  uint64_t v33 = *(void *)(a2 + v31);
  uint64_t v34 = a2;
  if (v32 == v33) {
    goto LABEL_43;
  }
  uint64_t v82 = a2;
  uint64_t v83 = v30;
  uint64_t v84 = v29;
  uint64_t v85 = v4;
  uint64_t v35 = v32
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel;
  outlined init with copy of PgQuery_Alias?(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel, (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v36 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of PgQuery_Alias?(v35, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v36, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v37((uint64_t)v21, 1, RangeVar) == 1)
  {
    int v38 = v37(v36, 1, RangeVar);
    swift_retain();
    swift_retain();
    if (v38 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_10;
    }
LABEL_7:
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    uint64_t v39 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    uint64_t v40 = (uint64_t)v27;
LABEL_8:
    outlined destroy of AnyValue?(v40, v39);
    goto LABEL_42;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v37(v36, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  uint64_t v41 = v93;
  outlined init with take of PgQuery_OidList(v36, v93, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  char v42 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v25, v41);
  outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v42 & 1) == 0) {
    goto LABEL_42;
  }
LABEL_10:
  uint64_t v43 = *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames);
  uint64_t v44 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v45 = specialized static Array<A>.== infix(_:_:)(v43, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0
    || (*(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) != *(void *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod)
     || *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8) != *(void *)(v33
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_42;
  }
  uint64_t v46 = *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  uint64_t v47 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v48 = specialized static Array<A>.== infix(_:_:)(v46, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v48 & 1) == 0) {
    goto LABEL_42;
  }
  uint64_t v49 = *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit);
  uint64_t v50 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit);
  if (*(unsigned char *)(v33
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit
                + 8) == 1)
  {
    switch(v50)
    {
      case 1:
        if (v49 != 1) {
          goto LABEL_42;
        }
        goto LABEL_20;
      case 2:
        if (v49 != 2) {
          goto LABEL_42;
        }
        goto LABEL_20;
      case 3:
        if (v49 != 3) {
          goto LABEL_42;
        }
        goto LABEL_20;
      case 4:
        if (v49 != 4) {
          goto LABEL_42;
        }
        goto LABEL_20;
      default:
        if (!v49) {
          goto LABEL_20;
        }
        goto LABEL_42;
    }
  }
  if (v49 != v50) {
    goto LABEL_42;
  }
LABEL_20:
  if ((*(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName) != *(void *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName)
     || *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName
                  + 8) != *(void *)(v33
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_42:
    swift_release();
    swift_release();
    char v74 = 0;
    return v74 & 1;
  }
  uint64_t v51 = v32
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery;
  uint64_t v52 = v92;
  outlined init with copy of PgQuery_Alias?(v33+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery, v92, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v53 = v91;
  uint64_t v54 = v91 + *(int *)(v88 + 48);
  outlined init with copy of PgQuery_Alias?(v51, v91, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v55 = v53;
  outlined init with copy of PgQuery_Alias?(v52, v54, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v56 = v90;
  uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
  if (v57(v53, 1, v90) == 1)
  {
    int v58 = v57(v54, 1, v56);
    uint64_t v59 = v85;
    if (v58 == 1)
    {
      outlined destroy of AnyValue?(v53, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v92, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_40;
    }
    uint64_t v62 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_47;
  }
  uint64_t v60 = v87;
  outlined init with copy of PgQuery_Alias?(v55, v87, &demangling cache variable for type metadata for PgQuery_Node?);
  int v61 = v57(v54, 1, v56);
  uint64_t v59 = v85;
  if (v61 == 1)
  {
    uint64_t v62 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_46:
    outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
LABEL_47:
    outlined destroy of AnyValue?(v55, v62);
    uint64_t v39 = &demangling cache variable for type metadata for PgQuery_Node?;
    uint64_t v40 = v92;
    goto LABEL_8;
  }
  uint64_t v63 = v54;
  uint64_t v64 = v56;
  uint64_t v65 = v86;
  outlined init with take of PgQuery_OidList(v63, v86, type metadata accessor for PgQuery_Node);
  uint64_t v66 = *(int *)(v64 + 20);
  uint64_t v67 = *(void *)(v60 + v66);
  uint64_t v68 = *(void *)(v65 + v66);
  if (v67 != v68)
  {
    swift_retain();
    swift_retain();
    BOOL v69 = closure #1 in static PgQuery_Node.== infix(_:_:)(v67, v68);
    swift_release();
    swift_release();
    if (!v69)
    {
      outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
      uint64_t v62 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v60 = v87;
      goto LABEL_46;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v70 = v87;
  char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v92, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v71 & 1) == 0) {
    goto LABEL_42;
  }
LABEL_40:
  int v72 = *(unsigned __int8 *)(v32
                           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData);
  int v73 = *(unsigned __int8 *)(v33
                           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData);
  swift_release();
  swift_release();
  uint64_t v30 = v83;
  uint64_t v29 = v84;
  uint64_t v34 = v82;
  uint64_t v4 = v59;
  if (v72 == v73)
  {
LABEL_43:
    uint64_t v75 = v29;
    uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
    uint64_t v77 = v95;
    uint64_t v78 = v34;
    v76(v95, v30, v4);
    uint64_t v79 = v94;
    v76(v94, v78, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v80 = *(void (**)(char *, uint64_t))(v75 + 8);
    v80(v79, v4);
    v80(v77, v4);
    return v74 & 1;
  }
  char v74 = 0;
  return v74 & 1;
}

uint64_t specialized static PgQuery_InsertStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v141 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v140 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v114 - v7;
  uint64_t v9 = type metadata accessor for PgQuery_WithClause(0);
  uint64_t v122 = *(void *)(v9 - 8);
  uint64_t v123 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v119 = (uint64_t)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
  MEMORY[0x1F4188790](v121);
  uint64_t v124 = (uint64_t)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v120 = (uint64_t)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v126 = (uint64_t)&v114 - v15;
  uint64_t v16 = type metadata accessor for PgQuery_OnConflictClause(0);
  uint64_t v128 = *(void *)(v16 - 8);
  uint64_t v129 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v125 = (uint64_t)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_OnConflictClause?, PgQuery_OnConflictClause?));
  MEMORY[0x1F4188790](v127);
  uint64_t v130 = (uint64_t)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  int v142 = (char *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v132 = (uint64_t)&v114 - v22;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v135 = *(void *)(Node - 8);
  uint64_t v136 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v131 = (uint64_t)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v134);
  uint64_t v138 = (uint64_t)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v27 = MEMORY[0x1F4188790](v26 - 8);
  uint64_t v133 = (uint64_t)&v114 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v137 = (uint64_t)&v114 - v29;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v31 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v139 = (uint64_t)&v114 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)&v114 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v37 = MEMORY[0x1F4188790](v36 - 8);
  uint64_t v39 = (char *)&v114 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v114 - v40;
  uint64_t InsertStmt = type metadata accessor for PgQuery_InsertStmt(0);
  uint64_t v43 = a1;
  uint64_t v44 = *(int *)(InsertStmt + 20);
  uint64_t v45 = *(void *)(a1 + v44);
  uint64_t v46 = a2;
  uint64_t v47 = *(void *)(a2 + v44);
  uint64_t v48 = v46;
  if (v45 == v47) {
    goto LABEL_44;
  }
  uint64_t v116 = v43;
  uint64_t v117 = v46;
  uint64_t v115 = v8;
  uint64_t v118 = v4;
  uint64_t v49 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v50 = (uint64_t)&v35[*(int *)(v33 + 48)];
  outlined init with copy of PgQuery_Alias?(v49, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v41, v50, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  if (v51((uint64_t)v35, 1, RangeVar) == 1)
  {
    int v52 = v51(v50, 1, RangeVar);
    swift_retain();
    swift_retain();
    uint64_t v53 = (uint64_t)v142;
    if (v52 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_10;
    }
LABEL_7:
    outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    uint64_t v55 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    uint64_t v56 = (uint64_t)v41;
LABEL_8:
    outlined destroy of AnyValue?(v56, v55);
    goto LABEL_41;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v35, (uint64_t)v39, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  int v54 = v51(v50, 1, RangeVar);
  uint64_t v53 = (uint64_t)v142;
  if (v54 == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  uint64_t v57 = v139;
  outlined init with take of PgQuery_OidList(v50, v139, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  char v58 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v39, v57);
  outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v58 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_10:
  uint64_t v59 = *(void *)(v45
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols);
  uint64_t v60 = *(void *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v61 = specialized static Array<A>.== infix(_:_:)(v59, v60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v61 & 1) == 0) {
    goto LABEL_41;
  }
  uint64_t v62 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectStmt;
  uint64_t v63 = v137;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectStmt, v137, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v64 = v138;
  uint64_t v65 = v138 + *(int *)(v134 + 48);
  outlined init with copy of PgQuery_Alias?(v62, v138, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v63, v65, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v66 = v136;
  uint64_t v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
  if (v67(v64, 1, v136) == 1)
  {
    int v68 = v67(v65, 1, v66);
    uint64_t v69 = v118;
    if (v68 == 1)
    {
      outlined destroy of AnyValue?(v64, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v63, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_20;
    }
    int v72 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_33:
    outlined destroy of AnyValue?(v64, v72);
    uint64_t v55 = &demangling cache variable for type metadata for PgQuery_Node?;
    uint64_t v56 = v63;
    goto LABEL_8;
  }
  uint64_t v70 = v133;
  outlined init with copy of PgQuery_Alias?(v64, v133, &demangling cache variable for type metadata for PgQuery_Node?);
  int v71 = v67(v65, 1, v66);
  uint64_t v69 = v118;
  if (v71 == 1)
  {
    int v72 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_32:
    outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_Node);
    goto LABEL_33;
  }
  uint64_t v73 = v131;
  outlined init with take of PgQuery_OidList(v65, v131, type metadata accessor for PgQuery_Node);
  uint64_t v74 = *(int *)(v66 + 20);
  uint64_t v75 = *(void *)(v70 + v74);
  uint64_t v76 = *(void *)(v73 + v74);
  if (v75 != v76)
  {
    swift_retain();
    swift_retain();
    BOOL v77 = closure #1 in static PgQuery_Node.== infix(_:_:)(v75, v76);
    swift_release();
    swift_release();
    if (!v77)
    {
      outlined destroy of PgQuery_Alias(v131, type metadata accessor for PgQuery_Node);
      int v72 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v70 = v133;
      goto LABEL_32;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v78 = v133;
  uint64_t v79 = v131;
  char v80 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v79, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v64, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v63, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v80 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_20:
  uint64_t v81 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictClause;
  uint64_t v82 = v132;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictClause, v132, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  uint64_t v83 = v130;
  uint64_t v84 = v130 + *(int *)(v127 + 48);
  outlined init with copy of PgQuery_Alias?(v81, v130, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  uint64_t v85 = v83;
  outlined init with copy of PgQuery_Alias?(v82, v84, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  uint64_t v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
  uint64_t v87 = v83;
  uint64_t v88 = v129;
  if (v86(v87, 1, v129) == 1)
  {
    if (v86(v84, 1, v88) == 1)
    {
      outlined destroy of AnyValue?(v85, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
      outlined destroy of AnyValue?(v132, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  outlined init with copy of PgQuery_Alias?(v85, v53, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  if (v86(v84, 1, v88) == 1)
  {
    outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_OnConflictClause);
LABEL_25:
    outlined destroy of AnyValue?(v85, &demangling cache variable for type metadata for (PgQuery_OnConflictClause?, PgQuery_OnConflictClause?));
    uint64_t v55 = &demangling cache variable for type metadata for PgQuery_OnConflictClause?;
    uint64_t v56 = v132;
    goto LABEL_8;
  }
  uint64_t v89 = v125;
  outlined init with take of PgQuery_OidList(v84, v125, type metadata accessor for PgQuery_OnConflictClause);
  char v90 = specialized static PgQuery_OnConflictClause.== infix(_:_:)(v53, v89);
  outlined destroy of PgQuery_Alias(v89, type metadata accessor for PgQuery_OnConflictClause);
  outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_OnConflictClause);
  outlined destroy of AnyValue?(v85, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  outlined destroy of AnyValue?(v132, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  if ((v90 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_27:
  uint64_t v91 = *(void *)(v45
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  uint64_t v92 = *(void *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v93 = specialized static Array<A>.== infix(_:_:)(v91, v92);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v93 & 1) == 0) {
    goto LABEL_41;
  }
  uint64_t v94 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  uint64_t v95 = v126;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v126, &demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v96 = v124;
  uint64_t v97 = v124 + *(int *)(v121 + 48);
  outlined init with copy of PgQuery_Alias?(v94, v124, &demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v98 = v96;
  outlined init with copy of PgQuery_Alias?(v95, v97, &demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v99 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
  uint64_t v100 = v96;
  uint64_t v101 = v123;
  if (v99(v100, 1, v123) != 1)
  {
    uint64_t v102 = v120;
    outlined init with copy of PgQuery_Alias?(v98, v120, &demangling cache variable for type metadata for PgQuery_WithClause?);
    if (v99(v97, 1, v101) != 1)
    {
      uint64_t v103 = v119;
      outlined init with take of PgQuery_OidList(v97, v119, type metadata accessor for PgQuery_WithClause);
      char v104 = specialized static PgQuery_WithClause.== infix(_:_:)(v102, v103);
      outlined destroy of PgQuery_Alias(v103, type metadata accessor for PgQuery_WithClause);
      outlined destroy of PgQuery_Alias(v102, type metadata accessor for PgQuery_WithClause);
      outlined destroy of AnyValue?(v98, &demangling cache variable for type metadata for PgQuery_WithClause?);
      outlined destroy of AnyValue?(v126, &demangling cache variable for type metadata for PgQuery_WithClause?);
      if ((v104 & 1) == 0) {
        goto LABEL_41;
      }
      goto LABEL_38;
    }
    outlined destroy of PgQuery_Alias(v102, type metadata accessor for PgQuery_WithClause);
    goto LABEL_36;
  }
  if (v99(v97, 1, v101) != 1)
  {
LABEL_36:
    outlined destroy of AnyValue?(v98, &demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
    uint64_t v55 = &demangling cache variable for type metadata for PgQuery_WithClause?;
    uint64_t v56 = v126;
    goto LABEL_8;
  }
  outlined destroy of AnyValue?(v98, &demangling cache variable for type metadata for PgQuery_WithClause?);
  outlined destroy of AnyValue?(v126, &demangling cache variable for type metadata for PgQuery_WithClause?);
LABEL_38:
  uint64_t v105 = *(void *)(v45
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override);
  uint64_t v106 = *(void *)(v47
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override);
  if (*(unsigned char *)(v47
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override
                + 8) == 1)
  {
    switch(v106)
    {
      case 1:
        if (v105 == 1) {
          goto LABEL_43;
        }
        goto LABEL_41;
      case 2:
        if (v105 == 2) {
          goto LABEL_43;
        }
        goto LABEL_41;
      case 3:
        if (v105 == 3) {
          goto LABEL_43;
        }
        goto LABEL_41;
      default:
        if (v105) {
          goto LABEL_41;
        }
        goto LABEL_43;
    }
  }
  if (v105 == v106)
  {
LABEL_43:
    swift_release();
    swift_release();
    uint64_t v8 = v115;
    uint64_t v48 = v117;
    uint64_t v43 = v116;
    uint64_t v4 = v69;
LABEL_44:
    uint64_t v108 = v141;
    uint64_t v109 = *(void (**)(char *, uint64_t, uint64_t))(v141 + 16);
    uint64_t v110 = v48;
    v109(v8, v43, v4);
    uint64_t v111 = v140;
    v109(v140, v110, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v107 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v112 = *(void (**)(char *, uint64_t))(v108 + 8);
    v112(v111, v4);
    v112(v8, v4);
    return v107 & 1;
  }
LABEL_41:
  swift_release();
  swift_release();
  char v107 = 0;
  return v107 & 1;
}

uint64_t specialized static PgQuery_FieldStore.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v85 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  uint64_t v12 = MEMORY[0x1F4188790](Node);
  uint64_t v92 = (uint64_t)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v94 = (uint64_t)&v85 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v96 = (uint64_t)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v85 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v93 = (uint64_t)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v95 = (uint64_t)&v85 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v98 = (uint64_t)&v85 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v85 - v27;
  uint64_t FieldStore = type metadata accessor for PgQuery_FieldStore(0);
  uint64_t v30 = a1;
  uint64_t v31 = *(int *)(FieldStore + 20);
  uint64_t v32 = *(void *)(a1 + v31);
  uint64_t v33 = *(void *)(a2 + v31);
  uint64_t v34 = a2;
  if (v32 == v33) {
    goto LABEL_23;
  }
  uint64_t v88 = v30;
  uint64_t v89 = a2;
  uint64_t v86 = v8;
  uint64_t v87 = v10;
  uint64_t v90 = v5;
  uint64_t v91 = v4;
  uint64_t v35 = v32;
  uint64_t v36 = v32
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v37 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v36, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v97 = v28;
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v37, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v38 = v11 + 48;
  uint64_t v39 = v40;
  uint64_t v41 = Node;
  int v42 = v40((uint64_t)v19, 1, Node);
  uint64_t v99 = v35;
  if (v42 == 1)
  {
    int v43 = v39(v37, 1, v41);
    swift_retain();
    swift_retain();
    if (v43 == 1)
    {
      uint64_t v85 = v38;
      outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v97, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v4 = v91;
      goto LABEL_11;
    }
    uint64_t v45 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    uint64_t v46 = (uint64_t)v97;
LABEL_27:
    outlined destroy of AnyValue?((uint64_t)v19, v45);
    outlined destroy of AnyValue?(v46, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_32;
  }
  uint64_t v44 = v98;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v98, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v39(v37, 1, v41) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v45 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    uint64_t v46 = (uint64_t)v97;
LABEL_26:
    outlined destroy of PgQuery_Alias(v44, type metadata accessor for PgQuery_Node);
    goto LABEL_27;
  }
  uint64_t v85 = v38;
  uint64_t v47 = v94;
  outlined init with take of PgQuery_OidList(v37, v94, type metadata accessor for PgQuery_Node);
  uint64_t v48 = *(int *)(v41 + 20);
  uint64_t v49 = *(void *)(v44 + v48);
  uint64_t v50 = *(void *)(v47 + v48);
  swift_retain();
  swift_retain();
  if (v49 != v50)
  {
    swift_retain();
    swift_retain();
    BOOL v51 = closure #1 in static PgQuery_Node.== infix(_:_:)(v49, v50);
    swift_release();
    swift_release();
    if (!v51)
    {
      outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
      uint64_t v45 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v46 = (uint64_t)v97;
      uint64_t v44 = v98;
      goto LABEL_26;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v52 = v98;
  uint64_t v4 = v91;
  char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v47, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v97, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v53 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_11:
  uint64_t v54 = v99
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  uint64_t v55 = v95;
  outlined init with copy of PgQuery_Alias?(v33 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v95, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v56 = v96;
  uint64_t v57 = v96 + *(int *)(v15 + 48);
  outlined init with copy of PgQuery_Alias?(v54, v96, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v55, v57, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v58 = Node;
  if (v39(v56, 1, Node) != 1)
  {
    uint64_t v61 = v93;
    outlined init with copy of PgQuery_Alias?(v56, v93, &demangling cache variable for type metadata for PgQuery_Node?);
    int v62 = v39(v57, 1, v58);
    uint64_t v5 = v90;
    if (v62 == 1)
    {
      uint64_t v63 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v64 = v92;
      outlined init with take of PgQuery_OidList(v57, v92, type metadata accessor for PgQuery_Node);
      uint64_t v65 = *(int *)(v58 + 20);
      uint64_t v66 = *(void *)(v61 + v65);
      uint64_t v67 = *(void *)(v64 + v65);
      if (v66 == v67
        || (swift_retain(),
            swift_retain(),
            BOOL v68 = closure #1 in static PgQuery_Node.== infix(_:_:)(v66, v67),
            swift_release(),
            swift_release(),
            v68))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v69 = v91;
        char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v71 = v64;
        uint64_t v4 = v69;
        outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v60 = v99;
        if (v70) {
          goto LABEL_20;
        }
LABEL_32:
        swift_release();
        swift_release();
        goto LABEL_33;
      }
      outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
      uint64_t v63 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Node);
LABEL_31:
    outlined destroy of AnyValue?(v56, v63);
    outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_32;
  }
  int v59 = v39(v57, 1, v58);
  uint64_t v5 = v90;
  if (v59 != 1)
  {
    uint64_t v63 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_31;
  }
  outlined destroy of AnyValue?(v56, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v60 = v99;
LABEL_20:
  uint64_t v72 = *(void *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newvals);
  uint64_t v73 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newvals);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v74 = specialized static Array<A>.== infix(_:_:)(v72, v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v74 & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v75 = *(void *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnums);
  uint64_t v76 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnums);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v77 = specialized static Array<A>.== infix(_:_:)(v75, v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v77 & 1) == 0) {
    goto LABEL_32;
  }
  int v78 = *(_DWORD *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype);
  int v79 = *(_DWORD *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype);
  swift_release();
  swift_release();
  uint64_t v8 = v86;
  uint64_t v10 = v87;
  uint64_t v30 = v88;
  uint64_t v34 = v89;
  if (v78 != v79)
  {
LABEL_33:
    char v82 = 0;
    return v82 & 1;
  }
LABEL_23:
  char v80 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v81 = v34;
  v80(v10, v30, v4);
  v80(v8, v81, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v82 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v83 = *(void (**)(char *, uint64_t))(v5 + 8);
  v83(v8, v4);
  v83(v10, v4);
  return v82 & 1;
}

uint64_t specialized static PgQuery_CreateExtensionStmt.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v19 - v11;
  BOOL v13 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a2 + 24)) & 1) != 0)
    {
      uint64_t v15 = a3(0);
      uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v16(v12, a1 + *(int *)(v15 + 28), v6);
      v16(v10, a2 + *(int *)(v15 + 28), v6);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
      v17(v10, v6);
      v17(v12, v6);
    }
    else
    {
      char v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_DeleteStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v113 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v112 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v93 - v7;
  uint64_t v9 = type metadata accessor for PgQuery_WithClause(0);
  uint64_t v99 = *(void *)(v9 - 8);
  uint64_t v100 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v97 = (uint64_t)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
  MEMORY[0x1F4188790](v110);
  uint64_t v101 = (uint64_t)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v98 = (uint64_t)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v102 = (uint64_t)&v93 - v15;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v106 = *(void *)(Node - 8);
  uint64_t v107 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v103 = (uint64_t)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v105);
  uint64_t v109 = (uint64_t)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v104 = (uint64_t)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v108 = (uint64_t)&v93 - v22;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v24 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v111 = (uint64_t)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v93 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  uint64_t v32 = (char *)&v93 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v93 - v33;
  uint64_t v35 = type metadata accessor for PgQuery_DeleteStmt(0);
  uint64_t v36 = a1;
  uint64_t v37 = *(int *)(v35 + 20);
  uint64_t v38 = *(void *)(a1 + v37);
  uint64_t v39 = a2;
  uint64_t v40 = *(void *)(a2 + v37);
  uint64_t v41 = v39;
  if (v38 == v40) {
    goto LABEL_32;
  }
  uint64_t v94 = v36;
  uint64_t v95 = v39;
  uint64_t v93 = v8;
  uint64_t v96 = v4;
  uint64_t v42 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v43 = (uint64_t)&v28[*(int *)(v26 + 48)];
  outlined init with copy of PgQuery_Alias?(v42, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v34, v43, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v44((uint64_t)v28, 1, RangeVar) == 1)
  {
    int v45 = v44(v43, 1, RangeVar);
    swift_retain();
    swift_retain();
    if (v45 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_10;
    }
LABEL_7:
    outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    uint64_t v46 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    uint64_t v47 = (uint64_t)v34;
LABEL_8:
    outlined destroy of AnyValue?(v47, v46);
    goto LABEL_33;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, (uint64_t)v32, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v44(v43, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  uint64_t v48 = v111;
  outlined init with take of PgQuery_OidList(v43, v111, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  char v49 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v32, v48);
  outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v49 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_10:
  uint64_t v50 = *(void *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause);
  uint64_t v51 = *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v52 = specialized static Array<A>.== infix(_:_:)(v50, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v52 & 1) == 0) {
    goto LABEL_33;
  }
  uint64_t v53 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t v54 = v108;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v108, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v55 = v109;
  uint64_t v56 = v109 + *(int *)(v105 + 48);
  outlined init with copy of PgQuery_Alias?(v53, v109, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v54, v56, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v57 = v107;
  uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
  if (v58(v55, 1, v107) == 1)
  {
    int v59 = v58(v56, 1, v57);
    uint64_t v60 = v96;
    uint64_t v61 = v110;
    if (v59 == 1)
    {
      outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v54, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_20;
    }
    uint64_t v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_29:
    outlined destroy of AnyValue?(v55, v64);
    uint64_t v46 = &demangling cache variable for type metadata for PgQuery_Node?;
    uint64_t v47 = v54;
    goto LABEL_8;
  }
  uint64_t v62 = v104;
  outlined init with copy of PgQuery_Alias?(v55, v104, &demangling cache variable for type metadata for PgQuery_Node?);
  int v63 = v58(v56, 1, v57);
  uint64_t v60 = v96;
  uint64_t v61 = v110;
  if (v63 == 1)
  {
    uint64_t v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_28:
    outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
    goto LABEL_29;
  }
  uint64_t v65 = v103;
  outlined init with take of PgQuery_OidList(v56, v103, type metadata accessor for PgQuery_Node);
  uint64_t v66 = *(int *)(v57 + 20);
  uint64_t v67 = *(void *)(v62 + v66);
  uint64_t v68 = *(void *)(v65 + v66);
  if (v67 != v68)
  {
    swift_retain();
    swift_retain();
    BOOL v69 = closure #1 in static PgQuery_Node.== infix(_:_:)(v67, v68);
    swift_release();
    swift_release();
    if (!v69)
    {
      outlined destroy of PgQuery_Alias(v103, type metadata accessor for PgQuery_Node);
      uint64_t v64 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v62 = v104;
      goto LABEL_28;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v70 = v103;
  uint64_t v71 = v104;
  char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v70, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v54, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v72 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_20:
  uint64_t v73 = *(void *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  uint64_t v74 = *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v75 = specialized static Array<A>.== infix(_:_:)(v73, v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v75 & 1) == 0) {
    goto LABEL_33;
  }
  uint64_t v76 = v38
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  uint64_t v77 = v102;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v102, &demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v78 = v101;
  uint64_t v79 = v101 + *(int *)(v61 + 48);
  outlined init with copy of PgQuery_Alias?(v76, v101, &demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v80 = v78;
  outlined init with copy of PgQuery_Alias?(v77, v79, &demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v81 = v100;
  char v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48);
  if (v82(v78, 1, v100) != 1)
  {
    uint64_t v83 = v98;
    outlined init with copy of PgQuery_Alias?(v78, v98, &demangling cache variable for type metadata for PgQuery_WithClause?);
    if (v82(v79, 1, v81) != 1)
    {
      uint64_t v84 = v97;
      outlined init with take of PgQuery_OidList(v79, v97, type metadata accessor for PgQuery_WithClause);
      char v85 = specialized static PgQuery_WithClause.== infix(_:_:)(v83, v84);
      outlined destroy of PgQuery_Alias(v84, type metadata accessor for PgQuery_WithClause);
      outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_WithClause);
      outlined destroy of AnyValue?(v80, &demangling cache variable for type metadata for PgQuery_WithClause?);
      outlined destroy of AnyValue?(v102, &demangling cache variable for type metadata for PgQuery_WithClause?);
      if (v85) {
        goto LABEL_31;
      }
LABEL_33:
      swift_release();
      swift_release();
      char v90 = 0;
      return v90 & 1;
    }
    outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_WithClause);
    goto LABEL_26;
  }
  if (v82(v79, 1, v81) != 1)
  {
LABEL_26:
    outlined destroy of AnyValue?(v78, &demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
    uint64_t v46 = &demangling cache variable for type metadata for PgQuery_WithClause?;
    uint64_t v47 = v102;
    goto LABEL_8;
  }
  outlined destroy of AnyValue?(v78, &demangling cache variable for type metadata for PgQuery_WithClause?);
  outlined destroy of AnyValue?(v102, &demangling cache variable for type metadata for PgQuery_WithClause?);
LABEL_31:
  swift_release();
  swift_release();
  uint64_t v8 = v93;
  uint64_t v36 = v94;
  uint64_t v41 = v95;
  uint64_t v4 = v60;
LABEL_32:
  uint64_t v86 = v113;
  uint64_t v87 = *(void (**)(char *, uint64_t, uint64_t))(v113 + 16);
  uint64_t v88 = v41;
  v87(v8, v36, v4);
  uint64_t v89 = v112;
  v87(v112, v88, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v90 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v91 = *(void (**)(char *, uint64_t))(v86 + 8);
  v91(v89, v4);
  v91(v8, v4);
  return v90 & 1;
}

uint64_t specialized static PgQuery_DefineStmt.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *a2;
  uint64_t v12 = *((unsigned __int8 *)a2 + 8);
  uint64_t v13 = destructiveProjectEnumData for StorableValue(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  if (v13 == destructiveProjectEnumData for StorableValue(v11, v12)
    && *(unsigned __int8 *)(a1 + 9) == *((unsigned __int8 *)a2 + 9)
    && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 16), a2[2]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 24), a2[3]) & 1) != 0
    && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 32), a2[4]) & 1) != 0
    && *(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40)
    && *(unsigned __int8 *)(a1 + 41) == *((unsigned __int8 *)a2 + 41))
  {
    Defineuint64_t Stmt = type metadata accessor for PgQuery_DefineStmt(0);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v10, a1 + *(int *)(DefineStmt + 44), v4);
    v17(v8, (uint64_t)a2 + *(int *)(DefineStmt + 44), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  else
  {
    char v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_PartitionBoundSpec.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 32), *(void *)(a2 + 32)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 40), *(void *)(a2 + 40)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 48), *(void *)(a2 + 48)) & 1) != 0
      && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56))
    {
      uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
      char v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v14(v10, a1 + *(int *)(PartitionBoundSpec + 48), v4);
      v14(v8, a2 + *(int *)(PartitionBoundSpec + 48), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static PgQuery_CreateStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v140 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v139 = (char *)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v138 = (char *)&v112 - v7;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v121 = *(void *)(TypeName - 8);
  uint64_t v122 = TypeName;
  MEMORY[0x1F4188790](TypeName);
  uint64_t v117 = (uint64_t)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1F4188790](v120);
  BOOL v11 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v118 = (uint64_t)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v124 = (uint64_t)&v112 - v15;
  uint64_t PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  uint64_t v126 = *(void *)(PartitionSpec - 8);
  uint64_t v127 = PartitionSpec;
  MEMORY[0x1F4188790](PartitionSpec);
  uint64_t v119 = (uint64_t)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_PartitionSpec?, PgQuery_PartitionSpec?));
  MEMORY[0x1F4188790](v125);
  uint64_t v128 = (uint64_t)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v137 = (char *)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v130 = (uint64_t)&v112 - v22;
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  uint64_t v132 = *(void *)(PartitionBoundSpec - 8);
  uint64_t v133 = PartitionBoundSpec;
  MEMORY[0x1F4188790](PartitionBoundSpec);
  uint64_t v123 = (uint64_t)&v112 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_PartitionBoundSpec?, PgQuery_PartitionBoundSpec?));
  MEMORY[0x1F4188790](v131);
  uint64_t v134 = (uint64_t)&v112 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  uint64_t v27 = MEMORY[0x1F4188790](v26 - 8);
  uint64_t v129 = (uint64_t)&v112 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v135 = (uint64_t)&v112 - v29;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v31 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v136 = (uint64_t)&v112 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)&v112 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v37 = MEMORY[0x1F4188790](v36 - 8);
  uint64_t v39 = (char *)&v112 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v112 - v40;
  uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  uint64_t v43 = a1;
  uint64_t v44 = *(int *)(Stmt + 20);
  uint64_t v45 = *(void *)(a1 + v44);
  uint64_t v46 = a2;
  uint64_t v47 = *(void *)(a2 + v44);
  uint64_t v48 = v46;
  if (v45 == v47) {
    goto LABEL_60;
  }
  uint64_t v115 = v11;
  uint64_t v113 = v43;
  uint64_t v114 = v46;
  uint64_t v116 = v4;
  uint64_t v49 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v50 = (uint64_t)&v35[*(int *)(v33 + 48)];
  outlined init with copy of PgQuery_Alias?(v49, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v41, v50, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  if (v51((uint64_t)v35, 1, RangeVar) == 1)
  {
    int v52 = v51(v50, 1, RangeVar);
    uint64_t v53 = v45;
    swift_retain();
    swift_retain();
    if (v52 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      uint64_t v54 = v116;
      uint64_t v55 = (uint64_t)v137;
      goto LABEL_11;
    }
LABEL_7:
    outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    uint64_t v56 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    uint64_t v57 = (uint64_t)v41;
    goto LABEL_8;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v35, (uint64_t)v39, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v51(v50, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  uint64_t v59 = v136;
  outlined init with take of PgQuery_OidList(v50, v136, type metadata accessor for PgQuery_RangeVar);
  uint64_t v53 = v45;
  swift_retain();
  swift_retain();
  char v60 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v39, v59);
  outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v41, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v54 = v116;
  uint64_t v55 = (uint64_t)v137;
  if ((v60 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v61 = *(void *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts);
  uint64_t v62 = *(void *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v63 = specialized static Array<A>.== infix(_:_:)(v61, v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v63 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v64 = *(void *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations);
  uint64_t v65 = *(void *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v66 = specialized static Array<A>.== infix(_:_:)(v64, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v66 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v67 = v53
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound;
  uint64_t v68 = v135;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound, v135, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  uint64_t v69 = v134;
  uint64_t v70 = v134 + *(int *)(v131 + 48);
  outlined init with copy of PgQuery_Alias?(v67, v134, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  outlined init with copy of PgQuery_Alias?(v68, v70, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  uint64_t v71 = v133;
  char v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48);
  if (v72(v69, 1, v133) == 1)
  {
    if (v72(v70, 1, v71) == 1)
    {
      outlined destroy of AnyValue?(v69, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
      outlined destroy of AnyValue?(v135, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
      goto LABEL_21;
    }
LABEL_19:
    outlined destroy of AnyValue?(v69, &demangling cache variable for type metadata for (PgQuery_PartitionBoundSpec?, PgQuery_PartitionBoundSpec?));
    uint64_t v56 = &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?;
    uint64_t v57 = v135;
    goto LABEL_8;
  }
  uint64_t v73 = v54;
  uint64_t v74 = v129;
  outlined init with copy of PgQuery_Alias?(v69, v129, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  if (v72(v70, 1, v71) == 1)
  {
    outlined destroy of PgQuery_Alias(v74, type metadata accessor for PgQuery_PartitionBoundSpec);
    goto LABEL_19;
  }
  uint64_t v75 = v123;
  outlined init with take of PgQuery_OidList(v70, v123, type metadata accessor for PgQuery_PartitionBoundSpec);
  char v76 = specialized static PgQuery_PartitionBoundSpec.== infix(_:_:)(v74, v75);
  outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_PartitionBoundSpec);
  outlined destroy of PgQuery_Alias(v74, type metadata accessor for PgQuery_PartitionBoundSpec);
  outlined destroy of AnyValue?(v69, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  outlined destroy of AnyValue?(v135, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  uint64_t v54 = v73;
  if ((v76 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_21:
  uint64_t v77 = v53
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec;
  uint64_t v78 = v130;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec, v130, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  uint64_t v79 = v128;
  uint64_t v80 = v128 + *(int *)(v125 + 48);
  outlined init with copy of PgQuery_Alias?(v77, v128, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  outlined init with copy of PgQuery_Alias?(v78, v80, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  uint64_t v81 = v127;
  char v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48);
  if (v82(v79, 1, v127) == 1)
  {
    if (v82(v80, 1, v81) == 1)
    {
      outlined destroy of AnyValue?(v79, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
      outlined destroy of AnyValue?(v130, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
      goto LABEL_28;
    }
LABEL_26:
    outlined destroy of AnyValue?(v79, &demangling cache variable for type metadata for (PgQuery_PartitionSpec?, PgQuery_PartitionSpec?));
    uint64_t v56 = &demangling cache variable for type metadata for PgQuery_PartitionSpec?;
    uint64_t v57 = v130;
    goto LABEL_8;
  }
  outlined init with copy of PgQuery_Alias?(v79, v55, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  if (v82(v80, 1, v81) == 1)
  {
    outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_PartitionSpec);
    goto LABEL_26;
  }
  uint64_t v83 = v119;
  outlined init with take of PgQuery_OidList(v80, v119, type metadata accessor for PgQuery_PartitionSpec);
  char v84 = specialized static PgQuery_PartitionSpec.== infix(_:_:)(v55, v83);
  outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_PartitionSpec);
  outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_PartitionSpec);
  outlined destroy of AnyValue?(v79, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  outlined destroy of AnyValue?(v130, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  if ((v84 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_28:
  uint64_t v85 = v53
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename;
  uint64_t v86 = v124;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename, v124, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v87 = (uint64_t)v115;
  uint64_t v88 = (uint64_t)&v115[*(int *)(v120 + 48)];
  outlined init with copy of PgQuery_Alias?(v85, (uint64_t)v115, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?(v86, v88, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v89 = v122;
  char v90 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48);
  if (v90(v87, 1, v122) != 1)
  {
    uint64_t v99 = v87;
    uint64_t v100 = v118;
    outlined init with copy of PgQuery_Alias?(v99, v118, &demangling cache variable for type metadata for PgQuery_TypeName?);
    if (v90(v88, 1, v89) == 1)
    {
      outlined destroy of PgQuery_Alias(v100, type metadata accessor for PgQuery_TypeName);
      goto LABEL_39;
    }
    uint64_t v101 = v117;
    outlined init with take of PgQuery_OidList(v88, v117, type metadata accessor for PgQuery_TypeName);
    if ((specialized static Array<A>.== infix(_:_:)(*(void *)v100, *(void *)v101) & 1) != 0
      && *(_DWORD *)(v100 + 8) == *(_DWORD *)(v101 + 8)
      && *(unsigned __int8 *)(v100 + 12) == *(unsigned __int8 *)(v101 + 12)
      && *(unsigned __int8 *)(v100 + 13) == *(unsigned __int8 *)(v101 + 13)
      && (specialized static Array<A>.== infix(_:_:)(*(void *)(v100 + 16), *(void *)(v101 + 16)) & 1) != 0
      && *(_DWORD *)(v100 + 24) == *(_DWORD *)(v101 + 24)
      && (specialized static Array<A>.== infix(_:_:)(*(void *)(v100 + 32), *(void *)(v101 + 32)) & 1) != 0
      && *(_DWORD *)(v100 + 40) == *(_DWORD *)(v101 + 40))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v102 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of PgQuery_Alias(v101, type metadata accessor for PgQuery_TypeName);
      outlined destroy of PgQuery_Alias(v100, type metadata accessor for PgQuery_TypeName);
      outlined destroy of AnyValue?((uint64_t)v115, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined destroy of AnyValue?(v124, &demangling cache variable for type metadata for PgQuery_TypeName?);
      if ((v102 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
    outlined destroy of PgQuery_Alias(v101, type metadata accessor for PgQuery_TypeName);
    outlined destroy of PgQuery_Alias(v100, type metadata accessor for PgQuery_TypeName);
    outlined destroy of AnyValue?((uint64_t)v115, &demangling cache variable for type metadata for PgQuery_TypeName?);
    uint64_t v57 = v124;
    uint64_t v56 = &demangling cache variable for type metadata for PgQuery_TypeName?;
LABEL_8:
    outlined destroy of AnyValue?(v57, v56);
    goto LABEL_9;
  }
  if (v90(v88, 1, v89) != 1)
  {
LABEL_39:
    outlined destroy of AnyValue?((uint64_t)v115, &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
    uint64_t v56 = &demangling cache variable for type metadata for PgQuery_TypeName?;
    uint64_t v57 = v124;
    goto LABEL_8;
  }
  outlined destroy of AnyValue?((uint64_t)v115, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of AnyValue?(v124, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_31:
  uint64_t v91 = *(void *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
  uint64_t v92 = *(void *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v93 = specialized static Array<A>.== infix(_:_:)(v91, v92);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v93)
  {
    uint64_t v94 = *(void *)(v53
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
    uint64_t v95 = *(void *)(v47
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v96 = specialized static Array<A>.== infix(_:_:)(v94, v95);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v96)
    {
      uint64_t v97 = *(void *)(v53
                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit);
      uint64_t v98 = *(void *)(v47
                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit);
      if (*(unsigned char *)(v47
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit
                    + 8) == 1)
      {
        switch(v98)
        {
          case 1:
            if (v97 == 1) {
              goto LABEL_52;
            }
            goto LABEL_9;
          case 2:
            if (v97 == 2) {
              goto LABEL_52;
            }
            goto LABEL_9;
          case 3:
            if (v97 == 3) {
              goto LABEL_52;
            }
            goto LABEL_9;
          case 4:
            if (v97 == 4) {
              goto LABEL_52;
            }
            goto LABEL_9;
          default:
            if (!v97) {
              goto LABEL_52;
            }
            goto LABEL_9;
        }
      }
      if (v97 == v98)
      {
LABEL_52:
        if ((*(void *)(v53
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename) == *(void *)(v47 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename)
           && *(void *)(v53
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename
                        + 8) == *(void *)(v47
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename
                                          + 8)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && (*(void *)(v53
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) == *(void *)(v47 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod)
           && *(void *)(v53
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                        + 8) == *(void *)(v47
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                          + 8)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          int v103 = *(unsigned __int8 *)(v53
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
          int v104 = *(unsigned __int8 *)(v47
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists);
          swift_release();
          swift_release();
          uint64_t v48 = v114;
          uint64_t v43 = v113;
          uint64_t v4 = v54;
          if (v103 != v104)
          {
            char v58 = 0;
            return v58 & 1;
          }
LABEL_60:
          uint64_t v105 = v140;
          uint64_t v106 = *(void (**)(char *, uint64_t, uint64_t))(v140 + 16);
          uint64_t v107 = v138;
          uint64_t v108 = v48;
          v106(v138, v43, v4);
          uint64_t v109 = v139;
          v106(v139, v108, v4);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v110 = *(void (**)(char *, uint64_t))(v105 + 8);
          v110(v109, v4);
          v110(v107, v4);
          return v58 & 1;
        }
      }
    }
  }
LABEL_9:
  swift_release();
  swift_release();
  char v58 = 0;
  return v58 & 1;
}

uint64_t specialized static PgQuery_WindowDef.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v78 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void *)(Node - 8);
  uint64_t v91 = Node;
  uint64_t v92 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](Node);
  uint64_t v85 = (uint64_t)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v87 = (uint64_t)&v78 - v15;
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v16 = MEMORY[0x1F4188790](v90);
  uint64_t v88 = (uint64_t)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v93 = (uint64_t)&v78 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v86 = (uint64_t)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v89 = (uint64_t)&v78 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v78 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v78 - v27;
  uint64_t WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  uint64_t v30 = a1;
  uint64_t v31 = *(int *)(WindowDef + 20);
  uint64_t v32 = *(void *)(a1 + v31);
  uint64_t v33 = *(void *)(a2 + v31);
  if (v32 == v33)
  {
LABEL_33:
    uint64_t v73 = v8;
    uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v74(v10, v30, v4);
    v74(v73, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v75 = *(void (**)(char *, uint64_t))(v5 + 8);
    v75(v73, v4);
    v75(v10, v4);
    return v35 & 1;
  }
  uint64_t v83 = a2;
  uint64_t v84 = a1;
  char v82 = v10;
  BOOL v34 = *(void *)(v32 + 16) == *(void *)(v33 + 16) && *(void *)(v32 + 24) == *(void *)(v33 + 24);
  if (v34 || (char v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(void *)(v32 + 32) == *(void *)(v33 + 32) && *(void *)(v32 + 40) == *(void *)(v33 + 40)
      || (char v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v80 = v8;
      uint64_t v81 = v5;
      uint64_t v36 = *(void *)(v32 + 48);
      uint64_t v37 = *(void *)(v33 + 48);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v38 = specialized static Array<A>.== infix(_:_:)(v36, v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v38 & 1) == 0) {
        goto LABEL_41;
      }
      uint64_t v39 = *(void *)(v32 + 56);
      uint64_t v40 = *(void *)(v33 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v41 = specialized static Array<A>.== infix(_:_:)(v39, v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v41 & 1) == 0 || *(_DWORD *)(v32 + 64) != *(_DWORD *)(v33 + 64)) {
        goto LABEL_41;
      }
      uint64_t v42 = v32
          + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset;
      outlined init with copy of PgQuery_Alias?(v33+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v43 = v93;
      uint64_t v44 = v93 + *(int *)(v90 + 48);
      outlined init with copy of PgQuery_Alias?(v42, v93, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v45 = v44;
      outlined init with copy of PgQuery_Alias?((uint64_t)v28, v44, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v46 = v91;
      uint64_t v48 = v92 + 48;
      uint64_t v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48);
      if (v47(v43, 1, v91) == 1)
      {
        if (v47(v45, 1, v46) == 1)
        {
          uint64_t v49 = v47;
          uint64_t v92 = v48;
          outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_22:
          uint64_t v58 = v32
              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset;
          uint64_t v59 = v89;
          outlined init with copy of PgQuery_Alias?(v33+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset, v89, &demangling cache variable for type metadata for PgQuery_Node?);
          uint64_t v60 = v88;
          uint64_t v61 = v88 + *(int *)(v90 + 48);
          outlined init with copy of PgQuery_Alias?(v58, v88, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined init with copy of PgQuery_Alias?(v59, v61, &demangling cache variable for type metadata for PgQuery_Node?);
          uint64_t v62 = v91;
          if (v49(v60, 1, v91) == 1)
          {
            if (v49(v61, 1, v62) == 1)
            {
              outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
              outlined destroy of AnyValue?(v89, &demangling cache variable for type metadata for PgQuery_Node?);
              goto LABEL_31;
            }
            uint64_t v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
            goto LABEL_39;
          }
          uint64_t v63 = v86;
          outlined init with copy of PgQuery_Alias?(v60, v86, &demangling cache variable for type metadata for PgQuery_Node?);
          if (v49(v61, 1, v62) == 1)
          {
            uint64_t v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_38:
            outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
LABEL_39:
            outlined destroy of AnyValue?(v60, v64);
            uint64_t v76 = v89;
            goto LABEL_40;
          }
          uint64_t v65 = v85;
          outlined init with take of PgQuery_OidList(v61, v85, type metadata accessor for PgQuery_Node);
          uint64_t v66 = *(int *)(v62 + 20);
          uint64_t v67 = *(void *)(v63 + v66);
          uint64_t v68 = *(void *)(v65 + v66);
          if (v67 != v68)
          {
            swift_retain();
            swift_retain();
            BOOL v69 = closure #1 in static PgQuery_Node.== infix(_:_:)(v67, v68);
            swift_release();
            swift_release();
            if (!v69)
            {
              outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
              uint64_t v64 = &demangling cache variable for type metadata for PgQuery_Node?;
              goto LABEL_38;
            }
          }
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
          outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of AnyValue?(v89, &demangling cache variable for type metadata for PgQuery_Node?);
          if (v70)
          {
LABEL_31:
            int v71 = *(_DWORD *)(v32
                            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
            int v72 = *(_DWORD *)(v33
                            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
            swift_release();
            swift_release();
            BOOL v34 = v71 == v72;
            uint64_t v8 = v80;
            uint64_t v5 = v81;
            uint64_t v10 = v82;
            a2 = v83;
            uint64_t v30 = v84;
            if (!v34) {
              goto LABEL_42;
            }
            goto LABEL_33;
          }
LABEL_41:
          swift_release();
          swift_release();
LABEL_42:
          char v35 = 0;
          return v35 & 1;
        }
        uint64_t v50 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        uint64_t v51 = v93;
      }
      else
      {
        outlined init with copy of PgQuery_Alias?(v43, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v47(v45, 1, v46) == 1)
        {
          uint64_t v50 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        }
        else
        {
          uint64_t v79 = v47;
          uint64_t v92 = v48;
          uint64_t v52 = v87;
          outlined init with take of PgQuery_OidList(v45, v87, type metadata accessor for PgQuery_Node);
          uint64_t v53 = *(int *)(v46 + 20);
          uint64_t v54 = *(void *)&v26[v53];
          uint64_t v55 = *(void *)(v52 + v53);
          if (v54 == v55
            || (swift_retain(),
                swift_retain(),
                BOOL v56 = closure #1 in static PgQuery_Node.== infix(_:_:)(v54, v55),
                swift_release(),
                swift_release(),
                v56))
          {
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
            char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
            outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of AnyValue?((uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
            uint64_t v49 = v79;
            if ((v57 & 1) == 0) {
              goto LABEL_41;
            }
            goto LABEL_22;
          }
          outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
          uint64_t v50 = &demangling cache variable for type metadata for PgQuery_Node?;
        }
        uint64_t v51 = v93;
        outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
      }
      outlined destroy of AnyValue?(v51, v50);
      uint64_t v76 = (uint64_t)v28;
LABEL_40:
      outlined destroy of AnyValue?(v76, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_41;
    }
  }
  return v35 & 1;
}

uint64_t specialized static PgQuery_TableFunc.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v95 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v106 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(Node - 8);
  uint64_t v11 = MEMORY[0x1F4188790](Node);
  uint64_t v100 = (uint64_t)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v104 = (uint64_t)&v95 - v13;
  uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v14 = MEMORY[0x1F4188790](v107);
  uint64_t v103 = (uint64_t)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v105 = (uint64_t)&v95 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v101 = (uint64_t)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v102 = (uint64_t)&v95 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v95 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v95 - v25;
  uint64_t TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  uint64_t v28 = a1;
  uint64_t v29 = *(int *)(TableFunc + 20);
  uint64_t v30 = *(void *)(a1 + v29);
  uint64_t v31 = *(void *)(a2 + v29);
  if (v30 == v31) {
    goto LABEL_36;
  }
  uint64_t v97 = a1;
  uint64_t v98 = v5;
  uint64_t v99 = v4;
  uint64_t v32 = *(void *)(v30 + 16);
  uint64_t v33 = *(void *)(v31 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v34 = specialized static Array<A>.== infix(_:_:)(v32, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v35 = *(void *)(v30 + 24);
  uint64_t v36 = *(void *)(v31 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v37 = specialized static Array<A>.== infix(_:_:)(v35, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v95 = v31;
  uint64_t v96 = v30;
  uint64_t v38 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr;
  uint64_t v39 = v31
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr;
  uint64_t v40 = (uint64_t)v26;
  outlined init with copy of PgQuery_Alias?(v39, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v41 = v105;
  uint64_t v42 = v105 + *(int *)(v107 + 48);
  outlined init with copy of PgQuery_Alias?(v38, v105, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v40, v42, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v43 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v106 + 6);
  uint64_t v44 = Node;
  if (v43(v41, 1, Node) == 1)
  {
    if (v43(v42, 1, v44) == 1)
    {
      uint64_t v106 = v43;
      outlined destroy of AnyValue?(v41, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v40, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v46 = v95;
      uint64_t v45 = v96;
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  outlined init with copy of PgQuery_Alias?(v41, (uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v43(v42, 1, v44) == 1)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v24, type metadata accessor for PgQuery_Node);
LABEL_9:
    uint64_t v47 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_10:
    outlined destroy of AnyValue?(v41, v47);
    uint64_t v48 = v40;
LABEL_21:
    outlined destroy of AnyValue?(v48, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_22;
  }
  uint64_t v106 = v43;
  uint64_t v49 = v104;
  outlined init with take of PgQuery_OidList(v42, v104, type metadata accessor for PgQuery_Node);
  uint64_t v50 = *(int *)(v44 + 20);
  uint64_t v51 = *(void *)&v24[v50];
  uint64_t v52 = *(void *)(v49 + v50);
  if (v51 != v52)
  {
    swift_retain();
    swift_retain();
    BOOL v53 = closure #1 in static PgQuery_Node.== infix(_:_:)(v51, v52);
    swift_release();
    swift_release();
    if (!v53)
    {
      outlined destroy of PgQuery_Alias(v104, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v24, type metadata accessor for PgQuery_Node);
      uint64_t v47 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_10;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v54 = v104;
  char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v24, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v41, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v40, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v46 = v95;
  uint64_t v45 = v96;
  if ((v55 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_14:
  uint64_t v56 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr;
  uint64_t v48 = v102;
  outlined init with copy of PgQuery_Alias?(v46+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, v102, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v57 = v103;
  uint64_t v58 = v103 + *(int *)(v107 + 48);
  outlined init with copy of PgQuery_Alias?(v56, v103, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v48, v58, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v59 = Node;
  uint64_t v60 = v106;
  if (v106(v57, 1, Node) != 1)
  {
    uint64_t v63 = v101;
    outlined init with copy of PgQuery_Alias?(v57, v101, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v60(v58, 1, v59) == 1)
    {
      outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
      goto LABEL_19;
    }
    uint64_t v66 = v100;
    outlined init with take of PgQuery_OidList(v58, v100, type metadata accessor for PgQuery_Node);
    uint64_t v67 = *(int *)(v59 + 20);
    uint64_t v68 = *(void *)(v63 + v67);
    uint64_t v69 = *(void *)(v66 + v67);
    if (v68 != v69)
    {
      swift_retain();
      swift_retain();
      BOOL v70 = closure #1 in static PgQuery_Node.== infix(_:_:)(v68, v69);
      swift_release();
      swift_release();
      if (!v70)
      {
        outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
        uint64_t v64 = &demangling cache variable for type metadata for PgQuery_Node?;
        goto LABEL_20;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
    outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of AnyValue?(v48, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v62 = v95;
    uint64_t v61 = v96;
    if (v71) {
      goto LABEL_27;
    }
LABEL_22:
    swift_release();
    swift_release();
    goto LABEL_23;
  }
  if (v60(v58, 1, v59) != 1)
  {
LABEL_19:
    uint64_t v64 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_20:
    outlined destroy of AnyValue?(v57, v64);
    goto LABEL_21;
  }
  outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v48, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v62 = v95;
  uint64_t v61 = v96;
LABEL_27:
  uint64_t v72 = *(void *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames);
  uint64_t v73 = *(void *)(v62
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v74 = specialized static Array<A>.== infix(_:_:)(v72, v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v74 & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v75 = *(void *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes);
  uint64_t v76 = *(void *)(v62
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v77 = specialized static Array<A>.== infix(_:_:)(v75, v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v77 & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v78 = *(void *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods);
  uint64_t v79 = *(void *)(v62
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v80 = specialized static Array<A>.== infix(_:_:)(v78, v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v80 & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v81 = *(void *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations);
  uint64_t v82 = *(void *)(v62
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v83 = specialized static Array<A>.== infix(_:_:)(v81, v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v83 & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v84 = *(void *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexprs);
  uint64_t v85 = *(void *)(v62
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexprs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v86 = specialized static Array<A>.== infix(_:_:)(v84, v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v86 & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v87 = *(void *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexprs);
  uint64_t v88 = *(void *)(v62
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexprs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v89 = specialized static Array<A>.== infix(_:_:)(v87, v88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v89 & 1) == 0
    || !specialized static Array<A>.== infix(_:_:)(*(void **)(v61+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__notnulls), *(void **)(v62+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__notnulls))|| *(_DWORD *)(v61+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordinalitycol) != *(_DWORD *)(v62 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordinalitycol))
  {
    goto LABEL_22;
  }
  int v90 = *(_DWORD *)(v61
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v91 = *(_DWORD *)(v62
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  uint64_t v5 = v98;
  uint64_t v4 = v99;
  uint64_t v28 = v97;
  if (v90 == v91)
  {
LABEL_36:
    uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v92(v10, v28, v4);
    v92(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v93 = *(void (**)(char *, uint64_t))(v5 + 8);
    v93(v8, v4);
    v93(v10, v4);
    return v65 & 1;
  }
LABEL_23:
  char v65 = 0;
  return v65 & 1;
}

uint64_t specialized static PgQuery_ScanToken.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v21 - v9;
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(a2 + 8);
  char v12 = *(unsigned char *)(a2 + 16);
  uint64_t v13 = PgQuery_Token.rawValue.getter(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  if (v13 != PgQuery_Token.rawValue.getter(v11, v12)) {
    goto LABEL_7;
  }
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a2 + 24);
  if (*(unsigned char *)(a2 + 32) == 1)
  {
    switch(v15)
    {
      case 1:
        if (v14 == 1) {
          goto LABEL_10;
        }
        goto LABEL_7;
      case 2:
        if (v14 == 2) {
          goto LABEL_10;
        }
        goto LABEL_7;
      case 3:
        if (v14 == 3) {
          goto LABEL_10;
        }
        goto LABEL_7;
      case 4:
        if (v14 == 4) {
          goto LABEL_10;
        }
        goto LABEL_7;
      default:
        if (v14) {
          goto LABEL_7;
        }
        goto LABEL_10;
    }
  }
  if (v14 == v15)
  {
LABEL_10:
    uint64_t ScanToken = type metadata accessor for PgQuery_ScanToken(0);
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v19(v10, a1 + *(int *)(ScanToken + 32), v4);
    v19(v8, a2 + *(int *)(ScanToken + 32), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v8, v4);
    v20(v10, v4);
  }
  else
  {
LABEL_7:
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static PgQuery_ResTarget.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v57 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v63 = *(void *)(Node - 8);
  uint64_t v64 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v14);
  uint64_t v65 = (uint64_t)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v62 = (uint64_t)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v66 = (uint64_t)&v57 - v19;
  uint64_t ResTarget = type metadata accessor for PgQuery_ResTarget(0);
  uint64_t v21 = a1;
  uint64_t v22 = *(int *)(ResTarget + 20);
  uint64_t v23 = *(void **)(a1 + v22);
  uint64_t v24 = *(void **)(a2 + v22);
  if (v23 == v24)
  {
LABEL_19:
    BOOL v53 = v8;
    uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v54(v10, v21, v4);
    v54(v53, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v55 = *(void (**)(char *, uint64_t))(v5 + 8);
    v55(v53, v4);
    v55(v10, v4);
    return v26 & 1;
  }
  uint64_t v60 = a2;
  uint64_t v61 = a1;
  BOOL v25 = v23[2] == v24[2] && v23[3] == v24[3];
  if (v25 || (char v26 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v58 = v8;
    uint64_t v59 = v5;
    uint64_t v27 = v23[4];
    uint64_t v28 = v24[4];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v29 = specialized static Array<A>.== infix(_:_:)(v27, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v29)
    {
      uint64_t v57 = v13;
      uint64_t v30 = (uint64_t)v23
          + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val;
      uint64_t v31 = v66;
      outlined init with copy of PgQuery_Alias?((uint64_t)v24+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val, v66, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v32 = v65;
      uint64_t v33 = v65 + *(int *)(v14 + 48);
      outlined init with copy of PgQuery_Alias?(v30, v65, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v34 = v32;
      outlined init with copy of PgQuery_Alias?(v31, v33, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
      uint64_t v36 = v32;
      uint64_t v37 = v64;
      if (v35(v36, 1, v64) == 1)
      {
        int v38 = v35(v33, 1, v37);
        uint64_t v5 = v59;
        if (v38 == 1)
        {
          outlined destroy of AnyValue?(v34, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of AnyValue?(v66, &demangling cache variable for type metadata for PgQuery_Node?);
          goto LABEL_17;
        }
        uint64_t v42 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        goto LABEL_22;
      }
      uint64_t v39 = v62;
      outlined init with copy of PgQuery_Alias?(v34, v62, &demangling cache variable for type metadata for PgQuery_Node?);
      int v40 = v35(v33, 1, v37);
      uint64_t v41 = v37;
      uint64_t v5 = v59;
      if (v40 == 1)
      {
        uint64_t v42 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_21:
        outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
LABEL_22:
        outlined destroy of AnyValue?(v34, v42);
        outlined destroy of AnyValue?(v66, &demangling cache variable for type metadata for PgQuery_Node?);
        goto LABEL_23;
      }
      uint64_t v43 = (uint64_t)v57;
      outlined init with take of PgQuery_OidList(v33, (uint64_t)v57, type metadata accessor for PgQuery_Node);
      uint64_t v44 = *(int *)(v41 + 20);
      uint64_t v45 = *(void *)(v39 + v44);
      uint64_t v46 = *(void *)(v43 + v44);
      if (v45 != v46)
      {
        swift_retain();
        swift_retain();
        BOOL v47 = closure #1 in static PgQuery_Node.== infix(_:_:)(v45, v46);
        swift_release();
        swift_release();
        if (!v47)
        {
          outlined destroy of PgQuery_Alias((uint64_t)v57, type metadata accessor for PgQuery_Node);
          uint64_t v42 = &demangling cache variable for type metadata for PgQuery_Node?;
          uint64_t v34 = v65;
          uint64_t v39 = v62;
          goto LABEL_21;
        }
      }
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      uint64_t v48 = v62;
      uint64_t v49 = (uint64_t)v57;
      char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?(v65, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v66, &demangling cache variable for type metadata for PgQuery_Node?);
      if (v50)
      {
LABEL_17:
        int v51 = *(_DWORD *)((char *)v23
                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        int v52 = *(_DWORD *)((char *)v24
                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        swift_release();
        swift_release();
        BOOL v25 = v51 == v52;
        uint64_t v8 = v58;
        a2 = v60;
        uint64_t v21 = v61;
        if (!v25) {
          goto LABEL_24;
        }
        goto LABEL_19;
      }
    }
LABEL_23:
    swift_release();
    swift_release();
LABEL_24:
    char v26 = 0;
  }
  return v26 & 1;
}

uint64_t specialized static PgQuery_IndexStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v91 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v78 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v86 = *(void *)(Node - 8);
  uint64_t v87 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v83 = (uint64_t)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v85);
  uint64_t v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v84 = (uint64_t)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v88 = (uint64_t)&v78 - v17;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v92 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v89 = (uint64_t)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v90 = (uint64_t)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v93 = (uint64_t)&v78 - v26;
  Indexuint64_t Stmt = type metadata accessor for PgQuery_IndexStmt(0);
  uint64_t v28 = a1;
  uint64_t v29 = *(int *)(IndexStmt + 20);
  uint64_t v30 = *(void *)(a1 + v29);
  uint64_t v31 = *(void *)(a2 + v29);
  if (v30 == v31) {
    goto LABEL_53;
  }
  uint64_t v81 = v28;
  uint64_t v82 = a2;
  uint64_t v79 = v7;
  char v80 = v9;
  if ((*(void *)(v30 + 16) != *(void *)(v31 + 16) || *(void *)(v30 + 24) != *(void *)(v31 + 24))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_retain();
    swift_retain();
    goto LABEL_41;
  }
  uint64_t v32 = (uint64_t)v13;
  uint64_t v78 = v4;
  uint64_t v33 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t v34 = v30;
  uint64_t v35 = v93;
  outlined init with copy of PgQuery_Alias?(v31+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v93, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v36 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of PgQuery_Alias?(v33, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?(v35, v36, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48);
  if (v37((uint64_t)v22, 1, RangeVar) != 1)
  {
    uint64_t v39 = v31;
    uint64_t v41 = v90;
    outlined init with copy of PgQuery_Alias?((uint64_t)v22, v90, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if (v37(v36, 1, RangeVar) != 1)
    {
      uint64_t v42 = v89;
      outlined init with take of PgQuery_OidList(v36, v89, type metadata accessor for PgQuery_RangeVar);
      swift_retain();
      swift_retain();
      char v43 = specialized static PgQuery_RangeVar.== infix(_:_:)(v41, v42);
      outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_RangeVar);
      outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      uint64_t v40 = v34;
      outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((v43 & 1) == 0) {
        goto LABEL_41;
      }
      goto LABEL_13;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_RangeVar);
LABEL_10:
    outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_41;
  }
  unsigned int v38 = v37(v36, 1, RangeVar);
  swift_retain();
  uint64_t v39 = v31;
  swift_retain();
  uint64_t v40 = v34;
  if (v38 != 1) {
    goto LABEL_10;
  }
  outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_13:
  if ((*(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) != *(void *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod)
     || *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8) != *(void *)(v39
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_41;
  }
  if ((*(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace) != *(void *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace)
     || *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace
                  + 8) != *(void *)(v39
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_41;
  }
  uint64_t v44 = *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexParams);
  uint64_t v45 = v40;
  uint64_t v46 = *(void *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexParams);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v47 = specialized static Array<A>.== infix(_:_:)(v44, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
  uint64_t v48 = *(void *)(v45
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexIncludingParams);
  uint64_t v49 = *(void *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexIncludingParams);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v50 = specialized static Array<A>.== infix(_:_:)(v48, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
  uint64_t v51 = *(void *)(v45
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  uint64_t v52 = *(void *)(v39
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v53 = specialized static Array<A>.== infix(_:_:)(v51, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v53 & 1) == 0) {
    goto LABEL_41;
  }
  uint64_t v54 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t v55 = v88;
  outlined init with copy of PgQuery_Alias?(v39+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v88, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v56 = v32 + *(int *)(v85 + 48);
  outlined init with copy of PgQuery_Alias?(v54, v32, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v55, v56, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v57 = v87;
  uint64_t v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
  if (v58(v32, 1, v87) == 1)
  {
    if (v58(v56, 1, v57) == 1)
    {
      outlined destroy of AnyValue?(v32, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v59 = v45;
LABEL_32:
      uint64_t v68 = *(void *)(v59
                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__excludeOpNames);
      uint64_t v69 = *(void *)(v39
                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__excludeOpNames);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v70 = specialized static Array<A>.== infix(_:_:)(v68, v69);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v70 & 1) == 0
        || (*(void *)(v45
                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment) != *(void *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment)
         || *(void *)(v45
                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment
                      + 8) != *(void *)(v39
                                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment
                                        + 8))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || *(_DWORD *)(v45
                     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexOid) != *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexOid)
        || *(_DWORD *)(v45
                     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldNode) != *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldNode)
        || *(_DWORD *)(v45
                     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldCreateSubid) != *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldCreateSubid)
        || *(_DWORD *)(v45
                     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldFirstRelfilenodeSubid) != *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldFirstRelfilenodeSubid)
        || *(unsigned __int8 *)(v45
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unique) != *(unsigned __int8 *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unique)
        || *(unsigned __int8 *)(v45
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__primary) != *(unsigned __int8 *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__primary)
        || *(unsigned __int8 *)(v45
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) != *(unsigned __int8 *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint)
        || *(unsigned __int8 *)(v45
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) != *(unsigned __int8 *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable)
        || *(unsigned __int8 *)(v45
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) != *(unsigned __int8 *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred)
        || *(unsigned __int8 *)(v45
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transformed) != *(unsigned __int8 *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transformed)
        || *(unsigned __int8 *)(v45
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__concurrent) != *(unsigned __int8 *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__concurrent)
        || *(unsigned __int8 *)(v45
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) != *(unsigned __int8 *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists))
      {
        goto LABEL_41;
      }
      int v72 = *(unsigned __int8 *)(v45
                               + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc);
      int v73 = *(unsigned __int8 *)(v39
                               + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc);
      swift_release();
      swift_release();
      uint64_t v4 = v78;
      uint64_t v7 = v79;
      uint64_t v9 = v80;
      uint64_t v28 = v81;
      a2 = v82;
      if (v72 != v73)
      {
        char v71 = 0;
        return v71 & 1;
      }
LABEL_53:
      uint64_t v74 = v91;
      uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 16);
      v75(v9, v28, v4);
      v75(v7, a2, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v76 = *(void (**)(char *, uint64_t))(v74 + 8);
      v76(v7, v4);
      v76(v9, v4);
      return v71 & 1;
    }
    goto LABEL_27;
  }
  uint64_t v60 = v84;
  outlined init with copy of PgQuery_Alias?(v32, v84, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v58(v56, 1, v57) == 1)
  {
    outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
LABEL_27:
    outlined destroy of AnyValue?(v32, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    uint64_t v61 = v55;
LABEL_28:
    outlined destroy of AnyValue?(v61, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_41;
  }
  uint64_t v62 = v83;
  outlined init with take of PgQuery_OidList(v56, v83, type metadata accessor for PgQuery_Node);
  uint64_t v63 = *(int *)(v57 + 20);
  uint64_t v64 = *(void *)(v60 + v63);
  uint64_t v65 = *(void *)(v62 + v63);
  if (v64 != v65)
  {
    swift_retain();
    swift_retain();
    BOOL v66 = closure #1 in static PgQuery_Node.== infix(_:_:)(v64, v65);
    swift_release();
    swift_release();
    if (!v66)
    {
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?(v32, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v61 = v55;
      goto LABEL_28;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v32, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v55, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v59 = v45;
  if (v67) {
    goto LABEL_32;
  }
LABEL_41:
  swift_release();
  swift_release();
  char v71 = 0;
  return v71 & 1;
}

uint64_t specialized static PgQuery_IndexElem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v63 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v70 = (uint64_t)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v14);
  uint64_t v72 = (uint64_t)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v71 = (uint64_t)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v63 - v19;
  uint64_t IndexElem = type metadata accessor for PgQuery_IndexElem(0);
  uint64_t v22 = a1;
  uint64_t v23 = *(int *)(IndexElem + 20);
  uint64_t v24 = *(void *)(a1 + v23);
  uint64_t v25 = *(void *)(a2 + v23);
  if (v24 == v25) {
    goto LABEL_51;
  }
  uint64_t v67 = a2;
  uint64_t v68 = v22;
  uint64_t v65 = v8;
  BOOL v66 = v10;
  uint64_t v69 = v4;
  BOOL v26 = *(void *)(v24 + 16) == *(void *)(v25 + 16) && *(void *)(v24 + 24) == *(void *)(v25 + 24);
  uint64_t v27 = v25;
  if (v26 || (v28 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t v25 = v27, v29 = 0, (v28 & 1) != 0))
  {
    uint64_t v64 = v5;
    uint64_t v30 = v24
        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
    uint64_t v31 = v24;
    uint64_t v32 = (uint64_t)v20;
    outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v33 = v72;
    uint64_t v34 = v72 + *(int *)(v14 + 48);
    outlined init with copy of PgQuery_Alias?(v30, v72, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?(v32, v34, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (v35(v33, 1, Node) == 1)
    {
      int v36 = v35(v34, 1, Node);
      swift_retain();
      swift_retain();
      if (v36 == 1)
      {
        outlined destroy of AnyValue?(v33, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v32, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v37 = v27;
        goto LABEL_16;
      }
      uint64_t v39 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v38 = v71;
      outlined init with copy of PgQuery_Alias?(v33, v71, &demangling cache variable for type metadata for PgQuery_Node?);
      if (v35(v34, 1, Node) == 1)
      {
        swift_retain();
        swift_retain();
        uint64_t v39 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        uint64_t v40 = v70;
        outlined init with take of PgQuery_OidList(v34, v70, type metadata accessor for PgQuery_Node);
        uint64_t v41 = *(int *)(Node + 20);
        uint64_t v42 = *(void *)(v38 + v41);
        uint64_t v43 = *(void *)(v40 + v41);
        swift_retain();
        swift_retain();
        if (v42 == v43
          || (swift_retain(),
              swift_retain(),
              BOOL v44 = closure #1 in static PgQuery_Node.== infix(_:_:)(v42, v43),
              swift_release(),
              swift_release(),
              v44))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_Node);
          outlined destroy of AnyValue?(v33, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of AnyValue?(v32, &demangling cache variable for type metadata for PgQuery_Node?);
          uint64_t v37 = v27;
          if (v45)
          {
LABEL_16:
            if (*(void *)(v31
                           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname) == *(void *)(v37 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname)
              && *(void *)(v31
                           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname
                           + 8) == *(void *)(v37
                                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname
                                             + 8)
              || (uint64_t v37 = v27, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
            {
              uint64_t v46 = *(void *)(v31
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
              uint64_t v47 = *(void *)(v37
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              char v48 = specialized static Array<A>.== infix(_:_:)(v46, v47);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v48)
              {
                uint64_t v49 = *(void *)(v31
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass);
                uint64_t v50 = *(void *)(v37
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                char v51 = specialized static Array<A>.== infix(_:_:)(v49, v50);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v51)
                {
                  uint64_t v52 = *(void *)(v31
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclassopts);
                  uint64_t v53 = *(void *)(v37
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclassopts);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  char v54 = specialized static Array<A>.== infix(_:_:)(v52, v53);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v54)
                  {
                    uint64_t v55 = *(void *)(v31
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering);
                    uint64_t v56 = *(void *)(v37
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering);
                    if (*(unsigned char *)(v37
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering
                                  + 8) == 1)
                    {
                      uint64_t v4 = v69;
                      uint64_t v5 = v64;
                      switch(v56)
                      {
                        case 1:
                          if (v55 == 1) {
                            goto LABEL_31;
                          }
                          goto LABEL_29;
                        case 2:
                          if (v55 == 2) {
                            goto LABEL_31;
                          }
                          goto LABEL_29;
                        case 3:
                          if (v55 == 3) {
                            goto LABEL_31;
                          }
                          goto LABEL_29;
                        case 4:
                          if (v55 == 4) {
                            goto LABEL_31;
                          }
                          goto LABEL_29;
                        default:
                          if (!v55) {
                            goto LABEL_31;
                          }
                          goto LABEL_29;
                      }
                    }
                    uint64_t v4 = v69;
                    uint64_t v5 = v64;
                    if (v55 == v56)
                    {
LABEL_31:
                      uint64_t v57 = *(void *)(v31
                                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering);
                      uint64_t v58 = *(void *)(v37
                                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering);
                      if (*(unsigned char *)(v37
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering
                                    + 8) == 1)
                      {
                        switch(v58)
                        {
                          case 1:
                            if (v57 == 1) {
                              goto LABEL_50;
                            }
                            goto LABEL_29;
                          case 2:
                            if (v57 == 2) {
                              goto LABEL_50;
                            }
                            goto LABEL_29;
                          case 3:
                            if (v57 == 3) {
                              goto LABEL_50;
                            }
                            goto LABEL_29;
                          default:
                            if (!v57) {
                              goto LABEL_50;
                            }
                            goto LABEL_29;
                        }
                      }
                      if (v57 == v58)
                      {
LABEL_50:
                        swift_release();
                        swift_release();
                        uint64_t v8 = v65;
                        uint64_t v10 = v66;
                        a2 = v67;
                        uint64_t v22 = v68;
LABEL_51:
                        uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
                        v59(v10, v22, v4);
                        v59(v8, a2, v4);
                        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                        uint64_t v60 = v4;
                        char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
                        uint64_t v61 = *(void (**)(char *, uint64_t))(v5 + 8);
                        v61(v8, v60);
                        v61(v10, v60);
                        return v29 & 1;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_29:
          swift_release();
          swift_release();
          char v29 = 0;
          return v29 & 1;
        }
        outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
        uint64_t v39 = &demangling cache variable for type metadata for PgQuery_Node?;
      }
      outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of AnyValue?(v33, v39);
    outlined destroy of AnyValue?(v32, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_29;
  }
  return v29 & 1;
}

uint64_t specialized static PgQuery_GrantStmt.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v23 - v9;
  if (*a1 == *a2)
  {
    uint64_t v13 = *((void *)a1 + 1);
    uint64_t v14 = *((void *)a2 + 1);
    if (a2[16] == 1)
    {
      switch(v14)
      {
        case 1:
          if (v13 == 1) {
            goto LABEL_9;
          }
          goto LABEL_2;
        case 2:
          if (v13 == 2) {
            goto LABEL_9;
          }
          goto LABEL_2;
        case 3:
          if (v13 == 3) {
            goto LABEL_9;
          }
          goto LABEL_2;
        default:
          if (!v13) {
            goto LABEL_9;
          }
          goto LABEL_2;
      }
    }
    if (v13 == v14)
    {
LABEL_9:
      uint64_t v15 = *((void *)a2 + 3);
      uint64_t v16 = a2[32];
      uint64_t v17 = destructiveProjectEnumData for StorableValue(*((void *)a1 + 3), a1[32]);
      if (v17 == destructiveProjectEnumData for StorableValue(v15, v16)
        && (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 5), *((void *)a2 + 5)) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 6), *((void *)a2 + 6)) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 7), *((void *)a2 + 7)) & 1) != 0
        && a1[64] == a2[64])
      {
        uint64_t v18 = *((void *)a1 + 9);
        uint64_t v19 = *((void *)a2 + 9);
        if (a2[80] == 1)
        {
          if (v19)
          {
            if (v19 == 1)
            {
              if (v18 == 1) {
                goto LABEL_30;
              }
            }
            else if (v18 == 2)
            {
LABEL_30:
              uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
              uint64_t v21 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
              v21(v10, &a1[*(int *)(GrantStmt + 48)], v4);
              v21(v8, &a2[*(int *)(GrantStmt + 48)], v4);
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
              char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
              v22(v8, v4);
              v22(v10, v4);
              return v11 & 1;
            }
          }
          else if (!v18)
          {
            goto LABEL_30;
          }
        }
        else if (v18 == v19)
        {
          goto LABEL_30;
        }
      }
    }
  }
LABEL_2:
  char v11 = 0;
  return v11 & 1;
}

uint64_t specialized static PgQuery_FetchStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 != 1) {
          goto LABEL_19;
        }
        goto LABEL_6;
      case 2:
        if (v11 == 2) {
          goto LABEL_6;
        }
        goto LABEL_19;
      case 3:
        if (v11 == 3) {
          goto LABEL_6;
        }
        goto LABEL_19;
      case 4:
        if (v11 == 4) {
          goto LABEL_6;
        }
        goto LABEL_19;
      default:
        if (!v11) {
          goto LABEL_6;
        }
        goto LABEL_19;
    }
  }
  if (v11 != v12) {
    goto LABEL_19;
  }
LABEL_6:
  if (a1[2] != a2[2])
  {
LABEL_19:
    char v13 = 0;
    return v13 & 1;
  }
  if (a1[3] == a2[3] && a1[4] == a2[4] || (char v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((unsigned __int8 *)a1 + 40) == *((unsigned __int8 *)a2 + 40))
    {
      uint64_t Stmt = type metadata accessor for PgQuery_FetchStmt(0);
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v15(v10, (char *)a1 + *(int *)(Stmt + 32), v4);
      v15(v8, (char *)a2 + *(int *)(Stmt + 32), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
      return v13 & 1;
    }
    goto LABEL_19;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_A_ArrayExpr.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v18 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) != 0
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
  {
    uint64_t v13 = a3(0);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v14(v12, a1 + *(int *)(v13 + 24), v6);
    v14(v10, a2 + *(int *)(v13 + 24), v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v10, v6);
    v16(v12, v6);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static PgQuery_CollateClause.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v53 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v52 = (char *)&v46 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v49 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v46 - v19;
  uint64_t v21 = *(int *)(type metadata accessor for PgQuery_CollateClause(0) + 20);
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v22 = *(void *)(a1 + v21);
  uint64_t v23 = *(void *)(a2 + v21);
  if (v22 == v23) {
    goto LABEL_13;
  }
  uint64_t v47 = v5;
  uint64_t v48 = v4;
  uint64_t v24 = v22
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  outlined init with copy of PgQuery_Alias?(v23+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v25 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?(v24, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v25, &demangling cache variable for type metadata for PgQuery_Node?);
  BOOL v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v26((uint64_t)v14, 1, Node) == 1)
  {
    int v27 = v26(v25, 1, Node);
    swift_retain();
    swift_retain();
    if (v27 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v4 = v48;
      goto LABEL_11;
    }
    char v28 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_16:
    outlined destroy of AnyValue?((uint64_t)v14, v28);
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_17;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v26(v25, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    char v28 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_15:
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
    goto LABEL_16;
  }
  uint64_t v29 = v49;
  outlined init with take of PgQuery_OidList(v25, v49, type metadata accessor for PgQuery_Node);
  uint64_t v30 = *(int *)(Node + 20);
  uint64_t v31 = *(void *)&v18[v30];
  uint64_t v32 = *(void *)(v29 + v30);
  swift_retain();
  swift_retain();
  if (v31 != v32)
  {
    swift_retain();
    swift_retain();
    BOOL v33 = closure #1 in static PgQuery_Node.== infix(_:_:)(v31, v32);
    swift_release();
    swift_release();
    if (!v33)
    {
      outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
      char v28 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_15;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v4 = v48;
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v34 & 1) == 0)
  {
LABEL_17:
    swift_release();
    swift_release();
    goto LABEL_18;
  }
LABEL_11:
  uint64_t v35 = *(void *)(v22
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname);
  uint64_t v36 = *(void *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v37 = specialized static Array<A>.== infix(_:_:)(v35, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0) {
    goto LABEL_17;
  }
  int v38 = *(_DWORD *)(v22
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v39 = *(_DWORD *)(v23
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  uint64_t v5 = v47;
  if (v38 != v39)
  {
LABEL_18:
    char v43 = 0;
    return v43 & 1;
  }
LABEL_13:
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v41 = v52;
  v40(v52, v50, v4);
  uint64_t v42 = v53;
  v40(v53, v51, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  BOOL v44 = *(void (**)(char *, uint64_t))(v5 + 8);
  v44(v42, v4);
  v44(v41, v4);
  return v43 & 1;
}

uint64_t specialized static PgQuery_ArrayExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v54 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v59 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v60 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v54 - v19;
  uint64_t ArrayExpr = type metadata accessor for PgQuery_ArrayExpr(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(ArrayExpr + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26) {
    goto LABEL_22;
  }
  uint64_t v55 = a2;
  uint64_t v56 = v23;
  char v54 = v10;
  uint64_t v57 = v22;
  uint64_t v58 = v4;
  uint64_t v28 = v25
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v26 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1, Node) == 1)
  {
    int v32 = v31(v29, 1, Node);
    swift_retain();
    uint64_t v33 = v26;
    swift_retain();
    if (v32 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_11;
    }
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_19;
  }
  uint64_t v33 = v26;
  uint64_t v34 = v60;
  outlined init with copy of PgQuery_Alias?((uint64_t)v15, v60, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v31(v29, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_18:
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_19:
    outlined destroy of AnyValue?((uint64_t)v15, v35);
    outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_20;
  }
  uint64_t v36 = v59;
  outlined init with take of PgQuery_OidList(v29, v59, type metadata accessor for PgQuery_Node);
  uint64_t v37 = *(int *)(Node + 20);
  uint64_t v38 = *(void *)(v34 + v37);
  uint64_t v39 = *(void *)(v36 + v37);
  swift_retain();
  swift_retain();
  if (v38 != v39)
  {
    swift_retain();
    swift_retain();
    BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39);
    swift_release();
    swift_release();
    if (!v40)
    {
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v35 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_18;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v41)
  {
LABEL_11:
    if (*(_DWORD *)(v25
                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayTypeid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayTypeid))
      goto LABEL_20;
    if (*(_DWORD *)(v25
                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayCollid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayCollid))
      goto LABEL_20;
    if (*(_DWORD *)(v25
                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elementTypeid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elementTypeid))
      goto LABEL_20;
    uint64_t v42 = *(void *)(v25
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elements);
    uint64_t v43 = *(void *)(v33
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elements);
    uint64_t v44 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v45 = specialized static Array<A>.== infix(_:_:)(v42, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v45 & 1) == 0
      || *(unsigned __int8 *)(v25
                            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__multidims) != *(unsigned __int8 *)(v44 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__multidims))
    {
      goto LABEL_20;
    }
    int v47 = *(_DWORD *)(v25
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    int v48 = *(_DWORD *)(v44
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    uint64_t v22 = v57;
    uint64_t v4 = v58;
    uint64_t v10 = v54;
    uint64_t v27 = v55;
    uint64_t v23 = v56;
    if (v47 != v48)
    {
      char v46 = 0;
      return v46 & 1;
    }
LABEL_22:
    uint64_t v49 = v22;
    uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    uint64_t v51 = v27;
    v50(v10, v23, v4);
    v50(v8, v51, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v52 = *(void (**)(char *, uint64_t))(v49 + 8);
    v52(v8, v4);
    v52(v10, v4);
    return v46 & 1;
  }
LABEL_20:
  swift_release();
  swift_release();
  char v46 = 0;
  return v46 & 1;
}

uint64_t specialized static PgQuery_ViewStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v88 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v86 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v87 = (char *)&v75 - v7;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v81 = *(void *)(Node - 8);
  uint64_t v82 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v78 = (uint64_t)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v80);
  uint64_t v84 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v79 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v83 = (uint64_t)&v75 - v14;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v16 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v85 = (uint64_t)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v24 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v75 - v25;
  Viewuint64_t Stmt = type metadata accessor for PgQuery_ViewStmt(0);
  uint64_t v28 = a1;
  uint64_t v29 = *(int *)(ViewStmt + 20);
  uint64_t v30 = *(void *)(a1 + v29);
  uint64_t v31 = *(void *)(a2 + v29);
  uint64_t v32 = a2;
  uint64_t v33 = v88;
  if (v30 == v31) {
    goto LABEL_31;
  }
  uint64_t v75 = v32;
  uint64_t v76 = v28;
  uint64_t v77 = v4;
  uint64_t v34 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__view;
  outlined init with copy of PgQuery_Alias?(v31 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__view, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v35 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of PgQuery_Alias?(v34, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v26, v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v36((uint64_t)v20, 1, RangeVar) == 1)
  {
    int v37 = v36(v35, 1, RangeVar);
    swift_retain();
    swift_retain();
    if (v37 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_10;
    }
LABEL_7:
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    uint64_t v38 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    uint64_t v39 = (uint64_t)v26;
LABEL_8:
    outlined destroy of AnyValue?(v39, v38);
LABEL_35:
    swift_release();
    swift_release();
    char v72 = 0;
    return v72 & 1;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v36(v35, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v24, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  uint64_t v40 = v35;
  uint64_t v41 = v85;
  outlined init with take of PgQuery_OidList(v40, v85, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  char v42 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v24, v41);
  outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v24, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v42 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_10:
  uint64_t v43 = *(void *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aliases);
  uint64_t v44 = *(void *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aliases);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v45 = specialized static Array<A>.== infix(_:_:)(v43, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0) {
    goto LABEL_35;
  }
  uint64_t v46 = v30
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  uint64_t v47 = v83;
  outlined init with copy of PgQuery_Alias?(v31 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, v83, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v48 = v84;
  uint64_t v49 = v84 + *(int *)(v80 + 48);
  outlined init with copy of PgQuery_Alias?(v46, v84, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v47, v49, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v50 = v82;
  uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
  if (v51(v48, 1, v82) == 1)
  {
    int v52 = v51(v49, 1, v50);
    uint64_t v4 = v77;
    if (v52 == 1)
    {
      outlined destroy of AnyValue?(v48, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v47, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_20;
    }
    uint64_t v55 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_28;
  }
  uint64_t v53 = v79;
  outlined init with copy of PgQuery_Alias?(v48, v79, &demangling cache variable for type metadata for PgQuery_Node?);
  int v54 = v51(v49, 1, v50);
  uint64_t v4 = v77;
  if (v54 == 1)
  {
    uint64_t v55 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_27:
    outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_Node);
LABEL_28:
    outlined destroy of AnyValue?(v48, v55);
    uint64_t v38 = &demangling cache variable for type metadata for PgQuery_Node?;
    uint64_t v39 = v47;
    goto LABEL_8;
  }
  uint64_t v56 = v78;
  outlined init with take of PgQuery_OidList(v49, v78, type metadata accessor for PgQuery_Node);
  uint64_t v57 = *(int *)(v50 + 20);
  uint64_t v58 = *(void *)(v53 + v57);
  uint64_t v59 = *(void *)(v56 + v57);
  if (v58 != v59)
  {
    swift_retain();
    swift_retain();
    BOOL v60 = closure #1 in static PgQuery_Node.== infix(_:_:)(v58, v59);
    swift_release();
    swift_release();
    if (!v60)
    {
      outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
      uint64_t v55 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_27;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v48, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v47, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v61 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_20:
  if (*(unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace) != *(unsigned __int8 *)(v31 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace))
    goto LABEL_35;
  uint64_t v62 = *(void *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  uint64_t v63 = *(void *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v64 = specialized static Array<A>.== infix(_:_:)(v62, v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v64 & 1) == 0) {
    goto LABEL_35;
  }
  uint64_t v65 = *(void *)(v30
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption);
  uint64_t v66 = *(void *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption);
  if (*(unsigned char *)(v31
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption
                + 8) == 1)
  {
    uint64_t v33 = v88;
    switch(v66)
    {
      case 1:
        if (v65 != 1) {
          goto LABEL_35;
        }
        goto LABEL_30;
      case 2:
        if (v65 != 2) {
          goto LABEL_35;
        }
        goto LABEL_30;
      case 3:
        if (v65 != 3) {
          goto LABEL_35;
        }
        goto LABEL_30;
      default:
        if (!v65) {
          goto LABEL_30;
        }
        goto LABEL_35;
    }
  }
  uint64_t v33 = v88;
  if (v65 != v66) {
    goto LABEL_35;
  }
LABEL_30:
  swift_release();
  swift_release();
  uint64_t v32 = v75;
  uint64_t v28 = v76;
LABEL_31:
  uint64_t v67 = v33;
  uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  uint64_t v69 = v87;
  uint64_t v70 = v32;
  v68(v87, v28, v4);
  uint64_t v71 = v86;
  v68(v86, v70, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v73 = *(void (**)(char *, uint64_t))(v67 + 8);
  v73(v71, v4);
  v73(v69, v4);
  return v72 & 1;
}

uint64_t specialized static PgQuery_TypeName.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) != 0
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12)
    && *(unsigned __int8 *)(a1 + 13) == *(unsigned __int8 *)(a2 + 13)
    && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a2 + 16)) & 1) != 0
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 32), *(void *)(a2 + 32)) & 1) != 0
    && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40))
  {
    uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(TypeName + 48), v4);
    v12(v8, a2 + *(int *)(TypeName + 48), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_RuleStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v82 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v83 = (char *)&v70 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v78 = *(void *)(Node - 8);
  uint64_t v79 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v74 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v77);
  uint64_t v81 = (uint64_t)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v75 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v80 = (uint64_t)&v70 - v15;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v17 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v76 = (uint64_t)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v25 = (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v70 - v26;
  Ruleuint64_t Stmt = type metadata accessor for PgQuery_RuleStmt(0);
  uint64_t v29 = v5;
  uint64_t v30 = a1;
  uint64_t v31 = *(int *)(RuleStmt + 20);
  uint64_t v32 = *(void *)(a1 + v31);
  uint64_t v33 = *(void *)(a2 + v31);
  uint64_t v34 = a2;
  if (v32 == v33) {
    goto LABEL_25;
  }
  uint64_t v70 = v30;
  uint64_t v71 = a2;
  uint64_t v72 = v29;
  uint64_t v73 = v4;
  uint64_t v35 = v32
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v33+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v36 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of PgQuery_Alias?(v35, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v36, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v37((uint64_t)v21, 1, RangeVar) == 1)
  {
    int v38 = v37(v36, 1, RangeVar);
    swift_retain();
    swift_retain();
    if (v38 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_9;
    }
LABEL_7:
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    uint64_t v39 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    uint64_t v40 = (uint64_t)v27;
LABEL_29:
    outlined destroy of AnyValue?(v40, v39);
    goto LABEL_30;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v37(v36, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  uint64_t v41 = v76;
  outlined init with take of PgQuery_OidList(v36, v76, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  char v42 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v25, v41);
  outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v42 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_9:
  if ((*(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename) != *(void *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename)
     || *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename
                  + 8) != *(void *)(v33
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_30;
  }
  uint64_t v43 = v32
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t v44 = v80;
  outlined init with copy of PgQuery_Alias?(v33+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v80, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v45 = v81;
  uint64_t v46 = v81 + *(int *)(v77 + 48);
  outlined init with copy of PgQuery_Alias?(v43, v81, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v44, v46, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v47 = v79;
  uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
  if (v48(v45, 1, v79) != 1)
  {
    uint64_t v49 = v75;
    outlined init with copy of PgQuery_Alias?(v45, v75, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v48(v46, 1, v47) == 1)
    {
      uint64_t v50 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_27:
      outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Node);
      goto LABEL_28;
    }
    uint64_t v51 = v74;
    outlined init with take of PgQuery_OidList(v46, v74, type metadata accessor for PgQuery_Node);
    uint64_t v52 = *(int *)(v47 + 20);
    uint64_t v53 = *(void *)(v49 + v52);
    uint64_t v54 = *(void *)(v51 + v52);
    if (v53 != v54)
    {
      swift_retain();
      swift_retain();
      BOOL v55 = closure #1 in static PgQuery_Node.== infix(_:_:)(v53, v54);
      swift_release();
      swift_release();
      if (!v55)
      {
        outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_Node);
        uint64_t v50 = &demangling cache variable for type metadata for PgQuery_Node?;
        goto LABEL_27;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    uint64_t v4 = v73;
    char v56 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Node);
    outlined destroy of AnyValue?(v45, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of AnyValue?(v44, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v56) {
      goto LABEL_21;
    }
LABEL_30:
    swift_release();
    swift_release();
    goto LABEL_31;
  }
  if (v48(v46, 1, v47) != 1)
  {
    uint64_t v50 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_28:
    outlined destroy of AnyValue?(v45, v50);
    uint64_t v39 = &demangling cache variable for type metadata for PgQuery_Node?;
    uint64_t v40 = v44;
    goto LABEL_29;
  }
  outlined destroy of AnyValue?(v45, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v44, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v4 = v73;
LABEL_21:
  if (!specialized == infix<A>(_:_:)(*(void *)(v32+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event), *(unsigned __int8 *)(v32+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event+ 8), *(void *)(v33+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event)))goto LABEL_30; {
  if (*(unsigned __int8 *)(v32
  }
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__instead) != *(unsigned __int8 *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__instead))
    goto LABEL_30;
  uint64_t v57 = *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__actions);
  uint64_t v58 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__actions);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v59 = specialized static Array<A>.== infix(_:_:)(v57, v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v59 & 1) == 0) {
    goto LABEL_30;
  }
  int v60 = *(unsigned __int8 *)(v32
                           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace);
  int v61 = *(unsigned __int8 *)(v33
                           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace);
  swift_release();
  swift_release();
  uint64_t v34 = v71;
  uint64_t v29 = v72;
  uint64_t v30 = v70;
  if (v60 != v61)
  {
LABEL_31:
    char v67 = 0;
    return v67 & 1;
  }
LABEL_25:
  uint64_t v62 = v29;
  uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  char v64 = v83;
  uint64_t v65 = v34;
  v63(v83, v30, v4);
  uint64_t v66 = v82;
  v63(v82, v65, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v68 = *(void (**)(char *, uint64_t))(v62 + 8);
  v68(v66, v4);
  v68(v64, v4);
  return v67 & 1;
}

uint64_t specialized static PgQuery_RoleSpec.== infix(_:_:)(char *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 != 1) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 2:
        if (v11 != 2) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 3:
        if (v11 != 3) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 4:
        if (v11 != 4) {
          goto LABEL_20;
        }
        goto LABEL_6;
      default:
        if (!v11) {
          goto LABEL_6;
        }
        goto LABEL_20;
    }
  }
  if (v11 != v12) {
    goto LABEL_20;
  }
LABEL_6:
  BOOL v13 = *((void *)a1 + 2) == a2[2] && *((void *)a1 + 3) == a2[3];
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((_DWORD *)a1 + 8) == *((_DWORD *)a2 + 8))
    {
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, &a1[*(int *)(RoleSpec + 28)], v4);
      v16(v8, (char *)a2 + *(int *)(RoleSpec + 28), v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
      return v14 & 1;
    }
LABEL_20:
    char v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_ParamRef.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1))
  {
    uint64_t ParamRef = type metadata accessor for PgQuery_ParamRef(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(ParamRef + 24)], v4);
    v12(v8, &a2[*(int *)(ParamRef + 24)], v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_NullTest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v89 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v76 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  uint64_t v11 = MEMORY[0x1F4188790](Node);
  uint64_t v84 = (uint64_t)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v85 = (uint64_t)&v76 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v88 = (uint64_t)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v76 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v86 = (uint64_t)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v87 = (uint64_t)&v76 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v90 = (uint64_t)&v76 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v76 - v26;
  uint64_t NullTest = type metadata accessor for PgQuery_NullTest(0);
  uint64_t v29 = a1;
  uint64_t v30 = *(int *)(NullTest + 20);
  uint64_t v31 = *(void *)(a1 + v30);
  uint64_t v32 = *(void *)(a2 + v30);
  uint64_t v33 = a2;
  if (v31 == v32)
  {
LABEL_40:
    uint64_t v71 = v89;
    uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 16);
    uint64_t v73 = v33;
    v72(v9, v29, v4);
    v72(v7, v73, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v74 = *(void (**)(char *, uint64_t))(v71 + 8);
    v74(v7, v4);
    v74(v9, v4);
    return v68 & 1;
  }
  uint64_t v81 = v29;
  uint64_t v82 = a2;
  uint64_t v79 = v7;
  uint64_t v80 = v9;
  uint64_t v83 = v4;
  uint64_t v34 = v31
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v32 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v35 = (uint64_t)&v18[*(int *)(v14 + 48)];
  outlined init with copy of PgQuery_Alias?(v34, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  uint64_t v37 = Node;
  if (v36((uint64_t)v18, 1, Node) == 1)
  {
    unsigned int v38 = v36(v35, 1, v37);
    uint64_t v39 = v36;
    unsigned int v40 = v38;
    swift_retain();
    swift_retain();
    if (v40 == 1)
    {
      uint64_t v78 = v39;
      outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_11;
    }
    char v42 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_27:
    outlined destroy of AnyValue?((uint64_t)v18, v42);
    uint64_t v67 = (uint64_t)v27;
LABEL_33:
    outlined destroy of AnyValue?(v67, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_34;
  }
  uint64_t v41 = v90;
  outlined init with copy of PgQuery_Alias?((uint64_t)v18, v90, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36(v35, 1, v37) == 1)
  {
    swift_retain();
    swift_retain();
    char v42 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_Node);
    goto LABEL_27;
  }
  uint64_t v77 = v27;
  uint64_t v78 = v36;
  uint64_t v76 = v18;
  uint64_t v43 = v85;
  outlined init with take of PgQuery_OidList(v35, v85, type metadata accessor for PgQuery_Node);
  uint64_t v44 = *(int *)(v37 + 20);
  uint64_t v45 = *(void *)(v41 + v44);
  uint64_t v46 = *(void *)(v43 + v44);
  swift_retain();
  swift_retain();
  if (v45 != v46)
  {
    swift_retain();
    swift_retain();
    BOOL v47 = closure #1 in static PgQuery_Node.== infix(_:_:)(v45, v46);
    swift_release();
    swift_release();
    if (!v47)
    {
      outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
      char v42 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v18 = v76;
      uint64_t v27 = v77;
      uint64_t v41 = v90;
      goto LABEL_26;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v48 = v90;
  char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v76, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v77, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v49 & 1) == 0) {
    goto LABEL_34;
  }
LABEL_11:
  uint64_t v50 = v31
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  uint64_t v51 = v87;
  outlined init with copy of PgQuery_Alias?(v32 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v87, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v52 = v88;
  uint64_t v53 = v88 + *(int *)(v14 + 48);
  outlined init with copy of PgQuery_Alias?(v50, v88, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v51, v53, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v54 = v78;
  if (v78(v52, 1, v37) != 1)
  {
    uint64_t v55 = v86;
    outlined init with copy of PgQuery_Alias?(v52, v86, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v54(v53, 1, v37) == 1)
    {
      char v56 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v57 = v84;
      outlined init with take of PgQuery_OidList(v53, v84, type metadata accessor for PgQuery_Node);
      uint64_t v58 = *(int *)(v37 + 20);
      uint64_t v59 = *(void *)(v55 + v58);
      uint64_t v60 = *(void *)(v57 + v58);
      if (v59 == v60
        || (swift_retain(),
            swift_retain(),
            BOOL v61 = closure #1 in static PgQuery_Node.== infix(_:_:)(v59, v60),
            swift_release(),
            swift_release(),
            v61))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v62 = v86;
        uint64_t v63 = v84;
        char v64 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v52, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v51, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v64 & 1) == 0) {
          goto LABEL_34;
        }
        goto LABEL_20;
      }
      outlined destroy of PgQuery_Alias(v84, type metadata accessor for PgQuery_Node);
      char v56 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v55 = v86;
    }
    outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_Node);
    goto LABEL_32;
  }
  if (v54(v53, 1, v37) != 1)
  {
    char v56 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_32:
    outlined destroy of AnyValue?(v52, v56);
    uint64_t v67 = v51;
    goto LABEL_33;
  }
  outlined destroy of AnyValue?(v52, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v51, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_20:
  uint64_t v65 = *(void *)(v31
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype);
  uint64_t v66 = *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype);
  if (*(unsigned char *)(v32
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype
                + 8) == 1)
  {
    if (v66)
    {
      if (v66 == 1)
      {
        if (v65 != 1) {
          goto LABEL_34;
        }
      }
      else if (v65 != 2)
      {
        goto LABEL_34;
      }
    }
    else if (v65)
    {
      goto LABEL_34;
    }
  }
  else if (v65 != v66)
  {
    goto LABEL_34;
  }
  if (*(unsigned __int8 *)(v31
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argisrow) == *(unsigned __int8 *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argisrow))
  {
    int v69 = *(_DWORD *)(v31
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    int v70 = *(_DWORD *)(v32
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    uint64_t v7 = v79;
    uint64_t v9 = v80;
    uint64_t v29 = v81;
    uint64_t v33 = v82;
    uint64_t v4 = v83;
    if (v69 != v70)
    {
      char v68 = 0;
      return v68 & 1;
    }
    goto LABEL_40;
  }
LABEL_34:
  swift_release();
  swift_release();
  char v68 = 0;
  return v68 & 1;
}

uint64_t specialized static PgQuery_AlterStatsStmt.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v18 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) != 0
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12))
  {
    uint64_t v15 = a3(0);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v16(v12, a1 + *(int *)(v15 + 28), v6);
    v16(v10, a2 + *(int *)(v15 + 28), v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v10, v6);
    v17(v12, v6);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static PgQuery_JoinExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v126 - v9;
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v137 = *(void *)(Alias - 8);
  uint64_t v138 = Alias;
  MEMORY[0x1F4188790](Alias);
  uint64_t v133 = (uint64_t *)((char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?));
  MEMORY[0x1F4188790](v136);
  uint64_t v139 = (uint64_t)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v134 = (uint64_t *)((char *)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v15);
  uint64_t v140 = (uint64_t)&v126 - v17;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v19 = *(void *)(Node - 8);
  uint64_t v149 = Node;
  uint64_t v150 = v19;
  uint64_t v20 = MEMORY[0x1F4188790](Node);
  uint64_t v135 = (uint64_t)&v126 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v144 = (uint64_t)&v126 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v145 = (uint64_t)&v126 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  uint64_t v143 = (uint64_t)&v126 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v148 = (uint64_t)&v126 - v29;
  MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)&v126 - v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v33 = MEMORY[0x1F4188790](v32 - 8);
  uint64_t v141 = (uint64_t)&v126 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v142 = (uint64_t)&v126 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v146 = (uint64_t)&v126 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v147 = (uint64_t)&v126 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v43 = (char *)&v126 - v42;
  MEMORY[0x1F4188790](v41);
  uint64_t v45 = (char *)&v126 - v44;
  uint64_t JoinExpr = type metadata accessor for PgQuery_JoinExpr(0);
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t v49 = *(int *)(JoinExpr + 20);
  uint64_t v50 = *(void *)(a1 + v49);
  uint64_t v51 = *(void *)(a2 + v49);
  if (v50 == v51) {
    goto LABEL_66;
  }
  uint64_t v132 = v10;
  uint64_t v52 = *(void *)(v50 + 16);
  uint64_t v53 = *(void *)(v51 + 16);
  if (*(unsigned char *)(v51 + 24) == 1)
  {
    switch(v53)
    {
      case 1:
        if (v52 == 1) {
          goto LABEL_7;
        }
        goto LABEL_8;
      case 2:
        if (v52 == 2) {
          goto LABEL_7;
        }
        goto LABEL_8;
      case 3:
        if (v52 == 3) {
          goto LABEL_7;
        }
        goto LABEL_8;
      case 4:
        if (v52 == 4) {
          goto LABEL_7;
        }
        goto LABEL_8;
      case 5:
        if (v52 == 5) {
          goto LABEL_7;
        }
        goto LABEL_8;
      case 6:
        if (v52 == 6) {
          goto LABEL_7;
        }
        goto LABEL_8;
      case 7:
        if (v52 == 7) {
          goto LABEL_7;
        }
        goto LABEL_8;
      case 8:
        if (v52 == 8) {
          goto LABEL_7;
        }
        goto LABEL_8;
      default:
        if (!v52) {
          goto LABEL_7;
        }
        goto LABEL_8;
    }
  }
  if (v52 != v53) {
    goto LABEL_8;
  }
LABEL_7:
  if (*(unsigned __int8 *)(v50 + 25) == *(unsigned __int8 *)(v51 + 25))
  {
    uint64_t v126 = v47;
    uint64_t v127 = v48;
    uint64_t v128 = v8;
    uint64_t v129 = v5;
    uint64_t v130 = v4;
    uint64_t v55 = v50
        + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
    outlined init with copy of PgQuery_Alias?(v51 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, (uint64_t)v45, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v131 = v25;
    uint64_t v56 = (uint64_t)&v31[*(int *)(v25 + 48)];
    outlined init with copy of PgQuery_Alias?(v55, (uint64_t)v31, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v45, v56, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v57 = v149;
    uint64_t v59 = v150 + 48;
    uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v150 + 48);
    if (v58((uint64_t)v31, 1, v149) == 1)
    {
      int v60 = v58(v56, 1, v57);
      swift_retain();
      swift_retain();
      if (v60 == 1)
      {
        outlined destroy of AnyValue?((uint64_t)v31, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?((uint64_t)v45, &demangling cache variable for type metadata for PgQuery_Node?);
        goto LABEL_18;
      }
      BOOL v61 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      outlined init with copy of PgQuery_Alias?((uint64_t)v31, (uint64_t)v43, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v150 = v59;
      if (v58(v56, 1, v57) == 1)
      {
        swift_retain();
        swift_retain();
        BOOL v61 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        uint64_t v62 = v145;
        outlined init with take of PgQuery_OidList(v56, v145, type metadata accessor for PgQuery_Node);
        uint64_t v63 = *(int *)(v57 + 20);
        uint64_t v64 = *(void *)&v43[v63];
        uint64_t v65 = *(void *)(v62 + v63);
        swift_retain();
        swift_retain();
        if (v64 == v65
          || (swift_retain(),
              swift_retain(),
              BOOL v66 = closure #1 in static PgQuery_Node.== infix(_:_:)(v64, v65),
              swift_release(),
              swift_release(),
              v66))
        {
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias((uint64_t)v43, type metadata accessor for PgQuery_Node);
          outlined destroy of AnyValue?((uint64_t)v31, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of AnyValue?((uint64_t)v45, &demangling cache variable for type metadata for PgQuery_Node?);
          if ((v67 & 1) == 0) {
            goto LABEL_56;
          }
LABEL_18:
          uint64_t v68 = v50
              + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg;
          uint64_t v69 = v147;
          outlined init with copy of PgQuery_Alias?(v51+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v147, &demangling cache variable for type metadata for PgQuery_Node?);
          uint64_t v70 = v148;
          uint64_t v71 = v148 + *(int *)(v131 + 48);
          outlined init with copy of PgQuery_Alias?(v68, v148, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined init with copy of PgQuery_Alias?(v69, v71, &demangling cache variable for type metadata for PgQuery_Node?);
          uint64_t v72 = v149;
          if (v58(v70, 1, v149) == 1)
          {
            if (v58(v71, 1, v72) == 1)
            {
              outlined destroy of AnyValue?(v70, &demangling cache variable for type metadata for PgQuery_Node?);
              outlined destroy of AnyValue?(v69, &demangling cache variable for type metadata for PgQuery_Node?);
              goto LABEL_43;
            }
            uint64_t v74 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
          }
          else
          {
            uint64_t v73 = v146;
            outlined init with copy of PgQuery_Alias?(v70, v146, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v58(v71, 1, v72) == 1)
            {
              uint64_t v74 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
            }
            else
            {
              uint64_t v75 = v144;
              outlined init with take of PgQuery_OidList(v71, v144, type metadata accessor for PgQuery_Node);
              uint64_t v76 = *(int *)(v72 + 20);
              uint64_t v77 = *(void *)(v73 + v76);
              uint64_t v78 = *(void *)(v75 + v76);
              if (v77 == v78
                || (swift_retain(),
                    swift_retain(),
                    BOOL v79 = closure #1 in static PgQuery_Node.== infix(_:_:)(v77, v78),
                    swift_release(),
                    swift_release(),
                    v79))
              {
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                uint64_t v80 = v146;
                char v81 = dispatch thunk of static Equatable.== infix(_:_:)();
                outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_Node);
                outlined destroy of PgQuery_Alias(v80, type metadata accessor for PgQuery_Node);
                outlined destroy of AnyValue?(v70, &demangling cache variable for type metadata for PgQuery_Node?);
                outlined destroy of AnyValue?(v69, &demangling cache variable for type metadata for PgQuery_Node?);
                if ((v81 & 1) == 0) {
                  goto LABEL_56;
                }
LABEL_43:
                uint64_t v82 = v51;
                uint64_t v83 = *(void *)(v50
                                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause);
                uint64_t v84 = *(void *)(v82
                                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v85 = v50;
                char v86 = specialized static Array<A>.== infix(_:_:)(v83, v84);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v86 & 1) == 0) {
                  goto LABEL_56;
                }
                uint64_t v87 = v85;
                uint64_t v88 = v85
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals;
                uint64_t v89 = v82;
                uint64_t v90 = v142;
                outlined init with copy of PgQuery_Alias?(v82+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, v142, &demangling cache variable for type metadata for PgQuery_Node?);
                uint64_t v91 = v143;
                uint64_t v92 = v143 + *(int *)(v131 + 48);
                outlined init with copy of PgQuery_Alias?(v88, v143, &demangling cache variable for type metadata for PgQuery_Node?);
                outlined init with copy of PgQuery_Alias?(v90, v92, &demangling cache variable for type metadata for PgQuery_Node?);
                uint64_t v93 = v149;
                if (v58(v91, 1, v149) == 1)
                {
                  if (v58(v92, 1, v93) == 1)
                  {
                    outlined destroy of AnyValue?(v91, &demangling cache variable for type metadata for PgQuery_Node?);
                    outlined destroy of AnyValue?(v90, &demangling cache variable for type metadata for PgQuery_Node?);
                    uint64_t v4 = v130;
                    uint64_t v94 = v87;
LABEL_61:
                    uint64_t v105 = v94
                         + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
                    uint64_t v106 = v140;
                    outlined init with copy of PgQuery_Alias?(v89+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v140, &demangling cache variable for type metadata for PgQuery_Alias?);
                    uint64_t v107 = v139;
                    uint64_t v108 = v139 + *(int *)(v136 + 48);
                    outlined init with copy of PgQuery_Alias?(v105, v139, &demangling cache variable for type metadata for PgQuery_Alias?);
                    outlined init with copy of PgQuery_Alias?(v106, v108, &demangling cache variable for type metadata for PgQuery_Alias?);
                    uint64_t v109 = v138;
                    uint64_t v110 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 48);
                    if (v110(v107, 1, v138) == 1)
                    {
                      int v111 = v110(v108, 1, v109);
                      uint64_t v5 = v129;
                      if (v111 == 1)
                      {
                        outlined destroy of AnyValue?(v139, &demangling cache variable for type metadata for PgQuery_Alias?);
                        outlined destroy of AnyValue?(v140, &demangling cache variable for type metadata for PgQuery_Alias?);
                        uint64_t v112 = v87;
                        goto LABEL_64;
                      }
                      uint64_t v123 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
                      goto LABEL_83;
                    }
                    uint64_t v121 = v134;
                    outlined init with copy of PgQuery_Alias?(v107, (uint64_t)v134, &demangling cache variable for type metadata for PgQuery_Alias?);
                    int v122 = v110(v108, 1, v109);
                    uint64_t v5 = v129;
                    if (v122 == 1)
                    {
                      uint64_t v123 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
LABEL_82:
                      outlined destroy of PgQuery_Alias((uint64_t)v121, type metadata accessor for PgQuery_Alias);
LABEL_83:
                      outlined destroy of AnyValue?(v139, v123);
                      outlined destroy of AnyValue?(v140, &demangling cache variable for type metadata for PgQuery_Alias?);
                      goto LABEL_56;
                    }
                    uint64_t v124 = v133;
                    outlined init with take of PgQuery_OidList(v108, (uint64_t)v133, type metadata accessor for PgQuery_Alias);
                    uint64_t v112 = v87;
                    if ((*v121 != *v124 || v121[1] != v124[1])
                      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
                      || (specialized static Array<A>.== infix(_:_:)(v121[2], v124[2]) & 1) == 0)
                    {
                      outlined destroy of PgQuery_Alias((uint64_t)v124, type metadata accessor for PgQuery_Alias);
                      uint64_t v123 = &demangling cache variable for type metadata for PgQuery_Alias?;
                      goto LABEL_82;
                    }
                    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                    char v125 = dispatch thunk of static Equatable.== infix(_:_:)();
                    outlined destroy of PgQuery_Alias((uint64_t)v124, type metadata accessor for PgQuery_Alias);
                    outlined destroy of PgQuery_Alias((uint64_t)v121, type metadata accessor for PgQuery_Alias);
                    outlined destroy of AnyValue?(v139, &demangling cache variable for type metadata for PgQuery_Alias?);
                    outlined destroy of AnyValue?(v140, &demangling cache variable for type metadata for PgQuery_Alias?);
                    if (v125)
                    {
LABEL_64:
                      int v113 = *(_DWORD *)(v112
                                       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtindex);
                      int v114 = *(_DWORD *)(v89
                                       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtindex);
                      swift_release();
                      swift_release();
                      BOOL v115 = v113 == v114;
                      uint64_t v8 = v128;
                      uint64_t v10 = v132;
                      uint64_t v48 = v127;
                      uint64_t v47 = v126;
                      if (!v115) {
                        goto LABEL_8;
                      }
LABEL_66:
                      uint64_t v116 = v8;
                      uint64_t v117 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
                      uint64_t v118 = v48;
                      v117(v10, v47, v4);
                      v117(v116, v118, v4);
                      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                      char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
                      uint64_t v119 = *(void (**)(char *, uint64_t))(v5 + 8);
                      v119(v116, v4);
                      v119(v10, v4);
                      return v54 & 1;
                    }
LABEL_56:
                    swift_release();
                    swift_release();
                    char v54 = 0;
                    return v54 & 1;
                  }
                  uint64_t v96 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
                }
                else
                {
                  uint64_t v95 = v141;
                  outlined init with copy of PgQuery_Alias?(v91, v141, &demangling cache variable for type metadata for PgQuery_Node?);
                  if (v58(v92, 1, v93) == 1)
                  {
                    uint64_t v96 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
                  }
                  else
                  {
                    uint64_t v97 = v135;
                    outlined init with take of PgQuery_OidList(v92, v135, type metadata accessor for PgQuery_Node);
                    uint64_t v98 = *(int *)(v93 + 20);
                    uint64_t v99 = *(void *)(v95 + v98);
                    uint64_t v100 = *(void *)(v97 + v98);
                    if (v99 == v100
                      || (swift_retain(),
                          swift_retain(),
                          BOOL v101 = closure #1 in static PgQuery_Node.== infix(_:_:)(v99, v100),
                          swift_release(),
                          swift_release(),
                          v101))
                    {
                      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                      uint64_t v102 = v141;
                      uint64_t v103 = v90;
                      uint64_t v4 = v130;
                      char v104 = dispatch thunk of static Equatable.== infix(_:_:)();
                      outlined destroy of PgQuery_Alias(v97, type metadata accessor for PgQuery_Node);
                      outlined destroy of PgQuery_Alias(v102, type metadata accessor for PgQuery_Node);
                      outlined destroy of AnyValue?(v91, &demangling cache variable for type metadata for PgQuery_Node?);
                      outlined destroy of AnyValue?(v103, &demangling cache variable for type metadata for PgQuery_Node?);
                      uint64_t v94 = v87;
                      if ((v104 & 1) == 0) {
                        goto LABEL_56;
                      }
                      goto LABEL_61;
                    }
                    outlined destroy of PgQuery_Alias(v97, type metadata accessor for PgQuery_Node);
                    uint64_t v96 = &demangling cache variable for type metadata for PgQuery_Node?;
                    uint64_t v95 = v141;
                  }
                  outlined destroy of PgQuery_Alias(v95, type metadata accessor for PgQuery_Node);
                }
                outlined destroy of AnyValue?(v91, v96);
                outlined destroy of AnyValue?(v90, &demangling cache variable for type metadata for PgQuery_Node?);
                goto LABEL_56;
              }
              outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_Node);
              uint64_t v74 = &demangling cache variable for type metadata for PgQuery_Node?;
              uint64_t v73 = v146;
            }
            outlined destroy of PgQuery_Alias(v73, type metadata accessor for PgQuery_Node);
          }
          outlined destroy of AnyValue?(v70, v74);
          outlined destroy of AnyValue?(v69, &demangling cache variable for type metadata for PgQuery_Node?);
          goto LABEL_56;
        }
        outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
        BOOL v61 = &demangling cache variable for type metadata for PgQuery_Node?;
      }
      outlined destroy of PgQuery_Alias((uint64_t)v43, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of AnyValue?((uint64_t)v31, v61);
    outlined destroy of AnyValue?((uint64_t)v45, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_56;
  }
LABEL_8:
  char v54 = 0;
  return v54 & 1;
}

uint64_t specialized static PgQuery_FuncExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v56 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v61 = (uint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v62 = (uint64_t)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v56 - v19;
  uint64_t FuncExpr = type metadata accessor for PgQuery_FuncExpr(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(FuncExpr + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26)
  {
LABEL_28:
    uint64_t v51 = v22;
    uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    uint64_t v53 = v27;
    v52(v10, v23, v4);
    v52(v8, v53, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v54 = *(void (**)(char *, uint64_t))(v51 + 8);
    v54(v8, v4);
    v54(v10, v4);
    return v44 & 1;
  }
  uint64_t v57 = a2;
  uint64_t v58 = v23;
  uint64_t v56 = v10;
  uint64_t v59 = v22;
  uint64_t v60 = v4;
  uint64_t v28 = v25
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v26 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v33 = v26;
    uint64_t v34 = v62;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v62, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v31(v29, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v36 = v61;
      outlined init with take of PgQuery_OidList(v29, v61, type metadata accessor for PgQuery_Node);
      uint64_t v37 = *(int *)(Node + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v36 + v37);
      swift_retain();
      swift_retain();
      if (v38 == v39
        || (swift_retain(),
            swift_retain(),
            BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
            swift_release(),
            swift_release(),
            v40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v41 & 1) == 0) {
          goto LABEL_22;
        }
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v35 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_21:
    outlined destroy of AnyValue?((uint64_t)v15, v35);
    outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_22;
  }
  unsigned int v32 = v31(v29, 1, Node);
  swift_retain();
  uint64_t v33 = v26;
  swift_retain();
  if (v32 != 1)
  {
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_21;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcid) == *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcid)
    && *(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcresulttype) == *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcresulttype)
    && *(unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcretset) == *(unsigned __int8 *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcretset)
    && *(unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcvariadic) == *(unsigned __int8 *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcvariadic))
  {
    uint64_t v42 = *(void *)(v25
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat);
    uint64_t v43 = *(void *)(v33
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat);
    if (*(unsigned char *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat
                  + 8) == 1)
    {
      switch(v43)
      {
        case 1:
          if (v42 == 1) {
            goto LABEL_24;
          }
          goto LABEL_22;
        case 2:
          if (v42 == 2) {
            goto LABEL_24;
          }
          goto LABEL_22;
        case 3:
          if (v42 == 3) {
            goto LABEL_24;
          }
          goto LABEL_22;
        default:
          if (!v42) {
            goto LABEL_24;
          }
          goto LABEL_22;
      }
    }
    if (v42 == v43)
    {
LABEL_24:
      if (*(_DWORD *)(v25
                     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccollid) == *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccollid)
        && *(_DWORD *)(v25
                     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) == *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
      {
        uint64_t v45 = *(void *)(v25
                        + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
        uint64_t v46 = *(void *)(v33
                        + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
        uint64_t v47 = v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v48 = specialized static Array<A>.== infix(_:_:)(v45, v46);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v48)
        {
          int v49 = *(_DWORD *)(v25
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
          int v50 = *(_DWORD *)(v47
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
          swift_release();
          swift_release();
          uint64_t v22 = v59;
          uint64_t v4 = v60;
          uint64_t v10 = v56;
          uint64_t v27 = v57;
          uint64_t v23 = v58;
          if (v49 != v50)
          {
            char v44 = 0;
            return v44 & 1;
          }
          goto LABEL_28;
        }
      }
    }
  }
LABEL_22:
  swift_release();
  swift_release();
  char v44 = 0;
  return v44 & 1;
}

uint64_t specialized static PgQuery_FromExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v51 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v58 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v56 = (uint64_t)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v59 = (uint64_t)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v57 = (uint64_t)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v60 = (uint64_t)&v51 - v18;
  uint64_t v19 = type metadata accessor for PgQuery_FromExpr(0);
  uint64_t v20 = a1;
  uint64_t v21 = *(int *)(v19 + 20);
  uint64_t v22 = *(void *)(a1 + v21);
  uint64_t v23 = *(void *)(a2 + v21);
  if (v22 == v23) {
    goto LABEL_13;
  }
  uint64_t v53 = a1;
  uint64_t v54 = v5;
  uint64_t v55 = v8;
  uint64_t v24 = *(void *)(v22 + 16);
  uint64_t v25 = *(void *)(v23 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v26 = specialized static Array<A>.== infix(_:_:)(v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v52 = v4;
  uint64_t v27 = v22
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FromExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals;
  uint64_t v28 = v60;
  outlined init with copy of PgQuery_Alias?(v23 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FromExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, v60, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = v59;
  uint64_t v30 = v59 + *(int *)(v13 + 48);
  outlined init with copy of PgQuery_Alias?(v27, v59, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v31 = v29;
  outlined init with copy of PgQuery_Alias?(v28, v30, &demangling cache variable for type metadata for PgQuery_Node?);
  unsigned int v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  if (v32(v29, 1, Node) != 1)
  {
    uint64_t v34 = v57;
    outlined init with copy of PgQuery_Alias?(v29, v57, &demangling cache variable for type metadata for PgQuery_Node?);
    int v35 = v32(v30, 1, Node);
    uint64_t v8 = v55;
    if (v35 == 1)
    {
      uint64_t v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_15:
      outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
      goto LABEL_16;
    }
    uint64_t v37 = v56;
    outlined init with take of PgQuery_OidList(v30, v56, type metadata accessor for PgQuery_Node);
    uint64_t v38 = *(int *)(Node + 20);
    uint64_t v39 = *(void *)(v34 + v38);
    uint64_t v40 = *(void *)(v37 + v38);
    if (v39 != v40)
    {
      swift_retain();
      swift_retain();
      BOOL v41 = closure #1 in static PgQuery_Node.== infix(_:_:)(v39, v40);
      swift_release();
      swift_release();
      if (!v41)
      {
        outlined destroy of PgQuery_Alias(v56, type metadata accessor for PgQuery_Node);
        uint64_t v36 = &demangling cache variable for type metadata for PgQuery_Node?;
        goto LABEL_15;
      }
    }
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    uint64_t v43 = v56;
    uint64_t v42 = v57;
    char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
    outlined destroy of AnyValue?(v31, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v44) {
      goto LABEL_12;
    }
LABEL_17:
    swift_release();
    swift_release();
    char v48 = 0;
    return v48 & 1;
  }
  int v33 = v32(v30, 1, Node);
  uint64_t v8 = v55;
  if (v33 != 1)
  {
    uint64_t v36 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_16:
    outlined destroy of AnyValue?(v31, v36);
    outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_17;
  }
  outlined destroy of AnyValue?(v31, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_12:
  swift_release();
  swift_release();
  uint64_t v20 = v53;
  uint64_t v5 = v54;
  uint64_t v4 = v52;
LABEL_13:
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v45(v10, v20, v4);
  v45(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v47 = v8;
  char v48 = v46;
  int v49 = *(void (**)(char *, uint64_t))(v5 + 8);
  v49(v47, v4);
  v49(v10, v4);
  return v48 & 1;
}

uint64_t specialized static PgQuery_DropStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v21 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v12 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v13 = destructiveProjectEnumData for StorableValue(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  if (v13 != destructiveProjectEnumData for StorableValue(v11, v12)) {
    goto LABEL_15;
  }
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a2 + 24);
  if (*(unsigned char *)(a2 + 32) == 1)
  {
    if (v15)
    {
      if (v15 == 1)
      {
        if (v14 != 1) {
          goto LABEL_15;
        }
      }
      else if (v14 != 2)
      {
        goto LABEL_15;
      }
    }
    else if (v14)
    {
      goto LABEL_15;
    }
  }
  else if (v14 != v15)
  {
    goto LABEL_15;
  }
  if (*(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33)
    && *(unsigned __int8 *)(a1 + 34) == *(unsigned __int8 *)(a2 + 34))
  {
    Dropuint64_t Stmt = type metadata accessor for PgQuery_DropStmt(0);
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v19(v10, a1 + *(int *)(DropStmt + 36), v4);
    v19(v8, a2 + *(int *)(DropStmt + 36), v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v8, v4);
    v20(v10, v4);
    return v16 & 1;
  }
LABEL_15:
  char v16 = 0;
  return v16 & 1;
}

uint64_t specialized static PgQuery_RangeVar.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v45 = (char *)&v42 - v7;
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v49 = *(void *)(Alias - 8);
  MEMORY[0x1F4188790](Alias);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v42 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v42 - v21;
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (char v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)
      || (char v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)
        || (char v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)) {
          goto LABEL_30;
        }
        if (*(void *)(a1 + 56) == *(void *)(a2 + 56) && *(void *)(a1 + 64) == *(void *)(a2 + 64)
          || (char v23 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          char v44 = v10;
          uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
          outlined init with copy of PgQuery_Alias?(a1 + *(int *)(RangeVar + 44), (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Alias?);
          uint64_t v43 = RangeVar;
          outlined init with copy of PgQuery_Alias?(a2 + *(int *)(RangeVar + 44), (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Alias?);
          uint64_t v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
          outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Alias?);
          outlined init with copy of PgQuery_Alias?((uint64_t)v20, v25, &demangling cache variable for type metadata for PgQuery_Alias?);
          char v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
          if (v26((uint64_t)v13, 1, Alias) == 1)
          {
            outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Alias?);
            outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Alias?);
            if (v26(v25, 1, Alias) == 1)
            {
              outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Alias?);
LABEL_17:
              if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72))
              {
                uint64_t v27 = v43;
                uint64_t v28 = a1 + *(int *)(v43 + 40);
                uint64_t v30 = v47;
                uint64_t v29 = v48;
                uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
                unsigned int v32 = v45;
                v31(v45, v28, v48);
                uint64_t v33 = a2 + *(int *)(v27 + 40);
                uint64_t v34 = v46;
                v31(v46, v33, v29);
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
                int v35 = *(void (**)(char *, uint64_t))(v30 + 8);
                v35(v34, v29);
                v35(v32, v29);
                return v23 & 1;
              }
LABEL_30:
              char v23 = 0;
              return v23 & 1;
            }
          }
          else
          {
            outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for PgQuery_Alias?);
            if (v26(v25, 1, Alias) != 1)
            {
              uint64_t v38 = v25;
              uint64_t v39 = v44;
              outlined init with take of PgQuery_OidList(v38, (uint64_t)v44, type metadata accessor for PgQuery_Alias);
              if (*v17 == *v39 && v17[1] == v39[1] || (_stringCompareWithSmolCheck(_:_:expecting:)())
                && (specialized static Array<A>.== infix(_:_:)(v17[2], v39[2]) & 1) != 0)
              {
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
                outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_Alias);
                outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Alias?);
                outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Alias?);
                outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Alias);
                outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Alias?);
                if ((v40 & 1) == 0) {
                  goto LABEL_30;
                }
                goto LABEL_17;
              }
              outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_Alias);
              outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Alias?);
              outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Alias?);
              outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Alias);
              uint64_t v37 = (uint64_t)v13;
              uint64_t v36 = &demangling cache variable for type metadata for PgQuery_Alias?;
LABEL_29:
              outlined destroy of AnyValue?(v37, v36);
              goto LABEL_30;
            }
            outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Alias?);
            outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Alias?);
            outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Alias);
          }
          uint64_t v36 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
          uint64_t v37 = (uint64_t)v13;
          goto LABEL_29;
        }
      }
    }
  }
  return v23 & 1;
}

uint64_t specialized static PgQuery_CopyStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v112 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  int v113 = (char *)&v97 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v108 = *(void *)(Node - 8);
  uint64_t v109 = Node;
  uint64_t v10 = MEMORY[0x1F4188790](Node);
  uint64_t v101 = (uint64_t)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v105 = (uint64_t)&v97 - v12;
  uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v13 = MEMORY[0x1F4188790](v110);
  uint64_t v103 = (uint64_t)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v111 = (uint64_t)&v97 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v102 = (uint64_t)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v104 = (uint64_t)&v97 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v107 = (uint64_t)&v97 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v114 = (uint64_t)&v97 - v23;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v25 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v106 = (uint64_t)&v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v97 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v31 = MEMORY[0x1F4188790](v30 - 8);
  uint64_t v33 = (char *)&v97 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  int v35 = (char *)&v97 - v34;
  uint64_t CopyStmt = type metadata accessor for PgQuery_CopyStmt(0);
  uint64_t v37 = v5;
  uint64_t v38 = a1;
  uint64_t v39 = *(int *)(CopyStmt + 20);
  uint64_t v40 = *(void *)(a1 + v39);
  uint64_t v41 = *(void *)(a2 + v39);
  uint64_t v42 = a2;
  if (v40 == v41) {
    goto LABEL_40;
  }
  uint64_t v97 = v38;
  uint64_t v98 = a2;
  uint64_t v99 = v37;
  uint64_t v100 = v4;
  uint64_t v43 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v44 = (uint64_t)&v29[*(int *)(v27 + 48)];
  outlined init with copy of PgQuery_Alias?(v43, (uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v35, v44, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v45((uint64_t)v29, 1, RangeVar) == 1)
  {
    int v46 = v45(v44, 1, RangeVar);
    swift_retain();
    swift_retain();
    if (v46 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      goto LABEL_9;
    }
LABEL_7:
    outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
    uint64_t v47 = &demangling cache variable for type metadata for PgQuery_RangeVar?;
    uint64_t v48 = (uint64_t)v35;
LABEL_31:
    outlined destroy of AnyValue?(v48, v47);
    goto LABEL_32;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v29, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v45(v44, 1, RangeVar) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v33, type metadata accessor for PgQuery_RangeVar);
    goto LABEL_7;
  }
  uint64_t v49 = v106;
  outlined init with take of PgQuery_OidList(v44, v106, type metadata accessor for PgQuery_RangeVar);
  swift_retain();
  swift_retain();
  char v50 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v33, v49);
  outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of PgQuery_Alias((uint64_t)v33, type metadata accessor for PgQuery_RangeVar);
  outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?((uint64_t)v35, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((v50 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_9:
  uint64_t v51 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  uint64_t v52 = v114;
  outlined init with copy of PgQuery_Alias?(v41 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, v114, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v53 = v111;
  uint64_t v54 = v111 + *(int *)(v110 + 48);
  outlined init with copy of PgQuery_Alias?(v51, v111, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v52, v54, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v55 = v109;
  uint64_t v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48);
  if (v56(v53, 1, v109) != 1)
  {
    uint64_t v59 = v107;
    outlined init with copy of PgQuery_Alias?(v53, v107, &demangling cache variable for type metadata for PgQuery_Node?);
    int v60 = v56(v54, 1, v55);
    uint64_t v58 = v100;
    if (v60 == 1)
    {
      uint64_t v61 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v62 = v105;
      outlined init with take of PgQuery_OidList(v54, v105, type metadata accessor for PgQuery_Node);
      uint64_t v63 = *(int *)(v55 + 20);
      uint64_t v64 = *(void *)(v59 + v63);
      uint64_t v65 = *(void *)(v62 + v63);
      if (v64 == v65
        || (swift_retain(),
            swift_retain(),
            BOOL v66 = closure #1 in static PgQuery_Node.== infix(_:_:)(v64, v65),
            swift_release(),
            swift_release(),
            v66))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v67 = v107;
        char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v111, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v114, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v68 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_18;
      }
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
      uint64_t v61 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v53 = v111;
      uint64_t v59 = v107;
    }
    outlined destroy of PgQuery_Alias(v59, type metadata accessor for PgQuery_Node);
    goto LABEL_30;
  }
  int v57 = v56(v54, 1, v55);
  uint64_t v58 = v100;
  if (v57 != 1)
  {
    uint64_t v61 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_30:
    outlined destroy of AnyValue?(v53, v61);
    uint64_t v47 = &demangling cache variable for type metadata for PgQuery_Node?;
    uint64_t v48 = v114;
    goto LABEL_31;
  }
  outlined destroy of AnyValue?(v53, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v114, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_18:
  uint64_t v69 = *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist);
  uint64_t v70 = *(void *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v71 = specialized static Array<A>.== infix(_:_:)(v69, v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v71 & 1) == 0
    || *(unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom) != *(unsigned __int8 *)(v41 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom)
    || *(unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram) != *(unsigned __int8 *)(v41 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram)
    || (*(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename) != *(void *)(v41 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename)
     || *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename
                  + 8) != *(void *)(v41
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_32;
  }
  uint64_t v72 = *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  uint64_t v73 = *(void *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v74 = specialized static Array<A>.== infix(_:_:)(v72, v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v74 & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v75 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t v76 = v104;
  outlined init with copy of PgQuery_Alias?(v41+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v104, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v77 = v103 + *(int *)(v110 + 48);
  uint64_t v78 = v75;
  uint64_t v79 = v103;
  outlined init with copy of PgQuery_Alias?(v78, v103, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v76, v77, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v56(v79, 1, v55) == 1)
  {
    if (v56(v77, 1, v55) == 1)
    {
      outlined destroy of AnyValue?(v79, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v104, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_39:
      swift_release();
      swift_release();
      uint64_t v42 = v98;
      uint64_t v37 = v99;
      uint64_t v38 = v97;
      uint64_t v4 = v58;
LABEL_40:
      uint64_t v90 = v37;
      uint64_t v91 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
      uint64_t v92 = v113;
      uint64_t v93 = v42;
      v91(v113, v38, v4);
      uint64_t v94 = v112;
      v91(v112, v93, v4);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v80 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v95 = *(void (**)(char *, uint64_t))(v90 + 8);
      v95(v94, v4);
      v95(v92, v4);
      return v80 & 1;
    }
    uint64_t v82 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_44;
  }
  uint64_t v81 = v102;
  outlined init with copy of PgQuery_Alias?(v79, v102, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v56(v77, 1, v55) == 1)
  {
    uint64_t v82 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_43:
    outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_Node);
LABEL_44:
    outlined destroy of AnyValue?(v79, v82);
    uint64_t v47 = &demangling cache variable for type metadata for PgQuery_Node?;
    uint64_t v48 = v104;
    goto LABEL_31;
  }
  uint64_t v83 = v101;
  outlined init with take of PgQuery_OidList(v77, v101, type metadata accessor for PgQuery_Node);
  uint64_t v84 = *(int *)(v55 + 20);
  uint64_t v85 = *(void *)(v81 + v84);
  uint64_t v86 = *(void *)(v83 + v84);
  if (v85 != v86)
  {
    swift_retain();
    swift_retain();
    BOOL v87 = closure #1 in static PgQuery_Node.== infix(_:_:)(v85, v86);
    swift_release();
    swift_release();
    if (!v87)
    {
      outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_Node);
      uint64_t v82 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v81 = v102;
      uint64_t v79 = v103;
      goto LABEL_43;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v88 = v102;
  char v89 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v103, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v104, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v89) {
    goto LABEL_39;
  }
LABEL_32:
  swift_release();
  swift_release();
  char v80 = 0;
  return v80 & 1;
}

uint64_t specialized static PgQuery_CaseExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v121 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v105 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  uint64_t v12 = MEMORY[0x1F4188790](Node);
  uint64_t v111 = (uint64_t)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v115 = (uint64_t)&v105 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v119 = (uint64_t)&v105 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v113 = (uint64_t)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v117 = (uint64_t)&v105 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v105 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v112 = (uint64_t)&v105 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v114 = (uint64_t)&v105 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v116 = (uint64_t)&v105 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v118 = (uint64_t)&v105 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  int v122 = (char *)&v105 - v34;
  MEMORY[0x1F4188790](v33);
  uint64_t v36 = (char *)&v105 - v35;
  uint64_t CaseExpr = type metadata accessor for PgQuery_CaseExpr(0);
  uint64_t v38 = a1;
  uint64_t v39 = *(int *)(CaseExpr + 20);
  uint64_t v40 = *(void *)(a1 + v39);
  uint64_t v41 = a2;
  uint64_t v42 = *(void *)(a2 + v39);
  uint64_t v43 = v41;
  if (v40 == v42)
  {
LABEL_41:
    uint64_t v100 = v121;
    uint64_t v101 = *(void (**)(char *, uint64_t, uint64_t))(v121 + 16);
    uint64_t v102 = v43;
    v101(v9, v38, v4);
    v101(v7, v102, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v103 = *(void (**)(char *, uint64_t))(v100 + 8);
    v103(v7, v4);
    v103(v9, v4);
    return v68 & 1;
  }
  uint64_t v106 = v38;
  uint64_t v107 = v41;
  uint64_t v110 = v4;
  uint64_t v105 = v9;
  uint64_t v108 = v7;
  uint64_t v44 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v109 = v17;
  uint64_t v45 = (uint64_t)&v23[*(int *)(v17 + 48)];
  outlined init with copy of PgQuery_Alias?(v44, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v120 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v36, v45, &demangling cache variable for type metadata for PgQuery_Node?);
  int v46 = *(char **)(v11 + 48);
  uint64_t v47 = Node;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v46)(v23, 1, Node) == 1)
  {
    unsigned int v48 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v46)(v45, 1, Node);
    swift_retain();
    swift_retain();
    if (v48 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v120, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_11;
    }
    char v50 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_18:
    uint64_t v66 = (uint64_t)v120;
    outlined destroy of AnyValue?((uint64_t)v23, v50);
    uint64_t v67 = v66;
LABEL_19:
    outlined destroy of AnyValue?(v67, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_20;
  }
  uint64_t v49 = v122;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v122, &demangling cache variable for type metadata for PgQuery_Node?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v46)(v45, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    char v50 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_17:
    outlined destroy of PgQuery_Alias((uint64_t)v49, type metadata accessor for PgQuery_Node);
    goto LABEL_18;
  }
  uint64_t v51 = v46;
  uint64_t v52 = v119;
  outlined init with take of PgQuery_OidList(v45, v119, type metadata accessor for PgQuery_Node);
  uint64_t v53 = *(int *)(v47 + 20);
  uint64_t v54 = *(void *)&v49[v53];
  uint64_t v55 = *(void *)(v52 + v53);
  swift_retain();
  swift_retain();
  if (v54 != v55)
  {
    swift_retain();
    swift_retain();
    BOOL v56 = closure #1 in static PgQuery_Node.== infix(_:_:)(v54, v55);
    swift_release();
    swift_release();
    if (!v56)
    {
      outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
      char v50 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v49 = v122;
      goto LABEL_17;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  int v57 = v122;
  char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v57, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v120, &demangling cache variable for type metadata for PgQuery_Node?);
  int v46 = v51;
  if ((v58 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_11:
  if (*(_DWORD *)(v40
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casetype) != *(_DWORD *)(v42 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casetype)
    || *(_DWORD *)(v40
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casecollid) != *(_DWORD *)(v42 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casecollid))
  {
    goto LABEL_20;
  }
  uint64_t v59 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  int v122 = v46;
  uint64_t v60 = v118;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v118, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v61 = v109;
  uint64_t v62 = v117 + *(int *)(v109 + 48);
  uint64_t v63 = v59;
  uint64_t v64 = v117;
  outlined init with copy of PgQuery_Alias?(v63, v117, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v65 = v122;
  outlined init with copy of PgQuery_Alias?(v60, v62, &demangling cache variable for type metadata for PgQuery_Node?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v65)(v64, 1, v47) != 1)
  {
    uint64_t v69 = v116;
    outlined init with copy of PgQuery_Alias?(v64, v116, &demangling cache variable for type metadata for PgQuery_Node?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v65)(v62, 1, v47) == 1)
    {
      uint64_t v70 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v71 = v115;
      outlined init with take of PgQuery_OidList(v62, v115, type metadata accessor for PgQuery_Node);
      uint64_t v72 = *(int *)(v47 + 20);
      uint64_t v73 = *(void *)(v69 + v72);
      uint64_t v74 = *(void *)(v71 + v72);
      if (v73 == v74
        || (swift_retain(),
            swift_retain(),
            BOOL v75 = closure #1 in static PgQuery_Node.== infix(_:_:)(v73, v74),
            swift_release(),
            swift_release(),
            v75))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v76 = v115;
        char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v76, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v117, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v118, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v77 & 1) == 0) {
          goto LABEL_20;
        }
        goto LABEL_27;
      }
      outlined destroy of PgQuery_Alias(v115, type metadata accessor for PgQuery_Node);
      uint64_t v70 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v64 = v117;
    }
    outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_Node);
    goto LABEL_35;
  }
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v65)(v62, 1, v47) != 1)
  {
    uint64_t v70 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_35:
    outlined destroy of AnyValue?(v64, v70);
    uint64_t v67 = v118;
    goto LABEL_19;
  }
  outlined destroy of AnyValue?(v64, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v118, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_27:
  uint64_t v78 = *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v79 = *(void *)(v42
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v80 = specialized static Array<A>.== infix(_:_:)(v78, v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v80 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v81 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defresult;
  uint64_t v82 = v114;
  outlined init with copy of PgQuery_Alias?(v42+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defresult, v114, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v83 = *(int *)(v61 + 48);
  uint64_t v84 = v113;
  uint64_t v85 = v113 + v83;
  outlined init with copy of PgQuery_Alias?(v81, v113, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v82, v85, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v86 = v122;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v122)(v84, 1, v47) == 1)
  {
    int v87 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v86)(v85, 1, v47);
    uint64_t v7 = v108;
    if (v87 == 1)
    {
      outlined destroy of AnyValue?(v84, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v82, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v4 = v110;
      goto LABEL_40;
    }
    uint64_t v90 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_46;
  }
  uint64_t v88 = v112;
  outlined init with copy of PgQuery_Alias?(v84, v112, &demangling cache variable for type metadata for PgQuery_Node?);
  int v89 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v86)(v85, 1, v47);
  uint64_t v7 = v108;
  if (v89 == 1)
  {
    uint64_t v90 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_45:
    outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_Node);
LABEL_46:
    outlined destroy of AnyValue?(v84, v90);
    uint64_t v67 = v82;
    goto LABEL_19;
  }
  uint64_t v91 = v111;
  outlined init with take of PgQuery_OidList(v85, v111, type metadata accessor for PgQuery_Node);
  uint64_t v92 = *(int *)(v47 + 20);
  uint64_t v93 = *(void *)(v88 + v92);
  uint64_t v94 = *(void *)(v91 + v92);
  if (v93 != v94)
  {
    swift_retain();
    swift_retain();
    BOOL v95 = closure #1 in static PgQuery_Node.== infix(_:_:)(v93, v94);
    swift_release();
    swift_release();
    if (!v95)
    {
      outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_Node);
      uint64_t v90 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v82 = v114;
      uint64_t v88 = v112;
      goto LABEL_45;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v96 = v112;
  uint64_t v4 = v110;
  char v97 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v96, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v84, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v114, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v97)
  {
LABEL_40:
    int v98 = *(_DWORD *)(v40
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    int v99 = *(_DWORD *)(v42
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    uint64_t v9 = v105;
    uint64_t v38 = v106;
    uint64_t v43 = v107;
    if (v98 != v99)
    {
      char v68 = 0;
      return v68 & 1;
    }
    goto LABEL_41;
  }
LABEL_20:
  swift_release();
  swift_release();
  char v68 = 0;
  return v68 & 1;
}

uint64_t specialized static PgQuery_FuncCall.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v78 - v9;
  uint64_t WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  uint64_t v85 = *(void *)(WindowDef - 8);
  uint64_t v86 = WindowDef;
  MEMORY[0x1F4188790](WindowDef);
  uint64_t v82 = (uint64_t)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_WindowDef?, PgQuery_WindowDef?));
  MEMORY[0x1F4188790](v84);
  uint64_t v87 = (uint64_t)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WindowDef?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v83 = (uint64_t)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v88 = (uint64_t)&v78 - v17;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v91 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v89 = (uint64_t)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v20);
  uint64_t v92 = (uint64_t)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v90 = (uint64_t)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v93 = (uint64_t)&v78 - v25;
  uint64_t v26 = type metadata accessor for PgQuery_FuncCall(0);
  uint64_t v27 = a1;
  uint64_t v28 = *(int *)(v26 + 20);
  uint64_t v29 = *(void **)(a1 + v28);
  uint64_t v30 = *(void **)(a2 + v28);
  if (v29 == v30)
  {
LABEL_31:
    BOOL v75 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v75(v10, v27, v4);
    v75(v8, a2, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v76 = *(void (**)(char *, uint64_t))(v5 + 8);
    v76(v8, v4);
    v76(v10, v4);
    return v69 & 1;
  }
  uint64_t v78 = a2;
  uint64_t v79 = a1;
  uint64_t v80 = v5;
  uint64_t v81 = v4;
  uint64_t v31 = v29[2];
  uint64_t v32 = v30[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v33 = specialized static Array<A>.== infix(_:_:)(v31, v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v34 = v29[3];
  uint64_t v35 = v30[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v36 = specialized static Array<A>.== infix(_:_:)(v34, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v36 & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v37 = v29[4];
  uint64_t v38 = v30[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v39 = specialized static Array<A>.== infix(_:_:)(v37, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v39 & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v40 = (uint64_t)v29
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggFilter;
  uint64_t v41 = v93;
  outlined init with copy of PgQuery_Alias?((uint64_t)v30+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggFilter, v93, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v42 = v92;
  uint64_t v43 = v92 + *(int *)(v20 + 48);
  outlined init with copy of PgQuery_Alias?(v40, v92, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v44 = v41;
  uint64_t v45 = v42;
  outlined init with copy of PgQuery_Alias?(v44, v43, &demangling cache variable for type metadata for PgQuery_Node?);
  int v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
  if (v46(v42, 1, Node) != 1)
  {
    uint64_t v48 = v90;
    outlined init with copy of PgQuery_Alias?(v42, v90, &demangling cache variable for type metadata for PgQuery_Node?);
    int v49 = v46(v43, 1, Node);
    uint64_t v4 = v81;
    if (v49 == 1)
    {
      char v50 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v51 = v43;
      uint64_t v52 = v48;
      uint64_t v53 = v89;
      outlined init with take of PgQuery_OidList(v51, v89, type metadata accessor for PgQuery_Node);
      uint64_t v54 = *(int *)(Node + 20);
      uint64_t v55 = *(void *)(v52 + v54);
      uint64_t v56 = *(void *)(v53 + v54);
      if (v55 == v56
        || (swift_retain(),
            swift_retain(),
            BOOL v57 = closure #1 in static PgQuery_Node.== infix(_:_:)(v55, v56),
            swift_release(),
            swift_release(),
            v57))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v58 = v90;
        char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v58, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v45, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v59 & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_14;
      }
      outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_Node);
      char v50 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v48 = v90;
    }
    outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
LABEL_23:
    outlined destroy of AnyValue?(v45, v50);
    uint64_t v67 = &demangling cache variable for type metadata for PgQuery_Node?;
    uint64_t v68 = v93;
LABEL_24:
    outlined destroy of AnyValue?(v68, v67);
    goto LABEL_25;
  }
  int v47 = v46(v43, 1, Node);
  uint64_t v4 = v81;
  if (v47 != 1)
  {
    char v50 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_23;
  }
  outlined destroy of AnyValue?(v45, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_14:
  if (*((unsigned __int8 *)v29
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggWithinGroup) != *((unsigned __int8 *)v30 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggWithinGroup)
    || *((unsigned __int8 *)v29
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggStar) != *((unsigned __int8 *)v30 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggStar)
    || *((unsigned __int8 *)v29
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggDistinct) != *((unsigned __int8 *)v30 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggDistinct)
    || *((unsigned __int8 *)v29
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcVariadic) != *((unsigned __int8 *)v30 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcVariadic))
  {
    goto LABEL_25;
  }
  uint64_t v60 = (uint64_t)v29
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__over;
  uint64_t v61 = v88;
  outlined init with copy of PgQuery_Alias?((uint64_t)v30+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__over, v88, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  uint64_t v62 = v87;
  uint64_t v63 = v87 + *(int *)(v84 + 48);
  outlined init with copy of PgQuery_Alias?(v60, v87, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  outlined init with copy of PgQuery_Alias?(v61, v63, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  uint64_t v64 = v86;
  uint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  if (v65(v62, 1, v86) == 1)
  {
    int v66 = v65(v63, 1, v64);
    uint64_t v5 = v80;
    if (v66 == 1)
    {
      outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for PgQuery_WindowDef?);
      outlined destroy of AnyValue?(v88, &demangling cache variable for type metadata for PgQuery_WindowDef?);
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  outlined init with copy of PgQuery_Alias?(v62, v83, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  int v70 = v65(v63, 1, v64);
  uint64_t v5 = v80;
  if (v70 == 1)
  {
    outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_WindowDef);
LABEL_28:
    outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for (PgQuery_WindowDef?, PgQuery_WindowDef?));
    uint64_t v67 = &demangling cache variable for type metadata for PgQuery_WindowDef?;
    uint64_t v68 = v88;
    goto LABEL_24;
  }
  uint64_t v71 = v82;
  outlined init with take of PgQuery_OidList(v63, v82, type metadata accessor for PgQuery_WindowDef);
  uint64_t v72 = v83;
  LODWORD(v93) = specialized static PgQuery_WindowDef.== infix(_:_:)(v83, v71);
  outlined destroy of PgQuery_Alias(v71, type metadata accessor for PgQuery_WindowDef);
  outlined destroy of PgQuery_Alias(v72, type metadata accessor for PgQuery_WindowDef);
  outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  outlined destroy of AnyValue?(v88, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  if (v93)
  {
LABEL_30:
    int v73 = *(_DWORD *)((char *)v29
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    int v74 = *(_DWORD *)((char *)v30
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    a2 = v78;
    uint64_t v27 = v79;
    if (v73 != v74)
    {
      char v69 = 0;
      return v69 & 1;
    }
    goto LABEL_31;
  }
LABEL_25:
  swift_release();
  swift_release();
  char v69 = 0;
  return v69 & 1;
}

uint64_t specialized static PgQuery_BoolExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v56 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v61 = (uint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v62 = (uint64_t)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v56 - v19;
  uint64_t BoolExpr = type metadata accessor for PgQuery_BoolExpr(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(BoolExpr + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26)
  {
LABEL_28:
    uint64_t v51 = v22;
    uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    uint64_t v53 = v27;
    v52(v10, v23, v4);
    v52(v8, v53, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v54 = *(void (**)(char *, uint64_t))(v51 + 8);
    v54(v8, v4);
    v54(v10, v4);
    return v44 & 1;
  }
  uint64_t v57 = a2;
  uint64_t v58 = v23;
  uint64_t v56 = v10;
  uint64_t v59 = v22;
  uint64_t v60 = v4;
  uint64_t v28 = v25
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v26 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v33 = v26;
    uint64_t v34 = v62;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v62, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v31(v29, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v36 = v61;
      outlined init with take of PgQuery_OidList(v29, v61, type metadata accessor for PgQuery_Node);
      uint64_t v37 = *(int *)(Node + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v36 + v37);
      swift_retain();
      swift_retain();
      if (v38 == v39
        || (swift_retain(),
            swift_retain(),
            BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
            swift_release(),
            swift_release(),
            v40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v41 & 1) == 0) {
          goto LABEL_20;
        }
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v35 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_19:
    outlined destroy of AnyValue?((uint64_t)v15, v35);
    outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_20;
  }
  unsigned int v32 = v31(v29, 1, Node);
  swift_retain();
  uint64_t v33 = v26;
  swift_retain();
  if (v32 != 1)
  {
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_19;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  uint64_t v42 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop);
  uint64_t v43 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop);
  if (*(unsigned char *)(v33
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop
                + 8) == 1)
  {
    switch(v43)
    {
      case 1:
        if (v42 == 1) {
          goto LABEL_26;
        }
        goto LABEL_20;
      case 2:
        if (v42 == 2) {
          goto LABEL_26;
        }
        goto LABEL_20;
      case 3:
        if (v42 == 3) {
          goto LABEL_26;
        }
        goto LABEL_20;
      default:
        if (!v42) {
          goto LABEL_26;
        }
        goto LABEL_20;
    }
  }
  if (v42 == v43)
  {
LABEL_26:
    uint64_t v45 = *(void *)(v25
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
    uint64_t v46 = *(void *)(v33
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
    uint64_t v47 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v48 = specialized static Array<A>.== infix(_:_:)(v45, v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v48)
    {
      int v49 = *(_DWORD *)(v25
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      int v50 = *(_DWORD *)(v47
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      uint64_t v22 = v59;
      uint64_t v4 = v60;
      uint64_t v10 = v56;
      uint64_t v27 = v57;
      uint64_t v23 = v58;
      if (v49 != v50)
      {
        char v44 = 0;
        return v44 & 1;
      }
      goto LABEL_28;
    }
  }
LABEL_20:
  swift_release();
  swift_release();
  char v44 = 0;
  return v44 & 1;
}

uint64_t specialized static PgQuery_XmlExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v67 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v68 = (uint64_t)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v62 - v19;
  uint64_t XmlExpr = type metadata accessor for PgQuery_XmlExpr(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(XmlExpr + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26)
  {
LABEL_35:
    uint64_t v57 = v22;
    uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    uint64_t v59 = v27;
    v58(v10, v23, v4);
    v58(v8, v59, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v60 = *(void (**)(char *, uint64_t))(v57 + 8);
    v60(v8, v4);
    v60(v10, v4);
    return v54 & 1;
  }
  uint64_t v63 = a2;
  uint64_t v64 = v23;
  uint64_t v65 = v22;
  uint64_t v66 = v4;
  uint64_t v28 = v25 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v26 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v30((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v32 = v68;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v68, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v29, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v33 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v34 = v32;
      uint64_t v35 = (uint64_t)v20;
      uint64_t v36 = v67;
      outlined init with take of PgQuery_OidList(v29, v67, type metadata accessor for PgQuery_Node);
      uint64_t v37 = *(int *)(Node + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v36 + v37);
      swift_retain();
      swift_retain();
      if (v38 == v39
        || (swift_retain(),
            swift_retain(),
            BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
            swift_release(),
            swift_release(),
            v40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v41 = v68;
        char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v42 & 1) == 0) {
          goto LABEL_26;
        }
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v33 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v20 = (char *)v35;
      uint64_t v32 = v68;
    }
    outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_Node);
LABEL_25:
    outlined destroy of AnyValue?((uint64_t)v15, v33);
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_26;
  }
  unsigned int v31 = v30(v29, 1, Node);
  swift_retain();
  swift_retain();
  if (v31 != 1)
  {
    uint64_t v33 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_25;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if ((specialized == infix<A>(_:_:)(*(void *)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op), *(unsigned __int8 *)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op+ 8), *(void *)(v26+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op), *(unsigned __int8 *)(v26+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op+ 8)) & 1) == 0|| (*(void *)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name) != *(void *)(v26 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name)|| *(void *)(v25+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name+ 8) != *(void *)(v26+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name+ 8))&& (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_26;
  }
  uint64_t v43 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namedArgs);
  uint64_t v44 = *(void *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namedArgs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v45 = specialized static Array<A>.== infix(_:_:)(v43, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v46 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argNames);
  uint64_t v47 = *(void *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argNames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v48 = specialized static Array<A>.== infix(_:_:)(v46, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v48 & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v49 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v50 = *(void *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v51 = specialized static Array<A>.== infix(_:_:)(v49, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v52 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption);
  uint64_t v53 = *(void *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption);
  if (*(unsigned char *)(v26
                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption
                + 8) == 1)
  {
    uint64_t v4 = v66;
    if (v53)
    {
      if (v53 == 1)
      {
        if (v52 != 1) {
          goto LABEL_26;
        }
      }
      else if (v52 != 2)
      {
        goto LABEL_26;
      }
    }
    else if (v52)
    {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v4 = v66;
    if (v52 != v53) {
      goto LABEL_26;
    }
  }
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type) == *(_DWORD *)(v26 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type)
    && *(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod) == *(_DWORD *)(v26 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod))
  {
    int v55 = *(_DWORD *)(v25
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    int v56 = *(_DWORD *)(v26
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    uint64_t v23 = v64;
    uint64_t v22 = v65;
    uint64_t v27 = v63;
    if (v55 != v56)
    {
      char v54 = 0;
      return v54 & 1;
    }
    goto LABEL_35;
  }
LABEL_26:
  swift_release();
  swift_release();
  char v54 = 0;
  return v54 & 1;
}

uint64_t specialized static PgQuery_SubPlan.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v95 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v82 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  uint64_t v11 = MEMORY[0x1F4188790](Node);
  uint64_t v90 = (uint64_t)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v94 = (uint64_t)&v82 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v93 = (uint64_t)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v82 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v91 = (uint64_t)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v92 = (char *)&v82 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v96 = (uint64_t)&v82 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v82 - v26;
  uint64_t SubPlan = type metadata accessor for PgQuery_SubPlan(0);
  uint64_t v29 = a1;
  uint64_t v30 = *(int *)(SubPlan + 20);
  uint64_t v31 = *(void *)(a1 + v30);
  uint64_t v32 = *(void *)(a2 + v30);
  uint64_t v33 = a2;
  if (v31 == v32)
  {
LABEL_41:
    uint64_t v77 = v95;
    uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
    uint64_t v79 = v33;
    v78(v9, v29, v4);
    v78(v7, v79, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v80 = *(void (**)(char *, uint64_t))(v77 + 8);
    v80(v7, v4);
    v80(v9, v4);
    return v42 & 1;
  }
  uint64_t v86 = v29;
  uint64_t v87 = a2;
  uint64_t v84 = v7;
  uint64_t v85 = v9;
  uint64_t v89 = v4;
  uint64_t v34 = v31 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v32 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v88 = v14;
  uint64_t v35 = (uint64_t)&v18[*(int *)(v14 + 48)];
  outlined init with copy of PgQuery_Alias?(v34, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v35, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  uint64_t v37 = Node;
  uint64_t v38 = v32;
  if (v36((uint64_t)v18, 1, Node) == 1)
  {
    int v39 = v36(v35, 1, v37);
    swift_retain();
    swift_retain();
    if (v39 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  uint64_t v40 = v96;
  outlined init with copy of PgQuery_Alias?((uint64_t)v18, v96, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36(v35, 1, v37) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
LABEL_7:
    uint64_t v41 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_8:
    outlined destroy of AnyValue?((uint64_t)v18, v41);
    goto LABEL_9;
  }
  uint64_t v43 = v94;
  outlined init with take of PgQuery_OidList(v35, v94, type metadata accessor for PgQuery_Node);
  uint64_t v44 = *(int *)(v37 + 20);
  uint64_t v45 = *(void *)(v40 + v44);
  uint64_t v46 = *(void *)(v43 + v44);
  swift_retain();
  swift_retain();
  if (v45 != v46)
  {
    swift_retain();
    swift_retain();
    LODWORD(v83) = closure #1 in static PgQuery_Node.== infix(_:_:)(v45, v46);
    swift_release();
    swift_release();
    if ((v83 & 1) == 0)
    {
      outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias(v96, type metadata accessor for PgQuery_Node);
      uint64_t v41 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_8;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v83 = v38;
  uint64_t v47 = v96;
  char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
  uint64_t v49 = v47;
  uint64_t v38 = v83;
  outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v48 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  if ((specialized == infix<A>(_:_:)(*(void *)(v31+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType), *(unsigned __int8 *)(v31+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType+ 8), *(void *)(v38+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType), *(unsigned __int8 *)(v38+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType+ 8)) & 1) == 0)goto LABEL_10; {
  uint64_t v96 = v31;
  }
  uint64_t v50 = v31
      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr;
  uint64_t v27 = v92;
  outlined init with copy of PgQuery_Alias?(v38+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, (uint64_t)v92, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v51 = v93;
  uint64_t v52 = v93 + *(int *)(v88 + 48);
  outlined init with copy of PgQuery_Alias?(v50, v93, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v27, v52, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v36(v51, 1, v37) != 1)
  {
    uint64_t v54 = v37;
    uint64_t v55 = v91;
    outlined init with copy of PgQuery_Alias?(v51, v91, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v36(v52, 1, v54) == 1)
    {
      outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_Node);
      goto LABEL_20;
    }
    uint64_t v56 = v52;
    uint64_t v57 = v90;
    outlined init with take of PgQuery_OidList(v56, v90, type metadata accessor for PgQuery_Node);
    uint64_t v58 = *(int *)(v54 + 20);
    uint64_t v59 = *(void *)(v55 + v58);
    uint64_t v60 = *(void *)(v57 + v58);
    if (v59 == v60
      || (swift_retain(),
          swift_retain(),
          BOOL v61 = closure #1 in static PgQuery_Node.== infix(_:_:)(v59, v60),
          swift_release(),
          swift_release(),
          v61))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v92, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v53 = v96;
      if ((v62 & 1) == 0) {
        goto LABEL_10;
      }
      goto LABEL_25;
    }
    outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v55, type metadata accessor for PgQuery_Node);
    outlined destroy of AnyValue?(v93, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v27 = v92;
LABEL_9:
    outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_10;
  }
  if (v36(v52, 1, v37) != 1)
  {
LABEL_20:
    outlined destroy of AnyValue?(v51, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_9;
  }
  outlined destroy of AnyValue?(v51, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v27, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v53 = v96;
LABEL_25:
  uint64_t v63 = *(void *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramIds);
  uint64_t v64 = *(void *)(v38
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramIds);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v65 = specialized static Array<A>.== infix(_:_:)(v63, v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v65 & 1) != 0
    && *(_DWORD *)(v53
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planID) == *(_DWORD *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planID)
    && (*(void *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName) == *(void *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName)
     && *(void *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName
                  + 8) == *(void *)(v38
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName
                                    + 8)
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && *(_DWORD *)(v53
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColType) == *(_DWORD *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColType)
    && *(_DWORD *)(v53
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColTypmod) == *(_DWORD *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColTypmod)
    && *(_DWORD *)(v53
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColCollation) == *(_DWORD *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColCollation)
    && *(unsigned __int8 *)(v53
                          + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useHashTable) == *(unsigned __int8 *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useHashTable)
    && *(unsigned __int8 *)(v53
                          + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unknownEqFalse) == *(unsigned __int8 *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unknownEqFalse)
    && *(unsigned __int8 *)(v53
                          + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parallelSafe) == *(unsigned __int8 *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parallelSafe))
  {
    uint64_t v66 = *(void *)(v53
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setParam);
    uint64_t v67 = *(void *)(v38
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setParam);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v68 = specialized static Array<A>.== infix(_:_:)(v66, v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v68)
    {
      uint64_t v69 = *(void *)(v53
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parParam);
      uint64_t v70 = *(void *)(v38
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parParam);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v71 = specialized static Array<A>.== infix(_:_:)(v69, v70);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v71)
      {
        uint64_t v72 = *(void *)(v96
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
        uint64_t v73 = *(void *)(v38
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v74 = specialized static Array<A>.== infix(_:_:)(v72, v73);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v74 & 1) != 0
          && *(double *)(v96
                       + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startupCost) == *(double *)(v38 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startupCost))
        {
          double v75 = *(double *)(v96
                          + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__perCallCost);
          double v76 = *(double *)(v38
                          + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__perCallCost);
          swift_release();
          swift_release();
          uint64_t v4 = v89;
          uint64_t v7 = v84;
          uint64_t v9 = v85;
          uint64_t v29 = v86;
          uint64_t v33 = v87;
          if (v75 != v76)
          {
            char v42 = 0;
            return v42 & 1;
          }
          goto LABEL_41;
        }
      }
    }
  }
LABEL_10:
  swift_release();
  swift_release();
  char v42 = 0;
  return v42 & 1;
}

uint64_t specialized static PgQuery_SubLink.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v121 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v105 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  uint64_t v12 = MEMORY[0x1F4188790](Node);
  uint64_t v111 = (uint64_t)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v115 = (uint64_t)&v105 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v119 = (uint64_t)&v105 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v113 = (uint64_t)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v117 = (uint64_t)&v105 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v105 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v112 = (uint64_t)&v105 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v114 = (uint64_t)&v105 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v116 = (uint64_t)&v105 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v118 = (uint64_t)&v105 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  int v122 = (char *)&v105 - v34;
  MEMORY[0x1F4188790](v33);
  uint64_t v36 = (char *)&v105 - v35;
  uint64_t SubLink = type metadata accessor for PgQuery_SubLink(0);
  uint64_t v38 = a1;
  uint64_t v39 = *(int *)(SubLink + 20);
  uint64_t v40 = *(void *)(a1 + v39);
  uint64_t v41 = a2;
  uint64_t v42 = *(void *)(a2 + v39);
  uint64_t v43 = v41;
  if (v40 == v42)
  {
LABEL_41:
    uint64_t v100 = v121;
    uint64_t v101 = *(void (**)(char *, uint64_t, uint64_t))(v121 + 16);
    uint64_t v102 = v43;
    v101(v9, v38, v4);
    v101(v7, v102, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v103 = *(void (**)(char *, uint64_t))(v100 + 8);
    v103(v7, v4);
    v103(v9, v4);
    return v68 & 1;
  }
  uint64_t v106 = v38;
  uint64_t v107 = v41;
  uint64_t v110 = v4;
  uint64_t v105 = v9;
  uint64_t v108 = v7;
  uint64_t v44 = v40 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v42 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v109 = v17;
  uint64_t v45 = (uint64_t)&v23[*(int *)(v17 + 48)];
  outlined init with copy of PgQuery_Alias?(v44, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v120 = v36;
  outlined init with copy of PgQuery_Alias?((uint64_t)v36, v45, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v46 = *(char **)(v11 + 48);
  uint64_t v47 = Node;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v46)(v23, 1, Node) == 1)
  {
    unsigned int v48 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v46)(v45, 1, Node);
    swift_retain();
    swift_retain();
    if (v48 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v120, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_11;
    }
    uint64_t v50 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_18:
    uint64_t v66 = (uint64_t)v120;
    outlined destroy of AnyValue?((uint64_t)v23, v50);
    uint64_t v67 = v66;
LABEL_19:
    outlined destroy of AnyValue?(v67, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_20;
  }
  uint64_t v49 = v122;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v122, &demangling cache variable for type metadata for PgQuery_Node?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v46)(v45, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v50 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_17:
    outlined destroy of PgQuery_Alias((uint64_t)v49, type metadata accessor for PgQuery_Node);
    goto LABEL_18;
  }
  uint64_t v51 = v46;
  uint64_t v52 = v119;
  outlined init with take of PgQuery_OidList(v45, v119, type metadata accessor for PgQuery_Node);
  uint64_t v53 = *(int *)(v47 + 20);
  uint64_t v54 = *(void *)&v49[v53];
  uint64_t v55 = *(void *)(v52 + v53);
  swift_retain();
  swift_retain();
  if (v54 != v55)
  {
    swift_retain();
    swift_retain();
    BOOL v56 = closure #1 in static PgQuery_Node.== infix(_:_:)(v54, v55);
    swift_release();
    swift_release();
    if (!v56)
    {
      outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
      uint64_t v50 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v49 = v122;
      goto LABEL_17;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v57 = v122;
  char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v52, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v57, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v120, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v46 = v51;
  if ((v58 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_11:
  if ((specialized == infix<A>(_:_:)(*(void *)(v40+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType), *(unsigned __int8 *)(v40+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType+ 8), *(void *)(v42+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType), *(unsigned __int8 *)(v42+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType+ 8)) & 1) == 0|| *(_DWORD *)(v40+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkID) != *(_DWORD *)(v42 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkID))
  {
    goto LABEL_20;
  }
  uint64_t v59 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr;
  int v122 = v46;
  uint64_t v60 = v118;
  outlined init with copy of PgQuery_Alias?(v42+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, v118, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v61 = v109;
  uint64_t v62 = v117 + *(int *)(v109 + 48);
  uint64_t v63 = v59;
  uint64_t v64 = v117;
  outlined init with copy of PgQuery_Alias?(v63, v117, &demangling cache variable for type metadata for PgQuery_Node?);
  char v65 = v122;
  outlined init with copy of PgQuery_Alias?(v60, v62, &demangling cache variable for type metadata for PgQuery_Node?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v65)(v64, 1, v47) != 1)
  {
    uint64_t v69 = v116;
    outlined init with copy of PgQuery_Alias?(v64, v116, &demangling cache variable for type metadata for PgQuery_Node?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v65)(v62, 1, v47) == 1)
    {
      uint64_t v70 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v71 = v115;
      outlined init with take of PgQuery_OidList(v62, v115, type metadata accessor for PgQuery_Node);
      uint64_t v72 = *(int *)(v47 + 20);
      uint64_t v73 = *(void *)(v69 + v72);
      uint64_t v74 = *(void *)(v71 + v72);
      if (v73 == v74
        || (swift_retain(),
            swift_retain(),
            BOOL v75 = closure #1 in static PgQuery_Node.== infix(_:_:)(v73, v74),
            swift_release(),
            swift_release(),
            v75))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v76 = v115;
        char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v76, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v117, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v118, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v77 & 1) == 0) {
          goto LABEL_20;
        }
        goto LABEL_27;
      }
      outlined destroy of PgQuery_Alias(v115, type metadata accessor for PgQuery_Node);
      uint64_t v70 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v64 = v117;
    }
    outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_Node);
    goto LABEL_35;
  }
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v65)(v62, 1, v47) != 1)
  {
    uint64_t v70 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_35:
    outlined destroy of AnyValue?(v64, v70);
    uint64_t v67 = v118;
    goto LABEL_19;
  }
  outlined destroy of AnyValue?(v64, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v118, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_27:
  uint64_t v78 = *(void *)(v40
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__operName);
  uint64_t v79 = *(void *)(v42
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__operName);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v80 = specialized static Array<A>.== infix(_:_:)(v78, v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v80 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v81 = v40
      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subselect;
  uint64_t v82 = v114;
  outlined init with copy of PgQuery_Alias?(v42+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subselect, v114, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v83 = *(int *)(v61 + 48);
  uint64_t v84 = v113;
  uint64_t v85 = v113 + v83;
  outlined init with copy of PgQuery_Alias?(v81, v113, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v82, v85, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v86 = v122;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v122)(v84, 1, v47) == 1)
  {
    int v87 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v86)(v85, 1, v47);
    uint64_t v7 = v108;
    if (v87 == 1)
    {
      outlined destroy of AnyValue?(v84, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?(v82, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v4 = v110;
      goto LABEL_40;
    }
    uint64_t v90 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_46;
  }
  uint64_t v88 = v112;
  outlined init with copy of PgQuery_Alias?(v84, v112, &demangling cache variable for type metadata for PgQuery_Node?);
  int v89 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v86)(v85, 1, v47);
  uint64_t v7 = v108;
  if (v89 == 1)
  {
    uint64_t v90 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_45:
    outlined destroy of PgQuery_Alias(v88, type metadata accessor for PgQuery_Node);
LABEL_46:
    outlined destroy of AnyValue?(v84, v90);
    uint64_t v67 = v82;
    goto LABEL_19;
  }
  uint64_t v91 = v111;
  outlined init with take of PgQuery_OidList(v85, v111, type metadata accessor for PgQuery_Node);
  uint64_t v92 = *(int *)(v47 + 20);
  uint64_t v93 = *(void *)(v88 + v92);
  uint64_t v94 = *(void *)(v91 + v92);
  if (v93 != v94)
  {
    swift_retain();
    swift_retain();
    BOOL v95 = closure #1 in static PgQuery_Node.== infix(_:_:)(v93, v94);
    swift_release();
    swift_release();
    if (!v95)
    {
      outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_Node);
      uint64_t v90 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v82 = v114;
      uint64_t v88 = v112;
      goto LABEL_45;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v96 = v112;
  uint64_t v4 = v110;
  char v97 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v91, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v96, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v84, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v114, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v97)
  {
LABEL_40:
    int v98 = *(_DWORD *)(v40
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    int v99 = *(_DWORD *)(v42
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    swift_release();
    uint64_t v9 = v105;
    uint64_t v38 = v106;
    uint64_t v43 = v107;
    if (v98 != v99)
    {
      char v68 = 0;
      return v68 & 1;
    }
    goto LABEL_41;
  }
LABEL_20:
  swift_release();
  swift_release();
  char v68 = 0;
  return v68 & 1;
}

uint64_t specialized static PgQuery_RowExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v59 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v64 = (uint64_t)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v65 = (uint64_t)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v59 - v19;
  uint64_t RowExpr = type metadata accessor for PgQuery_RowExpr(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(RowExpr + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26)
  {
LABEL_30:
    uint64_t v54 = v22;
    uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    uint64_t v56 = v27;
    v55(v10, v23, v4);
    v55(v8, v56, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v57 = *(void (**)(char *, uint64_t))(v54 + 8);
    v57(v8, v4);
    v57(v10, v4);
    return v48 & 1;
  }
  uint64_t v60 = a2;
  uint64_t v61 = v23;
  uint64_t v62 = v22;
  uint64_t v63 = v4;
  uint64_t v28 = v25 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v26 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v30((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v32 = v65;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v65, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v30(v29, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v33 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v34 = v32;
      uint64_t v35 = (uint64_t)v20;
      uint64_t v36 = v64;
      outlined init with take of PgQuery_OidList(v29, v64, type metadata accessor for PgQuery_Node);
      uint64_t v37 = *(int *)(Node + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v36 + v37);
      swift_retain();
      swift_retain();
      if (v38 == v39
        || (swift_retain(),
            swift_retain(),
            BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
            swift_release(),
            swift_release(),
            v40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v41 = v65;
        char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v42 & 1) == 0) {
          goto LABEL_20;
        }
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v33 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v20 = (char *)v35;
      uint64_t v32 = v65;
    }
    outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_Node);
LABEL_19:
    outlined destroy of AnyValue?((uint64_t)v15, v33);
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_20;
  }
  unsigned int v31 = v30(v29, 1, Node);
  swift_retain();
  swift_retain();
  if (v31 != 1)
  {
    uint64_t v33 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_19;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  uint64_t v43 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v44 = *(void *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v45 = specialized static Array<A>.== infix(_:_:)(v43, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) != 0
    && *(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowTypeid) == *(_DWORD *)(v26 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowTypeid))
  {
    uint64_t v46 = *(void *)(v25
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat);
    uint64_t v47 = *(void *)(v26
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat);
    if (*(unsigned char *)(v26
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat
                  + 8) == 1)
    {
      switch(v47)
      {
        case 1:
          if (v46 == 1) {
            goto LABEL_28;
          }
          goto LABEL_20;
        case 2:
          if (v46 == 2) {
            goto LABEL_28;
          }
          goto LABEL_20;
        case 3:
          if (v46 == 3) {
            goto LABEL_28;
          }
          goto LABEL_20;
        default:
          if (!v46) {
            goto LABEL_28;
          }
          goto LABEL_20;
      }
    }
    if (v46 == v47)
    {
LABEL_28:
      uint64_t v49 = *(void *)(v25
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames);
      uint64_t v50 = *(void *)(v26
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v51 = specialized static Array<A>.== infix(_:_:)(v49, v50);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v51)
      {
        int v52 = *(_DWORD *)(v25
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        int v53 = *(_DWORD *)(v26
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        swift_release();
        swift_release();
        uint64_t v22 = v62;
        uint64_t v4 = v63;
        uint64_t v27 = v60;
        uint64_t v23 = v61;
        if (v52 != v53)
        {
          char v48 = 0;
          return v48 & 1;
        }
        goto LABEL_30;
      }
    }
  }
LABEL_20:
  swift_release();
  swift_release();
  char v48 = 0;
  return v48 & 1;
}

uint64_t specialized static PgQuery_MultiAssignRef.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4, void *a5, void *a6)
{
  uint64_t v27 = a6;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = *(int *)(a3(0) + 20);
  uint64_t v19 = *(void *)(a1 + v18);
  uint64_t v20 = *(void *)(a2 + v18);
  if (v19 == v20
    || (swift_retain(),
        swift_retain(),
        BOOL v21 = closure #1 in static PgQuery_NextValueExpr.== infix(_:_:)(v19, v20, a4, a5, v27),
        swift_release(),
        swift_release(),
        v21))
  {
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v22(v17, a1, v11);
    v22(v15, a2, v11);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v12 + 8);
    v24(v15, v11);
    v24(v17, v11);
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t specialized static PgQuery_RangeTblRef.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v18 - v11;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    uint64_t v13 = a3(0);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v14(v12, &a1[*(int *)(v13 + 20)], v6);
    v14(v10, &a2[*(int *)(v13 + 20)], v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v10, v6);
    v16(v12, v6);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static PgQuery_DefElem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v48 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v55 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v53 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v56 = (uint64_t)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v54 = (uint64_t)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v57 = (uint64_t)&v48 - v18;
  uint64_t DefElem = type metadata accessor for PgQuery_DefElem(0);
  uint64_t v20 = a1;
  uint64_t v21 = *(int *)(DefElem + 20);
  uint64_t v22 = *(void **)(a1 + v21);
  char v23 = *(void **)(a2 + v21);
  if (v22 == v23) {
    goto LABEL_27;
  }
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v50 = v10;
  BOOL v24 = v22[2] == v23[2] && v22[3] == v23[3];
  if (v24 || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v26 = v22[4] == v23[4] && v22[5] == v23[5];
    if (v26 || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v49 = v5;
      uint64_t v27 = (uint64_t)v22
          + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
      uint64_t v28 = v57;
      outlined init with copy of PgQuery_Alias?((uint64_t)v23+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v57, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v29 = v56;
      uint64_t v30 = v56 + *(int *)(v13 + 48);
      outlined init with copy of PgQuery_Alias?(v27, v56, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined init with copy of PgQuery_Alias?(v28, v30, &demangling cache variable for type metadata for PgQuery_Node?);
      unsigned int v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
      if (v31(v29, 1, Node) == 1)
      {
        int v32 = v31(v30, 1, Node);
        swift_retain();
        swift_retain();
        if (v32 == 1)
        {
          outlined destroy of AnyValue?(v29, &demangling cache variable for type metadata for PgQuery_Node?);
          outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_21:
          uint64_t v41 = *(void *)((char *)v22
                          + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction);
          uint64_t v42 = *(void *)((char *)v23
                          + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction);
          if (*((unsigned char *)v23
               + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction
               + 8) == 1)
          {
            uint64_t v5 = v49;
            switch(v42)
            {
              case 1:
                if (v41 != 1) {
                  goto LABEL_31;
                }
                goto LABEL_26;
              case 2:
                if (v41 != 2) {
                  goto LABEL_31;
                }
                goto LABEL_26;
              case 3:
                if (v41 != 3) {
                  goto LABEL_31;
                }
                goto LABEL_26;
              case 4:
                if (v41 != 4) {
                  goto LABEL_31;
                }
                goto LABEL_26;
              default:
                if (!v41) {
                  goto LABEL_26;
                }
                goto LABEL_31;
            }
          }
          uint64_t v5 = v49;
          if (v41 == v42)
          {
LABEL_26:
            int v43 = *(_DWORD *)((char *)v22
                            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
            int v44 = *(_DWORD *)((char *)v23
                            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
            swift_release();
            swift_release();
            uint64_t v10 = v50;
            uint64_t v20 = v51;
            a2 = v52;
            if (v43 == v44)
            {
LABEL_27:
              char v45 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
              v45(v10, v20, v4);
              v45(v8, a2, v4);
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
              char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v46 = *(void (**)(char *, uint64_t))(v5 + 8);
              v46(v8, v4);
              v46(v10, v4);
              return v25 & 1;
            }
LABEL_32:
            char v25 = 0;
            return v25 & 1;
          }
LABEL_31:
          swift_release();
          swift_release();
          goto LABEL_32;
        }
        uint64_t v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
      }
      else
      {
        uint64_t v33 = v54;
        outlined init with copy of PgQuery_Alias?(v29, v54, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v31(v30, 1, Node) == 1)
        {
          swift_retain();
          swift_retain();
          uint64_t v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        }
        else
        {
          uint64_t v35 = v53;
          outlined init with take of PgQuery_OidList(v30, v53, type metadata accessor for PgQuery_Node);
          uint64_t v36 = *(int *)(Node + 20);
          uint64_t v37 = *(void *)(v33 + v36);
          uint64_t v38 = *(void *)(v35 + v36);
          swift_retain();
          swift_retain();
          if (v37 == v38
            || (swift_retain(),
                swift_retain(),
                BOOL v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38),
                swift_release(),
                swift_release(),
                v39))
          {
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
            char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
            outlined destroy of AnyValue?(v29, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
            if ((v40 & 1) == 0) {
              goto LABEL_31;
            }
            goto LABEL_21;
          }
          outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
          uint64_t v34 = &demangling cache variable for type metadata for PgQuery_Node?;
        }
        outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
      }
      outlined destroy of AnyValue?(v29, v34);
      outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_31;
    }
  }
  return v25 & 1;
}

uint64_t specialized static PgQuery_SortBy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v58 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v63 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v64 = (uint64_t)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v58 - v19;
  uint64_t SortBy = type metadata accessor for PgQuery_SortBy(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(SortBy + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26)
  {
LABEL_41:
    uint64_t v53 = v22;
    uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    uint64_t v55 = v27;
    v54(v10, v23, v4);
    v54(v8, v55, v4);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v56 = *(void (**)(char *, uint64_t))(v53 + 8);
    v56(v8, v4);
    v56(v10, v4);
    return v46 & 1;
  }
  uint64_t v59 = a2;
  uint64_t v60 = v23;
  char v58 = v10;
  uint64_t v61 = v22;
  uint64_t v62 = v4;
  uint64_t v28 = v25 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v26 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  unsigned int v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v33 = v26;
    uint64_t v34 = v64;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v64, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v31(v29, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v36 = v63;
      outlined init with take of PgQuery_OidList(v29, v63, type metadata accessor for PgQuery_Node);
      uint64_t v37 = *(int *)(Node + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v36 + v37);
      swift_retain();
      swift_retain();
      if (v38 == v39
        || (swift_retain(),
            swift_retain(),
            BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
            swift_release(),
            swift_release(),
            v40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v41 & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_11;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v35 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_24:
    outlined destroy of AnyValue?((uint64_t)v15, v35);
    outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_25;
  }
  unsigned int v32 = v31(v29, 1, Node);
  swift_retain();
  uint64_t v33 = v26;
  swift_retain();
  if (v32 != 1)
  {
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_24;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  uint64_t v42 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir);
  uint64_t v43 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir);
  if (*(unsigned char *)(v33
                + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir
                + 8) == 1)
  {
    switch(v43)
    {
      case 1:
        if (v42 != 1) {
          goto LABEL_25;
        }
        goto LABEL_16;
      case 2:
        if (v42 != 2) {
          goto LABEL_25;
        }
        goto LABEL_16;
      case 3:
        if (v42 != 3) {
          goto LABEL_25;
        }
        goto LABEL_16;
      case 4:
        if (v42 != 4) {
          goto LABEL_25;
        }
        goto LABEL_16;
      default:
        if (!v42) {
          goto LABEL_16;
        }
        goto LABEL_25;
    }
  }
  if (v42 == v43)
  {
LABEL_16:
    uint64_t v44 = *(void *)(v25
                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls);
    uint64_t v45 = *(void *)(v33
                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls);
    if (*(unsigned char *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls
                  + 8) == 1)
    {
      switch(v45)
      {
        case 1:
          if (v44 == 1) {
            goto LABEL_39;
          }
          goto LABEL_25;
        case 2:
          if (v44 == 2) {
            goto LABEL_39;
          }
          goto LABEL_25;
        case 3:
          if (v44 == 3) {
            goto LABEL_39;
          }
          goto LABEL_25;
        default:
          if (!v44) {
            goto LABEL_39;
          }
          goto LABEL_25;
      }
    }
    if (v44 == v45)
    {
LABEL_39:
      uint64_t v47 = *(void *)(v25
                      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOp);
      uint64_t v48 = *(void *)(v33
                      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOp);
      uint64_t v49 = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v50 = specialized static Array<A>.== infix(_:_:)(v47, v48);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v50)
      {
        int v51 = *(_DWORD *)(v25
                        + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        int v52 = *(_DWORD *)(v49
                        + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        swift_release();
        swift_release();
        uint64_t v22 = v61;
        uint64_t v4 = v62;
        uint64_t v10 = v58;
        uint64_t v27 = v59;
        uint64_t v23 = v60;
        if (v51 != v52)
        {
          char v46 = 0;
          return v46 & 1;
        }
        goto LABEL_41;
      }
    }
  }
LABEL_25:
  swift_release();
  swift_release();
  char v46 = 0;
  return v46 & 1;
}

uint64_t specialized static PgQuery_OpExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v54 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v59 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v60 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v54 - v19;
  uint64_t OpExpr = type metadata accessor for PgQuery_OpExpr(0);
  uint64_t v22 = v5;
  uint64_t v23 = a1;
  uint64_t v24 = *(int *)(OpExpr + 20);
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a2 + v24);
  uint64_t v27 = a2;
  if (v25 == v26) {
    goto LABEL_19;
  }
  uint64_t v55 = a2;
  uint64_t v56 = v23;
  uint64_t v54 = v10;
  uint64_t v57 = v22;
  uint64_t v58 = v4;
  uint64_t v28 = v25 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  outlined init with copy of PgQuery_Alias?(v26 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = (uint64_t)v20;
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  unsigned int v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1, Node) != 1)
  {
    uint64_t v33 = v26;
    uint64_t v34 = v60;
    outlined init with copy of PgQuery_Alias?((uint64_t)v15, v60, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v31(v29, 1, Node) == 1)
    {
      swift_retain();
      swift_retain();
      uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v36 = v59;
      outlined init with take of PgQuery_OidList(v29, v59, type metadata accessor for PgQuery_Node);
      uint64_t v37 = *(int *)(Node + 20);
      uint64_t v38 = *(void *)(v34 + v37);
      uint64_t v39 = *(void *)(v36 + v37);
      swift_retain();
      swift_retain();
      if (v38 == v39
        || (swift_retain(),
            swift_retain(),
            BOOL v40 = closure #1 in static PgQuery_Node.== infix(_:_:)(v38, v39),
            swift_release(),
            swift_release(),
            v40))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v41) {
          goto LABEL_11;
        }
LABEL_23:
        swift_release();
        swift_release();
        goto LABEL_24;
      }
      outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
      uint64_t v35 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
LABEL_22:
    outlined destroy of AnyValue?((uint64_t)v15, v35);
    outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_23;
  }
  unsigned int v32 = v31(v29, 1, Node);
  swift_retain();
  uint64_t v33 = v26;
  swift_retain();
  if (v32 != 1)
  {
    uint64_t v35 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_22;
  }
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
    goto LABEL_23;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
    goto LABEL_23;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype))
    goto LABEL_23;
  if (*(unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) != *(unsigned __int8 *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset))
    goto LABEL_23;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid))
    goto LABEL_23;
  if (*(_DWORD *)(v25
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v33 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
    goto LABEL_23;
  uint64_t v42 = *(void *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v43 = *(void *)(v33
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v44 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v45 = specialized static Array<A>.== infix(_:_:)(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0) {
    goto LABEL_23;
  }
  int v46 = *(_DWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v47 = *(_DWORD *)(v44
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  uint64_t v22 = v57;
  uint64_t v4 = v58;
  uint64_t v10 = v54;
  uint64_t v27 = v55;
  uint64_t v23 = v56;
  if (v46 != v47)
  {
LABEL_24:
    char v51 = 0;
    return v51 & 1;
  }
LABEL_19:
  uint64_t v48 = v22;
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v50 = v27;
  v49(v10, v23, v4);
  v49(v8, v50, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v52 = *(void (**)(char *, uint64_t))(v48 + 8);
  v52(v8, v4);
  v52(v10, v4);
  return v51 & 1;
}

uint64_t specialized static PgQuery_Aggref.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v108 = a1;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v93 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  uint64_t v12 = MEMORY[0x1F4188790](Node);
  uint64_t v100 = (uint64_t)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v104 = (uint64_t)&v93 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v102 = (uint64_t)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v93 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v101 = (uint64_t)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v103 = (uint64_t)&v93 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v106 = (uint64_t)&v93 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v93 - v27;
  uint64_t v29 = *(int *)(type metadata accessor for PgQuery_Aggref(0) + 20);
  uint64_t v30 = *(void *)(v108 + v29);
  uint64_t v31 = *(void *)(a2 + v29);
  uint64_t v32 = a2;
  if (v30 == v31)
  {
LABEL_52:
    int v89 = *(void (**)(char *))(v4 + 16);
    uint64_t v90 = v32;
    v89(v9);
    ((void (*)(char *, uint64_t, uint64_t))v89)(v7, v90, v3);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v75 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v91 = *(void (**)(char *, uint64_t))(v4 + 8);
    v91(v7, v3);
    v91(v9, v3);
    return v75 & 1;
  }
  uint64_t v94 = a2;
  BOOL v95 = v7;
  uint64_t v96 = v9;
  uint64_t v97 = v4;
  uint64_t v98 = v3;
  uint64_t v33 = v30 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v34 = v31;
  uint64_t v35 = v30;
  outlined init with copy of PgQuery_Alias?(v31 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v99 = v15;
  uint64_t v36 = (uint64_t)&v19[*(int *)(v15 + 48)];
  outlined init with copy of PgQuery_Alias?(v33, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v105 = v28;
  outlined init with copy of PgQuery_Alias?((uint64_t)v28, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v38 = v37(v19, 1, Node);
  uint64_t v39 = Node;
  uint64_t v107 = v35;
  if (v38 == 1)
  {
    int v40 = v37((char *)v36, 1, Node);
    swift_retain();
    swift_retain();
    if (v40 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v105, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v41 = v34;
      uint64_t v42 = v99;
      goto LABEL_11;
    }
    uint64_t v44 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_27:
    uint64_t v74 = (uint64_t)v105;
    outlined destroy of AnyValue?((uint64_t)v19, v44);
    outlined destroy of AnyValue?(v74, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_28;
  }
  uint64_t v43 = v106;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v106, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v37((char *)v36, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v44 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_26:
    outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
    goto LABEL_27;
  }
  uint64_t v45 = v104;
  outlined init with take of PgQuery_OidList(v36, v104, type metadata accessor for PgQuery_Node);
  uint64_t v46 = *(int *)(Node + 20);
  uint64_t v47 = *(void *)(v43 + v46);
  uint64_t v48 = *(void *)(v45 + v46);
  swift_retain();
  swift_retain();
  if (v47 != v48)
  {
    swift_retain();
    swift_retain();
    BOOL v49 = closure #1 in static PgQuery_Node.== infix(_:_:)(v47, v48);
    swift_release();
    swift_release();
    if (!v49)
    {
      outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
      uint64_t v44 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_26;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v105, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v41 = v34;
  uint64_t v39 = Node;
  uint64_t v42 = v99;
  if ((v50 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_11:
  if (*(_DWORD *)(v107
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfnoid) != *(_DWORD *)(v41 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfnoid))
    goto LABEL_28;
  if (*(_DWORD *)(v107
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtype) != *(_DWORD *)(v41 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtype))
    goto LABEL_28;
  if (*(_DWORD *)(v107
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggcollid) != *(_DWORD *)(v41 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggcollid))
    goto LABEL_28;
  if (*(_DWORD *)(v107
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) != *(_DWORD *)(v41 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
    goto LABEL_28;
  if (*(_DWORD *)(v107
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtranstype) != *(_DWORD *)(v41 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtranstype))
    goto LABEL_28;
  uint64_t v51 = *(void *)(v107
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggargtypes);
  uint64_t v52 = *(void *)(v41
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggargtypes);
  uint64_t v53 = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v54 = specialized static Array<A>.== infix(_:_:)(v51, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v55 = *(void *)(v107
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdirectargs);
  uint64_t v56 = *(void *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdirectargs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v57 = specialized static Array<A>.== infix(_:_:)(v55, v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v57 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v58 = *(void *)(v107
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  uint64_t v59 = *(void *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v60 = specialized static Array<A>.== infix(_:_:)(v58, v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v60 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v61 = *(void *)(v107
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggorder);
  uint64_t v62 = *(void *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggorder);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v63 = specialized static Array<A>.== infix(_:_:)(v61, v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v63 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v64 = v39;
  uint64_t v65 = v107;
  uint64_t v66 = *(void *)(v107
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdistinct);
  uint64_t v67 = *(void *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdistinct);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v68 = specialized static Array<A>.== infix(_:_:)(v66, v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v68 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v69 = v65
      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter;
  uint64_t v70 = v103;
  outlined init with copy of PgQuery_Alias?(v53+ OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, v103, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v71 = v102;
  uint64_t v72 = v102 + *(int *)(v42 + 48);
  outlined init with copy of PgQuery_Alias?(v69, v102, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v70, v72, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v37((char *)v71, 1, v64) != 1)
  {
    outlined init with copy of PgQuery_Alias?(v71, v101, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v37((char *)v72, 1, v64) == 1)
    {
      uint64_t v76 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    }
    else
    {
      uint64_t v77 = v100;
      outlined init with take of PgQuery_OidList(v72, v100, type metadata accessor for PgQuery_Node);
      uint64_t v78 = *(int *)(v64 + 20);
      uint64_t v79 = *(void *)(v101 + v78);
      uint64_t v80 = *(void *)(v77 + v78);
      if (v79 == v80
        || (swift_retain(),
            swift_retain(),
            BOOL v81 = closure #1 in static PgQuery_Node.== infix(_:_:)(v79, v80),
            swift_release(),
            swift_release(),
            v81))
      {
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v82 = v100;
        uint64_t v83 = v101;
        char v84 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v82, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias(v83, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?(v102, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined destroy of AnyValue?(v103, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v73 = v107;
        if ((v84 & 1) == 0) {
          goto LABEL_28;
        }
        goto LABEL_36;
      }
      outlined destroy of PgQuery_Alias(v100, type metadata accessor for PgQuery_Node);
      uint64_t v76 = &demangling cache variable for type metadata for PgQuery_Node?;
    }
    outlined destroy of PgQuery_Alias(v101, type metadata accessor for PgQuery_Node);
    uint64_t v71 = v102;
LABEL_48:
    outlined destroy of AnyValue?(v71, v76);
    outlined destroy of AnyValue?(v103, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_28;
  }
  if (v37((char *)v72, 1, v64) != 1)
  {
    uint64_t v76 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_48;
  }
  outlined destroy of AnyValue?(v71, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v103, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v73 = v107;
LABEL_36:
  if (*(unsigned __int8 *)(v73
                          + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggstar) == *(unsigned __int8 *)(v53 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggstar)
    && *(unsigned __int8 *)(v73
                          + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggvariadic) == *(unsigned __int8 *)(v53 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggvariadic)
    && (*(void *)(v107
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind) == *(void *)(v53 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind)
     && *(void *)(v107
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind
                  + 8) == *(void *)(v53
                                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind
                                    + 8)
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && *(_DWORD *)(v107
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup) == *(_DWORD *)(v53 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup))
  {
    uint64_t v85 = *(void *)(v107
                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit);
    uint64_t v86 = *(void *)(v53
                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit);
    if (*(unsigned char *)(v53
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit
                  + 8) == 1)
    {
      switch(v86)
      {
        case 1:
          if (v85 == 1) {
            goto LABEL_51;
          }
          goto LABEL_28;
        case 2:
          if (v85 == 2) {
            goto LABEL_51;
          }
          goto LABEL_28;
        case 3:
          if (v85 == 3) {
            goto LABEL_51;
          }
          goto LABEL_28;
        default:
          if (v85) {
            goto LABEL_28;
          }
          goto LABEL_51;
      }
    }
    if (v85 == v86)
    {
LABEL_51:
      int v87 = *(_DWORD *)(v107
                      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      int v88 = *(_DWORD *)(v53
                      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      swift_release();
      uint64_t v4 = v97;
      uint64_t v3 = v98;
      uint64_t v7 = v95;
      uint64_t v9 = v96;
      uint64_t v32 = v94;
      if (v87 != v88)
      {
        char v75 = 0;
        return v75 & 1;
      }
      goto LABEL_52;
    }
  }
LABEL_28:
  swift_release();
  swift_release();
  char v75 = 0;
  return v75 & 1;
}

uint64_t specialized static PgQuery_A_Expr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v80 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void *)(Node - 8);
  uint64_t v92 = Node;
  uint64_t v93 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](Node);
  uint64_t v87 = (uint64_t)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v80 - v15;
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v17 = MEMORY[0x1F4188790](v91);
  uint64_t v90 = (uint64_t)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v80 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v88 = (uint64_t)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  int v89 = (char *)&v80 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v80 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v80 - v29;
  uint64_t A_Expr = type metadata accessor for PgQuery_A_Expr(0);
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v34 = *(int *)(A_Expr + 20);
  uint64_t v35 = *(void *)(a1 + v34);
  uint64_t v36 = *(void *)(v33 + v34);
  if (v35 == v36) {
    goto LABEL_60;
  }
  uint64_t v37 = *(void *)(v35 + 16);
  uint64_t v38 = *(void *)(v36 + 16);
  if (*(unsigned char *)(v36 + 24) == 1)
  {
    switch(v38)
    {
      case 1:
        if (v37 != 1) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 2:
        if (v37 != 2) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 3:
        if (v37 != 3) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 4:
        if (v37 != 4) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 5:
        if (v37 != 5) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 6:
        if (v37 != 6) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 7:
        if (v37 != 7) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 8:
        if (v37 != 8) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 9:
        if (v37 != 9) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 10:
        if (v37 != 10) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 11:
        if (v37 != 11) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 12:
        if (v37 != 12) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 13:
        if (v37 != 13) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 14:
        if (v37 != 14) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 15:
        if (v37 != 15) {
          goto LABEL_69;
        }
        goto LABEL_7;
      case 16:
        if (v37 != 16) {
          goto LABEL_69;
        }
        goto LABEL_7;
      default:
        if (!v37) {
          goto LABEL_7;
        }
        goto LABEL_69;
    }
  }
  if (v37 != v38) {
    goto LABEL_69;
  }
LABEL_7:
  uint64_t v82 = v32;
  uint64_t v83 = v33;
  char v84 = v10;
  uint64_t v85 = v8;
  uint64_t v86 = v5;
  uint64_t v39 = *(void *)(v35 + 32);
  uint64_t v40 = *(void *)(v36 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v41 = specialized static Array<A>.== infix(_:_:)(v39, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) == 0) {
    goto LABEL_68;
  }
  BOOL v81 = v16;
  uint64_t v42 = v35
      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lexpr;
  outlined init with copy of PgQuery_Alias?(v36 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lexpr, (uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v43 = (uint64_t)&v20[*(int *)(v91 + 48)];
  outlined init with copy of PgQuery_Alias?(v42, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v30, v43, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v44 = v92;
  uint64_t v46 = v93 + 48;
  uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48);
  unsigned int v47 = v45(v20, 1, v92);
  uint64_t v93 = v46;
  if (v47 == 1)
  {
    if (v45((char *)v43, 1, v44) == 1)
    {
      uint64_t v48 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v45;
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_17;
    }
    BOOL v49 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_63:
    uint64_t v77 = (uint64_t)v20;
    uint64_t v78 = v49;
LABEL_67:
    outlined destroy of AnyValue?(v77, v78);
    outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_68;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v45((char *)v43, 1, v44) == 1)
  {
    BOOL v49 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_62:
    outlined destroy of PgQuery_Alias((uint64_t)v28, type metadata accessor for PgQuery_Node);
    goto LABEL_63;
  }
  uint64_t v80 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v45;
  uint64_t v50 = (uint64_t)v81;
  outlined init with take of PgQuery_OidList(v43, (uint64_t)v81, type metadata accessor for PgQuery_Node);
  uint64_t v51 = *(int *)(v44 + 20);
  uint64_t v52 = *(void *)&v28[v51];
  uint64_t v53 = *(void *)(v50 + v51);
  if (v52 != v53)
  {
    swift_retain();
    swift_retain();
    BOOL v54 = closure #1 in static PgQuery_Node.== infix(_:_:)(v52, v53);
    swift_release();
    swift_release();
    if (!v54)
    {
      outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
      BOOL v49 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_62;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v28, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v48 = v80;
  if ((v55 & 1) == 0) {
    goto LABEL_68;
  }
LABEL_17:
  uint64_t v56 = v35
      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rexpr;
  uint64_t v30 = v89;
  outlined init with copy of PgQuery_Alias?(v36 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rexpr, (uint64_t)v89, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v57 = v90;
  uint64_t v58 = v90 + *(int *)(v91 + 48);
  outlined init with copy of PgQuery_Alias?(v56, v90, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v30, v58, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v59 = v92;
  if (v48(v57, 1, v92) == 1)
  {
    if (v48(v58, 1, v59) == 1)
    {
      outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_58;
    }
    uint64_t v61 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    goto LABEL_66;
  }
  uint64_t v60 = v88;
  outlined init with copy of PgQuery_Alias?(v57, v88, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v48(v58, 1, v59) == 1)
  {
    uint64_t v61 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_65:
    outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Node);
LABEL_66:
    uint64_t v77 = v57;
    uint64_t v78 = v61;
    goto LABEL_67;
  }
  uint64_t v62 = v87;
  outlined init with take of PgQuery_OidList(v58, v87, type metadata accessor for PgQuery_Node);
  uint64_t v63 = *(int *)(v59 + 20);
  uint64_t v64 = *(void *)(v60 + v63);
  uint64_t v65 = *(void *)(v62 + v63);
  if (v64 != v65)
  {
    swift_retain();
    swift_retain();
    BOOL v66 = closure #1 in static PgQuery_Node.== infix(_:_:)(v64, v65);
    swift_release();
    swift_release();
    if (!v66)
    {
      outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
      uint64_t v61 = &demangling cache variable for type metadata for PgQuery_Node?;
      uint64_t v60 = v88;
      goto LABEL_65;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v67 = v88;
  char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v30, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v68 & 1) == 0)
  {
LABEL_68:
    swift_release();
    swift_release();
LABEL_69:
    char v75 = 0;
    return v75 & 1;
  }
LABEL_58:
  int v69 = *(_DWORD *)(v35
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v70 = *(_DWORD *)(v36
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  BOOL v71 = v69 == v70;
  uint64_t v8 = v85;
  uint64_t v5 = v86;
  uint64_t v33 = v83;
  uint64_t v10 = v84;
  uint64_t v32 = v82;
  if (!v71) {
    goto LABEL_69;
  }
LABEL_60:
  uint64_t v72 = v10;
  uint64_t v73 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v74 = v33;
  v73(v72, v32, v4);
  v73(v8, v74, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v75 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v76 = *(void (**)(char *, uint64_t))(v5 + 8);
  v76(v8, v4);
  v76(v72, v4);
  return v75 & 1;
}

uint64_t specialized static PgQuery_Param.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v51 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v56 = (uint64_t)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v57 = (uint64_t)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v51 - v19;
  uint64_t Param = type metadata accessor for PgQuery_Param(0);
  uint64_t v22 = a1;
  uint64_t v23 = *(int *)(Param + 20);
  uint64_t v24 = *(void *)(a1 + v23);
  uint64_t v25 = *(void *)(a2 + v23);
  if (v24 == v25) {
    goto LABEL_22;
  }
  uint64_t v52 = v10;
  uint64_t v53 = v22;
  uint64_t v51 = a2;
  uint64_t v54 = v5;
  uint64_t v55 = v4;
  uint64_t v26 = v24 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v27 = v25;
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v28 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of PgQuery_Alias?(v26, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?((uint64_t)v20, v28, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v30 = Node;
  if (v29((uint64_t)v15, 1, Node) == 1)
  {
    int v31 = v29(v28, 1, v30);
    swift_retain();
    uint64_t v32 = v27;
    swift_retain();
    if (v31 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v4 = v55;
      goto LABEL_11;
    }
    uint64_t v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_25:
    outlined destroy of AnyValue?((uint64_t)v15, v34);
    outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_26;
  }
  uint64_t v32 = v27;
  uint64_t v33 = v57;
  outlined init with copy of PgQuery_Alias?((uint64_t)v15, v57, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v29(v28, 1, v30) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v34 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
LABEL_24:
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
    goto LABEL_25;
  }
  uint64_t v35 = v56;
  outlined init with take of PgQuery_OidList(v28, v56, type metadata accessor for PgQuery_Node);
  uint64_t v36 = *(int *)(v30 + 20);
  uint64_t v37 = *(void *)(v33 + v36);
  uint64_t v38 = *(void *)(v35 + v36);
  swift_retain();
  swift_retain();
  if (v37 != v38)
  {
    swift_retain();
    swift_retain();
    BOOL v39 = closure #1 in static PgQuery_Node.== infix(_:_:)(v37, v38);
    swift_release();
    swift_release();
    if (!v39)
    {
      outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
      uint64_t v34 = &demangling cache variable for type metadata for PgQuery_Node?;
      goto LABEL_24;
    }
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v4 = v55;
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?((uint64_t)v20, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v40 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_11:
  uint64_t v41 = *(void *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind);
  uint64_t v42 = *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind);
  if (*(unsigned char *)(v32
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind
                + 8) == 1)
  {
    switch(v42)
    {
      case 1:
        if (v41 != 1) {
          goto LABEL_26;
        }
        goto LABEL_16;
      case 2:
        if (v41 != 2) {
          goto LABEL_26;
        }
        goto LABEL_16;
      case 3:
        if (v41 != 3) {
          goto LABEL_26;
        }
        goto LABEL_16;
      case 4:
        if (v41 != 4) {
          goto LABEL_26;
        }
        goto LABEL_16;
      default:
        if (!v41) {
          goto LABEL_16;
        }
        goto LABEL_26;
    }
  }
  if (v41 != v42) {
    goto LABEL_26;
  }
LABEL_16:
  if (*(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramid)
    || *(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtype) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtype)
    || *(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtypmod) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtypmod)
    || *(_DWORD *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramcollid) != *(_DWORD *)(v32 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramcollid))
  {
LABEL_26:
    swift_release();
    swift_release();
LABEL_27:
    char v48 = 0;
    return v48 & 1;
  }
  int v43 = *(_DWORD *)(v24
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  int v44 = *(_DWORD *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  swift_release();
  BOOL v45 = v43 == v44;
  uint64_t v22 = v53;
  uint64_t v5 = v54;
  a2 = v51;
  uint64_t v10 = v52;
  if (!v45) {
    goto LABEL_27;
  }
LABEL_22:
  uint64_t v46 = v5;
  unsigned int v47 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v47(v10, v22, v4);
  v47(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  BOOL v49 = *(void (**)(char *, uint64_t))(v46 + 8);
  v49(v8, v4);
  v49(v10, v4);
  return v48 & 1;
}

uint64_t specialized static PgQuery_VariableShowStmt.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v19 - v11;
  BOOL v13 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v15 = a3(0);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v16(v12, &a1[*(int *)(v15 + 20)], v6);
    v16(v10, &a2[*(int *)(v15 + 20)], v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v10, v6);
    v17(v12, v6);
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_AlterCollationStmt.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v18 - v11;
  if (specialized static Array<A>.== infix(_:_:)(*a1, *a2))
  {
    uint64_t v13 = a3(0);
    char v14 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v14(v12, (char *)a1 + *(int *)(v13 + 20), v6);
    v14(v10, (char *)a2 + *(int *)(v13 + 20), v6);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v10, v6);
    v16(v12, v6);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v14 = (char *)&v23 - v13;
  uint64_t v15 = *(int *)(a3(0) + 20);
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(), swift_retain(), char v18 = a4(v16, v17), swift_release(), swift_release(), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v14, v8);
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v19 - v11;
  BOOL v13 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 2), *((void *)a2 + 2)))
    {
      uint64_t v15 = a3(0);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v16(v12, &a1[*(int *)(v15 + 24)], v6);
      v16(v10, &a2[*(int *)(v15 + 24)], v6);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
      v17(v10, v6);
      v17(v12, v6);
    }
    else
    {
      char v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t specialized static PgQuery_Node.OneOf_Node.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v1627 = a1;
  v1628 = (char *)a2;
  uint64_t OidList = type metadata accessor for PgQuery_OidList(0);
  MEMORY[0x1F4188790](OidList - 8);
  v1405 = (char *)&v1178 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t IntList = type metadata accessor for PgQuery_IntList(0);
  MEMORY[0x1F4188790](IntList - 8);
  v1404 = (char *)&v1178 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t List = type metadata accessor for PgQuery_List(0);
  MEMORY[0x1F4188790](List - 8);
  v1403 = (char *)&v1178 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Null = type metadata accessor for PgQuery_Null(0);
  MEMORY[0x1F4188790](Null - 8);
  uint64_t v1402 = (uint64_t)&v1178 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t BitString = type metadata accessor for PgQuery_BitString(0);
  MEMORY[0x1F4188790](BitString - 8);
  v1401 = (char *)&v1178 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t String = type metadata accessor for PgQuery_String(0);
  MEMORY[0x1F4188790](String - 8);
  v1400 = (char *)&v1178 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Float = type metadata accessor for PgQuery_Float(0);
  MEMORY[0x1F4188790](Float - 8);
  v1399 = (char *)&v1178 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Integer = type metadata accessor for PgQuery_Integer(0);
  MEMORY[0x1F4188790](Integer - 8);
  v1398 = (char *)&v1178 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for PgQuery_CallContext(0);
  MEMORY[0x1F4188790](v18 - 8);
  v1397 = (char *)&v1178 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t InlineCodeBlock = type metadata accessor for PgQuery_InlineCodeBlock(0);
  MEMORY[0x1F4188790](InlineCodeBlock - 8);
  v1396 = (char *)&v1178 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t VacuumRelation = type metadata accessor for PgQuery_VacuumRelation(0);
  MEMORY[0x1F4188790](VacuumRelation - 8);
  v1395 = (char *)&v1178 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
  MEMORY[0x1F4188790](PartitionCmd - 8);
  v1394 = (char *)&v1178 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionRangeDatum = type metadata accessor for PgQuery_PartitionRangeDatum(0);
  MEMORY[0x1F4188790](PartitionRangeDatum - 8);
  v1393 = (char *)&v1178 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  MEMORY[0x1F4188790](PartitionBoundSpec - 8);
  v1392 = (char *)&v1178 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  MEMORY[0x1F4188790](PartitionSpec - 8);
  v1391 = (char *)&v1178 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionElem = type metadata accessor for PgQuery_PartitionElem(0);
  MEMORY[0x1F4188790](PartitionElem - 8);
  v1390 = (char *)&v1178 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TriggerTransition = type metadata accessor for PgQuery_TriggerTransition(0);
  MEMORY[0x1F4188790](TriggerTransition - 8);
  v1389 = (char *)&v1178 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  MEMORY[0x1F4188790](RoleSpec - 8);
  v1388 = (char *)&v1178 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CommonTableExpr = type metadata accessor for PgQuery_CommonTableExpr(0);
  MEMORY[0x1F4188790](CommonTableExpr - 8);
  v1387 = (char *)&v1178 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for PgQuery_OnConflictClause(0);
  MEMORY[0x1F4188790](v40 - 8);
  v1386 = (char *)&v1178 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t InferClause = type metadata accessor for PgQuery_InferClause(0);
  MEMORY[0x1F4188790](InferClause - 8);
  v1385 = (char *)&v1178 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for PgQuery_WithClause(0);
  MEMORY[0x1F4188790](v44 - 8);
  v1384 = (char *)&v1178 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t XmlSerialize = type metadata accessor for PgQuery_XmlSerialize(0);
  MEMORY[0x1F4188790](XmlSerialize - 8);
  v1383 = (char *)&v1178 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RowMarkClause = type metadata accessor for PgQuery_RowMarkClause(0);
  MEMORY[0x1F4188790](RowMarkClause - 8);
  v1382 = (char *)&v1178 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t LockingClause = type metadata accessor for PgQuery_LockingClause(0);
  MEMORY[0x1F4188790](LockingClause - 8);
  v1381 = (char *)&v1178 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t FunctionParameter = type metadata accessor for PgQuery_FunctionParameter(0);
  MEMORY[0x1F4188790](FunctionParameter - 8);
  v1380 = (char *)&v1178 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TableLikeClause = type metadata accessor for PgQuery_TableLikeClause(0);
  MEMORY[0x1F4188790](TableLikeClause - 8);
  v1379 = (char *)&v1178 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t OpClassItem = type metadata accessor for PgQuery_CreateOpClassItem(0);
  MEMORY[0x1F4188790](OpClassItem - 8);
  v1378 = (char *)&v1178 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AccessPriv = type metadata accessor for PgQuery_AccessPriv(0);
  MEMORY[0x1F4188790](AccessPriv - 8);
  v1377 = (char *)&v1178 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  MEMORY[0x1F4188790](ObjectWithArgs - 8);
  v1376 = (char *)&v1178 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WindowClause = type metadata accessor for PgQuery_WindowClause(0);
  MEMORY[0x1F4188790](WindowClause - 8);
  v1375 = (char *)&v1178 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t GroupingSet = type metadata accessor for PgQuery_GroupingSet(0);
  MEMORY[0x1F4188790](GroupingSet - 8);
  v1374 = (char *)&v1178 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SortGroupClause = type metadata accessor for PgQuery_SortGroupClause(0);
  MEMORY[0x1F4188790](SortGroupClause - 8);
  v1373 = (char *)&v1178 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for PgQuery_WithCheckOption(0);
  MEMORY[0x1F4188790](v68 - 8);
  v1372 = (char *)&v1178 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  MEMORY[0x1F4188790](TableSampleClause - 8);
  v1371 = (char *)&v1178 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeTblFunction = type metadata accessor for PgQuery_RangeTblFunction(0);
  MEMORY[0x1F4188790](RangeTblFunction - 8);
  v1370 = (char *)&v1178 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeTblEntry = type metadata accessor for PgQuery_RangeTblEntry(0);
  MEMORY[0x1F4188790](RangeTblEntry - 8);
  v1369 = (char *)&v1178 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t DefElem = type metadata accessor for PgQuery_DefElem(0);
  MEMORY[0x1F4188790](DefElem - 8);
  v1368 = (char *)&v1178 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Constraint = type metadata accessor for PgQuery_Constraint(0);
  MEMORY[0x1F4188790](Constraint - 8);
  v1367 = (char *)&v1178 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t IndexElem = type metadata accessor for PgQuery_IndexElem(0);
  MEMORY[0x1F4188790](IndexElem - 8);
  v1366 = (char *)&v1178 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ColumnDef = type metadata accessor for PgQuery_ColumnDef(0);
  MEMORY[0x1F4188790](ColumnDef - 8);
  v1365 = (char *)&v1178 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  MEMORY[0x1F4188790](TypeName - 8);
  v1364 = (char *)&v1178 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeTableFuncCol = type metadata accessor for PgQuery_RangeTableFuncCol(0);
  MEMORY[0x1F4188790](RangeTableFuncCol - 8);
  v1363 = (char *)&v1178 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  Rangeuint64_t TableFunc = type metadata accessor for PgQuery_RangeTableFunc(0);
  MEMORY[0x1F4188790](RangeTableFunc - 8);
  v1362 = (char *)&v1178 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeTableSample = type metadata accessor for PgQuery_RangeTableSample(0);
  MEMORY[0x1F4188790](RangeTableSample - 8);
  v1361 = (char *)&v1178 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
  MEMORY[0x1F4188790](RangeFunction - 8);
  v1360 = (char *)&v1178 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeSubselect = type metadata accessor for PgQuery_RangeSubselect(0);
  MEMORY[0x1F4188790](RangeSubselect - 8);
  v1359 = (char *)&v1178 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  MEMORY[0x1F4188790](WindowDef - 8);
  v1358 = (char *)&v1178 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SortBy = type metadata accessor for PgQuery_SortBy(0);
  MEMORY[0x1F4188790](SortBy - 8);
  v1357 = (char *)&v1178 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  MEMORY[0x1F4188790](CollateClause - 8);
  v1356 = (char *)&v1178 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeCast = type metadata accessor for PgQuery_TypeCast(0);
  MEMORY[0x1F4188790](TypeCast - 8);
  v1355 = (char *)&v1178 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t MultiAssignRef = type metadata accessor for PgQuery_MultiAssignRef(0);
  MEMORY[0x1F4188790](MultiAssignRef - 8);
  v1354 = (char *)&v1178 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ResTarget = type metadata accessor for PgQuery_ResTarget(0);
  MEMORY[0x1F4188790](ResTarget - 8);
  v1353 = (char *)&v1178 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_uint64_t ArrayExpr = type metadata accessor for PgQuery_A_ArrayExpr(0);
  MEMORY[0x1F4188790](A_ArrayExpr - 8);
  v1352 = (char *)&v1178 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t A_Indirection = type metadata accessor for PgQuery_A_Indirection(0);
  MEMORY[0x1F4188790](A_Indirection - 8);
  v1351 = (char *)&v1178 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t A_Indices = type metadata accessor for PgQuery_A_Indices(0);
  MEMORY[0x1F4188790](A_Indices - 8);
  v1350 = (char *)&v1178 - ((v113 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t A_Star = type metadata accessor for PgQuery_A_Star(0);
  MEMORY[0x1F4188790](A_Star - 8);
  uint64_t v1349 = (uint64_t)&v1178 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for PgQuery_FuncCall(0);
  MEMORY[0x1F4188790](v116 - 8);
  v1348 = (char *)&v1178 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t A_Const = type metadata accessor for PgQuery_A_Const(0);
  MEMORY[0x1F4188790](A_Const - 8);
  v1347 = (char *)&v1178 - ((v119 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ParamRef = type metadata accessor for PgQuery_ParamRef(0);
  MEMORY[0x1F4188790](ParamRef - 8);
  v1346 = (char *)&v1178 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ColumnRef = type metadata accessor for PgQuery_ColumnRef(0);
  MEMORY[0x1F4188790](ColumnRef - 8);
  v1345 = (char *)&v1178 - ((v123 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t A_Expr = type metadata accessor for PgQuery_A_Expr(0);
  MEMORY[0x1F4188790](A_Expr - 8);
  v1344 = (char *)&v1178 - ((v125 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterStatsuint64_t Stmt = type metadata accessor for PgQuery_AlterStatsStmt(0);
  MEMORY[0x1F4188790](AlterStatsStmt - 8);
  v1343 = (char *)&v1178 - ((v127 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for PgQuery_CallStmt(0);
  MEMORY[0x1F4188790](v128 - 8);
  v1342 = (char *)&v1178 - ((v129 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterCollationuint64_t Stmt = type metadata accessor for PgQuery_AlterCollationStmt(0);
  MEMORY[0x1F4188790](AlterCollationStmt - 8);
  v1341 = (char *)&v1178 - ((v131 + 15) & 0xFFFFFFFFFFFFFFF0);
  Statsuint64_t Stmt = type metadata accessor for PgQuery_CreateStatsStmt(0);
  MEMORY[0x1F4188790](StatsStmt - 8);
  v1340 = (char *)&v1178 - ((v133 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropSubscriptionuint64_t Stmt = type metadata accessor for PgQuery_DropSubscriptionStmt(0);
  MEMORY[0x1F4188790](DropSubscriptionStmt - 8);
  v1339 = (char *)&v1178 - ((v135 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSubscriptionuint64_t Stmt = type metadata accessor for PgQuery_AlterSubscriptionStmt(0);
  MEMORY[0x1F4188790](AlterSubscriptionStmt - 8);
  v1338 = (char *)&v1178 - ((v137 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subscriptionuint64_t Stmt = type metadata accessor for PgQuery_CreateSubscriptionStmt(0);
  MEMORY[0x1F4188790](SubscriptionStmt - 8);
  v1337 = (char *)&v1178 - ((v139 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterPublicationuint64_t Stmt = type metadata accessor for PgQuery_AlterPublicationStmt(0);
  MEMORY[0x1F4188790](AlterPublicationStmt - 8);
  v1336 = (char *)&v1178 - ((v141 + 15) & 0xFFFFFFFFFFFFFFF0);
  Publicationuint64_t Stmt = type metadata accessor for PgQuery_CreatePublicationStmt(0);
  MEMORY[0x1F4188790](PublicationStmt - 8);
  v1335 = (char *)&v1178 - ((v143 + 15) & 0xFFFFFFFFFFFFFFF0);
  Amuint64_t Stmt = type metadata accessor for PgQuery_CreateAmStmt(0);
  MEMORY[0x1F4188790](AmStmt - 8);
  v1334 = (char *)&v1178 - ((v145 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transformuint64_t Stmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
  MEMORY[0x1F4188790](TransformStmt - 8);
  v1333 = (char *)&v1178 - ((v147 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterPolicyuint64_t Stmt = type metadata accessor for PgQuery_AlterPolicyStmt(0);
  MEMORY[0x1F4188790](AlterPolicyStmt - 8);
  v1332 = (char *)&v1178 - ((v149 + 15) & 0xFFFFFFFFFFFFFFF0);
  Policyuint64_t Stmt = type metadata accessor for PgQuery_CreatePolicyStmt(0);
  MEMORY[0x1F4188790](PolicyStmt - 8);
  v1331 = (char *)&v1178 - ((v151 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSystemuint64_t Stmt = type metadata accessor for PgQuery_AlterSystemStmt(0);
  MEMORY[0x1F4188790](AlterSystemStmt - 8);
  v1330 = (char *)&v1178 - ((v153 + 15) & 0xFFFFFFFFFFFFFFF0);
  ReplicaIdentityuint64_t Stmt = type metadata accessor for PgQuery_ReplicaIdentityStmt(0);
  MEMORY[0x1F4188790](ReplicaIdentityStmt - 8);
  v1329 = (char *)&v1178 - ((v155 + 15) & 0xFFFFFFFFFFFFFFF0);
  RefreshMatViewuint64_t Stmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
  MEMORY[0x1F4188790](RefreshMatViewStmt - 8);
  v1328 = (char *)&v1178 - ((v157 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterEventTriguint64_t Stmt = type metadata accessor for PgQuery_AlterEventTrigStmt(0);
  MEMORY[0x1F4188790](AlterEventTrigStmt - 8);
  v1327 = (char *)&v1178 - ((v159 + 15) & 0xFFFFFFFFFFFFFFF0);
  EventTriguint64_t Stmt = type metadata accessor for PgQuery_CreateEventTrigStmt(0);
  MEMORY[0x1F4188790](EventTrigStmt - 8);
  v1326 = (char *)&v1178 - ((v161 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterExtensionContentsuint64_t Stmt = type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
  MEMORY[0x1F4188790](AlterExtensionContentsStmt - 8);
  v1325 = (char *)&v1178 - ((v163 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterExtensionuint64_t Stmt = type metadata accessor for PgQuery_AlterExtensionStmt(0);
  MEMORY[0x1F4188790](AlterExtensionStmt - 8);
  v1324 = (char *)&v1178 - ((v165 + 15) & 0xFFFFFFFFFFFFFFF0);
  Extensionuint64_t Stmt = type metadata accessor for PgQuery_CreateExtensionStmt(0);
  MEMORY[0x1F4188790](ExtensionStmt - 8);
  v1323 = (char *)&v1178 - ((v167 + 15) & 0xFFFFFFFFFFFFFFF0);
  ImportForeignSchemauint64_t Stmt = type metadata accessor for PgQuery_ImportForeignSchemaStmt(0);
  MEMORY[0x1F4188790](ImportForeignSchemaStmt - 8);
  v1322 = (char *)&v1178 - ((v169 + 15) & 0xFFFFFFFFFFFFFFF0);
  ForeignTableuint64_t Stmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
  MEMORY[0x1F4188790](ForeignTableStmt - 8);
  v1321 = (char *)&v1178 - ((v171 + 15) & 0xFFFFFFFFFFFFFFF0);
  SecLabeluint64_t Stmt = type metadata accessor for PgQuery_SecLabelStmt(0);
  MEMORY[0x1F4188790](SecLabelStmt - 8);
  v1320 = (char *)&v1178 - ((v173 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTableMoveAlluint64_t Stmt = type metadata accessor for PgQuery_AlterTableMoveAllStmt(0);
  MEMORY[0x1F4188790](AlterTableMoveAllStmt - 8);
  v1319 = (char *)&v1178 - ((v175 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTableSpaceOptionsuint64_t Stmt = type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0);
  MEMORY[0x1F4188790](AlterTableSpaceOptionsStmt - 8);
  v1318 = (char *)&v1178 - ((v177 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropUserMappinguint64_t Stmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
  MEMORY[0x1F4188790](DropUserMappingStmt - 8);
  v1317 = (char *)&v1178 - ((v179 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterUserMappinguint64_t Stmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
  MEMORY[0x1F4188790](AlterUserMappingStmt - 8);
  v1316 = (char *)&v1178 - ((v181 + 15) & 0xFFFFFFFFFFFFFFF0);
  UserMappinguint64_t Stmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
  MEMORY[0x1F4188790](UserMappingStmt - 8);
  v1315 = (char *)&v1178 - ((v183 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterForeignServeruint64_t Stmt = type metadata accessor for PgQuery_AlterForeignServerStmt(0);
  MEMORY[0x1F4188790](AlterForeignServerStmt - 8);
  v1314 = (char *)&v1178 - ((v185 + 15) & 0xFFFFFFFFFFFFFFF0);
  ForeignServeruint64_t Stmt = type metadata accessor for PgQuery_CreateForeignServerStmt(0);
  MEMORY[0x1F4188790](ForeignServerStmt - 8);
  v1313 = (char *)&v1178 - ((v187 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterFdwuint64_t Stmt = type metadata accessor for PgQuery_AlterFdwStmt(0);
  MEMORY[0x1F4188790](AlterFdwStmt - 8);
  v1312 = (char *)&v1178 - ((v189 + 15) & 0xFFFFFFFFFFFFFFF0);
  Fdwuint64_t Stmt = type metadata accessor for PgQuery_CreateFdwStmt(0);
  MEMORY[0x1F4188790](FdwStmt - 8);
  v1311 = (char *)&v1178 - ((v191 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTSConfigurationuint64_t Stmt = type metadata accessor for PgQuery_AlterTSConfigurationStmt(0);
  MEMORY[0x1F4188790](AlterTSConfigurationStmt - 8);
  v1310 = (char *)&v1178 - ((v193 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTSDictionaryuint64_t Stmt = type metadata accessor for PgQuery_AlterTSDictionaryStmt(0);
  MEMORY[0x1F4188790](AlterTSDictionaryStmt - 8);
  v1309 = (char *)&v1178 - ((v195 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterEnumuint64_t Stmt = type metadata accessor for PgQuery_AlterEnumStmt(0);
  MEMORY[0x1F4188790](AlterEnumStmt - 8);
  v1308 = (char *)&v1178 - ((v197 + 15) & 0xFFFFFFFFFFFFFFF0);
  Rangeuint64_t Stmt = type metadata accessor for PgQuery_CreateRangeStmt(0);
  MEMORY[0x1F4188790](RangeStmt - 8);
  v1307 = (char *)&v1178 - ((v199 + 15) & 0xFFFFFFFFFFFFFFF0);
  Enumuint64_t Stmt = type metadata accessor for PgQuery_CreateEnumStmt(0);
  MEMORY[0x1F4188790](EnumStmt - 8);
  v1306 = (char *)&v1178 - ((v201 + 15) & 0xFFFFFFFFFFFFFFF0);
  CompositeTypeuint64_t Stmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
  MEMORY[0x1F4188790](CompositeTypeStmt - 8);
  v1305 = (char *)&v1178 - ((v203 + 15) & 0xFFFFFFFFFFFFFFF0);
  ReassignOwneduint64_t Stmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
  MEMORY[0x1F4188790](ReassignOwnedStmt - 8);
  v1304 = (char *)&v1178 - ((v205 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropOwneduint64_t Stmt = type metadata accessor for PgQuery_DropOwnedStmt(0);
  MEMORY[0x1F4188790](DropOwnedStmt - 8);
  v1303 = (char *)&v1178 - ((v207 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTypeuint64_t Stmt = type metadata accessor for PgQuery_AlterTypeStmt(0);
  MEMORY[0x1F4188790](AlterTypeStmt - 8);
  v1302 = (char *)&v1178 - ((v209 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterOperatoruint64_t Stmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
  MEMORY[0x1F4188790](AlterOperatorStmt - 8);
  v1301 = (char *)&v1178 - ((v211 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterOwneruint64_t Stmt = type metadata accessor for PgQuery_AlterOwnerStmt(0);
  MEMORY[0x1F4188790](AlterOwnerStmt - 8);
  v1300 = (char *)&v1178 - ((v213 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterObjectSchemauint64_t Stmt = type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
  MEMORY[0x1F4188790](AlterObjectSchemaStmt - 8);
  v1299 = (char *)&v1178 - ((v215 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterObjectDependsuint64_t Stmt = type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
  MEMORY[0x1F4188790](AlterObjectDependsStmt - 8);
  v1298 = (char *)&v1178 - ((v217 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropTableSpaceuint64_t Stmt = type metadata accessor for PgQuery_DropTableSpaceStmt(0);
  MEMORY[0x1F4188790](DropTableSpaceStmt - 8);
  v1297 = (char *)&v1178 - ((v219 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableSpaceuint64_t Stmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
  MEMORY[0x1F4188790](TableSpaceStmt - 8);
  v1296 = (char *)&v1178 - ((v221 + 15) & 0xFFFFFFFFFFFFFFF0);
  DeclareCursoruint64_t Stmt = type metadata accessor for PgQuery_DeclareCursorStmt(0);
  MEMORY[0x1F4188790](DeclareCursorStmt - 8);
  v1295 = (char *)&v1178 - ((v223 + 15) & 0xFFFFFFFFFFFFFFF0);
  Deallocateuint64_t Stmt = type metadata accessor for PgQuery_DeallocateStmt(0);
  MEMORY[0x1F4188790](DeallocateStmt - 8);
  v1294 = (char *)&v1178 - ((v225 + 15) & 0xFFFFFFFFFFFFFFF0);
  Executeuint64_t Stmt = type metadata accessor for PgQuery_ExecuteStmt(0);
  MEMORY[0x1F4188790](ExecuteStmt - 8);
  v1293 = (char *)&v1178 - ((v227 + 15) & 0xFFFFFFFFFFFFFFF0);
  Prepareuint64_t Stmt = type metadata accessor for PgQuery_PrepareStmt(0);
  MEMORY[0x1F4188790](PrepareStmt - 8);
  v1292 = (char *)&v1178 - ((v229 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterOpFamilyuint64_t Stmt = type metadata accessor for PgQuery_AlterOpFamilyStmt(0);
  MEMORY[0x1F4188790](AlterOpFamilyStmt - 8);
  v1291 = (char *)&v1178 - ((v231 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpFamilyuint64_t Stmt = type metadata accessor for PgQuery_CreateOpFamilyStmt(0);
  MEMORY[0x1F4188790](OpFamilyStmt - 8);
  v1290 = (char *)&v1178 - ((v233 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpClassuint64_t Stmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
  MEMORY[0x1F4188790](OpClassStmt - 8);
  v1289 = (char *)&v1178 - ((v235 + 15) & 0xFFFFFFFFFFFFFFF0);
  Castuint64_t Stmt = type metadata accessor for PgQuery_CreateCastStmt(0);
  MEMORY[0x1F4188790](CastStmt - 8);
  v1288 = (char *)&v1178 - ((v237 + 15) & 0xFFFFFFFFFFFFFFF0);
  Conversionuint64_t Stmt = type metadata accessor for PgQuery_CreateConversionStmt(0);
  MEMORY[0x1F4188790](ConversionStmt - 8);
  v1287 = (char *)&v1178 - ((v239 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterRoleSetuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleSetStmt(0);
  MEMORY[0x1F4188790](AlterRoleSetStmt - 8);
  v1286 = (char *)&v1178 - ((v241 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterDatabaseSetuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
  MEMORY[0x1F4188790](AlterDatabaseSetStmt - 8);
  v1285 = (char *)&v1178 - ((v243 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterDatabaseuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseStmt(0);
  MEMORY[0x1F4188790](AlterDatabaseStmt - 8);
  v1284 = (char *)&v1178 - ((v245 + 15) & 0xFFFFFFFFFFFFFFF0);
  Schemauint64_t Stmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
  MEMORY[0x1F4188790](SchemaStmt - 8);
  v1282 = (char *)&v1178 - ((v247 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v248 = type metadata accessor for PgQuery_CheckPointStmt(0);
  MEMORY[0x1F4188790](v248 - 8);
  uint64_t v1283 = (uint64_t)&v1178 - ((v249 + 15) & 0xFFFFFFFFFFFFFFF0);
  Reindexuint64_t Stmt = type metadata accessor for PgQuery_ReindexStmt(0);
  MEMORY[0x1F4188790](ReindexStmt - 8);
  v1281 = (char *)&v1178 - ((v251 + 15) & 0xFFFFFFFFFFFFFFF0);
  ConstraintsSetuint64_t Stmt = type metadata accessor for PgQuery_ConstraintsSetStmt(0);
  MEMORY[0x1F4188790](ConstraintsSetStmt - 8);
  v1280 = (char *)&v1178 - ((v253 + 15) & 0xFFFFFFFFFFFFFFF0);
  Lockuint64_t Stmt = type metadata accessor for PgQuery_LockStmt(0);
  MEMORY[0x1F4188790](LockStmt - 8);
  v1279 = (char *)&v1178 - ((v255 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropRoleuint64_t Stmt = type metadata accessor for PgQuery_DropRoleStmt(0);
  MEMORY[0x1F4188790](DropRoleStmt - 8);
  v1278 = (char *)&v1178 - ((v257 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterRoleuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
  MEMORY[0x1F4188790](AlterRoleStmt - 8);
  v1277 = (char *)&v1178 - ((v259 + 15) & 0xFFFFFFFFFFFFFFF0);
  Roleuint64_t Stmt = type metadata accessor for PgQuery_CreateRoleStmt(0);
  MEMORY[0x1F4188790](RoleStmt - 8);
  v1276 = (char *)&v1178 - ((v261 + 15) & 0xFFFFFFFFFFFFFFF0);
  PLanguint64_t Stmt = type metadata accessor for PgQuery_CreatePLangStmt(0);
  MEMORY[0x1F4188790](PLangStmt - 8);
  v1275 = (char *)&v1178 - ((v263 + 15) & 0xFFFFFFFFFFFFFFF0);
  Triguint64_t Stmt = type metadata accessor for PgQuery_CreateTrigStmt(0);
  MEMORY[0x1F4188790](TrigStmt - 8);
  v1274 = (char *)&v1178 - ((v265 + 15) & 0xFFFFFFFFFFFFFFF0);
  Discarduint64_t Stmt = type metadata accessor for PgQuery_DiscardStmt(0);
  MEMORY[0x1F4188790](DiscardStmt - 8);
  v1273 = (char *)&v1178 - ((v267 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableShowuint64_t Stmt = type metadata accessor for PgQuery_VariableShowStmt(0);
  MEMORY[0x1F4188790](VariableShowStmt - 8);
  v1272 = (char *)&v1178 - ((v269 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  MEMORY[0x1F4188790](VariableSetStmt - 8);
  v1271 = (char *)&v1178 - ((v271 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSequint64_t Stmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
  MEMORY[0x1F4188790](AlterSeqStmt - 8);
  v1270 = (char *)&v1178 - ((v273 + 15) & 0xFFFFFFFFFFFFFFF0);
  Sequint64_t Stmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
  MEMORY[0x1F4188790](SeqStmt - 8);
  v1269 = (char *)&v1178 - ((v275 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableAsuint64_t Stmt = type metadata accessor for PgQuery_CreateTableAsStmt(0);
  MEMORY[0x1F4188790](TableAsStmt - 8);
  v1268 = (char *)&v1178 - ((v277 + 15) & 0xFFFFFFFFFFFFFFF0);
  Explainuint64_t Stmt = type metadata accessor for PgQuery_ExplainStmt(0);
  MEMORY[0x1F4188790](ExplainStmt - 8);
  v1267 = (char *)&v1178 - ((v279 + 15) & 0xFFFFFFFFFFFFFFF0);
  Vacuumuint64_t Stmt = type metadata accessor for PgQuery_VacuumStmt(0);
  MEMORY[0x1F4188790](VacuumStmt - 8);
  v1266 = (char *)&v1178 - ((v281 + 15) & 0xFFFFFFFFFFFFFFF0);
  Dropdbuint64_t Stmt = type metadata accessor for PgQuery_DropdbStmt(0);
  MEMORY[0x1F4188790](DropdbStmt - 8);
  v1265 = (char *)&v1178 - ((v283 + 15) & 0xFFFFFFFFFFFFFFF0);
  Createdbuint64_t Stmt = type metadata accessor for PgQuery_CreatedbStmt(0);
  MEMORY[0x1F4188790](CreatedbStmt - 8);
  v1264 = (char *)&v1178 - ((v285 + 15) & 0xFFFFFFFFFFFFFFF0);
  Domainuint64_t Stmt = type metadata accessor for PgQuery_CreateDomainStmt(0);
  MEMORY[0x1F4188790](DomainStmt - 8);
  v1263 = (char *)&v1178 - ((v287 + 15) & 0xFFFFFFFFFFFFFFF0);
  Loaduint64_t Stmt = type metadata accessor for PgQuery_LoadStmt(0);
  MEMORY[0x1F4188790](LoadStmt - 8);
  v1262 = (char *)&v1178 - ((v289 + 15) & 0xFFFFFFFFFFFFFFF0);
  Viewuint64_t Stmt = type metadata accessor for PgQuery_ViewStmt(0);
  MEMORY[0x1F4188790](ViewStmt - 8);
  v1261 = (char *)&v1178 - ((v291 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transactionuint64_t Stmt = type metadata accessor for PgQuery_TransactionStmt(0);
  MEMORY[0x1F4188790](TransactionStmt - 8);
  v1260 = (char *)&v1178 - ((v293 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unlistenuint64_t Stmt = type metadata accessor for PgQuery_UnlistenStmt(0);
  MEMORY[0x1F4188790](UnlistenStmt - 8);
  v1259 = (char *)&v1178 - ((v295 + 15) & 0xFFFFFFFFFFFFFFF0);
  Listenuint64_t Stmt = type metadata accessor for PgQuery_ListenStmt(0);
  MEMORY[0x1F4188790](ListenStmt - 8);
  v1258 = (char *)&v1178 - ((v297 + 15) & 0xFFFFFFFFFFFFFFF0);
  Notifyuint64_t Stmt = type metadata accessor for PgQuery_NotifyStmt(0);
  MEMORY[0x1F4188790](NotifyStmt - 8);
  v1257 = (char *)&v1178 - ((v299 + 15) & 0xFFFFFFFFFFFFFFF0);
  Ruleuint64_t Stmt = type metadata accessor for PgQuery_RuleStmt(0);
  MEMORY[0x1F4188790](RuleStmt - 8);
  v1256 = (char *)&v1178 - ((v301 + 15) & 0xFFFFFFFFFFFFFFF0);
  Renameuint64_t Stmt = type metadata accessor for PgQuery_RenameStmt(0);
  MEMORY[0x1F4188790](RenameStmt - 8);
  v1255 = (char *)&v1178 - ((v303 + 15) & 0xFFFFFFFFFFFFFFF0);
  Douint64_t Stmt = type metadata accessor for PgQuery_DoStmt(0);
  MEMORY[0x1F4188790](DoStmt - 8);
  v1254 = (char *)&v1178 - ((v305 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterFunctionuint64_t Stmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
  MEMORY[0x1F4188790](AlterFunctionStmt - 8);
  v1253 = (char *)&v1178 - ((v307 + 15) & 0xFFFFFFFFFFFFFFF0);
  Functionuint64_t Stmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
  MEMORY[0x1F4188790](FunctionStmt - 8);
  v1252 = (char *)&v1178 - ((v309 + 15) & 0xFFFFFFFFFFFFFFF0);
  Indexuint64_t Stmt = type metadata accessor for PgQuery_IndexStmt(0);
  MEMORY[0x1F4188790](IndexStmt - 8);
  v1251 = (char *)&v1178 - ((v311 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Stmt = type metadata accessor for PgQuery_FetchStmt(0);
  MEMORY[0x1F4188790](Stmt - 8);
  v1250 = (char *)&v1178 - ((v313 + 15) & 0xFFFFFFFFFFFFFFF0);
  Commentuint64_t Stmt = type metadata accessor for PgQuery_CommentStmt(0);
  MEMORY[0x1F4188790](CommentStmt - 8);
  v1249 = (char *)&v1178 - ((v315 + 15) & 0xFFFFFFFFFFFFFFF0);
  Truncateuint64_t Stmt = type metadata accessor for PgQuery_TruncateStmt(0);
  MEMORY[0x1F4188790](TruncateStmt - 8);
  v1248 = (char *)&v1178 - ((v317 + 15) & 0xFFFFFFFFFFFFFFF0);
  Dropuint64_t Stmt = type metadata accessor for PgQuery_DropStmt(0);
  MEMORY[0x1F4188790](DropStmt - 8);
  v1247 = (char *)&v1178 - ((v319 + 15) & 0xFFFFFFFFFFFFFFF0);
  Defineuint64_t Stmt = type metadata accessor for PgQuery_DefineStmt(0);
  MEMORY[0x1F4188790](DefineStmt - 8);
  v1246 = (char *)&v1178 - ((v321 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v322 = type metadata accessor for PgQuery_CreateStmt(0);
  MEMORY[0x1F4188790](v322 - 8);
  v1245 = (char *)&v1178 - ((v323 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CopyStmt = type metadata accessor for PgQuery_CopyStmt(0);
  MEMORY[0x1F4188790](CopyStmt - 8);
  v1244 = (char *)&v1178 - ((v325 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
  MEMORY[0x1F4188790](ClusterStmt - 8);
  v1243 = (char *)&v1178 - ((v327 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClosePortaluint64_t Stmt = type metadata accessor for PgQuery_ClosePortalStmt(0);
  MEMORY[0x1F4188790](ClosePortalStmt - 8);
  v1242 = (char *)&v1178 - ((v329 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
  MEMORY[0x1F4188790](AlterDefaultPrivilegesStmt - 8);
  v1241 = (char *)&v1178 - ((v331 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
  MEMORY[0x1F4188790](GrantRoleStmt - 8);
  v1240 = (char *)&v1178 - ((v333 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  MEMORY[0x1F4188790](GrantStmt - 8);
  v1239 = (char *)&v1178 - ((v335 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SetOperationStmt = type metadata accessor for PgQuery_SetOperationStmt(0);
  MEMORY[0x1F4188790](SetOperationStmt - 8);
  v1238 = (char *)&v1178 - ((v337 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AlterDomainStmt = type metadata accessor for PgQuery_AlterDomainStmt(0);
  MEMORY[0x1F4188790](AlterDomainStmt - 8);
  v1237 = (char *)&v1178 - ((v339 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AlterTableCmd = type metadata accessor for PgQuery_AlterTableCmd(0);
  MEMORY[0x1F4188790](AlterTableCmd - 8);
  v1236 = (char *)&v1178 - ((v341 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
  MEMORY[0x1F4188790](AlterTableStmt - 8);
  v1235 = (char *)&v1178 - ((v343 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  MEMORY[0x1F4188790](SelectStmt - 8);
  v1234 = (char *)&v1178 - ((v345 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t UpdateStmt = type metadata accessor for PgQuery_UpdateStmt(0);
  MEMORY[0x1F4188790](UpdateStmt - 8);
  v1233 = (char *)&v1178 - ((v347 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v348 = type metadata accessor for PgQuery_DeleteStmt(0);
  MEMORY[0x1F4188790](v348 - 8);
  v1232 = (char *)&v1178 - ((v349 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t InsertStmt = type metadata accessor for PgQuery_InsertStmt(0);
  MEMORY[0x1F4188790](InsertStmt - 8);
  v1231 = (char *)&v1178 - ((v351 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Query = type metadata accessor for PgQuery_Query(0);
  MEMORY[0x1F4188790](Query - 8);
  v1230 = (char *)&v1178 - ((v353 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RawStmt = type metadata accessor for PgQuery_RawStmt(0);
  MEMORY[0x1F4188790](RawStmt - 8);
  v1229 = (char *)&v1178 - ((v355 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  MEMORY[0x1F4188790](IntoClause - 8);
  v1228 = (char *)&v1178 - ((v357 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v358 = type metadata accessor for PgQuery_OnConflictExpr(0);
  MEMORY[0x1F4188790](v358 - 8);
  v1227 = (char *)&v1178 - ((v359 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v360 = type metadata accessor for PgQuery_FromExpr(0);
  MEMORY[0x1F4188790](v360 - 8);
  v1226 = (char *)&v1178 - ((v361 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t JoinExpr = type metadata accessor for PgQuery_JoinExpr(0);
  MEMORY[0x1F4188790](JoinExpr - 8);
  v1225 = (char *)&v1178 - ((v363 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeTblRef = type metadata accessor for PgQuery_RangeTblRef(0);
  MEMORY[0x1F4188790](RangeTblRef - 8);
  v1224 = (char *)&v1178 - ((v365 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TargetEntry = type metadata accessor for PgQuery_TargetEntry(0);
  MEMORY[0x1F4188790](TargetEntry - 8);
  v1223 = (char *)&v1178 - ((v367 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t InferenceElem = type metadata accessor for PgQuery_InferenceElem(0);
  MEMORY[0x1F4188790](InferenceElem - 8);
  v1222 = (char *)&v1178 - ((v369 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t NextValueExpr = type metadata accessor for PgQuery_NextValueExpr(0);
  MEMORY[0x1F4188790](NextValueExpr - 8);
  v1221 = (char *)&v1178 - ((v371 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CurrentOfExpr = type metadata accessor for PgQuery_CurrentOfExpr(0);
  MEMORY[0x1F4188790](CurrentOfExpr - 8);
  v1220 = (char *)&v1178 - ((v373 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SetToDefault = type metadata accessor for PgQuery_SetToDefault(0);
  MEMORY[0x1F4188790](SetToDefault - 8);
  v1219 = (char *)&v1178 - ((v375 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CoerceToDomainValue = type metadata accessor for PgQuery_CoerceToDomainValue(0);
  MEMORY[0x1F4188790](CoerceToDomainValue - 8);
  v1218 = (char *)&v1178 - ((v377 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CoerceToDomain = type metadata accessor for PgQuery_CoerceToDomain(0);
  MEMORY[0x1F4188790](CoerceToDomain - 8);
  v1217 = (char *)&v1178 - ((v379 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t BooleanTest = type metadata accessor for PgQuery_BooleanTest(0);
  MEMORY[0x1F4188790](BooleanTest - 8);
  v1216 = (char *)&v1178 - ((v381 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t NullTest = type metadata accessor for PgQuery_NullTest(0);
  MEMORY[0x1F4188790](NullTest - 8);
  v1215 = (char *)&v1178 - ((v383 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t XmlExpr = type metadata accessor for PgQuery_XmlExpr(0);
  MEMORY[0x1F4188790](XmlExpr - 8);
  v1214 = (char *)&v1178 - ((v385 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SQLValueFunction = type metadata accessor for PgQuery_SQLValueFunction(0);
  MEMORY[0x1F4188790](SQLValueFunction - 8);
  v1213 = (char *)&v1178 - ((v387 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t MinMaxExpr = type metadata accessor for PgQuery_MinMaxExpr(0);
  MEMORY[0x1F4188790](MinMaxExpr - 8);
  v1212 = (char *)&v1178 - ((v389 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CoalesceExpr = type metadata accessor for PgQuery_CoalesceExpr(0);
  MEMORY[0x1F4188790](CoalesceExpr - 8);
  v1211 = (char *)&v1178 - ((v391 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RowCompareExpr = type metadata accessor for PgQuery_RowCompareExpr(0);
  MEMORY[0x1F4188790](RowCompareExpr - 8);
  v1210 = (char *)&v1178 - ((v393 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RowExpr = type metadata accessor for PgQuery_RowExpr(0);
  MEMORY[0x1F4188790](RowExpr - 8);
  v1209 = (char *)&v1178 - ((v395 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ArrayExpr = type metadata accessor for PgQuery_ArrayExpr(0);
  MEMORY[0x1F4188790](ArrayExpr - 8);
  v1208 = (char *)&v1178 - ((v397 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CaseTestExpr = type metadata accessor for PgQuery_CaseTestExpr(0);
  MEMORY[0x1F4188790](CaseTestExpr - 8);
  v1207 = (char *)&v1178 - ((v399 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CaseWhen = type metadata accessor for PgQuery_CaseWhen(0);
  MEMORY[0x1F4188790](CaseWhen - 8);
  v1206 = (char *)&v1178 - ((v401 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CaseExpr = type metadata accessor for PgQuery_CaseExpr(0);
  MEMORY[0x1F4188790](CaseExpr - 8);
  v1205 = (char *)&v1178 - ((v403 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CollateExpr = type metadata accessor for PgQuery_CollateExpr(0);
  MEMORY[0x1F4188790](CollateExpr - 8);
  v1204 = (char *)&v1178 - ((v405 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ConvertRowtypeExpr = type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
  MEMORY[0x1F4188790](ConvertRowtypeExpr - 8);
  v1203 = (char *)&v1178 - ((v407 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ArrayCoerceExpr = type metadata accessor for PgQuery_ArrayCoerceExpr(0);
  MEMORY[0x1F4188790](ArrayCoerceExpr - 8);
  v1202 = (char *)&v1178 - ((v409 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CoerceViaIO = type metadata accessor for PgQuery_CoerceViaIO(0);
  MEMORY[0x1F4188790](CoerceViaIO - 8);
  v1201 = (char *)&v1178 - ((v411 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RelabelType = type metadata accessor for PgQuery_RelabelType(0);
  MEMORY[0x1F4188790](RelabelType - 8);
  v1200 = (char *)&v1178 - ((v413 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t FieldStore = type metadata accessor for PgQuery_FieldStore(0);
  MEMORY[0x1F4188790](FieldStore - 8);
  v1199 = (char *)&v1178 - ((v415 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t FieldSelect = type metadata accessor for PgQuery_FieldSelect(0);
  MEMORY[0x1F4188790](FieldSelect - 8);
  v1198 = (char *)&v1178 - ((v417 + 15) & 0xFFFFFFFFFFFFFFF0);
  Alternativeuint64_t SubPlan = type metadata accessor for PgQuery_AlternativeSubPlan(0);
  MEMORY[0x1F4188790](AlternativeSubPlan - 8);
  v1197 = (char *)&v1178 - ((v419 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SubPlan = type metadata accessor for PgQuery_SubPlan(0);
  MEMORY[0x1F4188790](SubPlan - 8);
  v1196 = (char *)&v1178 - ((v421 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SubLink = type metadata accessor for PgQuery_SubLink(0);
  MEMORY[0x1F4188790](SubLink - 8);
  v1195 = (char *)&v1178 - ((v423 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t BoolExpr = type metadata accessor for PgQuery_BoolExpr(0);
  MEMORY[0x1F4188790](BoolExpr - 8);
  v1194 = (char *)&v1178 - ((v425 + 15) & 0xFFFFFFFFFFFFFFF0);
  ScalarArrayuint64_t OpExpr = type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
  MEMORY[0x1F4188790](ScalarArrayOpExpr - 8);
  v1193 = (char *)&v1178 - ((v427 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t NullIfExpr = type metadata accessor for PgQuery_NullIfExpr(0);
  MEMORY[0x1F4188790](NullIfExpr - 8);
  v1192 = (char *)&v1178 - ((v429 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t DistinctExpr = type metadata accessor for PgQuery_DistinctExpr(0);
  MEMORY[0x1F4188790](DistinctExpr - 8);
  v1191 = (char *)&v1178 - ((v431 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t OpExpr = type metadata accessor for PgQuery_OpExpr(0);
  MEMORY[0x1F4188790](OpExpr - 8);
  v1190 = (char *)&v1178 - ((v433 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t NamedArgExpr = type metadata accessor for PgQuery_NamedArgExpr(0);
  MEMORY[0x1F4188790](NamedArgExpr - 8);
  v1189 = (char *)&v1178 - ((v435 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t FuncExpr = type metadata accessor for PgQuery_FuncExpr(0);
  MEMORY[0x1F4188790](FuncExpr - 8);
  v1188 = (char *)&v1178 - ((v437 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SubscriptingRef = type metadata accessor for PgQuery_SubscriptingRef(0);
  MEMORY[0x1F4188790](SubscriptingRef - 8);
  v1187 = (char *)&v1178 - ((v439 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WindowFunc = type metadata accessor for PgQuery_WindowFunc(0);
  MEMORY[0x1F4188790](WindowFunc - 8);
  v1186 = (char *)&v1178 - ((v441 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t GroupingFunc = type metadata accessor for PgQuery_GroupingFunc(0);
  MEMORY[0x1F4188790](GroupingFunc - 8);
  uint64_t v1185 = (uint64_t)&v1178 - ((v443 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Aggref = type metadata accessor for PgQuery_Aggref(0);
  MEMORY[0x1F4188790](Aggref - 8);
  v1184 = (char *)&v1178 - ((v445 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Param = type metadata accessor for PgQuery_Param(0);
  MEMORY[0x1F4188790](Param - 8);
  uint64_t v1183 = (uint64_t)&v1178 - ((v447 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Var = type metadata accessor for PgQuery_Var(0);
  MEMORY[0x1F4188790](Var - 8);
  uint64_t v1182 = (uint64_t)&v1178 - ((v449 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Expr = type metadata accessor for PgQuery_Expr(0);
  MEMORY[0x1F4188790](Expr - 8);
  uint64_t v1181 = (uint64_t)&v1178 - ((v451 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  MEMORY[0x1F4188790](TableFunc - 8);
  uint64_t v1180 = (uint64_t)&v1178 - ((v453 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  MEMORY[0x1F4188790](RangeVar - 8);
  uint64_t v1179 = (uint64_t)&v1178 - ((v455 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  MEMORY[0x1F4188790](Alias - 8);
  v1178 = (char *)&v1178 - ((v457 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1626 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v458 = MEMORY[0x1F4188790](v1626);
  v1625 = (char *)&v1178 - ((v459 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v460 = MEMORY[0x1F4188790](v458);
  v1623 = (char *)&v1178 - v461;
  uint64_t v462 = MEMORY[0x1F4188790](v460);
  v1622 = (char *)&v1178 - v463;
  uint64_t v464 = MEMORY[0x1F4188790](v462);
  v1624 = (char *)&v1178 - v465;
  uint64_t v466 = MEMORY[0x1F4188790](v464);
  v1621 = (char *)&v1178 - v467;
  uint64_t v468 = MEMORY[0x1F4188790](v466);
  v1620 = (char *)&v1178 - v469;
  uint64_t v470 = MEMORY[0x1F4188790](v468);
  v1619 = (char *)&v1178 - v471;
  uint64_t v472 = MEMORY[0x1F4188790](v470);
  v1618 = (char *)&v1178 - v473;
  uint64_t v474 = MEMORY[0x1F4188790](v472);
  v1617 = (char *)&v1178 - v475;
  uint64_t v476 = MEMORY[0x1F4188790](v474);
  v1616 = (char *)&v1178 - v477;
  uint64_t v478 = MEMORY[0x1F4188790](v476);
  v1615 = (char *)&v1178 - v479;
  uint64_t v480 = MEMORY[0x1F4188790](v478);
  v1614 = (char *)&v1178 - v481;
  uint64_t v482 = MEMORY[0x1F4188790](v480);
  v1613 = (char *)&v1178 - v483;
  uint64_t v484 = MEMORY[0x1F4188790](v482);
  v1612 = (char *)&v1178 - v485;
  uint64_t v486 = MEMORY[0x1F4188790](v484);
  v1611 = (char *)&v1178 - v487;
  uint64_t v488 = MEMORY[0x1F4188790](v486);
  v1610 = (char *)&v1178 - v489;
  uint64_t v490 = MEMORY[0x1F4188790](v488);
  v1609 = (char *)&v1178 - v491;
  uint64_t v492 = MEMORY[0x1F4188790](v490);
  v1608 = (char *)&v1178 - v493;
  uint64_t v494 = MEMORY[0x1F4188790](v492);
  v1607 = (char *)&v1178 - v495;
  uint64_t v496 = MEMORY[0x1F4188790](v494);
  v1606 = (char *)&v1178 - v497;
  uint64_t v498 = MEMORY[0x1F4188790](v496);
  v1605 = (char *)&v1178 - v499;
  uint64_t v500 = MEMORY[0x1F4188790](v498);
  v1604 = (char *)&v1178 - v501;
  uint64_t v502 = MEMORY[0x1F4188790](v500);
  v1603 = (char *)&v1178 - v503;
  uint64_t v504 = MEMORY[0x1F4188790](v502);
  v1602 = (char *)&v1178 - v505;
  uint64_t v506 = MEMORY[0x1F4188790](v504);
  v1601 = (char *)&v1178 - v507;
  uint64_t v508 = MEMORY[0x1F4188790](v506);
  v1600 = (char *)&v1178 - v509;
  uint64_t v510 = MEMORY[0x1F4188790](v508);
  v1599 = (char *)&v1178 - v511;
  uint64_t v512 = MEMORY[0x1F4188790](v510);
  v1598 = (char *)&v1178 - v513;
  uint64_t v514 = MEMORY[0x1F4188790](v512);
  v1597 = (char *)&v1178 - v515;
  uint64_t v516 = MEMORY[0x1F4188790](v514);
  v1596 = (char *)&v1178 - v517;
  uint64_t v518 = MEMORY[0x1F4188790](v516);
  v1595 = (char *)&v1178 - v519;
  uint64_t v520 = MEMORY[0x1F4188790](v518);
  v1594 = (char *)&v1178 - v521;
  uint64_t v522 = MEMORY[0x1F4188790](v520);
  v1593 = (char *)&v1178 - v523;
  uint64_t v524 = MEMORY[0x1F4188790](v522);
  v1592 = (char *)&v1178 - v525;
  uint64_t v526 = MEMORY[0x1F4188790](v524);
  v1591 = (char *)&v1178 - v527;
  uint64_t v528 = MEMORY[0x1F4188790](v526);
  v1590 = (char *)&v1178 - v529;
  uint64_t v530 = MEMORY[0x1F4188790](v528);
  v1589 = (char *)&v1178 - v531;
  uint64_t v532 = MEMORY[0x1F4188790](v530);
  v1588 = (char *)&v1178 - v533;
  uint64_t v534 = MEMORY[0x1F4188790](v532);
  v1587 = (char *)&v1178 - v535;
  uint64_t v536 = MEMORY[0x1F4188790](v534);
  v1586 = (char *)&v1178 - v537;
  uint64_t v538 = MEMORY[0x1F4188790](v536);
  v1585 = (char *)&v1178 - v539;
  uint64_t v540 = MEMORY[0x1F4188790](v538);
  v1584 = (char *)&v1178 - v541;
  uint64_t v542 = MEMORY[0x1F4188790](v540);
  v1583 = (char *)&v1178 - v543;
  uint64_t v544 = MEMORY[0x1F4188790](v542);
  v1582 = (char *)&v1178 - v545;
  uint64_t v546 = MEMORY[0x1F4188790](v544);
  v1581 = (char *)&v1178 - v547;
  uint64_t v548 = MEMORY[0x1F4188790](v546);
  v1580 = (char *)&v1178 - v549;
  uint64_t v550 = MEMORY[0x1F4188790](v548);
  v1579 = (char *)&v1178 - v551;
  uint64_t v552 = MEMORY[0x1F4188790](v550);
  v1578 = (char *)&v1178 - v553;
  uint64_t v554 = MEMORY[0x1F4188790](v552);
  v1577 = (char *)&v1178 - v555;
  uint64_t v556 = MEMORY[0x1F4188790](v554);
  v1576 = (char *)&v1178 - v557;
  uint64_t v558 = MEMORY[0x1F4188790](v556);
  v1575 = (char *)&v1178 - v559;
  uint64_t v560 = MEMORY[0x1F4188790](v558);
  v1574 = (char *)&v1178 - v561;
  uint64_t v562 = MEMORY[0x1F4188790](v560);
  v1573 = (char *)&v1178 - v563;
  uint64_t v564 = MEMORY[0x1F4188790](v562);
  v1572 = (char *)&v1178 - v565;
  uint64_t v566 = MEMORY[0x1F4188790](v564);
  v1571 = (char *)&v1178 - v567;
  uint64_t v568 = MEMORY[0x1F4188790](v566);
  v1569 = (char *)&v1178 - v569;
  uint64_t v570 = MEMORY[0x1F4188790](v568);
  v1570 = (char *)&v1178 - v571;
  uint64_t v572 = MEMORY[0x1F4188790](v570);
  v1568 = (char *)&v1178 - v573;
  uint64_t v574 = MEMORY[0x1F4188790](v572);
  v1567 = (char *)&v1178 - v575;
  uint64_t v576 = MEMORY[0x1F4188790](v574);
  v1566 = (char *)&v1178 - v577;
  uint64_t v578 = MEMORY[0x1F4188790](v576);
  v1565 = (char *)&v1178 - v579;
  uint64_t v580 = MEMORY[0x1F4188790](v578);
  v1564 = (char *)&v1178 - v581;
  uint64_t v582 = MEMORY[0x1F4188790](v580);
  v1563 = (char *)&v1178 - v583;
  uint64_t v584 = MEMORY[0x1F4188790](v582);
  v1562 = (char *)&v1178 - v585;
  uint64_t v586 = MEMORY[0x1F4188790](v584);
  v1561 = (char *)&v1178 - v587;
  uint64_t v588 = MEMORY[0x1F4188790](v586);
  v1560 = (char *)&v1178 - v589;
  uint64_t v590 = MEMORY[0x1F4188790](v588);
  v1559 = (char *)&v1178 - v591;
  uint64_t v592 = MEMORY[0x1F4188790](v590);
  v1558 = (char *)&v1178 - v593;
  uint64_t v594 = MEMORY[0x1F4188790](v592);
  v1557 = (char *)&v1178 - v595;
  uint64_t v596 = MEMORY[0x1F4188790](v594);
  v1556 = (char *)&v1178 - v597;
  uint64_t v598 = MEMORY[0x1F4188790](v596);
  v1555 = (char *)&v1178 - v599;
  uint64_t v600 = MEMORY[0x1F4188790](v598);
  v1554 = (char *)&v1178 - v601;
  uint64_t v602 = MEMORY[0x1F4188790](v600);
  v1553 = (char *)&v1178 - v603;
  uint64_t v604 = MEMORY[0x1F4188790](v602);
  v1552 = (char *)&v1178 - v605;
  uint64_t v606 = MEMORY[0x1F4188790](v604);
  v1551 = (char *)&v1178 - v607;
  uint64_t v608 = MEMORY[0x1F4188790](v606);
  v1550 = (char *)&v1178 - v609;
  uint64_t v610 = MEMORY[0x1F4188790](v608);
  v1549 = (char *)&v1178 - v611;
  uint64_t v612 = MEMORY[0x1F4188790](v610);
  v1548 = (char *)&v1178 - v613;
  uint64_t v614 = MEMORY[0x1F4188790](v612);
  v1547 = (char *)&v1178 - v615;
  uint64_t v616 = MEMORY[0x1F4188790](v614);
  v1546 = (char *)&v1178 - v617;
  uint64_t v618 = MEMORY[0x1F4188790](v616);
  v1545 = (char *)&v1178 - v619;
  uint64_t v620 = MEMORY[0x1F4188790](v618);
  v1544 = (char *)&v1178 - v621;
  uint64_t v622 = MEMORY[0x1F4188790](v620);
  v1543 = (char *)&v1178 - v623;
  uint64_t v624 = MEMORY[0x1F4188790](v622);
  v1542 = (char *)&v1178 - v625;
  uint64_t v626 = MEMORY[0x1F4188790](v624);
  v1541 = (char *)&v1178 - v627;
  uint64_t v628 = MEMORY[0x1F4188790](v626);
  v1540 = (char *)&v1178 - v629;
  uint64_t v630 = MEMORY[0x1F4188790](v628);
  v1539 = (char *)&v1178 - v631;
  uint64_t v632 = MEMORY[0x1F4188790](v630);
  v1538 = (char *)&v1178 - v633;
  uint64_t v634 = MEMORY[0x1F4188790](v632);
  v1537 = (char *)&v1178 - v635;
  uint64_t v636 = MEMORY[0x1F4188790](v634);
  v1536 = (char *)&v1178 - v637;
  uint64_t v638 = MEMORY[0x1F4188790](v636);
  v1535 = (char *)&v1178 - v639;
  uint64_t v640 = MEMORY[0x1F4188790](v638);
  v1534 = (char *)&v1178 - v641;
  uint64_t v642 = MEMORY[0x1F4188790](v640);
  v1533 = (char *)&v1178 - v643;
  uint64_t v644 = MEMORY[0x1F4188790](v642);
  v1532 = (char *)&v1178 - v645;
  uint64_t v646 = MEMORY[0x1F4188790](v644);
  v1531 = (char *)&v1178 - v647;
  uint64_t v648 = MEMORY[0x1F4188790](v646);
  v1530 = (char *)&v1178 - v649;
  uint64_t v650 = MEMORY[0x1F4188790](v648);
  v1529 = (char *)&v1178 - v651;
  uint64_t v652 = MEMORY[0x1F4188790](v650);
  v1528 = (char *)&v1178 - v653;
  uint64_t v654 = MEMORY[0x1F4188790](v652);
  v1527 = (char *)&v1178 - v655;
  uint64_t v656 = MEMORY[0x1F4188790](v654);
  v1526 = (char *)&v1178 - v657;
  uint64_t v658 = MEMORY[0x1F4188790](v656);
  v1525 = (char *)&v1178 - v659;
  uint64_t v660 = MEMORY[0x1F4188790](v658);
  v1524 = (char *)&v1178 - v661;
  uint64_t v662 = MEMORY[0x1F4188790](v660);
  v1523 = (char *)&v1178 - v663;
  uint64_t v664 = MEMORY[0x1F4188790](v662);
  v1522 = (char *)&v1178 - v665;
  uint64_t v666 = MEMORY[0x1F4188790](v664);
  v1521 = (char *)&v1178 - v667;
  uint64_t v668 = MEMORY[0x1F4188790](v666);
  v1520 = (char *)&v1178 - v669;
  uint64_t v670 = MEMORY[0x1F4188790](v668);
  v1519 = (char *)&v1178 - v671;
  uint64_t v672 = MEMORY[0x1F4188790](v670);
  v1518 = (char *)&v1178 - v673;
  uint64_t v674 = MEMORY[0x1F4188790](v672);
  v1517 = (char *)&v1178 - v675;
  uint64_t v676 = MEMORY[0x1F4188790](v674);
  v1516 = (char *)&v1178 - v677;
  uint64_t v678 = MEMORY[0x1F4188790](v676);
  v1515 = (char *)&v1178 - v679;
  uint64_t v680 = MEMORY[0x1F4188790](v678);
  v1514 = (char *)&v1178 - v681;
  uint64_t v682 = MEMORY[0x1F4188790](v680);
  v1513 = (char *)&v1178 - v683;
  uint64_t v684 = MEMORY[0x1F4188790](v682);
  v1512 = (char *)&v1178 - v685;
  uint64_t v686 = MEMORY[0x1F4188790](v684);
  v1511 = (char *)&v1178 - v687;
  uint64_t v688 = MEMORY[0x1F4188790](v686);
  v1510 = (char *)&v1178 - v689;
  uint64_t v690 = MEMORY[0x1F4188790](v688);
  v1509 = (char *)&v1178 - v691;
  uint64_t v692 = MEMORY[0x1F4188790](v690);
  v1508 = (char *)&v1178 - v693;
  uint64_t v694 = MEMORY[0x1F4188790](v692);
  v1507 = (char *)&v1178 - v695;
  uint64_t v696 = MEMORY[0x1F4188790](v694);
  v1506 = (char *)&v1178 - v697;
  uint64_t v698 = MEMORY[0x1F4188790](v696);
  v1505 = (char *)&v1178 - v699;
  uint64_t v700 = MEMORY[0x1F4188790](v698);
  v1503 = (char *)&v1178 - v701;
  uint64_t v702 = MEMORY[0x1F4188790](v700);
  v1502 = (char *)&v1178 - v703;
  uint64_t v704 = MEMORY[0x1F4188790](v702);
  v1504 = (char *)&v1178 - v705;
  uint64_t v706 = MEMORY[0x1F4188790](v704);
  v1501 = (char *)&v1178 - v707;
  uint64_t v708 = MEMORY[0x1F4188790](v706);
  v1500 = (char *)&v1178 - v709;
  uint64_t v710 = MEMORY[0x1F4188790](v708);
  v1499 = (char *)&v1178 - v711;
  uint64_t v712 = MEMORY[0x1F4188790](v710);
  v1498 = (char *)&v1178 - v713;
  uint64_t v714 = MEMORY[0x1F4188790](v712);
  v1497 = (char *)&v1178 - v715;
  uint64_t v716 = MEMORY[0x1F4188790](v714);
  v1496 = (char *)&v1178 - v717;
  uint64_t v718 = MEMORY[0x1F4188790](v716);
  v1495 = (char *)&v1178 - v719;
  uint64_t v720 = MEMORY[0x1F4188790](v718);
  v1494 = (char *)&v1178 - v721;
  uint64_t v722 = MEMORY[0x1F4188790](v720);
  v1493 = (char *)&v1178 - v723;
  uint64_t v724 = MEMORY[0x1F4188790](v722);
  v1492 = (char *)&v1178 - v725;
  uint64_t v726 = MEMORY[0x1F4188790](v724);
  v1491 = (char *)&v1178 - v727;
  uint64_t v728 = MEMORY[0x1F4188790](v726);
  v1490 = (char *)&v1178 - v729;
  uint64_t v730 = MEMORY[0x1F4188790](v728);
  v1489 = (char *)&v1178 - v731;
  uint64_t v732 = MEMORY[0x1F4188790](v730);
  v1488 = (char *)&v1178 - v733;
  uint64_t v734 = MEMORY[0x1F4188790](v732);
  v1487 = (char *)&v1178 - v735;
  uint64_t v736 = MEMORY[0x1F4188790](v734);
  v1486 = (char *)&v1178 - v737;
  uint64_t v738 = MEMORY[0x1F4188790](v736);
  v1485 = (char *)&v1178 - v739;
  uint64_t v740 = MEMORY[0x1F4188790](v738);
  v1484 = (char *)&v1178 - v741;
  uint64_t v742 = MEMORY[0x1F4188790](v740);
  v1483 = (char *)&v1178 - v743;
  uint64_t v744 = MEMORY[0x1F4188790](v742);
  v1482 = (char *)&v1178 - v745;
  uint64_t v746 = MEMORY[0x1F4188790](v744);
  v1481 = (char *)&v1178 - v747;
  uint64_t v748 = MEMORY[0x1F4188790](v746);
  v1480 = (char *)&v1178 - v749;
  uint64_t v750 = MEMORY[0x1F4188790](v748);
  v1479 = (char *)&v1178 - v751;
  uint64_t v752 = MEMORY[0x1F4188790](v750);
  v1478 = (char *)&v1178 - v753;
  uint64_t v754 = MEMORY[0x1F4188790](v752);
  v1477 = (char *)&v1178 - v755;
  uint64_t v756 = MEMORY[0x1F4188790](v754);
  v1476 = (char *)&v1178 - v757;
  uint64_t v758 = MEMORY[0x1F4188790](v756);
  v1475 = (char *)&v1178 - v759;
  uint64_t v760 = MEMORY[0x1F4188790](v758);
  v1474 = (char *)&v1178 - v761;
  uint64_t v762 = MEMORY[0x1F4188790](v760);
  v1473 = (char *)&v1178 - v763;
  uint64_t v764 = MEMORY[0x1F4188790](v762);
  v1472 = (char *)&v1178 - v765;
  uint64_t v766 = MEMORY[0x1F4188790](v764);
  v1471 = (char *)&v1178 - v767;
  uint64_t v768 = MEMORY[0x1F4188790](v766);
  v1470 = (char *)&v1178 - v769;
  uint64_t v770 = MEMORY[0x1F4188790](v768);
  v1469 = (char *)&v1178 - v771;
  uint64_t v772 = MEMORY[0x1F4188790](v770);
  v1468 = (char *)&v1178 - v773;
  uint64_t v774 = MEMORY[0x1F4188790](v772);
  v1467 = (char *)&v1178 - v775;
  uint64_t v776 = MEMORY[0x1F4188790](v774);
  v1466 = (char *)&v1178 - v777;
  uint64_t v778 = MEMORY[0x1F4188790](v776);
  v1465 = (char *)&v1178 - v779;
  uint64_t v780 = MEMORY[0x1F4188790](v778);
  v1464 = (char *)&v1178 - v781;
  uint64_t v782 = MEMORY[0x1F4188790](v780);
  v1463 = (char *)&v1178 - v783;
  uint64_t v784 = MEMORY[0x1F4188790](v782);
  v1462 = (char *)&v1178 - v785;
  uint64_t v786 = MEMORY[0x1F4188790](v784);
  v1461 = (char *)&v1178 - v787;
  uint64_t v788 = MEMORY[0x1F4188790](v786);
  v1460 = (char *)&v1178 - v789;
  uint64_t v790 = MEMORY[0x1F4188790](v788);
  v1459 = (char *)&v1178 - v791;
  uint64_t v792 = MEMORY[0x1F4188790](v790);
  v1458 = (char *)&v1178 - v793;
  uint64_t v794 = MEMORY[0x1F4188790](v792);
  v1457 = (char *)&v1178 - v795;
  uint64_t v796 = MEMORY[0x1F4188790](v794);
  v1456 = (char *)&v1178 - v797;
  uint64_t v798 = MEMORY[0x1F4188790](v796);
  v1455 = (char *)&v1178 - v799;
  uint64_t v800 = MEMORY[0x1F4188790](v798);
  v1454 = (char *)&v1178 - v801;
  uint64_t v802 = MEMORY[0x1F4188790](v800);
  v1453 = (char *)&v1178 - v803;
  uint64_t v804 = MEMORY[0x1F4188790](v802);
  v1452 = (char *)&v1178 - v805;
  uint64_t v806 = MEMORY[0x1F4188790](v804);
  v1451 = (char *)&v1178 - v807;
  uint64_t v808 = MEMORY[0x1F4188790](v806);
  v1450 = (char *)&v1178 - v809;
  uint64_t v810 = MEMORY[0x1F4188790](v808);
  v1449 = (char *)&v1178 - v811;
  uint64_t v812 = MEMORY[0x1F4188790](v810);
  v1448 = (char *)&v1178 - v813;
  uint64_t v814 = MEMORY[0x1F4188790](v812);
  v1447 = (char *)&v1178 - v815;
  uint64_t v816 = MEMORY[0x1F4188790](v814);
  v1446 = (char *)&v1178 - v817;
  uint64_t v818 = MEMORY[0x1F4188790](v816);
  v1445 = (char *)&v1178 - v819;
  uint64_t v820 = MEMORY[0x1F4188790](v818);
  v1444 = (char *)&v1178 - v821;
  uint64_t v822 = MEMORY[0x1F4188790](v820);
  v1443 = (char *)&v1178 - v823;
  uint64_t v824 = MEMORY[0x1F4188790](v822);
  v1441 = (char *)&v1178 - v825;
  uint64_t v826 = MEMORY[0x1F4188790](v824);
  v1442 = (char *)&v1178 - v827;
  uint64_t v828 = MEMORY[0x1F4188790](v826);
  v1440 = (char *)&v1178 - v829;
  uint64_t v830 = MEMORY[0x1F4188790](v828);
  v1439 = (char *)&v1178 - v831;
  uint64_t v832 = MEMORY[0x1F4188790](v830);
  v1438 = (char *)&v1178 - v833;
  uint64_t v834 = MEMORY[0x1F4188790](v832);
  v1437 = (char *)&v1178 - v835;
  uint64_t v836 = MEMORY[0x1F4188790](v834);
  v1436 = (char *)&v1178 - v837;
  uint64_t v838 = MEMORY[0x1F4188790](v836);
  v1435 = (char *)&v1178 - v839;
  uint64_t v840 = MEMORY[0x1F4188790](v838);
  v1434 = (char *)&v1178 - v841;
  uint64_t v842 = MEMORY[0x1F4188790](v840);
  v1433 = (char *)&v1178 - v843;
  uint64_t v844 = MEMORY[0x1F4188790](v842);
  v1432 = (char *)&v1178 - v845;
  uint64_t v846 = MEMORY[0x1F4188790](v844);
  v1431 = (char *)&v1178 - v847;
  uint64_t v848 = MEMORY[0x1F4188790](v846);
  v1430 = (char *)&v1178 - v849;
  uint64_t v850 = MEMORY[0x1F4188790](v848);
  v1429 = (char *)&v1178 - v851;
  uint64_t v852 = MEMORY[0x1F4188790](v850);
  v1428 = (char *)&v1178 - v853;
  uint64_t v854 = MEMORY[0x1F4188790](v852);
  v1427 = (char *)&v1178 - v855;
  uint64_t v856 = MEMORY[0x1F4188790](v854);
  v1426 = (char *)&v1178 - v857;
  uint64_t v858 = MEMORY[0x1F4188790](v856);
  v1425 = (char *)&v1178 - v859;
  uint64_t v860 = MEMORY[0x1F4188790](v858);
  v1424 = (char *)&v1178 - v861;
  uint64_t v862 = MEMORY[0x1F4188790](v860);
  v1423 = (char *)&v1178 - v863;
  uint64_t v864 = MEMORY[0x1F4188790](v862);
  v1422 = (char *)&v1178 - v865;
  uint64_t v866 = MEMORY[0x1F4188790](v864);
  v1421 = (char *)&v1178 - v867;
  uint64_t v868 = MEMORY[0x1F4188790](v866);
  v1420 = (char *)&v1178 - v869;
  uint64_t v870 = MEMORY[0x1F4188790](v868);
  v1419 = (char *)&v1178 - v871;
  uint64_t v872 = MEMORY[0x1F4188790](v870);
  v1418 = (char *)&v1178 - v873;
  uint64_t v874 = MEMORY[0x1F4188790](v872);
  v1417 = (char *)&v1178 - v875;
  uint64_t v876 = MEMORY[0x1F4188790](v874);
  v1416 = (char *)&v1178 - v877;
  uint64_t v878 = MEMORY[0x1F4188790](v876);
  v1415 = (char *)&v1178 - v879;
  uint64_t v880 = MEMORY[0x1F4188790](v878);
  v1414 = (char *)&v1178 - v881;
  uint64_t v882 = MEMORY[0x1F4188790](v880);
  v1413 = (char *)&v1178 - v883;
  uint64_t v884 = MEMORY[0x1F4188790](v882);
  v1412 = (char *)&v1178 - v885;
  uint64_t v886 = MEMORY[0x1F4188790](v884);
  v1411 = (char *)&v1178 - v887;
  uint64_t v888 = MEMORY[0x1F4188790](v886);
  v1410 = (char *)&v1178 - v889;
  uint64_t v890 = MEMORY[0x1F4188790](v888);
  v1409 = (char *)&v1178 - v891;
  uint64_t v892 = MEMORY[0x1F4188790](v890);
  v1408 = (char *)&v1178 - v893;
  uint64_t v894 = MEMORY[0x1F4188790](v892);
  v1407 = (char *)&v1178 - v895;
  uint64_t v896 = MEMORY[0x1F4188790](v894);
  v1406 = (char *)&v1178 - v897;
  uint64_t v898 = MEMORY[0x1F4188790](v896);
  v900 = (char *)&v1178 - v899;
  uint64_t v901 = MEMORY[0x1F4188790](v898);
  v903 = (char *)&v1178 - v902;
  uint64_t v904 = MEMORY[0x1F4188790](v901);
  v906 = (char *)&v1178 - v905;
  uint64_t v907 = MEMORY[0x1F4188790](v904);
  v909 = (char *)&v1178 - v908;
  uint64_t v910 = MEMORY[0x1F4188790](v907);
  v912 = (char *)&v1178 - v911;
  uint64_t v913 = MEMORY[0x1F4188790](v910);
  v915 = (char *)&v1178 - v914;
  uint64_t v916 = MEMORY[0x1F4188790](v913);
  v918 = (char *)&v1178 - v917;
  MEMORY[0x1F4188790](v916);
  v920 = (char *)&v1178 - v919;
  uint64_t v921 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node.OneOf_Node, PgQuery_Node.OneOf_Node));
  uint64_t v922 = MEMORY[0x1F4188790](v921 - 8);
  v924 = (char *)&v1178 - ((v923 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v925 = (uint64_t)&v924[*(int *)(v922 + 56)];
  outlined init with copy of PgQuery_Node.OneOf_Node(v1627, (uint64_t)v924);
  uint64_t v1627 = v925;
  outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, v925);
  v1628 = v924;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v926 = (uint64_t)v1628;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v918);
      uint64_t v930 = v1627;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v931 = v1179;
        outlined init with take of PgQuery_OidList(v930, v1179, type metadata accessor for PgQuery_RangeVar);
        char v932 = specialized static PgQuery_RangeVar.== infix(_:_:)((uint64_t)v918, v931);
        v933 = type metadata accessor for PgQuery_RangeVar;
        outlined destroy of PgQuery_Alias(v931, type metadata accessor for PgQuery_RangeVar);
        uint64_t v934 = (uint64_t)v918;
        goto LABEL_461;
      }
      v928 = type metadata accessor for PgQuery_RangeVar;
      uint64_t v929 = (uint64_t)v918;
      goto LABEL_692;
    case 2u:
      uint64_t v926 = (uint64_t)v1628;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v915);
      uint64_t v935 = v1627;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v936 = v1180;
        outlined init with take of PgQuery_OidList(v935, v1180, type metadata accessor for PgQuery_TableFunc);
        char v932 = specialized static PgQuery_TableFunc.== infix(_:_:)((uint64_t)v915, v936);
        v933 = type metadata accessor for PgQuery_TableFunc;
        outlined destroy of PgQuery_Alias(v936, type metadata accessor for PgQuery_TableFunc);
        uint64_t v934 = (uint64_t)v915;
        goto LABEL_461;
      }
      v928 = type metadata accessor for PgQuery_TableFunc;
      uint64_t v929 = (uint64_t)v915;
      goto LABEL_692;
    case 3u:
      uint64_t v926 = (uint64_t)v1628;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v912);
      uint64_t v937 = v1627;
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v938 = v1181;
        outlined init with take of PgQuery_OidList(v937, v1181, type metadata accessor for PgQuery_Expr);
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v932 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of PgQuery_Alias(v938, type metadata accessor for PgQuery_Expr);
        uint64_t v934 = (uint64_t)v912;
        v939 = type metadata accessor for PgQuery_Expr;
        goto LABEL_462;
      }
      v928 = type metadata accessor for PgQuery_Expr;
      uint64_t v929 = (uint64_t)v912;
      goto LABEL_692;
    case 4u:
      uint64_t v926 = (uint64_t)v1628;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v909);
      uint64_t v940 = v1627;
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v941 = v1182;
        outlined init with take of PgQuery_OidList(v940, v1182, type metadata accessor for PgQuery_Var);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v909, v941, type metadata accessor for PgQuery_Var, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Var.== infix(_:_:));
        v933 = type metadata accessor for PgQuery_Var;
        outlined destroy of PgQuery_Alias(v941, type metadata accessor for PgQuery_Var);
        uint64_t v934 = (uint64_t)v909;
        goto LABEL_461;
      }
      v928 = type metadata accessor for PgQuery_Var;
      uint64_t v929 = (uint64_t)v909;
      goto LABEL_692;
    case 5u:
      uint64_t v942 = (uint64_t)v1628;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v906);
      uint64_t v943 = v1627;
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        uint64_t v944 = v1183;
        outlined init with take of PgQuery_OidList(v943, v1183, type metadata accessor for PgQuery_Param);
        char v932 = specialized static PgQuery_Param.== infix(_:_:)((uint64_t)v906, v944);
        outlined destroy of PgQuery_Alias(v944, type metadata accessor for PgQuery_Param);
        outlined destroy of PgQuery_Alias((uint64_t)v906, type metadata accessor for PgQuery_Param);
        outlined destroy of PgQuery_Alias(v942, type metadata accessor for PgQuery_Node.OneOf_Node);
        return v932 & 1;
      }
      outlined destroy of PgQuery_Alias((uint64_t)v906, type metadata accessor for PgQuery_Param);
      uint64_t v926 = v942;
      goto LABEL_693;
    case 6u:
      uint64_t v926 = (uint64_t)v1628;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v903);
      uint64_t v945 = v1627;
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        v946 = v1184;
        outlined init with take of PgQuery_OidList(v945, (uint64_t)v1184, type metadata accessor for PgQuery_Aggref);
        char v932 = specialized static PgQuery_Aggref.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_Aggref;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_Aggref;
      goto LABEL_691;
    case 7u:
      uint64_t v926 = (uint64_t)v1628;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v900);
      uint64_t v948 = v1627;
      if (swift_getEnumCaseMultiPayload() == 7)
      {
        uint64_t v949 = v1185;
        outlined init with take of PgQuery_OidList(v948, v1185, type metadata accessor for PgQuery_GroupingFunc);
        char v932 = specialized static PgQuery_GroupingFunc.== infix(_:_:)((uint64_t)v900, v949);
        v950 = type metadata accessor for PgQuery_GroupingFunc;
        v933 = type metadata accessor for PgQuery_GroupingFunc;
        uint64_t v951 = v949;
        goto LABEL_453;
      }
      v1174 = type metadata accessor for PgQuery_GroupingFunc;
      goto LABEL_687;
    case 8u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1406;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1406);
      uint64_t v952 = v1627;
      if (swift_getEnumCaseMultiPayload() == 8)
      {
        v946 = v1186;
        outlined init with take of PgQuery_OidList(v952, (uint64_t)v1186, type metadata accessor for PgQuery_WindowFunc);
        char v932 = specialized static PgQuery_WindowFunc.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_WindowFunc;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_WindowFunc;
      goto LABEL_691;
    case 9u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1407;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1407);
      uint64_t v953 = v1627;
      if (swift_getEnumCaseMultiPayload() == 9)
      {
        v946 = v1187;
        outlined init with take of PgQuery_OidList(v953, (uint64_t)v1187, type metadata accessor for PgQuery_SubscriptingRef);
        char v932 = specialized static PgQuery_SubscriptingRef.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_SubscriptingRef;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_SubscriptingRef;
      goto LABEL_691;
    case 0xAu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1408;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1408);
      uint64_t v954 = v1627;
      if (swift_getEnumCaseMultiPayload() == 10)
      {
        v946 = v1188;
        outlined init with take of PgQuery_OidList(v954, (uint64_t)v1188, type metadata accessor for PgQuery_FuncExpr);
        char v932 = specialized static PgQuery_FuncExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_FuncExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_FuncExpr;
      goto LABEL_691;
    case 0xBu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1409;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1409);
      uint64_t v955 = v1627;
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        v946 = v1189;
        outlined init with take of PgQuery_OidList(v955, (uint64_t)v1189, type metadata accessor for PgQuery_NamedArgExpr);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_NamedArgExpr, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_NamedArgExpr.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_NamedArgExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_NamedArgExpr;
      goto LABEL_691;
    case 0xCu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1410;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1410);
      uint64_t v956 = v1627;
      if (swift_getEnumCaseMultiPayload() == 12)
      {
        v946 = v1190;
        outlined init with take of PgQuery_OidList(v956, (uint64_t)v1190, type metadata accessor for PgQuery_OpExpr);
        char v932 = specialized static PgQuery_OpExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_OpExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_OpExpr;
      goto LABEL_691;
    case 0xDu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1411;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1411);
      uint64_t v957 = v1627;
      if (swift_getEnumCaseMultiPayload() == 13)
      {
        v946 = v1191;
        outlined init with take of PgQuery_OidList(v957, (uint64_t)v1191, type metadata accessor for PgQuery_DistinctExpr);
        char v932 = specialized static PgQuery_DistinctExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_DistinctExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DistinctExpr;
      goto LABEL_691;
    case 0xEu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1412;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1412);
      uint64_t v958 = v1627;
      if (swift_getEnumCaseMultiPayload() == 14)
      {
        v946 = v1192;
        outlined init with take of PgQuery_OidList(v958, (uint64_t)v1192, type metadata accessor for PgQuery_NullIfExpr);
        char v932 = specialized static PgQuery_NullIfExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_NullIfExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_NullIfExpr;
      goto LABEL_691;
    case 0xFu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1413;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1413);
      uint64_t v959 = v1627;
      if (swift_getEnumCaseMultiPayload() == 15)
      {
        v946 = v1193;
        outlined init with take of PgQuery_OidList(v959, (uint64_t)v1193, type metadata accessor for PgQuery_ScalarArrayOpExpr);
        char v932 = specialized static PgQuery_ScalarArrayOpExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_ScalarArrayOpExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ScalarArrayOpExpr;
      goto LABEL_691;
    case 0x10u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1414;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1414);
      uint64_t v960 = v1627;
      if (swift_getEnumCaseMultiPayload() == 16)
      {
        v946 = v1194;
        outlined init with take of PgQuery_OidList(v960, (uint64_t)v1194, type metadata accessor for PgQuery_BoolExpr);
        char v932 = specialized static PgQuery_BoolExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_BoolExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_BoolExpr;
      goto LABEL_691;
    case 0x11u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1415;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1415);
      uint64_t v961 = v1627;
      if (swift_getEnumCaseMultiPayload() == 17)
      {
        v946 = v1195;
        outlined init with take of PgQuery_OidList(v961, (uint64_t)v1195, type metadata accessor for PgQuery_SubLink);
        char v932 = specialized static PgQuery_SubLink.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_SubLink;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_SubLink;
      goto LABEL_691;
    case 0x12u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1416;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1416);
      uint64_t v962 = v1627;
      if (swift_getEnumCaseMultiPayload() == 18)
      {
        v946 = v1196;
        outlined init with take of PgQuery_OidList(v962, (uint64_t)v1196, type metadata accessor for PgQuery_SubPlan);
        char v932 = specialized static PgQuery_SubPlan.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_SubPlan;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_SubPlan;
      goto LABEL_691;
    case 0x13u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1417;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1417);
      uint64_t v963 = v1627;
      if (swift_getEnumCaseMultiPayload() == 19)
      {
        v946 = v1197;
        outlined init with take of PgQuery_OidList(v963, (uint64_t)v1197, type metadata accessor for PgQuery_AlternativeSubPlan);
        char v932 = specialized static PgQuery_AlternativeSubPlan.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_AlternativeSubPlan, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subplans);
        v947 = type metadata accessor for PgQuery_AlternativeSubPlan;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlternativeSubPlan;
      goto LABEL_691;
    case 0x14u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1418;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1418);
      uint64_t v964 = v1627;
      if (swift_getEnumCaseMultiPayload() == 20)
      {
        v946 = v1198;
        outlined init with take of PgQuery_OidList(v964, (uint64_t)v1198, type metadata accessor for PgQuery_FieldSelect);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_FieldSelect, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_FieldSelect.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_FieldSelect;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_FieldSelect;
      goto LABEL_691;
    case 0x15u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1419;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1419);
      uint64_t v965 = v1627;
      if (swift_getEnumCaseMultiPayload() == 21)
      {
        v946 = v1199;
        outlined init with take of PgQuery_OidList(v965, (uint64_t)v1199, type metadata accessor for PgQuery_FieldStore);
        char v932 = specialized static PgQuery_FieldStore.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_FieldStore;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_FieldStore;
      goto LABEL_691;
    case 0x16u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1420;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1420);
      uint64_t v966 = v1627;
      if (swift_getEnumCaseMultiPayload() == 22)
      {
        v946 = v1200;
        outlined init with take of PgQuery_OidList(v966, (uint64_t)v1200, type metadata accessor for PgQuery_RelabelType);
        char v932 = specialized static PgQuery_RelabelType.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_RelabelType;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RelabelType;
      goto LABEL_691;
    case 0x17u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1421;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1421);
      uint64_t v967 = v1627;
      if (swift_getEnumCaseMultiPayload() == 23)
      {
        v946 = v1201;
        outlined init with take of PgQuery_OidList(v967, (uint64_t)v1201, type metadata accessor for PgQuery_CoerceViaIO);
        char v932 = specialized static PgQuery_CoerceViaIO.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CoerceViaIO;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CoerceViaIO;
      goto LABEL_691;
    case 0x18u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1422;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1422);
      uint64_t v968 = v1627;
      if (swift_getEnumCaseMultiPayload() == 24)
      {
        v946 = v1202;
        outlined init with take of PgQuery_OidList(v968, (uint64_t)v1202, type metadata accessor for PgQuery_ArrayCoerceExpr);
        char v932 = specialized static PgQuery_ArrayCoerceExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_ArrayCoerceExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ArrayCoerceExpr;
      goto LABEL_691;
    case 0x19u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1423;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1423);
      uint64_t v969 = v1627;
      if (swift_getEnumCaseMultiPayload() == 25)
      {
        v946 = v1203;
        outlined init with take of PgQuery_OidList(v969, (uint64_t)v1203, type metadata accessor for PgQuery_ConvertRowtypeExpr);
        char v932 = specialized static PgQuery_ConvertRowtypeExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_ConvertRowtypeExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ConvertRowtypeExpr;
      goto LABEL_691;
    case 0x1Au:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1424;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1424);
      uint64_t v970 = v1627;
      if (swift_getEnumCaseMultiPayload() == 26)
      {
        v946 = v1204;
        outlined init with take of PgQuery_OidList(v970, (uint64_t)v1204, type metadata accessor for PgQuery_CollateExpr);
        char v932 = specialized static PgQuery_CollateExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CollateExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CollateExpr;
      goto LABEL_691;
    case 0x1Bu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1425;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1425);
      uint64_t v971 = v1627;
      if (swift_getEnumCaseMultiPayload() == 27)
      {
        v946 = v1205;
        outlined init with take of PgQuery_OidList(v971, (uint64_t)v1205, type metadata accessor for PgQuery_CaseExpr);
        char v932 = specialized static PgQuery_CaseExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CaseExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CaseExpr;
      goto LABEL_691;
    case 0x1Cu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1426;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1426);
      uint64_t v972 = v1627;
      if (swift_getEnumCaseMultiPayload() == 28)
      {
        v946 = v1206;
        outlined init with take of PgQuery_OidList(v972, (uint64_t)v1206, type metadata accessor for PgQuery_CaseWhen);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_CaseWhen, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CaseWhen.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_CaseWhen;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CaseWhen;
      goto LABEL_691;
    case 0x1Du:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1427;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1427);
      uint64_t v973 = v1627;
      if (swift_getEnumCaseMultiPayload() == 29)
      {
        v946 = v1207;
        outlined init with take of PgQuery_OidList(v973, (uint64_t)v1207, type metadata accessor for PgQuery_CaseTestExpr);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_CaseTestExpr, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CaseTestExpr.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_CaseTestExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CaseTestExpr;
      goto LABEL_691;
    case 0x1Eu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1428;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1428);
      uint64_t v974 = v1627;
      if (swift_getEnumCaseMultiPayload() == 30)
      {
        v946 = v1208;
        outlined init with take of PgQuery_OidList(v974, (uint64_t)v1208, type metadata accessor for PgQuery_ArrayExpr);
        char v932 = specialized static PgQuery_ArrayExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_ArrayExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ArrayExpr;
      goto LABEL_691;
    case 0x1Fu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1429;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1429);
      uint64_t v975 = v1627;
      if (swift_getEnumCaseMultiPayload() == 31)
      {
        v946 = v1209;
        outlined init with take of PgQuery_OidList(v975, (uint64_t)v1209, type metadata accessor for PgQuery_RowExpr);
        char v932 = specialized static PgQuery_RowExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_RowExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RowExpr;
      goto LABEL_691;
    case 0x20u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1430;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1430);
      uint64_t v976 = v1627;
      if (swift_getEnumCaseMultiPayload() == 32)
      {
        v946 = v1210;
        outlined init with take of PgQuery_OidList(v976, (uint64_t)v1210, type metadata accessor for PgQuery_RowCompareExpr);
        char v932 = specialized static PgQuery_RowCompareExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_RowCompareExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RowCompareExpr;
      goto LABEL_691;
    case 0x21u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1431;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1431);
      uint64_t v977 = v1627;
      if (swift_getEnumCaseMultiPayload() == 33)
      {
        v946 = v1211;
        outlined init with take of PgQuery_OidList(v977, (uint64_t)v1211, type metadata accessor for PgQuery_CoalesceExpr);
        char v932 = specialized static PgQuery_CoalesceExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CoalesceExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CoalesceExpr;
      goto LABEL_691;
    case 0x22u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1432;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1432);
      uint64_t v978 = v1627;
      if (swift_getEnumCaseMultiPayload() == 34)
      {
        v946 = v1212;
        outlined init with take of PgQuery_OidList(v978, (uint64_t)v1212, type metadata accessor for PgQuery_MinMaxExpr);
        char v932 = specialized static PgQuery_MinMaxExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_MinMaxExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_MinMaxExpr;
      goto LABEL_691;
    case 0x23u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1433;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1433);
      uint64_t v979 = v1627;
      if (swift_getEnumCaseMultiPayload() == 35)
      {
        v946 = v1213;
        outlined init with take of PgQuery_OidList(v979, (uint64_t)v1213, type metadata accessor for PgQuery_SQLValueFunction);
        char v932 = specialized static PgQuery_SQLValueFunction.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_SQLValueFunction;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_SQLValueFunction;
      goto LABEL_691;
    case 0x24u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1434;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1434);
      uint64_t v980 = v1627;
      if (swift_getEnumCaseMultiPayload() == 36)
      {
        v946 = v1214;
        outlined init with take of PgQuery_OidList(v980, (uint64_t)v1214, type metadata accessor for PgQuery_XmlExpr);
        char v932 = specialized static PgQuery_XmlExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_XmlExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_XmlExpr;
      goto LABEL_691;
    case 0x25u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1435;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1435);
      uint64_t v981 = v1627;
      if (swift_getEnumCaseMultiPayload() == 37)
      {
        v946 = v1215;
        outlined init with take of PgQuery_OidList(v981, (uint64_t)v1215, type metadata accessor for PgQuery_NullTest);
        char v932 = specialized static PgQuery_NullTest.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_NullTest;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_NullTest;
      goto LABEL_691;
    case 0x26u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1436;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1436);
      uint64_t v982 = v1627;
      if (swift_getEnumCaseMultiPayload() == 38)
      {
        v946 = v1216;
        outlined init with take of PgQuery_OidList(v982, (uint64_t)v1216, type metadata accessor for PgQuery_BooleanTest);
        char v932 = specialized static PgQuery_BooleanTest.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_BooleanTest;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_BooleanTest;
      goto LABEL_691;
    case 0x27u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1437;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1437);
      uint64_t v983 = v1627;
      if (swift_getEnumCaseMultiPayload() == 39)
      {
        v946 = v1217;
        outlined init with take of PgQuery_OidList(v983, (uint64_t)v1217, type metadata accessor for PgQuery_CoerceToDomain);
        char v932 = specialized static PgQuery_CoerceToDomain.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CoerceToDomain;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CoerceToDomain;
      goto LABEL_691;
    case 0x28u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1438;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1438);
      uint64_t v984 = v1627;
      if (swift_getEnumCaseMultiPayload() == 40)
      {
        v946 = v1218;
        outlined init with take of PgQuery_OidList(v984, (uint64_t)v1218, type metadata accessor for PgQuery_CoerceToDomainValue);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_CoerceToDomainValue, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CoerceToDomainValue.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_CoerceToDomainValue;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CoerceToDomainValue;
      goto LABEL_691;
    case 0x29u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1439;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1439);
      uint64_t v985 = v1627;
      if (swift_getEnumCaseMultiPayload() == 41)
      {
        v946 = v1219;
        outlined init with take of PgQuery_OidList(v985, (uint64_t)v1219, type metadata accessor for PgQuery_SetToDefault);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_SetToDefault, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_SetToDefault.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_SetToDefault;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_SetToDefault;
      goto LABEL_691;
    case 0x2Au:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1440;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1440);
      uint64_t v986 = v1627;
      if (swift_getEnumCaseMultiPayload() == 42)
      {
        v946 = v1220;
        outlined init with take of PgQuery_OidList(v986, (uint64_t)v1220, type metadata accessor for PgQuery_CurrentOfExpr);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_CurrentOfExpr, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CurrentOfExpr.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_CurrentOfExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CurrentOfExpr;
      goto LABEL_691;
    case 0x2Bu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1442;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1442);
      uint64_t v987 = v1627;
      if (swift_getEnumCaseMultiPayload() == 43)
      {
        v946 = v1221;
        outlined init with take of PgQuery_OidList(v987, (uint64_t)v1221, type metadata accessor for PgQuery_NextValueExpr);
        char v932 = specialized static PgQuery_MultiAssignRef.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_NextValueExpr, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__seqid, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID);
        v947 = type metadata accessor for PgQuery_NextValueExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_NextValueExpr;
      goto LABEL_691;
    case 0x2Cu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1441;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1441);
      uint64_t v988 = v1627;
      if (swift_getEnumCaseMultiPayload() == 44)
      {
        v946 = v1222;
        outlined init with take of PgQuery_OidList(v988, (uint64_t)v1222, type metadata accessor for PgQuery_InferenceElem);
        char v932 = specialized static PgQuery_InferenceElem.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_InferenceElem;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_InferenceElem;
      goto LABEL_691;
    case 0x2Du:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1443;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1443);
      uint64_t v989 = v1627;
      if (swift_getEnumCaseMultiPayload() == 45)
      {
        v946 = v1223;
        outlined init with take of PgQuery_OidList(v989, (uint64_t)v1223, type metadata accessor for PgQuery_TargetEntry);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_TargetEntry, closure #1 in static PgQuery_TargetEntry.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_TargetEntry;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_TargetEntry;
      goto LABEL_691;
    case 0x2Eu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1444;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1444);
      uint64_t v990 = v1627;
      if (swift_getEnumCaseMultiPayload() == 46)
      {
        v946 = v1224;
        outlined init with take of PgQuery_OidList(v990, (uint64_t)v1224, type metadata accessor for PgQuery_RangeTblRef);
        char v932 = specialized static PgQuery_RangeTblRef.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_RangeTblRef);
        v947 = type metadata accessor for PgQuery_RangeTblRef;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RangeTblRef;
      goto LABEL_691;
    case 0x2Fu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1445;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1445);
      uint64_t v991 = v1627;
      if (swift_getEnumCaseMultiPayload() == 47)
      {
        v946 = v1225;
        outlined init with take of PgQuery_OidList(v991, (uint64_t)v1225, type metadata accessor for PgQuery_JoinExpr);
        char v932 = specialized static PgQuery_JoinExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_JoinExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_JoinExpr;
      goto LABEL_691;
    case 0x30u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1446;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1446);
      uint64_t v992 = v1627;
      if (swift_getEnumCaseMultiPayload() == 48)
      {
        v946 = v1226;
        outlined init with take of PgQuery_OidList(v992, (uint64_t)v1226, type metadata accessor for PgQuery_FromExpr);
        char v932 = specialized static PgQuery_FromExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_FromExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_FromExpr;
      goto LABEL_691;
    case 0x31u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1447;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1447);
      uint64_t v993 = v1627;
      if (swift_getEnumCaseMultiPayload() == 49)
      {
        v946 = v1227;
        outlined init with take of PgQuery_OidList(v993, (uint64_t)v1227, type metadata accessor for PgQuery_OnConflictExpr);
        char v932 = specialized static PgQuery_OnConflictExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_OnConflictExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_OnConflictExpr;
      goto LABEL_691;
    case 0x32u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1448;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1448);
      uint64_t v994 = v1627;
      if (swift_getEnumCaseMultiPayload() == 50)
      {
        v946 = v1228;
        outlined init with take of PgQuery_OidList(v994, (uint64_t)v1228, type metadata accessor for PgQuery_IntoClause);
        char v932 = specialized static PgQuery_IntoClause.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_IntoClause;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_IntoClause;
      goto LABEL_691;
    case 0x33u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1449;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1449);
      uint64_t v995 = v1627;
      if (swift_getEnumCaseMultiPayload() == 51)
      {
        v946 = v1229;
        outlined init with take of PgQuery_OidList(v995, (uint64_t)v1229, type metadata accessor for PgQuery_RawStmt);
        char v932 = specialized static PgQuery_MultiAssignRef.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_RawStmt, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmt, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen);
        v947 = type metadata accessor for PgQuery_RawStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RawStmt;
      goto LABEL_691;
    case 0x34u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1450;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1450);
      uint64_t v996 = v1627;
      if (swift_getEnumCaseMultiPayload() == 52)
      {
        v946 = v1230;
        outlined init with take of PgQuery_OidList(v996, (uint64_t)v1230, type metadata accessor for PgQuery_Query);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_Query, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Query.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_Query;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_Query;
      goto LABEL_691;
    case 0x35u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1451;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1451);
      uint64_t v997 = v1627;
      if (swift_getEnumCaseMultiPayload() == 53)
      {
        v946 = v1231;
        outlined init with take of PgQuery_OidList(v997, (uint64_t)v1231, type metadata accessor for PgQuery_InsertStmt);
        char v932 = specialized static PgQuery_InsertStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_InsertStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_InsertStmt;
      goto LABEL_691;
    case 0x36u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1452;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1452);
      uint64_t v998 = v1627;
      if (swift_getEnumCaseMultiPayload() == 54)
      {
        v946 = v1232;
        outlined init with take of PgQuery_OidList(v998, (uint64_t)v1232, type metadata accessor for PgQuery_DeleteStmt);
        char v932 = specialized static PgQuery_DeleteStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_DeleteStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DeleteStmt;
      goto LABEL_691;
    case 0x37u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1453;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1453);
      uint64_t v999 = v1627;
      if (swift_getEnumCaseMultiPayload() == 55)
      {
        v946 = v1233;
        outlined init with take of PgQuery_OidList(v999, (uint64_t)v1233, type metadata accessor for PgQuery_UpdateStmt);
        char v932 = specialized static PgQuery_UpdateStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_UpdateStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_UpdateStmt;
      goto LABEL_691;
    case 0x38u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1454;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1454);
      uint64_t v1000 = v1627;
      if (swift_getEnumCaseMultiPayload() == 56)
      {
        v946 = v1234;
        outlined init with take of PgQuery_OidList(v1000, (uint64_t)v1234, type metadata accessor for PgQuery_SelectStmt);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_SelectStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_SelectStmt.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_SelectStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_SelectStmt;
      goto LABEL_691;
    case 0x39u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1455;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1455);
      uint64_t v1001 = v1627;
      if (swift_getEnumCaseMultiPayload() == 57)
      {
        v946 = v1235;
        outlined init with take of PgQuery_OidList(v1001, (uint64_t)v1235, type metadata accessor for PgQuery_AlterTableStmt);
        char v932 = specialized static PgQuery_AlterTableStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_AlterTableStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterTableStmt;
      goto LABEL_691;
    case 0x3Au:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1456;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1456);
      uint64_t v1002 = v1627;
      if (swift_getEnumCaseMultiPayload() == 58)
      {
        v946 = v1236;
        outlined init with take of PgQuery_OidList(v1002, (uint64_t)v1236, type metadata accessor for PgQuery_AlterTableCmd);
        char v932 = specialized static PgQuery_AlterTableCmd.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterTableCmd;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterTableCmd;
      goto LABEL_691;
    case 0x3Bu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1457;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1457);
      uint64_t v1003 = v1627;
      if (swift_getEnumCaseMultiPayload() == 59)
      {
        v946 = v1237;
        outlined init with take of PgQuery_OidList(v1003, (uint64_t)v1237, type metadata accessor for PgQuery_AlterDomainStmt);
        char v932 = specialized static PgQuery_AlterDomainStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterDomainStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterDomainStmt;
      goto LABEL_691;
    case 0x3Cu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1458;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1458);
      uint64_t v1004 = v1627;
      if (swift_getEnumCaseMultiPayload() == 60)
      {
        v946 = v1238;
        outlined init with take of PgQuery_OidList(v1004, (uint64_t)v1238, type metadata accessor for PgQuery_SetOperationStmt);
        char v932 = specialized static PgQuery_SetOperationStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_SetOperationStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_SetOperationStmt;
      goto LABEL_691;
    case 0x3Du:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1459;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1459);
      uint64_t v1005 = v1627;
      if (swift_getEnumCaseMultiPayload() == 61)
      {
        v946 = v1239;
        outlined init with take of PgQuery_OidList(v1005, (uint64_t)v1239, type metadata accessor for PgQuery_GrantStmt);
        char v932 = specialized static PgQuery_GrantStmt.== infix(_:_:)((unsigned __int8 *)v903, (unsigned __int8 *)v946);
        v947 = type metadata accessor for PgQuery_GrantStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_GrantStmt;
      goto LABEL_691;
    case 0x3Eu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1460;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1460);
      uint64_t v1006 = v1627;
      if (swift_getEnumCaseMultiPayload() == 62)
      {
        v946 = v1240;
        outlined init with take of PgQuery_OidList(v1006, (uint64_t)v1240, type metadata accessor for PgQuery_GrantRoleStmt);
        char v932 = specialized static PgQuery_GrantRoleStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_GrantRoleStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_GrantRoleStmt;
      goto LABEL_691;
    case 0x3Fu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1461;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1461);
      uint64_t v1007 = v1627;
      if (swift_getEnumCaseMultiPayload() == 63)
      {
        v946 = v1241;
        outlined init with take of PgQuery_OidList(v1007, (uint64_t)v1241, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
        char v932 = specialized static PgQuery_AlterDefaultPrivilegesStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt;
      goto LABEL_691;
    case 0x40u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1462;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1462);
      uint64_t v1008 = v1627;
      if (swift_getEnumCaseMultiPayload() == 64)
      {
        v946 = v1242;
        outlined init with take of PgQuery_OidList(v1008, (uint64_t)v1242, type metadata accessor for PgQuery_ClosePortalStmt);
        char v932 = specialized static PgQuery_VariableShowStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_ClosePortalStmt);
        v947 = type metadata accessor for PgQuery_ClosePortalStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ClosePortalStmt;
      goto LABEL_691;
    case 0x41u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1463;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1463);
      uint64_t v1009 = v1627;
      if (swift_getEnumCaseMultiPayload() == 65)
      {
        v946 = v1243;
        outlined init with take of PgQuery_OidList(v1009, (uint64_t)v1243, type metadata accessor for PgQuery_ClusterStmt);
        char v932 = specialized static PgQuery_ClusterStmt.== infix(_:_:)(v903, v946);
        v947 = type metadata accessor for PgQuery_ClusterStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ClusterStmt;
      goto LABEL_691;
    case 0x42u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1464;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1464);
      uint64_t v1010 = v1627;
      if (swift_getEnumCaseMultiPayload() == 66)
      {
        v946 = v1244;
        outlined init with take of PgQuery_OidList(v1010, (uint64_t)v1244, type metadata accessor for PgQuery_CopyStmt);
        char v932 = specialized static PgQuery_CopyStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CopyStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CopyStmt;
      goto LABEL_691;
    case 0x43u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1465;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1465);
      uint64_t v1011 = v1627;
      if (swift_getEnumCaseMultiPayload() == 67)
      {
        v946 = v1245;
        outlined init with take of PgQuery_OidList(v1011, (uint64_t)v1245, type metadata accessor for PgQuery_CreateStmt);
        char v932 = specialized static PgQuery_CreateStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CreateStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateStmt;
      goto LABEL_691;
    case 0x44u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1466;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1466);
      uint64_t v1012 = v1627;
      if (swift_getEnumCaseMultiPayload() == 68)
      {
        v946 = v1246;
        outlined init with take of PgQuery_OidList(v1012, (uint64_t)v1246, type metadata accessor for PgQuery_DefineStmt);
        char v932 = specialized static PgQuery_DefineStmt.== infix(_:_:)((uint64_t)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_DefineStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DefineStmt;
      goto LABEL_691;
    case 0x45u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1467;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1467);
      uint64_t v1013 = v1627;
      if (swift_getEnumCaseMultiPayload() == 69)
      {
        v946 = v1247;
        outlined init with take of PgQuery_OidList(v1013, (uint64_t)v1247, type metadata accessor for PgQuery_DropStmt);
        char v932 = specialized static PgQuery_DropStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_DropStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DropStmt;
      goto LABEL_691;
    case 0x46u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1468;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1468);
      uint64_t v1014 = v1627;
      if (swift_getEnumCaseMultiPayload() == 70)
      {
        v946 = v1248;
        outlined init with take of PgQuery_OidList(v1014, (uint64_t)v1248, type metadata accessor for PgQuery_TruncateStmt);
        char v932 = specialized static PgQuery_TruncateStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_TruncateStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_TruncateStmt;
      goto LABEL_691;
    case 0x47u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1469;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1469);
      uint64_t v1015 = v1627;
      if (swift_getEnumCaseMultiPayload() == 71)
      {
        v946 = v1249;
        outlined init with take of PgQuery_OidList(v1015, (uint64_t)v1249, type metadata accessor for PgQuery_CommentStmt);
        char v932 = specialized static PgQuery_CommentStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CommentStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CommentStmt;
      goto LABEL_691;
    case 0x48u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1470;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1470);
      uint64_t v1016 = v1627;
      if (swift_getEnumCaseMultiPayload() == 72)
      {
        v946 = v1250;
        outlined init with take of PgQuery_OidList(v1016, (uint64_t)v1250, type metadata accessor for PgQuery_FetchStmt);
        char v932 = specialized static PgQuery_FetchStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_FetchStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_FetchStmt;
      goto LABEL_691;
    case 0x49u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1471;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1471);
      uint64_t v1017 = v1627;
      if (swift_getEnumCaseMultiPayload() == 73)
      {
        v946 = v1251;
        outlined init with take of PgQuery_OidList(v1017, (uint64_t)v1251, type metadata accessor for PgQuery_IndexStmt);
        char v932 = specialized static PgQuery_IndexStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_IndexStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_IndexStmt;
      goto LABEL_691;
    case 0x4Au:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1472;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1472);
      uint64_t v1018 = v1627;
      if (swift_getEnumCaseMultiPayload() == 74)
      {
        v946 = v1252;
        outlined init with take of PgQuery_OidList(v1018, (uint64_t)v1252, type metadata accessor for PgQuery_CreateFunctionStmt);
        char v932 = specialized static PgQuery_CreateFunctionStmt.== infix(_:_:)((unsigned __int8 *)v903, (unsigned __int8 *)v946);
        v947 = type metadata accessor for PgQuery_CreateFunctionStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateFunctionStmt;
      goto LABEL_691;
    case 0x4Bu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1473;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1473);
      uint64_t v1019 = v1627;
      if (swift_getEnumCaseMultiPayload() == 75)
      {
        v946 = v1253;
        outlined init with take of PgQuery_OidList(v1019, (uint64_t)v1253, type metadata accessor for PgQuery_AlterFunctionStmt);
        char v932 = specialized static PgQuery_AlterFunctionStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_AlterFunctionStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterFunctionStmt;
      goto LABEL_691;
    case 0x4Cu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1474;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1474);
      uint64_t v1020 = v1627;
      if (swift_getEnumCaseMultiPayload() == 76)
      {
        v946 = v1254;
        outlined init with take of PgQuery_OidList(v1020, (uint64_t)v1254, type metadata accessor for PgQuery_DoStmt);
        char v932 = specialized static PgQuery_AlterCollationStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946, type metadata accessor for PgQuery_DoStmt);
        v947 = type metadata accessor for PgQuery_DoStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DoStmt;
      goto LABEL_691;
    case 0x4Du:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1475;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1475);
      uint64_t v1021 = v1627;
      if (swift_getEnumCaseMultiPayload() == 77)
      {
        v946 = v1255;
        outlined init with take of PgQuery_OidList(v1021, (uint64_t)v1255, type metadata accessor for PgQuery_RenameStmt);
        char v932 = specialized static PgQuery_RenameStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_RenameStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RenameStmt;
      goto LABEL_691;
    case 0x4Eu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1476;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1476);
      uint64_t v1022 = v1627;
      if (swift_getEnumCaseMultiPayload() == 78)
      {
        v946 = v1256;
        outlined init with take of PgQuery_OidList(v1022, (uint64_t)v1256, type metadata accessor for PgQuery_RuleStmt);
        char v932 = specialized static PgQuery_RuleStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_RuleStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RuleStmt;
      goto LABEL_691;
    case 0x4Fu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1477;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1477);
      uint64_t v1023 = v1627;
      if (swift_getEnumCaseMultiPayload() == 79)
      {
        v946 = v1257;
        outlined init with take of PgQuery_OidList(v1023, (uint64_t)v1257, type metadata accessor for PgQuery_NotifyStmt);
        char v932 = specialized static PgQuery_ReplicaIdentityStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_NotifyStmt);
        v947 = type metadata accessor for PgQuery_NotifyStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_NotifyStmt;
      goto LABEL_691;
    case 0x50u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1478;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1478);
      uint64_t v1024 = v1627;
      if (swift_getEnumCaseMultiPayload() == 80)
      {
        v946 = v1258;
        outlined init with take of PgQuery_OidList(v1024, (uint64_t)v1258, type metadata accessor for PgQuery_ListenStmt);
        char v932 = specialized static PgQuery_VariableShowStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_ListenStmt);
        v947 = type metadata accessor for PgQuery_ListenStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ListenStmt;
      goto LABEL_691;
    case 0x51u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1479;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1479);
      uint64_t v1025 = v1627;
      if (swift_getEnumCaseMultiPayload() == 81)
      {
        v946 = v1259;
        outlined init with take of PgQuery_OidList(v1025, (uint64_t)v1259, type metadata accessor for PgQuery_UnlistenStmt);
        char v932 = specialized static PgQuery_VariableShowStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_UnlistenStmt);
        v947 = type metadata accessor for PgQuery_UnlistenStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_UnlistenStmt;
      goto LABEL_691;
    case 0x52u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1480;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1480);
      uint64_t v1026 = v1627;
      if (swift_getEnumCaseMultiPayload() == 82)
      {
        v946 = v1260;
        outlined init with take of PgQuery_OidList(v1026, (uint64_t)v1260, type metadata accessor for PgQuery_TransactionStmt);
        char v932 = specialized static PgQuery_TransactionStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_TransactionStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_TransactionStmt;
      goto LABEL_691;
    case 0x53u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1481;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1481);
      uint64_t v1027 = v1627;
      if (swift_getEnumCaseMultiPayload() == 83)
      {
        v946 = v1261;
        outlined init with take of PgQuery_OidList(v1027, (uint64_t)v1261, type metadata accessor for PgQuery_ViewStmt);
        char v932 = specialized static PgQuery_ViewStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_ViewStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ViewStmt;
      goto LABEL_691;
    case 0x54u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1482;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1482);
      uint64_t v1028 = v1627;
      if (swift_getEnumCaseMultiPayload() == 84)
      {
        v946 = v1262;
        outlined init with take of PgQuery_OidList(v1028, (uint64_t)v1262, type metadata accessor for PgQuery_LoadStmt);
        char v932 = specialized static PgQuery_VariableShowStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_LoadStmt);
        v947 = type metadata accessor for PgQuery_LoadStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_LoadStmt;
      goto LABEL_691;
    case 0x55u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1483;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1483);
      uint64_t v1029 = v1627;
      if (swift_getEnumCaseMultiPayload() == 85)
      {
        v946 = v1263;
        outlined init with take of PgQuery_OidList(v1029, (uint64_t)v1263, type metadata accessor for PgQuery_CreateDomainStmt);
        char v932 = specialized static PgQuery_CreateDomainStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CreateDomainStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateDomainStmt;
      goto LABEL_691;
    case 0x56u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1484;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1484);
      uint64_t v1030 = v1627;
      if (swift_getEnumCaseMultiPayload() == 86)
      {
        v946 = v1264;
        outlined init with take of PgQuery_OidList(v1030, (uint64_t)v1264, type metadata accessor for PgQuery_CreatedbStmt);
        char v932 = specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_CreatedbStmt);
        v947 = type metadata accessor for PgQuery_CreatedbStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreatedbStmt;
      goto LABEL_691;
    case 0x57u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1485;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1485);
      uint64_t v1031 = v1627;
      if (swift_getEnumCaseMultiPayload() == 87)
      {
        v946 = v1265;
        outlined init with take of PgQuery_OidList(v1031, (uint64_t)v1265, type metadata accessor for PgQuery_DropdbStmt);
        char v932 = specialized static PgQuery_CreateExtensionStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_DropdbStmt);
        v947 = type metadata accessor for PgQuery_DropdbStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DropdbStmt;
      goto LABEL_691;
    case 0x58u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1486;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1486);
      uint64_t v1032 = v1627;
      if (swift_getEnumCaseMultiPayload() == 88)
      {
        v946 = v1266;
        outlined init with take of PgQuery_OidList(v1032, (uint64_t)v1266, type metadata accessor for PgQuery_VacuumStmt);
        char v932 = specialized static PgQuery_ObjectWithArgs.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_VacuumStmt);
        v947 = type metadata accessor for PgQuery_VacuumStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_VacuumStmt;
      goto LABEL_691;
    case 0x59u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1487;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1487);
      uint64_t v1033 = v1627;
      if (swift_getEnumCaseMultiPayload() == 89)
      {
        v946 = v1267;
        outlined init with take of PgQuery_OidList(v1033, (uint64_t)v1267, type metadata accessor for PgQuery_ExplainStmt);
        char v932 = specialized static PgQuery_AlternativeSubPlan.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_ExplainStmt, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
        v947 = type metadata accessor for PgQuery_ExplainStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ExplainStmt;
      goto LABEL_691;
    case 0x5Au:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1488;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1488);
      uint64_t v1034 = v1627;
      if (swift_getEnumCaseMultiPayload() == 90)
      {
        v946 = v1268;
        outlined init with take of PgQuery_OidList(v1034, (uint64_t)v1268, type metadata accessor for PgQuery_CreateTableAsStmt);
        char v932 = specialized static PgQuery_CreateTableAsStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CreateTableAsStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateTableAsStmt;
      goto LABEL_691;
    case 0x5Bu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1489;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1489);
      uint64_t v1035 = v1627;
      if (swift_getEnumCaseMultiPayload() == 91)
      {
        v946 = v1269;
        outlined init with take of PgQuery_OidList(v1035, (uint64_t)v1269, type metadata accessor for PgQuery_CreateSeqStmt);
        char v932 = specialized static PgQuery_CreateSeqStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_CreateSeqStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateSeqStmt;
      goto LABEL_691;
    case 0x5Cu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1490;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1490);
      uint64_t v1036 = v1627;
      if (swift_getEnumCaseMultiPayload() == 92)
      {
        v946 = v1270;
        outlined init with take of PgQuery_OidList(v1036, (uint64_t)v1270, type metadata accessor for PgQuery_AlterSeqStmt);
        char v932 = specialized static PgQuery_AlterSeqStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_AlterSeqStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterSeqStmt;
      goto LABEL_691;
    case 0x5Du:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1491;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1491);
      uint64_t v1037 = v1627;
      if (swift_getEnumCaseMultiPayload() == 93)
      {
        v946 = v1271;
        outlined init with take of PgQuery_OidList(v1037, (uint64_t)v1271, type metadata accessor for PgQuery_VariableSetStmt);
        char v932 = specialized static PgQuery_VariableSetStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_VariableSetStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_VariableSetStmt;
      goto LABEL_691;
    case 0x5Eu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1492;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1492);
      uint64_t v1038 = v1627;
      if (swift_getEnumCaseMultiPayload() == 94)
      {
        v946 = v1272;
        outlined init with take of PgQuery_OidList(v1038, (uint64_t)v1272, type metadata accessor for PgQuery_VariableShowStmt);
        char v932 = specialized static PgQuery_VariableShowStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_VariableShowStmt);
        v947 = type metadata accessor for PgQuery_VariableShowStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_VariableShowStmt;
      goto LABEL_691;
    case 0x5Fu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1493;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1493);
      uint64_t v1039 = v1627;
      if (swift_getEnumCaseMultiPayload() == 95)
      {
        v946 = v1273;
        outlined init with take of PgQuery_OidList(v1039, (uint64_t)v1273, type metadata accessor for PgQuery_DiscardStmt);
        char v932 = specialized static PgQuery_DiscardStmt.== infix(_:_:)(v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_DiscardStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DiscardStmt;
      goto LABEL_691;
    case 0x60u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1494;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1494);
      uint64_t v1040 = v1627;
      if (swift_getEnumCaseMultiPayload() == 96)
      {
        v946 = v1274;
        outlined init with take of PgQuery_OidList(v1040, (uint64_t)v1274, type metadata accessor for PgQuery_CreateTrigStmt);
        char v932 = specialized static PgQuery_CreateTrigStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CreateTrigStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateTrigStmt;
      goto LABEL_691;
    case 0x61u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1495;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1495);
      uint64_t v1041 = v1627;
      if (swift_getEnumCaseMultiPayload() == 97)
      {
        v946 = v1275;
        outlined init with take of PgQuery_OidList(v1041, (uint64_t)v1275, type metadata accessor for PgQuery_CreatePLangStmt);
        char v932 = specialized static PgQuery_CreatePLangStmt.== infix(_:_:)((unsigned __int8 *)v903, (unsigned __int8 *)v946);
        v947 = type metadata accessor for PgQuery_CreatePLangStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreatePLangStmt;
      goto LABEL_691;
    case 0x62u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1496;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1496);
      uint64_t v1042 = v1627;
      if (swift_getEnumCaseMultiPayload() == 98)
      {
        v946 = v1276;
        outlined init with take of PgQuery_OidList(v1042, (uint64_t)v1276, type metadata accessor for PgQuery_CreateRoleStmt);
        char v932 = specialized static PgQuery_CreateRoleStmt.== infix(_:_:)(v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_CreateRoleStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateRoleStmt;
      goto LABEL_691;
    case 0x63u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1497;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1497);
      uint64_t v1043 = v1627;
      if (swift_getEnumCaseMultiPayload() == 99)
      {
        v946 = v1277;
        outlined init with take of PgQuery_OidList(v1043, (uint64_t)v1277, type metadata accessor for PgQuery_AlterRoleStmt);
        char v932 = specialized static PgQuery_AlterRoleStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_AlterRoleStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterRoleStmt;
      goto LABEL_691;
    case 0x64u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1498;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1498);
      uint64_t v1044 = v1627;
      if (swift_getEnumCaseMultiPayload() == 100)
      {
        v946 = v1278;
        outlined init with take of PgQuery_OidList(v1044, (uint64_t)v1278, type metadata accessor for PgQuery_DropRoleStmt);
        char v932 = specialized static PgQuery_ConstraintsSetStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_DropRoleStmt);
        v947 = type metadata accessor for PgQuery_DropRoleStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DropRoleStmt;
      goto LABEL_691;
    case 0x65u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1499;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1499);
      uint64_t v1045 = v1627;
      if (swift_getEnumCaseMultiPayload() == 101)
      {
        v946 = v1279;
        outlined init with take of PgQuery_OidList(v1045, (uint64_t)v1279, type metadata accessor for PgQuery_LockStmt);
        char v932 = specialized static PgQuery_AlterStatsStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_LockStmt);
        v947 = type metadata accessor for PgQuery_LockStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_LockStmt;
      goto LABEL_691;
    case 0x66u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1500;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1500);
      uint64_t v1046 = v1627;
      if (swift_getEnumCaseMultiPayload() == 102)
      {
        v946 = v1280;
        outlined init with take of PgQuery_OidList(v1046, (uint64_t)v1280, type metadata accessor for PgQuery_ConstraintsSetStmt);
        char v932 = specialized static PgQuery_ConstraintsSetStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_ConstraintsSetStmt);
        v947 = type metadata accessor for PgQuery_ConstraintsSetStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ConstraintsSetStmt;
      goto LABEL_691;
    case 0x67u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1501;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1501);
      uint64_t v1047 = v1627;
      if (swift_getEnumCaseMultiPayload() == 103)
      {
        v946 = v1281;
        outlined init with take of PgQuery_OidList(v1047, (uint64_t)v1281, type metadata accessor for PgQuery_ReindexStmt);
        char v932 = specialized static PgQuery_ReindexStmt.== infix(_:_:)(v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_ReindexStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ReindexStmt;
      goto LABEL_691;
    case 0x68u:
      uint64_t v926 = (uint64_t)v1628;
      v900 = v1504;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1504);
      uint64_t v1048 = v1627;
      if (swift_getEnumCaseMultiPayload() == 104)
      {
        uint64_t v1049 = v1283;
        outlined init with take of PgQuery_OidList(v1048, v1283, type metadata accessor for PgQuery_CheckPointStmt);
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v932 = dispatch thunk of static Equatable.== infix(_:_:)();
        v950 = type metadata accessor for PgQuery_CheckPointStmt;
        goto LABEL_452;
      }
      v1174 = type metadata accessor for PgQuery_CheckPointStmt;
      goto LABEL_687;
    case 0x69u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1502;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1502);
      uint64_t v1050 = v1627;
      if (swift_getEnumCaseMultiPayload() == 105)
      {
        v946 = v1282;
        outlined init with take of PgQuery_OidList(v1050, (uint64_t)v1282, type metadata accessor for PgQuery_CreateSchemaStmt);
        char v932 = specialized static PgQuery_CreateSchemaStmt.== infix(_:_:)(v903, v946);
        v947 = type metadata accessor for PgQuery_CreateSchemaStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateSchemaStmt;
      goto LABEL_691;
    case 0x6Au:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1503;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1503);
      uint64_t v1051 = v1627;
      if (swift_getEnumCaseMultiPayload() == 106)
      {
        v946 = v1284;
        outlined init with take of PgQuery_OidList(v1051, (uint64_t)v1284, type metadata accessor for PgQuery_AlterDatabaseStmt);
        char v932 = specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_AlterDatabaseStmt);
        v947 = type metadata accessor for PgQuery_AlterDatabaseStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterDatabaseStmt;
      goto LABEL_691;
    case 0x6Bu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1505;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1505);
      uint64_t v1052 = v1627;
      if (swift_getEnumCaseMultiPayload() == 107)
      {
        v946 = v1285;
        outlined init with take of PgQuery_OidList(v1052, (uint64_t)v1285, type metadata accessor for PgQuery_AlterDatabaseSetStmt);
        char v932 = specialized static PgQuery_AlterDatabaseSetStmt.== infix(_:_:)(v903, v946);
        v947 = type metadata accessor for PgQuery_AlterDatabaseSetStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterDatabaseSetStmt;
      goto LABEL_691;
    case 0x6Cu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1506;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1506);
      uint64_t v1053 = v1627;
      if (swift_getEnumCaseMultiPayload() == 108)
      {
        v946 = v1286;
        outlined init with take of PgQuery_OidList(v1053, (uint64_t)v1286, type metadata accessor for PgQuery_AlterRoleSetStmt);
        char v932 = specialized static PgQuery_AlterRoleSetStmt.== infix(_:_:)(v903, v946);
        v947 = type metadata accessor for PgQuery_AlterRoleSetStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterRoleSetStmt;
      goto LABEL_691;
    case 0x6Du:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1507;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1507);
      uint64_t v1054 = v1627;
      if (swift_getEnumCaseMultiPayload() == 109)
      {
        v946 = v1287;
        outlined init with take of PgQuery_OidList(v1054, (uint64_t)v1287, type metadata accessor for PgQuery_CreateConversionStmt);
        char v932 = specialized static PgQuery_CreateConversionStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CreateConversionStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateConversionStmt;
      goto LABEL_691;
    case 0x6Eu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1508;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1508);
      uint64_t v1055 = v1627;
      if (swift_getEnumCaseMultiPayload() == 110)
      {
        v946 = v1288;
        outlined init with take of PgQuery_OidList(v1055, (uint64_t)v1288, type metadata accessor for PgQuery_CreateCastStmt);
        char v932 = specialized static PgQuery_CreateCastStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CreateCastStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateCastStmt;
      goto LABEL_691;
    case 0x6Fu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1509;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1509);
      uint64_t v1056 = v1627;
      if (swift_getEnumCaseMultiPayload() == 111)
      {
        v946 = v1289;
        outlined init with take of PgQuery_OidList(v1056, (uint64_t)v1289, type metadata accessor for PgQuery_CreateOpClassStmt);
        char v932 = specialized static PgQuery_CreateOpClassStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CreateOpClassStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateOpClassStmt;
      goto LABEL_691;
    case 0x70u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1510;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1510);
      uint64_t v1057 = v1627;
      if (swift_getEnumCaseMultiPayload() == 112)
      {
        v946 = v1290;
        outlined init with take of PgQuery_OidList(v1057, (uint64_t)v1290, type metadata accessor for PgQuery_CreateOpFamilyStmt);
        char v932 = specialized static PgQuery_CreateOpFamilyStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_CreateOpFamilyStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateOpFamilyStmt;
      goto LABEL_691;
    case 0x71u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1511;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1511);
      uint64_t v1058 = v1627;
      if (swift_getEnumCaseMultiPayload() == 113)
      {
        v946 = v1291;
        outlined init with take of PgQuery_OidList(v1058, (uint64_t)v1291, type metadata accessor for PgQuery_AlterOpFamilyStmt);
        char v932 = specialized static PgQuery_AlterOpFamilyStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterOpFamilyStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterOpFamilyStmt;
      goto LABEL_691;
    case 0x72u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1512;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1512);
      uint64_t v1059 = v1627;
      if (swift_getEnumCaseMultiPayload() == 114)
      {
        v946 = v1292;
        outlined init with take of PgQuery_OidList(v1059, (uint64_t)v1292, type metadata accessor for PgQuery_PrepareStmt);
        char v932 = specialized static PgQuery_PrepareStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_PrepareStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_PrepareStmt;
      goto LABEL_691;
    case 0x73u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1513;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1513);
      uint64_t v1060 = v1627;
      if (swift_getEnumCaseMultiPayload() == 115)
      {
        v946 = v1293;
        outlined init with take of PgQuery_OidList(v1060, (uint64_t)v1293, type metadata accessor for PgQuery_ExecuteStmt);
        char v932 = specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_ExecuteStmt);
        v947 = type metadata accessor for PgQuery_ExecuteStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ExecuteStmt;
      goto LABEL_691;
    case 0x74u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1514;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1514);
      uint64_t v1061 = v1627;
      if (swift_getEnumCaseMultiPayload() == 116)
      {
        v946 = v1294;
        outlined init with take of PgQuery_OidList(v1061, (uint64_t)v1294, type metadata accessor for PgQuery_DeallocateStmt);
        char v932 = specialized static PgQuery_VariableShowStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_DeallocateStmt);
        v947 = type metadata accessor for PgQuery_DeallocateStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DeallocateStmt;
      goto LABEL_691;
    case 0x75u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1515;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1515);
      uint64_t v1062 = v1627;
      if (swift_getEnumCaseMultiPayload() == 117)
      {
        v946 = v1295;
        outlined init with take of PgQuery_OidList(v1062, (uint64_t)v1295, type metadata accessor for PgQuery_DeclareCursorStmt);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_DeclareCursorStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_DeclareCursorStmt.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_DeclareCursorStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DeclareCursorStmt;
      goto LABEL_691;
    case 0x76u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1516;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1516);
      uint64_t v1063 = v1627;
      if (swift_getEnumCaseMultiPayload() == 118)
      {
        v946 = v1296;
        outlined init with take of PgQuery_OidList(v1063, (uint64_t)v1296, type metadata accessor for PgQuery_CreateTableSpaceStmt);
        char v932 = specialized static PgQuery_CreateTableSpaceStmt.== infix(_:_:)(v903, v946);
        v947 = type metadata accessor for PgQuery_CreateTableSpaceStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateTableSpaceStmt;
      goto LABEL_691;
    case 0x77u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1517;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1517);
      uint64_t v1064 = v1627;
      if (swift_getEnumCaseMultiPayload() == 119)
      {
        v946 = v1297;
        outlined init with take of PgQuery_OidList(v1064, (uint64_t)v1297, type metadata accessor for PgQuery_DropTableSpaceStmt);
        char v932 = specialized static PgQuery_DropTableSpaceStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_DropTableSpaceStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DropTableSpaceStmt;
      goto LABEL_691;
    case 0x78u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1518;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1518);
      uint64_t v1065 = v1627;
      if (swift_getEnumCaseMultiPayload() == 120)
      {
        v946 = v1298;
        outlined init with take of PgQuery_OidList(v1065, (uint64_t)v1298, type metadata accessor for PgQuery_AlterObjectDependsStmt);
        char v932 = specialized static PgQuery_AlterObjectDependsStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterObjectDependsStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterObjectDependsStmt;
      goto LABEL_691;
    case 0x79u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1519;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1519);
      uint64_t v1066 = v1627;
      if (swift_getEnumCaseMultiPayload() == 121)
      {
        v946 = v1299;
        outlined init with take of PgQuery_OidList(v1066, (uint64_t)v1299, type metadata accessor for PgQuery_AlterObjectSchemaStmt);
        char v932 = specialized static PgQuery_AlterObjectSchemaStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterObjectSchemaStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterObjectSchemaStmt;
      goto LABEL_691;
    case 0x7Au:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1520;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1520);
      uint64_t v1067 = v1627;
      if (swift_getEnumCaseMultiPayload() == 122)
      {
        v946 = v1300;
        outlined init with take of PgQuery_OidList(v1067, (uint64_t)v1300, type metadata accessor for PgQuery_AlterOwnerStmt);
        char v932 = specialized static PgQuery_AlterOwnerStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterOwnerStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterOwnerStmt;
      goto LABEL_691;
    case 0x7Bu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1521;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1521);
      uint64_t v1068 = v1627;
      if (swift_getEnumCaseMultiPayload() == 123)
      {
        v946 = v1301;
        outlined init with take of PgQuery_OidList(v1068, (uint64_t)v1301, type metadata accessor for PgQuery_AlterOperatorStmt);
        char v932 = specialized static PgQuery_AlterOperatorStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_AlterOperatorStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterOperatorStmt;
      goto LABEL_691;
    case 0x7Cu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1522;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1522);
      uint64_t v1069 = v1627;
      if (swift_getEnumCaseMultiPayload() == 124)
      {
        v946 = v1302;
        outlined init with take of PgQuery_OidList(v1069, (uint64_t)v1302, type metadata accessor for PgQuery_AlterTypeStmt);
        char v932 = specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946, type metadata accessor for PgQuery_AlterTypeStmt);
        v947 = type metadata accessor for PgQuery_AlterTypeStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterTypeStmt;
      goto LABEL_691;
    case 0x7Du:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1523;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1523);
      uint64_t v1070 = v1627;
      if (swift_getEnumCaseMultiPayload() == 125)
      {
        v946 = v1303;
        outlined init with take of PgQuery_OidList(v1070, (uint64_t)v1303, type metadata accessor for PgQuery_DropOwnedStmt);
        char v932 = specialized static PgQuery_DropOwnedStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_DropOwnedStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DropOwnedStmt;
      goto LABEL_691;
    case 0x7Eu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1524;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1524);
      uint64_t v1071 = v1627;
      if (swift_getEnumCaseMultiPayload() == 126)
      {
        v946 = v1304;
        outlined init with take of PgQuery_OidList(v1071, (uint64_t)v1304, type metadata accessor for PgQuery_ReassignOwnedStmt);
        char v932 = specialized static PgQuery_ReassignOwnedStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_ReassignOwnedStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ReassignOwnedStmt;
      goto LABEL_691;
    case 0x7Fu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1525;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1525);
      uint64_t v1072 = v1627;
      if (swift_getEnumCaseMultiPayload() == 127)
      {
        v946 = v1305;
        outlined init with take of PgQuery_OidList(v1072, (uint64_t)v1305, type metadata accessor for PgQuery_CompositeTypeStmt);
        char v932 = specialized static PgQuery_CompositeTypeStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_CompositeTypeStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CompositeTypeStmt;
      goto LABEL_691;
    case 0x80u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1526;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1526);
      uint64_t v1073 = v1627;
      if (swift_getEnumCaseMultiPayload() == 128)
      {
        v946 = v1306;
        outlined init with take of PgQuery_OidList(v1073, (uint64_t)v1306, type metadata accessor for PgQuery_CreateEnumStmt);
        char v932 = specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946, type metadata accessor for PgQuery_CreateEnumStmt);
        v947 = type metadata accessor for PgQuery_CreateEnumStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateEnumStmt;
      goto LABEL_691;
    case 0x81u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1527;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1527);
      uint64_t v1074 = v1627;
      if (swift_getEnumCaseMultiPayload() == 129)
      {
        v946 = v1307;
        outlined init with take of PgQuery_OidList(v1074, (uint64_t)v1307, type metadata accessor for PgQuery_CreateRangeStmt);
        char v932 = specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946, type metadata accessor for PgQuery_CreateRangeStmt);
        v947 = type metadata accessor for PgQuery_CreateRangeStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateRangeStmt;
      goto LABEL_691;
    case 0x82u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1528;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1528);
      uint64_t v1075 = v1627;
      if (swift_getEnumCaseMultiPayload() == 130)
      {
        v946 = v1308;
        outlined init with take of PgQuery_OidList(v1075, (uint64_t)v1308, type metadata accessor for PgQuery_AlterEnumStmt);
        char v932 = specialized static PgQuery_AlterEnumStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterEnumStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterEnumStmt;
      goto LABEL_691;
    case 0x83u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1529;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1529);
      uint64_t v1076 = v1627;
      if (swift_getEnumCaseMultiPayload() == 131)
      {
        v946 = v1309;
        outlined init with take of PgQuery_OidList(v1076, (uint64_t)v1309, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
        char v932 = specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
        v947 = type metadata accessor for PgQuery_AlterTSDictionaryStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterTSDictionaryStmt;
      goto LABEL_691;
    case 0x84u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1530;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1530);
      uint64_t v1077 = v1627;
      if (swift_getEnumCaseMultiPayload() == 132)
      {
        v946 = v1310;
        outlined init with take of PgQuery_OidList(v1077, (uint64_t)v1310, type metadata accessor for PgQuery_AlterTSConfigurationStmt);
        char v932 = specialized static PgQuery_AlterTSConfigurationStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_AlterTSConfigurationStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterTSConfigurationStmt;
      goto LABEL_691;
    case 0x85u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1531;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1531);
      uint64_t v1078 = v1627;
      if (swift_getEnumCaseMultiPayload() == 133)
      {
        v946 = v1311;
        outlined init with take of PgQuery_OidList(v1078, (uint64_t)v1311, type metadata accessor for PgQuery_CreateFdwStmt);
        char v932 = specialized static PgQuery_CreateFdwStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_CreateFdwStmt);
        v947 = type metadata accessor for PgQuery_CreateFdwStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateFdwStmt;
      goto LABEL_691;
    case 0x86u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1532;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1532);
      uint64_t v1079 = v1627;
      if (swift_getEnumCaseMultiPayload() == 134)
      {
        v946 = v1312;
        outlined init with take of PgQuery_OidList(v1079, (uint64_t)v1312, type metadata accessor for PgQuery_AlterFdwStmt);
        char v932 = specialized static PgQuery_CreateFdwStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_AlterFdwStmt);
        v947 = type metadata accessor for PgQuery_AlterFdwStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterFdwStmt;
      goto LABEL_691;
    case 0x87u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1533;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1533);
      uint64_t v1080 = v1627;
      if (swift_getEnumCaseMultiPayload() == 135)
      {
        v946 = v1313;
        outlined init with take of PgQuery_OidList(v1080, (uint64_t)v1313, type metadata accessor for PgQuery_CreateForeignServerStmt);
        char v932 = specialized static PgQuery_CreateForeignServerStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CreateForeignServerStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateForeignServerStmt;
      goto LABEL_691;
    case 0x88u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1534;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1534);
      uint64_t v1081 = v1627;
      if (swift_getEnumCaseMultiPayload() == 136)
      {
        v946 = v1314;
        outlined init with take of PgQuery_OidList(v1081, (uint64_t)v1314, type metadata accessor for PgQuery_AlterForeignServerStmt);
        char v932 = specialized static PgQuery_AlterForeignServerStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterForeignServerStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterForeignServerStmt;
      goto LABEL_691;
    case 0x89u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1535;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1535);
      uint64_t v1082 = v1627;
      if (swift_getEnumCaseMultiPayload() == 137)
      {
        v946 = v1315;
        outlined init with take of PgQuery_OidList(v1082, (uint64_t)v1315, type metadata accessor for PgQuery_CreateUserMappingStmt);
        char v932 = specialized static PgQuery_CreateUserMappingStmt.== infix(_:_:)(v903, v946);
        v947 = type metadata accessor for PgQuery_CreateUserMappingStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateUserMappingStmt;
      goto LABEL_691;
    case 0x8Au:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1536;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1536);
      uint64_t v1083 = v1627;
      if (swift_getEnumCaseMultiPayload() == 138)
      {
        v946 = v1316;
        outlined init with take of PgQuery_OidList(v1083, (uint64_t)v1316, type metadata accessor for PgQuery_AlterUserMappingStmt);
        char v932 = specialized static PgQuery_AlterUserMappingStmt.== infix(_:_:)(v903, v946);
        v947 = type metadata accessor for PgQuery_AlterUserMappingStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterUserMappingStmt;
      goto LABEL_691;
    case 0x8Bu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1537;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1537);
      uint64_t v1084 = v1627;
      if (swift_getEnumCaseMultiPayload() == 139)
      {
        v946 = v1317;
        outlined init with take of PgQuery_OidList(v1084, (uint64_t)v1317, type metadata accessor for PgQuery_DropUserMappingStmt);
        char v932 = specialized static PgQuery_DropUserMappingStmt.== infix(_:_:)(v903, v946);
        v947 = type metadata accessor for PgQuery_DropUserMappingStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DropUserMappingStmt;
      goto LABEL_691;
    case 0x8Cu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1538;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1538);
      uint64_t v1085 = v1627;
      if (swift_getEnumCaseMultiPayload() == 140)
      {
        v946 = v1318;
        outlined init with take of PgQuery_OidList(v1085, (uint64_t)v1318, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
        char v932 = specialized static PgQuery_AlterTableSpaceOptionsStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt;
      goto LABEL_691;
    case 0x8Du:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1539;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1539);
      uint64_t v1086 = v1627;
      if (swift_getEnumCaseMultiPayload() == 141)
      {
        v946 = v1319;
        outlined init with take of PgQuery_OidList(v1086, (uint64_t)v1319, type metadata accessor for PgQuery_AlterTableMoveAllStmt);
        char v932 = specialized static PgQuery_AlterTableMoveAllStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterTableMoveAllStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterTableMoveAllStmt;
      goto LABEL_691;
    case 0x8Eu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1540;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1540);
      uint64_t v1087 = v1627;
      if (swift_getEnumCaseMultiPayload() == 142)
      {
        v946 = v1320;
        outlined init with take of PgQuery_OidList(v1087, (uint64_t)v1320, type metadata accessor for PgQuery_SecLabelStmt);
        char v932 = specialized static PgQuery_SecLabelStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_SecLabelStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_SecLabelStmt;
      goto LABEL_691;
    case 0x8Fu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1541;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1541);
      uint64_t v1088 = v1627;
      if (swift_getEnumCaseMultiPayload() == 143)
      {
        v946 = v1321;
        outlined init with take of PgQuery_OidList(v1088, (uint64_t)v1321, type metadata accessor for PgQuery_CreateForeignTableStmt);
        char v932 = specialized static PgQuery_CreateForeignTableStmt.== infix(_:_:)(v903, v946);
        v947 = type metadata accessor for PgQuery_CreateForeignTableStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateForeignTableStmt;
      goto LABEL_691;
    case 0x90u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1542;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1542);
      uint64_t v1089 = v1627;
      if (swift_getEnumCaseMultiPayload() == 144)
      {
        v946 = v1322;
        outlined init with take of PgQuery_OidList(v1089, (uint64_t)v1322, type metadata accessor for PgQuery_ImportForeignSchemaStmt);
        char v932 = specialized static PgQuery_ImportForeignSchemaStmt.== infix(_:_:)(v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_ImportForeignSchemaStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ImportForeignSchemaStmt;
      goto LABEL_691;
    case 0x91u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1543;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1543);
      uint64_t v1090 = v1627;
      if (swift_getEnumCaseMultiPayload() == 145)
      {
        v946 = v1323;
        outlined init with take of PgQuery_OidList(v1090, (uint64_t)v1323, type metadata accessor for PgQuery_CreateExtensionStmt);
        char v932 = specialized static PgQuery_CreateExtensionStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_CreateExtensionStmt);
        v947 = type metadata accessor for PgQuery_CreateExtensionStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateExtensionStmt;
      goto LABEL_691;
    case 0x92u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1544;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1544);
      uint64_t v1091 = v1627;
      if (swift_getEnumCaseMultiPayload() == 146)
      {
        v946 = v1324;
        outlined init with take of PgQuery_OidList(v1091, (uint64_t)v1324, type metadata accessor for PgQuery_AlterExtensionStmt);
        char v932 = specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_AlterExtensionStmt);
        v947 = type metadata accessor for PgQuery_AlterExtensionStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterExtensionStmt;
      goto LABEL_691;
    case 0x93u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1545;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1545);
      uint64_t v1092 = v1627;
      if (swift_getEnumCaseMultiPayload() == 147)
      {
        v946 = v1325;
        outlined init with take of PgQuery_OidList(v1092, (uint64_t)v1325, type metadata accessor for PgQuery_AlterExtensionContentsStmt);
        char v932 = specialized static PgQuery_AlterExtensionContentsStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterExtensionContentsStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterExtensionContentsStmt;
      goto LABEL_691;
    case 0x94u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1546;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1546);
      uint64_t v1093 = v1627;
      if (swift_getEnumCaseMultiPayload() == 148)
      {
        v946 = v1326;
        outlined init with take of PgQuery_OidList(v1093, (uint64_t)v1326, type metadata accessor for PgQuery_CreateEventTrigStmt);
        char v932 = specialized static PgQuery_CreateSubscriptionStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_CreateEventTrigStmt);
        v947 = type metadata accessor for PgQuery_CreateEventTrigStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateEventTrigStmt;
      goto LABEL_691;
    case 0x95u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1547;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1547);
      uint64_t v1094 = v1627;
      if (swift_getEnumCaseMultiPayload() == 149)
      {
        v946 = v1327;
        outlined init with take of PgQuery_OidList(v1094, (uint64_t)v1327, type metadata accessor for PgQuery_AlterEventTrigStmt);
        char v932 = specialized static PgQuery_ReplicaIdentityStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_AlterEventTrigStmt);
        v947 = type metadata accessor for PgQuery_AlterEventTrigStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterEventTrigStmt;
      goto LABEL_691;
    case 0x96u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1548;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1548);
      uint64_t v1095 = v1627;
      if (swift_getEnumCaseMultiPayload() == 150)
      {
        v946 = v1328;
        outlined init with take of PgQuery_OidList(v1095, (uint64_t)v1328, type metadata accessor for PgQuery_RefreshMatViewStmt);
        char v932 = specialized static PgQuery_RefreshMatViewStmt.== infix(_:_:)((unsigned __int8 *)v903);
        v947 = type metadata accessor for PgQuery_RefreshMatViewStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RefreshMatViewStmt;
      goto LABEL_691;
    case 0x97u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1549;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1549);
      uint64_t v1096 = v1627;
      if (swift_getEnumCaseMultiPayload() == 151)
      {
        v946 = v1329;
        outlined init with take of PgQuery_OidList(v1096, (uint64_t)v1329, type metadata accessor for PgQuery_ReplicaIdentityStmt);
        char v932 = specialized static PgQuery_ReplicaIdentityStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_ReplicaIdentityStmt);
        v947 = type metadata accessor for PgQuery_ReplicaIdentityStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ReplicaIdentityStmt;
      goto LABEL_691;
    case 0x98u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1550;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1550);
      uint64_t v1097 = v1627;
      if (swift_getEnumCaseMultiPayload() == 152)
      {
        v946 = v1330;
        outlined init with take of PgQuery_OidList(v1097, (uint64_t)v1330, type metadata accessor for PgQuery_AlterSystemStmt);
        char v932 = specialized static PgQuery_AlterSystemStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterSystemStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterSystemStmt;
      goto LABEL_691;
    case 0x99u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1551;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1551);
      uint64_t v1098 = v1627;
      if (swift_getEnumCaseMultiPayload() == 153)
      {
        v946 = v1331;
        outlined init with take of PgQuery_OidList(v1098, (uint64_t)v1331, type metadata accessor for PgQuery_CreatePolicyStmt);
        char v932 = specialized static PgQuery_CreatePolicyStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CreatePolicyStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreatePolicyStmt;
      goto LABEL_691;
    case 0x9Au:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1552;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1552);
      uint64_t v1099 = v1627;
      if (swift_getEnumCaseMultiPayload() == 154)
      {
        v946 = v1332;
        outlined init with take of PgQuery_OidList(v1099, (uint64_t)v1332, type metadata accessor for PgQuery_AlterPolicyStmt);
        char v932 = specialized static PgQuery_AlterPolicyStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterPolicyStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterPolicyStmt;
      goto LABEL_691;
    case 0x9Bu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1553;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1553);
      uint64_t v1100 = v1627;
      if (swift_getEnumCaseMultiPayload() == 155)
      {
        v946 = v1333;
        outlined init with take of PgQuery_OidList(v1100, (uint64_t)v1333, type metadata accessor for PgQuery_CreateTransformStmt);
        char v932 = specialized static PgQuery_CreateTransformStmt.== infix(_:_:)((unsigned __int8 *)v903, (unsigned __int8 *)v946);
        v947 = type metadata accessor for PgQuery_CreateTransformStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateTransformStmt;
      goto LABEL_691;
    case 0x9Cu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1554;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1554);
      uint64_t v1101 = v1627;
      if (swift_getEnumCaseMultiPayload() == 156)
      {
        v946 = v1334;
        outlined init with take of PgQuery_OidList(v1101, (uint64_t)v1334, type metadata accessor for PgQuery_CreateAmStmt);
        char v932 = specialized static PgQuery_CreateAmStmt.== infix(_:_:)(v903, v946);
        v947 = type metadata accessor for PgQuery_CreateAmStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateAmStmt;
      goto LABEL_691;
    case 0x9Du:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1555;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1555);
      uint64_t v1102 = v1627;
      if (swift_getEnumCaseMultiPayload() == 157)
      {
        v946 = v1335;
        outlined init with take of PgQuery_OidList(v1102, (uint64_t)v1335, type metadata accessor for PgQuery_CreatePublicationStmt);
        char v932 = specialized static PgQuery_CreatePublicationStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CreatePublicationStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreatePublicationStmt;
      goto LABEL_691;
    case 0x9Eu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1556;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1556);
      uint64_t v1103 = v1627;
      if (swift_getEnumCaseMultiPayload() == 158)
      {
        v946 = v1336;
        outlined init with take of PgQuery_OidList(v1103, (uint64_t)v1336, type metadata accessor for PgQuery_AlterPublicationStmt);
        char v932 = specialized static PgQuery_AlterPublicationStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_AlterPublicationStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterPublicationStmt;
      goto LABEL_691;
    case 0x9Fu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1557;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1557);
      uint64_t v1104 = v1627;
      if (swift_getEnumCaseMultiPayload() == 159)
      {
        v946 = v1337;
        outlined init with take of PgQuery_OidList(v1104, (uint64_t)v1337, type metadata accessor for PgQuery_CreateSubscriptionStmt);
        char v932 = specialized static PgQuery_CreateSubscriptionStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_CreateSubscriptionStmt);
        v947 = type metadata accessor for PgQuery_CreateSubscriptionStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateSubscriptionStmt;
      goto LABEL_691;
    case 0xA0u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1558;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1558);
      uint64_t v1105 = v1627;
      if (swift_getEnumCaseMultiPayload() == 160)
      {
        v946 = v1338;
        outlined init with take of PgQuery_OidList(v1105, (uint64_t)v1338, type metadata accessor for PgQuery_AlterSubscriptionStmt);
        char v932 = specialized static PgQuery_AlterSubscriptionStmt.== infix(_:_:)(v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_AlterSubscriptionStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterSubscriptionStmt;
      goto LABEL_691;
    case 0xA1u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1559;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1559);
      uint64_t v1106 = v1627;
      if (swift_getEnumCaseMultiPayload() == 161)
      {
        v946 = v1339;
        outlined init with take of PgQuery_OidList(v1106, (uint64_t)v1339, type metadata accessor for PgQuery_DropSubscriptionStmt);
        char v932 = specialized static PgQuery_DropSubscriptionStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_DropSubscriptionStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DropSubscriptionStmt;
      goto LABEL_691;
    case 0xA2u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1560;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1560);
      uint64_t v1107 = v1627;
      if (swift_getEnumCaseMultiPayload() == 162)
      {
        v946 = v1340;
        outlined init with take of PgQuery_OidList(v1107, (uint64_t)v1340, type metadata accessor for PgQuery_CreateStatsStmt);
        char v932 = specialized static PgQuery_CreateStatsStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CreateStatsStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateStatsStmt;
      goto LABEL_691;
    case 0xA3u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1561;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1561);
      uint64_t v1108 = v1627;
      if (swift_getEnumCaseMultiPayload() == 163)
      {
        v946 = v1341;
        outlined init with take of PgQuery_OidList(v1108, (uint64_t)v1341, type metadata accessor for PgQuery_AlterCollationStmt);
        char v932 = specialized static PgQuery_AlterCollationStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946, type metadata accessor for PgQuery_AlterCollationStmt);
        v947 = type metadata accessor for PgQuery_AlterCollationStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterCollationStmt;
      goto LABEL_691;
    case 0xA4u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1562;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1562);
      uint64_t v1109 = v1627;
      if (swift_getEnumCaseMultiPayload() == 164)
      {
        v946 = v1342;
        outlined init with take of PgQuery_OidList(v1109, (uint64_t)v1342, type metadata accessor for PgQuery_CallStmt);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_CallStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CallStmt.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_CallStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CallStmt;
      goto LABEL_691;
    case 0xA5u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1563;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1563);
      uint64_t v1110 = v1627;
      if (swift_getEnumCaseMultiPayload() == 165)
      {
        v946 = v1343;
        outlined init with take of PgQuery_OidList(v1110, (uint64_t)v1343, type metadata accessor for PgQuery_AlterStatsStmt);
        char v932 = specialized static PgQuery_AlterStatsStmt.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_AlterStatsStmt);
        v947 = type metadata accessor for PgQuery_AlterStatsStmt;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AlterStatsStmt;
      goto LABEL_691;
    case 0xA6u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1564;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1564);
      uint64_t v1111 = v1627;
      if (swift_getEnumCaseMultiPayload() == 166)
      {
        v946 = v1344;
        outlined init with take of PgQuery_OidList(v1111, (uint64_t)v1344, type metadata accessor for PgQuery_A_Expr);
        char v932 = specialized static PgQuery_A_Expr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_A_Expr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_A_Expr;
      goto LABEL_691;
    case 0xA7u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1565;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1565);
      uint64_t v1112 = v1627;
      if (swift_getEnumCaseMultiPayload() == 167)
      {
        v946 = v1345;
        outlined init with take of PgQuery_OidList(v1112, (uint64_t)v1345, type metadata accessor for PgQuery_ColumnRef);
        char v932 = specialized static PgQuery_A_ArrayExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_ColumnRef);
        v947 = type metadata accessor for PgQuery_ColumnRef;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ColumnRef;
      goto LABEL_691;
    case 0xA8u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1566;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1566);
      uint64_t v1113 = v1627;
      if (swift_getEnumCaseMultiPayload() == 168)
      {
        v946 = v1346;
        outlined init with take of PgQuery_OidList(v1113, (uint64_t)v1346, type metadata accessor for PgQuery_ParamRef);
        char v932 = specialized static PgQuery_ParamRef.== infix(_:_:)(v903, v946);
        v947 = type metadata accessor for PgQuery_ParamRef;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ParamRef;
      goto LABEL_691;
    case 0xA9u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1567;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1567);
      uint64_t v1114 = v1627;
      if (swift_getEnumCaseMultiPayload() == 169)
      {
        v946 = v1347;
        outlined init with take of PgQuery_OidList(v1114, (uint64_t)v1347, type metadata accessor for PgQuery_A_Const);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_A_Const, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_A_Const.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_A_Const;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_A_Const;
      goto LABEL_691;
    case 0xAAu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1568;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1568);
      uint64_t v1115 = v1627;
      if (swift_getEnumCaseMultiPayload() == 170)
      {
        v946 = v1348;
        outlined init with take of PgQuery_OidList(v1115, (uint64_t)v1348, type metadata accessor for PgQuery_FuncCall);
        char v932 = specialized static PgQuery_FuncCall.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_FuncCall;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_FuncCall;
      goto LABEL_691;
    case 0xABu:
      uint64_t v926 = (uint64_t)v1628;
      v900 = v1570;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1570);
      uint64_t v1116 = v1627;
      if (swift_getEnumCaseMultiPayload() == 171)
      {
        uint64_t v1049 = v1349;
        outlined init with take of PgQuery_OidList(v1116, v1349, type metadata accessor for PgQuery_A_Star);
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v932 = dispatch thunk of static Equatable.== infix(_:_:)();
        v950 = type metadata accessor for PgQuery_A_Star;
        goto LABEL_452;
      }
      v1174 = type metadata accessor for PgQuery_A_Star;
      goto LABEL_687;
    case 0xACu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1569;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1569);
      uint64_t v1117 = v1627;
      if (swift_getEnumCaseMultiPayload() == 172)
      {
        v946 = v1350;
        outlined init with take of PgQuery_OidList(v1117, (uint64_t)v1350, type metadata accessor for PgQuery_A_Indices);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_A_Indices, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_A_Indices.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_A_Indices;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_A_Indices;
      goto LABEL_691;
    case 0xADu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1571;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1571);
      uint64_t v1118 = v1627;
      if (swift_getEnumCaseMultiPayload() == 173)
      {
        v946 = v1351;
        outlined init with take of PgQuery_OidList(v1118, (uint64_t)v1351, type metadata accessor for PgQuery_A_Indirection);
        char v932 = specialized static PgQuery_AlternativeSubPlan.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_A_Indirection, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indirection);
        v947 = type metadata accessor for PgQuery_A_Indirection;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_A_Indirection;
      goto LABEL_691;
    case 0xAEu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1572;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1572);
      uint64_t v1119 = v1627;
      if (swift_getEnumCaseMultiPayload() == 174)
      {
        v946 = v1352;
        outlined init with take of PgQuery_OidList(v1119, (uint64_t)v1352, type metadata accessor for PgQuery_A_ArrayExpr);
        char v932 = specialized static PgQuery_A_ArrayExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_A_ArrayExpr);
        v947 = type metadata accessor for PgQuery_A_ArrayExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_A_ArrayExpr;
      goto LABEL_691;
    case 0xAFu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1573;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1573);
      uint64_t v1120 = v1627;
      if (swift_getEnumCaseMultiPayload() == 175)
      {
        v946 = v1353;
        outlined init with take of PgQuery_OidList(v1120, (uint64_t)v1353, type metadata accessor for PgQuery_ResTarget);
        char v932 = specialized static PgQuery_ResTarget.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_ResTarget;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ResTarget;
      goto LABEL_691;
    case 0xB0u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1574;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1574);
      uint64_t v1121 = v1627;
      if (swift_getEnumCaseMultiPayload() == 176)
      {
        v946 = v1354;
        outlined init with take of PgQuery_OidList(v1121, (uint64_t)v1354, type metadata accessor for PgQuery_MultiAssignRef);
        char v932 = specialized static PgQuery_MultiAssignRef.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_MultiAssignRef, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__source, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colno, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ncolumns);
        v947 = type metadata accessor for PgQuery_MultiAssignRef;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_MultiAssignRef;
      goto LABEL_691;
    case 0xB1u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1575;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1575);
      uint64_t v1122 = v1627;
      if (swift_getEnumCaseMultiPayload() == 177)
      {
        v946 = v1355;
        outlined init with take of PgQuery_OidList(v1122, (uint64_t)v1355, type metadata accessor for PgQuery_TypeCast);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_TypeCast, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_TypeCast.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_TypeCast;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_TypeCast;
      goto LABEL_691;
    case 0xB2u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1576;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1576);
      uint64_t v1123 = v1627;
      if (swift_getEnumCaseMultiPayload() == 178)
      {
        v946 = v1356;
        outlined init with take of PgQuery_OidList(v1123, (uint64_t)v1356, type metadata accessor for PgQuery_CollateClause);
        char v932 = specialized static PgQuery_CollateClause.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CollateClause;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CollateClause;
      goto LABEL_691;
    case 0xB3u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1577;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1577);
      uint64_t v1124 = v1627;
      if (swift_getEnumCaseMultiPayload() == 179)
      {
        v946 = v1357;
        outlined init with take of PgQuery_OidList(v1124, (uint64_t)v1357, type metadata accessor for PgQuery_SortBy);
        char v932 = specialized static PgQuery_SortBy.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_SortBy;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_SortBy;
      goto LABEL_691;
    case 0xB4u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1578;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1578);
      uint64_t v1125 = v1627;
      if (swift_getEnumCaseMultiPayload() == 180)
      {
        v946 = v1358;
        outlined init with take of PgQuery_OidList(v1125, (uint64_t)v1358, type metadata accessor for PgQuery_WindowDef);
        char v932 = specialized static PgQuery_WindowDef.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_WindowDef;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_WindowDef;
      goto LABEL_691;
    case 0xB5u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1579;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1579);
      uint64_t v1126 = v1627;
      if (swift_getEnumCaseMultiPayload() == 181)
      {
        v946 = v1359;
        outlined init with take of PgQuery_OidList(v1126, (uint64_t)v1359, type metadata accessor for PgQuery_RangeSubselect);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_RangeSubselect, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_RangeSubselect.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_RangeSubselect;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RangeSubselect;
      goto LABEL_691;
    case 0xB6u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1580;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1580);
      uint64_t v1127 = v1627;
      if (swift_getEnumCaseMultiPayload() == 182)
      {
        v946 = v1360;
        outlined init with take of PgQuery_OidList(v1127, (uint64_t)v1360, type metadata accessor for PgQuery_RangeFunction);
        char v932 = specialized static PgQuery_RangeFunction.== infix(_:_:)((unsigned __int8 *)v903, (unsigned __int8 *)v946);
        v947 = type metadata accessor for PgQuery_RangeFunction;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RangeFunction;
      goto LABEL_691;
    case 0xB7u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1581;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1581);
      uint64_t v1128 = v1627;
      if (swift_getEnumCaseMultiPayload() == 183)
      {
        v946 = v1361;
        outlined init with take of PgQuery_OidList(v1128, (uint64_t)v1361, type metadata accessor for PgQuery_RangeTableSample);
        char v932 = specialized static PgQuery_RangeTableSample.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_RangeTableSample;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RangeTableSample;
      goto LABEL_691;
    case 0xB8u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1582;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1582);
      uint64_t v1129 = v1627;
      if (swift_getEnumCaseMultiPayload() == 184)
      {
        v946 = v1362;
        outlined init with take of PgQuery_OidList(v1129, (uint64_t)v1362, type metadata accessor for PgQuery_RangeTableFunc);
        char v932 = specialized static PgQuery_RangeTableFunc.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_RangeTableFunc;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RangeTableFunc;
      goto LABEL_691;
    case 0xB9u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1583;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1583);
      uint64_t v1130 = v1627;
      if (swift_getEnumCaseMultiPayload() == 185)
      {
        v946 = v1363;
        outlined init with take of PgQuery_OidList(v1130, (uint64_t)v1363, type metadata accessor for PgQuery_RangeTableFuncCol);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_RangeTableFuncCol, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_RangeTableFuncCol.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_RangeTableFuncCol;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RangeTableFuncCol;
      goto LABEL_691;
    case 0xBAu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1584;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1584);
      uint64_t v1131 = v1627;
      if (swift_getEnumCaseMultiPayload() == 186)
      {
        v946 = v1364;
        outlined init with take of PgQuery_OidList(v1131, (uint64_t)v1364, type metadata accessor for PgQuery_TypeName);
        char v932 = specialized static PgQuery_TypeName.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_TypeName;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_TypeName;
      goto LABEL_691;
    case 0xBBu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1585;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1585);
      uint64_t v1132 = v1627;
      if (swift_getEnumCaseMultiPayload() == 187)
      {
        v946 = v1365;
        outlined init with take of PgQuery_OidList(v1132, (uint64_t)v1365, type metadata accessor for PgQuery_ColumnDef);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_ColumnDef, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_ColumnDef.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_ColumnDef;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ColumnDef;
      goto LABEL_691;
    case 0xBCu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1586;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1586);
      uint64_t v1133 = v1627;
      if (swift_getEnumCaseMultiPayload() == 188)
      {
        v946 = v1366;
        outlined init with take of PgQuery_OidList(v1133, (uint64_t)v1366, type metadata accessor for PgQuery_IndexElem);
        char v932 = specialized static PgQuery_IndexElem.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_IndexElem;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_IndexElem;
      goto LABEL_691;
    case 0xBDu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1587;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1587);
      uint64_t v1134 = v1627;
      if (swift_getEnumCaseMultiPayload() == 189)
      {
        v946 = v1367;
        outlined init with take of PgQuery_OidList(v1134, (uint64_t)v1367, type metadata accessor for PgQuery_Constraint);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_Constraint, closure #1 in static PgQuery_Constraint.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_Constraint;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_Constraint;
      goto LABEL_691;
    case 0xBEu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1588;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1588);
      uint64_t v1135 = v1627;
      if (swift_getEnumCaseMultiPayload() == 190)
      {
        v946 = v1368;
        outlined init with take of PgQuery_OidList(v1135, (uint64_t)v1368, type metadata accessor for PgQuery_DefElem);
        char v932 = specialized static PgQuery_DefElem.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_DefElem;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_DefElem;
      goto LABEL_691;
    case 0xBFu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1589;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1589);
      uint64_t v1136 = v1627;
      if (swift_getEnumCaseMultiPayload() == 191)
      {
        v946 = v1369;
        outlined init with take of PgQuery_OidList(v1136, (uint64_t)v1369, type metadata accessor for PgQuery_RangeTblEntry);
        char v932 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_RangeTblEntry, closure #1 in static PgQuery_RangeTblEntry.== infix(_:_:));
        v947 = type metadata accessor for PgQuery_RangeTblEntry;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RangeTblEntry;
      goto LABEL_691;
    case 0xC0u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1590;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1590);
      uint64_t v1137 = v1627;
      if (swift_getEnumCaseMultiPayload() == 192)
      {
        v946 = v1370;
        outlined init with take of PgQuery_OidList(v1137, (uint64_t)v1370, type metadata accessor for PgQuery_RangeTblFunction);
        char v932 = specialized static PgQuery_RangeTblFunction.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_RangeTblFunction;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RangeTblFunction;
      goto LABEL_691;
    case 0xC1u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1591;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1591);
      uint64_t v1138 = v1627;
      if (swift_getEnumCaseMultiPayload() == 193)
      {
        v946 = v1371;
        outlined init with take of PgQuery_OidList(v1138, (uint64_t)v1371, type metadata accessor for PgQuery_TableSampleClause);
        char v932 = specialized static PgQuery_TableSampleClause.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_TableSampleClause;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_TableSampleClause;
      goto LABEL_691;
    case 0xC2u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1592;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1592);
      uint64_t v1139 = v1627;
      if (swift_getEnumCaseMultiPayload() == 194)
      {
        v946 = v1372;
        outlined init with take of PgQuery_OidList(v1139, (uint64_t)v1372, type metadata accessor for PgQuery_WithCheckOption);
        char v932 = specialized static PgQuery_WithCheckOption.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_WithCheckOption;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_WithCheckOption;
      goto LABEL_691;
    case 0xC3u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1593;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1593);
      uint64_t v1140 = v1627;
      if (swift_getEnumCaseMultiPayload() == 195)
      {
        v946 = v1373;
        outlined init with take of PgQuery_OidList(v1140, (uint64_t)v1373, type metadata accessor for PgQuery_SortGroupClause);
        char v932 = specialized static PgQuery_SortGroupClause.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_SortGroupClause;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_SortGroupClause;
      goto LABEL_691;
    case 0xC4u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1594;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1594);
      uint64_t v1141 = v1627;
      if (swift_getEnumCaseMultiPayload() == 196)
      {
        v946 = v1374;
        outlined init with take of PgQuery_OidList(v1141, (uint64_t)v1374, type metadata accessor for PgQuery_GroupingSet);
        char v932 = specialized static PgQuery_GroupingSet.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_GroupingSet;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_GroupingSet;
      goto LABEL_691;
    case 0xC5u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1595;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1595);
      uint64_t v1142 = v1627;
      if (swift_getEnumCaseMultiPayload() == 197)
      {
        v946 = v1375;
        outlined init with take of PgQuery_OidList(v1142, (uint64_t)v1375, type metadata accessor for PgQuery_WindowClause);
        char v932 = specialized static PgQuery_WindowClause.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_WindowClause;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_WindowClause;
      goto LABEL_691;
    case 0xC6u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1596;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1596);
      uint64_t v1143 = v1627;
      if (swift_getEnumCaseMultiPayload() == 198)
      {
        v946 = v1376;
        outlined init with take of PgQuery_OidList(v1143, (uint64_t)v1376, type metadata accessor for PgQuery_ObjectWithArgs);
        char v932 = specialized static PgQuery_ObjectWithArgs.== infix(_:_:)((uint64_t)v903, (uint64_t)v946, type metadata accessor for PgQuery_ObjectWithArgs);
        v947 = type metadata accessor for PgQuery_ObjectWithArgs;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_ObjectWithArgs;
      goto LABEL_691;
    case 0xC7u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1597;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1597);
      uint64_t v1144 = v1627;
      if (swift_getEnumCaseMultiPayload() == 199)
      {
        v946 = v1377;
        outlined init with take of PgQuery_OidList(v1144, (uint64_t)v1377, type metadata accessor for PgQuery_AccessPriv);
        char v932 = specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_AccessPriv);
        v947 = type metadata accessor for PgQuery_AccessPriv;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_AccessPriv;
      goto LABEL_691;
    case 0xC8u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1598;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1598);
      uint64_t v1145 = v1627;
      if (swift_getEnumCaseMultiPayload() == 200)
      {
        v946 = v1378;
        outlined init with take of PgQuery_OidList(v1145, (uint64_t)v1378, type metadata accessor for PgQuery_CreateOpClassItem);
        char v932 = specialized static PgQuery_CreateOpClassItem.== infix(_:_:)(v903, v946);
        v947 = type metadata accessor for PgQuery_CreateOpClassItem;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CreateOpClassItem;
      goto LABEL_691;
    case 0xC9u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1599;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1599);
      uint64_t v1146 = v1627;
      if (swift_getEnumCaseMultiPayload() == 201)
      {
        v946 = v1379;
        outlined init with take of PgQuery_OidList(v1146, (uint64_t)v1379, type metadata accessor for PgQuery_TableLikeClause);
        char v932 = specialized static PgQuery_TableLikeClause.== infix(_:_:)(v903, v946);
        v947 = type metadata accessor for PgQuery_TableLikeClause;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_TableLikeClause;
      goto LABEL_691;
    case 0xCAu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1600;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1600);
      uint64_t v1147 = v1627;
      if (swift_getEnumCaseMultiPayload() == 202)
      {
        v946 = v1380;
        outlined init with take of PgQuery_OidList(v1147, (uint64_t)v1380, type metadata accessor for PgQuery_FunctionParameter);
        char v932 = specialized static PgQuery_FunctionParameter.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_FunctionParameter;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_FunctionParameter;
      goto LABEL_691;
    case 0xCBu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1601;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1601);
      uint64_t v1148 = v1627;
      if (swift_getEnumCaseMultiPayload() == 203)
      {
        v946 = v1381;
        outlined init with take of PgQuery_OidList(v1148, (uint64_t)v1381, type metadata accessor for PgQuery_LockingClause);
        char v932 = specialized static PgQuery_LockingClause.== infix(_:_:)((uint64_t *)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_LockingClause;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_LockingClause;
      goto LABEL_691;
    case 0xCCu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1602;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1602);
      uint64_t v1149 = v1627;
      if (swift_getEnumCaseMultiPayload() == 204)
      {
        v946 = v1382;
        outlined init with take of PgQuery_OidList(v1149, (uint64_t)v1382, type metadata accessor for PgQuery_RowMarkClause);
        char v932 = specialized static PgQuery_RowMarkClause.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_RowMarkClause;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RowMarkClause;
      goto LABEL_691;
    case 0xCDu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1603;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1603);
      uint64_t v1150 = v1627;
      if (swift_getEnumCaseMultiPayload() == 205)
      {
        v946 = v1383;
        outlined init with take of PgQuery_OidList(v1150, (uint64_t)v1383, type metadata accessor for PgQuery_XmlSerialize);
        char v932 = specialized static PgQuery_XmlSerialize.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_XmlSerialize;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_XmlSerialize;
      goto LABEL_691;
    case 0xCEu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1604;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1604);
      uint64_t v1151 = v1627;
      if (swift_getEnumCaseMultiPayload() == 206)
      {
        v946 = v1384;
        outlined init with take of PgQuery_OidList(v1151, (uint64_t)v1384, type metadata accessor for PgQuery_WithClause);
        char v932 = specialized static PgQuery_WithClause.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_WithClause;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_WithClause;
      goto LABEL_691;
    case 0xCFu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1605;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1605);
      uint64_t v1152 = v1627;
      if (swift_getEnumCaseMultiPayload() == 207)
      {
        v946 = v1385;
        outlined init with take of PgQuery_OidList(v1152, (uint64_t)v1385, type metadata accessor for PgQuery_InferClause);
        char v932 = specialized static PgQuery_InferClause.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_InferClause;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_InferClause;
      goto LABEL_691;
    case 0xD0u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1606;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1606);
      uint64_t v1153 = v1627;
      if (swift_getEnumCaseMultiPayload() == 208)
      {
        v946 = v1386;
        outlined init with take of PgQuery_OidList(v1153, (uint64_t)v1386, type metadata accessor for PgQuery_OnConflictClause);
        char v932 = specialized static PgQuery_OnConflictClause.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_OnConflictClause;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_OnConflictClause;
      goto LABEL_691;
    case 0xD1u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1607;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1607);
      uint64_t v1154 = v1627;
      if (swift_getEnumCaseMultiPayload() == 209)
      {
        v946 = v1387;
        outlined init with take of PgQuery_OidList(v1154, (uint64_t)v1387, type metadata accessor for PgQuery_CommonTableExpr);
        char v932 = specialized static PgQuery_CommonTableExpr.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_CommonTableExpr;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CommonTableExpr;
      goto LABEL_691;
    case 0xD2u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1608;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1608);
      uint64_t v1155 = v1627;
      if (swift_getEnumCaseMultiPayload() == 210)
      {
        v946 = v1388;
        outlined init with take of PgQuery_OidList(v1155, (uint64_t)v1388, type metadata accessor for PgQuery_RoleSpec);
        char v932 = specialized static PgQuery_RoleSpec.== infix(_:_:)(v903, (uint64_t *)v946);
        v947 = type metadata accessor for PgQuery_RoleSpec;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_RoleSpec;
      goto LABEL_691;
    case 0xD3u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1609;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1609);
      uint64_t v1156 = v1627;
      if (swift_getEnumCaseMultiPayload() == 211)
      {
        v946 = v1389;
        outlined init with take of PgQuery_OidList(v1156, (uint64_t)v1389, type metadata accessor for PgQuery_TriggerTransition);
        char v932 = specialized static PgQuery_TriggerTransition.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_TriggerTransition;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_TriggerTransition;
      goto LABEL_691;
    case 0xD4u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1610;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1610);
      uint64_t v1157 = v1627;
      if (swift_getEnumCaseMultiPayload() == 212)
      {
        v946 = v1390;
        outlined init with take of PgQuery_OidList(v1157, (uint64_t)v1390, type metadata accessor for PgQuery_PartitionElem);
        char v932 = specialized static PgQuery_PartitionElem.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_PartitionElem;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_PartitionElem;
      goto LABEL_691;
    case 0xD5u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1611;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1611);
      uint64_t v1158 = v1627;
      if (swift_getEnumCaseMultiPayload() == 213)
      {
        v946 = v1391;
        outlined init with take of PgQuery_OidList(v1158, (uint64_t)v1391, type metadata accessor for PgQuery_PartitionSpec);
        char v932 = specialized static PgQuery_PartitionSpec.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_PartitionSpec;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_PartitionSpec;
      goto LABEL_691;
    case 0xD6u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1612;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1612);
      uint64_t v1159 = v1627;
      if (swift_getEnumCaseMultiPayload() == 214)
      {
        v946 = v1392;
        outlined init with take of PgQuery_OidList(v1159, (uint64_t)v1392, type metadata accessor for PgQuery_PartitionBoundSpec);
        char v932 = specialized static PgQuery_PartitionBoundSpec.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_PartitionBoundSpec;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_PartitionBoundSpec;
      goto LABEL_691;
    case 0xD7u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1613;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1613);
      uint64_t v1160 = v1627;
      if (swift_getEnumCaseMultiPayload() == 215)
      {
        v946 = v1393;
        outlined init with take of PgQuery_OidList(v1160, (uint64_t)v1393, type metadata accessor for PgQuery_PartitionRangeDatum);
        char v932 = specialized static PgQuery_PartitionRangeDatum.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_PartitionRangeDatum;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_PartitionRangeDatum;
      goto LABEL_691;
    case 0xD8u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1614;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1614);
      uint64_t v1161 = v1627;
      if (swift_getEnumCaseMultiPayload() == 216)
      {
        v946 = v1394;
        outlined init with take of PgQuery_OidList(v1161, (uint64_t)v1394, type metadata accessor for PgQuery_PartitionCmd);
        char v932 = specialized static PgQuery_PartitionCmd.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_PartitionCmd;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_PartitionCmd;
      goto LABEL_691;
    case 0xD9u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1615;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1615);
      uint64_t v1162 = v1627;
      if (swift_getEnumCaseMultiPayload() == 217)
      {
        v946 = v1395;
        outlined init with take of PgQuery_OidList(v1162, (uint64_t)v1395, type metadata accessor for PgQuery_VacuumRelation);
        char v932 = specialized static PgQuery_VacuumRelation.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_VacuumRelation;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_VacuumRelation;
      goto LABEL_691;
    case 0xDAu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1616;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1616);
      uint64_t v1163 = v1627;
      if (swift_getEnumCaseMultiPayload() == 218)
      {
        v946 = v1396;
        outlined init with take of PgQuery_OidList(v1163, (uint64_t)v1396, type metadata accessor for PgQuery_InlineCodeBlock);
        char v932 = specialized static PgQuery_InlineCodeBlock.== infix(_:_:)((uint64_t)v903, (uint64_t)v946);
        v947 = type metadata accessor for PgQuery_InlineCodeBlock;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_InlineCodeBlock;
      goto LABEL_691;
    case 0xDBu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1617;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1617);
      uint64_t v1164 = v1627;
      if (swift_getEnumCaseMultiPayload() == 219)
      {
        v946 = v1397;
        outlined init with take of PgQuery_OidList(v1164, (uint64_t)v1397, type metadata accessor for PgQuery_CallContext);
        char v932 = specialized static PgQuery_CallContext.== infix(_:_:)((unsigned __int8 *)v903, (unsigned __int8 *)v946);
        v947 = type metadata accessor for PgQuery_CallContext;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_CallContext;
      goto LABEL_691;
    case 0xDCu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1618;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1618);
      uint64_t v1165 = v1627;
      if (swift_getEnumCaseMultiPayload() == 220)
      {
        v946 = v1398;
        outlined init with take of PgQuery_OidList(v1165, (uint64_t)v1398, type metadata accessor for PgQuery_Integer);
        char v932 = specialized static PgQuery_RangeTblRef.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_Integer);
        v947 = type metadata accessor for PgQuery_Integer;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_Integer;
      goto LABEL_691;
    case 0xDDu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1619;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1619);
      uint64_t v1166 = v1627;
      if (swift_getEnumCaseMultiPayload() == 221)
      {
        v946 = v1399;
        outlined init with take of PgQuery_OidList(v1166, (uint64_t)v1399, type metadata accessor for PgQuery_Float);
        char v932 = specialized static PgQuery_VariableShowStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_Float);
        v947 = type metadata accessor for PgQuery_Float;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_Float;
      goto LABEL_691;
    case 0xDEu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1620;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1620);
      uint64_t v1167 = v1627;
      if (swift_getEnumCaseMultiPayload() == 222)
      {
        v946 = v1400;
        outlined init with take of PgQuery_OidList(v1167, (uint64_t)v1400, type metadata accessor for PgQuery_String);
        char v932 = specialized static PgQuery_VariableShowStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_String);
        v947 = type metadata accessor for PgQuery_String;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_String;
      goto LABEL_691;
    case 0xDFu:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1621;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1621);
      uint64_t v1168 = v1627;
      if (swift_getEnumCaseMultiPayload() == 223)
      {
        v946 = v1401;
        outlined init with take of PgQuery_OidList(v1168, (uint64_t)v1401, type metadata accessor for PgQuery_BitString);
        char v932 = specialized static PgQuery_VariableShowStmt.== infix(_:_:)(v903, v946, type metadata accessor for PgQuery_BitString);
        v947 = type metadata accessor for PgQuery_BitString;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_BitString;
      goto LABEL_691;
    case 0xE0u:
      uint64_t v926 = (uint64_t)v1628;
      v900 = v1624;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1624);
      uint64_t v1169 = v1627;
      if (swift_getEnumCaseMultiPayload() == 224)
      {
        uint64_t v1049 = v1402;
        outlined init with take of PgQuery_OidList(v1169, v1402, type metadata accessor for PgQuery_Null);
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v932 = dispatch thunk of static Equatable.== infix(_:_:)();
        v950 = type metadata accessor for PgQuery_Null;
LABEL_452:
        v933 = v950;
        uint64_t v951 = v1049;
LABEL_453:
        outlined destroy of PgQuery_Alias(v951, v950);
        uint64_t v934 = (uint64_t)v900;
        goto LABEL_461;
      }
      v1174 = type metadata accessor for PgQuery_Null;
LABEL_687:
      v928 = v1174;
      uint64_t v929 = (uint64_t)v900;
      goto LABEL_692;
    case 0xE1u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1622;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1622);
      uint64_t v1170 = v1627;
      if (swift_getEnumCaseMultiPayload() == 225)
      {
        v946 = v1403;
        outlined init with take of PgQuery_OidList(v1170, (uint64_t)v1403, type metadata accessor for PgQuery_List);
        char v932 = specialized static PgQuery_AlterCollationStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946, type metadata accessor for PgQuery_List);
        v947 = type metadata accessor for PgQuery_List;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_List;
      goto LABEL_691;
    case 0xE2u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1623;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1623);
      uint64_t v1171 = v1627;
      if (swift_getEnumCaseMultiPayload() == 226)
      {
        v946 = v1404;
        outlined init with take of PgQuery_OidList(v1171, (uint64_t)v1404, type metadata accessor for PgQuery_IntList);
        char v932 = specialized static PgQuery_AlterCollationStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946, type metadata accessor for PgQuery_IntList);
        v947 = type metadata accessor for PgQuery_IntList;
        goto LABEL_460;
      }
      v1173 = type metadata accessor for PgQuery_IntList;
      goto LABEL_691;
    case 0xE3u:
      uint64_t v926 = (uint64_t)v1628;
      v903 = v1625;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v1625);
      uint64_t v1172 = v1627;
      if (swift_getEnumCaseMultiPayload() == 227)
      {
        v946 = v1405;
        outlined init with take of PgQuery_OidList(v1172, (uint64_t)v1405, type metadata accessor for PgQuery_OidList);
        char v932 = specialized static PgQuery_AlterCollationStmt.== infix(_:_:)((uint64_t *)v903, (uint64_t *)v946, type metadata accessor for PgQuery_OidList);
        v947 = type metadata accessor for PgQuery_OidList;
LABEL_460:
        v933 = v947;
        outlined destroy of PgQuery_Alias((uint64_t)v946, v947);
        uint64_t v934 = (uint64_t)v903;
        goto LABEL_461;
      }
      v1173 = type metadata accessor for PgQuery_OidList;
LABEL_691:
      v928 = v1173;
      uint64_t v929 = (uint64_t)v903;
      goto LABEL_692;
    default:
      uint64_t v926 = (uint64_t)v1628;
      outlined init with copy of PgQuery_Node.OneOf_Node((uint64_t)v1628, (uint64_t)v920);
      uint64_t v927 = v1627;
      if (swift_getEnumCaseMultiPayload())
      {
        v928 = type metadata accessor for PgQuery_Alias;
        uint64_t v929 = (uint64_t)v920;
LABEL_692:
        outlined destroy of PgQuery_Alias(v929, v928);
LABEL_693:
        outlined destroy of AnyValue?(v926, &demangling cache variable for type metadata for (PgQuery_Node.OneOf_Node, PgQuery_Node.OneOf_Node));
        char v932 = 0;
      }
      else
      {
        v1176 = v1178;
        outlined init with take of PgQuery_OidList(v927, (uint64_t)v1178, type metadata accessor for PgQuery_Alias);
        char v1177 = specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(v920, v1176, type metadata accessor for PgQuery_Alias);
        v933 = type metadata accessor for PgQuery_Alias;
        outlined destroy of PgQuery_Alias((uint64_t)v1176, type metadata accessor for PgQuery_Alias);
        uint64_t v934 = (uint64_t)v920;
        char v932 = v1177;
LABEL_461:
        v939 = v933;
LABEL_462:
        outlined destroy of PgQuery_Alias(v934, v939);
        outlined destroy of PgQuery_Alias(v926, type metadata accessor for PgQuery_Node.OneOf_Node);
      }
      return v932 & 1;
  }
}