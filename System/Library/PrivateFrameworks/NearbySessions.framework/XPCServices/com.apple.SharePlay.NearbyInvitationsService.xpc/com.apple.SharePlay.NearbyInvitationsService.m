int main(int argc, const char **argv, const char **envp)
{
  flags = (uint64_t)[objc_allocWithZone((Class)CPFeatureFlags) init];
  listener.super.isa = (Class)[self serviceListener];
  host = (uint64_t)specialized NearbyInvitationServiceHost.__allocating_init(listener:featureFlags:)(listener.super.isa, (id)flags);
  [*(id *)(host + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_listener) resume];
  exit(1);
}

uint64_t variable initialization expression of NearbyInvitationAdvertiser.queue()
{
  return variable initialization expression of NearbyInvitationAdvertiser.queue(0xD000000000000025, 0x80000001000DA580);
}

void *variable initialization expression of BluetoothScanner._devices()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of NearbyInvitationsProviderDataSource._dataReceived()
{
  return 0;
}

unint64_t variable initialization expression of NearbyInvitationAdvertiser.connectionRequests()
{
  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, NWConnection?));
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NWConnection?>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, NWConnection?));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, NearbyInvitationsInviteAdvertiser));
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyInvitationsInviteAdvertiser>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, NearbyInvitationsInviteAdvertiser));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  id v12;
  id v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NISessionDelegate.NIDevice>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v21 = v2 + 64;
  swift_retain();
  v5 = (id *)(a1 + 72);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 5);
    v7 = (uint64_t)*(v5 - 4);
    uint64_t v8 = (uint64_t)*(v5 - 3);
    uint64_t v9 = (uint64_t)*(v5 - 2);
    uint64_t v10 = *((unsigned char *)v5 - 8);
    unint64_t v11 = *((unsigned char *)v5 - 7);
    uint64_t v12 = *v5;
    uint64_t v13 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v15) {
      break;
    }
    *(void *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v16 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v16 = v6;
    v16[1] = v7;
    uint64_t v17 = v3[7] + 32 * result;
    *(void *)uint64_t v17 = v8;
    *(void *)(v17 + 8) = v9;
    *(unsigned char *)(v17 + 16) = v10;
    *(unsigned char *)(v17 + 17) = v11;
    *(void *)(v17 + 24) = v12;
    uint64_t v18 = v3[2];
    uint64_t v19 = __OFADD__(v18, 1);
    BOOL v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v5 += 6;
    v3[2] = v20;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String : [String]]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    uint64_t v8 = v7;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    char v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t CBDiscovery.deviceFound.getter()
{
  return 0;
}

uint64_t variable initialization expression of Pseudonym.used()
{
  return 0;
}

void *variable initialization expression of PseudonymProvider.cleanupConfigurations()
{
  return &_swiftEmptyDictionarySingleton;
}

unint64_t variable initialization expression of NearbyInvitationServiceBluetoothController.ongoingBroadcasts()
{
  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of Pseudonym.refreshTask()
{
  return 0;
}

uint64_t variable initialization expression of NearbyInvitationServiceBluetoothController.queue()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v0);
  return AsyncSerialQueue.init(priority:bufferingPolicy:)();
}

void *variable initialization expression of UserDefaultsPseudonymStorage.inUse()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of NearbyInvitationsScanner.$__lazy_storage_$_deviceFoundStream@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyInvitationsScanner.$__lazy_storage_$_deviceFoundStream((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>, a1);
}

uint64_t variable initialization expression of NearbyInvitationsScanner.deviceFoundContinuation@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyInvitationsScanner.$__lazy_storage_$_deviceFoundStream(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation, a1);
}

uint64_t variable initialization expression of UserDefaultsPseudonymStorage.lock()
{
  return variable initialization expression of NearbyInvitationsInviteAdvertiser.lock((void (*)(void))&type metadata accessor for Lock, (uint64_t (*)(void))&Lock.init());
}

uint64_t variable initialization expression of NearbyInvitationsInviteScanner.lostInvitations@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyInvitationsScanner.$__lazy_storage_$_deviceFoundStream(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>, a1);
}

uint64_t variable initialization expression of NearbyInvitationsInviteScanner.lostInvitationContinuation@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyInvitationsScanner.$__lazy_storage_$_deviceFoundStream(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation, a1);
}

uint64_t variable initialization expression of NearbyInvitationsScanner.$__lazy_storage_$_deviceFoundStream@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

double default argument 1 of Pseudonym.Configuration.init(featureID:minimumExpirationInSeconds:refreshSkewInSeconds:reuseIdentifier:)()
{
  return 3600.0;
}

double default argument 2 of Pseudonym.Configuration.init(featureID:minimumExpirationInSeconds:refreshSkewInSeconds:reuseIdentifier:)()
{
  return 5.0;
}

uint64_t default argument 0 of PseudonymProvider.init(storage:)@<X0>(void *a1@<X8>)
{
  id v2 = [self standardUserDefaults];
  uint64_t v3 = type metadata accessor for UserDefaultsPseudonymStorage();
  uint64_t v4 = (void *)swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  uint64_t result = Lock.init()();
  v4[3] = v2;
  v4[4] = &_swiftEmptySetSingleton;
  v4[2] = result;
  a1[3] = v3;
  a1[4] = &protocol witness table for UserDefaultsPseudonymStorage;
  *a1 = v4;
  return result;
}

id default argument 0 of UserDefaultsPseudonymStorage.init(userDefaults:)()
{
  id v0 = [self standardUserDefaults];
  return v0;
}

id variable initialization expression of PseudonymProvider.lock()
{
  id v0 = objc_allocWithZone((Class)NSRecursiveLock);
  return [v0 init];
}

uint64_t variable initialization expression of NearbyInvitationScanner.queue()
{
  return variable initialization expression of NearbyInvitationAdvertiser.queue(0xD000000000000022, 0x80000001000DA5B0);
}

uint64_t variable initialization expression of NearbyInvitationAdvertiser.queue(uint64_t a1, uint64_t a2)
{
  v9[0] = a2;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  v9[1] = &_swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t variable initialization expression of NearbyProtoSessionMessage._version()
{
  return 0x100000000;
}

uint64_t variable initialization expression of NearbyProtoSessionMessage._type()
{
  return 0;
}

uint64_t variable initialization expression of NearbyProtoConnectionResponse.Content.handle()
{
  return 0;
}

uint64_t variable initialization expression of NearbyProtoConnectionResponse.Content.operation@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyProtoConnectionResponse.Content.operation(type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation, a1);
}

uint64_t variable initialization expression of NearbyGroup_Group.Initialization.groupUuid()
{
  return 0;
}

uint64_t variable initialization expression of NearbyProtoJoinRequest.Content._wantsTokenUri()
{
  return 2;
}

uint64_t variable initialization expression of NearbyProtoJoinResponse.Content.operation@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyProtoConnectionResponse.Content.operation(type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation, a1);
}

uint64_t variable initialization expression of NearbyInvitationServiceHost.dataSource()
{
  return variable initialization expression of NearbyInvitationsInviteAdvertiser.lock((void (*)(void))type metadata accessor for NearbyInvitationsProviderDataSource, (uint64_t (*)(void))NearbyInvitationsProviderDataSource.init());
}

uint64_t variable initialization expression of NearbyInvitationsProviderDataSource.queue()
{
  return variable initialization expression of NearbyInvitationAdvertiser.queue(0xD00000000000002DLL, 0x80000001000DA620);
}

uint64_t variable initialization expression of NearbyGroupHostManager.abcReporter()
{
  return ABCReporter.init(domain:type:)();
}

void default argument 1 of NearbyIDSServiceController.init(queue:service:delegate:joinRequestsController:)(void *a1@<X8>)
{
  id v2 = objc_allocWithZone((Class)IDSService);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithService:v3];

  if (v4)
  {
    a1[3] = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSService);
    a1[4] = &protocol witness table for IDSService;
    *a1 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t variable initialization expression of NearbyInvitationsInviteAdvertiser.lock(void (*a1)(void), uint64_t (*a2)(void))
{
  return a2();
}

uint64_t variable initialization expression of NearbySession._rangedDevice()
{
  return 3;
}

id variable initialization expression of NearbySession.session()
{
  id v0 = objc_allocWithZone((Class)NISession);
  return [v0 init];
}

uint64_t variable initialization expression of FilteredBluetoothScanner._filteredDevices()
{
  type metadata accessor for FilteredBluetoothScanner.FilteredDevice();
  return Array.init()();
}

uint64_t variable initialization expression of NearbyGroupHostIDSService._incomingMessages()
{
  return PassthroughSubject.init()();
}

uint64_t variable initialization expression of _PublisherElements.Iterator.Inner.lock()
{
  return swift_slowAlloc();
}

uint64_t variable initialization expression of _PublisherElements.Iterator.Inner.pending()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  return Array.init()();
}

double variable initialization expression of _PublisherElements.Iterator.Inner.state@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of _PublisherElements.Iterator.inner()
{
  return _PublisherElements.Iterator.Inner.__allocating_init()();
}

uint64_t variable initialization expression of NearbyGroup_Group.event@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyProtoConnectionResponse.Content.operation(type metadata accessor for NearbyGroup_Group.OneOf_Event, a1);
}

uint64_t variable initialization expression of NearbyGroup_Group.MemberRemoved._member@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of NearbyProtoConnectionResponse.Content.operation(type metadata accessor for NearbyGroup_Member, a1);
}

uint64_t variable initialization expression of NearbyProtoConnectionResponse.Content.operation@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

uint64_t AdvertisementProtocol.stop(framer:)()
{
  return 1;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for OS_dispatch_queue(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for CBNearbyInfoV2InvitationRouteType(uint64_t a1)
{
}

void type metadata accessor for NIDevicePresencePreset(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with copy of (String, Any)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void PseudonymProvider.cleanupConfigurations.setter()
{
}

uint64_t ConnectionMessageType.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConnectionMessageType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConnectionMessageType()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ConnectionMessageType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionMessageType()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConnectionMessageType@<X0>(unsigned int *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized ConnectionMessageType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ConnectionMessageType(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

unint64_t static AdvertisementProtocol.label.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t one-time initialization function for definition()
{
  type metadata accessor for AdvertisementProtocol();
  lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData(&lazy protocol witness table cache variable for type AdvertisementProtocol and conformance AdvertisementProtocol, v0, (void (*)(uint64_t))type metadata accessor for AdvertisementProtocol);
  type metadata accessor for NWProtocolFramer.Definition();
  swift_allocObject();
  uint64_t result = NWProtocolFramer.Definition.init(implementation:)();
  static AdvertisementProtocol.definition = result;
  return result;
}

uint64_t *AdvertisementProtocol.definition.unsafeMutableAddressor()
{
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  return &static AdvertisementProtocol.definition;
}

uint64_t static AdvertisementProtocol.definition.getter()
{
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t AdvertisementProtocol.__allocating_init(framer:)()
{
  swift_release();
  return swift_allocObject();
}

uint64_t AdvertisementProtocol.init(framer:)()
{
  swift_release();
  return v0;
}

uint64_t AdvertisementProtocol.start(framer:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for NWProtocolFramer.StartResult.ready(_:);
  uint64_t started = type metadata accessor for NWProtocolFramer.StartResult();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 104);
  return v4(a1, v2, started);
}

uint64_t AdvertisementProtocol.handleInput(framer:)()
{
  return 8;
}

uint64_t static AdvertisementProtocolHeader.encodedSize.getter()
{
  return 8;
}

uint64_t NWProtocolFramer.Message.init(connectionMessageType:)()
{
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v0 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)();
  swift_retain();
  dispatch thunk of NWProtocolFramer.Message.subscript.setter();
  swift_release();
  return v0;
}

void AdvertisementProtocol.handleOutput(framer:message:messageLength:isComplete:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  dispatch thunk of NWProtocolFramer.Message.subscript.getter();
  if (!v20)
  {
    outlined destroy of Any?((uint64_t)&v18, &demangling cache variable for type metadata for Any?);
    goto LABEL_7;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    if ((a3 & 0x8000000000000000) == 0)
    {
      unint64_t v4 = HIDWORD(a3);
      if (!HIDWORD(a3)) {
        goto LABEL_9;
      }
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if ((a3 & 0x8000000000000000) != 0 || HIDWORD(a3)) {
    goto LABEL_12;
  }
  LODWORD(v4) = __src[0];
LABEL_9:
  *(_DWORD *)__src = v4;
  int v17 = a3;
  uint64_t v18 = specialized Data.InlineData.init(_:)(__src, &__src[4]);
  uint64_t v19 = v5 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v6 = specialized Data.InlineData.init(_:)(&v17, &v18);
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFLL;
  Data.append(_:)();
  outlined consume of Data._Representation(v6, v8);
  uint64_t v9 = v18;
  unint64_t v10 = v19;
  NWProtocolFramer.Instance.writeOutput(data:)();
  outlined consume of Data._Representation(v9, v10);
  NWProtocolFramer.Instance.writeOutputNoCopy(length:)(a3);
  if (v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1000D61D0;
    uint64_t v18 = 0;
    uint64_t v19 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v13._object = (void *)0x80000001000DA6D0;
    v13._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v13);
    *(void *)__src = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v14 = v18;
    uint64_t v15 = v19;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 32) = v14;
    *(void *)(v12 + 40) = v15;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
}

uint64_t NWProtocolFramer.Message.connectionMessageType.getter()
{
  dispatch thunk of NWProtocolFramer.Message.subscript.getter();
  if (v3)
  {
    uint64_t result = swift_dynamicCast();
    if (result) {
      return v1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  return result;
}

com_apple_SharePlay_NearbyInvitationsService::AdvertisementProtocolHeader __swiftcall AdvertisementProtocolHeader.init(type:length:)(Swift::UInt32 type, Swift::UInt32 length)
{
  return (com_apple_SharePlay_NearbyInvitationsService::AdvertisementProtocolHeader)(type | (*(void *)&length << 32));
}

uint64_t AdvertisementProtocolHeader.encodedData.getter(uint64_t a1)
{
  int v6 = HIDWORD(a1);
  int __src = a1;
  v8[0] = specialized Data.InlineData.init(_:)(&__src, v8);
  v8[1] = v1 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v2 = specialized Data.InlineData.init(_:)(&v6, &__src);
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFLL;
  Data.append(_:)();
  outlined consume of Data._Representation(v2, v4);
  return v8[0];
}

uint64_t AdvertisementProtocol.deinit()
{
  return v0;
}

uint64_t AdvertisementProtocol.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for NWProtocolFramerImplementation.init(framer:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.start(framer:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.handleInput(framer:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.handleOutput(framer:message:messageLength:isComplete:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.wakeup(framer:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.stop(framer:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.cleanup(framer:) in conformance AdvertisementProtocol()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

unint64_t AdvertisementProtocolHeader.length.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AdvertisementProtocolHeader.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AdvertisementProtocolHeader.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AdvertisementProtocolHeader.CodingKeys()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AdvertisementProtocolHeader.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AdvertisementProtocolHeader.CodingKeys()
{
  if (*v0) {
    return 0x6874676E656CLL;
  }
  else {
    return 1701869940;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AdvertisementProtocolHeader.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AdvertisementProtocolHeader.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t NearbyProtoNearbySessionMessageType.init()()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance AdvertisementProtocolHeader.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AdvertisementProtocolHeader.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AdvertisementProtocolHeader.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AdvertisementProtocolHeader.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AdvertisementProtocolHeader.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AdvertisementProtocolHeader.init(from:)(void *a1)
{
  return specialized AdvertisementProtocolHeader.init(from:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AdvertisementProtocolHeader@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized AdvertisementProtocolHeader.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AdvertisementProtocolHeader(void *a1)
{
  return AdvertisementProtocolHeader.encode(to:)(a1);
}

uint64_t UserDefaultsPseudonymStorage.inUse.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UserDefaultsPseudonymStorage.inUse.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*UserDefaultsPseudonymStorage.inUse.modify())()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t property wrapper backing initializer of NearbyInvitationAdvertiser.connections()
{
  return Published.init(initialValue:)();
}

uint64_t NearbyInvitationAdvertiser.connections.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t NearbyInvitationAdvertiser.connections.setter()
{
  return static Published.subscript.setter();
}

uint64_t (*NearbyInvitationAdvertiser.connections.modify(void *a1))()
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return NearbyInvitationAdvertiser.connections.modify;
}

uint64_t NearbyInvitationAdvertiser.$connections.getter()
{
  return NearbyInvitationAdvertiser.$connections.getter((uint64_t)&OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections, &demangling cache variable for type metadata for Published<[NWConnection]>);
}

uint64_t NearbyInvitationAdvertiser.$connections.setter(uint64_t a1)
{
  return NearbyInvitationAdvertiser.$connections.setter(a1, &demangling cache variable for type metadata for Published<[NWConnection]>.Publisher, (uint64_t)&OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections, &demangling cache variable for type metadata for Published<[NWConnection]>);
}

uint64_t (*NearbyInvitationAdvertiser.$connections.modify(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return NearbyInvitationAdvertiser.$connections.modify;
}

uint64_t property wrapper backing initializer of NearbyInvitationsProviderDataSource.dataReceived()
{
  return Published.init(initialValue:)();
}

uint64_t NearbyInvitationAdvertiser.dataReceived.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t NearbyInvitationAdvertiser.dataReceived.setter()
{
  return static Published.subscript.setter();
}

uint64_t (*NearbyInvitationAdvertiser.dataReceived.modify(void *a1))()
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return NearbyInvitationAdvertiser.connections.modify;
}

void NearbyInvitationAdvertiser.connections.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t NearbyInvitationAdvertiser.$dataReceived.getter()
{
  return NearbyInvitationAdvertiser.$connections.getter((uint64_t)&OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived, &demangling cache variable for type metadata for Published<Data?>);
}

uint64_t NearbyInvitationAdvertiser.$connections.getter(uint64_t a1, uint64_t *a2)
{
  return swift_endAccess();
}

uint64_t NearbyInvitationAdvertiser.$dataReceived.setter(uint64_t a1)
{
  return NearbyInvitationAdvertiser.$connections.setter(a1, &demangling cache variable for type metadata for Published<Data?>.Publisher, (uint64_t)&OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived, &demangling cache variable for type metadata for Published<Data?>);
}

uint64_t NearbyInvitationAdvertiser.$connections.setter(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(a4);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

uint64_t (*NearbyInvitationAdvertiser.$dataReceived.modify(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  Published.projectedValue.getter();
  swift_endAccess();
  return NearbyInvitationAdvertiser.$connections.modify;
}

void NearbyInvitationAdvertiser.$connections.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 88) + 16);
  v4(*(void *)(*(void *)a1 + 104), v3[14], v3[10]);
  uint64_t v5 = (void *)v3[14];
  size_t v6 = (void *)v3[12];
  uint64_t v7 = (void *)v3[13];
  uint64_t v8 = v3[10];
  uint64_t v9 = v3[11];
  if (a2)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v9 + 8);
    v10(v7, v8);
    v10(v5, v8);
  }
  else
  {
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v9 + 8))(v5, v8);
  }
  free(v5);
  free(v7);
  free(v6);
  free(v3);
}

uint64_t NearbyInvitationAdvertiser.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t NearbyInvitationAdvertiser.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*NearbyInvitationAdvertiser.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return NearbyInvitationAdvertiser.delegate.modify;
}

void NearbyInvitationAdvertiser.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t NearbyInvitationAdvertiser.receiveNextMessage(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "*** NearbyInvitationsAdvertiser received data", v7, 2u);
    swift_slowDealloc();
  }

  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = v2;
  swift_retain();
  swift_retain();
  NWConnection.receiveMessage(completion:)();
  return swift_release();
}

void closure #1 in NearbyInvitationAdvertiser.receiveNextMessage(from:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.client);
  outlined copy of Data?(a1, a2);
  swift_retain();
  outlined copy of Data?(a1, a2);
  swift_retain();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v14, v15))
  {
    outlined consume of Data?(a1, a2);
    outlined consume of Data?(a1, a2);

    swift_release_n();
    if (a3) {
      goto LABEL_13;
    }
LABEL_37:
    uint64_t v39 = type metadata accessor for NWError();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(a5, 1, v39) == 1) {
      (*(void (**)(uint64_t))(*(void *)a7 + 304))(a6);
    }
    return;
  }
  uint64_t v49 = a6;
  uint64_t v48 = a7;
  uint64_t v16 = swift_slowAlloc();
  uint64_t v52 = swift_slowAlloc();
  *(_DWORD *)uint64_t v16 = 136315394;
  if (a2 >> 60 == 15)
  {
    unint64_t v17 = 0xE300000000000000;
    uint64_t v18 = 7104878;
  }
  else
  {
    uint64_t v53 = a1;
    unint64_t v54 = a2;
    outlined copy of Data._Representation(a1, a2);
    uint64_t v18 = String.init<A>(reflecting:)();
    unint64_t v17 = v19;
  }
  uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v52);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined consume of Data?(a1, a2);
  outlined consume of Data?(a1, a2);
  *(_WORD *)(v16 + 12) = 2080;
  if (a3)
  {
    uint64_t v53 = a3;
    type metadata accessor for NWConnection.ContentContext();
    swift_retain();
    uint64_t v20 = String.init<A>(reflecting:)();
    unint64_t v22 = v21;
  }
  else
  {
    unint64_t v22 = 0xE300000000000000;
    uint64_t v20 = 7104878;
  }
  uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v52);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v14, v15, "*** Received message - with data %s with contentContext %s", (uint8_t *)v16, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  a7 = v48;
  a6 = v49;
  if (!a3) {
    goto LABEL_37;
  }
LABEL_13:
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  if (!dispatch thunk of NWConnection.ContentContext.protocolMetadata(definition:)()) {
    goto LABEL_37;
  }
  uint64_t v50 = a5;
  outlined copy of Data?(a1, a2);
  outlined copy of Data?(a1, a2);
  v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)v25 = 136315138;
    if (a2 >> 60 == 15)
    {
      uint64_t v26 = 7104878;
      unint64_t v27 = 0xE300000000000000;
    }
    else
    {
      uint64_t v53 = a1;
      unint64_t v54 = a2;
      outlined copy of Data._Representation(a1, a2);
      uint64_t v26 = String.init<A>(reflecting:)();
      unint64_t v27 = v28;
    }
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data?(a1, a2);
    outlined consume of Data?(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "*** Received message - will now send over to delegate %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    outlined consume of Data?(a1, a2);
    outlined consume of Data?(a1, a2);
  }
  type metadata accessor for NWProtocolFramer.Message();
  if (swift_dynamicCastClass())
  {
    swift_retain();
    dispatch thunk of NWProtocolFramer.Message.subscript.getter();
    if (v55)
    {
      if (swift_dynamicCast())
      {
        switch((char)v52)
        {
          case 1:
            v40 = Logger.logObject.getter();
            os_log_type_t v41 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v40, v41))
            {
              v42 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v42 = 0;
              _os_log_impl((void *)&_mh_execute_header, v40, v41, "*** Advertiser connection was requested", v42, 2u);
              swift_slowDealloc();
            }

            if ((*(uint64_t (**)(void))(*(void *)a7 + 280))())
            {
              uint64_t v44 = v43;
              uint64_t ObjectType = swift_getObjectType();
              uint64_t v45 = swift_dynamicCastClassUnconditional();
              uint64_t v46 = a6;
              v47 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v44 + 8);
              swift_retain();
              v47(a1, a2, v45, ObjectType, v44);
              a6 = v46;
              swift_unknownObjectRelease();
              swift_release();
            }
            goto LABEL_36;
          case 2:
            v35 = Logger.logObject.getter();
            os_log_type_t v36 = static os_log_type_t.default.getter();
            if (!os_log_type_enabled(v35, v36)) {
              goto LABEL_35;
            }
            v37 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v37 = 0;
            v38 = "Advertiser should not get connectionApproved";
            goto LABEL_34;
          case 3:
          case 4:
            v29 = Logger.logObject.getter();
            os_log_type_t v30 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v29, v30))
            {
              v31 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v31 = 0;
              _os_log_impl((void *)&_mh_execute_header, v29, v30, "*** Advertiser connection was received or denied", v31, 2u);
              swift_slowDealloc();
            }

            NWConnection.cancel()();
            goto LABEL_36;
          default:
            break;
        }
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v53, &demangling cache variable for type metadata for Any?);
    }
    v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v37 = 0;
      v38 = "Connection was invalid";
LABEL_34:
      _os_log_impl((void *)&_mh_execute_header, v35, v36, v38, v37, 2u);
      swift_slowDealloc();
    }
LABEL_35:

LABEL_36:
    swift_release_n();
    a5 = v50;
    goto LABEL_37;
  }
  v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "*** Could not cast message context", v34, 2u);
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release();
  }
}

uint64_t NearbyInvitationAdvertiser.__allocating_init(listenerConfiguration:delegate:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = specialized NearbyInvitationAdvertiser.init(listenerConfiguration:delegate:)(a1, a2, v6, ObjectType, a3);
  swift_unknownObjectRelease();
  return v8;
}

uint64_t NearbyInvitationAdvertiser.init(listenerConfiguration:delegate:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = specialized NearbyInvitationAdvertiser.init(listenerConfiguration:delegate:)(a1, a2, v3, ObjectType, a3);
  swift_unknownObjectRelease();
  return v8;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NearbyInvitationAdvertiser.advertise()()
{
  uint64_t v0 = type metadata accessor for NWListener.Service.Invitation();
  __chkstk_darwin(v0 - 8);
  v50[2] = (char *)v50 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for NWListener.Service();
  __chkstk_darwin(v2 - 8);
  v50[1] = (char *)v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for NWListener.Service.Invitation.Route();
  uint64_t v53 = *(void *)(v51 - 8);
  uint64_t v4 = __chkstk_darwin(v51);
  uint64_t v6 = (char *)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v52 = (char *)v50 - v7;
  uint64_t v8 = type metadata accessor for NWListener.Service.Invitation.Scope();
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v59 = (char *)v50 - v12;
  type metadata accessor for NWParameters();
  specialized static NearbyInvitationAdvertiser.createParameters(isBrowsing:)(0);
  uint64_t v13 = NWParameters.__allocating_init(_:)();
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  type metadata accessor for NWProtocolFramer.Options();
  swift_allocObject();
  swift_retain();
  uint64_t v14 = NWProtocolFramer.Options.init(definition:)();
  uint64_t v56 = v13;
  uint64_t v15 = NWParameters.defaultProtocolStack.getter();
  swift_retain();
  uint64_t v16 = v60;
  unint64_t v17 = (void (*)(uint64_t *, void))dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.modify();
  unint64_t v19 = (char *)*v18;
  if (*v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v54 < 0)
    {
      __break(1u);
      goto LABEL_27;
    }
  }
  uint64_t v54 = v14;
  specialized Array.replaceSubrange<A>(_:with:)(0, 0, v14);
  v17(v60, 0);
  swift_release();
  unsigned int v20 = NearbyInvitationParameters.browserType.getter();
  if (v20 >= 3)
  {
    LODWORD(v60[0]) = v20;
LABEL_30:
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return;
  }
  uint64_t v16 = (uint64_t *)v57;
  uint64_t v15 = v8;
  (*(void (**)(char *, void, uint64_t))(v57 + 104))(v11, *(unsigned int *)*(&off_1000F6480 + (int)v20), v8);
  unint64_t v19 = v59;
  ((void (*)(char *, char *, uint64_t))v16[4])(v59, v11, v8);
  uint64_t v21 = NearbyInvitationParameters.routeType.getter();
  if ((v21 & 0x100000000) != 0)
  {
    if (one-time initialization token for client == -1)
    {
LABEL_13:
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Log.client);
      v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Client has not implemented listener parameters", v37, 2u);
        unint64_t v19 = v59;
        swift_slowDealloc();
      }
      swift_release();

      swift_release();
      ((void (*)(char *, uint64_t))v16[1])(v19, v15);
      return;
    }
LABEL_27:
    swift_once();
    goto LABEL_13;
  }
  v50[0] = v8;
  if (v21 >= 3)
  {
    LODWORD(v60[0]) = v21;
    goto LABEL_30;
  }
  uint64_t v22 = v53;
  uint64_t v23 = v51;
  (*(void (**)(char *, void, uint64_t))(v53 + 104))(v6, *(unsigned int *)*(&off_1000F6498 + (int)v21), v51);
  os_log_type_t v24 = v52;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v52, v6, v23);
  uint64_t v25 = type metadata accessor for NWListener();
  NearbyInvitationParameters.serviceName.getter();
  static NWListener.Service.Invitation.wrangler(route:scope:)();
  NWListener.Service.init(applicationService:invitation:)();
  swift_retain();
  uint64_t v26 = v58;
  uint64_t v27 = NWListener.__allocating_init(service:using:)();
  if (v26)
  {
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v23);
    ((void (*)(char *, void))v16[1])(v59, v50[0]);
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Log.client);
    swift_errorRetain();
    swift_errorRetain();
    v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = (void *)swift_slowAlloc();
      *(_DWORD *)v31 = 138412290;
      swift_errorRetain();
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
      v60[0] = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v32 = v33;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Error %@", v31, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v58 = v25;
    swift_allocObject();
    uint64_t v39 = v55;
    swift_weakInit();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?((uint64_t)partial apply for closure #1 in NearbyInvitationAdvertiser.advertise());
    NWListener.newConnectionHandler.setter();
    swift_release_n();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?((uint64_t)closure #2 in NearbyInvitationAdvertiser.advertise());
    NWListener.stateUpdateHandler.setter();
    v40 = *(uint64_t (**)(uint64_t *))(*(void *)v39 + 152);
    swift_retain();
    os_log_type_t v41 = (void (*)(uint64_t *, void))v40(v60);
    uint64_t v43 = v42;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v41(v60, 0);
    NWListener.start(queue:)();
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Log.client);
    swift_retain_n();
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      v60[0] = swift_slowAlloc();
      *(_DWORD *)v47 = 136315138;
      uint64_t v61 = v38;
      swift_retain();
      uint64_t v48 = String.init<A>(reflecting:)();
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "*** Starting new listener, %s", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v51);
    }
    else
    {

      swift_release_n();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v23);
    }
    (*(void (**)(char *, void))(v57 + 8))(v59, v50[0]);
  }
}

uint64_t closure #1 in NearbyInvitationAdvertiser.advertise()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWEndpoint();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = (id *)result;
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.client);
    swift_retain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    int v11 = v10;
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v28[0] = v26;
      *(_DWORD *)uint64_t v12 = 136315394;
      HIDWORD(v25) = v11;
      NWConnection.endpoint.getter();
      uint64_t v13 = NWEndpoint.debugDescription.getter();
      unint64_t v15 = v14;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v27 = a1;
      type metadata accessor for NWConnection();
      swift_retain();
      uint64_t v16 = String.init<A>(describing:)();
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v9, BYTE4(v25), "*** Received connection [%s] - '%s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v18 = (uint64_t (*)(uint64_t *))*((void *)*v7 + 22);
    swift_retain();
    unint64_t v19 = (void (*)(uint64_t *, void))v18(v28);
    uint64_t v21 = v20;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v19(v28, 0);
    uint64_t v22 = swift_allocObject();
    swift_weakInit();
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v22;
    *(void *)(v23 + 24) = a1;
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?((uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.advertise());
    NWConnection.stateUpdateHandler.setter();
    swift_release();
    swift_release();
    id v24 = v7[2];
    NWConnection.start(queue:)();

    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in NearbyInvitationAdvertiser.advertise()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWConnection.State?);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  os_log_type_t v10 = (char *)&v36 - v9;
  uint64_t v11 = type metadata accessor for NWConnection.State();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  v40 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v36 - v16;
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v36 - v18;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v21 = result;
    uint64_t v39 = a3;
    uint64_t v41 = a1;
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.client);
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v23(v19, v41, v11);
    id v24 = Logger.logObject.getter();
    int v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, (os_log_type_t)v38))
    {
      os_log_t v37 = v24;
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      v43[0] = v36;
      *(_DWORD *)uint64_t v25 = 136315138;
      v23(v10, (uint64_t)v19, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
      outlined init with copy of (String, Any)((uint64_t)v10, (uint64_t)v8, &demangling cache variable for type metadata for NWConnection.State?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11) == 1)
      {
        unint64_t v26 = 0xE300000000000000;
        uint64_t v27 = 7104878;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v8, v11);
        v23(v40, (uint64_t)v17, v11);
        uint64_t v27 = String.init<A>(reflecting:)();
        unint64_t v26 = v29;
        (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      }
      outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for NWConnection.State?);
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v12 + 8);
      v28(v19, v11);
      os_log_t v30 = v37;
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v38, "*** NearbyInvitationsAdvertiser New Connection - State=%s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v28 = *(void (**)(char *, uint64_t))(v12 + 8);
      v28(v19, v11);
    }
    v31 = *(void (**)(char *, void, uint64_t))(v12 + 104);
    v31(v17, enum case for NWConnection.State.ready(_:), v11);
    char v32 = static NWConnection.State.== infix(_:_:)();
    v28(v17, v11);
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v21 + 304))(v39);
    }
    v31(v17, enum case for NWConnection.State.cancelled(_:), v11);
    char v33 = static NWConnection.State.== infix(_:_:)();
    v28(v17, v11);
    if (v33)
    {
      uint64_t v34 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v21 + 152))(v43);
      void *v35 = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      v34(v43, 0);
    }
    return swift_release();
  }
  return result;
}

void closure #2 in NearbyInvitationAdvertiser.advertise()(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWListener.State?);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = type metadata accessor for NWListener.State();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v28 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v25 - v15;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.client);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v18(v16, a1, v8);
  unint64_t v19 = Logger.logObject.getter();
  int v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, (os_log_type_t)v20))
  {
    int v27 = v20;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v30 = v26;
    *(_DWORD *)uint64_t v21 = 136315138;
    v18(v7, (uint64_t)v16, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    outlined init with copy of (String, Any)((uint64_t)v7, (uint64_t)v5, &demangling cache variable for type metadata for NWListener.State?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
    {
      unint64_t v22 = 0xE300000000000000;
      uint64_t v23 = 7104878;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v5, v8);
      v18(v28, (uint64_t)v14, v8);
      uint64_t v23 = String.init<A>(reflecting:)();
      unint64_t v22 = v24;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
    outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for NWListener.State?);
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v27, "*** Listener state update, state=%s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
  }
}

uint64_t NearbyInvitationAdvertiser.stopAdvertising()()
{
  *(void *)(v1 + 16) = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v1 + 24) = swift_task_alloc();
  return _swift_task_switch(NearbyInvitationAdvertiser.stopAdvertising(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = v1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v2, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising(), (uint64_t)v4);
  swift_release();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t closure #1 in NearbyInvitationAdvertiser.stopAdvertising()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(closure #1 in NearbyInvitationAdvertiser.stopAdvertising(), 0, 0);
}

uint64_t closure #1 in NearbyInvitationAdvertiser.stopAdvertising()()
{
  unint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 136))();
  unint64_t v2 = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v3) {
      goto LABEL_10;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    NWListener.cancel()();
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of Any?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t NearbyInvitationAdvertiser.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  outlined destroy of weak PeerConnectionDelegate?(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser_delegate);
  return v0;
}

uint64_t NearbyInvitationAdvertiser.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  outlined destroy of weak PeerConnectionDelegate?(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser_delegate);
  return swift_deallocClassInstance();
}

uint64_t NearbyInvitationAdvertiser.approveConnectionRequest(id:localInvitation:connection:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v31 = a5;
  uint64_t v7 = type metadata accessor for NWConnection.SendCompletion();
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v30 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for InvitationRequestData();
  uint64_t v33 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NWProtocolFramer.Message();
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v13 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)();
  uint64_t v36 = &type metadata for ConnectionMessageType;
  LOBYTE(v35) = 2;
  dispatch thunk of NWProtocolFramer.Message.subscript.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1000D61E0;
  *(void *)(v14 + 32) = v13;
  uint64_t v35 = v14;
  specialized Array._endMutation()();
  type metadata accessor for NWConnection.ContentContext();
  swift_allocObject();
  swift_retain();
  uint64_t v15 = NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a3, a4);
  InvitationRequestData.init(invitationData:id:pseudo:)();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData(&lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData, 255, (void (*)(uint64_t))&type metadata accessor for InvitationRequestData);
  uint64_t v34 = v10;
  uint64_t v16 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v18 = v17;
  uint64_t v19 = v15;
  uint64_t v21 = v29;
  uint64_t v20 = v30;
  (*(void (**)(char *, void, uint64_t))(v29 + 104))(v9, enum case for NWConnection.SendCompletion.idempotent(_:), v30);
  outlined copy of Data._Representation(v16, v18);
  uint64_t v28 = v19;
  uint64_t v22 = v31;
  NWConnection.send(content:contentContext:isComplete:completion:)();
  outlined consume of Data._Representation(v16, v18);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v20);
  (*(void (**)(uint64_t))(*(void *)v32 + 304))(v22);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.client);
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "NearbyInvitationsAdvertiser sent data for LMI", v26, 2u);
    swift_slowDealloc();
  }

  swift_release();
  swift_release();
  outlined consume of Data._Representation(v16, v18);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v12, v34);
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v5) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v23 + v7;
    if (!__OFADD__(v23, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 + v7;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *unint64_t v4 = v11;
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v14 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for NWProtocolOptions();
  swift_arrayDestroy();
  if (v7)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_17:
        if (v16 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        unint64_t v17 = (char *)(v14 + 1);
        unint64_t v18 = (char *)(v13 + 32 + 8 * v5);
        if (v14 + 1 != (void *)v18 || v17 >= &v18[8 * v16]) {
          memmove(v17, v18, 8 * v16);
        }
        if (!(v11 >> 62))
        {
          uint64_t v19 = *(void *)(v13 + 16);
          uint64_t v20 = v19 + v7;
          if (!__OFADD__(v19, v7))
          {
LABEL_23:
            *(void *)(v13 + 16) = v20;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v20 = v25 + v7;
        if (!__OFADD__(v25, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v5;
      if (!__OFSUB__(v15, v5)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  *uint64_t v14 = v3;
  return specialized Array._endMutation()();
}

uint64_t specialized ConnectionMessageType.init(rawValue:)(uint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  else {
    return result;
  }
}

uint64_t partial apply for closure #1 in AdvertisementProtocol.handleInput(framer:)(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (v4 <= 0) {
      goto LABEL_4;
    }
    return 0;
  }
  if (a2 - a1 < v4) {
    return 0;
  }
LABEL_4:
  *(void *)uint64_t v5 = specialized AdvertisementProtocolHeader.init(_:)(a1);
  *(unsigned char *)(v5 + 8) = 0;
  return v4;
}

uint64_t specialized AdvertisementProtocolHeader.init(_:)(uint64_t a1)
{
  if (!a1) {
    __break(1u);
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  return 0;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys;
  if (!lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys);
  }
  return result;
}

uint64_t specialized AdvertisementProtocolHeader.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized AdvertisementProtocolHeader.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AdvertisementProtocolHeader.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AdvertisementProtocolHeader.CodingKeys and conformance AdvertisementProtocolHeader.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  v10[15] = 0;
  unsigned int v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v10[14] = 1;
  uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  return v7 | (unint64_t)(v8 << 32);
}

uint64_t sub_10000AD74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_10000ADC0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 168);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_10000AE14@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 208))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10000AE60(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(void **)a2 + 216);
  outlined copy of Data?(*a1, v3);
  return v4(v2, v3);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void partial apply for closure #1 in NearbyInvitationAdvertiser.receiveNextMessage(from:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  closure #1 in NearbyInvitationAdvertiser.receiveNextMessage(from:)(a1, a2, a3, a4, a5, *(void *)(v5 + 16), *(void *)(v5 + 24));
}

uint64_t specialized NearbyInvitationAdvertiser.init(listenerConfiguration:delegate:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = a5;
  uint64_t v39 = a2;
  id v37 = a1;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  uint64_t v36 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v35 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  __chkstk_darwin(v7);
  uint64_t v32 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v13);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v14 - 8);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v41 = &_swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v9);
  *(void *)(a3 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a3 + 32) = &_swiftEmptyArrayStorage;
  uint64_t v15 = a3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections;
  *(void *)&long long v41 = &_swiftEmptyArrayStorage;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NWConnection]);
  uint64_t v16 = v32;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v15, v16, v34);
  uint64_t v17 = a3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived;
  long long v41 = xmmword_1000D61F0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  unint64_t v18 = v35;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v17, v18, v40);
  uint64_t v19 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser_connectionRequests;
  *(void *)(a3 + v19) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v20 = off_100104000;
  uint64_t v40 = a3;
  *(void *)(a3
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser_delegate
            + 8) = 0;
  swift_unknownObjectWeakInit();
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Log.client);
  uint64_t v22 = v37;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 138412290;
    *(void *)&long long v41 = v22;
    int v27 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v26 = v22;

    _os_log_impl((void *)&_mh_execute_header, v23, v24, "NearbyInvitationsAdvertiser init %@", v25, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v20 = off_100104000;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v23 = v22;
  }

  uint64_t v28 = v40;
  *(void *)(v40 + 24) = v22;
  uint64_t v29 = (char *)v20[200] + v28;
  swift_beginAccess();
  *((void *)v29 + 1) = v38;
  swift_unknownObjectWeakAssign();
  return v28;
}

nw_parameters_t specialized static NearbyInvitationAdvertiser.createParameters(isBrowsing:)(char a1)
{
  nw_parameters_t application_service = nw_parameters_create_application_service();
  swift_unknownObjectRetain();
  if (a1)
  {
    xpc_object_t v3 = xpc_array_create(0, 0);
    size_t v4 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_string(v3, v4, "com.apple.rapport.browse");
    xpc_object_t v5 = xpc_array_create(0, 0);
    size_t v6 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_string(v5, v6, "RapportBrowseAgent");
    swift_unknownObjectRetain();
    nw_parameters_set_required_netagent_classes();
    nw_parameters_set_server_mode();
    swift_unknownObjectRelease();
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.client);
    swift_unknownObjectRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      id v11 = [application_service description];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Create Parameters are browsing with %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    nw_parameters_set_server_mode();
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.client);
    swift_unknownObjectRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)unint64_t v18 = 136315138;
      id v19 = [application_service description];
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Create Parameters are listening with %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
  return application_service;
}

uint64_t sub_10000B8E0()
{
  swift_weakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationAdvertiser.advertise()(uint64_t a1)
{
  return closure #1 in NearbyInvitationAdvertiser.advertise()(a1);
}

uint64_t outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10000B930()
{
  swift_unknownObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  xpc_object_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *xpc_object_t v3 = v1;
  v3[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  v3[2] = v2;
  return _swift_task_switch(closure #1 in NearbyInvitationAdvertiser.stopAdvertising(), 0, 0);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  xpc_object_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t outlined destroy of weak PeerConnectionDelegate?(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type ConnectionMessageType and conformance ConnectionMessageType()
{
  unint64_t result = lazy protocol witness table cache variable for type ConnectionMessageType and conformance ConnectionMessageType;
  if (!lazy protocol witness table cache variable for type ConnectionMessageType and conformance ConnectionMessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionMessageType and conformance ConnectionMessageType);
  }
  return result;
}

uint64_t sub_10000BBE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 280))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10000BC38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  xpc_object_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 288);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionMessageType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConnectionMessageType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000BE10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ConnectionMessageType(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for ConnectionMessageType(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionMessageType()
{
  return &type metadata for ConnectionMessageType;
}

uint64_t type metadata accessor for AdvertisementProtocol()
{
  return self;
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AdvertisementProtocolHeader(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AdvertisementProtocolHeader(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementProtocolHeader()
{
  return &type metadata for AdvertisementProtocolHeader;
}

uint64_t ObjC metadata update function for NearbyInvitationAdvertiser()
{
  return type metadata accessor for NearbyInvitationAdvertiser();
}

uint64_t type metadata accessor for NearbyInvitationAdvertiser()
{
  uint64_t result = type metadata singleton initialization cache for NearbyInvitationAdvertiser;
  if (!type metadata singleton initialization cache for NearbyInvitationAdvertiser) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for NearbyInvitationAdvertiser()
{
  type metadata accessor for Published<[NWConnection]>(319, (unint64_t *)&lazy cache variable for type metadata for Published<[NWConnection]>, &demangling cache variable for type metadata for [NWConnection]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<[NWConnection]>(319, (unint64_t *)&lazy cache variable for type metadata for Published<Data?>, &demangling cache variable for type metadata for Data?);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for Published<[NWConnection]>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for AdvertisementProtocolHeader.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AdvertisementProtocolHeader.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000C1F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for AdvertisementProtocolHeader.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

void *type metadata accessor for AdvertisementProtocolHeader.CodingKeys()
{
  return &unk_1000F6420;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unsigned int v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = &v4[16 * a2 + 32];
    if (a1 != a2 || &v4[16 * a1 + 32] >= &v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[16 * a1 + 32], v16, 16 * v15);
    }
    uint64_t v17 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v18;
LABEL_20:
      *int v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *int v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *int v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  type metadata accessor for NWConnection();
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        BOOL v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  return specialized Array._endMutation()();
}

uint64_t sub_10000C790()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.advertise()(uint64_t a1)
{
  return closure #1 in closure #1 in NearbyInvitationAdvertiser.advertise()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_0Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void *one-time initialization function for defaultNearbyGroupPseudonymConfig()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000D6620;
  *(void *)(inited + 32) = 0xD000000000000031;
  *(void *)(inited + 40) = 0x80000001000DA4A0;
  *(void *)(inited + 48) = 36000;
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 80) = 0xD00000000000003CLL;
  *(void *)(inited + 88) = 0x80000001000DA4E0;
  *(void *)(inited + 96) = 3600;
  *(void *)(inited + 120) = &type metadata for Int;
  *(void *)(inited + 128) = 0xD000000000000031;
  *(void *)(inited + 136) = 0x80000001000DA520;
  *(void *)(inited + 144) = 5;
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 176) = 0xD000000000000017;
  *(void *)(inited + 216) = &type metadata for Int;
  *(void *)(inited + 184) = 0x80000001000DA560;
  *(void *)(inited + 192) = 4;
  uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  defaultNearbyGroupPseudonymConfig._rawValue = result;
  return result;
}

unint64_t NearbyGroupServerBag.BagKey.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000031;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000003CLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NearbyGroupServerBag.BagKey(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = NearbyGroupServerBag.BagKey.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == NearbyGroupServerBag.BagKey.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyGroupServerBag.BagKey()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  NearbyGroupServerBag.BagKey.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyGroupServerBag.BagKey()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyGroupServerBag.BagKey()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  NearbyGroupServerBag.BagKey.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NearbyGroupServerBag.BagKey@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized NearbyGroupServerBag.BagKey.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NearbyGroupServerBag.BagKey@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = NearbyGroupServerBag.BagKey.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void IDSServiceError.hash(into:)()
{
}

Swift::Int IDSServiceError.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyGroupServerBag.Errors()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance NearbyGroupServerBag.Errors()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance NearbyGroupServerBag.Errors()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance NearbyGroupServerBag.Errors()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance NearbyGroupServerBag.Errors()
{
  return Error._getEmbeddedNSError()();
}

double NearbyGroupServerBag.nearbyGroupPseudonymTTL.getter()
{
  uint64_t v0 = (void *)specialized NearbyGroupServerBag.numericConfig(for:)(0);
  [v0 doubleValue];
  double v2 = v1;

  return v2;
}

double NearbyGroupServerBag.nearbyGroupPseudonymTTLSingleUse.getter()
{
  uint64_t v0 = (void *)specialized NearbyGroupServerBag.numericConfig(for:)(1);
  [v0 doubleValue];
  double v2 = v1;

  return v2;
}

double NearbyGroupServerBag.nearbyGroupPseudonymRefreshSkew.getter()
{
  uint64_t v0 = (void *)specialized NearbyGroupServerBag.numericConfig(for:)(2);
  [v0 doubleValue];
  double v2 = v1;

  return v2;
}

id NearbyGroupServerBag.nearbyGroupHostLimit.getter()
{
  uint64_t v0 = (void *)specialized NearbyGroupServerBag.numericConfig(for:)(3);
  id v1 = [v0 integerValue];

  return v1;
}

double NearbyGroupServerBag.pseudonymConfig(service:reusable:)@<D0>(void *a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(a1, a2, (uint64_t)v7);
  if (!v3)
  {
    long long v6 = v7[1];
    *a3 = v7[0];
    a3[1] = v6;
    double result = *(double *)&v8;
    a3[2] = v8;
  }
  return result;
}

void __swiftcall NearbyGroupServerBag.pseudonymConfig(featureID:reusable:)(com_apple_SharePlay_NearbyInvitationsService::Pseudonym::Configuration *__return_ptr retstr, Swift::String featureID, Swift::Bool reusable)
{
  specialized NearbyGroupServerBag.pseudonymConfig(featureID:reusable:)(featureID._countAndFlagsBits, (uint64_t)featureID._object, reusable, v5);
  long long v4 = v5[1];
  retstr->featureID = (Swift::String)v5[0];
  *(_OWORD *)&retstr->minimumExpirationInSeconds = v4;
  retstr->reuseIdentifier = (Swift::String_optional)v5[2];
}

unint64_t specialized NearbyGroupServerBag.BagKey.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NearbyGroupServerBag.BagKey.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t specialized NearbyGroupServerBag.numericConfig(for:)(char a1)
{
  id v2 = [self sharedInstance];
  if (!v2)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v3 = 0xD000000000000031;
  long long v4 = v2;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 objectForKey:v5];

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v14, (uint64_t)&v16);
  if (v17)
  {
    type metadata accessor for NSNumber();
    if (swift_dynamicCast()) {
      return v13;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v16);
  }
  if (one-time initialization token for defaultNearbyGroupPseudonymConfig != -1) {
    swift_once();
  }
  rawValue = defaultNearbyGroupPseudonymConfig._rawValue;
  unint64_t v8 = 0x80000001000DA4A0;
  switch(a1)
  {
    case 1:
      uint64_t v3 = 0xD00000000000003CLL;
      unint64_t v9 = "nearby-group-pseudonym-configurations-ttl-seconds-single-use";
      goto LABEL_15;
    case 2:
      unint64_t v9 = "nearby-group-pseudonym-configurations-refreshSkew";
      goto LABEL_15;
    case 3:
      uint64_t v3 = 0xD000000000000017;
      unint64_t v9 = "nearby-group-host-limit";
LABEL_15:
      unint64_t v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (*((void *)defaultNearbyGroupPseudonymConfig._rawValue + 2)
    && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v8), (v11 & 1) != 0))
  {
    outlined init with copy of Any(rawValue[7] + 32 * v10, (uint64_t)&v14);
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v15 + 1))
  {
LABEL_24:
    __break(1u);
    JUMPOUT(0x10000D38CLL);
  }
  outlined init with take of Any(&v14, &v16);
  type metadata accessor for NSNumber();
  swift_dynamicCast();
  return v13;
}

void specialized NearbyGroupServerBag.pseudonymConfig(featureID:reusable:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  swift_bridgeObjectRetain();
  unint64_t v8 = (void *)specialized NearbyGroupServerBag.numericConfig(for:)((a3 & 1) == 0);
  [v8 doubleValue];
  uint64_t v10 = v9;

  char v11 = (void *)specialized NearbyGroupServerBag.numericConfig(for:)(2);
  [v11 doubleValue];
  uint64_t v13 = v12;

  *a4 = a1;
  a4[1] = a2;
  a4[2] = v10;
  a4[3] = v13;
  a4[4] = 0;
  a4[5] = 0;
}

void specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  if (v8)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    if (v7 == 0xD000000000000030 && v8 == 0x80000001000DA650
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v9 == 0xD000000000000032 && v10 == 0x80000001000DAB40)
    {
      swift_bridgeObjectRelease();
LABEL_8:
      char v11 = a2 & 1;
      uint64_t v12 = v20;
      uint64_t v13 = v20;
      uint64_t v14 = 0x72656C676E617257;
      uint64_t v15 = 0xE800000000000000;
LABEL_12:
      specialized NearbyGroupServerBag.pseudonymConfig(featureID:reusable:)(v14, v15, v11, v13);
      uint64_t v17 = *((void *)v12 + 1);
      long long v18 = *((_OWORD *)v12 + 1);
      long long v19 = *((_OWORD *)v12 + 2);
      *(void *)a3 = *(void *)v12;
      *(void *)(a3 + 8) = v17;
      *(_OWORD *)(a3 + 16) = v18;
      *(_OWORD *)(a3 + 32) = v19;
      return;
    }
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_8;
    }
  }
  if (_TUIsInternalInstall())
  {
    char v11 = a2 & 1;
    uint64_t v12 = v21;
    uint64_t v13 = v21;
    uint64_t v14 = 0x6C6F6F74736469;
    uint64_t v15 = 0xE700000000000000;
    goto LABEL_12;
  }
  lazy protocol witness table accessor for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors();
  swift_allocError();
  swift_willThrow();
}

unint64_t lazy protocol witness table accessor for type NearbyGroupServerBag.BagKey and conformance NearbyGroupServerBag.BagKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupServerBag.BagKey and conformance NearbyGroupServerBag.BagKey;
  if (!lazy protocol witness table cache variable for type NearbyGroupServerBag.BagKey and conformance NearbyGroupServerBag.BagKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupServerBag.BagKey and conformance NearbyGroupServerBag.BagKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupServerBag.Errors and conformance NearbyGroupServerBag.Errors);
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupServerBag()
{
  return &type metadata for NearbyGroupServerBag;
}

uint64_t getEnumTagSinglePayload for NearbyGroupServerBag.BagKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NearbyGroupServerBag.BagKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000D808);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupServerBag.BagKey()
{
  return &type metadata for NearbyGroupServerBag.BagKey;
}

uint64_t getEnumTagSinglePayload for NearbyGroupServerBag.Errors(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for NearbyGroupServerBag.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10000D930);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupServerBag.Errors()
{
  return &type metadata for NearbyGroupServerBag.Errors;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

void IDSService.allAliases.getter()
{
  id v1 = [v0 accounts];
  if (!v1) {
    goto LABEL_35;
  }
  uint64_t v2 = v1;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSAccount);
  lazy protocol witness table accessor for type IDSAccount and conformance NSObject();
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v3 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v23;
    uint64_t v21 = v24;
    uint64_t v4 = v25;
    uint64_t v5 = v26;
    unint64_t v6 = v27;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v21 = v3 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(v3 + 56);
  }
  int64_t v10 = (unint64_t)(v4 + 64) >> 6;
  if (v3 < 0) {
    goto LABEL_11;
  }
LABEL_9:
  if (v6)
  {
    uint64_t v11 = (v6 - 1) & v6;
    unint64_t v12 = __clz(__rbit64(v6)) | (v5 << 6);
    uint64_t v13 = v5;
    goto LABEL_28;
  }
  int64_t v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v15 >= v10) {
      goto LABEL_32;
    }
    unint64_t v16 = *(void *)(v21 + 8 * v15);
    uint64_t v13 = v5 + 1;
    if (!v16)
    {
      uint64_t v13 = v5 + 2;
      if (v5 + 2 >= v10) {
        goto LABEL_32;
      }
      unint64_t v16 = *(void *)(v21 + 8 * v13);
      if (!v16)
      {
        uint64_t v13 = v5 + 3;
        if (v5 + 3 >= v10) {
          goto LABEL_32;
        }
        unint64_t v16 = *(void *)(v21 + 8 * v13);
        if (!v16)
        {
          uint64_t v13 = v5 + 4;
          if (v5 + 4 >= v10) {
            goto LABEL_32;
          }
          unint64_t v16 = *(void *)(v21 + 8 * v13);
          if (!v16)
          {
            uint64_t v17 = v5 + 5;
            while (v10 != v17)
            {
              unint64_t v16 = *(void *)(v21 + 8 * v17++);
              if (v16)
              {
                uint64_t v13 = v17 - 1;
                goto LABEL_27;
              }
            }
            goto LABEL_32;
          }
        }
      }
    }
LABEL_27:
    uint64_t v11 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v13 << 6);
LABEL_28:
    id v14 = *(id *)(*(void *)(v3 + 48) + 8 * v12);
    if (v14)
    {
      while (1)
      {
        id v18 = [v14 vettedAliases];
        if (!v18) {
          goto LABEL_34;
        }
        long long v19 = v18;
        uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        specialized Array.append<A>(contentsOf:)(v20);
        uint64_t v5 = v13;
        unint64_t v6 = v11;
        if ((v3 & 0x8000000000000000) == 0) {
          goto LABEL_9;
        }
LABEL_11:
        if (__CocoaSet.Iterator.next()())
        {
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v14 = v22;
          swift_unknownObjectRelease();
          uint64_t v13 = v5;
          uint64_t v11 = v6;
          if (v22) {
            continue;
          }
        }
        break;
      }
    }
LABEL_32:
    outlined consume of Set<IDSAccount>.Iterator._Variant();
    return;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type IDSAccount and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type IDSAccount and conformance NSObject;
  if (!lazy protocol witness table cache variable for type IDSAccount and conformance NSObject)
  {
    type metadata accessor for OS_dispatch_queue(255, &lazy cache variable for type metadata for IDSAccount);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IDSAccount and conformance NSObject);
  }
  return result;
}

uint64_t outlined consume of Set<IDSAccount>.Iterator._Variant()
{
  return swift_release();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *id v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *NearbyInvitationJoinRequestController.invitationReuseIdentifier.unsafeMutableAddressor()
{
  return &static NearbyInvitationJoinRequestController.invitationReuseIdentifier;
}

unint64_t static NearbyInvitationJoinRequestController.invitationReuseIdentifier.getter()
{
  return 0xD00000000000001BLL;
}

BOOL static NearbyInvitationServiceBluetoothController.Errors.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void NearbyInvitationServiceBluetoothController.Errors.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int NearbyInvitationServiceBluetoothController.Errors.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

id NearbyInvitationJoinRequestController.__allocating_init(sessionProvider:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbyInvitationJoinRequestController.init(sessionProvider:)(a1);
}

id NearbyInvitationJoinRequestController.init(sessionProvider:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle] = &_swiftEmptyDictionarySingleton;
  *(void *)&v1[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_pseudonymsByHandle] = &_swiftEmptyDictionarySingleton;
  *(void *)&v1[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_sessionProvider] = a1;
  if (a1 == 1)
  {
    id v2 = objc_allocWithZone((Class)IDSService);
    id v3 = v1;
    NSString v4 = String._bridgeToObjectiveC()();
    id v1 = (char *)[v2 initWithService:v4];

    if (v1)
    {
      *(void *)&v3[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_service] = v1;

      v7.receiver = v3;
      v7.super_class = (Class)type metadata accessor for NearbyInvitationJoinRequestController();
      return objc_msgSendSuper2(&v7, "init");
    }
    __break(1u);
  }
  unint64_t v6 = v1;
  id result = (id)_diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t NearbyInvitationSessionProvider.serviceName.getter(uint64_t a1)
{
  if (a1 == 1) {
    return 0xD000000000000030;
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NearbyInvitationJoinRequestController()
{
  return self;
}

uint64_t NearbyInvitationJoinRequestController.generateInvitation()(uint64_t a1)
{
  *(void *)(v2 + 280) = a1;
  *(void *)(v2 + 288) = v1;
  return _swift_task_switch(NearbyInvitationJoinRequestController.generateInvitation(), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  id v3 = *v2;
  *(void *)(v3 + 320) = a1;
  *(void *)(v3 + 328) = v1;
  swift_task_dealloc();
  if (v1)
  {
    NSString v4 = NearbyInvitationJoinRequestController.generateInvitation();
  }
  else
  {
    swift_bridgeObjectRelease();
    NSString v4 = NearbyInvitationJoinRequestController.generateInvitation();
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t NearbyInvitationJoinRequestController.generateInvitation()()
{
  uint64_t v1 = v0 + 14;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)v0[36];
  uint64_t v3 = type metadata accessor for Logger();
  v0[37] = __swift_project_value_buffer(v3, (uint64_t)static Log.default);
  id v4 = v2;
  int64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[36];
  if (v7)
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    long long v19 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v9 = 138412290;
    v0[34] = v8;
    id v10 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v19 = v8;

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%@ Received request to generate invitation.", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v1 = v0 + 14;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = *(void **)(v0[36]
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_service);
  v0[17] = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSService);
  v0[18] = &protocol witness table for IDSService;
  v0[14] = v11;
  id v12 = v11;
  specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(v1, 1, (uint64_t)(v0 + 8));
  uint64_t v13 = v0[8];
  uint64_t v14 = v0[9];
  v0[38] = v14;
  uint64_t v15 = v0[10];
  uint64_t v16 = v0[11];
  outlined init with take of String?((uint64_t)(v0 + 12), (uint64_t)(v0 + 28));
  outlined release of String?((uint64_t)(v0 + 28));
  v0[2] = v13;
  v0[3] = v14;
  v0[4] = v15;
  v0[5] = v16;
  v0[6] = 0xD00000000000001BLL;
  v0[7] = 0x80000001000DAB80;
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized static Pseudonym.reusable(for:configuration:)
                                                 + async function pointer to specialized static Pseudonym.reusable(for:configuration:));
  uint64_t v17 = (void *)swift_task_alloc();
  v0[39] = v17;
  *uint64_t v17 = v0;
  v17[1] = NearbyInvitationJoinRequestController.generateInvitation();
  return v20((uint64_t)v1, (uint64_t)(v0 + 2));
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  char *v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char isUniquelyReferenced_nonNull_native;
  char *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t (*v25)(uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[5];
  void *v33;
  uint64_t v34;

  uint64_t v33 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0[40];
  uint64_t v3 = (char *)v0[36];
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 14));
  swift_beginAccess();
  id v4 = [*(id *)(v2 + 16) URI];
  int64_t v5 = [v4 prefixedURI];

  os_log_type_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  unint64_t v9 = type metadata accessor for Pseudonym();
  v32[3] = v9;
  uint64_t v31 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type Pseudonym and conformance Pseudonym, (void (*)(uint64_t))type metadata accessor for Pseudonym);
  v32[0] = v2;
  v32[4] = v31;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)v32, v6, v8);
  swift_endAccess();
  type metadata accessor for OwnerCredentials();
  swift_allocObject();
  id v10 = OwnerCredentials.init()();
  uint64_t v11 = (uint64_t *)&v3[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v32[0] = *v11;
  *uint64_t v11 = 0x8000000000000000;
  uint64_t v29 = v6;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, v6, v8, isUniquelyReferenced_nonNull_native, &demangling cache variable for type metadata for _DictionaryStorage<String, OwnerCredentials>);
  *uint64_t v11 = v32[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v13 = v3;
  swift_retain_n();
  uint64_t v14 = v13;
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v30 = v9;
    uint64_t v17 = (void *)v1[36];
    id v18 = swift_slowAlloc();
    unint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    v1[30] = v17;
    v32[0] = v28;
    *(_DWORD *)id v18 = 138412802;
    long long v19 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v27 = v17;
    unint64_t v9 = v30;

    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    v1[31] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v8, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 22) = 2080;
    v1[32] = v10;
    swift_retain();
    uint64_t v20 = String.init<A>(reflecting:)();
    v1[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%@ Generated invitation, [%s] = %s", (uint8_t *)v18, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v22 = (void *)v1[36];

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }

  uint64_t v23 = v1[40];
  uint64_t v24 = (void *)v1[35];
  v24[3] = v9;
  v24[4] = v31;
  *uint64_t v24 = v23;
  uint64_t v25 = (uint64_t (*)(uint64_t))v1[1];
  return v25(v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 112);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of PseudonymProtocol((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for PseudonymProtocol?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for PseudonymProtocol?);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWBrowser.Result?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NWBrowser.Result();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for NWBrowser.Result?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for NWBrowser.Result?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NearbyInvitationJoinRequestController.releaseInvitation(for:)(Swift::String a1)
{
  uint64_t object = (uint64_t)a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  id v5 = v1;
  swift_bridgeObjectRetain_n();
  uint64_t v6 = (char *)v5;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v27 = v6;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v26 = (void *)swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412546;
    unint64_t v10 = object;
    uint64_t v11 = countAndFlagsBits;
    id v12 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v26 = v27;

    uint64_t countAndFlagsBits = v11;
    uint64_t object = v10;
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain();
    v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, v10, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%@ Received request to release invitation owned by: %s", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v27;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v13 = &v6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle];
  swift_beginAccess();
  if (*(void *)(*(void *)v13 + 16)
    && (swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, object),
        char v15 = v14,
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v15 & 1) != 0))
  {
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(countAndFlagsBits, object, &demangling cache variable for type metadata for _DictionaryStorage<String, OwnerCredentials>);
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(countAndFlagsBits, object, (uint64_t)v33);
    swift_endAccess();
    outlined init with copy of (String, Any)((uint64_t)v33, (uint64_t)v32, &demangling cache variable for type metadata for PseudonymProtocol?);
    uint64_t v16 = v6;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 138412546;
      *(void *)&long long v30 = v16;
      uint64_t v21 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v16;

      *(_WORD *)(v19 + 12) = 2080;
      outlined init with copy of (String, Any)((uint64_t)v32, (uint64_t)&v30, &demangling cache variable for type metadata for PseudonymProtocol?);
      if (v31)
      {
        outlined init with take of PseudonymProtocol(&v30, (uint64_t)v29);
        outlined init with copy of PseudonymProtocol((uint64_t)v29, (uint64_t)v28);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PseudonymProtocol);
        uint64_t v22 = String.init<A>(reflecting:)();
        unint64_t v24 = v23;
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v29);
      }
      else
      {
        unint64_t v24 = 0xE300000000000000;
        uint64_t v22 = 7104878;
      }
      *(void *)&long long v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)v32, &demangling cache variable for type metadata for PseudonymProtocol?);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%@ Released: %s", (uint8_t *)v19, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      outlined destroy of Any?((uint64_t)v32, &demangling cache variable for type metadata for PseudonymProtocol?);
    }
    outlined destroy of Any?((uint64_t)v33, &demangling cache variable for type metadata for PseudonymProtocol?);
  }
  else
  {
    lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors();
    swift_allocError();
    unsigned char *v25 = 0;
    swift_willThrow();
  }
}

NSObject *NearbyInvitationJoinRequestController.encrypt(_:responseKey:invitation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v26 = a5;
    char v14 = (uint8_t *)swift_slowAlloc();
    v28[0] = swift_slowAlloc();
    *(_DWORD *)char v14 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, a6, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Attempting encryption for: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a5 = v26;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  char v15 = (uint64_t *)(v27
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle);
  swift_beginAccess();
  uint64_t v16 = *v15;
  if (*(void *)(v16 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
    if (v18)
    {
      uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 136))(a1, a2, a3, a4);
      swift_release();
      return v20;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to find credentials for invitation %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors();
  swift_allocError();
  unsigned char *v23 = 0;
  swift_willThrow();
  return v20;
}

uint64_t NearbyInvitationJoinRequestController.decrypt(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v62 = a3;
  uint64_t v58 = a1;
  uint64_t v6 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v6 - 8);
  uint64_t v57 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NearbyProtoJoinRequest?);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  os_log_type_t v13 = (char *)&v53 - v12;
  uint64_t v63 = type metadata accessor for NearbyProtoJoinRequest(0);
  uint64_t v14 = *(void *)(v63 - 8);
  uint64_t v15 = __chkstk_darwin(v63);
  unint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v53 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v53 - v21;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Log.default);
  uint64_t v59 = a2;
  outlined init with copy of NearbyProtoJoinRequest(a2, (uint64_t)v22);
  uint64_t v61 = v24;
  uint64_t v25 = Logger.logObject.getter();
  int v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, (os_log_type_t)v26))
  {
    int v55 = v26;
    unint64_t v56 = a4;
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(void *)&v65[0] = v54;
    *(_DWORD *)uint64_t v27 = 136315138;
    outlined init with copy of NearbyProtoJoinRequest((uint64_t)v22, (uint64_t)v13);
    uint64_t v28 = v63;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, v63);
    outlined init with copy of (String, Any)((uint64_t)v13, v11, (uint64_t *)&demangling cache variable for type metadata for NearbyProtoJoinRequest?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v11, 1, v28) == 1)
    {
      unint64_t v29 = 0xE300000000000000;
      uint64_t v11 = 7104878;
    }
    else
    {
      outlined init with take of NearbyProtoJoinRequest(v11, (uint64_t)v20);
      outlined init with copy of NearbyProtoJoinRequest((uint64_t)v20, (uint64_t)v17);
      uint64_t v11 = String.init<A>(reflecting:)();
      unint64_t v29 = v30;
      outlined destroy of NearbyProtoJoinRequest((uint64_t)v20);
    }
    outlined destroy of Any?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for NearbyProtoJoinRequest?);
    uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v29, (uint64_t *)v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NearbyProtoJoinRequest((uint64_t)v22);
    _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v55, "Attempting decryption of: %s", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a4 = v56;
  }
  else
  {
    outlined destroy of NearbyProtoJoinRequest((uint64_t)v22);

    uint64_t v28 = v63;
  }
  uint64_t v31 = v64
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle;
  swift_beginAccess();
  uint64_t v32 = *(void *)v31;
  if (*(void *)(*(void *)v31 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v62, a4);
    if (v34)
    {
      uint64_t v35 = *(void *)(*(void *)(v32 + 56) + 8 * v33);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v36 = (uint64_t *)(v59 + *(int *)(v28 + 24));
      unint64_t v37 = v36[1];
      if (v37 >> 60 == 15) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = *v36;
      }
      if (v37 >> 60 == 15) {
        unint64_t v39 = 0xC000000000000000;
      }
      else {
        unint64_t v39 = v36[1];
      }
      uint64_t v40 = (uint64_t *)(v59 + *(int *)(v28 + 20));
      uint64_t v41 = *v40;
      unint64_t v42 = v40[1];
      if (v42 >> 60 == 15) {
        uint64_t v43 = 0;
      }
      else {
        uint64_t v43 = *v40;
      }
      if (v42 >> 60 == 15) {
        unint64_t v44 = 0xC000000000000000;
      }
      else {
        unint64_t v44 = v40[1];
      }
      uint64_t v11 = *(void *)(*(void *)v35 + 128);
      outlined copy of Data?(*v36, v37);
      outlined copy of Data?(v41, v42);
      uint64_t v45 = v60;
      uint64_t v46 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t, unint64_t))v11)(v38, v39, v43, v44);
      if (v45)
      {
        outlined consume of Data._Representation(v43, v44);
        outlined consume of Data._Representation(v38, v39);
      }
      else
      {
        uint64_t v11 = v47;
        uint64_t v64 = v46;
        outlined consume of Data._Representation(v43, v44);
        outlined consume of Data._Representation(v38, v39);
        type metadata accessor for NearbyProtoJoinRequest.Content(0);
        uint64_t v66 = 0;
        memset(v65, 0, sizeof(v65));
        BinaryDecodingOptions.init()();
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest.Content);
        Message.init(serializedData:extensions:partial:options:)();
      }
      swift_release();
      return v11;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain_n();
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(void *)&v65[0] = v11;
    *(_DWORD *)uint64_t v50 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, a4, (uint64_t *)v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Failed to find credentials for invitation %s", v50, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors();
  swift_allocError();
  *uint64_t v51 = 0;
  swift_willThrow();
  return v11;
}

Swift::Void __swiftcall NearbyInvitationJoinRequestController.markAllPseudonymsUsed()()
{
  uint64_t v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_pseudonymsByHandle);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = one-time initialization token for default;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
LABEL_30:
  }
    swift_once();
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PseudonymProtocol);
    uint64_t v8 = Dictionary.Values.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Marking all generated pseudonyms as used: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v11 = v2 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v2 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v18 = v17 | (v16 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15) {
      goto LABEL_27;
    }
    unint64_t v22 = *(void *)(v11 + 8 * v21);
    ++v16;
    if (!v22)
    {
      int64_t v16 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_27;
      }
      unint64_t v22 = *(void *)(v11 + 8 * v16);
      if (!v22)
      {
        int64_t v16 = v21 + 2;
        if (v21 + 2 >= v15) {
          goto LABEL_27;
        }
        unint64_t v22 = *(void *)(v11 + 8 * v16);
        if (!v22)
        {
          int64_t v16 = v21 + 3;
          if (v21 + 3 >= v15) {
            goto LABEL_27;
          }
          unint64_t v22 = *(void *)(v11 + 8 * v16);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_26:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_9:
    outlined init with copy of PseudonymProtocol(*(void *)(v2 + 56) + 40 * v18, (uint64_t)v24);
    uint64_t v19 = v25;
    uint64_t v20 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v20 + 56))(v19, v20);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v24);
  }
  int64_t v23 = v21 + 4;
  if (v23 < v15)
  {
    unint64_t v22 = *(void *)(v11 + 8 * v23);
    if (!v22)
    {
      while (1)
      {
        int64_t v16 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_29;
        }
        if (v16 >= v15) {
          goto LABEL_27;
        }
        unint64_t v22 = *(void *)(v11 + 8 * v16);
        ++v23;
        if (v22) {
          goto LABEL_26;
        }
      }
    }
    int64_t v16 = v23;
    goto LABEL_26;
  }
LABEL_27:
  swift_release();
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NearbyInvitationJoinRequestController.markUsed(for:)(Swift::String a1)
{
  uint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v4 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_pseudonymsByHandle);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if (v7)
    {
      outlined init with copy of PseudonymProtocol(*(void *)(v5 + 56) + 40 * v6, (uint64_t)&v15);
    }
    else
    {
      uint64_t v17 = 0;
      long long v15 = 0u;
      long long v16 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v16 + 1))
    {
      outlined init with take of PseudonymProtocol(&v15, (uint64_t)v18);
      uint64_t v8 = v19;
      uint64_t v9 = v20;
      __swift_project_boxed_opaque_existential_1(v18, v19);
      (*(void (**)(uint64_t, uint64_t))(v9 + 56))(v8, v9);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v18);
      return;
    }
  }
  else
  {
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
  }
  outlined destroy of Any?((uint64_t)&v15, &demangling cache variable for type metadata for PseudonymProtocol?);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to find pseudonym for handle: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors();
  swift_allocError();
  *unint64_t v14 = 0;
  swift_willThrow();
}

NSObject *NearbyInvitationJoinRequestController.existingInvitationInfo(for:)(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  char v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v25[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Attempting lookup for existing invitation for: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v10 = (uint64_t *)(v3
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle);
  swift_beginAccess();
  uint64_t v11 = *v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)unint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to find credentials for handle: %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors();
    swift_allocError();
    unsigned char *v23 = 0;
    swift_willThrow();
    return a2;
  }
  uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v14 + 96))(v15);
  if (v16 >> 60 == 15)
  {
    a2 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(a2, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, a2, v17, "Invitation expired. PublicKey data not found.", v18, 2u);
      swift_slowDealloc();
    }

    lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors();
    swift_allocError();
    *uint64_t v19 = 1;
    swift_willThrow();
    swift_release();
  }
  else
  {
    objc_allocWithZone((Class)type metadata accessor for NearbyInvitationJoinRequestMetadata());
    swift_bridgeObjectRetain();
    a2 = NearbyInvitationJoinRequestMetadata.init(publicKey:pseudonym:)();
    swift_release();
  }
  return a2;
}

id NearbyInvitationServiceHost.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return [v1 init];
}

void NearbyInvitationJoinRequestController.init()()
{
}

id NearbyInvitationJoinRequestController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbyInvitationJoinRequestController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void protocol witness for IDSServiceProtocol.allAliases.getter in conformance IDSService()
{
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    char v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        char v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of PseudonymProtocol((long long *)(*(void *)(v11 + 56) + 40 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyInvitationsInviteAdvertiser>);
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, PassthroughSubject<Data, Error>>);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for NWBrowser.Result();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    BOOL v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for NWBrowser.Result();
    BOOL v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v5 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v5;
  uint64_t v14 = *v5;
  uint64_t *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()(a3);
    uint64_t v11 = v14;
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  specialized _NativeDictionary._delete(at:)(v8, v11);
  uint64_t *v5 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PseudonymProtocol>);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    unint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      outlined init with take of PseudonymProtocol(v25, (uint64_t)v38);
    }
    else
    {
      outlined init with copy of PseudonymProtocol((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *uint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = outlined init with take of PseudonymProtocol(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NearbyAdvertisement>);
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v35 = v2;
  uint64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    uint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      uint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            uint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    char v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    BOOL v31 = *v29;
    unint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  char v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  void *v41;
  uint64_t i;
  char v43;
  char v44;
  char v45;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NISessionDelegate.NIDevice>);
  uint64_t v43 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v39 = v2;
  uint64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    uint64_t v23 = v41;
    uint64_t v24 = v41[v22];
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_33;
      }
      uint64_t v24 = v41[v13];
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            uint64_t v24 = v41[v13];
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    BOOL v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 32 * v21;
    char v34 = *(void *)v33;
    int64_t v35 = *(void *)(v33 + 8);
    unint64_t v44 = *(unsigned char *)(v33 + 17);
    uint64_t v45 = *(unsigned char *)(v33 + 16);
    uint64_t v36 = *(void **)(v33 + 24);
    if ((v43 & 1) == 0)
    {
      char v37 = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        char v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v32;
    v18[1] = v31;
    uint64_t v19 = *(void *)(v7 + 56) + 32 * v17;
    *(void *)uint64_t v19 = v34;
    *(void *)(v19 + 8) = v35;
    *(unsigned char *)(v19 + 16) = v45;
    *(unsigned char *)(v19 + 17) = v44;
    *(void *)(v19 + 24) = v36;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    unsigned char *v23 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  _OWORD v35[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        uint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          uint64_t v19 = v34[v13];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  uint64_t *v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                uint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      unint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v28 = 0;
        char v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          BOOL v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, UInt>);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    char v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    unint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      uint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (**v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  void *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  void *v44;
  uint64_t v45;
  void (**v46)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t (**v51)(unint64_t, char *, uint64_t);
  char *v52;
  uint64_t v53;

  uint64_t v3 = v2;
  uint64_t v53 = type metadata accessor for NWBrowser.Result();
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NWBrowser.Result>);
  uint64_t v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  unint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  int v42 = v2;
  uint64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  os_log_type_t v49 = v8;
  int64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  unint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  unint64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      int64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    uint64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    unint64_t v26 = v44;
    uint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      unint64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      uint64_t v27 = v44[v21];
      if (!v27)
      {
        uint64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            unint64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            uint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    int64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      unint64_t v31 = *(void *)(v11 + 56);
      char v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      unint64_t v33 = *(void *)(v11 + 56);
      char v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    BOOL v34 = -1 << *(unsigned char *)(v13 + 32);
    uint64_t v35 = result & ~v34;
    uint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      int64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      int64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        unint64_t v39 = v36 == v38;
        if (v36 == v38) {
          uint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      int64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v42;
  unint64_t v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Task<(), Never>>);
  uint64_t v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  int v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    unint64_t v15 = ~(-1 << v13);
  }
  else {
    unint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  uint64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  int64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      int64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        uint64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v27;
      }
    }
LABEL_21:
    uint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      unint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      unint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    char v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        char v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    long long *v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupHost>);
  uint64_t v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  int v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    unint64_t v15 = ~(-1 << v13);
  }
  else {
    unint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  uint64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  int64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      int64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        uint64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v27;
      }
    }
LABEL_21:
    uint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      unint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      unint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    char v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        char v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    long long *v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  void (**v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  void (**v46)(char *, unint64_t, uint64_t);
  long long v47;

  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, (_:_:)>);
  uint64_t v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    int64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    uint64_t v14 = v13 & v12;
    unint64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    unint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    unint64_t v17 = 0;
    int v42 = v8;
    uint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        unint64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        int64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          unint64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          int64_t v22 = v40[v17];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  uint64_t *v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            int64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                unint64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                int64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v17 = v23;
          }
        }
LABEL_21:
        uint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      int64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      uint64_t v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        uint64_t v47 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
      }
      else
      {
        (*v41)(v43, v26, v44);
        uint64_t v47 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
        swift_retain();
      }
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        int64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        int64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v46)(*(void *)(v10 + 48) + v25 * v18, v27, v28);
      *(_OWORD *)(*(void *)(v10 + 56) + 16 * v18) = v47;
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  uint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  int v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  unint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    unint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_retain();
    }
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  unint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v5 = v14;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          unint64_t v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *unint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        long long v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          Swift::Int v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v18 = *v17;
    unint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v19 = *v17;
    unint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      unint64_t v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      BOOL v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for NWBrowser.Result() - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    int64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  uint64_t *v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    unint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      BOOL v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        uint64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        int64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              void *v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        uint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    int64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    int64_t v26 = *v25;
    unint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v27 = *v25;
    int64_t v26 = (-1 << a1) - 1;
  }
  long long *v25 = v27 & v26;
  BOOL v28 = *(void *)(a2 + 16);
  int64_t v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    unint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      BOOL v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        uint64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        int64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (_OWORD *)(v22 + 16 * a1);
            uint64_t v24 = (_OWORD *)(v22 + 16 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              void *v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        uint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    int64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    int64_t v26 = *v25;
    unint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v27 = *v25;
    int64_t v26 = (-1 << a1) - 1;
  }
  long long *v25 = v27 & v26;
  BOOL v28 = *(void *)(a2 + 16);
  int64_t v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String : [String]]>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _DictionaryStorage<String, RequesterCredentials>);
}

{
  void *v4;
  void **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v5 = (void **)v4;
  BOOL v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v16 = v13[2];
  uint64_t v17 = (v14 & 1) == 0;
  int64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v19 = v14;
  unint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = (uint64_t *)(v21[7] + 16 * v15);
      unint64_t result = swift_release();
      uint64_t v24 = v28;
      *uint64_t v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  int64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v15 = v25;
  uint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v28, v21);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _DictionaryStorage<String, PassthroughSubject<Data, Error>>);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    __swift_destroy_boxed_opaque_existential_0Tm(v19);
    return outlined init with take of PseudonymProtocol(a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, &demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyInvitationsInviteAdvertiser>);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;

  uint64_t v4 = (void **)v3;
  unint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  BOOL v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  char v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  int64_t v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  BOOL v14 = result;
  unint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  unint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  BOOL v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  char v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  int64_t v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    BOOL v28 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      BOOL v14 = v28;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  unint64_t v21 = v20[7];
  char v22 = type metadata accessor for NWBrowser.Result();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  int64_t v25 = v22;
  int64_t v26 = v21 + *(void *)(v23 + 72) * v14;
  return v24(v26, a1, v25);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  uint64_t v4 = (void **)v3;
  unint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  BOOL v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  char v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  int64_t v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  BOOL v14 = v23;
  unint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, &demangling cache variable for type metadata for _DictionaryStorage<UUID, FilteredBluetoothScanner<NearbyRangingFilter>>);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  int64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  char v22 = (uint64_t *)(v18[6] + 16 * v12);
  *char v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;
  swift_bridgeObjectRetain();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  unint64_t v8 = (void **)v7;
  uint64_t v15 = (void *)*v7;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= v20 && (a7 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v8;
    if (v21)
    {
LABEL_8:
      uint64_t v24 = v23[7] + 32 * v17;
      uint64_t v25 = *(void **)(v24 + 24);
      swift_bridgeObjectRelease();

      *(void *)uint64_t v24 = a1;
      *(void *)(v24 + 8) = a2;
      *(unsigned char *)(v24 + 16) = a3 & 1;
      *(unsigned char *)(v24 + 17) = HIBYTE(a3) & 1;
      *(void *)(v24 + 24) = a4;
      return;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a7 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a7 & 1);
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v17 = v26;
  uint64_t v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v17, a5, a6, a1, a2, a3 & 0x101, a4, v23);
  swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1, a5);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  uint64_t *v25 = a2;
  v25[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v26 = v20[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v28;
  return swift_bridgeObjectRetain();
}

{
  void *v5;
  void *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t vars8;

  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1, a5);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  uint64_t *v25 = a2;
  v25[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v26 = v20[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v28;
  return swift_bridgeObjectRetain();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v19);
    return outlined init with take of Any(a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  unint64_t v6 = (void **)v4;
  uint64_t v27 = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v21 = *v6;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t result = swift_release();
      *(void *)(v22 + 8 * v15) = v27;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()(a4);
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1, a4);
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  unint64_t v21 = *v6;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, v27, v21);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of PseudonymProtocol(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, uint64_t a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1 << result;
  uint64_t v8 = (void *)(a8[6] + 16 * result);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a8[7] + 32 * result;
  *(void *)uint64_t v9 = a4;
  *(void *)(v9 + 8) = a5;
  *(unsigned char *)(v9 + 16) = a6 & 1;
  *(unsigned char *)(v9 + 17) = HIBYTE(a6) & 1;
  *(void *)(v9 + 24) = a7;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for NWBrowser.Result();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  uint64_t v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PseudonymProtocol>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *id v1 = v4;
    return result;
  }
  char v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    BOOL v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    outlined init with copy of PseudonymProtocol(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of PseudonymProtocol(v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    id v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  id v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, UInt>);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    void *v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v24 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  char v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      uint64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      uint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    BOOL v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + v17);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NISessionDelegate.NIDevice>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13) {
      goto LABEL_26;
    }
    uint64_t v31 = *(void *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      int64_t v9 = v30 + 1;
      if (v30 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v31 = *(void *)(v6 + 8 * v9);
      if (!v31) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v31 - 1) & v31;
    unint64_t v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    BOOL v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = 32 * v15;
    unint64_t v21 = *(void *)(v2 + 56) + v20;
    int64_t v22 = *(void *)v21;
    unint64_t v23 = *(void *)(v21 + 8);
    int64_t v24 = *(unsigned char *)(v21 + 16);
    char v25 = *(unsigned char *)(v21 + 17);
    uint64_t v26 = *(void **)(v21 + 24);
    uint64_t v27 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v27 = v18;
    v27[1] = v19;
    uint64_t v28 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v28 = v22;
    *(void *)(v28 + 8) = v23;
    *(unsigned char *)(v28 + 16) = v24;
    *(unsigned char *)(v28 + 17) = v25;
    *(void *)(v28 + 24) = v26;
    int64_t v29 = v26;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v32 = v30 + 2;
  if (v32 >= v13) {
    goto LABEL_26;
  }
  uint64_t v31 = *(void *)(v6 + 8 * v32);
  if (v31)
  {
    int64_t v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v31 = *(void *)(v6 + 8 * v9);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;

  int v42 = type metadata accessor for NWBrowser.Result();
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  unint64_t v39 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NWBrowser.Result>);
  uint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v46 = v4;
  if (!v5)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v31 = v46;
    uint64_t v30 = v32;
LABEL_25:
    *uint64_t v30 = v31;
    return result;
  }
  uint64_t v6 = v4;
  uint64_t result = (void *)(v4 + 64);
  uint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v46;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v11 = -1;
  int64_t v43 = v3;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  BOOL v33 = v3 + 64;
  uint64_t v34 = (unint64_t)(v10 + 63) >> 6;
  int64_t v13 = v45;
  unint64_t v14 = v44;
  unint64_t v37 = v45 + 16;
  BOOL v38 = v44 + 16;
  uint64_t v35 = v45 + 32;
  uint64_t v36 = v44 + 32;
  unint64_t v15 = v39;
  uint64_t v16 = v40;
  BOOL v17 = v42;
  uint64_t v18 = v46;
  while (1)
  {
    if (v12)
    {
      uint64_t v19 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v47 = v9;
      uint64_t v20 = v19 | (v9 << 6);
      unint64_t v21 = v43;
      goto LABEL_9;
    }
    uint64_t v26 = v9 + 1;
    unint64_t v21 = v43;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    uint64_t v27 = *(void *)(v33 + 8 * v26);
    uint64_t v28 = v9 + 1;
    if (!v27)
    {
      uint64_t v28 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      uint64_t v27 = *(void *)(v33 + 8 * v28);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    uint64_t v47 = v28;
    uint64_t v20 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_9:
    int64_t v22 = *(void *)(v14 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(void *)(v21 + 48) + v22, v16);
    unint64_t v23 = *(void *)(v13 + 72) * v20;
    int64_t v24 = *(void *)(v21 + 56) + v23;
    char v25 = v41;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v41, v24, v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v18 + 48) + v22, v15, v16);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(*(void *)(v18 + 56) + v23, v25, v17);
    int64_t v9 = v47;
  }
  int64_t v29 = v26 + 2;
  if (v29 >= v34)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v30 = v32;
    uint64_t v31 = v46;
    goto LABEL_25;
  }
  uint64_t v27 = *(void *)(v33 + 8 * v29);
  if (v27)
  {
    uint64_t v28 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v34) {
      goto LABEL_23;
    }
    uint64_t v27 = *(void *)(v33 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  id v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Task<(), Never>>);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    void *v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v24 = v5 + 64;
  char v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      uint64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      uint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    BOOL v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    uint64_t result = (void *)swift_retain();
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *id v1 = v4;
    return result;
  }
  char v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    BOOL v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    id v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(unint64_t, char *, uint64_t);
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  long long v28;

  id v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, (_:_:)>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *id v1 = v8;
    return result;
  }
  int64_t v24 = v1;
  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  char v25 = v6 + 64;
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    unint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    int64_t v22 = *(void *)(v25 + 8 * v21);
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      int64_t v22 = *(void *)(v25 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    uint64_t v16 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    BOOL v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 16 * v16;
    uint64_t v19 = *(void *)(v8 + 48) + v17;
    uint64_t v20 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    uint64_t v28 = *(_OWORD *)(*(void *)(v6 + 56) + v18);
    v20(v19, v5, v2);
    *(_OWORD *)(*(void *)(v8 + 56) + v18) = v28;
    uint64_t result = (void *)swift_retain();
  }
  unint64_t v23 = v21 + 2;
  if (v23 >= v26)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    id v1 = v24;
    goto LABEL_25;
  }
  int64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    uint64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_23;
    }
    int64_t v22 = *(void *)(v25 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NearbyAdvertisement>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *id v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  id v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupHost>);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    void *v23 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v24 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  char v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      uint64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      uint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    BOOL v17 = 8 * v15;
    uint64_t v18 = *(void **)(*(void *)(v5 + 56) + v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = v18;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v26 = v1;
  uint64_t v7 = *v1;
  unint64_t v8 = static _DictionaryStorage.copy(original:)();
  int64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v26 = v9;
    return result;
  }
  id result = (void *)(v8 + 64);
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  unint64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  int64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  unint64_t v15 = -1;
  if (v14 < 64) {
    unint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v27 = v7 + 64;
  uint64_t v28 = (unint64_t)(v14 + 63) >> 6;
  int64_t v29 = v4 + 32;
  uint64_t v30 = v4 + 16;
  while (1)
  {
    if (v16)
    {
      uint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      uint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      unint64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    uint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void *)(*(void *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    id result = (void *)swift_retain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    unint64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of String?(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestController.Errors and conformance NearbyInvitationJoinRequestController.Errors);
  }
  return result;
}

uint64_t outlined init with take of PseudonymProtocol(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined init with copy of PseudonymProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of NearbyProtoJoinRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbyProtoJoinRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NearbyProtoJoinRequest(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NearbyProtoJoinRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of NearbyProtoJoinRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbyProtoJoinRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for NearbyInvitationJoinRequestController.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100018968);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationJoinRequestController.Errors()
{
  return &type metadata for NearbyInvitationJoinRequestController.Errors;
}

uint64_t NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)(uint64_t a1, int a2, char a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)log);
  int64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 67109378;
    NearbyInvitationActivityType.rawValue.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 8) = 2080;
    if (a3) {
      uint64_t v12 = 0x69676E6172206F6ELL;
    }
    else {
      uint64_t v12 = 0x676E69676E6172;
    }
    if (a3) {
      unint64_t v13 = 0xEA0000000000676ELL;
    }
    else {
      unint64_t v13 = 0xE700000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Finding invitations for %u with %s", (uint8_t *)v11, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  type metadata accessor for NearbyInvitationsInviteScanner(0);
  uint64_t v14 = swift_allocObject();
  NearbyInvitationsInviteScanner.init(ignoringDistance:)(a3 & 1);
  *(void *)(v4
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_participantInvitationScan) = v14;
  swift_retain();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<NearbyInvitationActivityType>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1000D61D0;
  *(_DWORD *)(v15 + 32) = a2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 536))(a1, v15);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t NearbyInvitationsInviteScanner.__allocating_init(ignoringDistance:)(uint64_t a1)
{
  return NearbyInvitationsInviteScanner.__allocating_init(ignoringDistance:)(a1, (void (*)(uint64_t))NearbyInvitationsInviteScanner.init(ignoringDistance:));
}

uint64_t NearbyInvitationServiceBluetoothController.lostInvitations()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_participantInvitationScan;
  if (*(void *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_participantInvitationScan))
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)log);
    unsigned int v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      int64_t v9 = "Monitoring for lost invitations";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v9, v8, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)log);
    unsigned int v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      int64_t v9 = "No ongoing scan, can't monitor for lost invitations. Call findInvitations() first";
      goto LABEL_10;
    }
  }

  uint64_t v11 = *(void *)(v2 + v4);
  if (v11)
  {
    uint64_t v12 = *(void (**)(uint64_t))(*(void *)v11 + 440);
    uint64_t v13 = swift_retain();
    v12(v13);
    return swift_release();
  }
  else
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
    unint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    return v16(a1, 1, 1, v15);
  }
}

Swift::Void __swiftcall NearbyInvitationServiceBluetoothController.stopFindingInvitations()()
{
  uint64_t v1 = *(void *)(v0
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_participantInvitationScan);
  if (v1)
  {
    uint64_t v2 = *(void (**)(uint64_t))(*(void *)v1 + 336);
    uint64_t v3 = swift_retain();
    v2(v3);
    swift_release();
  }
}

uint64_t NearbyInvitationServiceBluetoothController.broadcast(invitation:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return _swift_task_switch(NearbyInvitationServiceBluetoothController.broadcast(invitation:), 0, 0);
}

uint64_t NearbyInvitationServiceBluetoothController.broadcast(invitation:)()
{
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[7];
  uint64_t v2 = type metadata accessor for Logger();
  v0[9] = __swift_project_value_buffer(v2, (uint64_t)log);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  os_log_type_t v7 = (void *)v0[7];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v0[6] = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received request to start broadcasting invitation %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = (void *)v0[7];
  uint64_t v10 = (void *)v0[8];
  v0[10] = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_queue;
  uint64_t v12 = swift_allocObject();
  v0[11] = v12;
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  id v13 = v11;
  id v14 = v10;
  uint64_t v15 = (void *)swift_task_alloc();
  v0[12] = v15;
  uint64_t v16 = type metadata accessor for NearbyInvitationsInviteAdvertiser(0);
  *uint64_t v15 = v0;
  v15[1] = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  return AsyncSerialQueue.performAndWaitFor<A>(_:)(v0 + 2, &async function pointer to partial apply for closure #1 in NearbyInvitationServiceBluetoothController.broadcast(invitation:), v12, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  }
  else
  {
    swift_release();
    uint64_t v2 = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(void);
  uint64_t v5;

  uint64_t v1 = v0[2];
  v0[14] = v1;
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v1 + 104) + **(int **)(*(void *)v1 + 104));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[15] = v2;
  *uint64_t v2 = v0;
  v2[1] = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  }
  else {
    uint64_t v2 = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  NSObject *log;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  int64_t v22 = v0;
  uint64_t v1 = (void *)v0;
  uint64_t v2 = *(id *)(v0 + 56);
  swift_errorRetain();
  id v3 = v2;
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    BOOL v6 = v1[16];
    os_log_type_t v7 = (void *)v1[7];
    uint64_t v8 = swift_slowAlloc();
    log = v4;
    id v9 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412546;
    v1[3] = v7;
    uint64_t v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v9 = v7;

    *(_WORD *)(v8 + 12) = 2080;
    v1[4] = v6;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v11 = String.init<A>(reflecting:)();
    v1[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v4 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v5, "Failed to start advertising invitation: %@, reason: %s", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    id v13 = (void *)v1[7];

    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v15 = (void *)v1[7];
  id v14 = (void *)v1[8];
  uint64_t v16 = swift_allocObject();
  v1[17] = v16;
  *(void *)(v16 + 16) = v14;
  *(void *)(v16 + 24) = v15;
  uint64_t v17 = v15;
  v14;
  uint64_t v18 = (void *)swift_task_alloc();
  v1[18] = v18;
  *uint64_t v18 = v1;
  v18[1] = NearbyInvitationServiceBluetoothController.broadcast(invitation:);
  return AsyncSerialQueue.performAndWaitFor<A>(_:)();
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(NearbyInvitationServiceBluetoothController.broadcast(invitation:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_willThrow();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[11] = a2;
  v3[12] = a3;
  v3[10] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[13] = v4;
  v3[14] = *(void *)(v4 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return _swift_task_switch(closure #1 in NearbyInvitationServiceBluetoothController.broadcast(invitation:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)()
{
  unint64_t v39 = v0;
  uint64_t v1 = v0[11];
  NearbyAdvertisementRequest.identifier.getter();
  uint64_t v2 = v1
     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_ongoingBroadcasts;
  swift_beginAccess();
  if (*(void *)(*(void *)v2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v0[16]), (v3 & 1) != 0))
  {
    uint64_t v4 = v0[16];
    uint64_t v5 = v0[13];
    uint64_t v6 = v0[14];
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v8 = (void *)v0[11];
    os_log_type_t v7 = (void *)v0[12];
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)log);
    id v10 = v7;
    id v11 = v8;
    id v12 = v10;
    id v13 = v11;
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (void *)v0[12];
      uint64_t v36 = (void *)v0[11];
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412546;
      v0[8] = v16;
      id v19 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v16;

      *(_WORD *)(v17 + 12) = 2080;
      type metadata accessor for NearbyInvitationsInviteAdvertiser(0);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      swift_bridgeObjectRetain();
      uint64_t v20 = Dictionary.description.getter();
      unint64_t v22 = v21;
      swift_bridgeObjectRelease();
      v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Advertiser already started for %@, all broadcasts: %s", (uint8_t *)v17, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      BOOL v33 = (void *)v0[11];
      uint64_t v32 = (void *)v0[12];
    }
    lazy protocol witness table accessor for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors();
    swift_allocError();
    unsigned char *v34 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v23 = v0[15];
    uint64_t v24 = v0[16];
    uint64_t v25 = v0[13];
    uint64_t v26 = v0[14];
    uint64_t v27 = (void *)v0[12];
    unint64_t v37 = (uint64_t *)v0[10];
    swift_endAccess();
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v28(v24, v25);
    type metadata accessor for NearbyInvitationsInviteAdvertiser(0);
    uint64_t v29 = swift_allocObject();
    NearbyInvitationsInviteAdvertiser.init(invitation:)(v27);
    NearbyAdvertisementRequest.identifier.getter();
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v38 = *(void *)v2;
    *(void *)uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, v23, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v2 = v38;
    swift_bridgeObjectRelease();
    v28(v23, v25);
    swift_endAccess();
    uint64_t *v37 = v29;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = (uint64_t (*)(void))v0[1];
  }
  return v31();
}

uint64_t NearbyInvitationsInviteAdvertiser.__allocating_init(invitation:)(uint64_t a1)
{
  return NearbyInvitationsInviteAdvertiser.__allocating_init(invitation:)(a1, (void (*)(uint64_t))NearbyInvitationsInviteAdvertiser.init(invitation:));
}

uint64_t closure #2 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  uint64_t v4 = type metadata accessor for UUID();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return _swift_task_switch(closure #2 in NearbyInvitationServiceBluetoothController.broadcast(invitation:), 0, 0);
}

uint64_t closure #2 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  NearbyAdvertisementRequest.identifier.getter();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:)(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = *(void *)(v4 + 64);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:), 0, 0);
}

uint64_t NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v4 = (void *)v0[5];
  uint64_t v3 = v0[6];
  uint64_t v5 = v0[4];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[11] = v6;
  v0[12] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v5, v3);
  unint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v8 = swift_allocObject();
  v0[13] = v8;
  *(void *)(v8 + 16) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v8 + v7, v1, v3);
  id v9 = v4;
  id v10 = (void *)swift_task_alloc();
  v0[14] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationsInviteAdvertiser?);
  *id v10 = v0;
  v10[1] = NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:);
  return AsyncSerialQueue.performAndWaitFor<A>(_:)(v0 + 2, &async function pointer to partial apply for closure #1 in NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:), v8, v11);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned char *v18;
  uint64_t (*v19)(void);
  uint64_t (*v20)(void);
  uint64_t v21;
  void *v22;
  uint64_t v23;

  unint64_t v22 = v0;
  uint64_t v1 = v0[2];
  v0[15] = v1;
  if (v1)
  {
    uint64_t v20 = (uint64_t (*)(void))(*(void *)(*(void *)v1 + 112) + **(int **)(*(void *)v1 + 112));
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[16] = v2;
    *uint64_t v2 = v0;
    v2[1] = NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:);
    return v20();
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v4 = v0[4];
    uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t))v0[11];
    uint64_t v6 = v0[9];
    unint64_t v7 = v0[6];
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)log);
    v5(v6, v4, v7);
    id v9 = Logger.logObject.getter();
    id v10 = static os_log_type_t.error.getter();
    uint64_t v11 = os_log_type_enabled(v9, v10);
    id v12 = v0[9];
    uint64_t v13 = v0[6];
    id v14 = v0[7];
    if (v11)
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      unint64_t v21 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v15 = 136315138;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Broadcaster for %s not found", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v14 + 8))(v0[9], v0[6]);
    }

    lazy protocol witness table accessor for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors();
    swift_allocError();
    *uint64_t v18 = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    id v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return _swift_task_switch(closure #1 in NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = (uint64_t *)v0[5];
  swift_beginAccess();
  *uint64_t v2 = specialized Dictionary._Variant.removeValue(forKey:)(v1);
  swift_endAccess();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[9] = v6;
  v4[10] = *(void *)(v6 + 64);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  return _swift_task_switch(NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:), 0, 0);
}

uint64_t NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:)()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[9];
  uint64_t v4 = (void *)v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[5];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[13] = v6;
  v0[14] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v5, v3);
  unint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v8 = swift_allocObject();
  v0[15] = v8;
  *(void *)(v8 + 16) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v8 + v7, v1, v3);
  id v9 = v4;
  id v10 = (void *)swift_task_alloc();
  v0[16] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationsInviteAdvertiser?);
  *id v10 = v0;
  v10[1] = NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:);
  return AsyncSerialQueue.performAndWaitFor<A>(_:)(v0 + 2, &async function pointer to partial apply for closure #1 in NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:), v8, v11);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned char *v19;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  unint64_t v22 = v0;
  uint64_t v1 = v0[2];
  if (v1)
  {
    uint64_t v2 = v0[6];
    uint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 176);
    swift_retain();
    v3(v2);
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t))v0[13];
    uint64_t v6 = v0[11];
    unint64_t v7 = v0[8];
    uint64_t v8 = v0[5];
    id v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)log);
    v5(v6, v8, v7);
    id v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.error.getter();
    id v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v0[11];
    id v14 = v0[8];
    os_log_type_t v15 = v0[9];
    if (v12)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      unint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Broadcaster for %s not found", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v15 + 8))(v0[11], v0[8]);
    }

    lazy protocol witness table accessor for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors();
    swift_allocError();
    *id v19 = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }
  return v4();
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return _swift_task_switch(closure #1 in NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:)()
{
  uint64_t v1 = *(void *)(v0 + 48)
     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_ongoingBroadcasts;
  swift_beginAccess();
  if (*(void *)(*(void *)v1 + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 56)), (v2 & 1) != 0))
  {
    uint64_t v3 = swift_retain();
  }
  else
  {
    uint64_t v3 = 0;
  }
  **(void **)(v0 + 40) = v3;
  swift_endAccess();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[8] = v5;
  v3[9] = *(void *)(v5 + 64);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  return _swift_task_switch(NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:), 0, 0);
}

uint64_t NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:)()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v4 = (void *)v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[12] = v6;
  v0[13] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v5, v3);
  unint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v8 = swift_allocObject();
  v0[14] = v8;
  *(void *)(v8 + 16) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v8 + v7, v1, v3);
  id v9 = v4;
  id v10 = (void *)swift_task_alloc();
  v0[15] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationsInviteAdvertiser?);
  *id v10 = v0;
  v10[1] = NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:);
  return AsyncSerialQueue.performAndWaitFor<A>(_:)(v0 + 2, &async function pointer to partial apply for closure #1 in NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:), v8, v11);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned char *v19;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  unint64_t v22 = v0;
  uint64_t v1 = v0[2];
  if (v1)
  {
    uint64_t v2 = v0[5];
    uint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 184);
    swift_retain();
    v3(v2);
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v5 = v0[4];
    uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t))v0[12];
    unint64_t v7 = v0[10];
    uint64_t v8 = v0[7];
    id v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)log);
    v6(v7, v5, v8);
    id v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.error.getter();
    id v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v0[10];
    id v14 = v0[7];
    os_log_type_t v15 = v0[8];
    if (v12)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      unint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Broadcaster for %s not found", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v15 + 8))(v0[10], v0[7]);
    }

    lazy protocol witness table accessor for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors();
    swift_allocError();
    *id v19 = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }
  return v4();
}

uint64_t closure #1 in NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return _swift_task_switch(closure #1 in NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:), 0, 0);
}

id NearbyInvitationServiceBluetoothController.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v2);
  id v10 = v0;
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  uint64_t v11 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_ongoingBroadcasts;
  *(void *)&v10[v11] = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)&v10[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_participantInvitationScan] = 0;
  *(void *)&v10[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_ongoingInviteRequests] = 0;

  v13.receiver = v10;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, "init");
}

id NearbyInvitationServiceBluetoothController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id NearbyInvitationsAdvertiser.advertiser.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t NearbyInvitationsAdvertiser.queue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationsAdvertiser_queue;
  uint64_t v4 = type metadata accessor for AsyncSerialQueue();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t NearbyInvitationsAdvertiser.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  NearbyInvitationsAdvertiser.init()();
  return v0;
}

id *NearbyInvitationsAdvertiser.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v2);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  id v10 = [objc_allocWithZone((Class)CBAdvertiser) init];
  v1[2] = v10;
  id v11 = v10;
  NSString v12 = String._bridgeToObjectiveC()();
  [v11 setLabel:v12];

  [v1[2] setAdvertiseRate:42];
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)log);
  swift_retain_n();
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v25 = v17;
    uint64_t v18 = (uint64_t (*)(uint64_t))*((void *)*v1 + 15);
    uint64_t v19 = swift_retain();
    uint64_t v20 = v18(v19);
    unint64_t v22 = v21;
    swift_release();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Init %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return v1;
}

uint64_t NearbyInvitationsAdvertiser.start()()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(NearbyInvitationsAdvertiser.start(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)log);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[3];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    os_log_type_t v15 = v7;
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 120);
    uint64_t v9 = swift_retain();
    id v10 = v8(v9);
    NSString v12 = v11;
    swift_release();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s Request to start advertiser", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  swift_retain();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[4] = v13;
  *uint64_t v13 = v0;
  v13[1] = NearbyInvitationsAdvertiser.start();
  return AsyncSerialQueue.performAndWaitFor<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NearbyInvitationsAdvertiser.start();
  }
  else
  {
    swift_release();
    uint64_t v2 = NearbyInvitationsAdvertiser.start();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in NearbyInvitationsAdvertiser.start()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a2;
  return _swift_task_switch(closure #1 in NearbyInvitationsAdvertiser.start(), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsAdvertiser.start()()
{
  uint64_t v19 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 10;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)log);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[15];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v18 = v9;
    id v10 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 120);
    uint64_t v11 = swift_retain();
    uint64_t v12 = v10(v11);
    unint64_t v14 = v13;
    swift_release();
    v1[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s Activating advertiser", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  os_log_type_t v15 = *(void **)(v1[15] + 16);
  v1[2] = v1;
  v1[3] = closure #1 in NearbyInvitationsAdvertiser.start();
  uint64_t v16 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v1[13] = &block_descriptor_199;
  v1[14] = v16;
  [v15 activateWithCompletion:v2];
  return _swift_continuation_await(v1 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 128) = v1;
  if (v1) {
    uint64_t v2 = closure #1 in NearbyInvitationsAdvertiser.start();
  }
  else {
    uint64_t v2 = NearbyInvitationsAdvertiser.start();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v4 = swift_allocError();
    void *v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(v7);
  }
}

uint64_t NearbyInvitationsAdvertiser.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)log);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 136315138;
    uint64_t v17 = v6;
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 120);
    uint64_t v8 = swift_retain();
    uint64_t v9 = v7(v8);
    unint64_t v11 = v10;
    swift_release();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deinit %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v12 = *(void **)(v1 + 16);
  objc_msgSend(v12, "invalidate", v16, v17);

  uint64_t v13 = v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationsAdvertiser_queue;
  uint64_t v14 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  return v1;
}

uint64_t NearbyInvitationsAcceptInviteAdvertiser.__deallocating_deinit()
{
  NearbyInvitationsAdvertiser.deinit();
  return swift_deallocClassInstance();
}

uint64_t NearbyInvitationsAdvertiser.stop()()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(NearbyInvitationsAdvertiser.stop(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)log);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  os_log_type_t v4 = os_log_type_enabled(v2, v3);
  os_log_type_t v5 = v0[3];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    os_log_type_t v15 = v7;
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 120);
    uint64_t v9 = swift_retain();
    unint64_t v10 = v8(v9);
    uint64_t v12 = v11;
    swift_release();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s Request to stop advertiser", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  swift_retain();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[4] = v13;
  *uint64_t v13 = v0;
  v13[1] = NearbyInvitationsAdvertiser.stop();
  return AsyncSerialQueue.performAndWaitFor<A>(_:)();
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(NearbyInvitationsAdvertiser.stop(), 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitationsAdvertiser.stop()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return _swift_task_switch(closure #1 in NearbyInvitationsAdvertiser.stop(), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsAdvertiser.stop()()
{
  [*(id *)(*(void *)(v0 + 16) + 16) invalidate];
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t NearbyInvitationsAdvertiser.description.getter()
{
  _StringGuts.grow(_:)(28);
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x203A666C657328;
  v2._uint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 0x747265766461202CLL;
  v3._uint64_t object = (void *)0xEE00203A72657369;
  String.append(_:)(v3);
  id v4 = *(id *)(v0 + 16);
  id v5 = [v4 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  v9._uint64_t countAndFlagsBits = v6;
  v9._uint64_t object = v8;
  String.append(_:)(v9);

  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 41;
  v10._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyInvitationsAdvertiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t FilteredBluetoothScanner.FilteredDevice.stableIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t NearbyInvitationRangedHost.counter.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

id NearbyInvitationRangedHost.matches(device:)(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  id result = [a1 stableIdentifier];
  if (result)
  {
    Swift::String v9 = result;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    if (v10 == a2 && v12 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      id result = 0;
      if ((v14 & 1) == 0) {
        return result;
      }
    }
    return (id)([a1 nearbyInfoV2InvitationCounter] == a4);
  }
  return result;
}

uint64_t NearbyInvitationRangedHost.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

BOOL static NearbyInvitationRangedHost.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a1 == a4 && a2 == a5) {
    return a3 == a6;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v8) {
    return a3 == a6;
  }
  return result;
}

Swift::Int NearbyInvitationRangedHost.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyInvitationRangedHost()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyInvitationRangedHost()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationRangedHost()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyInvitationRangedHost(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return v2 == v3;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v5) {
    return v2 == v3;
  }
  return result;
}

uint64_t key path setter for NearbyInvitationsScanner.rangedHosts : NearbyInvitationsScanner(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 16) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t FilteredBluetoothScanner.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyInvitationsScanner.ignoringDistance.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t NearbyInvitationsScanner.ignoringDistance.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 32) = a1;
  return result;
}

uint64_t (*_PublisherElements.Iterator.Inner.state.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

id NearbyInvitationsScanner.rangingSession.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 40);
  return v1;
}

void NearbyInvitationsScanner.rangingSession.setter(void *a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = a1;
  id v4 = a1;
  [v3 invalidate];
}

void (*NearbyInvitationsScanner.rangingSession.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  id v4 = *(void **)(v1 + 40);
  v3[3] = v4;
  id v5 = v4;
  return NearbyInvitationsScanner.rangingSession.modify;
}

void NearbyInvitationsScanner.rangingSession.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  id v5 = (void **)(*(void *)a1 + 24);
  id v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = *v5;
  id v8 = v4;
  Swift::String v9 = v8;
  if (a2)
  {
    id v10 = v8;
    [v7 invalidate];

    uint64_t v7 = *v5;
  }
  else
  {
    [v7 invalidate];
  }
  free(v3);
}

id NearbyInvitationsScanner.scanner.getter()
{
  return *(id *)(v0 + 48);
}

uint64_t key path setter for NearbyInvitationsScanner.deviceFoundStream : NearbyInvitationsScanner(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 280))(v6);
}

uint64_t NearbyInvitationsScanner.deviceFoundStream.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.BufferingPolicy);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  id v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v17[-v11];
  uint64_t v13 = v1
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream;
  swift_beginAccess();
  outlined init with copy of (String, Any)(v13, (uint64_t)v12, &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v15 + 32))(a1, v12, v14);
  }
  outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CBDevice);
  (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v6, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16))(v10, a1, v14);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
  swift_beginAccess();
  outlined assign with take of AsyncStream<CBDevice>?((uint64_t)v10, v13, &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  return swift_endAccess();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsScanner.deviceFoundStream.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  return (*(uint64_t (**)(char *))(*(void *)a2 + 304))(v6);
}

uint64_t NearbyInvitationsScanner.deviceFoundStream.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v5, a1, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  uint64_t v8 = v1
     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream;
  swift_beginAccess();
  outlined assign with take of AsyncStream<CBDevice>?((uint64_t)v5, v8, &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  return swift_endAccess();
}

void (*NearbyInvitationsScanner.deviceFoundStream.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  v3[7] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[10] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[11] = v8;
  NearbyInvitationsScanner.deviceFoundStream.getter((uint64_t)v8);
  return NearbyInvitationsScanner.deviceFoundStream.modify;
}

void NearbyInvitationsScanner.deviceFoundStream.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 80);
  uint64_t v3 = *(void **)(*(void *)a1 + 88);
  if (a2)
  {
    uint64_t v5 = v2[8];
    uint64_t v6 = v2[9];
    uint64_t v8 = v2[6];
    size_t v7 = (void *)v2[7];
    (*(void (**)(void, void, uint64_t))(v6 + 16))(v2[10], v2[11], v5);
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v7, v4, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
    uint64_t v9 = v8
       + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream;
    swift_beginAccess();
    outlined assign with take of AsyncStream<CBDevice>?((uint64_t)v7, v9, &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
  }
  else
  {
    uint64_t v10 = v2[8];
    uint64_t v11 = v2[9];
    uint64_t v12 = v2[6];
    size_t v7 = (void *)v2[7];
    (*(void (**)(void *, void, uint64_t))(v11 + 32))(v7, v2[11], v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    uint64_t v13 = v12
        + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream;
    swift_beginAccess();
    outlined assign with take of AsyncStream<CBDevice>?((uint64_t)v7, v13, &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
    swift_endAccess();
  }
  free(v3);
  free(v4);
  free(v7);
  free(v2);
}

uint64_t key path setter for NearbyInvitationsScanner.deviceFoundContinuation : NearbyInvitationsScanner(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (String, Any)(a1, (uint64_t)v6, &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 304))(v6);
}

uint64_t NearbyInvitationsScanner.deviceFoundContinuation.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyInvitationsScanner.deviceFoundContinuation.getter(&OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner_deviceFoundContinuation, &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?, a1);
}

uint64_t NearbyInvitationsScanner.deviceFoundContinuation.setter(uint64_t a1)
{
  return NearbyInvitationsScanner.deviceFoundContinuation.setter(a1, &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner_deviceFoundContinuation, &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
}

uint64_t (*NearbyInvitationsScanner.deviceFoundContinuation.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyInvitationsScanner.__allocating_init(ignoringDistance:)(uint64_t a1)
{
  return NearbyInvitationsInviteScanner.__allocating_init(ignoringDistance:)(a1, (void (*)(uint64_t))NearbyInvitationsScanner.init(ignoringDistance:));
}

uint64_t NearbyInvitationsInviteScanner.__allocating_init(ignoringDistance:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = swift_allocObject();
  a2(a1);
  return v4;
}

uint64_t *NearbyInvitationsScanner.init(ignoringDistance:)(char a1)
{
  uint64_t v3 = *v1;
  v1[2] = (uint64_t)&_swiftEmptySetSingleton;
  v1[5] = (uint64_t)[objc_allocWithZone((Class)NISession) init];
  v1[8] = 0;
  uint64_t v4 = (uint64_t)v1
     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (uint64_t)v1
     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner_deviceFoundContinuation;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *((unsigned char *)v1 + 32) = a1;
  id v8 = [objc_allocWithZone((Class)CBDiscovery) init];
  v1[6] = (uint64_t)v8;
  v1[7] = 200;
  v1[3] = (uint64_t)[objc_allocWithZone((Class)type metadata accessor for NISessionDelegate()) init];
  swift_weakAssign();
  id v9 = v8;
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 setLabel:v10];

  uint64_t v11 = (void *)v1[6];
  [v11 setBleScanRate:20];
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(unsigned char *)(v13 + 24) = a1;
  *(void *)(v13 + 32) = v3;
  v17[4] = partial apply for closure #1 in NearbyInvitationsScanner.init(ignoringDistance:);
  v17[5] = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
  v17[3] = &block_descriptor;
  uint64_t v14 = _Block_copy(v17);
  id v15 = v11;
  swift_release();
  [v15 setDeviceFoundHandler:v14];
  _Block_release(v14);

  return v1;
}

uint64_t closure #1 in NearbyInvitationsScanner.init(ignoringDistance:)(NSObject *a1, uint64_t a2, char a3, NSObject *a4)
{
  os_log_t v56 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  os_log_t v14 = *(os_log_t *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v57 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v17 = result;
    (*(void (**)(void))(*(void *)result + 296))();
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v14[6].isa)(v12, 1, v13) == 1)
    {
      swift_release();
      return outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
    }
    ((void (*)(char *, char *, uint64_t))v14[4].isa)(v57, v12, v13);
    if (([a1 nearbyInfoV2Flags] & 4) != 0
      || [a1 nearbyInfoV2InvitationCounter])
    {
      if ((a3 & 1) != 0
        || (uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v17 + 152))(),
            uint64_t v19 = a1,
            char v20 = specialized Sequence.contains(where:)(v18, v19),
            swift_bridgeObjectRelease(),
            v19,
            (v20 & 1) != 0))
      {
        os_log_t v59 = a1;
        unint64_t v21 = a1;
        unint64_t v22 = v57;
        AsyncStream.Continuation.yield(_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        return ((uint64_t (*)(char *, uint64_t))v14[1].isa)(v22, v13);
      }
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)log);
      uint64_t v25 = v19;
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      int v55 = v26;
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        uint64_t v54 = v24;
        uint64_t v29 = v28;
        uint64_t v52 = (void *)swift_slowAlloc();
        uint64_t v53 = swift_slowAlloc();
        uint64_t v58 = v53;
        *(_DWORD *)uint64_t v29 = 136315394;
        os_log_t v59 = v56;
        uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
        uint64_t v31 = >> prefix<A>(_:)((uint64_t)&v59, MetatypeMetadata);
        os_log_t v59 = (os_log_t)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 12) = 2112;
        os_log_t v59 = v25;
        BOOL v33 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v52 = v25;

        uint64_t v34 = v55;
        _os_log_impl((void *)&_mh_execute_header, v55, v27, "%s: Attempting to perform ranging on device: %@", (uint8_t *)v29, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NIBluetoothSample);
      int v42 = v25;
      id v43 = NIBluetoothSample.init(with:)(v42);
      if (v43)
      {
        uint64_t v44 = v43;
        uint64_t v45 = (*(uint64_t (**)(void))(*(void *)v17 + 368))();
        uint64_t v46 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 200))(v45);
        id v47 = [v46 devicePresenceNotifier];

        [v47 notifyBluetoothSample:v44];
LABEL_23:
        swift_release();
        return ((uint64_t (*)(char *, uint64_t))v14[1].isa)(v57, v13);
      }
      int v48 = v42;
      unint64_t v37 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v49))
      {
        os_log_t v56 = v37;
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        int v55 = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 138412290;
        os_log_t v59 = v48;
        uint64_t v51 = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v55->isa = (Class)v48;

        unint64_t v37 = v56;
        _os_log_impl((void *)&_mh_execute_header, v56, v49, "Couldn't create BTSample for device: %@", v50, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    else
    {
      os_log_t v56 = v14;
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)log);
      uint64_t v36 = a1;
      unint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v37, v38))
      {
        int v55 = v37;
        unint64_t v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v40 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v39 = 138412290;
        os_log_t v59 = v36;
        uint64_t v41 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v40 = v36;

        unint64_t v37 = v55;
        _os_log_impl((void *)&_mh_execute_header, v55, v38, "%@ not being ingested for ranging since it doesn't have an invitation.", v39, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      os_log_t v14 = v56;
    }

    goto LABEL_23;
  }
  return result;
}

BOOL CBDevice.hasInvitation.getter()
{
  return ([v0 nearbyInfoV2Flags] & 4) != 0
      || [v0 nearbyInfoV2InvitationCounter] != 0;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t NearbyInvitationsScanner.startScan()()
{
  *(void *)(v1 + 120) = v0;
  return _swift_task_switch(NearbyInvitationsScanner.startScan(), 0, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  os_log_t v14 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 10;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  v1[16] = __swift_project_value_buffer(v3, (uint64_t)log);
  swift_retain_n();
  id v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v13 = v7;
    uint64_t v8 = _typeName(_:qualified:)();
    v1[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s: Scan starting", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v10 = *(void **)(v1[15] + 48);
  v1[2] = v1;
  v1[3] = NearbyInvitationsScanner.startScan();
  uint64_t v11 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v1[13] = &block_descriptor_40;
  v1[14] = v11;
  [v10 activateWithCompletion:v2];
  return _swift_continuation_await(v1 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = NearbyInvitationsScanner.startScan();
  }
  else {
    uint64_t v2 = NearbyInvitationsScanner.startScan();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v10 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    id v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    id v9 = v4;
    uint64_t v5 = _typeName(_:qualified:)();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s: Scan started", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Void __swiftcall NearbyInvitationsScanner.stopScan()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)log);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v12[0] = v6;
    uint64_t v7 = _typeName(_:qualified:)();
    uint64_t v11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: Scan stopping", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  id v9 = (void *)(*(uint64_t (**)(id))(*(void *)v1 + 200))(objc_msgSend(*(id *)(v1 + 48), "invalidate", v11));
  [v9 invalidate];

  swift_beginAccess();
  *(void *)(v1 + 16) = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)(*(void *)(v1 + 24)
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices);
  swift_beginAccess();
  *uint64_t v10 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
}

id NearbyInvitationsScanner.enableRanging(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)log);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v8 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    CBScanRateToString(a1);
    uint64_t v10 = String.init(cString:)();
    uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: Scan with ranging enabled at %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v12 = *(void **)(v2 + 48);
  objc_msgSend(v12, "setDiscoveryFlags:", (unint64_t)objc_msgSend(v12, "discoveryFlags", v14, v15) | 0x8000000000000000);
  objc_msgSend(v12, "setDiscoveryFlags:", (unint64_t)objc_msgSend(v12, "discoveryFlags") | 0x10000000000);
  return [v12 setBleScanRate:a1];
}

Swift::Void __swiftcall NearbyInvitationsScanner.disableRanging()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)log);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v11 = v6;
    uint64_t v7 = _typeName(_:qualified:)();
    uint64_t v10 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: Scan without ranging", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  unint64_t v9 = *(void **)(v1 + 48);
  objc_msgSend(v9, "setDiscoveryFlags:", (unint64_t)objc_msgSend(v9, "discoveryFlags", v10, v11) & 0x7FFFFFFFFFFFFFFFLL);
  objc_msgSend(v9, "setDiscoveryFlags:", (unint64_t)objc_msgSend(v9, "discoveryFlags") & 0xFFFFFEFFFFFFFFFFLL);
  [v9 setBleScanRate:20];
}

Swift::Void __swiftcall NearbyInvitationsScanner.resetDelay()()
{
  *(void *)(v0 + 56) = 200;
}

Swift::Void __swiftcall NearbyInvitationsScanner.restartRanging()()
{
  uint64_t v1 = v0;
  uint64_t v33 = type metadata accessor for DispatchTimeInterval();
  uint64_t v2 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  os_log_type_t v4 = (char **)((char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v32 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v31);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  swift_retain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    os_log_type_t v27 = v10;
    uint64_t v15 = v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v34 = (void *)v1;
    aBlock[0] = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v30 = v5;
    type metadata accessor for NearbyInvitationsScanner(0);
    uint64_t v29 = v6;
    swift_retain();
    uint64_t v28 = v2;
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v34 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2048;
    uint64_t v19 = *(void **)(v1 + 56);
    swift_release();
    uint64_t v34 = v19;
    uint64_t v2 = v28;
    uint64_t v6 = v29;
    uint64_t v5 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s Scheduling NISession recreation in %ldms", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v10 = v27;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  aBlock[4] = (uint64_t)partial apply for closure #1 in NearbyInvitationsScanner.restartRanging();
  aBlock[5] = v1;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_44;
  _Block_copy(aBlock);
  uint64_t v34 = &_swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v20 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  uint64_t v21 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = v20;
  swift_retain_n();
  if (v21)
  {
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  swift_release();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  unint64_t v22 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v23 = v32;
  static DispatchTime.now()();
  *os_log_type_t v4 = *(void *)(v1 + 56);
  uint64_t v24 = v33;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchTimeInterval.milliseconds(_:), v33);
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v24);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v25(v23, v5);
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  swift_release();

  v25(v10, v5);
  uint64_t v26 = *(void *)(v1 + 56);
  if (v26 <= 9999)
  {
    if (v26 < (uint64_t)0xC000000000000000) {
      __break(1u);
    }
    else {
      *(void *)(v1 + 56) = 2 * v26;
    }
  }
}

uint64_t closure #1 in NearbyInvitationsScanner.restartRanging()(uint64_t a1)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    type metadata accessor for NearbyInvitationsScanner(0);
    swift_retain();
    uint64_t v6 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s NISession recreated", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v8 = (*(uint64_t (**)(id))(*(void *)a1 + 208))([objc_allocWithZone((Class)NISession) init]);
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 376))(v8);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

Swift::Void __swiftcall NearbyInvitationsScanner.runSession()()
{
  uint64_t v1 = (void *)v0;
  id v2 = [*(id *)(v0 + 48) discoveredDevices];
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CBDevice);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_retain();
  LOBYTE(v2) = specialized Sequence.contains(where:)(v3, (uint64_t)v1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v2)
  {
    id v4 = objc_allocWithZone((Class)NIRegionPredicate);
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 initWithName:v5 devicePresencePreset:3];

    id v7 = objc_allocWithZone((Class)NIRegionPredicate);
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 initWithName:v8 devicePresencePreset:5];

    id v10 = objc_allocWithZone((Class)NIDevicePresenceConfiguration);
    v33[0] = 0;
    id v11 = v6;
    id v12 = v9;
    id v13 = [v10 initWithInnerBoundary:v11 outerBoundary:v12 error:v33];
    if (v13)
    {
      uint64_t v14 = v13;
      id v15 = v33[0];

      [v14 setAllowedDevices:4];
      id v16 = [v14 setMonitoringOption:1];
      uint64_t v17 = *(uint64_t (**)(void))(*v1 + 200);
      unint64_t v18 = (void *)((uint64_t (*)(id))v17)(v16);
      [v18 setDelegate:v1[3]];

      uint64_t v19 = (void *)v17();
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v20 = (void *)static OS_dispatch_queue.main.getter();
      [v19 setDelegateQueue:v20];

      uint64_t v21 = (void *)v17();
      [v21 runWithConfiguration:v14];

      (*(void (**)(uint64_t))(*v1 + 344))(60);
      return;
    }
    id v26 = v33[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)log);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Tried to run session with no devices that have an invitation. Disabling ranging.", v25, 2u);
      swift_slowDealloc();
    }

    lazy protocol witness table accessor for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors();
    swift_allocError();
    swift_willThrow();
  }
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)log);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 138412290;
    swift_errorRetain();
    unint64_t v32 = (void *)_swift_stdlib_bridgeErrorToNSError();
    v33[0] = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v31 = v32;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "NIDevicePresenceConfiguration failed with %@", v30, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(void))(*v1 + 352))();
  swift_errorRelease();
}

uint64_t NearbyInvitationsScanner.findDevices()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t NearbyInvitationsScanner.lostDevices()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.BufferingPolicy);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CBDevice);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v0);
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

void closure #1 in NearbyInvitationsScanner.lostDevices()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  id v7 = *(void **)(a2 + 48);
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in NearbyInvitationsScanner.lostDevices();
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
  aBlock[3] = &block_descriptor_198;
  id v11 = _Block_copy(aBlock);
  swift_release();
  [v7 setDeviceLostHandler:v11];
  _Block_release(v11);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsScanner.lostDevices()(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [a1 idsDeviceID];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0xE000000000000000;
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return swift_bridgeObjectRelease();
  }
  id v15 = (char *)*(id *)(Strong + 24);
  swift_release();
  id v16 = &v15[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices];
  swift_beginAccess();
  uint64_t v17 = *(void *)v16;
  swift_bridgeObjectRetain();

  if (*(void *)(v17 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v11, v13);
    char v19 = v18;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v19)
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)log);
      swift_retain_n();
      id v22 = a1;
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      int v25 = v24;
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v26 = swift_slowAlloc();
        int v32 = v25;
        uint64_t v27 = v26;
        uint64_t v31 = (void *)swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        uint64_t v36 = v33;
        *(_DWORD *)uint64_t v27 = 136315394;
        uint64_t v34 = a3;
        uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x80000001000DB260, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        *(_WORD *)(v27 + 12) = 2112;
        uint64_t v35 = (uint64_t)v22;
        uint64_t v28 = v6;
        id v29 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v31 = v22;

        uint64_t v6 = v28;
        _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v32, "%s: Lost unfiltered device: %@", (uint8_t *)v27, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v36 = (uint64_t)v22;
      id v30 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
      AsyncStream.Continuation.yield(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall NearbyInvitationsScanner.foundDeviceInRange(identifier:)(Swift::String identifier)
{
  uint64_t v2 = v1;
  uint64_t object = identifier._object;
  uint64_t countAndFlagsBits = identifier._countAndFlagsBits;
  uint64_t v69 = *v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  *(void *)&long long v71 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v68 = &v62[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  __chkstk_darwin(v7 - 8);
  id v9 = &v62[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult?);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = &v62[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = (void *)v1[6];
  id v14 = [v13 discoveredDevices];
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CBDevice);
  unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  uint64_t v70 = countAndFlagsBits;
  id v16 = specialized Sequence.first(where:)(v15, countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v16)
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)log);
    swift_bridgeObjectRetain_n();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      unint64_t v37 = (uint8_t *)swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v37 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, (unint64_t)object, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to find ranged device %s in bluetooth's discovered devices:", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v48 = [v13 discoveredDevices];
    unint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v49 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
      if (!v50) {
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v50 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v50) {
        goto LABEL_36;
      }
    }
    if (v50 < 1)
    {
      __break(1u);
      return;
    }
    uint64_t v52 = 0;
    *(void *)&long long v51 = 138412290;
    long long v71 = v51;
    do
    {
      if ((v49 & 0xC000000000000001) != 0) {
        id v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v54 = *(id *)(v49 + 8 * v52 + 32);
      }
      int v55 = v54;
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v56))
      {
        uint64_t v57 = swift_slowAlloc();
        uint64_t v58 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = v71;
        *(void *)(v57 + 4) = v55;
        *uint64_t v58 = v55;
        _os_log_impl((void *)&_mh_execute_header, v53, v56, "device: %@", (uint8_t *)v57, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v53 = v55;
      }

      ++v52;
    }
    while (v50 != v52);
LABEL_36:
    swift_bridgeObjectRelease_n();
    return;
  }
  id v17 = v16;
  uint64_t v18 = specialized NearbyInvitationRangedHost.init(with:)(v17);
  if (v19)
  {
    Swift::Int v21 = v18;
    uint64_t v22 = v19;
    uint64_t v67 = v12;
    unsigned __int8 v23 = v20;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)log);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    int v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    int v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = swift_slowAlloc();
      id v65 = v17;
      uint64_t v29 = v28;
      uint64_t v64 = swift_slowAlloc();
      uint64_t v74 = v64;
      *(_DWORD *)uint64_t v29 = 136315650;
      uint64_t v66 = v21;
      uint64_t v30 = _typeName(_:qualified:)();
      int v63 = v27;
      v72[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      v72[0] = v66;
      v72[1] = v22;
      unsigned __int8 v73 = v23;
      swift_bridgeObjectRetain();
      uint64_t v69 = v5;
      uint64_t v32 = String.init<A>(reflecting:)();
      v72[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      Swift::Int v21 = v66;
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2080;
      swift_bridgeObjectRetain();
      v72[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, (unint64_t)object, &v74);
      uint64_t v5 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v63, "%s: Found ranged device: %s with identifier: %s", (uint8_t *)v29, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v17 = v65;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v44 = v71;
    swift_beginAccess();
    specialized Set._Variant.insert(_:)((uint64_t)&v74, v21, v22, v23);
    swift_endAccess();
    uint64_t v45 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*v2 + 296))(v45);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v44 + 48))(v9, 1, v5))
    {

      outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult);
      uint64_t v47 = (uint64_t)v67;
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v67, 1, 1, v46);
    }
    else
    {
      os_log_t v59 = v68;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v44 + 16))(v68, v9, v5);
      outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
      v72[0] = (uint64_t)v17;
      uint64_t v47 = (uint64_t)v67;
      AsyncStream.Continuation.yield(_:)();
      (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v59, v5);
      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v47, 0, 1, v60);
    }
    outlined destroy of Any?(v47, &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult?);
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)log);
    *(void *)&long long v71 = v17;
    unint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      int v42 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 138412290;
      v72[0] = v71;
      id v43 = (id)v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v42 = v16;

      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed to get Bluetooth device after ranging: %@", v41, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v61 = (void *)v71;
    }
  }
}

id *NearbyInvitationsScanner.deinit()
{
  swift_bridgeObjectRelease();

  swift_release();
  outlined destroy of Any?((uint64_t)v0+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream, &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  outlined destroy of Any?((uint64_t)v0+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner_deviceFoundContinuation, &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  return v0;
}

uint64_t NearbyInvitationsScanner.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  swift_release();
  outlined destroy of Any?((uint64_t)v0+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream, &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  outlined destroy of Any?((uint64_t)v0+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner_deviceFoundContinuation, &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  return swift_deallocClassInstance();
}

uint64_t NearbyInvitationsInviteAdvertiser.lock.getter()
{
  return swift_retain();
}

uint64_t NearbyInvitationsInviteAdvertiser.publicAssertions.didset()
{
  uint64_t v1 = v0;
  if (one-time initialization token for log == -1) {
    goto LABEL_2;
  }
LABEL_39:
  swift_once();
LABEL_2:
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)log);
  swift_retain_n();
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = off_100104000;
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_beginAccess();
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_bridgeObjectRetain();
    uint64_t v7 = Dictionary.description.getter();
    unint64_t v9 = v8;
    uint64_t v5 = off_100104000;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "new assertions: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  Lock.assertOwned()();
  uint64_t v10 = (char *)v5[204] + v1;
  swift_beginAccess();
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *(void *)v10 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(*(void *)v10 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(*(void *)v10 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  if (v15)
  {
LABEL_8:
    unint64_t v19 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v20 = v19 | (v18 << 6);
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v22 >= v16) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v12 + 8 * v22);
    ++v18;
    if (!v23)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_35;
      }
      unint64_t v23 = *(void *)(v12 + 8 * v18);
      if (!v23)
      {
        int64_t v18 = v22 + 2;
        if (v22 + 2 >= v16) {
          goto LABEL_35;
        }
        unint64_t v23 = *(void *)(v12 + 8 * v18);
        if (!v23)
        {
          int64_t v18 = v22 + 3;
          if (v22 + 3 >= v16) {
            goto LABEL_35;
          }
          unint64_t v23 = *(void *)(v12 + 8 * v18);
          if (!v23)
          {
            int64_t v18 = v22 + 4;
            if (v22 + 4 >= v16) {
              goto LABEL_35;
            }
            unint64_t v23 = *(void *)(v12 + 8 * v18);
            if (!v23) {
              break;
            }
          }
        }
      }
    }
LABEL_34:
    unint64_t v15 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_9:
    uint64_t v21 = *(void *)(*(void *)(v11 + 56) + 8 * v20);
    if (v21)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v26 = _swiftEmptyArrayStorage[2];
      unint64_t v25 = _swiftEmptyArrayStorage[3];
      if (v26 >= v25 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v26 + 1;
      _swiftEmptyArrayStorage[v26 + 4] = v21;
      if (v15) {
        goto LABEL_8;
      }
    }
    else if (v15)
    {
      goto LABEL_8;
    }
  }
  int64_t v24 = v22 + 5;
  if (v24 >= v16)
  {
LABEL_35:
    swift_release();
    uint64_t v27 = _swiftEmptyArrayStorage[2];
    swift_release();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "NearbyInvitationsInviteAdvertiser: Re-calculated needsPublicBit: %{BOOL}d", v30, 8u);
      swift_slowDealloc();
    }

    return (uint64_t)[*(id *)(v1 + 16) setNearbyInfoV2Flags:4 * (v27 != 0)];
  }
  unint64_t v23 = *(void *)(v12 + 8 * v24);
  if (v23)
  {
    int64_t v18 = v24;
    goto LABEL_34;
  }
  while (1)
  {
    int64_t v18 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v18 >= v16) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v12 + 8 * v18);
    ++v24;
    if (v23) {
      goto LABEL_34;
    }
  }
  __break(1u);
  return result;
}

uint64_t NearbyInvitationsInviteAdvertiser.publicAssertions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyInvitationsInviteAdvertiser.publicAssertions.setter(uint64_t a1)
{
  unint64_t v3 = (void *)(v1
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService33NearbyInvitationsInviteAdvertiser_publicAssertions);
  swift_beginAccess();
  *unint64_t v3 = a1;
  swift_bridgeObjectRelease();
  return NearbyInvitationsInviteAdvertiser.publicAssertions.didset();
}

uint64_t (*NearbyInvitationsInviteAdvertiser.publicAssertions.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return NearbyInvitationsInviteAdvertiser.publicAssertions.modify;
}

uint64_t NearbyInvitationsInviteAdvertiser.publicAssertions.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return NearbyInvitationsInviteAdvertiser.publicAssertions.didset();
  }
  return result;
}

uint64_t NearbyInvitationsInviteAdvertiser.init(invitation:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService33NearbyInvitationsInviteAdvertiser_lock;
  type metadata accessor for Lock();
  swift_allocObject();
  swift_retain();
  *(void *)(v1 + v8) = Lock.init()();
  *(void *)(v1
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService33NearbyInvitationsInviteAdvertiser_publicAssertions) = &_swiftEmptyDictionarySingleton;
  swift_release();
  NearbyInvitationsAdvertiser.init()();
  unint64_t v9 = *(void **)(v1 + 16);
  swift_retain();
  [v9 setAdvertiseRate:42];
  [v9 setUseCase:131091];
  id v10 = v9;
  [v10 setNearbyInfoV2InvitationRouteType:NearbyAdvertisementRequest.route.getter()];

  id v11 = *(id *)(v2 + 16);
  NearbyAdvertisementRequest.identifier.getter();
  LOBYTE(v9) = UUID.hashValue.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  [v11 setNearbyInfoV2InvitationCounter:v9];

  id v12 = *(id *)(v2 + 16);
  NearbyAdvertisementRequest.activityType.getter();
  LODWORD(v9) = NearbyInvitationActivityType.rawValue.getter();
  [v12 setNearbyInfoV2DecryptedFlags:v9 == NearbyInvitationActivityType.rawValue.getter()];

  uint64_t v13 = *(void **)(v2 + 16);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = (uint64_t)partial apply for closure #1 in NearbyInvitationsInviteAdvertiser.init(invitation:);
  aBlock[5] = v14;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_50;
  unint64_t v15 = _Block_copy(aBlock);
  id v16 = v13;
  swift_release();
  [v16 setAdvertisingAddressChangedHandler:v15];
  _Block_release(v15);

  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)log);
  swift_retain_n();
  int64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315906;
    uint64_t v21 = _typeName(_:qualified:)();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 256;
    unsigned __int8 v23 = [*(id *)(v2 + 16) nearbyInfoV2InvitationRouteType];
    swift_release();
    LOBYTE(v28) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v20 + 15) = 256;
    unsigned __int8 v24 = [*(id *)(v2 + 16) nearbyInfoV2InvitationCounter];
    swift_release();
    LOBYTE(v28) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v20 + 18) = 256;
    unsigned __int8 v25 = [*(id *)(v2 + 16) nearbyInfoV2DecryptedFlags];
    swift_release();
    LOBYTE(v28) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s: Begin advertising with parameters: routeType=%hhu counter=%hhu types=%hhu", (uint8_t *)v20, 0x15u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
  }
  else
  {

    swift_release_n();
  }
  return v2;
}

BOOL CBNearbyInfoV2EncryptedFlags.init(invitation:)()
{
  int v0 = NearbyInvitationActivityType.rawValue.getter();
  return v0 == NearbyInvitationActivityType.rawValue.getter();
}

uint64_t closure #1 in NearbyInvitationsInviteAdvertiser.init(invitation:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 192))(result);
    return swift_release();
  }
  return result;
}

uint64_t NearbyInvitationsInviteAdvertiser.assertPublic(rotations:)()
{
  return Lock.withLock<A>(_:)();
}

uint64_t closure #1 in NearbyInvitationsInviteAdvertiser.assertPublic(rotations:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  UUID.init()();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  id v10 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 160))(v15);
  id v12 = v11;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *v12;
  *id v12 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *id v12 = v16;
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  return v10(v15, 0);
}

uint64_t NearbyInvitationsInviteAdvertiser.releasePublicAssertion(identifier:)()
{
  return Lock.withLock<A>(_:)();
}

Swift::Void __swiftcall NearbyInvitationsInviteAdvertiser.addressChanged()()
{
}

uint64_t closure #1 in NearbyInvitationsInviteAdvertiser.addressChanged()(uint64_t a1)
{
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)log);
  swift_retain_n();
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    (*(void (**)(void))(*(void *)a1 + 144))();
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = Dictionary.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Notified about address rotation, assertions: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)a1 + 144))();
  uint64_t v10 = specialized Dictionary.compactMapValues<A>(_:)(v9);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(v10);
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: UInt));
  uint64_t v2 = __chkstk_darwin(v46);
  id v48 = (char *)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v45 = (char *)v41 - v5;
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v41 - v6;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v44 = a1 + 64;
  unint64_t v49 = &_swiftEmptyDictionarySingleton;
  uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
  if (-v9 < 64) {
    uint64_t v10 = ~(-1 << -(char)v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v8;
  v41[1] = -1 << *(unsigned char *)(a1 + 32);
  int64_t v43 = (unint64_t)(63 - v9) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v42 = a1;
  if (v11) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v15 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v15 < v43)
    {
      unint64_t v16 = *(void *)(v44 + 8 * v15);
      int64_t v17 = i + 1;
      if (v16) {
        goto LABEL_23;
      }
      int64_t v17 = i + 2;
      if (i + 2 >= v43) {
        goto LABEL_39;
      }
      unint64_t v16 = *(void *)(v44 + 8 * v17);
      if (v16) {
        goto LABEL_23;
      }
      int64_t v17 = i + 3;
      if (i + 3 >= v43) {
        goto LABEL_39;
      }
      unint64_t v16 = *(void *)(v44 + 8 * v17);
      if (v16) {
        goto LABEL_23;
      }
      int64_t v17 = i + 4;
      if (i + 4 >= v43) {
        goto LABEL_39;
      }
      unint64_t v16 = *(void *)(v44 + 8 * v17);
      if (v16)
      {
LABEL_23:
        unint64_t v11 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
        for (i = v17; ; unint64_t v14 = v13 | (i << 6))
        {
          uint64_t v19 = *(void *)(a1 + 48);
          uint64_t v20 = type metadata accessor for UUID();
          uint64_t v21 = *(void *)(v20 - 8);
          uint64_t v22 = v21;
          uint64_t v23 = *(void *)(v21 + 72);
          (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v7, v19 + v23 * v14, v20);
          uint64_t v24 = *(void *)(*(void *)(a1 + 56) + 8 * v14);
          uint64_t v26 = (uint64_t)v45;
          uint64_t v25 = v46;
          *(void *)&v7[*(int *)(v46 + 48)] = v24;
          outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)v7, v26, &demangling cache variable for type metadata for (key: UUID, value: UInt));
          uint64_t v27 = v26;
          unint64_t v28 = *(void *)(v26 + *(int *)(v25 + 48));
          if (v28 < 2)
          {
            uint64_t result = outlined destroy of Any?(v27, &demangling cache variable for type metadata for (key: UUID, value: UInt));
            if (!v11) {
              goto LABEL_8;
            }
          }
          else
          {
            os_log_type_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
            v29(v48, v27, v20);
            uint64_t v30 = v49;
            unint64_t v31 = v49[2];
            if (v49[3] <= v31)
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31 + 1, 1);
              uint64_t v30 = v49;
            }
            lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v32 = v30 + 8;
            uint64_t v33 = -1 << *((unsigned char *)v30 + 32);
            unint64_t v34 = result & ~v33;
            unint64_t v35 = v34 >> 6;
            if (((-1 << v34) & ~v30[(v34 >> 6) + 8]) != 0)
            {
              unint64_t v36 = __clz(__rbit64((-1 << v34) & ~v30[(v34 >> 6) + 8])) | v34 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              char v37 = 0;
              unint64_t v38 = (unint64_t)(63 - v33) >> 6;
              do
              {
                if (++v35 == v38 && (v37 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_40;
                }
                BOOL v39 = v35 == v38;
                if (v35 == v38) {
                  unint64_t v35 = 0;
                }
                v37 |= v39;
                uint64_t v40 = v32[v35];
              }
              while (v40 == -1);
              unint64_t v36 = __clz(__rbit64(~v40)) + (v35 << 6);
            }
            *(void *)((char *)v32 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
            uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v29)(v30[6] + v36 * v23, v48, v20);
            *(void *)(v30[7] + 8 * v36) = v28 - 1;
            ++v30[2];
            a1 = v42;
            if (!v11) {
              goto LABEL_8;
            }
          }
LABEL_7:
          unint64_t v13 = __clz(__rbit64(v11));
          v11 &= v11 - 1;
        }
      }
      int64_t v18 = i + 5;
      if (i + 5 < v43)
      {
        unint64_t v16 = *(void *)(v44 + 8 * v18);
        if (v16)
        {
          int64_t v17 = i + 5;
          goto LABEL_23;
        }
        while (1)
        {
          int64_t v17 = v18 + 1;
          if (__OFADD__(v18, 1)) {
            goto LABEL_41;
          }
          if (v17 >= v43) {
            break;
          }
          unint64_t v16 = *(void *)(v44 + 8 * v17);
          ++v18;
          if (v16) {
            goto LABEL_23;
          }
        }
      }
    }
LABEL_39:
    outlined consume of Set<IDSAccount>.Iterator._Variant();
    return (uint64_t)v49;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void NearbyInvitationsInviteAdvertiser.init()()
{
}

uint64_t NearbyInvitationsInviteAdvertiser.__ivar_destroyer()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t NearbyInvitationsInviteAdvertiser.deinit()
{
  NearbyInvitationsAdvertiser.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NearbyInvitationsInviteAdvertiser.__deallocating_deinit()
{
  NearbyInvitationsAdvertiser.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t key path setter for NearbyInvitationsInviteScanner.lostInvitations : NearbyInvitationsInviteScanner(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (String, Any)(a1, (uint64_t)v6, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 448))(v6);
}

uint64_t NearbyInvitationsInviteScanner.lostInvitations.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyInvitationsScanner.deviceFoundContinuation.getter(&OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitations, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?, a1);
}

uint64_t NearbyInvitationsScanner.deviceFoundContinuation.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess();
  return outlined init with copy of (String, Any)(v6, a3, a2);
}

uint64_t NearbyInvitationsInviteScanner.lostInvitations.setter(uint64_t a1)
{
  return NearbyInvitationsScanner.deviceFoundContinuation.setter(a1, &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitations, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
}

uint64_t NearbyInvitationsScanner.deviceFoundContinuation.setter(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = v3 + *a2;
  swift_beginAccess();
  outlined assign with take of AsyncStream<CBDevice>?(a1, v6, a3);
  return swift_endAccess();
}

uint64_t (*NearbyInvitationsInviteScanner.lostInvitations.modify())()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t NearbyInvitationsInviteScanner.advertisements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyInvitationsInviteScanner.advertisements.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_advertisements);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyInvitationsInviteScanner.advertisements.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyInvitationsInviteScanner.init(ignoringDistance:)(char a1)
{
  uint64_t v3 = v1
     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitations;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)(v1
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_advertisements) = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = v1
     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_scanContinuation;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(v1+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitationContinuation, 1, 1, v6);
  NearbyInvitationsScanner.init(ignoringDistance:)(a1);
  uint64_t v8 = *(void **)(v1 + 48);
  swift_retain();
  [v8 setUseCase:131092];
  id v9 = v8;
  [v9 addDiscoveryType:21];

  swift_release();
  return v1;
}

uint64_t NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v26 = a2;
  uint64_t v27 = a1;
  uint64_t v24 = *v3;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation.BufferingPolicy);
  uint64_t v29 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.BufferingPolicy);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  unint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CBDevice);
  uint64_t v15 = enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v9);
  AsyncStream.init(_:bufferingPolicy:_:)();
  type metadata accessor for NearbyAdvertisement();
  unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 104);
  v29 += 104;
  uint64_t v17 = v22;
  v16(v5, v15, v22);
  uint64_t v18 = v24;
  unint64_t v35 = v3;
  uint64_t v36 = v24;
  AsyncStream.init(_:bufferingPolicy:_:)();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 0, 1, v19);
  (*(void (**)(char *))(*v3 + 448))(v8);
  v16(v5, v15, v17);
  uint64_t v30 = v3;
  unint64_t v31 = v14;
  uint64_t v32 = v26;
  uint64_t v33 = v27;
  uint64_t v34 = v18;
  AsyncStream.init(_:bufferingPolicy:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v14, v25);
}

uint64_t closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = a4;
  uint64_t v49 = a6;
  uint64_t v45 = a3;
  uint64_t v46 = a5;
  uint64_t v53 = a2;
  uint64_t v39 = a1;
  uint64_t v55 = type metadata accessor for UUID();
  uint64_t v52 = *(void *)(v55 - 8);
  uint64_t v47 = *(void *)(v52 + 64);
  __chkstk_darwin(v55);
  id v54 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v44 = v9[8];
  __chkstk_darwin(v8);
  long long v51 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  uint64_t v50 = *(void *)(v43 - 8);
  uint64_t v11 = *(void *)(v50 + 64);
  __chkstk_darwin(v43);
  uint64_t v42 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v12 - 8);
  unint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v40 = v9;
  uint64_t v21 = (void (*)(char *, uint64_t, uint64_t))v9[2];
  v21((char *)&v38 - v19, a1, v8);
  uint64_t v22 = (void (*)(char *, void, uint64_t, uint64_t))v9[7];
  uint64_t v23 = v8;
  uint64_t v38 = v8;
  v22(v20, 0, 1, v8);
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)v20, (uint64_t)v18, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  uint64_t v24 = v53
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_scanContinuation;
  swift_beginAccess();
  outlined assign with take of AsyncStream<CBDevice>?((uint64_t)v18, v24, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  swift_endAccess();
  uint64_t v25 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v14, 1, 1, v25);
  uint64_t v26 = v50;
  uint64_t v28 = v42;
  uint64_t v27 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v42, v45, v43);
  v21(v51, v39, v23);
  uint64_t v29 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v54, v46, v55);
  unint64_t v30 = (*(unsigned __int8 *)(v26 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unint64_t v31 = (v11 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v32 = v40;
  unint64_t v33 = (*((unsigned __int8 *)v40 + 80) + v31 + 8) & ~(unint64_t)*((unsigned __int8 *)v40 + 80);
  unint64_t v34 = (v44 + *(unsigned __int8 *)(v29 + 80) + v33) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  unint64_t v35 = (v47 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = (char *)swift_allocObject();
  *((void *)v36 + 2) = 0;
  *((void *)v36 + 3) = 0;
  *((void *)v36 + 4) = v53;
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(&v36[v30], v28, v27);
  *(void *)&v36[v31] = v48;
  ((void (*)(char *, char *, uint64_t))v32[4])(&v36[v33], v51, v38);
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(&v36[v34], v54, v55);
  *(void *)&v36[v35] = v49;
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v41, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:), (uint64_t)v36);
  return swift_release();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[14] = a8;
  v8[15] = v17;
  v8[12] = a6;
  v8[13] = a7;
  v8[10] = a4;
  v8[11] = a5;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation.YieldResult);
  unsigned char v8[16] = v10;
  v8[17] = *(void *)(v10 - 8);
  v8[18] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  v8[19] = v11;
  v8[20] = *(void *)(v11 - 8);
  v8[21] = swift_task_alloc();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Iterator);
  v8[22] = v12;
  v8[23] = *(void *)(v12 - 8);
  v8[24] = swift_task_alloc();
  uint64_t v15 = (uint64_t (*)(void))(*(void *)(*(void *)a4 + 328) + **(int **)(*(void *)a4 + 328));
  uint64_t v13 = (void *)swift_task_alloc();
  v8[25] = v13;
  *uint64_t v13 = v8;
  v13[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:);
  return v15();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:), 0, 0);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:);
  uint64_t v2 = *(void *)(v0 + 176);
  return AsyncStream.Iterator.next(isolation:)(v0 + 48, 0, 0, v2);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t (*v30)(uint64_t);
  id v31;
  void (*v32)(uint64_t, void);
  uint64_t *v33;
  uint64_t *v34;
  char isUniquelyReferenced_nonNull_native;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  void *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  long long v71 = v0;
  uint64_t v2 = v0 + 48;
  uint64_t v1 = *(void **)(v0 + 48);
  if (v1)
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)log);
    uint64_t v4 = v1;
    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      *(void *)(v7 + 4) = v4;
      *uint64_t v8 = v1;

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "!!! Found device %@", (uint8_t *)v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v11 = *(void *)(v0 + 96);
    uint64_t v12 = [v4 nearbyInfoV2DecryptedFlags] & 1;
    uint64_t v13 = *(void *)(v11 + 16);
    if (v13)
    {
      swift_bridgeObjectRetain();
      unint64_t v14 = NearbyInvitationActivityType.rawValue.getter();
      if (v14 == NearbyInvitationActivityType.rawValue.getter())
      {
LABEL_14:
        swift_bridgeObjectRelease();
        uint64_t v20 = [v4 stableIdentifier];
        if (!v20)
        {
          uint64_t v44 = v4;
          uint64_t v45 = Logger.logObject.getter();
          uint64_t v46 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v45, v46))
          {
            uint64_t v47 = swift_slowAlloc();
            uint64_t v48 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v47 = 138412290;
            *(void *)(v47 + 4) = v44;
            *uint64_t v48 = v1;
            _os_log_impl((void *)&_mh_execute_header, v45, v46, "Device contains invitation, but no stableIdentifier. device: %@", (uint8_t *)v47, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
          AsyncStream.Continuation.finish()();

          goto LABEL_37;
        }
        uint64_t v21 = v20;
        uint64_t v22 = *(void *)(v0 + 160);
        uint64_t v23 = *(void *)(v0 + 168);
        uint64_t v24 = *(void *)(v0 + 152);
        uint64_t v25 = *(void *)(v0 + 112);
        uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v27 = v26;

        type metadata accessor for NearbyAdvertisement();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v23, v25, v24);
        uint64_t v28 = v4;
        uint64_t v29 = (void *)NearbyAdvertisement.init(id:device:)(v23, v28);
        if (v29)
        {
          uint64_t v68 = v28;
          unint64_t v30 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + 80) + 480);
          uint64_t v67 = v29;
          unint64_t v31 = v29;
          uint64_t v32 = (void (*)(uint64_t, void))v30(v0 + 16);
          unint64_t v34 = v33;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v70 = *v34;
          void *v34 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v31, v69, v27, isUniquelyReferenced_nonNull_native);
          void *v34 = v70;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v32(v0 + 16, 0);
          uint64_t v36 = v31;
          char v37 = Logger.logObject.getter();
          uint64_t v38 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v37, v38))
          {
            uint64_t v39 = swift_slowAlloc();
            uint64_t v40 = (void *)swift_slowAlloc();
            uint64_t v70 = swift_slowAlloc();
            *(_DWORD *)uint64_t v39 = 136315394;
            uint64_t v41 = _typeName(_:qualified:)();
            *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v70);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v39 + 12) = 2112;
            *(void *)(v0 + 72) = v36;
            uint64_t v43 = v36;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v40 = v67;

            _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s: !!! Yielded invite %@", (uint8_t *)v39, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          uint64_t v53 = *(void *)(v0 + 136);
          id v54 = *(void *)(v0 + 144);
          uint64_t v55 = *(void *)(v0 + 128);
          *(void *)(v0 + 56) = v36;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
          AsyncStream.Continuation.yield(_:)();

          (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
          uint64_t v2 = v0 + 48;
          goto LABEL_37;
        }
        swift_bridgeObjectRelease();
        uint64_t v4 = v28;
        uint64_t v49 = Logger.logObject.getter();
        uint64_t v50 = static os_log_type_t.error.getter();
        uint64_t v2 = v0 + 48;
        if (os_log_type_enabled(v49, v50))
        {
          long long v51 = swift_slowAlloc();
          uint64_t v52 = (void *)swift_slowAlloc();
          *(_DWORD *)long long v51 = 138412290;
          *(void *)(v51 + 4) = v4;
          *uint64_t v52 = v1;
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "Unable to create NearbyAdvertisement from device: %@", (uint8_t *)v51, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          swift_slowDealloc();
LABEL_32:
          swift_slowDealloc();

          goto LABEL_37;
        }

        goto LABEL_34;
      }
      if (v13 != 1)
      {
        uint64_t v15 = NearbyInvitationActivityType.rawValue.getter();
        uint64_t v16 = NearbyInvitationActivityType.rawValue.getter();
        if (v15 == v16) {
          goto LABEL_14;
        }
        if (v13 != 2)
        {
          os_log_type_t v56 = 10;
          while (1)
          {
            uint64_t v57 = v56 - 7;
            if (__OFADD__(v56 - 8, 1)) {
              break;
            }
            uint64_t v58 = NearbyInvitationActivityType.rawValue.getter();
            uint64_t v16 = NearbyInvitationActivityType.rawValue.getter();
            if (v58 == v16) {
              goto LABEL_14;
            }
            ++v56;
            if (v57 == v13) {
              goto LABEL_29;
            }
          }
          __break(1u);
          return AsyncStream.Iterator.next(isolation:)(v16, v17, v18, v19);
        }
      }
LABEL_29:
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain_n();
    uint64_t v49 = Logger.logObject.getter();
    os_log_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v59))
    {
      uint64_t v60 = swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v61 = Array.description.getter();
      int v63 = v62;
      swift_bridgeObjectRelease();
      *(void *)(v60 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v63, &v70);
      uint64_t v2 = v0 + 48;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v60 + 12) = 2080;
      *(_DWORD *)(v0 + 216) = v12;
      uint64_t v64 = String.init<A>(reflecting:)();
      *(void *)(v60 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v70);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v59, "Ignoring device. Activity types don't match. Looking for activities: %s but got %s", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_32;
    }

    swift_bridgeObjectRelease_n();
LABEL_34:

LABEL_37:
    uint64_t v66 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v66;
    *uint64_t v66 = v0;
    v66[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:);
    uint64_t v19 = *(void *)(v0 + 176);
    uint64_t v16 = v2;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    return AsyncStream.Iterator.next(isolation:)(v16, v17, v18, v19);
  }
  (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t NearbySession.RangedDevice.Location.showDevice.getter(char a1)
{
  return a1 & 1;
}

uint64_t NearbyAdvertisement.init(id:device:)(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v33 - v10;
  id v12 = [a2 stableIdentifier];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v38 = v2;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    unsigned __int8 v17 = [a2 nearbyInfoV2InvitationCounter];
    LOBYTE(v37) = [a2 nearbyInfoV2DecryptedFlags] & 1;
    int v37 = v37;
    unsigned int v36 = [a2 nearbyInfoV2InvitationRouteType];
    unsigned __int8 v18 = [a2 deviceFlags];
    uint64_t v39 = a1;
    if ((v18 & 0x80) != 0)
    {
      type metadata accessor for NearbyAdvertisement();
      uint64_t v24 = static NearbyAdvertisement.meContactID.getter();
      uint64_t v34 = v25;
      uint64_t v35 = v24;
    }
    else
    {
      id v19 = [a2 contactID];
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v34 = v22;
        uint64_t v35 = v21;
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
      }
    }
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v26(v11, v39, v5);
    v26(v9, (uint64_t)v11, v5);
    v41[0] = v14;
    v41[1] = v16;
    v27._uint64_t countAndFlagsBits = 45;
    v27._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    unsigned __int8 v40 = v17;
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    id v29 = [a2 accountID];
    if (v29)
    {
      unint64_t v30 = v29;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    LOBYTE(v41[0]) = v36;
    specialized Data.init<A>(_:)((uint64_t)v41, (uint64_t)v41 + 1);
    uint64_t v23 = dispatch thunk of NearbyAdvertisement.__allocating_init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)();

    unint64_t v31 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v31(v39, v5);
    v31((uint64_t)v11, v5);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    return 0;
  }
  return v23;
}

uint64_t closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v23 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v16((char *)&v23 - v14, a1, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)v15, (uint64_t)v13, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  uint64_t v17 = v24;
  uint64_t v18 = v24
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitationContinuation;
  swift_beginAccess();
  outlined assign with take of AsyncStream<CBDevice>?((uint64_t)v13, v18, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  swift_endAccess();
  uint64_t v19 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v9, 1, 1, v19);
  v16((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v4);
  unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = 0;
  *((void *)v21 + 3) = 0;
  *((void *)v21 + 4) = v17;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v21[v20], (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  *(void *)&v21[(v6 + v20 + 7) & 0xFFFFFFFFFFFFFFF8] = v25;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations(), (uint64_t)v21);
  return swift_release();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[14] = a5;
  v6[15] = a6;
  v6[13] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation.YieldResult);
  v6[16] = v7;
  v6[17] = *(void *)(v7 - 8);
  v6[18] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  v6[19] = v8;
  v6[20] = *(void *)(v8 - 8);
  v6[21] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Iterator);
  v6[22] = v9;
  v6[23] = *(void *)(v9 - 8);
  v6[24] = swift_task_alloc();
  return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations(), 0, 0);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  (*(void (**)(void))(**(void **)(v0 + 104) + 392))();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations();
  uint64_t v5 = *(void *)(v0 + 176);
  return AsyncStream.Iterator.next(isolation:)(v0 + 64, 0, 0, v5);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, void);
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  char v13;
  char v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t (*v55)(void);
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  uint64_t v62 = v0;
  uint64_t v1 = *(void **)(v0 + 64);
  if (v1)
  {
    uint64_t v2 = [*(id *)(v0 + 64) stableIdentifier];
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v60 = v1;
      uint64_t v4 = (uint64_t *)(v0 + 88);
      uint64_t v5 = *(void *)(v0 + 104);
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      uint64_t v9 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))(*(void *)v5 + 480))(v0 + 16);
      uint64_t v11 = v10;
      swift_bridgeObjectRetain();
      uint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v8);
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      if (v14)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v4 = *v11;
        *uint64_t v11 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
        uint64_t v16 = *v4;
        swift_bridgeObjectRelease();
        uint64_t v17 = *(void **)(*(void *)(v16 + 56) + 8 * v12);
        specialized _NativeDictionary._delete(at:)(v12, v16);
        *uint64_t v11 = v16;
        swift_bridgeObjectRelease();
        v9(v0 + 16, 0);
        swift_bridgeObjectRelease();
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v18 = type metadata accessor for Logger();
        __swift_project_value_buffer(v18, (uint64_t)log);
        uint64_t v19 = v17;
        unint64_t v20 = Logger.logObject.getter();
        uint64_t v21 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = swift_slowAlloc();
          uint64_t v23 = (void *)swift_slowAlloc();
          uint64_t v61 = swift_slowAlloc();
          *(_DWORD *)uint64_t v22 = 136315394;
          uint64_t v24 = _typeName(_:qualified:)();
          *(void *)(v22 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v61);
          swift_bridgeObjectRelease();
          *(_WORD *)(v22 + 12) = 2112;
          *(void *)(v22 + 14) = v19;
          NSObject *v23 = v19;

          _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s lost advertisement %@ because of BT device being lost.", (uint8_t *)v22, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        long long v51 = *(void *)(v0 + 136);
        uint64_t v50 = *(void *)(v0 + 144);
        uint64_t v52 = *(void *)(v0 + 128);
        *(void *)(v0 + 96) = v19;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
        AsyncStream.Continuation.yield(_:)();

        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
        uint64_t v53 = (void *)swift_task_alloc();
        *(void *)(v0 + 200) = v53;
        *uint64_t v53 = v0;
        v53[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations();
        id v54 = *(void *)(v0 + 176);
        return AsyncStream.Iterator.next(isolation:)(v0 + 64, 0, 0, v54);
      }
      v9(v0 + 16, 0);
      swift_bridgeObjectRelease();
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      __swift_project_value_buffer(v38, (uint64_t)log);
      uint64_t v39 = v60;
      unsigned __int8 v40 = Logger.logObject.getter();
      uint64_t v41 = static os_log_type_t.info.getter();
      uint64_t v42 = os_log_type_enabled(v40, v41);
      uint64_t v44 = *(void *)(v0 + 184);
      uint64_t v43 = *(void *)(v0 + 192);
      uint64_t v45 = *(void *)(v0 + 176);
      if (v42)
      {
        uint64_t v46 = swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136315394;
        uint64_t v47 = _typeName(_:qualified:)();
        *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 12) = 2112;
        *(void *)(v0 + 80) = v39;
        uint64_t v49 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v60;

        _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s Lost device %@ didn't have an advertisement.", (uint8_t *)v46, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
      }
    }
    else
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)log);
      Swift::String v27 = v1;
      Swift::String v28 = Logger.logObject.getter();
      id v29 = static os_log_type_t.default.getter();
      unint64_t v30 = os_log_type_enabled(v28, v29);
      unint64_t v31 = *(void *)(v0 + 184);
      uint64_t v32 = *(void *)(v0 + 192);
      uint64_t v33 = *(void *)(v0 + 176);
      if (v30)
      {
        os_log_t v59 = *(void *)(v0 + 176);
        uint64_t v34 = swift_slowAlloc();
        uint64_t v58 = (void *)swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136315394;
        uint64_t v35 = _typeName(_:qualified:)();
        *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v34 + 12) = 2112;
        *(void *)(v0 + 56) = v27;
        int v37 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v58 = v1;

        _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s Don't have a stableIdentifier for device: %@, can't tell if it had an advertisement.", (uint8_t *)v34, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v59);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
      }
    }
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v55 = *(uint64_t (**)(void))(v0 + 8);
  return v55();
}

Swift::Void __swiftcall NearbyInvitationsInviteScanner.stopScan()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1
     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_scanContinuation;
  swift_beginAccess();
  outlined init with copy of (String, Any)(v9, (uint64_t)v8, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
  {
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
    AsyncStream.Continuation.finish()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  NearbyInvitationsScanner.stopScan()();
}

uint64_t closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = 0;
  *((void *)v12 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v12[v11], (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations(), (uint64_t)v12);
  return swift_release();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation.YieldResult);
  v5[6] = v6;
  v5[7] = *(void *)(v6 - 8);
  v5[8] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  v5[9] = v7;
  v5[10] = *(void *)(v7 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Iterator);
  v5[12] = v8;
  v5[13] = *(void *)(v8 - 8);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations(), 0, 0);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  (*(void (**)(void))(**(void **)(v0 + 32) + 384))();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations();
  uint64_t v5 = *(void *)(v0 + 96);
  return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0, 0, v5);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v18 = v0;
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    NearbyInvitationsInviteScanner.handleChanged(device:)(*(void **)(v0 + 16));
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)log);
    swift_retain_n();
    uint64_t v3 = v1;
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315394;
      uint64_t v8 = _typeName(_:qualified:)();
      *(void *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v17);
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v6 + 12) = 2112;
      *(void *)(v6 + 14) = v3;
      char *v7 = v1;

      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s: found filtered invitation device: %@", (uint8_t *)v6, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
    uint64_t v13 = *(void *)(v0 + 56);
    uint64_t v12 = *(void *)(v0 + 64);
    uint64_t v14 = *(void *)(v0 + 48);
    *(void *)(v0 + 24) = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v15;
    *uint64_t v15 = v0;
    v15[1] = closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations();
    uint64_t v16 = *(void *)(v0 + 96);
    return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0, 0, v16);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

void NearbyInvitationsInviteScanner.handleChanged(device:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v67 = *(void *)v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation.YieldResult);
  uint64_t v69 = *(void *)(v4 - 8);
  uint64_t v70 = v4;
  __chkstk_darwin(v4);
  uint64_t v68 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  __chkstk_darwin(v6 - 8);
  unsigned __int8 v73 = ((char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)log);
  id v14 = a1;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v72 = v9;
  if (v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = (void *)swift_slowAlloc();
    id v65 = v18;
    uint64_t v66 = v2;
    *(_DWORD *)uint64_t v18 = 138412290;
    v75[0] = (uint64_t)v14;
    id v19 = v14;
    uint64_t v71 = v13;
    id v20 = v19;
    uint64_t v2 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v64 = v14;

    uint64_t v13 = v71;
    uint64_t v9 = v72;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Device changed: %@", v65, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v21 = (uint64_t)&v2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitationContinuation];
  swift_beginAccess();
  uint64_t v22 = v21;
  uint64_t v23 = v73;
  outlined init with copy of (String, Any)(v22, (uint64_t)v73, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  if ((*(unsigned int (**)(NSObject *, uint64_t, uint64_t))(v9 + 48))(v23, 1, v8) == 1)
  {
    outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
    id v24 = v14;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      Swift::String v27 = (uint8_t *)swift_slowAlloc();
      Swift::String v28 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::String v27 = 138412290;
      v75[0] = (uint64_t)v24;
      id v29 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Swift::String v28 = v24;

      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Not able to tell anyone about lost device: %@", v27, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return;
  }
  (*(void (**)(char *, NSObject *, uint64_t))(v9 + 32))(v11, v23, v8);
  id v30 = [v14 stableIdentifier];
  if (!v30)
  {
    id v52 = v14;
    uint64_t v53 = Logger.logObject.getter();
    LOBYTE(v54) = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, (os_log_type_t)v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      unsigned __int8 v73 = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 138412290;
      v75[0] = (uint64_t)v52;
      os_log_type_t v56 = v11;
      id v57 = v52;
      uint64_t v58 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v73->isa = (Class)v52;

      unint64_t v11 = v56;
      os_log_t v59 = "Couldn't find a stableIdentifier for device: %@";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v54, v59, v55, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_20:

      (*(void (**)(char *, uint64_t))(v58 + 8))(v11, v8);
      return;
    }
LABEL_19:

    uint64_t v58 = v72;
    goto LABEL_20;
  }
  unint64_t v31 = v30;
  uint64_t v32 = v14;
  uint64_t v71 = v13;
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;

  unsigned int v36 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v2 + 480))(v75);
  int v37 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v33, v35);
  v36(v75, 0);
  swift_bridgeObjectRelease();
  if (!v37)
  {
    id v52 = v32;
    uint64_t v53 = Logger.logObject.getter();
    uint64_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, (os_log_type_t)v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      unsigned __int8 v73 = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 138412290;
      v75[0] = (uint64_t)v52;
      uint64_t v60 = v11;
      id v61 = v52;
      uint64_t v58 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v73->isa = (Class)v52;

      unint64_t v11 = v60;
      os_log_t v59 = "No stored advertisement found for %@";
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v66 = v11;
  id v38 = v32;
  id v39 = v37;
  id v40 = v38;
  id v41 = v39;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  unsigned __int8 v73 = v42;
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = swift_slowAlloc();
    uint64_t v71 = v8;
    uint64_t v45 = v44;
    uint64_t v46 = (void *)swift_slowAlloc();
    id v65 = (uint8_t *)swift_slowAlloc();
    v75[0] = (uint64_t)v65;
    *(_DWORD *)uint64_t v45 = 136315650;
    uint64_t v47 = _typeName(_:qualified:)();
    uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 12) = 2112;
    uint64_t v74 = (uint64_t)v40;
    id v49 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v46 = v40;

    *(_WORD *)(v45 + 22) = 2112;
    uint64_t v74 = (uint64_t)v41;
    id v50 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v46[1] = v37;

    long long v51 = v73;
    _os_log_impl((void *)&_mh_execute_header, v73, v43, "%s: Lost device: %@ with advertisement: %@", (uint8_t *)v45, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v8 = v71;
    swift_slowDealloc();
  }
  else
  {
  }
  v75[0] = (uint64_t)v41;
  uint64_t v62 = v68;
  int v63 = v66;
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v62, v70);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v63, v8);
}

uint64_t NearbyInvitationsInviteScanner.__ivar_destroyer()
{
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitations, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
  swift_bridgeObjectRelease();
  outlined destroy of Any?(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_scanContinuation, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  return outlined destroy of Any?(v0+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitationContinuation, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
}

id *NearbyInvitationsInviteScanner.deinit()
{
  swift_bridgeObjectRelease();

  swift_release();
  outlined destroy of Any?((uint64_t)v0+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner____lazy_storage___deviceFoundStream, &demangling cache variable for type metadata for AsyncStream<CBDevice>?);
  outlined destroy of Any?((uint64_t)v0+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService24NearbyInvitationsScanner_deviceFoundContinuation, &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation?);
  outlined destroy of Any?((uint64_t)v0+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitations, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
  swift_bridgeObjectRelease();
  outlined destroy of Any?((uint64_t)v0+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_scanContinuation, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  outlined destroy of Any?((uint64_t)v0+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService30NearbyInvitationsInviteScanner_lostInvitationContinuation, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?);
  return v0;
}

uint64_t NearbyInvitationsInviteScanner.__deallocating_deinit()
{
  NearbyInvitationsInviteScanner.deinit();
  return swift_deallocClassInstance();
}

uint64_t NISessionDelegate.NIDevice.description.getter(uint64_t a1, void *a2, __int16 a3, id a4)
{
  if (a4)
  {
    id v7 = [a4 description];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = (void *)0xE700000000000000;
    uint64_t v8 = 0x74655320746F4ELL;
  }
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = a1;
  v11._uint64_t object = a2;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x204E49202CLL;
  v12._uint64_t object = (void *)0xE500000000000000;
  String.append(_:)(v12);
  if (a3) {
    uint64_t v13 = 1702195828;
  }
  else {
    uint64_t v13 = 0x65736C6166;
  }
  if (a3) {
    unint64_t v14 = 0xE400000000000000;
  }
  else {
    unint64_t v14 = 0xE500000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0x20554F202CLL;
  v16._uint64_t object = (void *)0xE500000000000000;
  String.append(_:)(v16);
  if ((a3 & 0x100) != 0) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if ((a3 & 0x100) != 0) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x27205453202CLL;
  v20._uint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = v8;
  v21._uint64_t object = v10;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 39;
  v22._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return 542327881;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NISessionDelegate.NIDevice()
{
  if (*(unsigned char *)(v0 + 17)) {
    __int16 v1 = 256;
  }
  else {
    __int16 v1 = 0;
  }
  return NISessionDelegate.NIDevice.description.getter(*(void *)v0, *(void **)(v0 + 8), v1 | *(unsigned __int8 *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t protocol witness for Identifiable.id.getter in conformance NISessionDelegate.NIDevice@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t NISessionDelegate.sessionDidStartRunning(_:)(void *a1)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NISession);
    id v7 = v3;
    uint64_t v8 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "NISession %s Running", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 360))(result);
    return swift_release();
  }
  return result;
}

uint64_t NISessionDelegate.session(_:didFailWithError:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  id v5 = a1;
  swift_errorRetain();
  id v6 = v5;
  swift_errorRetain();
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    v17[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NISession);
    id v11 = v6;
    uint64_t v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "NISession %s Failed: %@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  unint64_t v14 = (void *)(v2
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices);
  swift_beginAccess();
  *unint64_t v14 = &_swiftEmptyDictionarySingleton;
  return swift_bridgeObjectRelease();
}

uint64_t NISessionDelegate.session(_:didInvalidateWith:)(void *a1)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  id v3 = a1;
  swift_errorRetain();
  id v4 = v3;
  swift_errorRetain();
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    os_log_type_t v8 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NISession);
    id v9 = v4;
    uint64_t v10 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v8 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "NISession %s Invalidated: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 368))(result);
    return swift_release();
  }
  return result;
}

uint64_t NISessionDelegate.session(_:suspensionReasonEnded:isNoLongerSuspended:)(void *a1)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  id v3 = a1;
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315650;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NISession);
    id v7 = v3;
    uint64_t v8 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "NISession %s Suspension Ended: %ld, isActive: %{BOOL}d", (uint8_t *)v6, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(void *)Strong + 368))(Strong);
    swift_release();
  }
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 376))(result);
    return swift_release();
  }
  return result;
}

id NISessionDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NISessionDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t NearbyInvitationsAcceptInviteAdvertiser.__allocating_init(to:)(uint64_t a1)
{
  return NearbyInvitationsInviteAdvertiser.__allocating_init(invitation:)(a1, (void (*)(uint64_t))NearbyInvitationsAcceptInviteAdvertiser.init(to:));
}

uint64_t NearbyInvitationsInviteAdvertiser.__allocating_init(invitation:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = swift_allocObject();
  a2(a1);
  return v4;
}

uint64_t NearbyInvitationsAcceptInviteAdvertiser.init(to:)(void *a1)
{
  uint64_t v2 = v1;
  NearbyInvitationsAdvertiser.init()();
  uint64_t v4 = one-time initialization token for log;
  swift_retain_n();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)log);
  swift_retain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v20 = v9;
    uint64_t v10 = _typeName(_:qualified:)();
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s: Advertising AcceptInvite", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v12 = *(void **)(v2 + 16);
  objc_msgSend(v12, "setUseCase:", 131092, v19, v20);
  [v12 setNearbyActionType:56];
  [v12 setNearbyActionFlags:640];
  [v12 setAdvertiseRate:60];
  id v13 = v12;
  swift_release();
  Class isa = (Class)[a1 nearbyInfoV2AuthTagData];
  if (isa)
  {
    uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v15, v17);
  }
  [v13 setNearbyActionTargetData:isa];

  return v2;
}

void NearbyInvitationsAcceptInviteAdvertiser.init()()
{
}

uint64_t one-time initialization function for log()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, log);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)log);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)static Log.host);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v1, v2, v0);
}

BOOL NearbyInvitationMessageType.init(rawValue:)(__int16 a1)
{
  return a1 != 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyInvitationMessageType()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NearbyInvitationMessageType()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationMessageType()
{
  return Hasher._finalize()();
}

_WORD *protocol witness for RawRepresentable.init(rawValue:) in conformance NearbyInvitationMessageType@<X0>(_WORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NearbyInvitationMessageType(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  id v3 = (unsigned char *)*v2;
  if (*v2 && (uint64_t v4 = (unsigned char *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = specialized Data.InlineData.init(_:)(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = specialized Data.LargeSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = specialized Data.InlineSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v8);
  return v6;
}

uint64_t CBDevice.invitationContactID.getter()
{
  if (([v0 deviceFlags] & 0x80) != 0)
  {
    type metadata accessor for NearbyAdvertisement();
    return static NearbyAdvertisement.meContactID.getter();
  }
  else
  {
    id v1 = [v0 contactID];
    if (v1)
    {
      uint64_t v2 = v1;
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t type metadata accessor for NearbyInvitationsInviteScanner(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationsInviteScanner);
}

uint64_t sub_10002923C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  return closure #1 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)(a1, v5, v4);
}

uint64_t type metadata accessor for NearbyInvitationsInviteAdvertiser(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationsInviteAdvertiser);
}

uint64_t partial apply for closure #2 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #2 in NearbyInvitationServiceBluetoothController.broadcast(invitation:)(a1, v5, v4);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  v7[6] = v5;
  v7[7] = v6;
  v7[5] = a1;
  return _swift_task_switch(closure #1 in NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:), 0, 0);
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationServiceBluetoothController.Errors and conformance NearbyInvitationServiceBluetoothController.Errors);
  }
  return result;
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  v7[6] = v5;
  v7[7] = v6;
  v7[5] = a1;
  return _swift_task_switch(closure #1 in NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:), 0, 0);
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  v7[6] = v5;
  v7[7] = v6;
  v7[5] = a1;
  return _swift_task_switch(closure #1 in NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:), 0, 0);
}

uint64_t partial apply for closure #1 in NearbyInvitationsAdvertiser.start()()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  v2[15] = v0;
  return _swift_task_switch(closure #1 in NearbyInvitationsAdvertiser.start(), 0, 0);
}

uint64_t partial apply for closure #1 in NearbyInvitationsAdvertiser.stop()()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  v2[2] = v0;
  return _swift_task_switch(closure #1 in NearbyInvitationsAdvertiser.stop(), 0, 0);
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::Int a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(v9 + 48);
    while (1)
    {
      uint64_t v15 = v14 + 24 * v12;
      int v16 = *(unsigned __int8 *)(v15 + 16);
      BOOL v17 = *(void *)v15 == a2 && *(void *)(v15 + 8) == a3;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v16 == a4) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(*v4 + 48) + 24 * v12;
    uint64_t v22 = *(void *)v20;
    uint64_t v21 = *(void *)(v20 + 8);
    LOBYTE(v20) = *(unsigned char *)(v20 + 16);
    *(void *)a1 = v22;
    *(void *)(a1 + 8) = v21;
    *(unsigned char *)(a1 + 16) = v20;
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v23;
    swift_bridgeObjectRelease();
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    uint64_t result = 1;
    *(unsigned char *)(a1 + 16) = a4;
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for NearbyGroupMember();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    Swift::String v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      id v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      uint64_t v23 = v28;
    }
    else
    {
      uint64_t v23 = (void *)v22;
      id v24 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v23);
    *uint64_t v3 = (uint64_t)v23;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for NearbyGroupMember();
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for AnyCancellable();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v20 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v17);
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  swift_bridgeObjectRetain();
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v15, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3, Swift::Int a4, Swift::Int a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (a5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  unint64_t v15 = v13 & ~v14;
  uint64_t v16 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
  {
    id v30 = v5;
    unint64_t v31 = a1;
    uint64_t v17 = ~v14;
    uint64_t v18 = *(void *)(v12 + 48);
    do
    {
      uint64_t v19 = (void *)(v18 + 32 * v15);
      uint64_t v21 = v19[2];
      uint64_t v20 = v19[3];
      BOOL v22 = *v19 == a2 && v19[1] == a3;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v20)
        {
          if (a5)
          {
            BOOL v23 = v21 == a4 && v20 == a5;
            if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_20:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v24 = (Swift::Int *)(*(void *)(*v30 + 48) + 32 * v15);
              Swift::Int v25 = v24[1];
              Swift::Int v27 = v24[2];
              Swift::Int v26 = v24[3];
              Swift::Int *v31 = *v24;
              v31[1] = v25;
              v31[2] = v27;
              uint64_t v31[3] = v26;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              return 0;
            }
          }
        }
        else if (!a5)
        {
          goto LABEL_20;
        }
      }
      unint64_t v15 = (v15 + 1) & v17;
    }
    while (((*(void *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
    swift_bridgeObjectRelease();
    uint64_t v6 = v30;
    a1 = v31;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v32 = *v6;
  *uint64_t v6 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, a5, v15, isUniquelyReferenced_nonNull_native);
  *uint64_t v6 = v32;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  uint64_t result = 1;
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    id v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      Swift::Int v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *Swift::Int v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyInvitationRangedHost>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v32 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v31 = (unint64_t)(v5 + 63) >> 6;
    int64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        Swift::Int v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        unint64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v31) {
          goto LABEL_33;
        }
        int64_t v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          uint64_t v10 = v15 + 1;
          if (v15 + 1 >= v31) {
            goto LABEL_33;
          }
          int64_t v16 = v32[v10];
          if (!v16)
          {
            uint64_t v10 = v15 + 2;
            if (v15 + 2 >= v31) {
              goto LABEL_33;
            }
            int64_t v16 = v32[v10];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                id v30 = 1 << *(unsigned char *)(v2 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v32 = -1 << v30;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v31) {
                    goto LABEL_33;
                  }
                  int64_t v16 = v32[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      int64_t v18 = v2;
      uint64_t v19 = *(void *)(v2 + 48) + 24 * v14;
      uint64_t v20 = *(void *)v19;
      uint64_t v21 = *(void *)(v19 + 8);
      uint64_t v22 = *(unsigned char *)(v19 + 16);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      unint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v24 = result & ~v23;
      char v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
      {
        int64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        BOOL v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            char v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v8 + 8 * v25);
        }
        while (v29 == -1);
        int64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      unint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
      *(void *)unint64_t v12 = v20;
      *(void *)(v12 + 8) = v21;
      *(unsigned char *)(v12 + 16) = v22;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v18;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupMember>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      unint64_t v7 = ~(-1 << v5);
    }
    else {
      unint64_t v7 = -1;
    }
    int64_t v8 = v7 & *(void *)(v2 + 56);
    uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          unint64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            unint64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                BOOL v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v12 = v18;
            }
          }
        }
LABEL_23:
        int64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v21 = result & ~v20;
      uint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        Swift::Int v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          char v25 = v22 == v24;
          if (v22 == v24) {
            uint64_t v22 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        Swift::Int v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  void *v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    BOOL v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v26 = (unint64_t)(v5 + 63) >> 6;
    int64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        Swift::Int v13 = v12 | (v10 << 6);
      }
      else
      {
        unint64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = v27[v14];
        ++v10;
        if (!v15)
        {
          uint64_t v10 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_33;
          }
          unint64_t v15 = v27[v10];
          if (!v15)
          {
            uint64_t v10 = v14 + 2;
            if (v14 + 2 >= v26) {
              goto LABEL_33;
            }
            unint64_t v15 = v27[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v26)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                char v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v27 = -1 << v25;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  uint64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v26) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v27[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        Swift::Int v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      type metadata accessor for AnyCancellable();
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      int64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v19 = result & ~v18;
      uint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
      {
        int64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v23 = v20 == v22;
          if (v20 == v22) {
            uint64_t v20 = 0;
          }
          v21 |= v23;
          unint64_t v24 = *(void *)(v8 + 8 * v20);
        }
        while (v24 == -1);
        int64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupHostIDSService.MessageEvent.Member>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v32 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v31 = (unint64_t)(v5 + 63) >> 6;
    int64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        Swift::Int v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        unint64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v15 >= v31) {
          goto LABEL_36;
        }
        int64_t v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          uint64_t v10 = v15 + 1;
          if (v15 + 1 >= v31) {
            goto LABEL_36;
          }
          int64_t v16 = v32[v10];
          if (!v16)
          {
            uint64_t v10 = v15 + 2;
            if (v15 + 2 >= v31) {
              goto LABEL_36;
            }
            int64_t v16 = v32[v10];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v0;
                id v30 = 1 << *(unsigned char *)(v2 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v32 = -1 << v30;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_42;
                  }
                  if (v10 >= v31) {
                    goto LABEL_36;
                  }
                  int64_t v16 = v32[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      int64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 32 * v14);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      uint64_t v22 = v18[2];
      uint64_t v21 = v18[3];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v21)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      unint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v24 = result & ~v23;
      char v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
      {
        int64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        BOOL v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            char v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v8 + 8 * v25);
        }
        while (v29 == -1);
        int64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      unint64_t v12 = (void *)(*(void *)(v4 + 48) + 32 * v11);
      *unint64_t v12 = v19;
      v12[1] = v20;
      v12[2] = v22;
      uint64_t v12[3] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, uint64_t a2, unsigned __int8 a3, unint64_t a4, char a5)
{
  uint64_t v6 = v5;
  Swift::Int v9 = result;
  int v10 = a3;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v12 = *(void *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0) {
    goto LABEL_18;
  }
  if (a5)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_18;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t result = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v13 + 32);
  a4 = result & ~v14;
  uint64_t v15 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v16 = ~v14;
    uint64_t v17 = *(void *)(v13 + 48);
    do
    {
      uint64_t v18 = v17 + 24 * a4;
      unint64_t result = *(void *)v18;
      int v19 = *(unsigned __int8 *)(v18 + 16);
      BOOL v20 = *(void *)v18 == v9 && *(void *)(v18 + 8) == a2;
      if (v20 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if (v19 == v10) {
          goto LABEL_21;
        }
      }
      a4 = (a4 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_18:
  uint64_t v21 = *v6;
  *(void *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v22 = *(void *)(v21 + 48) + 24 * a4;
  *(void *)uint64_t v22 = v9;
  *(void *)(v22 + 8) = a2;
  *(unsigned char *)(v22 + 16) = v10;
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_21:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for NearbyGroupMember();
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
    do
    {
      unint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, Swift::Int a3, Swift::Int a4, unint64_t a5, char a6)
{
  Swift::Int v11 = result;
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0) {
    goto LABEL_28;
  }
  if (a6)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v13 > v12)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_28;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v14 = *v6;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (a4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  unint64_t result = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v14 + 32);
  a5 = result & ~v15;
  uint64_t v16 = v14 + 56;
  if ((*(void *)(v14 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a5))
  {
    uint64_t v17 = ~v15;
    uint64_t v18 = *(void *)(v14 + 48);
    do
    {
      uint64_t v19 = (Swift::Int *)(v18 + 32 * a5);
      unint64_t result = *v19;
      Swift::Int v21 = v19[2];
      Swift::Int v20 = v19[3];
      BOOL v22 = *v19 == v11 && v19[1] == a2;
      if (v22 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if (v20)
        {
          if (a4)
          {
            BOOL v23 = v21 == a3 && v20 == a4;
            if (v23 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
LABEL_27:
              unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              break;
            }
          }
        }
        else if (!a4)
        {
          goto LABEL_27;
        }
      }
      a5 = (a5 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a5) & 1) != 0);
  }
LABEL_28:
  uint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  uint64_t v25 = (Swift::Int *)(*(void *)(v24 + 48) + 32 * a5);
  Swift::Int *v25 = v11;
  v25[1] = a2;
  v25[2] = a3;
  uint64_t v25[3] = a4;
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v28;
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyInvitationRangedHost>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13) {
      goto LABEL_28;
    }
    int64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v19 = *(void *)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    LOBYTE(v17) = *(unsigned char *)(v17 + 16);
    int64_t v20 = *(void *)(v4 + 48) + v16;
    *(void *)int64_t v20 = v19;
    *(void *)(v20 + 8) = v18;
    *(unsigned char *)(v20 + 16) = v17;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  BOOL v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  int64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t result = (void *)swift_retain();
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupHostIDSService.MessageEvent.Member>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_28;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        BOOL v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    int64_t v20 = v17[2];
    uint64_t v19 = v17[3];
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    v21[2] = v20;
    v21[3] = v19;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupMember>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyInvitationRangedHost>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  int64_t v29 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  id v30 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      int64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v30) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v29 + 8 * v15);
    ++v10;
    if (!v16)
    {
      uint64_t v10 = v15 + 1;
      if (v15 + 1 >= v30) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v29 + 8 * v10);
      if (!v16)
      {
        uint64_t v10 = v15 + 2;
        if (v15 + 2 >= v30) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v29 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    int64_t v18 = *(void *)(v2 + 48) + 24 * v14;
    unint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = *(unsigned char *)(v18 + 16);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v8 + 8 * (v23 >> 6))) != 0)
    {
      int64_t v11 = __clz(__rbit64((-1 << v23) & ~*(void *)(v8 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v8 + 8 * v24);
      }
      while (v28 == -1);
      int64_t v11 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
    *(void *)unint64_t v12 = v19;
    *(void *)(v12 + 8) = v20;
    *(unsigned char *)(v12 + 16) = v21;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v30)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v29 + 8 * v17);
  if (v16)
  {
    uint64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v29 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupMember>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      unint64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        unint64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    unint64_t v19 = *(void *)(v4 + 40);
    uint64_t v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      int64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v24 = 0;
      char v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        BOOL v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      int64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  char v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  unint64_t v26 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    unint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v10);
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v25 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v7 = (v15 - 1) & v15;
    int64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    int64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    uint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      int64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v23 = v20 == v22;
        if (v20 == v22) {
          uint64_t v20 = 0;
        }
        v21 |= v23;
        unint64_t v24 = *(void *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      int64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupHostIDSService.MessageEvent.Member>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  id v30 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  unint64_t v31 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      int64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v31) {
      goto LABEL_36;
    }
    int64_t v16 = *(void *)(v30 + 8 * v15);
    ++v10;
    if (!v16)
    {
      uint64_t v10 = v15 + 1;
      if (v15 + 1 >= v31) {
        goto LABEL_36;
      }
      int64_t v16 = *(void *)(v30 + 8 * v10);
      if (!v16)
      {
        uint64_t v10 = v15 + 2;
        if (v15 + 2 >= v31) {
          goto LABEL_36;
        }
        int64_t v16 = *(void *)(v30 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    int64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 32 * v14);
    unint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v22 = v18[2];
    uint64_t v21 = v18[3];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v21)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    unint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = result & ~v23;
    char v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
    {
      int64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          char v25 = 0;
        }
        v26 |= v28;
        int64_t v29 = *(void *)(v8 + 8 * v25);
      }
      while (v29 == -1);
      int64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v12 = (void *)(*(void *)(v4 + 48) + 32 * v11);
    *unint64_t v12 = v19;
    v12[1] = v20;
    v12[2] = v22;
    uint64_t v12[3] = v21;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_38;
  }
  int64_t v16 = *(void *)(v30 + 8 * v17);
  if (v16)
  {
    uint64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_36;
    }
    int64_t v16 = *(void *)(v30 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized NearbyInvitationRangedHost.init(with:)(void *a1)
{
  id v2 = [a1 stableIdentifier];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    [a1 nearbyInfoV2InvitationCounter];
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)log);
    id v6 = a1;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      id v11 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v6;

      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Device: %@ doesn't have a stableIdentifier, can't create rangedHost object.", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  return v4;
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsScanner.deviceFoundStream.getter(uint64_t a1)
{
  return closure #1 in closure #1 in NearbyInvitationsScanner.deviceFoundStream.getter(a1, v1);
}

uint64_t type metadata accessor for NISessionDelegate()
{
  return self;
}

uint64_t sub_10002D7A4()
{
  swift_weakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002D7DC()
{
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsScanner.init(ignoringDistance:)(NSObject *a1)
{
  return closure #1 in NearbyInvitationsScanner.init(ignoringDistance:)(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

const char *CBScanRateToString(int a1)
{
  if (a1 > 34)
  {
    if (a1 > 49)
    {
      if (a1 == 50) {
        return "High";
      }
      if (a1 == 60) {
        return "Max";
      }
    }
    else
    {
      if (a1 == 35) {
        return "MediumLow";
      }
      if (a1 == 40) {
        return "Medium";
      }
    }
  }
  else if (a1 > 19)
  {
    if (a1 == 20) {
      return "Background";
    }
    if (a1 == 30) {
      return "Low";
    }
  }
  else
  {
    if (!a1) {
      return "Default";
    }
    if (a1 == 10) {
      return "Periodic";
    }
  }
  return "?";
}

uint64_t partial apply for closure #1 in NearbyInvitationsScanner.restartRanging()()
{
  return closure #1 in NearbyInvitationsScanner.restartRanging()(v0);
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for NearbyInvitationsScanner(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationsScanner);
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, void *a2)
{
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v27 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_23;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v10 >= v27) {
      goto LABEL_33;
    }
    unint64_t v11 = *(void *)(v26 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v27) {
        goto LABEL_33;
      }
      unint64_t v11 = *(void *)(v26 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v27) {
          goto LABEL_33;
        }
        unint64_t v11 = *(void *)(v26 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 3;
          if (v10 + 3 >= v27) {
            goto LABEL_33;
          }
          unint64_t v11 = *(void *)(v26 + 8 * v7);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_23:
    uint64_t v13 = *(void *)(a1 + 48) + 24 * v9;
    uint64_t v15 = *(void *)v13;
    uint64_t v14 = *(void *)(v13 + 8);
    int v16 = *(unsigned __int8 *)(v13 + 16);
    swift_bridgeObjectRetain();
    id v17 = [a2 stableIdentifier];
    if (!v17) {
      goto LABEL_4;
    }
    int64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    if (v15 == v19 && v14 == v21)
    {
      swift_bridgeObjectRelease();
LABEL_31:
      unsigned int v24 = [a2 nearbyInfoV2InvitationCounter];
      uint64_t result = swift_bridgeObjectRelease();
      if (v16 == v24)
      {
        uint64_t v25 = 1;
LABEL_34:
        swift_release();
        return v25;
      }
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v23) {
        goto LABEL_31;
      }
LABEL_4:
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v27)
  {
LABEL_33:
    uint64_t v25 = 0;
    goto LABEL_34;
  }
  unint64_t v11 = *(void *)(v26 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v27) {
      goto LABEL_33;
    }
    unint64_t v11 = *(void *)(v26 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t i;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  int64_t v25;

  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  unint64_t v5 = -1;
  if (v4 < 64) {
    unint64_t v5 = ~(-1 << v4);
  }
  id v6 = v5 & *(void *)(a1 + 56);
  uint64_t v25 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  while (v6)
  {
    unint64_t v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    int64_t v10 = v9 | (i << 6);
LABEL_22:
    uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 24 * v10);
    int v16 = *v14;
    uint64_t v15 = v14[1];
    swift_bridgeObjectRetain_n();
    id v17 = [a2 stableIdentifier];
    if (v17)
    {
      int64_t v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      if (v16 == v19 && v15 == v21)
      {
        swift_release();
        swift_bridgeObjectRelease_n();
        return 1;
      }
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease_n();
      uint64_t result = swift_bridgeObjectRelease();
      if (v23)
      {
        swift_release();
        return 1;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease_n();
    }
  }
  unint64_t v11 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v11 >= v25) {
      goto LABEL_29;
    }
    int64_t v12 = *(void *)(v24 + 8 * v11);
    ++i;
    if (!v12)
    {
      int64_t i = v11 + 1;
      if (v11 + 1 >= v25) {
        goto LABEL_29;
      }
      int64_t v12 = *(void *)(v24 + 8 * i);
      if (!v12)
      {
        int64_t i = v11 + 2;
        if (v11 + 2 >= v25) {
          goto LABEL_29;
        }
        int64_t v12 = *(void *)(v24 + 8 * i);
        if (!v12)
        {
          int64_t i = v11 + 3;
          if (v11 + 3 >= v25) {
            goto LABEL_29;
          }
          int64_t v12 = *(void *)(v24 + 8 * i);
          if (!v12)
          {
            uint64_t v13 = v11 + 4;
            if (v13 >= v25)
            {
LABEL_29:
              swift_release();
              return 0;
            }
            int64_t v12 = *(void *)(v24 + 8 * v13);
            for (int64_t i = v13; !v12; ++v13)
            {
              int64_t i = v13 + 1;
              if (__OFADD__(v13, 1)) {
                goto LABEL_33;
              }
              if (i >= v25) {
                goto LABEL_29;
              }
              int64_t v12 = *(void *)(v24 + 8 * i);
            }
          }
        }
      }
    }
    id v6 = (v12 - 1) & v12;
    int64_t v10 = __clz(__rbit64(v12)) + (i << 6);
    goto LABEL_22;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v9 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      int64_t v10 = v9;
      uint64_t v11 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if (([v9 nearbyInfoV2Flags] & 4) != 0
        || [v10 nearbyInfoV2InvitationCounter])
      {
        uint64_t v6 = (*(uint64_t (**)(void))(*(void *)a2 + 152))();
        id v7 = v10;
        char v8 = specialized Sequence.contains(where:)(v6, v7);
        swift_bridgeObjectRelease();

        if ((v8 & 1) == 0)
        {
          uint64_t v12 = 1;
          goto LABEL_17;
        }
      }
      else
      {
      }
      ++v5;
      if (v11 == v4) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  uint64_t v12 = 0;
LABEL_17:
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationsScanner.Errors and conformance NearbyInvitationsScanner.Errors);
  }
  return result;
}

void partial apply for closure #1 in NearbyInvitationsScanner.lostDevices()(uint64_t a1)
{
  closure #1 in NearbyInvitationsScanner.lostDevices()(a1, v1);
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (a1 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_3:
      uint64_t v19 = v4;
      uint64_t v8 = 4;
      do
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v9 = *(id *)(a1 + 8 * v8);
        }
        int64_t v10 = v9;
        uint64_t v4 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
        {
          __break(1u);
          goto LABEL_22;
        }
        id v11 = [v9 idsDeviceID];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;

          if (v13 == a2 && v15 == a3)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v17 & 1) == 0) {
              goto LABEL_4;
            }
          }
          if ((objc_msgSend(v10, "nearbyInfoV2Flags", v19) & 4) != 0
            || [v10 nearbyInfoV2InvitationCounter])
          {
            swift_bridgeObjectRelease();
            return v10;
          }
        }
LABEL_4:

        ++v8;
      }
      while (v4 != v7);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteAdvertiser.init(invitation:)()
{
  return closure #1 in NearbyInvitationsInviteAdvertiser.init(invitation:)();
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteAdvertiser.assertPublic(rotations:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in NearbyInvitationsInviteAdvertiser.assertPublic(rotations:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteAdvertiser.releasePublicAssertion(identifier:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(**(void **)(v0 + 16) + 160))(v4);
  specialized Dictionary._Variant.removeValue(forKey:)(v1);
  return v2(v4, 0);
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteAdvertiser.addressChanged()()
{
  return closure #1 in NearbyInvitationsInviteAdvertiser.addressChanged()(v0);
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()(uint64_t a1)
{
  return closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()(a1, v1);
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()(uint64_t a1)
{
  return closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)(uint64_t a1)
{
  return closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationRangedHost and conformance NearbyInvitationRangedHost()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationRangedHost and conformance NearbyInvitationRangedHost;
  if (!lazy protocol witness table cache variable for type NearbyInvitationRangedHost and conformance NearbyInvitationRangedHost)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationRangedHost and conformance NearbyInvitationRangedHost);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationError and conformance NearbyInvitationError()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationError and conformance NearbyInvitationError;
  if (!lazy protocol witness table cache variable for type NearbyInvitationError and conformance NearbyInvitationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationError and conformance NearbyInvitationError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationMessageType and conformance NearbyInvitationMessageType()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationMessageType and conformance NearbyInvitationMessageType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationMessageType and conformance NearbyInvitationMessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationMessageType and conformance NearbyInvitationMessageType);
  }
  return result;
}

uint64_t sub_10002E478@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_10002E4C8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_10002E518(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 184))(*a1);
}

uint64_t sub_10002E560@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_10002E5AC(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 208))(*a1);
}

uint64_t sub_10002E600(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 272))();
}

uint64_t sub_10002E650(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 296))();
}

uint64_t sub_10002E6A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_10002E6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 152);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_10002E740(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 440))();
}

uint64_t sub_10002E790@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 464))();
  *a2 = result;
  return result;
}

uint64_t sub_10002E7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 472);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ObjC metadata update function for NearbyInvitationServiceBluetoothController()
{
  return type metadata accessor for NearbyInvitationServiceBluetoothController(0);
}

uint64_t type metadata accessor for NearbyInvitationServiceBluetoothController(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationServiceBluetoothController);
}

uint64_t type metadata completion function for NearbyInvitationServiceBluetoothController()
{
  uint64_t result = type metadata accessor for AsyncSerialQueue();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NearbyInvitationServiceBluetoothController.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002E9DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationServiceBluetoothController.Errors()
{
  return &type metadata for NearbyInvitationServiceBluetoothController.Errors;
}

uint64_t ObjC metadata update function for NearbyInvitationsAdvertiser()
{
  return type metadata accessor for NearbyInvitationsAdvertiser(0);
}

uint64_t type metadata accessor for NearbyInvitationsAdvertiser(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationsAdvertiser);
}

uint64_t type metadata completion function for NearbyInvitationsAdvertiser()
{
  uint64_t result = type metadata accessor for AsyncSerialQueue();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t destroy for NearbyInvitationRangedHost()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for NearbyInvitationRangedHost(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NearbyInvitationRangedHost(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for NearbyInvitationRangedHost(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyInvitationRangedHost(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyInvitationRangedHost(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationRangedHost()
{
  return &type metadata for NearbyInvitationRangedHost;
}

uint64_t ObjC metadata update function for NearbyInvitationsScanner()
{
  return type metadata accessor for NearbyInvitationsScanner(0);
}

void type metadata completion function for NearbyInvitationsScanner()
{
  type metadata accessor for AsyncStream<CBDevice>?(319, &lazy cache variable for type metadata for AsyncStream<CBDevice>?, (uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AsyncStream<CBDevice>?(319, &lazy cache variable for type metadata for AsyncStream<CBDevice>.Continuation?, &demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

ValueMetadata *type metadata accessor for NearbyInvitationsScanner.Errors()
{
  return &type metadata for NearbyInvitationsScanner.Errors;
}

uint64_t ObjC metadata update function for NearbyInvitationsInviteAdvertiser()
{
  return type metadata accessor for NearbyInvitationsInviteAdvertiser(0);
}

uint64_t type metadata completion function for NearbyInvitationsInviteAdvertiser()
{
  return swift_updateClassMetadata2();
}

uint64_t ObjC metadata update function for NearbyInvitationsInviteScanner()
{
  return type metadata accessor for NearbyInvitationsInviteScanner(0);
}

void type metadata completion function for NearbyInvitationsInviteScanner()
{
  type metadata accessor for AsyncStream<CBDevice>?(319, &lazy cache variable for type metadata for AsyncStream<NearbyAdvertisement>?, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AsyncStream<CBDevice>?(319, &lazy cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation?, &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for AsyncStream<CBDevice>?(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t ObjC metadata update function for NearbyInvitationsAcceptInviteAdvertiser()
{
  return type metadata accessor for NearbyInvitationsAcceptInviteAdvertiser(0);
}

uint64_t type metadata accessor for NearbyInvitationsAcceptInviteAdvertiser(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationsAcceptInviteAdvertiser);
}

uint64_t type metadata accessor for NearbyInvitationsInviteScanner(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for NearbyInvitationsAcceptInviteAdvertiser()
{
  return swift_updateClassMetadata2();
}

ValueMetadata *type metadata accessor for NearbyInvitationError()
{
  return &type metadata for NearbyInvitationError;
}

unsigned char *storeEnumTagSinglePayload for NearbyInvitationsScanner.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10002F09CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationMessageType()
{
  return &type metadata for NearbyInvitationMessageType;
}

uint64_t initializeBufferWithCopyOfBuffer for NISessionDelegate.NIDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void destroy for NISessionDelegate.NIDevice(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 24);
}

uint64_t initializeWithCopy for NISessionDelegate.NIDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  unsigned int v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for NISessionDelegate.NIDevice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  unsigned int v4 = *(void **)(a1 + 24);
  id v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  id v6 = v5;

  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for NISessionDelegate.NIDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  id v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for NISessionDelegate.NIDevice(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NISessionDelegate.NIDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for NISessionDelegate.NIDevice()
{
  return &unk_1000F6C30;
}

void *associated type witness table accessor for Identifiable.ID : Hashable in NISessionDelegate.NIDevice()
{
  return &protocol witness table for String;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

void specialized NISessionDelegate.session(_:suspendedWith:)(void *a1)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  id v9 = a1;
  long long v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NISession);
    id v6 = v9;
    uint64_t v7 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "NISession %s Suspended: %ld", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t specialized NISessionDelegate.nearbyDeviceID(_:)(void *a1)
{
  id v1 = [a1 deviceIdentifer];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Nearby Device: (nil)", v7, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v3;
}

uint64_t specialized NISessionDelegate.session(_:didDiscover:)(void *a1)
{
  uint64_t result = specialized NISessionDelegate.nearbyDeviceID(_:)(a1);
  if (!v3) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = v3;
  os_log_type_t v6 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices);
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (*(void *)(*v6 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    if (v9)
    {
      uint64_t v10 = *(void *)(v7 + 56) + 32 * v8;
      uint64_t v12 = *(void *)v10;
      id v11 = *(void **)(v10 + 8);
      __int16 v13 = *(unsigned __int8 *)(v10 + 16);
      int v14 = *(unsigned __int8 *)(v10 + 17);
      uint64_t v15 = *(void **)(v10 + 24);
      id v16 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14) {
        __int16 v17 = 256;
      }
      else {
        __int16 v17 = 0;
      }
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  __int16 v13 = 0;
  __int16 v17 = 0;
  uint64_t v15 = 0;
  uint64_t v12 = v4;
  id v11 = (void *)v5;
LABEL_9:
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.default);
  id v19 = v15;
  swift_bridgeObjectRetain_n();
  id v20 = v19;
  uint64_t v21 = Logger.logObject.getter();
  id v35 = v15;
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v34 = v20;
    char v23 = (uint8_t *)swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    buf = v23;
    *(_DWORD *)char v23 = 136315138;
    LOWORD(v23) = v17 | v13;
    __int16 v32 = v17 | v13;
    swift_bridgeObjectRetain();
    id v24 = v34;
    uint64_t v25 = NISessionDelegate.NIDevice.description.getter(v12, v11, (__int16)v23, v35);
    unint64_t v27 = v26;

    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease_n();
    id v20 = v34;
    swift_bridgeObjectRelease();
    os_log_type_t v28 = v22;
    __int16 v29 = v32;
    _os_log_impl((void *)&_mh_execute_header, v21, v28, "Device Discovered: %s", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    __int16 v29 = v17 | v13;
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v30 = v20;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v36 = *v6;
  *os_log_type_t v6 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, (uint64_t)v11, v29, (uint64_t)v35, v4, v5, isUniquelyReferenced_nonNull_native);
  *os_log_type_t v6 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();

  return swift_bridgeObjectRelease();
}

void specialized NISessionDelegate.session(_:object:didUpdateRegion:previousRegion:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = specialized NISessionDelegate.nearbyDeviceID(_:)(a1);
  if (!v6) {
    return;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  char v9 = &v2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices];
  swift_beginAccess();
  uint64_t v71 = v9;
  uint64_t v10 = *(void *)v9;
  if (!*(void *)(*(void *)v9 + 16))
  {
LABEL_7:
    uint64_t v74 = v7;
    v75 = (void *)v8;
    __int16 v76 = 0;
    id v77 = 0;
    swift_bridgeObjectRetain();
    id v20 = &stru_100100000;
    if (!a2) {
      goto LABEL_5;
    }
LABEL_8:
    id v21 = [a2 name];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    BOOL v25 = v22 == 0x72656E6E69 && v24 == 0xE500000000000000;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v69 = v7;
      __int16 v76 = 257;
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)log);
      id v27 = v3;
      os_log_type_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        v73[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136315394;
        swift_getObjectType();
        uint64_t v31 = _typeName(_:qualified:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2080;
        swift_beginAccess();
        uint64_t v33 = v8;
        uint64_t v35 = v74;
        unint64_t v34 = (unint64_t)v75;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v34, v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v8 = v33;
        id v20 = &stru_100100000;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s: Found inner device: %s", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v7 = v69;
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v37 = Strong;
        swift_beginAccess();
        uint64_t v38 = v74;
        id v39 = v75;
        id v40 = *(void (**)(uint64_t, void *))(*(void *)v37 + 400);
        swift_bridgeObjectRetain();
        v40(v38, v39);
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
    else if (v22 == 0x726574756FLL && v24 == 0xE500000000000000 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      __int16 v76 = 256;
    }
    else
    {
      uint64_t v70 = v8;
      if (v20[22].imp != (IMP)-1) {
        swift_once();
      }
      uint64_t v63 = type metadata accessor for Logger();
      __swift_project_value_buffer(v63, (uint64_t)static Log.default);
      swift_bridgeObjectRetain();
      uint64_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = v7;
        uint64_t v67 = (uint8_t *)swift_slowAlloc();
        v73[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v67 = 136446210;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Unexpected Region: %{public}s", v67, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v7 = v66;
        id v20 = &stru_100100000;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v8 = v70;
    }
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v13 = *(void *)(v10 + 56) + 32 * v11;
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void **)(v13 + 8);
  char v16 = *(unsigned char *)(v13 + 16);
  char v17 = *(unsigned char *)(v13 + 17);
  uint64_t v18 = *(void **)(v13 + 24);
  id v19 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v74 = v14;
  v75 = v15;
  LOBYTE(v76) = v16;
  HIBYTE(v76) = v17;
  id v77 = v18;
  id v20 = &stru_100100000;
  if (a2) {
    goto LABEL_8;
  }
LABEL_5:
  __int16 v76 = 0;
LABEL_24:
  if (v20[22].imp != (IMP)-1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static Log.default);
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    v73[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136315138;
    buf = v44;
    swift_beginAccess();
    uint64_t v45 = v74;
    uint64_t v46 = v75;
    id v47 = v77;
    if (HIBYTE(v76)) {
      __int16 v48 = 256;
    }
    else {
      __int16 v48 = 0;
    }
    __int16 v49 = v48 | v76;
    swift_bridgeObjectRetain();
    id v50 = v47;
    uint64_t v51 = NISessionDelegate.NIDevice.description.getter(v45, v46, v49, v47);
    unint64_t v53 = v52;

    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Region updated: %s", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v54 = v74;
  uint64_t v55 = (uint64_t)v75;
  __int16 v56 = v76;
  int v57 = HIBYTE(v76);
  id v58 = v77;
  swift_beginAccess();
  id v59 = v58;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v72 = *(void *)v71;
  *(void *)uint64_t v71 = 0x8000000000000000;
  if (v57) {
    __int16 v61 = 256;
  }
  else {
    __int16 v61 = 0;
  }
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v54, v55, v61 | v56, (uint64_t)v58, v7, v8, isUniquelyReferenced_nonNull_native);
  *(void *)uint64_t v71 = v72;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v62 = swift_weakLoadStrong();
  if (v62)
  {
    (*(void (**)(uint64_t))(*(void *)v62 + 352))(v62);
    swift_release();
  }
  swift_bridgeObjectRelease();
}

void specialized NISessionDelegate.session(_:didUpdateAlgorithmState:for:)(void *a1, void *a2)
{
  uint64_t v4 = specialized NISessionDelegate.nearbyDeviceID(_:)(a2);
  if (!v5) {
    return;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  uint64_t v8 = (uint64_t *)(v2
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsServiceP33_7363818DEECEA212EB4728A56115524617NISessionDelegate_devices);
  swift_beginAccess();
  uint64_t v9 = *v8;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v6, (uint64_t)v7);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    id v17 = 0;
    uint64_t v30 = v6;
    uint64_t v31 = v7;
    __int16 v32 = 0;
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(v9 + 56) + 32 * v10;
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *(void **)(v12 + 8);
  char v15 = *(unsigned char *)(v12 + 16);
  char v16 = *(unsigned char *)(v12 + 17);
  id v17 = *(id *)(v12 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v30 = v14;
  uint64_t v31 = v13;
  LOBYTE(v32) = v15;
  HIBYTE(v32) = v16;
LABEL_7:
  id v33 = a1;
  id v18 = a1;

  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.default);
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_beginAccess();
    if (HIBYTE(v32)) {
      __int16 v23 = 256;
    }
    else {
      __int16 v23 = 0;
    }
    __int16 v24 = v23 | v32;
    swift_bridgeObjectRetain();
    id v25 = v33;
    uint64_t v26 = NISessionDelegate.NIDevice.description.getter(v30, v31, v24, v33);
    unint64_t v28 = v27;

    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Algorithm state updated: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
}

uint64_t outlined assign with take of AsyncStream<CBDevice>?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000306FC()
{
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>);
  uint64_t v1 = *(void *)(v17 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  unint64_t v15 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  uint64_t v4 = *(void *)(v16 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v15 + v5 + 8) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v6 + v7 + v10) & ~v10;
  uint64_t v12 = v2 | v5 | v10 | 7;
  unint64_t v13 = ((*(void *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v16);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v11, v8);
  return _swift_deallocObject(v0, v13, v12);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<CBDevice>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation)
                 - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v14 = v1[4];
  uint64_t v15 = *(void *)((char *)v1 + v6);
  uint64_t v16 = (uint64_t)v1 + v11;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v17;
  *uint64_t v17 = v2;
  v17[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsInviteScanner.findInvitations(scannerID:for:)(a1, v12, v13, v14, (uint64_t)v1 + v5, v15, (uint64_t)v1 + v8, v16);
}

uint64_t sub_100030B2C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Continuation)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *unint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsInviteScanner.trackLostInvitations()(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100030D40()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation)
                 - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsInviteScanner.findDevicesWithInvitations()(a1, v5, v6, v7, v8);
}

uint64_t outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100030FC4()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsScanner.lostDevices()(void *a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<CBDevice>.Continuation)
                 - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return closure #1 in closure #1 in NearbyInvitationsScanner.lostDevices()(a1, v4, v5);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void __swiftcall Pseudonym.Configuration.init(featureID:minimumExpirationInSeconds:refreshSkewInSeconds:reuseIdentifier:)(com_apple_SharePlay_NearbyInvitationsService::Pseudonym::Configuration *__return_ptr retstr, Swift::String featureID, Swift::Double minimumExpirationInSeconds, Swift::Double refreshSkewInSeconds, Swift::String_optional reuseIdentifier)
{
  retstr->featureID = featureID;
  retstr->minimumExpirationInSeconds = minimumExpirationInSeconds;
  retstr->refreshSkewInSeconds = refreshSkewInSeconds;
  retstr->reuseIdentifier = reuseIdentifier;
}

uint64_t static Pseudonym.reusable(for:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return _swift_task_switch(static Pseudonym.reusable(for:reuseIdentifier:), 0, 0);
}

uint64_t static Pseudonym.reusable(for:reuseIdentifier:)()
{
  specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)((void *)v0[16], 1, (uint64_t)(v0 + 8));
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  v0[19] = v4;
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)(v0 + 12), (uint64_t)(v0 + 14), &demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)(v0 + 14));
  v0[2] = v3;
  v0[3] = v4;
  v0[4] = v5;
  v0[5] = v6;
  v0[6] = v2;
  v0[7] = v1;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized static Pseudonym.reusable(for:configuration:)
                                                 + async function pointer to specialized static Pseudonym.reusable(for:configuration:));
  swift_bridgeObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[20] = v7;
  void *v7 = v0;
  v7[1] = static Pseudonym.reusable(for:reuseIdentifier:);
  uint64_t v8 = v0[16];
  return v10(v8, (uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static Pseudonym.reusable(for:reuseIdentifier:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 168) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(static Pseudonym.reusable(for:reuseIdentifier:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

BOOL static Pseudonym.Errors.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void Pseudonym.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int Pseudonym.Errors.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t Pseudonym.Configuration.featureID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Pseudonym.Configuration.featureID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

void (__swiftcall *Pseudonym.Configuration.featureID.modify())()
{
  return Log.init();
}

double Pseudonym.Configuration.minimumExpirationInSeconds.getter()
{
  return *(double *)(v0 + 16);
}

void Pseudonym.Configuration.minimumExpirationInSeconds.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

void (__swiftcall *Pseudonym.Configuration.minimumExpirationInSeconds.modify())()
{
  return Log.init();
}

double Pseudonym.Configuration.refreshSkewInSeconds.getter()
{
  return *(double *)(v0 + 24);
}

void Pseudonym.Configuration.refreshSkewInSeconds.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

void (__swiftcall *Pseudonym.Configuration.refreshSkewInSeconds.modify())()
{
  return Log.init();
}

uint64_t Pseudonym.Configuration.reuseIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Pseudonym.Configuration.reuseIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

void (__swiftcall *Pseudonym.Configuration.reuseIdentifier.modify())()
{
  return Log.init();
}

uint64_t Pseudonym.Configuration.description.getter()
{
  _StringGuts.grow(_:)(51);
  v1._uint64_t countAndFlagsBits = 60;
  v1._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = 0x72756769666E6F43;
  v2._uint64_t object = (void *)0xED00006E6F697461;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = 0x657275746165663ALL;
  v3._uint64_t object = (void *)0xEB000000003D4449;
  String.append(_:)(v3);
  uint64_t v4 = *v0;
  uint64_t v5 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v4;
  v6._uint64_t object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x3D70786520;
  v7._uint64_t object = (void *)0xE500000000000000;
  String.append(_:)(v7);
  Double.write<A>(to:)();
  v8._uint64_t countAndFlagsBits = 0x3D77656B7320;
  v8._uint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v8);
  Double.write<A>(to:)();
  v9._uint64_t object = (void *)0x80000001000DB2D0;
  v9._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v9);
  uint64_t v10 = v0[5];
  if (v10) {
    uint64_t v11 = v0[4];
  }
  else {
    uint64_t v11 = 0x3E454E4F4E3CLL;
  }
  if (v10) {
    uint64_t v12 = (void *)v0[5];
  }
  else {
    uint64_t v12 = (void *)0xE600000000000000;
  }
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v11;
  v13._uint64_t object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 62;
  v14._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 0;
}

id Pseudonym.pseudonym.getter()
{
  swift_beginAccess();
  Swift::String v1 = *(void **)(v0 + 16);
  return v1;
}

void Pseudonym.pseudonym.setter(uint64_t a1)
{
  swift_beginAccess();
  Swift::String v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t (*Pseudonym.pseudonym.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t Pseudonym.handle.getter()
{
  swift_beginAccess();
  id v1 = [*(id *)(v0 + 16) URI];
  id v2 = [v1 prefixedURI];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

void Pseudonym.expirationDate.getter()
{
  swift_beginAccess();
  id v1 = [*(id *)(v0 + 16) properties];
  id v2 = [v1 expirationDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Pseudonym.refreshTask.getter()
{
  return swift_retain();
}

uint64_t Pseudonym.refreshTask.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*Pseudonym.refreshTask.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t Pseudonym.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 104);
  uint64_t v4 = *(void *)(v1 + 112);
  *(void *)a1 = *(void *)(v1 + 72);
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 88);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for provider()
{
  id v0 = [self standardUserDefaults];
  uint64_t v1 = type metadata accessor for UserDefaultsPseudonymStorage();
  uint64_t v2 = (void *)swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  uint64_t v3 = Lock.init()();
  v2[3] = v0;
  v2[4] = &_swiftEmptySetSingleton;
  v2[2] = v3;
  uint64_t v7 = v1;
  Swift::String v8 = &protocol witness table for UserDefaultsPseudonymStorage;
  *(void *)&long long v6 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PseudonymProvider<Pseudonym>);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0x4014000000000000;
  *(void *)(v4 + 24) = [objc_allocWithZone((Class)NSRecursiveLock) init];
  *(void *)(v4 + 72) = &_swiftEmptyDictionarySingleton;
  uint64_t result = outlined init with take of PseudonymProtocol(&v6, v4 + 32);
  static Pseudonym.provider = (_UNKNOWN *)v4;
  return result;
}

uint64_t PseudonymProvider.__allocating_init(storage:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  PseudonymProvider.init(storage:)(a1);
  return v2;
}

uint64_t static Pseudonym.markUsed(handle:for:reuseIdentifier:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a3[3];
  uint64_t v11 = a3[4];
  uint64_t v12 = __swift_project_boxed_opaque_existential_1(a3, v10);
  return specialized static Pseudonym.markUsed(handle:for:reuseIdentifier:)(a1, a2, (uint64_t)v12, a4, a5, v5, v10, v11);
}

uint64_t static Pseudonym.reusable(for:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized static Pseudonym.reusable(for:configuration:)
                                                + async function pointer to specialized static Pseudonym.reusable(for:configuration:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = static Pseudonym.reusable(for:configuration:);
  return v7(a1, a2);
}

uint64_t Pseudonym.__allocating_init(service:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Pseudonym.__allocating_init(service:configuration:)
                                                + async function pointer to specialized Pseudonym.__allocating_init(service:configuration:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = Pseudonym.__allocating_init(service:configuration:);
  return v7(a1, a2);
}

uint64_t Pseudonym.__allocating_init(service:configuration:)(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t static Pseudonym.existing(for:reuseIdentifier:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)a1;
  specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(a1, 1, (uint64_t)v12);
  if (!v3)
  {
    uint64_t v8 = v12[0];
    uint64_t v7 = v12[1];
    uint64_t v9 = v12[2];
    uint64_t v10 = v12[3];
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)&v13, (uint64_t)v14, &demangling cache variable for type metadata for String?);
    outlined release of String?((uint64_t)v14);
    *(void *)&long long v15 = v8;
    *((void *)&v15 + 1) = v7;
    uint64_t v16 = v9;
    uint64_t v17 = v10;
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    swift_bridgeObjectRetain();
    uint64_t v6 = specialized static Pseudonym.existing(for:configuration:)(v6, &v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t static Pseudonym.existing(for:configuration:)(uint64_t a1, long long *a2)
{
  return specialized static Pseudonym.existing(for:configuration:)(a1, a2);
}

uint64_t Pseudonym.__allocating_init(service:)(uint64_t a1)
{
  *(void *)(v1 + 104) = a1;
  return _swift_task_switch(Pseudonym.__allocating_init(service:), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = Pseudonym.__allocating_init(service:);
  }
  else
  {
    *(void *)(v4 + 128) = a1;
    uint64_t v5 = Pseudonym.__allocating_init(service:);
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t Pseudonym.__allocating_init(service:)()
{
  specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(*(void **)(v0 + 104), 0, v0 + 16);
  outlined init with copy of PseudonymProtocol(*(void *)(v0 + 104), v0 + 64);
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Pseudonym.__allocating_init(service:configuration:)
                                                + async function pointer to specialized Pseudonym.__allocating_init(service:configuration:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v1;
  *uint64_t v1 = v0;
  v1[1] = Pseudonym.__allocating_init(service:);
  return v3(v0 + 64, v0 + 16);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  __swift_destroy_boxed_opaque_existential_0Tm(v0[13]);
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[16];
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_0Tm(*(void *)(v0 + 104));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t Pseudonym.__allocating_init(service:pseudonym:)(void *a1, uint64_t a2, unint64_t a3)
{
  specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(a1, 0, (uint64_t)v9);
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with copy of PseudonymProtocol((uint64_t)a1, (uint64_t)v8);
    a3 = specialized Pseudonym.__allocating_init(service:pseudonym:configuration:)(v8, a2, a3, v9);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  return a3;
}

unint64_t Pseudonym.__allocating_init(service:pseudonym:configuration:)(void *a1, uint64_t a2, unint64_t a3, long long *a4)
{
  return specialized Pseudonym.__allocating_init(service:pseudonym:configuration:)(a1, a2, a3, a4);
}

uint64_t Pseudonym.__allocating_init(service:pseudonym:configuration:)(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = swift_allocObject();
  Pseudonym.init(service:pseudonym:configuration:)(a1, a2, a3);
  return v6;
}

uint64_t Pseudonym.init(service:pseudonym:configuration:)(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0) + 46;
  *(void *)(v3 + 24) = 0;
  uint64_t v11 = (uint64_t *)(v3 + 24);
  *(unsigned char *)(v3 + 120) = 0;
  outlined init with copy of PseudonymProtocol(a1, v3 + 32);
  long long v12 = a3[1];
  *(_OWORD *)(v3 + 72) = *a3;
  *(_OWORD *)(v3 + 88) = v12;
  *(_OWORD *)(v3 + 104) = a3[2];
  *(void *)(v3 + 16) = a2;
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 1, 1, v13);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  long long v15 = *(void **)(v3 + 16);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 0;
  *(void *)(v16 + 24) = 0;
  *(void *)(v16 + 32) = v15;
  long long v17 = *a3;
  long long v18 = a3[1];
  *(_OWORD *)(v16 + 40) = *a3;
  *(_OWORD *)(v16 + 56) = v18;
  *(_OWORD *)(v16 + 72) = a3[2];
  *(void *)(v16 + 88) = v14;
  long long v24 = v17;
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)(a3 + 2), (uint64_t)v23, &demangling cache variable for type metadata for String?);
  outlined retain of String((uint64_t)&v24);
  outlined retain of String((uint64_t)v23);
  id v19 = v15;
  uint64_t v20 = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in Pseudonym.init(service:pseudonym:configuration:), v16);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  outlined destroy of Any?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  swift_beginAccess();
  *uint64_t v11 = v20;
  swift_release();
  return v4;
}

uint64_t closure #1 in Pseudonym.init(service:pseudonym:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  uint64_t v7 = type metadata accessor for ContinuousClock();
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  v6[11] = v8;
  v6[12] = *(void *)(v8 - 8);
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  return _swift_task_switch(closure #1 in Pseudonym.init(service:pseudonym:configuration:), 0, 0);
}

uint64_t closure #1 in Pseudonym.init(service:pseudonym:configuration:)()
{
  static Task<>.checkCancellation()();
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  id v5 = [*(id *)(v0 + 40) properties];
  id v6 = [v5 expirationDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  Date.init()();
  Date.timeIntervalSince(_:)();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  uint64_t v8 = static Duration.seconds(_:)();
  uint64_t v10 = v9;
  ContinuousClock.init()();
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                         + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v11;
  *uint64_t v11 = v0;
  v11[1] = closure #1 in Pseudonym.init(service:pseudonym:configuration:);
  return v13(v8, v10, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[9] + 8))(v2[10], v2[8]);
  if (v0) {
    uint64_t v3 = closure #1 in Pseudonym.init(service:pseudonym:configuration:);
  }
  else {
    uint64_t v3 = closure #1 in Pseudonym.init(service:pseudonym:configuration:);
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t Strong;
  void *v5;
  uint64_t v6;

  uint64_t v1 = v0[16];
  static Task<>.checkCancellation()();
  if (v1 || (swift_beginAccess(), uint64_t Strong = swift_weakLoadStrong(), (v0[17] = Strong) == 0))
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    id v5 = (void *)swift_task_alloc();
    v0[18] = v5;
    void *v5 = v0;
    v5[1] = closure #1 in Pseudonym.init(service:pseudonym:configuration:);
    return Pseudonym.refreshPseudonym()();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(closure #1 in Pseudonym.init(service:pseudonym:configuration:), 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Pseudonym.refreshPseudonym()()
{
  *(void *)(v1 + 96) = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v1 + 104) = swift_task_alloc();
  return _swift_task_switch(Pseudonym.refreshPseudonym(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  id v15;
  void *v16;
  __n128 v17;
  uint64_t (*v19)(id, uint64_t, uint64_t, __n128);
  uint64_t v20;

  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.group);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  id v5 = v0[12];
  if (v4)
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)id v6 = 138412290;
    swift_beginAccess();
    uint64_t v8 = *(void **)(v5 + 16);
    v0[11] = v8;
    uint64_t v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v8;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Attempting to refresh pseudonym %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v10 = (void *)v0[12];
  uint64_t v11 = v10[7];
  long long v12 = v10[8];
  __swift_project_boxed_opaque_existential_1(v10 + 4, v11);
  swift_beginAccess();
  uint64_t v13 = (void *)v10[2];
  v0[14] = v13;
  uint64_t v14 = v10[11];
  v0[15] = v14;
  id v19 = (uint64_t (*)(id, uint64_t, uint64_t, __n128))(*(void *)(v12 + 32) + **(int **)(v12 + 32));
  long long v15 = v13;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[16] = v16;
  *uint64_t v16 = v0;
  v16[1] = Pseudonym.refreshPseudonym();
  v17.n128_u64[0] = v14;
  return v19(v15, v11, v12, v17);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = v0[15];
  uint64_t v2 = (void *)v0[12];
  uint64_t v3 = v0[13];
  id v19 = v3;
  uint64_t v4 = (void *)v2[2];
  v2[2] = v0[18];

  id v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
  id v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v8 = v2[9];
  uint64_t v7 = v2[10];
  uint64_t v9 = v2[12];
  uint64_t v11 = v2[13];
  uint64_t v10 = v2[14];
  long long v12 = (void *)v2[2];
  swift_beginAccess();
  uint64_t v13 = v2[3];
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v13;
  v14[5] = v12;
  v14[6] = v8;
  v14[7] = v7;
  v14[8] = v1;
  v14[9] = v9;
  v14[10] = v11;
  v14[11] = v10;
  v14[12] = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v15 = v12;
  uint64_t v16 = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5(v19, (uint64_t)&async function pointer to partial apply for closure #1 in Pseudonym.refreshPseudonym(), (uint64_t)v14);
  outlined destroy of Any?(v19, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v2[3] = v16;
  swift_release();
  swift_task_dealloc();
  long long v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Pseudonym.refreshPseudonym()(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = Pseudonym.refreshPseudonym();
  }
  else
  {

    *(void *)(v4 + 144) = a1;
    id v5 = Pseudonym.refreshPseudonym();
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v7);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of Any?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t Pseudonym.description.getter()
{
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x3D49525520;
  v2._uint64_t object = (void *)0xE500000000000000;
  String.append(_:)(v2);
  swift_beginAccess();
  id v3 = [*(id *)(v0 + 16) URI];
  id v4 = [v3 prefixedURI];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  v8._uint64_t countAndFlagsBits = v5;
  v8._uint64_t object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 62;
  v9._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 60;
}

Swift::Void __swiftcall Pseudonym.markUsed()()
{
  *(unsigned char *)(v0 + 120) = 1;
  unint64_t v1 = *(void *)(v0 + 112);
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = *(void *)(v0 + 104);
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.group);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v1, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v7 + 12) = 2080;
      uint64_t v30 = 60;
      unint64_t v31 = 0xE100000000000000;
      swift_retain();
      v8._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 0x3D49525520;
      v9._uint64_t object = (void *)0xE500000000000000;
      String.append(_:)(v9);
      swift_beginAccess();
      id v10 = [*(id *)(v0 + 16) URI];
      id v11 = [v10 prefixedURI];

      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v3;
      long long v15 = v14;

      v16._uint64_t countAndFlagsBits = v12;
      v16._uint64_t object = v15;
      String.append(_:)(v16);
      uint64_t v3 = v13;
      swift_bridgeObjectRelease();
      v17._uint64_t countAndFlagsBits = 62;
      v17._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      swift_release();
      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Marked reusable pseudonym with identifier: %s as used: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    if (one-time initialization token for provider != -1) {
      swift_once();
    }
    long long v18 = static Pseudonym.provider;
    swift_beginAccess();
    id v19 = [*(id *)(v2 + 16) URI];
    id v20 = [v19 prefixedURI];

    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    long long v24 = (void *)(v2 + 32);
    uint64_t v25 = *(void *)(v2 + 56);
    uint64_t v26 = *(void *)(v2 + 64);
    __swift_project_boxed_opaque_existential_1(v24, v25);
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
    if (v28)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)v18 + 176))(v21, v23, v27, v28, v3, v1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t closure #1 in Pseudonym.refreshPseudonym()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  uint64_t v8 = type metadata accessor for ContinuousClock();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  v7[12] = v9;
  v7[13] = *(void *)(v9 - 8);
  v7[14] = swift_task_alloc();
  v7[15] = swift_task_alloc();
  return _swift_task_switch(closure #1 in Pseudonym.refreshPseudonym(), 0, 0);
}

uint64_t closure #1 in Pseudonym.refreshPseudonym()()
{
  static Task<>.checkCancellation()();
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v2;
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    *uint64_t v2 = v0;
    v2[1] = closure #1 in Pseudonym.refreshPseudonym();
    return Task.value.getter(v3, v1, (char *)&type metadata for () + 8, v3, &protocol self-conformance witness table for Error);
  }
  else
  {
    static Task<>.checkCancellation()();
    uint64_t v5 = *(void *)(v0 + 112);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 104);
    id v8 = [*(id *)(v0 + 48) properties];
    id v9 = [v8 expirationDate];

    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    Date.init()();
    Date.timeIntervalSince(_:)();
    id v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v10(v5, v6);
    v10(v4, v6);
    uint64_t v11 = static Duration.seconds(_:)();
    uint64_t v13 = v12;
    ContinuousClock.init()();
    Swift::String v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                           + async function pointer to specialized Clock.sleep(for:tolerance:));
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v14;
    *uint64_t v14 = v0;
    v14[1] = closure #1 in Pseudonym.refreshPseudonym();
    return v16(v11, v13, 0, 0, 1);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v2 = closure #1 in Pseudonym.refreshPseudonym();
  }
  else
  {
    uint64_t v2 = closure #1 in Pseudonym.refreshPseudonym();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v16;

  uint64_t v1 = *(void *)(v0 + 136);
  static Task<>.checkCancellation()();
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 104);
    id v8 = [*(id *)(v0 + 48) properties];
    id v9 = [v8 expirationDate];

    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    Date.init()();
    Date.timeIntervalSince(_:)();
    id v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v10(v3, v6);
    v10(v2, v6);
    uint64_t v11 = static Duration.seconds(_:)();
    uint64_t v13 = v12;
    ContinuousClock.init()();
    long long v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                           + async function pointer to specialized Clock.sleep(for:tolerance:));
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v14;
    *uint64_t v14 = v0;
    v14[1] = closure #1 in Pseudonym.refreshPseudonym();
    return v15(v11, v13, 0, 0, 1);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[10] + 8))(v2[11], v2[9]);
  if (v0) {
    uint64_t v3 = closure #1 in Pseudonym.refreshPseudonym();
  }
  else {
    uint64_t v3 = closure #1 in Pseudonym.refreshPseudonym();
  }
  return _swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t Strong;
  void *v5;
  uint64_t v6;

  uint64_t v1 = v0[19];
  static Task<>.checkCancellation()();
  if (v1 || (swift_beginAccess(), uint64_t Strong = swift_weakLoadStrong(), (v0[20] = Strong) == 0))
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v0[21] = v5;
    NSObject *v5 = v0;
    v5[1] = closure #1 in Pseudonym.refreshPseudonym();
    return Pseudonym.refreshPseudonym()();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(closure #1 in Pseudonym.refreshPseudonym(), 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v14;

  static Task<>.checkCancellation()();
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = [*(id *)(v0 + 48) properties];
  uint64_t v6 = [v5 expirationDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  Date.init()();
  Date.timeIntervalSince(_:)();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  id v8 = static Duration.seconds(_:)();
  id v10 = v9;
  ContinuousClock.init()();
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                         + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v11;
  *uint64_t v11 = v0;
  v11[1] = closure #1 in Pseudonym.refreshPseudonym();
  return v13(v8, v10, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t *Pseudonym.deinit()
{
  uint64_t v19 = *v0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v18 = v3;
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  swift_beginAccess();
  id v5 = [(id)v0[2] URI];
  id v6 = [v5 prefixedURI];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  id v10 = (void *)v0[2];
  swift_beginAccess();
  uint64_t v11 = v0[3];
  LOBYTE(v3) = *((unsigned char *)v0 + 120);
  uint64_t v12 = v0[13];
  uint64_t v13 = v0[14];
  outlined init with copy of PseudonymProtocol((uint64_t)(v0 + 4), (uint64_t)v20);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = v11;
  *(void *)(v14 + 40) = v12;
  *(void *)(v14 + 48) = v13;
  *(unsigned char *)(v14 + 56) = (_BYTE)v3;
  *(void *)(v14 + 64) = v10;
  *(void *)(v14 + 72) = v7;
  *(void *)(v14 + 80) = v9;
  outlined init with take of PseudonymProtocol(v20, v14 + 88);
  *(void *)(v14 + 128) = v19;
  swift_bridgeObjectRetain();
  id v15 = v10;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v18, (uint64_t)&async function pointer to partial apply for closure #1 in Pseudonym.deinit, v14);
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 4));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t closure #1 in Pseudonym.deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 120) = v13;
  *(_OWORD *)(v8 + 104) = v12;
  *(unsigned char *)(v8 + 184) = a7;
  *(void *)(v8 + 88) = a6;
  *(void *)(v8 + 96) = a8;
  *(void *)(v8 + 72) = a4;
  *(void *)(v8 + 80) = a5;
  uint64_t v9 = type metadata accessor for Date();
  *(void *)(v8 + 128) = v9;
  *(void *)(v8 + 136) = *(void *)(v9 - 8);
  *(void *)(v8 + 144) = swift_task_alloc();
  return _swift_task_switch(closure #1 in Pseudonym.deinit, 0, 0);
}

uint64_t closure #1 in Pseudonym.deinit()
{
  uint64_t v60 = v0;
  uint64_t v1 = *(void *)(v0 + 72);
  if (v1)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    Task.cancel()();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #1 in Pseudonym.deinit;
    uint64_t v4 = v1;
    id v5 = (char *)&type metadata for () + 8;
    uint64_t v6 = v2;
    uint64_t v7 = &protocol self-conformance witness table for Error;
    return Task.value.getter(v3, v4, v5, v6, v7);
  }
  unint64_t v8 = *(void *)(v0 + 88);
  if (v8 && (*(unsigned char *)(v0 + 184) & 1) == 0)
  {
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v36 = *(void **)(v0 + 96);
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Log.group);
    swift_bridgeObjectRetain_n();
    id v38 = v36;
    id v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.info.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = *(void **)(v0 + 96);
    if (v41)
    {
      os_log_t log = *(os_log_t *)(v0 + 80);
      uint64_t v43 = swift_slowAlloc();
      int v57 = (void *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)log, v8, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v43 + 12) = 2112;
      *(void *)(v0 + 64) = v42;
      id v44 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v57 = v42;

      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Not revoking unused reusable pseudonym with reuse identifier %s: %@", (uint8_t *)v43, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (one-time initialization token for provider != -1) {
      swift_once();
    }
    uint64_t v51 = *(void **)(v0 + 120);
    unint64_t v52 = static Pseudonym.provider;
    uint64_t v53 = v51[3];
    uint64_t v54 = v51[4];
    __swift_project_boxed_opaque_existential_1(v51, v53);
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v53, v54);
    if (!v4)
    {
      __break(1u);
      return Task.value.getter(v3, v4, v5, v6, v7);
    }
    (*(void (**)(void, void, void *, uint64_t, void, unint64_t))(*(void *)v52 + 192))(*(void *)(v0 + 104), *(void *)(v0 + 112), v3, v4, *(void *)(v0 + 80), v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 136);
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 128);
    id v12 = [*(id *)(v0 + 96) properties];
    id v13 = [v12 expirationDate];

    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    Date.timeIntervalSinceNow.getter();
    double v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    if (v15 > 0.0)
    {
      if (one-time initialization token for group != -1) {
        swift_once();
      }
      Swift::String v16 = *(void **)(v0 + 96);
      uint64_t v17 = type metadata accessor for Logger();
      *(void *)(v0 + 160) = __swift_project_value_buffer(v17, (uint64_t)static Log.group);
      id v18 = v16;
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.info.getter();
      BOOL v21 = os_log_type_enabled(v19, v20);
      uint64_t v22 = *(void **)(v0 + 96);
      if (v21)
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        long long v24 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 138412290;
        *(void *)(v0 + 48) = v22;
        id v25 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *long long v24 = v22;

        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Revoking pseudonym: %@", v23, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v45 = *(void **)(v0 + 120);
      uint64_t v46 = v45[3];
      uint64_t v47 = v45[4];
      __swift_project_boxed_opaque_existential_1(v45, v46);
      id v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 + 40) + **(int **)(v47 + 40));
      __int16 v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 168) = v48;
      *__int16 v48 = v0;
      v48[1] = closure #1 in Pseudonym.deinit;
      uint64_t v49 = *(void *)(v0 + 96);
      return v58(v49, v46, v47);
    }
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v26 = *(void **)(v0 + 96);
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Log.group);
    id v28 = v26;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    __int16 v32 = *(void **)(v0 + 96);
    if (v31)
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      unint64_t v34 = (void *)swift_slowAlloc();
      *(_DWORD *)id v33 = 138412290;
      *(void *)(v0 + 16) = v32;
      id v35 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v34 = v32;

      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Not revoking expired pseudonym: %@", v33, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    specialized $defer #1 () in closure #1 in Pseudonym.deinit(*(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void **)(v0 + 120));
  }
  swift_task_dealloc();
  uint64_t v55 = *(uint64_t (**)(void))(v0 + 8);
  return v55();
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = closure #1 in Pseudonym.deinit;
  }
  else
  {
    uint64_t v1 = closure #1 in Pseudonym.deinit;
  }
  return _swift_task_switch(v1, 0, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  double v7;
  double v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void *v15;
  uint8_t *v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  void *v24;
  uint8_t *v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  BOOL v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t result;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  void *v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  uint64_t v54 = v0;
  uint64_t v1 = *(void *)(v0 + 88);
  if (v1 && (*(unsigned char *)(v0 + 184) & 1) == 0)
  {
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    id v28 = *(void **)(v0 + 96);
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Log.group);
    swift_bridgeObjectRetain_n();
    os_log_type_t v30 = v28;
    BOOL v31 = Logger.logObject.getter();
    __int16 v32 = static os_log_type_t.info.getter();
    id v33 = os_log_type_enabled(v31, v32);
    unint64_t v34 = *(void **)(v0 + 96);
    if (v33)
    {
      id v35 = *(void *)(v0 + 80);
      uint64_t v36 = swift_slowAlloc();
      id v50 = (void *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v1, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v36 + 12) = 2112;
      *(void *)(v0 + 64) = v34;
      uint64_t v37 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v50 = v34;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Not revoking unused reusable pseudonym with reuse identifier %s: %@", (uint8_t *)v36, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (one-time initialization token for provider != -1) {
      swift_once();
    }
    id v44 = *(void **)(v0 + 120);
    uint64_t v45 = static Pseudonym.provider;
    uint64_t v46 = v44[3];
    uint64_t v47 = v44[4];
    __swift_project_boxed_opaque_existential_1(v44, v46);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v46, v47);
    if (!v48)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(void, void, uint64_t, uint64_t, void, unint64_t))(*(void *)v45 + 192))(*(void *)(v0 + 104), *(void *)(v0 + 112), result, v48, *(void *)(v0 + 80), v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v2 = *(void *)(v0 + 144);
    uint64_t v4 = *(void *)(v0 + 128);
    id v5 = [*(id *)(v0 + 96) properties];
    uint64_t v6 = [v5 expirationDate];

    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    Date.timeIntervalSinceNow.getter();
    unint64_t v8 = v7;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    if (v8 > 0.0)
    {
      if (one-time initialization token for group != -1) {
        swift_once();
      }
      uint64_t v9 = *(void **)(v0 + 96);
      uint64_t v10 = type metadata accessor for Logger();
      *(void *)(v0 + 160) = __swift_project_value_buffer(v10, (uint64_t)static Log.group);
      uint64_t v11 = v9;
      id v12 = Logger.logObject.getter();
      id v13 = static os_log_type_t.info.getter();
      double v14 = os_log_type_enabled(v12, v13);
      double v15 = *(void **)(v0 + 96);
      if (v14)
      {
        Swift::String v16 = (uint8_t *)swift_slowAlloc();
        unint64_t v52 = (void *)swift_slowAlloc();
        *(_DWORD *)Swift::String v16 = 138412290;
        *(void *)(v0 + 48) = v15;
        uint64_t v17 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v52 = v15;

        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Revoking pseudonym: %@", v16, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v38 = *(void **)(v0 + 120);
      id v39 = v38[3];
      os_log_type_t v40 = v38[4];
      __swift_project_boxed_opaque_existential_1(v38, v39);
      uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 + 40) + **(int **)(v40 + 40));
      BOOL v41 = (void *)swift_task_alloc();
      *(void *)(v0 + 168) = v41;
      *BOOL v41 = v0;
      v41[1] = closure #1 in Pseudonym.deinit;
      uint64_t v42 = *(void *)(v0 + 96);
      return v51(v42, v39, v40);
    }
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    id v18 = *(void **)(v0 + 96);
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.group);
    os_log_type_t v20 = v18;
    BOOL v21 = Logger.logObject.getter();
    uint64_t v22 = static os_log_type_t.default.getter();
    uint64_t v23 = os_log_type_enabled(v21, v22);
    long long v24 = *(void **)(v0 + 96);
    if (v23)
    {
      id v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)id v25 = 138412290;
      *(void *)(v0 + 16) = v24;
      uint64_t v27 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v26 = v24;

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Not revoking expired pseudonym: %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    specialized $defer #1 () in closure #1 in Pseudonym.deinit(*(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void **)(v0 + 120));
  }
  swift_task_dealloc();
  uint64_t v49 = *(uint64_t (**)(void))(v0 + 8);
  return v49();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in Pseudonym.deinit;
  }
  else {
    uint64_t v2 = closure #1 in Pseudonym.deinit;
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  id v1;
  NSObject *v2;
  os_log_type_t v3;
  void *v4;
  uint8_t *v5;
  id v6;
  void *v7;
  uint64_t (*v8)(void);
  void *v10;
  uint64_t v11;

  uint64_t v1 = *(id *)(v0 + 96);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void **)(v0 + 96);
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)id v5 = 138412290;
    *(void *)(v0 + 40) = v4;
    uint64_t v6 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v4;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully revoked used pseudonym %@", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v7 = *(void **)(v0 + 96);
  }
  specialized $defer #1 () in closure #1 in Pseudonym.deinit(*(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void **)(v0 + 120));
  swift_task_dealloc();
  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

{
  uint64_t v0;
  id v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)(void);
  NSObject *log;
  uint64_t v14;

  uint64_t v1 = *(id *)(v0 + 96);
  swift_errorRetain();
  uint64_t v2 = v1;
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = *(void **)(v0 + 96);
    os_log_t log = v3;
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(void *)(v0 + 24) = v5;
    *(_DWORD *)uint64_t v6 = 138412546;
    unint64_t v8 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v5;

    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v7[1] = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v4, "Failed to revoke used pseudonym %@, reason: %@", (uint8_t *)v6, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v10 = *(void **)(v0 + 96);
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  specialized $defer #1 () in closure #1 in Pseudonym.deinit(*(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void **)(v0 + 120));
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t Pseudonym.__deallocating_deinit()
{
  Pseudonym.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PseudonymProtocol.handle.getter in conformance Pseudonym()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  id v2 = [*(id *)(v1 + 16) URI];
  id v3 = [v2 prefixedURI];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

void protocol witness for PseudonymProtocol.expirationDate.getter in conformance Pseudonym()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  id v2 = [*(id *)(v1 + 16) properties];
  id v3 = [v2 expirationDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t protocol witness for PseudonymProtocol.service.getter in conformance Pseudonym@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PseudonymProtocol(*v1 + 32, a1);
}

uint64_t protocol witness for PseudonymProtocol.configuration.getter in conformance Pseudonym@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(*v1 + 104);
  uint64_t v5 = *(void *)(*v1 + 112);
  *(void *)a1 = *(void *)(*v1 + 72);
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v2 + 88);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t protocol witness for static PseudonymProtocol.create(service:pseudonym:configuration:) in conformance Pseudonym@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, long long *a4@<X3>, unint64_t *a5@<X8>)
{
  outlined init with copy of PseudonymProtocol(a1, (uint64_t)v11);
  long long v13 = *a4;
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)(a4 + 2), (uint64_t)v12, &demangling cache variable for type metadata for String?);
  swift_bridgeObjectRetain();
  outlined retain of String((uint64_t)&v13);
  outlined retain of String((uint64_t)v12);
  unint64_t result = specialized Pseudonym.__allocating_init(service:pseudonym:configuration:)(v11, a2, a3, a4);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

unint64_t static Pseudonym.create(service:pseudonym:configuration:)(uint64_t a1, uint64_t a2, unint64_t a3, long long *a4)
{
  outlined init with copy of PseudonymProtocol(a1, (uint64_t)v8);
  long long v10 = *a4;
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)(a4 + 2), (uint64_t)v9, &demangling cache variable for type metadata for String?);
  swift_bridgeObjectRetain();
  outlined retain of String((uint64_t)&v10);
  outlined retain of String((uint64_t)v9);
  return specialized Pseudonym.__allocating_init(service:pseudonym:configuration:)(v8, a2, a3, a4);
}

void protocol witness for PseudonymProtocol.markUsed() in conformance Pseudonym()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Pseudonym()
{
  return Pseudonym.description.getter();
}

uint64_t protocol witness for PseudonymServiceManager.serviceIdentifier.getter in conformance IDSService()
{
  id v1 = [*v0 serviceIdentifier];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t protocol witness for PseudonymServiceManager.accounts.getter in conformance IDSService()
{
  id v1 = [*v0 accounts];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSAccount);
  lazy protocol witness table accessor for type IDSAccount and conformance NSObject();
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id protocol witness for PseudonymServiceManager.pseudonym(forPseudonymURI:) in conformance IDSService(uint64_t a1)
{
  id v2 = [*v1 pseudonymForPseudonymURI:a1];
  return v2;
}

uint64_t protocol witness for PseudonymServiceManager.renewPseudonym(_:forUpdatedDuration:) in conformance IDSService(uint64_t a1, double a2)
{
  uint64_t v6 = *v2;
  v3[2] = v3;
  v3[7] = v3 + 15;
  v3[3] = protocol witness for PseudonymServiceManager.renewPseudonym(_:forUpdatedDuration:) in conformance IDSService;
  uint64_t v7 = swift_continuation_init();
  v3[10] = _NSConcreteStackBlock;
  v3[11] = 0x40000000;
  v3[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IDSPseudonym?, @unowned NSError?) -> () with result type IDSPseudonym;
  v3[13] = &block_descriptor_58;
  v3[14] = v7;
  [v6 renewPseudonym:a1 forUpdatedDuration:v3 + 10 completion:a2];
  return _swift_continuation_await(v3 + 2);
}

uint64_t protocol witness for PseudonymServiceManager.renewPseudonym(_:forUpdatedDuration:) in conformance IDSService()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48))
  {
    swift_willThrow();
    id v2 = *(uint64_t (**)(void))(v1 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(void *)(*v0 + 120);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v1 + 8);
    return v5(v4);
  }
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IDSPseudonym?, @unowned NSError?) -> () with result type IDSPseudonym(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t protocol witness for PseudonymServiceManager.revokePseudonym(_:) in conformance IDSService(uint64_t a1)
{
  uint64_t v4 = *v1;
  v2[2] = v2;
  v2[7] = v2 + 15;
  v2[3] = protocol witness for PseudonymServiceManager.revokePseudonym(_:) in conformance IDSService;
  uint64_t v5 = swift_continuation_init();
  v2[10] = _NSConcreteStackBlock;
  v2[11] = 0x40000000;
  v2[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
  v2[13] = &block_descriptor_56;
  v2[14] = v5;
  [v4 revokePseudonym:a1 completion:v2 + 10];
  return _swift_continuation_await(v2 + 2);
}

uint64_t protocol witness for PseudonymServiceManager.revokePseudonym(_:) in conformance IDSService()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48))
  {
    swift_willThrow();
    id v2 = *(uint64_t (**)(uint64_t))(v1 + 8);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 *)(*v0 + 120);
    id v2 = *(uint64_t (**)(uint64_t))(v1 + 8);
  }
  return v2(v3);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t protocol witness for PseudonymServiceManager.provisionPseudonym(for:with:) in conformance IDSService(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  v3[2] = v3;
  v3[7] = v3 + 15;
  v3[3] = protocol witness for PseudonymServiceManager.provisionPseudonym(for:with:) in conformance IDSService;
  uint64_t v7 = swift_continuation_init();
  v3[10] = _NSConcreteStackBlock;
  v3[11] = 0x40000000;
  v3[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IDSPseudonym?, @unowned NSError?) -> () with result type IDSPseudonym;
  v3[13] = &block_descriptor_0;
  v3[14] = v7;
  [v6 provisionPseudonymForURI:a1 withProperties:a2 completion:v3 + 10];
  return _swift_continuation_await(v3 + 2);
}

const char *UserDefaultsPseudonymStorage.reusableKey.unsafeMutableAddressor()
{
  return "reusable";
}

uint64_t static UserDefaultsPseudonymStorage.reusableKey.getter()
{
  return 0x656C626173756572;
}

const char *UserDefaultsPseudonymStorage.inUseKey.unsafeMutableAddressor()
{
  return "inUse";
}

uint64_t static UserDefaultsPseudonymStorage.inUseKey.getter()
{
  return 0x6573556E69;
}

const char *UserDefaultsPseudonymStorage.pendingRevokeKey.unsafeMutableAddressor()
{
  return "pendingRevoke";
}

uint64_t static UserDefaultsPseudonymStorage.pendingRevokeKey.getter()
{
  return 0x52676E69646E6570;
}

uint64_t UserDefaultsPseudonymStorage.lock.getter()
{
  return swift_retain();
}

void *UserDefaultsPseudonymStorage.__allocating_init(userDefaults:)(uint64_t a1)
{
  id v2 = (void *)swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  uint64_t v3 = Lock.init()();
  v2[3] = a1;
  v2[4] = &_swiftEmptySetSingleton;
  v2[2] = v3;
  return v2;
}

void *UserDefaultsPseudonymStorage.init(userDefaults:)(uint64_t a1)
{
  type metadata accessor for Lock();
  swift_allocObject();
  uint64_t v3 = Lock.init()();
  v1[3] = a1;
  v1[4] = &_swiftEmptySetSingleton;
  v1[2] = v3;
  return v1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDefaultsPseudonymStorage.push(id:serviceIdentifier:reuseIdentifier:)(Swift::String id, Swift::String serviceIdentifier, Swift::String reuseIdentifier)
{
}

uint64_t closure #1 in UserDefaultsPseudonymStorage.push(id:serviceIdentifier:reuseIdentifier:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(a3, a4);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(*a1 + 16);
  if (v8)
  {
    uint64_t v9 = (void *)(v7 + 40);
    uint64_t v10 = *(void *)(*a1 + 16);
    while (1)
    {
      uint64_t result = *(v9 - 1);
      if (result == a3 && *v9 == a4) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        break;
      }
      v9 += 2;
      if (!--v10) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 + 1, 1, (char *)v7);
      uint64_t v7 = result;
    }
    unint64_t v14 = *(void *)(v7 + 16);
    unint64_t v13 = *(void *)(v7 + 24);
    if (v14 >= v13 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, (char *)v7);
      uint64_t v7 = result;
    }
    *(void *)(v7 + 16) = v14 + 1;
    unint64_t v15 = v7 + 16 * v14;
    *(void *)(v15 + 32) = a3;
    *(void *)(v15 + 40) = a4;
    *a1 = v7;
  }
  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDefaultsPseudonymStorage.pop(serviceIdentifier:reuseIdentifier:)(Swift::String serviceIdentifier, Swift::String reuseIdentifier)
{
  Lock.withLock<A>(_:)();
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  result.value._uint64_t object = v3;
  result.value._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t closure #1 in UserDefaultsPseudonymStorage.pop(serviceIdentifier:reuseIdentifier:)(uint64_t *a1, Swift::Int *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v25 = v4 + 32;
    uint64_t v6 = (uint64_t *)(a3 + 32);
    swift_bridgeObjectRetain_n();
    swift_beginAccess();
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v8 = (Swift::Int *)(v25 + 16 * i);
      Swift::Int v10 = *v8;
      Swift::Int v9 = v8[1];
      uint64_t v11 = *v6;
      if (!*(void *)(*v6 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v12 = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v14 = v12 & ~v13;
      if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        goto LABEL_19;
      }
      uint64_t v15 = *(void *)(v11 + 48);
      Swift::String v16 = (void *)(v15 + 16 * v14);
      BOOL v17 = *v16 == v10 && v16[1] == v9;
      if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v18 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v18;
          if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v14);
          BOOL v20 = *v19 == v10 && v19[1] == v9;
          if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_3;
          }
        }
LABEL_19:
        swift_bridgeObjectRelease_n();
LABEL_22:
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
LABEL_3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease_n();
    Swift::Int v10 = 0;
    Swift::Int v9 = 0;
LABEL_23:
    uint64_t v3 = a2;
  }
  else
  {
    Swift::Int v10 = 0;
    Swift::Int v9 = 0;
  }
  *uint64_t v3 = v10;
  v3[1] = v9;
  uint64_t result = swift_bridgeObjectRelease();
  Swift::Int v22 = v3[1];
  if (v22)
  {
    Swift::Int v23 = *v3;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v26, v23, v22);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDefaultsPseudonymStorage.register(id:serviceIdentifier:reuseIdentifier:)(Swift::String id, Swift::String serviceIdentifier, Swift::String reuseIdentifier)
{
}

uint64_t closure #1 in UserDefaultsPseudonymStorage.register(id:serviceIdentifier:reuseIdentifier:)(uint64_t *a1, uint64_t a2, Swift::Int a3, Swift::Int a4)
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)(&v16, a3, a4);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(*a1 + 16);
  if (v8)
  {
    Swift::Int v9 = (void *)(v7 + 40);
    uint64_t v10 = *(void *)(*a1 + 16);
    while (1)
    {
      uint64_t result = *(v9 - 1);
      if (result == a3 && *v9 == a4) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        break;
      }
      v9 += 2;
      if (!--v10) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 + 1, 1, (char *)v7);
      uint64_t v7 = result;
    }
    unint64_t v14 = *(void *)(v7 + 16);
    unint64_t v13 = *(void *)(v7 + 24);
    if (v14 >= v13 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, (char *)v7);
      uint64_t v7 = result;
    }
    *(void *)(v7 + 16) = v14 + 1;
    unint64_t v15 = v7 + 16 * v14;
    *(void *)(v15 + 32) = a3;
    *(void *)(v15 + 40) = a4;
    *a1 = v7;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDefaultsPseudonymStorage.markUsed(id:serviceIdentifier:reuseIdentifier:)(Swift::String id, Swift::String serviceIdentifier, Swift::String reuseIdentifier)
{
}

uint64_t closure #1 in UserDefaultsPseudonymStorage.markUsed(id:serviceIdentifier:reuseIdentifier:)(char **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(a3, a4);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(a1, a3, a4);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v9 = *((void *)*a1 + 2);
  if (v9 >= v7) {
    return specialized Array.replaceSubrange<A>(_:with:)(v7, v9);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDefaultsPseudonymStorage.setPendingRevoke(id:serviceIdentifier:reuseIdentifier:)(Swift::String id, Swift::String serviceIdentifier, Swift::String reuseIdentifier)
{
}

uint64_t closure #1 in UserDefaultsPseudonymStorage.setPendingRevoke(id:serviceIdentifier:reuseIdentifier:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)(*a1 + 16);
  if (v7)
  {
    uint64_t v8 = (void *)(v6 + 40);
    uint64_t v9 = *(void *)(*a1 + 16);
    while (1)
    {
      uint64_t result = *(v8 - 1);
      if (result == a2 && *v8 == a3) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        break;
      }
      v8 += 2;
      if (!--v9) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 + 1, 1, (char *)v6);
      uint64_t v6 = result;
    }
    unint64_t v13 = *(void *)(v6 + 16);
    unint64_t v12 = *(void *)(v6 + 24);
    if (v13 >= v12 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v6);
      uint64_t v6 = result;
    }
    *(void *)(v6 + 16) = v13 + 1;
    unint64_t v14 = v6 + 16 * v13;
    *(void *)(v14 + 32) = a2;
    *(void *)(v14 + 40) = a3;
    *a1 = v6;
  }
  return result;
}

void *UserDefaultsPseudonymStorage.getPendingRevoke(serviceIdentifier:reuseIdentifier:)()
{
  return _swiftEmptyArrayStorage;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDefaultsPseudonymStorage.removePendingRevoke(id:serviceIdentifier:reuseIdentifier:)(Swift::String id, Swift::String serviceIdentifier, Swift::String reuseIdentifier)
{
}

uint64_t closure #1 in UserDefaultsPseudonymStorage.removePendingRevoke(id:serviceIdentifier:reuseIdentifier:)(char **a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(a1, a2, a3);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v8 = *((void *)*a1 + 2);
  if (v8 >= v6) {
    return specialized Array.replaceSubrange<A>(_:with:)(v6, v8);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void *))
{
  unint64_t v12 = *(void **)(a1 + 24);
  NSString v13 = String._bridgeToObjectiveC()();
  id v30 = v12;
  id v14 = [v12 objectForKey:v13];

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v31, 0, sizeof(v31));
  }
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)v31, (uint64_t)v32, &demangling cache variable for type metadata for Any?);
  if (v32[3])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String : [String]]]);
    if (swift_dynamicCast())
    {
      unint64_t v15 = v32[5];
      goto LABEL_9;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v32, &demangling cache variable for type metadata for Any?);
  }
  unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
LABEL_9:
  if (!*(void *)(v15 + 16)) {
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
    if (!*(void *)(v18 + 16)) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  unint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!*(void *)(v18 + 16))
  {
LABEL_12:
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
LABEL_15:
  swift_bridgeObjectRetain();
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a6, a7);
  if (v21)
  {
    uint64_t v19 = *(void **)(*(void *)(v18 + 56) + 8 * v20);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
LABEL_19:
  v32[0] = v19;
  a8(v32);
  uint64_t v22 = v32[0];
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v31[0] = v18;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, a6, a7, isUniquelyReferenced_nonNull_native);
  uint64_t v24 = *(void *)&v31[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v25 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v31[0] = v15;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, a4, a5, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v27 = String._bridgeToObjectiveC()();
  [v30 setObject:isa forKey:v27];

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t UserDefaultsPseudonymStorage.deinit()
{
  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t UserDefaultsPseudonymStorage.__deallocating_deinit()
{
  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PseudonymStorage.push(id:serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage()
{
  return Lock.withLock<A>(_:)();
}

uint64_t protocol witness for PseudonymStorage.pop(serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage()
{
  return 0;
}

uint64_t protocol witness for PseudonymStorage.register(id:serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage()
{
  return Lock.withLock<A>(_:)();
}

uint64_t protocol witness for PseudonymStorage.markUsed(id:serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage()
{
  return Lock.withLock<A>(_:)();
}

uint64_t protocol witness for PseudonymStorage.setPendingRevoke(id:serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage()
{
  return Lock.withLock<A>(_:)();
}

uint64_t protocol witness for PseudonymStorage.removePendingRevoke(id:serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage()
{
  return Lock.withLock<A>(_:)();
}

void *protocol witness for PseudonymStorage.getPendingRevoke(serviceIdentifier:reuseIdentifier:) in conformance UserDefaultsPseudonymStorage()
{
  return _swiftEmptyArrayStorage;
}

id PseudonymProvider.lock.getter()
{
  return *(id *)(v0 + 24);
}

uint64_t PseudonymProvider.storage.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PseudonymProtocol(v1 + 32, a1);
}

void *PseudonymProvider.init(storage:)(long long *a1)
{
  v1[2] = 0x4014000000000000;
  v1[3] = [objc_allocWithZone((Class)NSRecursiveLock) init];
  v1[9] = &_swiftEmptyDictionarySingleton;
  outlined init with take of PseudonymProtocol(a1, (uint64_t)(v1 + 4));
  return v1;
}

id PseudonymProvider.existingPseudonym(for:configuration:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v147 = *v3;
  uint64_t v7 = type metadata accessor for Date();
  Class v145 = *(Class *)(v7 - 8);
  unint64_t v146 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  v144 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = v147[10].isa;
  uint64_t v10 = *((void *)isa - 1);
  uint64_t v11 = __chkstk_darwin(v8);
  v142 = (char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  v143 = (char *)&v128 - v14;
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v128 - v15;
  v151 = v3;
  [v3[3] lock];
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v17);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  if (!v20) {
    goto LABEL_8;
  }
  unint64_t v21 = v20;
  unint64_t v22 = *(void *)(a2 + 40);
  if (!v22)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    (*(void (**)(uint64_t, uint64_t, uint64_t, Class))(v10 + 56))(a3, 1, 1, isa);
    goto LABEL_9;
  }
  uint64_t v23 = v19;
  uint64_t v24 = *(void *)(a2 + 32);
  uint64_t v25 = one-time initialization token for group;
  swift_bridgeObjectRetain();
  if (v25 != -1) {
    swift_once();
  }
  uint64_t v135 = (uint64_t)v16;
  uint64_t v140 = v24;
  uint64_t v141 = v23;
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = __swift_project_value_buffer(v26, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v138 = v27;
  id v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v134 = a3;
  uint64_t v150 = v22;
  uint64_t v136 = a2;
  uint64_t v137 = v10;
  unint64_t v148 = v21;
  if (v30)
  {
    uint64_t v31 = swift_slowAlloc();
    v154[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315906;
    uint64_t v32 = _typeName(_:qualified:)();
    uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v154);
    v139 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 12) = 2080;
    uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001000DB2F0, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v31 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v34 = v140;
    uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v150, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v31 + 32) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v35 = v141;
    uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v21, v154);
    a1 = v139;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s %s - %s %s ", (uint8_t *)v31, 0x2Au);
    swift_arrayDestroy();
    unint64_t v22 = v150;
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v36 = v151;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v36 = v151;
    uint64_t v34 = v140;
    uint64_t v35 = v141;
  }
  PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:)(a1, v34, v22);
  id v38 = a1;
  unint64_t v39 = v22;
  uint64_t v40 = (uint64_t)v36[7];
  BOOL v41 = (uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, id))v36[8];
  __swift_project_boxed_opaque_existential_1(v36 + 4, v40);
  uint64_t v42 = v152;
  uint64_t v43 = v41[2](v35, v148, v34, v39, v40, v41);
  v152 = v42;
  if (v42) {
    goto LABEL_12;
  }
  unint64_t v46 = v44;
  v132 = v36 + 4;
  v139 = v38;
  if (!v44)
  {
    unint64_t v61 = v150;
    swift_bridgeObjectRetain();
    unint64_t v62 = v148;
    swift_bridgeObjectRetain();
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    int v65 = v64;
    BOOL v66 = os_log_type_enabled(v63, v64);
    uint64_t v67 = v137;
    if (v66)
    {
      uint64_t v68 = swift_slowAlloc();
      LODWORD(v146) = v65;
      uint64_t v69 = v68;
      v154[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v69 = 136315906;
      uint64_t v70 = _typeName(_:qualified:)();
      uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v154);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v69 + 12) = 2080;
      uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001000DB2F0, v154);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v69 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v61, v154);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v69 + 32) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v62, v154);
      uint64_t v67 = v137;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v146, "%s %s - No reusable pseudonyms available for %s %s", (uint8_t *)v69, 0x2Au);
      swift_arrayDestroy();
      uint64_t v36 = v151;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, Class))(v67 + 56))(v134, 1, 1, isa);
    goto LABEL_13;
  }
  uint64_t v47 = v43;
  unint64_t v48 = v150;
  swift_bridgeObjectRetain_n();
  unint64_t v49 = v148;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.info.getter();
  int v52 = v51;
  BOOL v53 = os_log_type_enabled(v50, v51);
  uint64_t v54 = v141;
  uint64_t v55 = v147;
  uint64_t v133 = v47;
  if (v53)
  {
    uint64_t v56 = swift_slowAlloc();
    os_log_t v129 = v50;
    LODWORD(v130) = v52;
    uint64_t v57 = v56;
    os_log_t v131 = (os_log_t)swift_slowAlloc();
    v154[0] = (uint64_t)v131;
    *(_DWORD *)uint64_t v57 = 136316162;
    uint64_t v58 = _typeName(_:qualified:)();
    uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 12) = 2080;
    uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001000DB2F0, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v57 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v46, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v57 + 32) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v150, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v57 + 42) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v148, v154);
    unint64_t v48 = v150;
    unint64_t v49 = v148;
    uint64_t v47 = v133;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v60 = v129;
    _os_log_impl((void *)&_mh_execute_header, v129, (os_log_type_t)v130, "%s %s - Found reusable pseudonym candidate: %s %s %s", (uint8_t *)v57, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v72 = v135;
  Class v73 = v55[11].isa;
  uint64_t v74 = v152;
  (*((void (**)(void *, uint64_t, unint64_t, uint64_t))v73 + 6))(v139, v47, v46, v136);
  v152 = v74;
  if (!v74)
  {
    v84 = v144;
    (*((void (**)(Class, Class))v73 + 3))(isa, v73);
    Date.timeIntervalSinceNow.getter();
    double v86 = v85;
    (*((void (**)(char *, unint64_t))v145 + 1))(v84, v146);
    if (v86 <= 5.0)
    {
      Class v145 = v73;
      unint64_t v146 = v46;
      uint64_t v100 = v137;
      Class v101 = isa;
      v102 = *(void (**)(char *, uint64_t, Class))(v137 + 16);
      v103 = v143;
      v102(v143, v72, isa);
      v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.default.getter();
      LODWORD(v144) = v105;
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v106 = swift_slowAlloc();
        uint64_t v135 = swift_slowAlloc();
        v154[0] = v135;
        *(_DWORD *)uint64_t v106 = 136315650;
        os_log_t v131 = v104;
        uint64_t v107 = _typeName(_:qualified:)();
        uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, v154);
        v147 = v154;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v106 + 12) = 2080;
        uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001000DB2F0, v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v106 + 22) = 2080;
        uint64_t v130 = v106 + 24;
        v109 = v142;
        v102(v142, (uint64_t)v103, v101);
        v110 = *(void (**)(char *, Class))(v137 + 8);
        v110(v103, v101);
        Class v111 = v145;
        Class v112 = v101;
        uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v115 = v114;
        v110(v109, v112);
        v116 = v110;
        uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v115, v154);
        uint64_t v54 = v141;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v117 = v131;
        _os_log_impl((void *)&_mh_execute_header, v131, (os_log_type_t)v144, "%s %s - Reusable pseudonym: %s is expired. Attempting to use next available reusable pseudonym", (uint8_t *)v106, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        __int16 v76 = v151;
      }
      else
      {
        v116 = *(void (**)(char *, Class))(v100 + 8);
        v116(v103, v101);

        __int16 v76 = v151;
        Class v111 = v145;
      }
      (*((void (**)(Class, Class))v111 + 7))(isa, v111);
      v126 = v152;
      (*((void (**)(void *, uint64_t))*v76 + 20))(v139, v136);
      v152 = v126;
      if (!v126)
      {
        v116((char *)v72, isa);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v37 = v76[3];
        return [v37 unlock];
      }
      v116((char *)v72, isa);
      v147 = 0;
      v75 = v152;
      goto LABEL_23;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = swift_slowAlloc();
      uint64_t v150 = swift_slowAlloc();
      v154[0] = v150;
      *(_DWORD *)uint64_t v89 = 136316162;
      uint64_t v90 = _typeName(_:qualified:)();
      uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, v154);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v89 + 12) = 2080;
      uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001000DB2F0, v154);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v89 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v46, v154);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v89 + 32) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v48, v154);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v89 + 42) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v49, v154);
      uint64_t v72 = v135;
      uint64_t v92 = v137;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "%s %s - Reusing pseudonym: %s %s %s", (uint8_t *)v89, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v93 = v134;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v93 = v134;
      uint64_t v92 = v137;
    }
    Class v125 = isa;
    (*(void (**)(uint64_t, uint64_t, Class))(v92 + 32))(v93, v72, isa);
    (*(void (**)(uint64_t, void, uint64_t, Class))(v92 + 56))(v93, 0, 1, v125);
LABEL_9:
    id v37 = v151[3];
    return [v37 unlock];
  }
  unint64_t v146 = v46;
  v147 = 0;
  __int16 v76 = v151;
  v75 = v152;
LABEL_23:
  Class v145 = (Class)v75;
  uint64_t v77 = (uint64_t)v76[7];
  v78 = (void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, id))v76[8];
  v79 = v132;
  __swift_project_boxed_opaque_existential_1(v132, v77);
  uint64_t v80 = v133;
  unint64_t v82 = v146;
  v81 = v147;
  uint64_t v83 = v140;
  v78[4](v133, v146, v54, v148, v140, v150, v77, v78);
  v152 = v81;
  if (v81)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = v76;
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    id v37 = v36[3];
    return [v37 unlock];
  }
  uint64_t v95 = (uint64_t)v76[7];
  v94 = (void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, id))v76[8];
  __swift_project_boxed_opaque_existential_1(v79, v95);
  uint64_t v96 = v80;
  unint64_t v97 = v148;
  v98 = v152;
  v94[6](v96, v82, v54, v148, v83, v150, v95, v94);
  v152 = v98;
  unint64_t v99 = v82;
  if (v98)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = v151;
    goto LABEL_12;
  }
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  v118 = Logger.logObject.getter();
  os_log_type_t v119 = static os_log_type_t.error.getter();
  v147 = v118;
  if (os_log_type_enabled(v118, v119))
  {
    uint64_t v120 = swift_slowAlloc();
    v121 = (void *)swift_slowAlloc();
    v144 = (char *)swift_slowAlloc();
    v154[0] = (uint64_t)v144;
    *(_DWORD *)uint64_t v120 = 136315906;
    swift_bridgeObjectRetain();
    uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v99, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v120 + 12) = 2080;
    unint64_t v122 = v150;
    swift_bridgeObjectRetain();
    uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v122, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v120 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v97, v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v120 + 32) = 2112;
    swift_errorRetain();
    uint64_t v123 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v153 = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v121 = v123;
    swift_errorRelease();
    swift_errorRelease();
    v124 = v147;
    _os_log_impl((void *)&_mh_execute_header, v147, v119, "Failed to use reusable pseudonym: %s %s %s: %@", (uint8_t *)v120, 0x2Au);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  v127 = v151;
  (*(void (**)(uint64_t, uint64_t, uint64_t, Class))(v137 + 56))(v134, 1, 1, isa);
  id v37 = v127[3];
  return [v37 unlock];
}

Swift::Void __swiftcall PseudonymProvider.register(handle:for:reuseIdentifier:)(Swift::String handle, Swift::String a2, Swift::String reuseIdentifier)
{
  uint64_t v4 = v3;
  uint64_t object = reuseIdentifier._object;
  uint64_t countAndFlagsBits = reuseIdentifier._countAndFlagsBits;
  uint64_t v6 = a2._object;
  uint64_t v7 = a2._countAndFlagsBits;
  uint64_t v8 = handle._object;
  uint64_t v9 = handle._countAndFlagsBits;
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v19 = v7;
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136316162;
    uint64_t v14 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001000DB320, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, (unint64_t)v8, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 32) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 42) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v16 = v19;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, (unint64_t)v6, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s %s - %s %s %s", (uint8_t *)v13, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v16 = v19;
  }
  uint64_t v17 = v4[7];
  uint64_t v18 = v4[8];
  __swift_project_boxed_opaque_existential_1(v4 + 4, v17);
  (*(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t))(v18 + 24))(v9, v8, v16, v6, countAndFlagsBits, object, v17, v18);
}

Swift::Void __swiftcall PseudonymProvider.markUsed(handle:for:reuseIdentifier:)(Swift::String handle, Swift::String a2, Swift::String reuseIdentifier)
{
  uint64_t v4 = v3;
  uint64_t object = reuseIdentifier._object;
  uint64_t countAndFlagsBits = reuseIdentifier._countAndFlagsBits;
  uint64_t v7 = a2._object;
  uint64_t v8 = a2._countAndFlagsBits;
  uint64_t v9 = handle._object;
  uint64_t v22 = handle._countAndFlagsBits;
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v21 = countAndFlagsBits;
    uint64_t v13 = swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136316162;
    uint64_t v14 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001000DB350, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, (unint64_t)v9, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 32) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, (unint64_t)object, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 42) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, (unint64_t)v7, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s %s - %s %s %s", (uint8_t *)v13, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t countAndFlagsBits = v21;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v16 = v4 + 4;
  uint64_t v17 = v4[7];
  uint64_t v18 = v4[8];
  __swift_project_boxed_opaque_existential_1(v4 + 4, v17);
  (*(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t))(v18 + 32))(v22, v9, v8, v7, countAndFlagsBits, object, v17, v18);
  uint64_t v20 = v4[7];
  uint64_t v19 = v4[8];
  __swift_project_boxed_opaque_existential_1(v16, v20);
  (*(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t))(v19 + 40))(v22, v9, v8, v7, countAndFlagsBits, object, v20, v19);
}

Swift::Void __swiftcall PseudonymProvider.markRevoked(handle:for:reuseIdentifier:)(Swift::String handle, Swift::String a2, Swift::String reuseIdentifier)
{
  uint64_t v4 = v3;
  uint64_t object = reuseIdentifier._object;
  uint64_t countAndFlagsBits = reuseIdentifier._countAndFlagsBits;
  uint64_t v6 = a2._object;
  uint64_t v7 = a2._countAndFlagsBits;
  uint64_t v8 = handle._object;
  uint64_t v9 = handle._countAndFlagsBits;
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v19 = v7;
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136316162;
    uint64_t v14 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001000DB380, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, (unint64_t)v8, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 32) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 42) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v16 = v19;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, (unint64_t)v6, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s %s - %s %s %s", (uint8_t *)v13, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v16 = v19;
  }
  uint64_t v17 = v4[7];
  uint64_t v18 = v4[8];
  __swift_project_boxed_opaque_existential_1(v4 + 4, v17);
  (*(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t))(v18 + 48))(v9, v8, v16, v6, countAndFlagsBits, object, v17, v18);
}

Swift::Void __swiftcall PseudonymProvider.release(handle:for:reuseIdentifier:)(Swift::String handle, Swift::String a2, Swift::String reuseIdentifier)
{
  uint64_t v4 = v3;
  uint64_t object = reuseIdentifier._object;
  uint64_t countAndFlagsBits = reuseIdentifier._countAndFlagsBits;
  uint64_t v6 = a2._object;
  uint64_t v7 = a2._countAndFlagsBits;
  uint64_t v8 = handle._object;
  uint64_t v9 = handle._countAndFlagsBits;
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v19 = v7;
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136316162;
    uint64_t v14 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x80000001000DB3B0, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, (unint64_t)v8, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 32) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 42) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v16 = v19;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, (unint64_t)v6, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s %s - %s %s %s", (uint8_t *)v13, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v16 = v19;
  }
  uint64_t v17 = v4[7];
  uint64_t v18 = v4[8];
  __swift_project_boxed_opaque_existential_1(v4 + 4, v17);
  (*(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, uint64_t))(v18 + 8))(v9, v8, v16, v6, countAndFlagsBits, object, v17, v18);
}

uint64_t PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v9 - 8);
  uint64_t v47 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  if (v14)
  {
    uint64_t v15 = result;
    unint64_t v16 = v14;
    swift_beginAccess();
    uint64_t v17 = v3[9];
    if (*(void *)(v17 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
      if (v19)
      {
        uint64_t v20 = *(void **)(*(void *)(v17 + 56) + 8 * v18);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v20 = &_swiftEmptySetSingleton;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = &_swiftEmptySetSingleton;
    }
    uint64_t v51 = (uint64_t)v20;
    swift_bridgeObjectRetain();
    char v21 = specialized Set.contains(_:)(a2, a3, (uint64_t)v20);
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_9;
    }
    uint64_t v46 = v8;
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((Swift::Int *)v48, a2, a3);
    swift_bridgeObjectRelease();
    uint64_t v22 = v51;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v49 = v4[9];
    v4[9] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, v15, v16, isUniquelyReferenced_nonNull_native);
    v4[9] = v49;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v24 = v4[7];
    uint64_t v25 = v4[8];
    __swift_project_boxed_opaque_existential_1(v4 + 4, v24);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v25 + 56))(v15, v16, a2, a3, v24, v25);
    if (!*(void *)(v26 + 16))
    {
LABEL_9:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for group != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Log.group);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      int v30 = v29;
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v31 = swift_slowAlloc();
        int v44 = v30;
        uint64_t v32 = v31;
        uint64_t v45 = swift_slowAlloc();
        *(void *)&v48[0] = v45;
        *(_DWORD *)uint64_t v32 = 136316162;
        v42[0] = v32 + 4;
        uint64_t v33 = _typeName(_:qualified:)();
        os_log_t v43 = v28;
        uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)v48);
        v42[1] = &v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 12) = 2080;
        uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001000DB550, (uint64_t *)v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 22) = 2080;
        v42[0] = v32 + 24;
        swift_bridgeObjectRetain();
        uint64_t v35 = Array.description.getter();
        unint64_t v37 = v36;
        swift_bridgeObjectRelease();
        uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, (uint64_t *)v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 32) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, (uint64_t *)v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v32 + 42) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, (uint64_t *)v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_t v38 = v43;
        _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v44, "%s %s - Revoking pending pseudonyms: %s for %s %s", (uint8_t *)v32, 0x34u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t v39 = type metadata accessor for TaskPriority();
      uint64_t v40 = (uint64_t)v47;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v47, 1, 1, v39);
      outlined init with copy of PseudonymProtocol((uint64_t)a1, (uint64_t)v48);
      BOOL v41 = (void *)swift_allocObject();
      void v41[2] = 0;
      v41[3] = 0;
      v41[4] = v26;
      v41[5] = v4;
      v41[6] = v15;
      v41[7] = v16;
      v41[8] = a2;
      v41[9] = a3;
      outlined init with take of PseudonymProtocol(v48, (uint64_t)(v41 + 10));
      v41[15] = v46;
      swift_bridgeObjectRetain();
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v40, (uint64_t)&async function pointer to partial apply for closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:), (uint64_t)v41);
      return swift_release();
    }
  }
  return result;
}

uint64_t closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 72) = v11;
  *(_OWORD *)(v8 + 56) = v10;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = a8;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 16) = a4;
  return _swift_task_switch(closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:), 0, 0);
}

uint64_t closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:)()
{
  unint64_t v37 = v0;
  uint64_t v1 = *(void *)(v0[2] + 16);
  v0[10] = v1;
  if (!v1)
  {
LABEL_13:
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  while (1)
  {
    v0[11] = v2;
    uint64_t v6 = v0[5];
    uint64_t v33 = v0[6];
    uint64_t v34 = v0[7];
    uint64_t v7 = (void *)v0[3];
    uint64_t v8 = v0[4];
    uint64_t v9 = v0[2] + 16 * v2;
    uint64_t v10 = *(void *)(v9 + 32);
    v0[12] = v10;
    unint64_t v11 = *(void *)(v9 + 40);
    v0[13] = v11;
    uint64_t v12 = v7[7];
    uint64_t v13 = v7[8];
    __swift_project_boxed_opaque_existential_1(v7 + 4, v12);
    unint64_t v14 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    v14(v10, v11, v8, v6, v33, v34, v12, v13);
    id v15 = objc_allocWithZone((Class)IDSURI);
    swift_bridgeObjectRetain();
    uint64_t v16 = v10;
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = [v15 initWithPrefixedURI:v17];
    v0[14] = v18;

    if (v18) {
      break;
    }
LABEL_8:
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.group);
    swift_bridgeObjectRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v3 = swift_slowAlloc();
      v36[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 136315650;
      uint64_t v4 = _typeName(_:qualified:)();
      *(void *)(v3 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, v36);
      swift_bridgeObjectRelease();
      *(_WORD *)(v3 + 12) = 2080;
      *(void *)(v3 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001000DB550, v36);
      *(_WORD *)(v3 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v3 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v11, v36);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s %s - Failed to find pending revoke pseudonym: %s", (uint8_t *)v3, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v2 = v0[11] + 1;
    if (v2 == v0[10])
    {
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  char v19 = (void *)v0[8];
  uint64_t v20 = v19[3];
  uint64_t v21 = v19[4];
  __swift_project_boxed_opaque_existential_1(v19, v20);
  uint64_t v22 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v21 + 24))(v18, v20, v21);
  v0[15] = v22;
  if (!v22)
  {

    goto LABEL_8;
  }
  uint64_t v28 = v22;
  os_log_type_t v29 = (void *)v0[8];
  uint64_t v30 = v29[3];
  uint64_t v31 = v29[4];
  __swift_project_boxed_opaque_existential_1(v29, v30);
  uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 + 40) + **(int **)(v31 + 40));
  uint64_t v32 = (void *)swift_task_alloc();
  v0[16] = v32;
  void *v32 = v0;
  v32[1] = closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:);
  return v35(v28, v30, v31);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  id v26;
  NSString v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  void *v46;
  uint64_t v47;
  uint64_t v48[2];
  void *v49;
  uint64_t v50;

  uint64_t v49 = v0;
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  BOOL v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static Log.group);
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *((unsigned __int8 *)v0 + 144);
    uint64_t v4 = v0[13];
    os_log_t v43 = (void *)v0[14];
    uint64_t v46 = (void *)v0[15];
    unint64_t v5 = v0[12];
    uint64_t v6 = swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315906;
    uint64_t v7 = _typeName(_:qualified:)();
    *(void *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v48);
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v6 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001000DB550, v48);
    *(_WORD *)(v6 + 22) = 1024;
    *(_DWORD *)(v6 + 24) = v3;
    *(_WORD *)(v6 + 28) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v6 + 30) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, v48);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s %s - Revoke returned %{BOOL}d for pending pseudonym: %s", (uint8_t *)v6, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v9 = (void *)v0[15];

    swift_bridgeObjectRelease_n();
  }
  uint64_t v10 = v0[11] + 1;
  if (v10 == v0[10])
  {
LABEL_7:
    swift_bridgeObjectRelease();
    unint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  uint64_t v13 = v0[17];
  uint64_t v40 = v0;
  while (1)
  {
    v0[11] = v10;
    NSString v17 = v0[5];
    uint64_t v42 = v0[6];
    int v44 = v0[7];
    id v18 = (void *)v0[3];
    char v19 = v0[4];
    uint64_t v20 = v0[2] + 16 * v10;
    uint64_t v21 = *(void *)(v20 + 32);
    v0[12] = v21;
    uint64_t v22 = *(void *)(v20 + 40);
    v0[13] = v22;
    uint64_t v24 = v18[7];
    uint64_t v23 = v18[8];
    __swift_project_boxed_opaque_existential_1(v18 + 4, v24);
    os_log_type_t v25 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    uint64_t v47 = v21;
    v25(v21, v22, v19, v17, v42, v44, v24, v23);
    if (v13) {
      swift_errorRelease();
    }
    uint64_t v26 = objc_allocWithZone((Class)IDSURI);
    swift_bridgeObjectRetain();
    uint64_t v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v28 = [v26 initWithPrefixedURI:v27];
    uint64_t v0 = v40;
    v40[14] = v28;

    if (!v28) {
      goto LABEL_18;
    }
    os_log_type_t v29 = (void *)v40[8];
    uint64_t v30 = v29[3];
    uint64_t v31 = v29[4];
    __swift_project_boxed_opaque_existential_1(v29, v30);
    uint64_t v32 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v31 + 24))(v28, v30, v31);
    v40[15] = v32;
    if (v32) {
      break;
    }

LABEL_18:
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v41, (uint64_t)static Log.group);
    swift_bridgeObjectRetain();
    uint64_t v33 = Logger.logObject.getter();
    uint64_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      unint64_t v14 = swift_slowAlloc();
      v48[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v14 = 136315650;
      id v15 = _typeName(_:qualified:)();
      *(void *)(v14 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v48);
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      *(void *)(v14 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001000DB550, v48);
      *(_WORD *)(v14 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v14 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v22, v48);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s %s - Failed to find pending revoke pseudonym: %s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v13 = 0;
    uint64_t v10 = v40[11] + 1;
    if (v10 == v40[10]) {
      goto LABEL_7;
    }
  }
  uint64_t v35 = v32;
  unint64_t v36 = (void *)v40[8];
  unint64_t v37 = v36[3];
  uint64_t v38 = v36[4];
  __swift_project_boxed_opaque_existential_1(v36, v37);
  uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 + 40) + **(int **)(v38 + 40));
  uint64_t v39 = (void *)swift_task_alloc();
  v40[16] = v39;
  *uint64_t v39 = v40;
  v39[1] = closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:);
  return v45(v35, v37, v38);
}

{
  void *v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  id v25;
  uint64_t v26;
  NSString v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45[2];
  void *v46;
  uint64_t v47;

  uint64_t v46 = v0;
  uint64_t v1 = (void *)v0[15];

  if (one-time initialization token for group != -1) {
    swift_once();
  }
  BOOL v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static Log.group);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[13];
  if (v4)
  {
    uint64_t v6 = v0[12];
    uint64_t v7 = swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315650;
    uint64_t v8 = _typeName(_:qualified:)();
    *(void *)(v7 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v45);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    *(void *)(v7 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001000DB550, v45);
    *(_WORD *)(v7 + 22) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v7 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, v45);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s %s - Failed to revoke pending pseudonym: %s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v10 = v0[11] + 1;
  if (v10 == v0[10])
  {
LABEL_7:
    swift_bridgeObjectRelease();
    unint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  uint64_t v40 = v0;
  while (1)
  {
    v0[11] = v10;
    uint64_t v16 = v0[5];
    uint64_t v42 = v0[6];
    int v44 = v0[7];
    NSString v17 = (void *)v0[3];
    id v18 = v0[4];
    char v19 = v0[2] + 16 * v10;
    uint64_t v20 = *(void *)(v19 + 32);
    v0[12] = v20;
    uint64_t v21 = *(void *)(v19 + 40);
    v0[13] = v21;
    uint64_t v23 = v17[7];
    uint64_t v22 = v17[8];
    __swift_project_boxed_opaque_existential_1(v17 + 4, v23);
    uint64_t v24 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 48);
    swift_bridgeObjectRetain();
    v24(v20, v21, v18, v16, v42, v44, v23, v22);
    os_log_type_t v25 = objc_allocWithZone((Class)IDSURI);
    swift_bridgeObjectRetain();
    uint64_t v26 = v20;
    uint64_t v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v28 = [v25 initWithPrefixedURI:v27];
    uint64_t v0 = v40;
    v40[14] = v28;

    if (v28) {
      break;
    }
LABEL_16:
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v41, (uint64_t)static Log.group);
    swift_bridgeObjectRetain();
    uint64_t v33 = Logger.logObject.getter();
    uint64_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v13 = swift_slowAlloc();
      v45[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315650;
      unint64_t v14 = _typeName(_:qualified:)();
      *(void *)(v13 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v45);
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2080;
      *(void *)(v13 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001000DB550, v45);
      *(_WORD *)(v13 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v13 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v21, v45);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s %s - Failed to find pending revoke pseudonym: %s", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v10 = v40[11] + 1;
    if (v10 == v40[10]) {
      goto LABEL_7;
    }
  }
  os_log_type_t v29 = (void *)v40[8];
  uint64_t v30 = v29[3];
  uint64_t v31 = v29[4];
  __swift_project_boxed_opaque_existential_1(v29, v30);
  uint64_t v32 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v31 + 24))(v28, v30, v31);
  v40[15] = v32;
  if (!v32)
  {

    goto LABEL_16;
  }
  uint64_t v35 = v32;
  unint64_t v36 = (void *)v40[8];
  unint64_t v37 = v36[3];
  uint64_t v38 = v36[4];
  __swift_project_boxed_opaque_existential_1(v36, v37);
  os_log_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 + 40) + **(int **)(v38 + 40));
  uint64_t v39 = (void *)swift_task_alloc();
  v40[16] = v39;
  *uint64_t v39 = v40;
  v39[1] = closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:);
  return v43(v35, v37, v38);
}

uint64_t closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:)(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 144) = a1;
  *(void *)(v3 + 136) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:);
  }
  else {
    uint64_t v4 = closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:);
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t PseudonymProvider.deinit()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 32);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PseudonymProvider.__deallocating_deinit()
{
  PseudonymProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(specialized Clock.sleep(for:tolerance:), 0, 0);
}

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = lazy protocol witness table accessor for type Pseudonym and conformance Pseudonym(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  lazy protocol witness table accessor for type Pseudonym and conformance Pseudonym(&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  void *v7 = v0;
  v7[1] = specialized Clock.sleep(for:tolerance:);
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(specialized Clock.sleep(for:tolerance:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized static Pseudonym.markUsed(handle:for:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *(void *)(a7 - 8);
  __chkstk_darwin(a1);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v18);
  if (one-time initialization token for provider != -1) {
    swift_once();
  }
  char v19 = static Pseudonym.provider;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8))(a7, a8);
  if (v21)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 176))(a1, a2, result, v21, a4, a5);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t specialized Pseudonym.__allocating_init(service:pseudonym:configuration:)(void *a1, uint64_t a2, unint64_t a3, long long *a4)
{
  id v8 = objc_allocWithZone((Class)IDSURI);
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v8 initWithPrefixedURI:v9];

  if (v10)
  {
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v11);
    uint64_t v13 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v12 + 24))(v10, v11, v12);
    if (v13)
    {
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      outlined init with copy of PseudonymProtocol((uint64_t)a1, (uint64_t)v21);
      type metadata accessor for Pseudonym();
      a3 = swift_allocObject();
      Pseudonym.init(service:pseudonym:configuration:)((uint64_t)v21, v14, a4);

      goto LABEL_12;
    }
    long long v23 = *a4;
    outlined release of String?((uint64_t)&v23);
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)(a4 + 2), (uint64_t)v22, &demangling cache variable for type metadata for String?);
    outlined release of String?((uint64_t)v22);
  }
  else
  {
    long long v25 = *a4;
    outlined release of String?((uint64_t)&v25);
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)(a4 + 2), (uint64_t)v24, &demangling cache variable for type metadata for String?);
    outlined release of String?((uint64_t)v24);
  }
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.group);
  swift_bridgeObjectRetain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Couldn't find IDSPseudonym for %s on account", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type Pseudonym.Errors and conformance Pseudonym.Errors();
  swift_allocError();
  *char v19 = 0;
  swift_willThrow();
LABEL_12:
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  return a3;
}

uint64_t specialized Pseudonym.__allocating_init(service:configuration:)(uint64_t a1, uint64_t a2)
{
  v2[34] = a1;
  v2[35] = a2;
  uint64_t v3 = type metadata accessor for Date();
  v2[36] = v3;
  v2[37] = *(void *)(v3 - 8);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  return _swift_task_switch(specialized Pseudonym.__allocating_init(service:configuration:), 0, 0);
}

uint64_t specialized Pseudonym.__allocating_init(service:configuration:)()
{
  uint64_t v100 = v0;
  uint64_t countAndFlagsBits = (void *)v0[17]._countAndFlagsBits;
  uint64_t v2 = countAndFlagsBits[3];
  uint64_t v3 = countAndFlagsBits[4];
  __swift_project_boxed_opaque_existential_1(countAndFlagsBits, v2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  if (!result)
  {
    __break(1u);
LABEL_75:
    __break(1u);
    return result;
  }
  uint64_t object = result;
  uint64_t v89 = (uint64_t)&v0[9];
  uint64_t v87 = (uint64_t)&v0[7];
  if ((result & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSAccount);
    lazy protocol witness table accessor for type IDSAccount and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t object = (uint64_t)v0[3]._object;
    v98 = (void *)v0[4]._countAndFlagsBits;
    uint64_t v6 = (uint64_t)v0[4]._object;
    uint64_t v7 = v0[5]._countAndFlagsBits;
    unint64_t v8 = (unint64_t)v0[5]._object;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = -1 << *(unsigned char *)(result + 32);
    v98 = (void *)(result + 56);
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(result + 56);
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  double v86 = v0 + 6;
  os_log_type_t v88 = v0 + 11;
  p_uint64_t object = (uint64_t *)&v0[15]._object;
  uint64_t v14 = (id *)&v0[16];
  v94 = (uint64_t *)&v0[16]._object;
  int64_t v96 = (unint64_t)(v6 + 64) >> 6;
  uint64_t v90 = (id *)&v0[16];
  while (1)
  {
    uint64_t v15 = v7;
    if ((object & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v18 = __CocoaSet.Iterator.next()();
    if (!v18) {
      goto LABEL_49;
    }
    uint64_t *v94 = v18;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSAccount);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v19 = *v14;
    swift_unknownObjectRelease();
    if (!v19) {
      goto LABEL_49;
    }
LABEL_30:
    if (v13)
    {
    }
    else
    {
      unint64_t v93 = v8;
      id v23 = [v19 aliasStrings];
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v84 = v7;
        uint64_t v92 = v0;
        uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v26 = *(void *)(v25 + 16);
        if (v26)
        {
          uint64_t v27 = (void **)(v25 + 40);
          uint64_t v28 = &_swiftEmptyArrayStorage;
          uint64_t v91 = object;
          do
          {
            uint64_t v29 = (uint64_t)*(v27 - 1);
            uint64_t v30 = *v27;
            v92[12]._uint64_t countAndFlagsBits = v29;
            v92[12]._uint64_t object = v30;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            Swift::String v31 = String.lowercased()();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v92[10] = v31;
            lazy protocol witness table accessor for type String and conformance String();
            char v32 = StringProtocol.contains<A>(_:)();
            swift_bridgeObjectRelease();
            if (v32)
            {
              swift_bridgeObjectRelease();
              uint64_t object = v91;
              unint64_t v8 = v93;
            }
            else
            {
              v99[0] = (uint64_t)v28;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1);
                uint64_t v28 = (void *)v99[0];
              }
              uint64_t object = v91;
              unint64_t v8 = v93;
              unint64_t v34 = v28[2];
              unint64_t v33 = v28[3];
              if (v34 >= v33 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
                unint64_t v8 = v93;
                uint64_t v28 = (void *)v99[0];
              }
              v28[2] = v34 + 1;
              uint64_t v35 = &v28[2 * v34];
              v35[4] = v29;
              v35[5] = v30;
            }
            v27 += 2;
            --v26;
          }
          while (v26);
        }
        else
        {
          uint64_t v28 = &_swiftEmptyArrayStorage;
          unint64_t v8 = v93;
        }
        swift_bridgeObjectRelease();
        if (v28[2])
        {
          uint64_t v12 = v28[4];
          unint64_t v13 = v28[5];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v12 = 0;
          unint64_t v13 = 0;
        }
        uint64_t v0 = v92;
        uint64_t v14 = v90;
        uint64_t v7 = v84;
        swift_release();
      }
      else
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
      }
    }
  }
  if (v8)
  {
    unint64_t v16 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v17 = v16 | (v7 << 6);
    goto LABEL_29;
  }
  int64_t v20 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_73:
    swift_once();
LABEL_53:
    uint64_t v56 = type metadata accessor for Logger();
    v0[21]._uint64_t object = (void *)__swift_project_value_buffer(v56, (uint64_t)static Log.group);
    id v57 = v98;
    id v58 = (id)v8;
    id v59 = v57;
    id v60 = v58;
    unint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      os_log_type_t v95 = v62;
      uint64_t v63 = swift_slowAlloc();
      os_log_type_t v64 = (void *)swift_slowAlloc();
      v99[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 138412546;
      v0[13]._uint64_t object = v59;
      id v65 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v64 = v98;

      *(_WORD *)(v63 + 12) = 2080;
      v0[14]._uint64_t countAndFlagsBits = (uint64_t)v60;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSPseudonymProperties);
      id v66 = v60;
      uint64_t v67 = String.init<A>(reflecting:)();
      v0[14]._uint64_t object = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v61, v95, "Attempting to provision pseudonym with URI: %@ and properties: %s", (uint8_t *)v63, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v79 = *(void *)(v13 + 24);
    uint64_t v80 = *(void *)(v13 + 32);
    __swift_project_boxed_opaque_existential_1((void *)v0[17]._countAndFlagsBits, v79);
    unint64_t v97 = (uint64_t (*)(id, id, uint64_t, uint64_t))(*(void *)(v80 + 48) + **(int **)(v80 + 48));
    v81 = (void *)swift_task_alloc();
    v0[22]._uint64_t countAndFlagsBits = (uint64_t)v81;
    void *v81 = v0;
    v81[1] = specialized Pseudonym.__allocating_init(service:configuration:);
    return v97(v59, v60, v79, v80);
  }
  if (v20 >= v96) {
    goto LABEL_49;
  }
  unint64_t v21 = *((void *)v98 + v20);
  ++v7;
  if (v21) {
    goto LABEL_28;
  }
  uint64_t v7 = v15 + 2;
  if (v15 + 2 >= v96) {
    goto LABEL_49;
  }
  unint64_t v21 = *((void *)v98 + v7);
  if (v21) {
    goto LABEL_28;
  }
  uint64_t v7 = v15 + 3;
  if (v15 + 3 >= v96) {
    goto LABEL_49;
  }
  unint64_t v21 = *((void *)v98 + v7);
  if (v21) {
    goto LABEL_28;
  }
  uint64_t v7 = v15 + 4;
  if (v15 + 4 >= v96) {
    goto LABEL_49;
  }
  unint64_t v21 = *((void *)v98 + v7);
  if (v21)
  {
LABEL_28:
    unint64_t v8 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v7 << 6);
LABEL_29:
    id v19 = *(id *)(*(void *)(object + 48) + 8 * v17);
    if (!v19) {
      goto LABEL_49;
    }
    goto LABEL_30;
  }
  uint64_t v22 = v15 + 5;
  while (v96 != v22)
  {
    unint64_t v21 = *((void *)v98 + v22++);
    if (v21)
    {
      uint64_t v7 = v22 - 1;
      goto LABEL_28;
    }
  }
LABEL_49:
  outlined consume of Set<IDSAccount>.Iterator._Variant();
  if (v13)
  {
    id v36 = objc_allocWithZone((Class)IDSURI);
    swift_bridgeObjectRetain();
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v38 = [v36 initWithUnprefixedURI:v37];
    v0[20]._uint64_t countAndFlagsBits = (uint64_t)v38;

    if (v38)
    {
      v98 = v38;
      uint64_t v39 = v0[19]._countAndFlagsBits;
      uint64_t v40 = v0[19]._object;
      BOOL v41 = v0;
      uint64_t v42 = v0[18]._object;
      int v44 = v41[17]._object;
      uint64_t v43 = v41[18]._countAndFlagsBits;
      uint64_t v45 = (void *)v41[17]._countAndFlagsBits;
      swift_bridgeObjectRelease();
      v41[20]._uint64_t object = (void *)*((void *)v44 + 1);
      swift_bridgeObjectRetain();
      Date.init()();
      Date.addingTimeInterval(_:)();
      uint64_t v46 = (void (*)(uint64_t, uint64_t))v42[1];
      v46(v39, v43);
      Date.timeIntervalSince1970.getter();
      double v48 = v47;
      v46((uint64_t)v40, v43);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = xmmword_1000D6620;
      unint64_t v13 = (unint64_t)countAndFlagsBits;
      uint64_t v50 = countAndFlagsBits[3];
      uint64_t v51 = countAndFlagsBits[4];
      __swift_project_boxed_opaque_existential_1(v45, v50);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v50, v51);
      if (!v52) {
        goto LABEL_75;
      }
      *(void *)(v49 + 32) = result;
      *(void *)(v49 + 40) = v52;
      *(void *)(v49 + 48) = 0xD000000000000032;
      *(void *)(v49 + 56) = 0x80000001000DAB40;
      *(void *)(v49 + 64) = 0xD000000000000034;
      *(void *)(v49 + 72) = 0x80000001000DB580;
      *(void *)(v49 + 80) = 0xD000000000000029;
      *(void *)(v49 + 88) = 0x80000001000DB5C0;
      id v53 = objc_allocWithZone((Class)IDSPseudonymProperties);
      NSString v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      unint64_t v8 = (unint64_t)[v53 initWithFeatureID:v54 scopeID:0 expiryEpoch:isa allowedServices:v48];
      v41[21]._uint64_t countAndFlagsBits = v8;

      uint64_t v0 = v41;
      if (one-time initialization token for group == -1) {
        goto LABEL_53;
      }
      goto LABEL_73;
    }
    uint64_t v74 = (Swift::String *)v0[17]._object;
    *double v86 = *v74;
    outlined release of String?((uint64_t)v86);
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)&v74[2], v87, &demangling cache variable for type metadata for String?);
    outlined release of String?(v87);
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v75 = type metadata accessor for Logger();
    __swift_project_value_buffer(v75, (uint64_t)static Log.group);
    swift_bridgeObjectRetain();
    unint64_t v71 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v76))
    {
      uint64_t v77 = v12;
      v78 = (uint8_t *)swift_slowAlloc();
      v99[0] = swift_slowAlloc();
      *(_DWORD *)v78 = 136315138;
      swift_bridgeObjectRetain();
      *p_uint64_t object = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v13, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v71, v76, "Failed to create an IDSURI from localMember: %s", v78, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
LABEL_63:
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    uint64_t v69 = (Swift::String *)v0[17]._object;
    *os_log_type_t v88 = *v69;
    outlined release of String?((uint64_t)v88);
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)&v69[2], v89, &demangling cache variable for type metadata for String?);
    outlined release of String?(v89);
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    __swift_project_value_buffer(v70, (uint64_t)static Log.group);
    unint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      Class v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Failed to find a localMember", v73, 2u);
      goto LABEL_63;
    }
  }

  lazy protocol witness table accessor for type Pseudonym.Errors and conformance Pseudonym.Errors();
  swift_allocError();
  *unint64_t v82 = 0;
  swift_willThrow();
  __swift_destroy_boxed_opaque_existential_0Tm(v0[17]._countAndFlagsBits);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v83 = (uint64_t (*)(void))v0->_object;
  return v83();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  BOOL v20;
  void *v21;
  uint8_t *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t (*v32)(void);
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  id v36 = v0;
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v1 + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 32);
    uint64_t v4 = one-time initialization token for provider;
    swift_bridgeObjectRetain();
    if (v4 != -1) {
      swift_once();
    }
    uint64_t v5 = *(void **)(v0 + 272);
    uint64_t v6 = static Pseudonym.provider;
    uint64_t v7 = [*(id *)(v0 + 360) URI];
    unint64_t v8 = [v7 prefixedURI];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    uint64_t v12 = v5[3];
    unint64_t v13 = v5[4];
    __swift_project_boxed_opaque_existential_1(v5, v12);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
    if (!v15)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 168))(v9, v11, result, v15, v3, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v16 = v0 + 16;
  unint64_t v17 = *(id *)(v0 + 360);
  uint64_t v18 = Logger.logObject.getter();
  id v19 = static os_log_type_t.default.getter();
  int64_t v20 = os_log_type_enabled(v18, v19);
  unint64_t v21 = *(void **)(v0 + 360);
  if (v20)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    *(void *)(v0 + 240) = v21;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for IDSPseudonym);
    id v23 = v21;
    uint64_t v24 = String.init<A>(reflecting:)();
    *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Provisioned pseudonym: %s", v22, 0xCu);
    swift_arrayDestroy();
    unint64_t v16 = v0 + 16;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v26 = *(void *)(v0 + 360);
  uint64_t v27 = *(void *)(v0 + 368);
  uint64_t v28 = *(_OWORD **)(v0 + 280);
  outlined init with copy of PseudonymProtocol(*(void *)(v0 + 272), v16);
  type metadata accessor for Pseudonym();
  uint64_t v29 = swift_allocObject();
  Pseudonym.init(service:pseudonym:configuration:)(v16, v26, v28);
  uint64_t v30 = *(void **)(v0 + 336);
  Swift::String v31 = *(void **)(v0 + 320);
  if (v27)
  {

    __swift_destroy_boxed_opaque_existential_0Tm(*(void *)(v0 + 272));
    swift_task_dealloc();
    swift_task_dealloc();
    char v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  else
  {
    unint64_t v33 = *(void *)(v0 + 272);

    __swift_destroy_boxed_opaque_existential_0Tm(v33);
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v34 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v34(v29);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 320);

  __swift_destroy_boxed_opaque_existential_0Tm(*(void *)(v0 + 272));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t specialized Pseudonym.__allocating_init(service:configuration:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[45] = a1;
  v3[46] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = (uint64_t)(v3 + 16);
    uint64_t v5 = v3[35];
    swift_bridgeObjectRelease();
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?(v5 + 32, v4, &demangling cache variable for type metadata for String?);
    outlined release of String?(v4);
    uint64_t v6 = specialized Pseudonym.__allocating_init(service:configuration:);
  }
  else
  {
    uint64_t v6 = specialized Pseudonym.__allocating_init(service:configuration:);
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t specialized static Pseudonym.reusable(for:configuration:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 160) = a1;
  *(void *)(v2 + 168) = a2;
  return _swift_task_switch(specialized static Pseudonym.reusable(for:configuration:), 0, 0);
}

uint64_t specialized static Pseudonym.reusable(for:configuration:)()
{
  uint64_t v30 = v0;
  uint64_t v1 = (uint64_t *)(v0 + 120);
  if (one-time initialization token for provider != -1) {
    swift_once();
  }
  (*(void (**)(void, void))(*(void *)static Pseudonym.provider + 160))(*(void *)(v0 + 160), *(void *)(v0 + 168));
  uint64_t v2 = *v1;
  if (*v1)
  {
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v3 = *(_OWORD **)(v0 + 168);
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.group);
    *(_OWORD *)(v0 + 72) = *v3;
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)(v3 + 2), v0 + 88, &demangling cache variable for type metadata for String?);
    swift_retain();
    outlined retain of String(v0 + 72);
    outlined retain of String(v0 + 88);
    swift_retain();
    outlined retain of String(v0 + 72);
    outlined retain of String(v0 + 88);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      swift_retain();
      os_log_t log = v5;
      uint64_t v8 = Pseudonym.description.getter();
      os_log_type_t type = v6;
      unint64_t v10 = v9;
      swift_release();
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v7 + 12) = 2080;
      outlined retain of String(v0 + 72);
      outlined retain of String(v0 + 88);
      uint64_t v11 = Pseudonym.Configuration.description.getter();
      unint64_t v13 = v12;
      outlined release of String?(v0 + 72);
      outlined release of String?(v0 + 88);
      *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of String?(v0 + 72);
      outlined release of String?(v0 + 88);
      outlined release of String?(v0 + 72);
      outlined release of String?(v0 + 88);
      uint64_t v5 = log;
      _os_log_impl((void *)&_mh_execute_header, log, type, "Found reusable pseudonym: %s for configuration: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      outlined release of String?(v0 + 72);
      outlined release of String?(v0 + 88);
      outlined release of String?(v0 + 72);
      outlined release of String?(v0 + 88);
    }

    uint64_t v25 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v25(v2);
  }
  else
  {
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v14 = *(_OWORD **)(v0 + 168);
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.group);
    *(_OWORD *)(v0 + 104) = *v14;
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)(v14 + 2), v0 + 56, &demangling cache variable for type metadata for String?);
    outlined retain of String(v0 + 104);
    outlined retain of String(v0 + 56);
    outlined retain of String(v0 + 104);
    outlined retain of String(v0 + 56);
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      outlined retain of String(v0 + 104);
      outlined retain of String(v0 + 56);
      uint64_t v19 = Pseudonym.Configuration.description.getter();
      unint64_t v21 = v20;
      outlined release of String?(v0 + 104);
      outlined release of String?(v0 + 56);
      *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of String?(v0 + 104);
      outlined release of String?(v0 + 56);
      outlined release of String?(v0 + 104);
      outlined release of String?(v0 + 56);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No pseudonym available for reuse for configuration: %s - Creating new one", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      outlined release of String?(v0 + 104);
      outlined release of String?(v0 + 56);
      outlined release of String?(v0 + 104);
      outlined release of String?(v0 + 56);
    }

    outlined init with copy of PseudonymProtocol(*(void *)(v0 + 160), v0 + 16);
    outlined retain of String(v0 + 104);
    outlined retain of String(v0 + 56);
    uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Pseudonym.__allocating_init(service:configuration:)
                                                   + async function pointer to specialized Pseudonym.__allocating_init(service:configuration:));
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v22;
    *uint64_t v22 = v0;
    v22[1] = specialized static Pseudonym.reusable(for:configuration:);
    uint64_t v23 = *(void *)(v0 + 168);
    return v28(v0 + 16, v23);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized static Pseudonym.reusable(for:configuration:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(specialized static Pseudonym.reusable(for:configuration:), 0, 0);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t specialized static Pseudonym.existing(for:configuration:)(uint64_t a1, long long *a2)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for provider != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, long long *))(*(void *)static Pseudonym.provider + 160))(v35, a1, a2);
  if (v2) {
    return v3;
  }
  uint64_t v3 = v35[0];
  if (v35[0])
  {
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v6, (uint64_t)static Log.group);
    long long v39 = *a2;
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)(a2 + 2), (uint64_t)v38, &demangling cache variable for type metadata for String?);
    swift_retain();
    outlined retain of String((uint64_t)&v39);
    outlined retain of String((uint64_t)v38);
    swift_retain();
    outlined retain of String((uint64_t)&v39);
    outlined retain of String((uint64_t)v38);
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    int v12 = v11;
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v35[0] = v33;
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_retain();
      LODWORD(v32) = v12;
      uint64_t v14 = Pseudonym.description.getter();
      unint64_t v16 = v15;
      swift_release();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2080;
      outlined retain of String((uint64_t)&v39);
      outlined retain of String((uint64_t)v38);
      uint64_t v17 = Pseudonym.Configuration.description.getter();
      unint64_t v19 = v18;
      outlined release of String?((uint64_t)&v39);
      outlined release of String?((uint64_t)v38);
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of String?((uint64_t)&v39);
      outlined release of String?((uint64_t)v38);
      outlined release of String?((uint64_t)&v39);
      outlined release of String?((uint64_t)v38);
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v32, "Found reusable pseudonym: %s for configuration: %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      outlined release of String?((uint64_t)&v39);
      outlined release of String?((uint64_t)v38);
      outlined release of String?((uint64_t)&v39);
      outlined release of String?((uint64_t)v38);
    }

    return v3;
  }
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v20 = __swift_project_value_buffer(v6, (uint64_t)static Log.group);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v20, v6);
  outlined init with copy of PseudonymProtocol(a1, (uint64_t)v35);
  long long v41 = *a2;
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)(a2 + 2), (uint64_t)v40, &demangling cache variable for type metadata for String?);
  outlined retain of String((uint64_t)&v41);
  outlined retain of String((uint64_t)v40);
  outlined retain of String((uint64_t)&v41);
  outlined retain of String((uint64_t)v40);
  unint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v21, v22))
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v35);
    outlined release of String?((uint64_t)&v41);
    outlined release of String?((uint64_t)v40);
    outlined release of String?((uint64_t)&v41);
    outlined release of String?((uint64_t)v40);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    goto LABEL_18;
  }
  uint64_t v33 = v7;
  uint64_t v3 = swift_slowAlloc();
  uint64_t v32 = swift_slowAlloc();
  uint64_t v42 = v32;
  *(_DWORD *)uint64_t v3 = 136315394;
  uint64_t v24 = v36;
  uint64_t v23 = v37;
  __swift_project_boxed_opaque_existential_1(v35, v36);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v24, v23);
  if (v26)
  {
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v35);
    *(_WORD *)(v3 + 12) = 2080;
    outlined retain of String((uint64_t)&v41);
    outlined retain of String((uint64_t)v40);
    uint64_t v27 = Pseudonym.Configuration.description.getter();
    unint64_t v29 = v28;
    outlined release of String?((uint64_t)&v41);
    outlined release of String?((uint64_t)v40);
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of String?((uint64_t)&v41);
    outlined release of String?((uint64_t)v40);
    outlined release of String?((uint64_t)&v41);
    outlined release of String?((uint64_t)v40);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "No existing pseudonym for service %s configuration: %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v6);
LABEL_18:
    lazy protocol witness table accessor for type Pseudonym.Errors and conformance Pseudonym.Errors();
    swift_allocError();
    unsigned char *v31 = 2;
    swift_willThrow();
    return v3;
  }
  outlined release of String?((uint64_t)&v41);
  outlined release of String?((uint64_t)v40);
  outlined release of String?((uint64_t)&v41);
  uint64_t result = outlined release of String?((uint64_t)v40);
  __break(1u);
  return result;
}

uint64_t sub_10003F8AC()
{
  swift_weakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003F8E4()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 96, 7);
}

uint64_t partial apply for closure #1 in Pseudonym.init(service:pseudonym:configuration:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)(v1 + 5);
  uint64_t v8 = v1[11];
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *unint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in Pseudonym.init(service:pseudonym:configuration:)(a1, v4, v5, v6, v7, v8);
}

uint64_t outlined retain of String(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003FA34()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 104, 7);
}

uint64_t partial apply for closure #1 in Pseudonym.refreshPseudonym()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (uint64_t)(v1 + 6);
  uint64_t v9 = v1[12];
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *unint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  return closure #1 in Pseudonym.refreshPseudonym()(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10003FB6C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 88);
  return _swift_deallocObject(v0, 136, 7);
}

uint64_t partial apply for closure #1 in Pseudonym.deinit(uint64_t a1)
{
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v10 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 48);
  char v6 = *(unsigned char *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in Pseudonym.deinit(a1, v12, v11, v10, v4, v5, v6, v7);
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.push(id:serviceIdentifier:reuseIdentifier:)(uint64_t *a1)
{
  return closure #1 in UserDefaultsPseudonymStorage.push(id:serviceIdentifier:reuseIdentifier:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:)()
{
  return partial apply for closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:)();
}

{
  uint64_t v0;

  return closure #1 in UserDefaultsPseudonymStorage.withStorage(key:serviceIdentifier:reuseIdentifier:block:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void (**)(void *))(v0 + 72));
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.pop(serviceIdentifier:reuseIdentifier:)(uint64_t *a1)
{
  return closure #1 in UserDefaultsPseudonymStorage.pop(serviceIdentifier:reuseIdentifier:)(a1, *(Swift::Int **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.register(id:serviceIdentifier:reuseIdentifier:)(uint64_t *a1)
{
  return closure #1 in UserDefaultsPseudonymStorage.register(id:serviceIdentifier:reuseIdentifier:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.markUsed(id:serviceIdentifier:reuseIdentifier:)(char **a1)
{
  return closure #1 in UserDefaultsPseudonymStorage.markUsed(id:serviceIdentifier:reuseIdentifier:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.setPendingRevoke(id:serviceIdentifier:reuseIdentifier:)(uint64_t *a1)
{
  return closure #1 in UserDefaultsPseudonymStorage.setPendingRevoke(id:serviceIdentifier:reuseIdentifier:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.removePendingRevoke(id:serviceIdentifier:reuseIdentifier:)(char **a1)
{
  return closure #1 in UserDefaultsPseudonymStorage.removePendingRevoke(id:serviceIdentifier:reuseIdentifier:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type Pseudonym.Errors and conformance Pseudonym.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type Pseudonym.Errors and conformance Pseudonym.Errors;
  if (!lazy protocol witness table cache variable for type Pseudonym.Errors and conformance Pseudonym.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Pseudonym.Errors and conformance Pseudonym.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Pseudonym.Errors and conformance Pseudonym.Errors;
  if (!lazy protocol witness table cache variable for type Pseudonym.Errors and conformance Pseudonym.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Pseudonym.Errors and conformance Pseudonym.Errors);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Pseudonym(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type Pseudonym and conformance Pseudonym(&lazy protocol witness table cache variable for type Pseudonym and conformance Pseudonym, a2, (void (*)(uint64_t))type metadata accessor for Pseudonym);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for Pseudonym()
{
  return self;
}

uint64_t getEnumTagSinglePayload for Pseudonym.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Pseudonym.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003FF5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Pseudonym.Errors()
{
  return &type metadata for Pseudonym.Errors;
}

uint64_t destroy for Pseudonym.Configuration()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Pseudonym.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Pseudonym.Configuration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Pseudonym.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Pseudonym.Configuration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Pseudonym.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Pseudonym.Configuration()
{
  return &type metadata for Pseudonym.Configuration;
}

uint64_t type metadata accessor for UserDefaultsPseudonymStorage()
{
  return self;
}

uint64_t type metadata instantiation function for PseudonymProvider()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t type metadata completion function for PseudonymProvider()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for PseudonymProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in UserDefaultsPseudonymStorage.getPendingRevoke(serviceIdentifier:reuseIdentifier:)(void *a1)
{
  **(void **)(v1 + 16) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000402C8()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 80);
  return _swift_deallocObject(v0, 128, 7);
}

uint64_t partial apply for closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:)()
{
  long long v8 = *(_OWORD *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  *(void *)(v5 + 64) = v0 + 80;
  *(void *)(v5 + 72) = v4;
  *(void *)(v5 + 48) = v2;
  *(void *)(v5 + 56) = v3;
  *(_OWORD *)(v5 + 16) = v6;
  *(_OWORD *)(v5 + 32) = v8;
  return _swift_task_switch(closure #1 in PseudonymProvider.cleanupIfNeeded(for:reuseIdentifier:), 0, 0);
}

uint64_t specialized $defer #1 () in closure #1 in Pseudonym.deinit(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  if (a2)
  {
    uint64_t v9 = result;
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.group);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    uint64_t v18 = a3;
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, a2, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Marking reusable pseudonym %s as revoked with reuse identifier %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    if (one-time initialization token for provider != -1) {
      swift_once();
    }
    uint64_t v14 = static Pseudonym.provider;
    uint64_t v15 = a5[3];
    uint64_t v16 = a5[4];
    __swift_project_boxed_opaque_existential_1(a5, v15);
    __n128 result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
    if (v17)
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)v14 + 184))(v18, a4, result, v17, v9, a2);
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 2);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  while (1)
  {
    uint64_t result = *(void *)&v3[v7 + 32];
    if (result == a2 && *(void *)&v3[v7 + 40] == a3) {
      break;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      break;
    }
    ++v8;
    v7 += 16;
    if (v4 == v8) {
      return v4;
    }
  }
  unint64_t v11 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v11 == v4) {
      return v8;
    }
    while (1)
    {
      unint64_t v13 = *((void *)v3 + 2);
      if (v11 >= v13) {
        break;
      }
      uint64_t v14 = &v3[v7];
      uint64_t result = *(void *)&v3[v7 + 48];
      if (result != a2 || *(void *)&v3[v7 + 56] != a3)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (v11 != v8)
          {
            if (v8 >= v13) {
              goto LABEL_31;
            }
            uint64_t v16 = &v3[16 * v8 + 32];
            uint64_t v17 = *((void *)v16 + 1);
            uint64_t v22 = *(void *)v16;
            uint64_t v18 = *((void *)v14 + 6);
            uint64_t v19 = *((void *)v14 + 7);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
            }
            uint64_t v20 = &v3[16 * v8];
            *((void *)v20 + 4) = v18;
            *((void *)v20 + 5) = v19;
            uint64_t result = swift_bridgeObjectRelease();
            if (v11 >= *((void *)v3 + 2)) {
              goto LABEL_32;
            }
            unint64_t v21 = &v3[v7];
            *((void *)v21 + 6) = v22;
            *((void *)v21 + 7) = v17;
            uint64_t result = swift_bridgeObjectRelease();
            *a1 = v3;
          }
          if (__OFADD__(v8++, 1)) {
            goto LABEL_30;
          }
        }
      }
      ++v11;
      v7 += 16;
      if (v11 == *((void *)v3 + 2)) {
        return v8;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type Pseudonym and conformance Pseudonym(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t NearbyInvitationScanner.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t NearbyInvitationScanner.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*NearbyInvitationScanner.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(v1 + 40);
  v3[3] = Strong;
  v3[4] = v5;
  return NearbyInvitationScanner.delegate.modify;
}

void NearbyInvitationScanner.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 40) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t NearbyInvitationScanner.browser.getter()
{
  return swift_retain();
}

uint64_t NearbyInvitationScanner.browser.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*NearbyInvitationScanner.browser.modify())()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t NearbyInvitationScanner.scannerID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t NearbyInvitationScanner.connections.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100040DAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_100040DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t NearbyInvitationScanner.connections.setter()
{
  return static Published.subscript.setter();
}

void (*NearbyInvitationScanner.connections.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return NearbyInvitationAdvertiser.connections.modify;
}

uint64_t NearbyInvitationScanner.$connections.getter()
{
  return swift_endAccess();
}

uint64_t NearbyInvitationScanner.$connections.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*NearbyInvitationScanner.$connections.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner__connections;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return NearbyInvitationAdvertiser.$connections.modify;
}

void *NearbyInvitationScanner.__allocating_init(scannerID:configuration:delegate:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = specialized NearbyInvitationScanner.init(scannerID:configuration:delegate:)(a1, a2, a3, v8, ObjectType, a4);
  swift_unknownObjectRelease();
  return v10;
}

void *NearbyInvitationScanner.init(scannerID:configuration:delegate:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = specialized NearbyInvitationScanner.init(scannerID:configuration:delegate:)(a1, a2, a3, v4, ObjectType, a4);
  swift_unknownObjectRelease();
  return v10;
}

Swift::Void __swiftcall NearbyInvitationScanner.scan()()
{
  uint64_t v1 = v0;
  uint64_t v38 = type metadata accessor for NWBrowser.Descriptor();
  uint64_t v2 = *(void *)(v38 - 8);
  uint64_t v3 = __chkstk_darwin(v38);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (uint64_t *)((char *)&v33 - v6);
  uint64_t v8 = type metadata accessor for NWBrowser.Invitation.Scope();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  os_log_type_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v33 - v13;
  type metadata accessor for NWParameters();
  specialized static NearbyInvitationAdvertiser.createParameters(isBrowsing:)(1);
  uint64_t v15 = NWParameters.__allocating_init(_:)();
  unsigned int v16 = NearbyInvitationParameters.browserType.getter();
  if (v16 >= 3)
  {
    LODWORD(v40) = v16;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, *(unsigned int *)*(&off_1000F71D8 + (int)v16), v8);
    uint64_t v35 = v9;
    uint64_t v36 = v8;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v12, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, invitation: NWBrowser.Invitation));
    uint64_t *v7 = NearbyInvitationParameters.serviceName.getter();
    v7[1] = v17;
    uint64_t v34 = v14;
    static NWBrowser.Invitation.wrangler(scope:)();
    uint64_t v18 = v38;
    (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))(v7, enum case for NWBrowser.Descriptor.applicationServiceWithInvitation(_:), v38);
    uint64_t v37 = v2;
    (*(void (**)(char *, uint64_t *, uint64_t))(v2 + 16))(v5, v7, v18);
    type metadata accessor for NWBrowser();
    swift_allocObject();
    swift_retain();
    uint64_t v33 = v15;
    uint64_t v19 = NWBrowser.init(for:using:)();
    uint64_t v20 = *(void (**)(uint64_t))(*(void *)v1 + 160);
    uint64_t v21 = swift_retain();
    v20(v21);
    uint64_t v22 = swift_allocObject();
    swift_weakInit();
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v22;
    *(void *)(v23 + 24) = v19;
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?((uint64_t)partial apply for closure #1 in NearbyInvitationScanner.scan());
    NWBrowser.stateUpdateHandler.setter();
    swift_release();
    swift_release();
    uint64_t v24 = swift_allocObject();
    swift_weakInit();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v24;
    *(void *)(v25 + 24) = v19;
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?((uint64_t)partial apply for closure #2 in NearbyInvitationScanner.scan());
    NWBrowser.browseResultsChangedHandler.setter();
    swift_release();
    swift_release();
    NWBrowser.start(queue:)();
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.client);
    swift_retain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v39 = v19;
      uint64_t v40 = v30;
      *(_DWORD *)unint64_t v29 = 136315138;
      swift_retain();
      uint64_t v31 = String.init<A>(reflecting:)();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "*** NearbyInvitationScanner new browser, %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {

      swift_release_n();
    }
    swift_release();
    (*(void (**)(uint64_t *, uint64_t))(v37 + 8))(v7, v38);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
  }
}

uint64_t closure #1 in NearbyInvitationScanner.scan()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWBrowser.State?);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v63 = (uint64_t)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  os_log_type_t v64 = (uint8_t *)&v62 - v7;
  uint64_t v8 = type metadata accessor for NWError();
  uint64_t v68 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v62 - v12;
  uint64_t v14 = type metadata accessor for NWBrowser.State();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (uint8_t *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v62 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  id v65 = (uint8_t **)((char *)&v62 - v23);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v62 - v24;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    os_log_type_t v62 = v18;
    uint64_t v66 = result;
    uint64_t v27 = a1;
    uint64_t v28 = a1;
    unint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    v29(v25, v28, v14);
    int v30 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v25, v14);
    if (v30 == enum case for NWBrowser.State.failed(_:))
    {
      (*(void (**)(char *, uint64_t))(v15 + 96))(v25, v14);
      uint64_t v31 = v68;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v13, v25, v8);
      if (one-time initialization token for client != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Log.client);
      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
      v33(v11, v13, v8);
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        id v65 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 138412290;
        os_log_type_t v64 = v36 + 4;
        _s14NearbySessions21InvitationRequestDataVACSEAAWlTm_0(&lazy protocol witness table cache variable for type NWError and conformance NWError, (void (*)(uint64_t))&type metadata accessor for NWError);
        swift_allocError();
        v33(v37, v11, v8);
        uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v70 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v65 = v38;
        uint64_t v39 = *(void (**)(char *, uint64_t))(v68 + 8);
        v39(v11, v8);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "*** NearbyInvitationScanner failed with error = %@", v36, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v39 = *(void (**)(char *, uint64_t))(v31 + 8);
        v39(v11, v8);
      }

      NWBrowser.cancel()();
      if ((*(uint64_t (**)(void))(*(void *)v66 + 128))())
      {
        uint64_t v45 = v44;
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 24))(v13, ObjectType, v45);
        swift_unknownObjectRelease();
        swift_release();
        return ((uint64_t (*)(char *, uint64_t))v39)(v13, v8);
      }
      else
      {
        v39(v13, v8);
        return swift_release();
      }
    }
    else if (v30 == enum case for NWBrowser.State.ready(_:))
    {
      if (one-time initialization token for client != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Log.client);
      long long v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "*** NearbyInvitationScanner ready and posting results", v43, 2u);
        swift_slowDealloc();
      }

      return swift_release();
    }
    else
    {
      if (one-time initialization token for client != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Log.client);
      double v48 = v65;
      uint64_t v49 = v29;
      v29((char *)v65, v27, v14);
      uint64_t v50 = Logger.logObject.getter();
      int v51 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v50, (os_log_type_t)v51))
      {
        LODWORD(v68) = v51;
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        uint64_t v70 = v67;
        *(_DWORD *)uint64_t v52 = 136315138;
        id v53 = v48;
        uint64_t v54 = (uint64_t)v64;
        v49((char *)v64, (uint64_t)v53, v14);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v54, 0, 1, v14);
        uint64_t v55 = v54;
        uint64_t v56 = v63;
        outlined init with copy of (String, Any)(v55, v63, &demangling cache variable for type metadata for NWBrowser.State?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v56, 1, v14) == 1)
        {
          unint64_t v57 = 0xE300000000000000;
          uint64_t v58 = 7104878;
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v21, v56, v14);
          v49((char *)v62, (uint64_t)v21, v14);
          uint64_t v58 = String.init<A>(reflecting:)();
          unint64_t v57 = v60;
          (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
        }
        outlined destroy of Any?((uint64_t)v64, &demangling cache variable for type metadata for NWBrowser.State?);
        uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v57, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v61 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
        v61((char *)v65, v14);
        _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v68, "*** NearbyInvitationScanner state update: %s", v52, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_release();
        return v61(v25, v14);
      }
      else
      {
        swift_release();
        id v59 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
        v59((char *)v48, v14);

        return v59(v25, v14);
      }
    }
  }
  return result;
}

uint64_t closure #2 in NearbyInvitationScanner.scan()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.client);
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v16 = a2;
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      type metadata accessor for NWBrowser.Result();
      _s14NearbySessions21InvitationRequestDataVACSEAAWlTm_0(&lazy protocol witness table cache variable for type NWBrowser.Result and conformance NWBrowser.Result, (void (*)(uint64_t))&type metadata accessor for NWBrowser.Result);
      swift_bridgeObjectRetain();
      uint64_t v12 = Set.description.getter();
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      uint64_t v15 = v12;
      a2 = v16;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "*** NearbyInvitationScanner results: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_retain();
    swift_retain();
    specialized Sequence.forEach(_:)(a2, v7, a4);
    swift_release_n();
    return swift_release();
  }
  return result;
}

void closure #1 in closure #2 in NearbyInvitationScanner.scan()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v137 = a1;
  uint64_t v139 = a2;
  uint64_t v121 = *a3;
  uint64_t v4 = type metadata accessor for NWEndpoint();
  uint64_t v134 = *(void *)(v4 - 8);
  uint64_t v135 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v133 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  v132 = (char *)&v119 - v8;
  __chkstk_darwin(v7);
  unint64_t v131 = (unint64_t)&v119 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v129 = *(void *)(v10 - 8);
  uint64_t v130 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v128 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v138 = (char *)&v119 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWBrowser.Result?);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v120 = (uint64_t)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  os_log_t v125 = (os_log_t)((char *)&v119 - v18);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v124 = (uint64_t)&v119 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v119 - v21;
  uint64_t v23 = type metadata accessor for NWBrowser.Result();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  v126 = (void (*)(char *, char *, uint64_t))((char *)&v119 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = __chkstk_darwin(v25);
  v127 = (char *)&v119 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v122 = (char *)&v119 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v123 = (char *)&v119 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  os_log_type_t v35 = (char *)&v119 - v34;
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v119 - v36;
  uint64_t v38 = type metadata accessor for NWBrowser.Result.Change();
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  long long v41 = (char *)&v119 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v41, v137, v38);
  int v42 = (*(uint64_t (**)(char *, uint64_t))(v39 + 88))(v41, v38);
  uint64_t v136 = v24;
  uint64_t v137 = v23;
  if (v42 == enum case for NWBrowser.Result.Change.added(_:))
  {
    (*(void (**)(char *, uint64_t))(v39 + 96))(v41, v38);
    v126 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v126(v37, v41, v23);
    uint64_t v43 = v23;
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Log.client);
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
    v127 = v37;
    v45(v35, v37, v23);
    uint64_t v46 = Logger.logObject.getter();
    int v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, (os_log_type_t)v47))
    {
      LODWORD(v121) = v47;
      os_log_t v125 = v46;
      double v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v120 = swift_slowAlloc();
      uint64_t v141 = v120;
      *(_DWORD *)double v48 = 136315138;
      v45(v22, v35, v43);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v22, 0, 1, v43);
      uint64_t v49 = v124;
      outlined init with copy of (String, Any)((uint64_t)v22, v124, &demangling cache variable for type metadata for NWBrowser.Result?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v49, 1, v43) == 1)
      {
        uint64_t v50 = 7104878;
        unint64_t v51 = 0xE300000000000000;
      }
      else
      {
        uint64_t v75 = v49;
        os_log_type_t v76 = v123;
        v126(v123, (char *)v75, v43);
        v45(v122, v76, v43);
        uint64_t v50 = String.init<A>(reflecting:)();
        unint64_t v51 = v77;
        (*(void (**)(char *, uint64_t))(v24 + 8))(v76, v43);
      }
      outlined destroy of Any?((uint64_t)v22, &demangling cache variable for type metadata for NWBrowser.Result?);
      uint64_t v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v126 = *(void (**)(char *, char *, uint64_t))(v24 + 8);
      ((void (*)(char *, uint64_t))v126)(v35, v43);
      os_log_t v78 = v125;
      _os_log_impl((void *)&_mh_execute_header, v125, (os_log_type_t)v121, "*** NearbyInvitationScanner added result, %s", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v126 = *(void (**)(char *, char *, uint64_t))(v24 + 8);
      ((void (*)(char *, uint64_t))v126)(v35, v43);
    }
    uint64_t v80 = v129;
    uint64_t v79 = v130;
    (*(void (**)(char *, uint64_t, uint64_t))(v129 + 16))(v138, v139 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID, v130);
    v81 = (char *)v131;
    unint64_t v82 = v127;
    NWBrowser.Result.endpoint.getter();
    uint64_t v83 = v128;
    NWEndpoint.endpointUUID()();
    uint64_t v84 = v135;
    double v85 = *(void (**)(char *, uint64_t))(v134 + 8);
    v85(v81, v135);
    uint64_t v134 = UUID.uuidString.getter();
    os_log_t v125 = v86;
    (*(void (**)(char *, uint64_t))(v80 + 8))(v83, v79);
    NWBrowser.Result.endpoint.getter();
    uint64_t v87 = NWEndpoint.contactID.getter();
    uint64_t v129 = v88;
    uint64_t v130 = v87;
    v85(v81, v84);
    uint64_t v89 = v132;
    NWBrowser.Result.endpoint.getter();
    unsigned int v90 = NWEndpoint.deviceColor.getter();
    v85(v89, v84);
    unint64_t v131 = v90;
    NWBrowser.Result.endpoint.getter();
    NWEndpoint.deviceModel.getter();
    v85(v89, v84);
    uint64_t v91 = v133;
    NWBrowser.Result.endpoint.getter();
    NWEndpoint.deviceID.getter();
    v85(v91, v84);
    id v92 = objc_allocWithZone((Class)type metadata accessor for NearbyAdvertisement());
    unint64_t v93 = (void *)NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)();
    if ((*(uint64_t (**)(void))(*(void *)v139 + 128))())
    {
      uint64_t v95 = v94;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, char *, uint64_t, uint64_t))(v95 + 8))(v93, v82, ObjectType, v95);
      swift_unknownObjectRelease();

      unint64_t v97 = v82;
LABEL_30:
      ((void (*)(char *, uint64_t))v126)(v97, v137);
      return;
    }
    v98 = v82;
LABEL_32:
    ((void (*)(char *, uint64_t))v126)(v98, v137);

    return;
  }
  if (v42 == enum case for NWBrowser.Result.Change.removed(_:))
  {
    (*(void (**)(char *, uint64_t))(v39 + 96))(v41, v38);
    uint64_t v52 = v136;
    id v53 = *(void (**)(char *, char *, uint64_t))(v136 + 32);
    uint64_t v54 = v127;
    uint64_t v55 = v41;
    uint64_t v56 = v137;
    v53(v127, v55, v137);
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Log.client);
    uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
    id v59 = (char *)v126;
    v58((char *)v126, v54, v56);
    unint64_t v60 = Logger.logObject.getter();
    int v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, (os_log_type_t)v61))
    {
      LODWORD(v124) = v61;
      os_log_type_t v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v121 = swift_slowAlloc();
      uint64_t v141 = v121;
      *(_DWORD *)os_log_type_t v62 = 136315138;
      uint64_t v63 = v59;
      os_log_t v64 = v125;
      v58((char *)v125, v63, v56);
      (*(void (**)(os_log_t, void, uint64_t, uint64_t))(v52 + 56))(v64, 0, 1, v56);
      uint64_t v65 = (uint64_t)v64;
      uint64_t v66 = v120;
      outlined init with copy of (String, Any)(v65, v120, &demangling cache variable for type metadata for NWBrowser.Result?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v66, 1, v56) == 1)
      {
        uint64_t v67 = 7104878;
        unint64_t v68 = 0xE300000000000000;
      }
      else
      {
        uint64_t v99 = v66;
        uint64_t v100 = v123;
        v53(v123, (char *)v99, v56);
        v58(v122, v100, v56);
        uint64_t v67 = String.init<A>(reflecting:)();
        unint64_t v68 = v101;
        (*(void (**)(char *, uint64_t))(v52 + 8))(v100, v56);
      }
      outlined destroy of Any?((uint64_t)v125, &demangling cache variable for type metadata for NWBrowser.Result?);
      uint64_t v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v102 = v126;
      v126 = *(void (**)(char *, char *, uint64_t))(v52 + 8);
      ((void (*)(void (*)(char *, char *, uint64_t), uint64_t))v126)(v102, v56);
      _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v124, "*** NearbyInvitationScanner removed result, %s", v62, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v126 = *(void (**)(char *, char *, uint64_t))(v52 + 8);
      ((void (*)(char *, uint64_t))v126)(v59, v56);
    }

    uint64_t v104 = v129;
    uint64_t v103 = v130;
    (*(void (**)(char *, uint64_t, uint64_t))(v129 + 16))(v138, v139 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID, v130);
    os_log_type_t v105 = (char *)v131;
    NWBrowser.Result.endpoint.getter();
    uint64_t v106 = v128;
    NWEndpoint.endpointUUID()();
    uint64_t v107 = v135;
    unint64_t v108 = *(void (**)(char *, uint64_t))(v134 + 8);
    v108(v105, v135);
    uint64_t v134 = UUID.uuidString.getter();
    os_log_t v125 = v109;
    (*(void (**)(char *, uint64_t))(v104 + 8))(v106, v103);
    NWBrowser.Result.endpoint.getter();
    uint64_t v110 = NWEndpoint.contactID.getter();
    uint64_t v129 = v111;
    uint64_t v130 = v110;
    v108(v105, v107);
    Class v112 = v132;
    NWBrowser.Result.endpoint.getter();
    unsigned int v113 = NWEndpoint.deviceColor.getter();
    v108(v112, v107);
    unint64_t v131 = v113;
    NWBrowser.Result.endpoint.getter();
    NWEndpoint.deviceModel.getter();
    v108(v112, v107);
    unint64_t v114 = v133;
    NWBrowser.Result.endpoint.getter();
    NWEndpoint.deviceID.getter();
    v108(v114, v107);
    id v115 = objc_allocWithZone((Class)type metadata accessor for NearbyAdvertisement());
    unint64_t v93 = (void *)NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)();
    if ((*(uint64_t (**)(void))(*(void *)v139 + 128))())
    {
      uint64_t v117 = v116;
      uint64_t v118 = swift_getObjectType();
      (*(void (**)(void *, uint64_t, uint64_t))(v117 + 16))(v93, v118, v117);
      swift_unknownObjectRelease();

      unint64_t v97 = v127;
      goto LABEL_30;
    }
    v98 = v127;
    goto LABEL_32;
  }
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v69 = type metadata accessor for Logger();
  __swift_project_value_buffer(v69, (uint64_t)static Log.client);
  swift_retain_n();
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v70, v71))
  {
    os_log_type_t v72 = (uint8_t *)swift_slowAlloc();
    uint64_t v139 = swift_slowAlloc();
    uint64_t v140 = (uint64_t)a3;
    uint64_t v141 = v139;
    *(_DWORD *)os_log_type_t v72 = 136315138;
    uint64_t v138 = (char *)(v72 + 4);
    swift_retain();
    uint64_t v73 = String.init<A>(reflecting:)();
    uint64_t v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, &v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "*** NearbyInvitationScanner new browser, %s", v72, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
}

void NearbyInvitationScanner.connect(to:)(NSObject *a1)
{
  uint64_t v55 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v45 = (uint64_t)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v52 = (uint64_t)&v42 - v4;
  uint64_t v5 = type metadata accessor for NWEndpoint();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v44 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v42 - v10;
  __chkstk_darwin(v9);
  id v53 = (char *)&v42 - v11;
  type metadata accessor for NWParameters();
  specialized static NearbyInvitationAdvertiser.createParameters(isBrowsing:)(0);
  uint64_t v12 = NWParameters.__allocating_init(_:)();
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  type metadata accessor for NWProtocolFramer.Options();
  swift_allocObject();
  swift_retain();
  uint64_t v13 = NWProtocolFramer.Options.init(definition:)();
  NWParameters.defaultProtocolStack.getter();
  swift_retain();
  uint64_t v15 = (void (*)(uint64_t *, void))dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.modify();
  uint64_t v16 = *v14;
  if (!((unint64_t)*v14 >> 62)) {
    goto LABEL_4;
  }
  uint64_t v41 = v16 & 0xFFFFFFFFFFFFFF8;
  if (v16 < 0) {
    uint64_t v41 = *v14;
  }
  uint64_t v50 = v41;
  swift_bridgeObjectRetain();
  uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v50 < 0)
  {
    __break(1u);
  }
  else
  {
LABEL_4:
    uint64_t v48 = v13;
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v13);
    v15(v57, 0);
    swift_release();
    uint64_t v17 = v6;
    uint64_t v18 = *(void (**)(char *, NSObject *, uint64_t))(v6 + 16);
    uint64_t v19 = v53;
    uint64_t v20 = v55;
    v18(v53, v55, v5);
    type metadata accessor for NWConnection();
    swift_allocObject();
    swift_retain();
    uint64_t v49 = v12;
    uint64_t v46 = NWConnection.init(to:using:)();
    uint64_t v21 = swift_allocObject();
    swift_weakInit();
    int v47 = (void (*)(uint64_t, char *, uint64_t))v18;
    v18(v19, v20, v5);
    unint64_t v22 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v21;
    uint64_t v50 = v17;
    uint64_t v24 = v19;
    uint64_t v25 = v46;
    uint64_t v43 = *(void (**)(unint64_t, char *, uint64_t))(v17 + 32);
    v43(v23 + v22, v24, v5);
    *(void *)(v23 + ((v7 + v22 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    swift_retain();
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?((uint64_t)partial apply for closure #1 in NearbyInvitationScanner.connect(to:));
    NWConnection.stateUpdateHandler.setter();
    swift_release();
    swift_release();
    NWConnection.start(queue:)();
    if (one-time initialization token for client == -1) {
      goto LABEL_5;
    }
  }
  swift_once();
LABEL_5:
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Log.client);
  uint64_t v27 = v54;
  uint64_t v28 = v47;
  v47((uint64_t)v54, (char *)v55, v5);
  uint64_t v29 = Logger.logObject.getter();
  int v30 = static os_log_type_t.default.getter();
  uint64_t v55 = v29;
  if (os_log_type_enabled(v29, (os_log_type_t)v30))
  {
    LODWORD(v51) = v30;
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    v57[0] = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v33 = v52;
    v28(v52, v27, v5);
    uint64_t v34 = v50;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(v33, 0, 1, v5);
    uint64_t v35 = v45;
    outlined init with copy of (String, Any)(v33, v45, &demangling cache variable for type metadata for NWEndpoint?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v35, 1, v5) == 1)
    {
      unint64_t v36 = 0xE300000000000000;
      uint64_t v37 = 7104878;
    }
    else
    {
      uint64_t v42 = v32;
      uint64_t v38 = v53;
      v43((unint64_t)v53, (char *)v35, v5);
      v28((uint64_t)v44, v38, v5);
      uint64_t v37 = String.init<A>(reflecting:)();
      unint64_t v36 = v39;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v38, v5);
    }
    outlined destroy of Any?(v52, &demangling cache variable for type metadata for NWEndpoint?);
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v36, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v54, v5);
    uint64_t v40 = v55;
    _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v51, "NearbyInvitationScanner Starting connection request to endpoint %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v27, v5);
  }
}

uint64_t closure #1 in NearbyInvitationScanner.connect(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v80 = a4;
  uint64_t v81 = a1;
  uint64_t v84 = type metadata accessor for NWError();
  uint64_t v78 = *(void *)(v84 - 8);
  uint64_t v5 = __chkstk_darwin(v84);
  uint64_t v7 = (char *)v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v79 = (char *)v74 - v8;
  uint64_t v9 = type metadata accessor for NWConnection.State();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v82 = (uint8_t *)v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NWEndpoint();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v83 = result;
  if (!result) {
    return result;
  }
  uint64_t v76 = v10;
  uint64_t v77 = v9;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v75 = v7;
  if (v21)
  {
    unint64_t v22 = (uint8_t *)swift_slowAlloc();
    v86[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v22 = 136315138;
    v74[0] = v22 + 4;
    v74[1] = v18;
    uint64_t v23 = NWEndpoint.debugDescription.getter();
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "*** NearbyInvitationScanner making a connection update handler for device %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v25 = v80;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);

    uint64_t v25 = v80;
  }
  uint64_t v27 = v76;
  uint64_t v26 = v77;
  uint64_t v28 = v82;
  (*(void (**)(uint8_t *, uint64_t, uint64_t))(v76 + 16))(v82, v81, v77);
  int v29 = (*(uint64_t (**)(uint8_t *, uint64_t))(v27 + 88))(v28, v26);
  if (v29 != enum case for NWConnection.State.waiting(_:))
  {
    int v42 = v29;
    if (v29 == enum case for NWConnection.State.failed(_:))
    {
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "*** NearbyInvitationScanner state - failed: Removing connection", v45, 2u);
        swift_slowDealloc();
      }

      uint64_t v46 = *(uint64_t (**)(uint64_t *))(*(void *)v83 + 192);
      swift_retain();
      int v47 = (void (*)(uint64_t *, void))v46(v86);
      uint64_t v49 = v48;
      uint64_t v50 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v48, v25);
      swift_release();
      if (*v49 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v51 >= v50) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v51 = *(void *)((*v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v51 >= v50)
        {
LABEL_15:
          specialized Array.replaceSubrange<A>(_:with:)(v50, v51);
          v47(v86, 0);
          NWConnection.cancel()();
LABEL_16:
          swift_release();
          return (*(uint64_t (**)(uint8_t *, uint64_t))(v27 + 8))(v28, v26);
        }
      }
      __break(1u);
LABEL_45:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_33:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v47(v86, 0);
      (*(void (**)(uint64_t))(*(void *)v83 + 264))(v25);
      return swift_release();
    }
    if (v29 == enum case for NWConnection.State.setup(_:))
    {
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v54 = 0;
        uint64_t v55 = "NearbyInvitationScanner state - Setup";
LABEL_25:
        _os_log_impl((void *)&_mh_execute_header, v52, v53, v55, v54, 2u);
        swift_slowDealloc();
        goto LABEL_26;
      }
      goto LABEL_26;
    }
    if (v29 == enum case for NWConnection.State.preparing(_:))
    {
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v54 = 0;
        uint64_t v55 = "NearbyInvitationScanner state - Preparing";
        goto LABEL_25;
      }
LABEL_26:

      return swift_release();
    }
    if (v29 == enum case for NWConnection.State.ready(_:))
    {
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "*** NearbyInvitationScanner connected and going to append connections", v58, 2u);
        swift_slowDealloc();
      }

      id v59 = *(uint64_t (**)(uint64_t *))(*(void *)v83 + 192);
      swift_retain();
      int v47 = (void (*)(uint64_t *, void))v59(v86);
      int v61 = v60;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v61 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v61 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_33;
      }
      goto LABEL_45;
    }
    int v62 = enum case for NWConnection.State.cancelled(_:);
    uint64_t v63 = Logger.logObject.getter();
    if (v42 != v62)
    {
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v63, v72))
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v73 = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, v72, "NearbyInvitationScanner - case not handled", v73, 2u);
        swift_slowDealloc();
      }

      goto LABEL_16;
    }
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "*** NearbyInvitationScanner state - Cancelled", v65, 2u);
      swift_slowDealloc();
    }

    uint64_t v66 = *(uint64_t (**)(uint64_t *))(*(void *)v83 + 192);
    swift_retain();
    uint64_t v67 = (void (*)(uint64_t *, void))v66(v86);
    uint64_t v69 = v68;
    uint64_t v70 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v68, v25);
    uint64_t result = swift_release();
    if (*v69 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v71 >= v70) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v71 = *(void *)((*v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v71 >= v70)
      {
LABEL_39:
        specialized Array.replaceSubrange<A>(_:with:)(v70, v71);
        v67(v86, 0);
        NWConnection.cancel()();
        return swift_release();
      }
    }
    __break(1u);
    return result;
  }
  (*(void (**)(uint8_t *, uint64_t))(v27 + 96))(v28, v26);
  uint64_t v31 = v78;
  int v30 = v79;
  uint64_t v32 = v84;
  (*(void (**)(char *, uint8_t *, uint64_t))(v78 + 32))(v79, v28, v84);
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  uint64_t v34 = v75;
  v33(v75, v30, v32);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = (void *)swift_slowAlloc();
    unint64_t v82 = v37;
    *(_DWORD *)uint64_t v37 = 138412290;
    _s14NearbySessions21InvitationRequestDataVACSEAAWlTm_0(&lazy protocol witness table cache variable for type NWError and conformance NWError, (void (*)(uint64_t))&type metadata accessor for NWError);
    swift_allocError();
    v33(v39, v34, v84);
    uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
    v86[0] = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v38 = v40;
    uint64_t v41 = *(void (**)(char *, uint64_t))(v31 + 8);
    v41(v34, v84);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "NearbyInvitationScanner state - Waiting: %@", v82, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v32 = v84;
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
  }
  else
  {

    swift_release();
    uint64_t v41 = *(void (**)(char *, uint64_t))(v31 + 8);
    v41(v34, v32);
  }
  return ((uint64_t (*)(char *, uint64_t))v41)(v79, v32);
}

uint64_t NearbyInvitationScanner.sendRequestConnection(fromHandle:nearbyAdvertisement:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[1] = a4;
  uint64_t v22 = type metadata accessor for NWConnection.SendCompletion();
  v21[0] = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for InvitationRequestData();
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NWProtocolFramer.Message();
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v9 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)();
  uint64_t v26 = &type metadata for ConnectionMessageType;
  LOBYTE(v25) = 1;
  dispatch thunk of NWProtocolFramer.Message.subscript.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1000D61E0;
  *(void *)(v10 + 32) = v9;
  uint64_t v25 = v10;
  specialized Array._endMutation()();
  type metadata accessor for NWConnection.ContentContext();
  swift_allocObject();
  swift_retain();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)();
  NearbyAdvertisement.identifier.getter();
  swift_bridgeObjectRetain();
  InvitationRequestData.init(invitationData:id:pseudo:)();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  _s14NearbySessions21InvitationRequestDataVACSEAAWlTm_0(&lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData, (void (*)(uint64_t))&type metadata accessor for InvitationRequestData);
  uint64_t v24 = v6;
  uint64_t v11 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v13 = v12;
  uint64_t v14 = v21[0];
  uint64_t v15 = v22;
  (*(void (**)(char *, void, uint64_t))(v21[0] + 104))(v5, enum case for NWConnection.SendCompletion.idempotent(_:), v22);
  outlined copy of Data._Representation(v11, v13);
  NWConnection.send(content:contentContext:isComplete:completion:)();
  outlined consume of Data._Representation(v11, v13);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v15);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.client);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "NearbyInvitationScanner sending data over for preLMI", v19, 2u);
    swift_slowDealloc();
  }

  swift_release();
  swift_release();
  outlined consume of Data._Representation(v11, v13);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v8, v24);
}

uint64_t NearbyInvitationScanner.sendApprovalReceivedResponse(to:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWConnection.SendCompletion();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NWProtocolFramer.Message();
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)();
  v21[3] = (uint64_t)&type metadata for ConnectionMessageType;
  LOBYTE(v21[0]) = 4;
  dispatch thunk of NWProtocolFramer.Message.subscript.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1000D61E0;
  *(void *)(v7 + 32) = v6;
  v21[0] = v7;
  specialized Array._endMutation()();
  type metadata accessor for NWConnection.ContentContext();
  swift_allocObject();
  swift_retain();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)();
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v19 = v2;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v18 = v3;
    unint64_t v12 = (uint8_t *)v11;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v20 = a1;
    v21[0] = v13;
    *(_DWORD *)unint64_t v12 = 136315138;
    type metadata accessor for NWConnection();
    uint64_t v17 = v5;
    swift_retain();
    uint64_t v14 = String.init<A>(reflecting:)();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v21);
    uint64_t v2 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v5 = v17;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "*** NearbyInvitationScanner send approval to connection %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v18;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for NWConnection.SendCompletion.idempotent(_:), v2);
  NWConnection.send(content:contentContext:isComplete:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t NearbyInvitationScanner.receiveNextMessage(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "*** NearbyInvitationScanner received data", v7, 2u);
    swift_slowDealloc();
  }

  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v2;
  *(void *)(v8 + 24) = a1;
  swift_retain();
  swift_retain();
  NWConnection.receiveMessage(completion:)();
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationScanner.receiveNextMessage(from:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2 >> 60 != 15 && a3 != 0)
  {
    outlined copy of Data._Representation(a1, a2);
    if (one-time initialization token for definition != -1) {
      swift_once();
    }
    if (dispatch thunk of NWConnection.ContentContext.protocolMetadata(definition:)())
    {
      if (one-time initialization token for client != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Log.client);
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(a1, a2);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      uint64_t v30 = a5;
      uint64_t v31 = a7;
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136315138;
        outlined copy of Data._Representation(a1, a2);
        uint64_t v17 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of Data?(a1, a2);
        outlined consume of Data?(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "*** NearbyInvitationScanner received data in bytes: %s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        outlined consume of Data?(a1, a2);
        outlined consume of Data?(a1, a2);
      }

      if ((*(uint64_t (**)(void))(*(void *)a6 + 128))())
      {
        uint64_t v20 = v19;
        uint64_t ObjectType = swift_getObjectType();
        type metadata accessor for NWProtocolFramer.Message();
        uint64_t v22 = swift_dynamicCastClassUnconditional();
        uint64_t v23 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 32);
        outlined copy of Data?(a1, a2);
        swift_retain();
        v23(a1, a2, v22, ObjectType, v20);
        outlined consume of Data?(a1, a2);
        swift_unknownObjectRelease();
        swift_release_n();
        outlined consume of Data?(a1, a2);
      }
      else
      {
        outlined consume of Data?(a1, a2);
        swift_release();
      }
      a5 = v30;
      a7 = v31;
    }
    else
    {
      outlined consume of Data?(a1, a2);
    }
  }
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Log.client);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "*** NearbyInvitationScanner going to send received message to HP", v27, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(uint64_t))(*(void *)a6 + 256))(a7);
  uint64_t v28 = type metadata accessor for NWError();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(a5, 1, v28);
  if (result == 1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a6 + 264))(a7);
  }
  return result;
}

uint64_t NearbyInvitationScanner.deinit()
{
  outlined destroy of weak PeerConnectionDelegate?(v0 + 32);
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner__connections;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t NearbyInvitationScanner.__deallocating_deinit()
{
  outlined destroy of weak PeerConnectionDelegate?(v0 + 32);
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner__connections;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance();
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v28 = a2;
  int v29 = a3;
  uint64_t v5 = type metadata accessor for NWBrowser.Result.Change();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v25 = a1 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v26 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v27 = v6 + 16;
  uint64_t v16 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v30 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(void *)(v30 + 48) + *(void *)(v6 + 72) * i, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
    closure #1 in closure #2 in NearbyInvitationScanner.scan()((uint64_t)v9, v28, v29);
    if (v3)
    {
      (*v16)(v9, v5);
      return swift_release();
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v16)(v9, v5);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v26) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v18);
    if (!v22) {
      break;
    }
LABEL_17:
    unint64_t v15 = (v22 - 1) & v22;
  }
  int64_t v23 = v18 + 1;
  if (v18 + 1 >= v26) {
    return swift_release();
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 2;
  if (v18 + 2 >= v26) {
    return swift_release();
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 3;
  if (v18 + 3 >= v26) {
    return swift_release();
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 4;
  if (v18 + 4 >= v26) {
    return swift_release();
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
LABEL_16:
    int64_t v18 = v23;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v26) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized NearbyInvitationScanner.init(scannerID:configuration:delegate:)(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = a6;
  uint64_t v36 = a3;
  id v34 = a2;
  uint64_t v37 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  uint64_t v32 = *(void *)(v7 - 8);
  uint64_t v33 = (uint8_t *)v7;
  __chkstk_darwin(v7);
  uint64_t v31 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v13);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v14 - 8);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v39[0] = (uint64_t)_swiftEmptyArrayStorage;
  _s14NearbySessions21InvitationRequestDataVACSEAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v9);
  a4[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  a4[5] = 0;
  swift_unknownObjectWeakInit();
  a4[6] = 0;
  unint64_t v15 = (char *)a4
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner__connections;
  v39[0] = (uint64_t)_swiftEmptyArrayStorage;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NWConnection]);
  uint64_t v16 = v31;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint8_t *))(v32 + 32))(v15, v16, v33);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.client);
  id v18 = v34;
  unint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    BOOL v21 = (uint8_t *)swift_slowAlloc();
    unint64_t v22 = (void *)swift_slowAlloc();
    id v34 = a4 + 4;
    v39[0] = (uint64_t)v22;
    *(_DWORD *)BOOL v21 = 136315138;
    uint64_t v33 = v21 + 4;
    id v23 = [v18 debugDescription];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;

    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "NearbyInvitationScanner init with parameters %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  a4[3] = v18;
  swift_beginAccess();
  a4[5] = v35;
  swift_unknownObjectWeakAssign();
  uint64_t v27 = (char *)a4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID;
  uint64_t v28 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32))(v27, v37, v28);
  return a4;
}

uint64_t sub_100046110()
{
  swift_weakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationScanner.scan()(uint64_t a1)
{
  return closure #1 in NearbyInvitationScanner.scan()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #2 in NearbyInvitationScanner.scan()(uint64_t a1, uint64_t a2)
{
  return closure #2 in NearbyInvitationScanner.scan()(a1, a2, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24));
}

uint64_t sub_100046160()
{
  uint64_t v1 = type metadata accessor for NWEndpoint();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return _swift_deallocObject(v0, v6, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationScanner.connect(to:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for NWEndpoint() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in NearbyInvitationScanner.connect(to:)(a1, v5, v1 + v4, v6);
}

uint64_t partial apply for closure #1 in NearbyInvitationScanner.receiveNextMessage(from:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return closure #1 in NearbyInvitationScanner.receiveNextMessage(from:)(a1, a2, a3, a4, a5, *(void *)(v5 + 16), *(void *)(v5 + 24));
}

uint64_t sub_1000462F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100046340(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 136);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1000463A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_1000463F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 160);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t ObjC metadata update function for NearbyInvitationScanner()
{
  return type metadata accessor for NearbyInvitationScanner();
}

uint64_t type metadata accessor for NearbyInvitationScanner()
{
  uint64_t result = type metadata singleton initialization cache for NearbyInvitationScanner;
  if (!type metadata singleton initialization cache for NearbyInvitationScanner) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for NearbyInvitationScanner()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<[NWConnection]>();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for Published<[NWConnection]>()
{
  if (!lazy cache variable for type metadata for Published<[NWConnection]>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NWConnection]);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<[NWConnection]>);
    }
  }
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    uint64_t v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        if (v6 == a2) {
          return v5;
        }
      }
      else if (*(void *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1)) {
        break;
      }
      if (++v5 == v4) {
        return 0;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(unint64_t *a1, uint64_t a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = specialized Collection.firstIndex(where:)(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v2) {
    return v6;
  }
  if ((v8 & 1) == 0)
  {
    unint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_54;
    }
    if (*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9 != v22) {
        goto LABEL_6;
      }
    }
    else if (v9 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (unint64_t i = v6 + 5; ; ++i)
      {
        unint64_t v11 = i - 4;
        unint64_t v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0) {
          break;
        }
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if (v11 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_45;
        }
        if (*(void *)(v12 + 8 * i) != a2) {
          goto LABEL_11;
        }
LABEL_31:
        unint64_t v9 = i - 3;
        if (__OFADD__(v11, 1)) {
          goto LABEL_46;
        }
        if (*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v18 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == v18) {
          return v6;
        }
      }
      uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_unknownObjectRelease();
      if (v19 == a2) {
        goto LABEL_31;
      }
LABEL_11:
      if (v11 == v6)
      {
LABEL_30:
        if (__OFADD__(v6++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_31;
      }
      unint64_t v9 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v9 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_16:
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          uint64_t v14 = *(void *)(v9 + 8 * i);
          swift_retain();
          goto LABEL_19;
        }
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v6 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        uint64_t v13 = *(void *)(v9 + 8 * v6 + 32);
        swift_retain();
        if ((v9 & 0xC000000000000001) == 0) {
          goto LABEL_16;
        }
      }
      uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      unint64_t v9 = *a1;
LABEL_19:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v9 & 0x8000000000000000) != 0
        || (v9 & 0x4000000000000000) != 0)
      {
        unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        *a1 = v9;
      }
      *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v14;
      swift_release();
      specialized Array._endMutation()();
      unint64_t v9 = *a1;
      int v16 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!v16 || (v9 & 0x8000000000000000) != 0 || (v9 & 0x4000000000000000) != 0)
      {
        unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        *a1 = v9;
      }
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_53;
      }
      *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v13;
      swift_release();
      specialized Array._endMutation()();
      goto LABEL_30;
    }
    return v6;
  }
  unint64_t v20 = *a1;
  if (!(v20 >> 62)) {
    return *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t _s14NearbySessions21InvitationRequestDataVACSEAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t NearbyRangingFilter.Config.innerBubbleMaxScanningRegion.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t NearbyRangingFilter.rangingConfig.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

id NearbyRangingFilter.rangingSession.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t NearbyRangingFilter.stableIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyRangingFilter.rangingAssertion.getter()
{
  return swift_retain();
}

uint64_t NearbyRangingFilter.rangingAssertion.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 56) = a1;
  return swift_release();
}

uint64_t (*NearbyRangingFilter.rangingAssertion.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyRangingFilter.device.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 72);
  char v5 = *(unsigned char *)(v1 + 80);
  char v7 = *(void **)(v1 + 88);
  uint64_t v6 = *(void *)(v1 + 96);
  uint64_t v8 = *(void *)(v1 + 104);
  int v9 = *(_DWORD *)(v1 + 112);
  uint64_t v10 = *(void *)(v1 + 136);
  uint64_t v17 = *(void *)(v1 + 128);
  uint64_t v18 = *(void *)(v1 + 120);
  char v16 = *(unsigned char *)(v1 + 144);
  uint64_t v11 = *(void *)(v1 + 152);
  uint64_t v12 = *(void *)(v1 + 160);
  uint64_t v15 = v11;
  id v13 = v7;
  swift_bridgeObjectRetain();
  outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v6, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v8;
  *(_DWORD *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v17;
  *(void *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 80) = v16;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *NearbyRangingFilter.device.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v4 = *(void **)(v1 + 88);
  uint64_t v3 = *(void *)(v1 + 96);
  uint64_t v5 = *(void *)(v1 + 104);
  long long v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 128) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 144) = v6;
  *(void *)(v1 + 160) = *(void *)(a1 + 96);
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 80) = v7;
  long long v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 112) = v8;
  outlined retain of BluetoothScanner.Device(a1);
  swift_bridgeObjectRelease();

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v3, v5);
  swift_release();
  swift_bridgeObjectRelease();
  int v9 = *(void **)(v1 + 32);
  long long v10 = *(_OWORD *)(v1 + 144);
  v15[4] = *(_OWORD *)(v1 + 128);
  v15[5] = v10;
  uint64_t v16 = *(void *)(v1 + 160);
  long long v11 = *(_OWORD *)(v1 + 80);
  v15[0] = *(_OWORD *)(v1 + 64);
  v15[1] = v11;
  long long v12 = *(_OWORD *)(v1 + 112);
  v15[2] = *(_OWORD *)(v1 + 96);
  v15[3] = v12;
  id v13 = *(void (**)(_OWORD *))((swift_isaMask & *v9) + 0xD8);
  outlined retain of BluetoothScanner.Device((uint64_t)v15);
  v13(v15);
  outlined release of BluetoothScanner.Device(v15);
  return outlined release of BluetoothScanner.Device((void *)a1);
}

uint64_t outlined retain of BluetoothScanner.Device(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(id *)(a1 + 24);
  swift_bridgeObjectRetain();
  outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v2, v3);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *outlined release of BluetoothScanner.Device(void *a1)
{
  uint64_t v3 = (void *)a1[3];
  uint64_t v2 = a1[4];
  uint64_t v4 = a1[5];
  swift_bridgeObjectRelease();

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v2, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

void (*NearbyRangingFilter.device.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess();
  return NearbyRangingFilter.device.modify;
}

void NearbyRangingFilter.device.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = *(void *)(v3 + 128);
    uint64_t v5 = *(void **)(v4 + 32);
    long long v7 = *(_OWORD *)(v4 + 80);
    long long v6 = *(_OWORD *)(v4 + 96);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)(v4 + 64);
    *(_OWORD *)(v3 + 16) = v7;
    *(_OWORD *)(v3 + 32) = v6;
    long long v9 = *(_OWORD *)(v4 + 128);
    long long v8 = *(_OWORD *)(v4 + 144);
    long long v10 = *(_OWORD *)(v4 + 112);
    *(void *)(v3 + 96) = *(void *)(v4 + 160);
    *(_OWORD *)(v3 + 64) = v9;
    *(_OWORD *)(v3 + 80) = v8;
    *(_OWORD *)(v3 + 48) = v10;
    long long v11 = *(void (**)(uint64_t))((swift_isaMask & *v5) + 0xD8);
    outlined retain of BluetoothScanner.Device(v3);
    v11(v3);
    outlined release of BluetoothScanner.Device((void *)v3);
  }
  free((void *)v3);
}

uint64_t NearbyRangingFilter.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyRangingFilter.cancellables.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 168) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyRangingFilter.cancellables.modify())()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t NearbyRangingFilter.handle(updatedScannerDevice:)(uint64_t a1)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 160);
  outlined retain of BluetoothScanner.Device(a1);
  return v4(a1);
}

uint64_t NearbyRangingFilter.showDevice.getter()
{
  unsigned __int8 v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 32)) + 0x98))();
  return (v1 != 3) & v1;
}

uint64_t NearbyRangingFilter.__allocating_init(scannerDevice:config:)(uint64_t a1, char a2, uint64_t a3)
{
  char v5 = a2 & 1;
  uint64_t v6 = swift_allocObject();
  NearbyRangingFilter.init(scannerDevice:config:)(a1, v5, a3);
  return v6;
}

uint64_t NearbyRangingFilter.init(scannerDevice:config:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v7 = a2 & 1;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 168) = &_swiftEmptySetSingleton;
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(v4 + 40) = *(void *)a1;
  *(void *)(v4 + 48) = v9;
  *(unsigned char *)(v4 + 16) = a2 & 1;
  *(void *)(v4 + 24) = a3;
  objc_allocWithZone((Class)type metadata accessor for NearbySession());
  swift_bridgeObjectRetain_n();
  long long v10 = (void *)NearbySession.init(stableIdentifier:rangingConfig:)(v8, v9, v7, a3);
  *(void *)(v4 + 32) = v10;
  long long v11 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v4 + 144) = v11;
  *(void *)(v4 + 160) = *(void *)(a1 + 96);
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 80) = v12;
  long long v13 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 112) = v13;
  uint64_t v14 = *(void (**)(uint64_t))((swift_isaMask & *v10) + 0x90);
  uint64_t v15 = outlined retain of BluetoothScanner.Device(a1);
  v14(v15);
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  uint64_t v16 = swift_release();
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v4 + 32)) + 0xB0))(v16);
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<NearbySession.RangedDevice?, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>(&lazy protocol witness table cache variable for type CurrentValueSubject<NearbySession.RangedDevice?, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<NearbySession.RangedDevice?, Never>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v17 = *(void **)(v4 + 32);
  uint64_t v18 = *(void (**)(uint64_t))((swift_isaMask & *v17) + 0xD8);
  uint64_t v19 = v17;
  v18(a1);
  outlined release of BluetoothScanner.Device((void *)a1);

  return v4;
}

uint64_t closure #1 in NearbyRangingFilter.init(scannerDevice:config:)(unsigned __int8 *a1)
{
  void (*v11)(uint64_t *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  void v14[11];
  long long v15;
  long long v16;

  int v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.host);
    char v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      char v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v7 = 67109120;
      LODWORD(v14[0]) = v1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "RangingSession isRunning: %{BOOL}d", v7, 8u);
      swift_slowDealloc();
    }

    uint64_t v8 = *(void *)v3;
    if (v1)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v3 + 128))();
      uint64_t v10 = swift_release();
      if (v9) {
        return swift_release();
      }
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v3 + 152))(v14, v10);
      uint64_t v16 = v15;
      long long v11 = (void (*)(uint64_t *__return_ptr))v15;
      swift_retain();
      v11(&v13);
      outlined release of IgnoreHashable<IgnoreEquatable<()>>((uint64_t)&v16);
      outlined release of BluetoothScanner.Device(v14);
      long long v12 = v13;
      uint64_t v8 = *(void *)v3;
    }
    else
    {
      long long v12 = 0;
    }
    (*(void (**)(uint64_t))(v8 + 136))(v12);
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in NearbyRangingFilter.init(scannerDevice:config:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for NearbyRangingFilter();
    lazy protocol witness table accessor for type NearbyRangingFilter and conformance NearbyRangingFilter();
    ObservableObject<>.objectWillChange.getter();
    ObservableObjectPublisher.send()();
    swift_release();
    return swift_release();
  }
  return result;
}

void *NearbyRangingFilter.deinit()
{
  int v1 = v0;
  uint64_t v2 = (void *)v0[4];
  (*(void (**)(void))((swift_isaMask & *v2) + 0xE0))();

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = (void *)v1[11];
  uint64_t v3 = v1[12];
  uint64_t v5 = v1[13];
  swift_bridgeObjectRelease();

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v3, v5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t NearbyRangingFilter.__deallocating_deinit()
{
  int v1 = v0;
  uint64_t v2 = (void *)v0[4];
  (*(void (**)(void))((swift_isaMask & *v2) + 0xE0))();

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = (void *)v1[11];
  uint64_t v3 = v1[12];
  uint64_t v5 = v1[13];
  swift_bridgeObjectRelease();

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v3, v5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DeviceFilter.init(scannerDevice:config:) in conformance NearbyRangingFilter(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(v2 + 216))(a1, *a2, *((void *)a2 + 1));
}

uint64_t protocol witness for DeviceFilter.handle(updatedScannerDevice:) in conformance NearbyRangingFilter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t protocol witness for DeviceFilter.showDevice.getter in conformance NearbyRangingFilter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

__n128 protocol witness for DeviceFilter.device.getter in conformance NearbyRangingFilter@<Q0>(uint64_t a1@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v1 + 152))(v6);
  long long v3 = v6[5];
  *(_OWORD *)(a1 + 64) = v6[4];
  *(_OWORD *)(a1 + 80) = v3;
  *(void *)(a1 + 96) = v7;
  long long v4 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v4;
  __n128 result = (__n128)v6[3];
  *(_OWORD *)(a1 + 32) = v6[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance NearbyRangingFilter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for NearbyRangingFilter();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000479EC()
{
  swift_weakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in NearbyRangingFilter.init(scannerDevice:config:)(unsigned __int8 *a1)
{
  return closure #1 in NearbyRangingFilter.init(scannerDevice:config:)(a1);
}

uint64_t partial apply for closure #2 in NearbyRangingFilter.init(scannerDevice:config:)()
{
  return closure #2 in NearbyRangingFilter.init(scannerDevice:config:)();
}

uint64_t lazy protocol witness table accessor for type CurrentValueSubject<Bool, Never> and conformance CurrentValueSubject<A, B>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyRangingFilter.Config.Mode and conformance NearbyRangingFilter.Config.Mode()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyRangingFilter.Config.Mode and conformance NearbyRangingFilter.Config.Mode;
  if (!lazy protocol witness table cache variable for type NearbyRangingFilter.Config.Mode and conformance NearbyRangingFilter.Config.Mode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyRangingFilter.Config.Mode and conformance NearbyRangingFilter.Config.Mode);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for NearbyRangingFilter(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type NearbyRangingFilter and conformance NearbyRangingFilter();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyRangingFilter and conformance NearbyRangingFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyRangingFilter and conformance NearbyRangingFilter;
  if (!lazy protocol witness table cache variable for type NearbyRangingFilter and conformance NearbyRangingFilter)
  {
    type metadata accessor for NearbyRangingFilter();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyRangingFilter and conformance NearbyRangingFilter);
  }
  return result;
}

uint64_t type metadata accessor for NearbyRangingFilter()
{
  return self;
}

void *associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in NearbyRangingFilter()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_100047B88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_100047BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 136);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

__n128 sub_100047C28@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)a1 + 152))(v6);
  long long v3 = v6[5];
  *(_OWORD *)(a2 + 64) = v6[4];
  *(_OWORD *)(a2 + 80) = v3;
  *(void *)(a2 + 96) = v7;
  long long v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = (__n128)v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t sub_100047CA8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  v7[4] = *(_OWORD *)(a1 + 64);
  v7[5] = v2;
  uint64_t v8 = *(void *)(a1 + 96);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v4;
  uint64_t v5 = *(uint64_t (**)(_OWORD *))(**(void **)a2 + 160);
  outlined retain of BluetoothScanner.Device((uint64_t)v7);
  return v5(v7);
}

uint64_t sub_100047D28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_100047D74(uint64_t a1, uint64_t a2)
{
  long long v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NearbyRangingFilter.Config(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyRangingFilter.Config(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyRangingFilter.Config()
{
  return &type metadata for NearbyRangingFilter.Config;
}

unsigned char *storeEnumTagSinglePayload for NearbyRangingFilter.Config.Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100047F34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyRangingFilter.Config.Mode()
{
  return &type metadata for NearbyRangingFilter.Config.Mode;
}

uint64_t outlined release of IgnoreHashable<IgnoreEquatable<()>>(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for FirewallProvider.donateEntries(_:) in conformance IDSFirewall()
{
  long long v2 = *v0;
  type metadata accessor for IDSFirewallEntry();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v1[15] = isa;
  v1[2] = v1;
  v1[3] = protocol witness for FirewallProvider.donateEntries(_:) in conformance IDSFirewall;
  uint64_t v4 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v1[13] = &block_descriptor_1;
  v1[14] = v4;
  [v2 donateEntries:isa withCompletion:v1 + 10];
  return _swift_continuation_await(v1 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *v0;
  long long v2 = *v0;
  int v3 = *(void **)(*v0 + 120);
  if (*(void *)(v1 + 48)) {
    swift_willThrow();
  }

  uint64_t v4 = *(uint64_t (**)(void))(v2 + 8);
  return v4();
}

unint64_t type metadata accessor for IDSFirewallEntry()
{
  unint64_t result = lazy cache variable for type metadata for IDSFirewallEntry;
  if (!lazy cache variable for type metadata for IDSFirewallEntry)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for IDSFirewallEntry);
  }
  return result;
}

uint64_t Log.client.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for client, (uint64_t)static Log.client);
}

uint64_t >> prefix<A>(_:)(uint64_t a1, uint64_t a2)
{
  v4[2] = a2;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in >> prefix<A>(_:), (uint64_t)v4, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for String, v2, (uint64_t)v5);
  if (v5[1]) {
    return v5[0];
  }
  else {
    return 7104878;
  }
}

uint64_t Log.default.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for default, (uint64_t)static Log.default);
}

uint64_t Log.host.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for host, (uint64_t)static Log.host);
}

uint64_t Log.group.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for group, (uint64_t)static Log.group);
}

uint64_t one-time initialization function for default(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.default);
}

uint64_t static Log.default.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for default, (uint64_t)static Log.default, a1);
}

uint64_t one-time initialization function for client(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.client);
}

uint64_t static Log.client.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for client, (uint64_t)static Log.client, a1);
}

uint64_t one-time initialization function for host(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.host);
}

uint64_t static Log.host.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for host, (uint64_t)static Log.host, a1);
}

uint64_t one-time initialization function for firewall(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.firewall);
}

uint64_t Log.firewall.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for firewall, (uint64_t)static Log.firewall);
}

uint64_t static Log.firewall.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for firewall, (uint64_t)static Log.firewall, a1);
}

uint64_t one-time initialization function for service(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.service);
}

uint64_t Log.service.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for service, (uint64_t)static Log.service);
}

uint64_t static Log.service.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for service, (uint64_t)static Log.service, a1);
}

uint64_t one-time initialization function for group(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.group);
}

uint64_t static Log.group.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for group, (uint64_t)static Log.group, a1);
}

uint64_t one-time initialization function for abcReporter(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.abcReporter);
}

uint64_t one-time initialization function for default(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.abcReporter.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for abcReporter, (uint64_t)static Log.abcReporter);
}

uint64_t Log.client.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Log.abcReporter.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for abcReporter, (uint64_t)static Log.abcReporter, a1);
}

uint64_t static Log.default.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = String.init<A>(reflecting:)();
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t partial apply for closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in >> prefix<A>(_:)(a1, a2);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  uint64_t v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  long long v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t specialized Set.contains(_:)(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v3 = a1;
    char v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Swift::Int v6 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v7 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v8 = v6 & ~v7,
        uint64_t v9 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }
  type metadata accessor for NearbyGroupMember();
  id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v8);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v14 = (v8 + 1) & v13;
    if ((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      do
      {
        id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v14);
        char v12 = static NSObject.== infix(_:_:)();

        if (v12) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v13;
      }
      while (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  char v12 = 1;
  return v12 & 1;
}

void *NearbyGroupHost.remoteJoinReuseIdentifier.unsafeMutableAddressor()
{
  return &static NearbyGroupHost.remoteJoinReuseIdentifier;
}

unint64_t static NearbyGroupHost.remoteJoinReuseIdentifier.getter()
{
  return 0xD000000000000016;
}

void *NearbyGroupHost.hostedReuseIdentifier.unsafeMutableAddressor()
{
  return &static NearbyGroupHost.hostedReuseIdentifier;
}

unint64_t static NearbyGroupHost.hostedReuseIdentifier.getter()
{
  return 0xD000000000000012;
}

uint64_t NearbyGroupHost.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

id NearbyGroupHost.listener.getter()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_listener));
}

id NearbyGroupHost.endpoint.getter()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_listener) endpoint];
  return v1;
}

id NearbyGroupHost.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
}

uint64_t property wrapper backing initializer of NearbyGroupHost.members()
{
  return Published.init(initialValue:)();
}

uint64_t key path getter for NearbyGroupHost.members : NearbyGroupHost@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t key path setter for NearbyGroupHost.members : NearbyGroupHost(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xC0);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t NearbyGroupHost.members.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100048FBC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_100049018(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0xC0);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t NearbyGroupHost.members.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return static Published.subscript.setter();
}

uint64_t (*NearbyGroupHost.members.modify(void *a1))()
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return NearbyInvitationAdvertiser.connections.modify;
}

uint64_t key path setter for NearbyGroupHost.$members : NearbyGroupHost(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>.Publisher);
  __chkstk_darwin(v4);
  Swift::Int v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((swift_isaMask & **a2) + 0xD8))(v6);
}

uint64_t NearbyGroupHost.$members.getter()
{
  return NearbyInvitationAdvertiser.$connections.getter((uint64_t)&OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__members, &demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>);
}

uint64_t NearbyGroupHost.$members.setter(uint64_t a1)
{
  return NearbyGroupHost.$members.setter(a1, &demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>.Publisher, (uint64_t)&OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__members, &demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>);
}

uint64_t (*NearbyGroupHost.$members.modify(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__members;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>);
  Published.projectedValue.getter();
  swift_endAccess();
  return NearbyInvitationAdvertiser.$connections.modify;
}

uint64_t NearbyGroupHost.localMember.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMember;
  swift_beginAccess();
  return outlined init with copy of PseudonymProtocol(v3, a1);
}

uint64_t NearbyGroupHost.localMember.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMember;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_0Tm(v3);
  outlined init with take of PseudonymProtocol(a1, v3);
  return swift_endAccess();
}

uint64_t (*NearbyGroupHost.localMember.modify())()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t NearbyGroupHost.localMemberHandle.getter()
{
  (*(void (**)(void *__return_ptr))((swift_isaMask & *v0) + 0xE8))(v5);
  uint64_t v1 = v6;
  uint64_t v2 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v5);
  return v3;
}

uint64_t NearbyGroupHost.localMemberToken.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t NearbyGroupHost.localMemberToken.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken);
  swift_beginAccess();
  void *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyGroupHost.localMemberToken.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t property wrapper backing initializer of NearbyGroupHost.state()
{
  return Published.init(initialValue:)();
}

uint64_t key path getter for NearbyGroupHost.state : NearbyGroupHost@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x120))();
  *a2 = result;
  return result;
}

uint64_t key path setter for NearbyGroupHost.state : NearbyGroupHost(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x128))(*a1);
}

uint64_t NearbyGroupHost.state.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000497F0@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x120))();
  *a2 = result;
  return result;
}

uint64_t sub_100049854(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x128))(*a1);
}

uint64_t NearbyGroupHost.state.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return static Published.subscript.setter();
}

uint64_t (*NearbyGroupHost.state.modify(void *a1))()
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return NearbyInvitationAdvertiser.connections.modify;
}

uint64_t key path setter for NearbyGroupHost.$state : NearbyGroupHost(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))((swift_isaMask & **a2) + 0x140))(v6);
}

uint64_t NearbyGroupHost.$state.getter()
{
  return NearbyInvitationAdvertiser.$connections.getter((uint64_t)&OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__state, &demangling cache variable for type metadata for Published<NearbyGroupHost.State>);
}

uint64_t NearbyGroupHost.$state.setter(uint64_t a1)
{
  return NearbyGroupHost.$members.setter(a1, &demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher, (uint64_t)&OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__state, &demangling cache variable for type metadata for Published<NearbyGroupHost.State>);
}

uint64_t NearbyGroupHost.$members.setter(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(a4);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

uint64_t (*NearbyGroupHost.$state.modify(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__state;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>);
  Published.projectedValue.getter();
  swift_endAccess();
  return NearbyInvitationAdvertiser.$connections.modify;
}

void NearbyGroupHost.connection.didset(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  size_t v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue];
  *size_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    if (one-time initialization token for group == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.group);
  uint64_t v10 = v1;
  char v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v11, v12))
  {

    if (!a1) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v23 = a1;
  uint64_t v13 = swift_slowAlloc();
  unint64_t v14 = (void *)swift_slowAlloc();
  uint64_t v26 = swift_slowAlloc();
  *(_DWORD *)uint64_t v13 = 138412546;
  uint64_t v25 = v10;
  id v15 = v10;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *unint64_t v14 = v10;

  *(_WORD *)(v13 + 12) = 2080;
  uint64_t v16 = (void **)&v15[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_connection];
  swift_beginAccess();
  BOOL v17 = *v16;
  if (*v16)
  {
    uint64_t v24 = (uint64_t)*v16;
    type metadata accessor for NearbyGroupHostConnection();
    id v18 = v17;
    uint64_t v19 = String.init<A>(reflecting:)();
    unint64_t v21 = v20;
  }
  else
  {
    unint64_t v21 = 0xE300000000000000;
    uint64_t v19 = 7104878;
  }
  uint64_t v22 = v23;
  uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v26);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@ changed XPC connection to %s", (uint8_t *)v13, 0x16u);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if (v22) {
LABEL_10:
  }
    dispatch thunk of XPCHostConnection.destroyConnection()();
}

void *NearbyGroupHost.connection.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_connection);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void NearbyGroupHost.connection.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_connection);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
  id v5 = a1;
  NearbyGroupHost.connection.didset((uint64_t)v4);
}

void (*NearbyGroupHost.connection.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_connection;
  v3[4] = v1;
  v3[5] = v4;
  id v5 = (void **)(v1 + v4);
  swift_beginAccess();
  size_t v6 = *v5;
  v3[3] = *v5;
  id v7 = v6;
  return NearbyGroupHost.connection.modify;
}

void NearbyGroupHost.connection.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = (void **)(*(void *)a1 + 24);
  id v3 = *v4;
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 40);
  id v7 = *(void **)(v6 + v5);
  *(void *)(v6 + v5) = *v4;
  if (a2)
  {
    id v8 = v3;
    NearbyGroupHost.connection.didset((uint64_t)v7);

    id v7 = *v4;
  }
  else
  {
    id v9 = v3;
    NearbyGroupHost.connection.didset((uint64_t)v7);
  }
  free(v2);
}

uint64_t NearbyGroupHost.incomingMessageListenerTask.getter()
{
  return NearbyGroupHost.incomingMessageListenerTask.getter();
}

{
  swift_beginAccess();
  return swift_retain();
}

uint64_t NearbyGroupHost.incomingMessageListenerTask.setter(uint64_t a1)
{
  return NearbyGroupHost.incomingMessageListenerTask.setter(a1, &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_incomingMessageListenerTask);
}

uint64_t (*NearbyGroupHost.incomingMessageListenerTask.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyGroupHost.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyGroupHost.cancellables.setter(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_cancellables);
  swift_beginAccess();
  *id v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyGroupHost.cancellables.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyGroupHost.firewall.getter()
{
  return NearbyGroupHost.incomingMessageListenerTask.getter();
}

uint64_t NearbyGroupHost.firewall.setter(uint64_t a1)
{
  return NearbyGroupHost.incomingMessageListenerTask.setter(a1, &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_firewall);
}

uint64_t NearbyGroupHost.incomingMessageListenerTask.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return swift_release();
}

uint64_t (*NearbyGroupHost.firewall.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyGroupHost.__allocating_init(remoteInitialization:idsService:localMemberToken:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a4;
  uint64_t v65 = a3;
  uint64_t v62 = type metadata accessor for UUID();
  uint64_t v61 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v63 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v8 = *(int *)(type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0) + 20);
  uint64_t v68 = a1;
  uint64_t v60 = v8;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy44com_apple_SharePlay_NearbyInvitationsService0H19GroupHostIDSServiceC12MessageEventO6MemberVG_SSs5NeverOTg508_s44com_e1_fg1_hi10Service0E9kl37C20remoteInitialization03idsG016localp14TokenAcA0ehI10m3C12nO87O06RemotehK0V_AHS2ScSgtKcfcSSAJ0N0Vcfu_32fa9956de96d0eac289a8d33e15b59ca7AOSSTf3nnnpk_nTf1cn_n(v9);
  swift_bridgeObjectRelease();
  uint64_t v73 = specialized Set.init<A>(_:)((uint64_t)v10);
  swift_bridgeObjectRelease();
  id v67 = a2;
  char v11 = &a2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service];
  uint64_t v71 = "InvitationsProviderDataSource";
  unint64_t v72 = 0x80000001000DA650;
  uint64_t v69 = "RapportBrowseAgent";
  unint64_t v70 = 0x80000001000DAB40;
  while (1)
  {
    uint64_t v12 = *((void *)v11 + 3);
    uint64_t v13 = *((void *)v11 + 4);
    unint64_t v14 = __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v77 = v12;
    uint64_t v15 = *(void *)(v13 + 8);
    uint64_t v78 = v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v76);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(boxed_opaque_existential_1, v14, v12);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v12, v15);
    if (v18)
    {
      uint64_t v19 = v17;
      uint64_t v12 = v18;
      if (v17 == 0xD000000000000030 && v18 == v72
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v19 == 0xD000000000000032 && v12 == v70)
      {
        swift_bridgeObjectRelease();
LABEL_9:
        uint64_t v12 = 0xE800000000000000;
        uint64_t v20 = 0x72656C676E617257;
        goto LABEL_13;
      }
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v21) {
        goto LABEL_9;
      }
    }
    if ((_TUIsInternalInstall() & 1) == 0) {
      goto LABEL_21;
    }
    uint64_t v12 = 0xE700000000000000;
    uint64_t v20 = 0x6C6F6F74736469;
LABEL_13:
    uint64_t v22 = (void *)specialized NearbyGroupServerBag.numericConfig(for:)(0);
    [v22 doubleValue];
    uint64_t v24 = v23;

    uint64_t v25 = (void *)specialized NearbyGroupServerBag.numericConfig(for:)(2);
    [v25 doubleValue];
    uint64_t v27 = v26;

    *(void *)&long long v79 = v20;
    *((void *)&v79 + 1) = v12;
    uint64_t v80 = v24;
    uint64_t v81 = v27;
    unint64_t v82 = 0xD000000000000016;
    unint64_t v83 = 0x80000001000DB790;
    uint64_t v28 = specialized static Pseudonym.existing(for:configuration:)((uint64_t)v76, &v79);
    if (v4) {
      break;
    }
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v76);
    if (v84)
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    swift_beginAccess();
    id v30 = [*(id *)(v29 + 16) URI];
    id v31 = [v30 prefixedURI];

    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    LOBYTE(v32) = specialized Set.contains(_:)(v32, v34, v73);
    swift_bridgeObjectRelease();
    if (v32)
    {
      uint64_t v42 = one-time initialization token for host;
      swift_retain();
      if (v42 != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)static Log.host);
      swift_retain_n();
      os_log_type_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        v76[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136446210;
        unint64_t v72 = (unint64_t)(v46 + 4);
        swift_retain();
        uint64_t v47 = Pseudonym.description.getter();
        unint64_t v49 = v48;
        swift_release();
        uint64_t v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Found existing pseudonym matching members: %{public}s", v46, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();

        swift_release_n();
      }
      uint64_t v84 = 0;
      swift_bridgeObjectRelease();
      swift_retain();
      Pseudonym.markUsed()();
      uint64_t v50 = v63;
      uint64_t v51 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v63, v68, v62);
      uint64_t v52 = swift_bridgeObjectRetain();
      os_log_type_t v53 = specialized Sequence.compactMap<A>(_:)(v52);
      swift_bridgeObjectRelease();
      uint64_t v54 = specialized Set.init<A>(_:)((unint64_t)v53);
      swift_bridgeObjectRelease();
      uint64_t v77 = type metadata accessor for Pseudonym();
      uint64_t v78 = lazy protocol witness table accessor for type Pseudonym and conformance Pseudonym(&lazy protocol witness table cache variable for type Pseudonym and conformance Pseudonym, (void (*)(uint64_t))type metadata accessor for Pseudonym);
      v76[0] = v29;
      uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t *, id, uint64_t, uint64_t))(v64 + 432))(v50, v54, v76, v67, v65, v66);
      swift_release();
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v51, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
      swift_bridgeObjectRelease();
      return v12;
    }
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_errorRelease();
LABEL_21:
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v76);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Log.host);
  swift_bridgeObjectRetain();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v75 = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 136446466;
    swift_beginAccess();
    if (v84)
    {
      uint64_t v74 = v84;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Pseudonym]);
      uint64_t v39 = String.init<A>(reflecting:)();
      unint64_t v41 = v40;
    }
    else
    {
      unint64_t v41 = 0xE300000000000000;
      uint64_t v39 = 7104878;
    }
    uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2082;
    uint64_t v12 = v38 + 14;
    swift_bridgeObjectRetain();
    uint64_t v55 = Set.description.getter();
    unint64_t v57 = v56;
    swift_bridgeObjectRelease();
    uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v57, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Exhausted existing pseudonyms: %{public}s and couldn't find one matching members: %{public}s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors();
  swift_allocError();
  *uint64_t v58 = 1;
  swift_willThrow();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v65);

  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v68, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
  swift_bridgeObjectRelease();
  return v12;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy44com_apple_SharePlay_NearbyInvitationsService0H19GroupHostIDSServiceC12MessageEventO6MemberVG_SSs5NeverOTg508_s44com_e1_fg1_hi10Service0E9kl37C20remoteInitialization03idsG016localp14TokenAcA0ehI10m3C12nO87O06RemotehK0V_AHS2ScSgtKcfcSSAJ0N0Vcfu_32fa9956de96d0eac289a8d33e15b59ca7AOSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = (void *)specialized Set.startIndex.getter(a1);
  uint64_t v4 = (uint64_t)result;
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(a1 + 56 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
      goto LABEL_13;
    }
    if (*(_DWORD *)(a1 + 36) != v6) {
      goto LABEL_14;
    }
    char v17 = v8;
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 48) + 32 * v4);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    unint64_t v13 = _swiftEmptyArrayStorage[2];
    unint64_t v12 = _swiftEmptyArrayStorage[3];
    swift_bridgeObjectRetain();
    if (v13 >= v12 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v13 + 1;
    unint64_t v14 = &_swiftEmptyArrayStorage[2 * v13];
    void v14[4] = v10;
    v14[5] = v11;
    uint64_t result = (void *)specialized _NativeSet.index(after:)(v4, v6, v17 & 1, a1);
    uint64_t v4 = (uint64_t)result;
    uint64_t v6 = v15;
    char v8 = v16 & 1;
    if (!--v1)
    {
      outlined consume of Set<NearbyGroupHostIDSService.MessageEvent.Member>.Index._Variant((uint64_t)result, v15, v8);
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  for (v4 &= v4 - 1; ; uint64_t v4 = (v9 - 1) & v9)
  {
    objc_allocWithZone((Class)type metadata accessor for NearbyGroupMember());
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NearbyGroupMember.init(handle:tokenID:)();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = (void *)specialized Array._endMutation()();
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v8 >= v5) {
      goto LABEL_25;
    }
    uint64_t v9 = *(void *)(v1 + 8 * v8);
    ++v7;
    if (!v9)
    {
      int64_t v7 = v8 + 1;
      if (v8 + 1 >= v5) {
        goto LABEL_25;
      }
      uint64_t v9 = *(void *)(v1 + 8 * v7);
      if (!v9)
      {
        int64_t v7 = v8 + 2;
        if (v8 + 2 >= v5) {
          goto LABEL_25;
        }
        uint64_t v9 = *(void *)(v1 + 8 * v7);
        if (!v9)
        {
          int64_t v7 = v8 + 3;
          if (v8 + 3 >= v5) {
            goto LABEL_25;
          }
          uint64_t v9 = *(void *)(v1 + 8 * v7);
          if (!v9) {
            break;
          }
        }
      }
    }
LABEL_20:
    ;
  }
  int64_t v10 = v8 + 4;
  if (v10 >= v5)
  {
LABEL_25:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v9 = *(void *)(v1 + 8 * v10);
  if (v9)
  {
    int64_t v7 = v10;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_25;
    }
    uint64_t v9 = *(void *)(v1 + 8 * v7);
    ++v10;
    if (v9) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  uint64_t v4 = _swiftEmptyArrayStorage;
  uint64_t v19 = v2;
  do
  {
    int64_t v5 = *(void *)(v2 + v3 + 40);
    char v21 = *(void *)(v2 + v3 + 32);
    uint64_t v22 = v4;
    uint64_t v6 = *(void **)(v2 + v3 + 56);
    int64_t v7 = *(void *)(v2 + v3 + 64);
    int64_t v8 = *(void *)(v2 + v3 + 72);
    uint64_t v26 = *(_DWORD *)(v2 + v3 + 80);
    uint64_t v9 = *(void *)(v2 + v3 + 104);
    uint64_t v24 = *(void *)(v2 + v3 + 96);
    uint64_t v25 = *(void *)(v2 + v3 + 88);
    uint64_t v23 = *(unsigned char *)(v2 + v3 + 112);
    uint64_t v20 = *(unsigned char *)(v2 + v3 + 48);
    int64_t v10 = swift_allocObject();
    swift_weakInit();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = partial apply for closure #1 in closure #1 in BluetoothScanner.handleDiscoveryEngineDevicesChanged();
    *(void *)(v11 + 24) = v10;
    uint64_t v28 = v6;
    unint64_t v12 = v6;
    swift_bridgeObjectRetain();
    uint64_t v27 = v7;
    unint64_t v13 = v7;
    unint64_t v14 = v8;
    uint64_t v4 = v22;
    outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v13, v14);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    }
    char v16 = v4[2];
    uint64_t v15 = v4[3];
    if (v16 >= v15 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v4);
    }
    v4[2] = v16 + 1;
    char v17 = &v4[13 * v16];
    v17[4] = v21;
    v17[5] = v5;
    *((unsigned char *)v17 + 48) = v20;
    v17[7] = v28;
    v17[8] = v27;
    v17[9] = v14;
    *((_DWORD *)v17 + 20) = v26;
    v17[11] = v25;
    v17[12] = v24;
    v17[13] = v9;
    *((unsigned char *)v17 + 112) = v23;
    v17[15] = thunk for @escaping @callee_guaranteed () -> (@owned AssertionManager.Assertion?)partial apply;
    v17[16] = v11;
    v3 += 88;
    --v1;
    uint64_t v2 = v19;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  void *result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  void *v14;
  void (*v15)(void);
  void *v16;

  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  int64_t v5 = v4 & *(void *)(a1 + 64);
  uint64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    unint64_t v14 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    uint64_t v15 = *(void (**)(void))((swift_isaMask & *v14) + 0x1E8);
    char v16 = v14;
    v15();

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = (void *)specialized Array._endMutation()();
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v6) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_25;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_25;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_25;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    int64_t v5 = (v12 - 1) & v12;
  }
  unint64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_25:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[29] = a4;
  v5[30] = v4;
  v5[27] = a2;
  v5[28] = a3;
  v5[26] = a1;
  uint64_t v6 = type metadata accessor for UUID();
  v5[31] = v6;
  v5[32] = *(void *)(v6 - 8);
  v5[33] = swift_task_alloc();
  return _swift_task_switch(NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:), 0, 0);
}

uint64_t NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:)()
{
  uint64_t v1 = v0[27];
  NearbyGroupCreationRequest.id.getter();
  v0[34] = NearbyGroupCreationRequest.members.getter();
  uint64_t v2 = *(void *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service
                 + 24);
  uint64_t v3 = *(void *)(v1
                 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service
                 + 32);
  uint64_t v4 = __swift_project_boxed_opaque_existential_1((void *)(v1+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service), v2);
  v0[22] = v2;
  v0[23] = *(void *)(v3 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 19);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(boxed_opaque_existential_1, v4, v2);
  specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(v0 + 19, 1, (uint64_t)(v0 + 8));
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[9];
  v0[35] = v7;
  uint64_t v8 = v0[10];
  uint64_t v9 = v0[11];
  outlined init with take of String?((uint64_t)(v0 + 12), (uint64_t)(v0 + 24));
  outlined release of String?((uint64_t)(v0 + 24));
  v0[2] = v6;
  v0[3] = v7;
  v0[4] = v8;
  v0[5] = v9;
  v0[6] = 0xD000000000000012;
  v0[7] = 0x80000001000DB7B0;
  unint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized static Pseudonym.reusable(for:configuration:)
                                                 + async function pointer to specialized static Pseudonym.reusable(for:configuration:));
  int64_t v10 = (void *)swift_task_alloc();
  v0[36] = v10;
  *int64_t v10 = v0;
  v10[1] = NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:);
  return v12((uint64_t)(v0 + 19), (uint64_t)(v0 + 2));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(uint64_t, uint64_t, void *, id, uint64_t, uint64_t);
  id v8;
  void *v9;
  void (*v10)(void);
  void *v11;
  uint64_t (*v12)(void *);
  uint64_t v14;
  void *v15;
  uint64_t v16;

  uint64_t v1 = v0[38];
  uint64_t v2 = v0[33];
  uint64_t v4 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v6 = (void *)v0[27];
  int64_t v5 = v0[28];
  unint64_t v14 = v0[34];
  uint64_t v15 = (void *)v0[26];
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 19));
  v0[17] = type metadata accessor for Pseudonym();
  v0[18] = lazy protocol witness table accessor for type Pseudonym and conformance Pseudonym(&lazy protocol witness table cache variable for type Pseudonym and conformance Pseudonym, (void (*)(uint64_t))type metadata accessor for Pseudonym);
  v0[14] = v1;
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, void *, id, uint64_t, uint64_t))(v3 + 432);
  uint64_t v8 = v6;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?(v5);
  uint64_t v9 = (void *)v7(v2, v14, v0 + 14, v8, v5, v4);
  int64_t v10 = *(void (**)(void))((swift_isaMask & *v9) + 0x1E0);
  uint64_t v11 = v9;
  v10();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);

  swift_task_dealloc();
  unint64_t v12 = (uint64_t (*)(void *))v0[1];
  return v12(v11);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  swift_bridgeObjectRelease();
  uint64_t v1 = v0[28];
  uint64_t v3 = (void *)v0[26];
  uint64_t v2 = (void *)v0[27];
  (*(void (**)(void, void))(v0[32] + 8))(v0[33], v0[31]);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v1);

  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 19));
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 296) = v1;
  swift_task_dealloc();
  if (v1)
  {
    int64_t v5 = NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 304) = a1;
    int64_t v5 = NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:);
  }
  return _swift_task_switch(v5, 0, 0);
}

char *NearbyGroupHost.__allocating_init(id:members:localMember:idsService:localMemberToken:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  return NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)(a1, a2, a3, a4, a5, a6);
}

char *NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v124 = a6;
  v126 = (uint64_t (*)(uint64_t))a5;
  id v114 = a4;
  uint64_t v127 = a3;
  uint64_t v109 = a2;
  uint64_t v128 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>.Publisher);
  uint64_t v120 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v119 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v117 = v11;
  uint64_t v118 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v12 - 8);
  unint64_t v122 = (char *)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v113 = (void *)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v112 = *(v113 - 1);
  __chkstk_darwin(v113);
  uint64_t v111 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v15);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v16 - 8);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v21 = &v7[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken];
  *(void *)char v21 = 0;
  *((void *)v21 + 1) = 0;
  uint64_t v22 = &v7[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost__state];
  LOBYTE(v132) = 0;
  uint64_t v23 = v7;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v20, v17);
  *(void *)&v23[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_connection] = 0;
  *(void *)&v23[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_incomingMessageListenerTask] = 0;
  *(void *)&v23[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_cancellables] = &_swiftEmptySetSingleton;
  *(void *)&v23[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_firewall] = 0;
  uint64_t v123 = v10;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v125 = v9;
  uint64_t v116 = v10 + 16;
  id v115 = v24;
  v24(&v23[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_id], v128, v9);
  id v25 = [self anonymousListener];
  *(void *)&v23[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_listener] = v25;
  swift_beginAccess();
  v131[0] = v109;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
  Published.init(initialValue:)();
  swift_endAccess();
  type metadata accessor for OS_dispatch_queue();
  v132 = (void *)_typeName(_:qualified:)();
  uint64_t v133 = v26;
  v27._uint64_t countAndFlagsBits = 46;
  v27._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v132 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type Pseudonym and conformance Pseudonym((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void *))(v112 + 104))(v111, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v113);
  *(void *)&v23[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v29 = v114;
  *(void *)&v23[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_idsService] = v114;
  id v30 = v126;
  outlined init with copy of PseudonymProtocol(v127, (uint64_t)&v23[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMember]);
  id v114 = v29;

  id v31 = (objc_class *)type metadata accessor for NearbyGroupHost();
  v129.receiver = v23;
  v129.super_class = v31;
  uint64_t v32 = objc_msgSendSuper2(&v129, "init");
  uint64_t v33 = v32;
  if (v30)
  {
    uint64_t v34 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v32) + 0x100);
    uint64_t v35 = v32;
    uint64_t v36 = outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?((uint64_t)v30);
    uint64_t v37 = v34(v36);
    uint64_t v38 = v30(v37);
    uint64_t v40 = v39;
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v30);
    swift_bridgeObjectRelease();
    unint64_t v41 = (void *)((char *)v35
                   + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken);
    swift_beginAccess();
    *unint64_t v41 = v38;
    v41[1] = v40;
  }
  else
  {
    uint64_t v42 = v32;
    if (_TUIsInternalInstall() && (v132 = 0, IMGetConferenceSettings(), (uint64_t v43 = v132) != 0))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      unsigned int v113 = v43;
    }
    else
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      unsigned int v113 = 0;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    os_log_type_t v44 = *(void **)((char *)v42 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
    id v45 = objc_allocWithZone((Class)APSConnection);
    id v46 = v44;
    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v49 = [v45 initWithEnvironmentName:v47 namedDelegatePort:v48 queue:v46];

    if (v49 && (id v50 = [v49 publicToken]) != 0)
    {
      uint64_t v51 = v50;
      uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v54 = v53;

      outlined copy of Data._Representation(v52, v54);
      v55.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v50 = (id)outlined consume of Data._Representation(v52, v54);
    }
    else
    {
      v55.super.Class isa = 0;
      uint64_t v52 = 0;
      unint64_t v54 = 0xF000000000000000;
    }
    (*(void (**)(id))((swift_isaMask & *v42) + 0x100))(v50);
    NSString v56 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unint64_t v57 = (void *)IDSCopyIDForTokenWithID();

    if (v57)
    {
      uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v60 = v59;

      outlined consume of Data?(v52, v54);
    }
    else
    {

      outlined consume of Data?(v52, v54);
      uint64_t v58 = 0;
      uint64_t v60 = 0;
    }
    uint64_t v61 = (void *)((char *)v42
                   + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken);
    swift_beginAccess();
    *uint64_t v61 = v58;
    v61[1] = v60;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v62 = type metadata accessor for Logger();
  __swift_project_value_buffer(v62, (uint64_t)static Log.host);
  uint64_t v63 = v33;
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v66 = (uint8_t *)swift_slowAlloc();
    v130[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v66 = 136315138;
    id v67 = (uint64_t *)&v63[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_localMemberToken];
    swift_beginAccess();
    uint64_t v68 = v67[1];
    if (v68)
    {
      v131[0] = *v67;
      v131[1] = v68;
      swift_bridgeObjectRetain();
      uint64_t v69 = String.init<A>(reflecting:)();
      unint64_t v71 = v70;
    }
    else
    {
      unint64_t v71 = 0xE300000000000000;
      uint64_t v69 = 7104878;
    }
    v131[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v71, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v64, v65, "Provisioning token for localMember %s", v66, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v72 = [objc_allocWithZone((Class)NSLock) init];
  [v72 lock];
  uint64_t v73 = v63;
  uint64_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v76 = (uint8_t *)swift_slowAlloc();
    v131[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v76 = 136315138;
    v130[0] = (uint64_t)v73;
    uint64_t v77 = v73;
    uint64_t v78 = String.init<A>(reflecting:)();
    v130[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v74, v75, "%s Setting up incomingMessageListener", v76, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v80 = v128;
  uint64_t v81 = v125;
  uint64_t v82 = v123;
  uint64_t v83 = type metadata accessor for TaskPriority();
  uint64_t v84 = *(void *)(v83 - 8);
  uint64_t v85 = *(void **)(v84 + 56);
  uint64_t v86 = (uint64_t)v122;
  uint64_t v123 = v83;
  unsigned int v113 = v85;
  uint64_t v112 = v84 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v85)(v122, 1, 1);
  uint64_t v87 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v88 = v118;
  v115(v118, v80, v81);
  unint64_t v89 = (*(unsigned __int8 *)(v82 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
  unint64_t v90 = (v117 + v89 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v91 = (char *)swift_allocObject();
  uint64_t v92 = v81;
  uint64_t v93 = v82;
  uint64_t v94 = (uint64_t)v91;
  *((void *)v91 + 2) = 0;
  *((void *)v91 + 3) = 0;
  uint64_t v95 = v114;
  *((void *)v91 + 4) = v72;
  *((void *)v91 + 5) = v95;
  (*(void (**)(char *, char *, uint64_t))(v93 + 32))(&v91[v89], v88, v92);
  *(void *)(v94 + v90) = v87;
  uint64_t v96 = v86;
  id v97 = v95;
  id v98 = v72;
  uint64_t v99 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v86, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:), v94);
  uint64_t v100 = (uint64_t *)&v73[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_incomingMessageListenerTask];
  swift_beginAccess();
  *uint64_t v100 = v99;
  swift_release();
  [v98 lock];
  closure #2 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)(v73);
  id v101 = [v98 unlock];
  v102 = v119;
  (*(void (**)(id))((swift_isaMask & *(void *)v73) + 0xD0))(v101);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Published<Set<NearbyGroupMember>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<NearbyGroupMember>>.Publisher);
  uint64_t v103 = v121;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v120 + 8))(v102, v103);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v104 = *(void **)&v73[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_listener];
  [v104 setDelegate:v73];
  [v104 resume];
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v113)(v96, 1, 1, v123);
  os_log_type_t v105 = (void *)swift_allocObject();
  v105[2] = 0;
  v105[3] = 0;
  v105[4] = v73;
  v105[5] = v97;
  id v106 = v97;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v96, (uint64_t)&async function pointer to partial apply for closure #4 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:), (uint64_t)v105);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v126);

  __swift_destroy_boxed_opaque_existential_0Tm(v127);
  (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v128, v125);
  return v73;
}

uint64_t closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[17] = a6;
  v7[18] = a7;
  v7[15] = a4;
  v7[16] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent?);
  v7[19] = swift_task_alloc();
  v7[20] = swift_task_alloc();
  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0);
  v7[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent(0);
  v7[22] = v8;
  v7[23] = *(void *)(v8 - 8);
  v7[24] = swift_task_alloc();
  v7[25] = swift_task_alloc();
  v7[26] = swift_task_alloc();
  v7[27] = swift_task_alloc();
  v7[28] = swift_task_alloc();
  v7[29] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  v7[30] = swift_task_alloc();
  return _swift_task_switch(closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:), 0, 0);
}

uint64_t closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)()
{
  uint64_t v1 = *(void *)(v0 + 128);
  [*(id *)(v0 + 120) unlock];
  *(void *)(v0 + 72) = *(void *)(v1
                                   + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_incomingMessages);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner);
  uint64_t v2 = swift_allocObject();
  swift_retain();
  uint64_t v3 = (_DWORD *)swift_slowAlloc();
  *(void *)(v2 + 16) = v3;
  *(void *)(v2 + 24) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = static Subscribers.Demand.none.getter();
  *uint64_t v3 = 0;
  *(void *)(v0 + 64) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner and conformance _PublisherElements<A>.Iterator.Inner, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner);
  Publisher.subscribe<A>(_:)();
  swift_release();
  *(void *)(v0 + 80) = v2;
  swift_beginAccess();
  return _swift_task_switch(closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[10];
  v0[31] = v1;
  uint64_t v2 = swift_task_alloc();
  v0[32] = v2;
  *(void *)(v2 + 16) = v0 + 10;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[33] = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:);
  uint64_t v5 = v0[29];
  uint64_t v4 = v0[30];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v4, &async function pointer to partial apply for specialized closure #2 in _PublisherElements.Iterator.next(), v2, partial apply for specialized closure #1 in _PublisherElements.Iterator.next(), v1, 0, 0, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t Strong;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v51;
  os_log_type_t v52;
  NSObject *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;

  NSData v55 = v0;
  uint64_t v1 = v0[30];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    swift_release();
    if ((static Task<>.isCancelled.getter() & 1) == 0)
    {
      if (one-time initialization token for host != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)static Log.host);
      swift_retain_n();
      uint64_t v4 = Logger.logObject.getter();
      uint64_t v5 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        unint64_t v54 = swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 136315138;
        swift_beginAccess();
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        if (Strong)
        {
          v0[12] = Strong;
          type metadata accessor for NearbyGroupHost();
          uint64_t v8 = String.init<A>(reflecting:)();
          uint64_t v10 = v9;
        }
        else
        {
          uint64_t v8 = 7104878;
          uint64_t v10 = 0xE300000000000000;
        }
        v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s stopped listening for incoming messages. This shouldn't ever happen until cancellation.", v6, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
    }
LABEL_30:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v43 = (uint64_t (*)(void))v0[1];
    return v43();
  }
  uint64_t v11 = *(void **)(v1 + *(int *)(v2 + 48));
  outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(v1, v0[28], type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  uint64_t v12 = (void *)voucher_copy();
  if (v11)
  {
    uint64_t v13 = v11;
    uint64_t v14 = (void *)voucher_adopt();
  }
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(v0[28], v0[27], type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v16 = v0[27];
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(v16, v0[21], type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
    if ((static UUID.== infix(_:_:)() & 1) == 0 || (uint64_t v17 = swift_unknownObjectWeakLoadStrong()) == 0)
    {
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v0[21], type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      if (v12)
      {
        uint64_t v40 = v12;
        unint64_t v41 = (void *)voucher_adopt();
      }
      uint64_t v42 = v0[28];

      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v42, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
      swift_release();
      goto LABEL_30;
    }
    uint64_t v18 = (void *)v17;
    uint64_t v19 = v0[34];
    uint64_t v20 = v0[21];
    char v21 = swift_task_alloc();
    *(void *)(v21 + 16) = v18;
    *(void *)(v21 + 24) = v20;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v22 = v0[21];

    swift_task_dealloc();
    outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v22, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
    if (v19)
    {
      if (one-time initialization token for group != -1) {
        swift_once();
      }
      uint64_t v23 = v0[28];
      uint64_t v24 = v0[24];
      id v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Log.group);
      outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(v23, v24, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v26 = Logger.logObject.getter();
      Swift::String v27 = static os_log_type_t.error.getter();
      Swift::String v28 = os_log_type_enabled(v26, v27);
      uint64_t v29 = v0[24];
      if (v28)
      {
        uint64_t v52 = v27;
        unint64_t v53 = v26;
        uint64_t v51 = v0 + 13;
        id v31 = v0[22];
        id v30 = v0[23];
        uint64_t v32 = v0[19];
        uint64_t v33 = v0[20];
        uint64_t v34 = swift_slowAlloc();
        v0[13] = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136315394;
        outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(v29, v33, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v33, 0, 1, v31);
        outlined init with copy of (String, Any)(v33, v32, &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v32, 1, v31) == 1)
        {
          uint64_t v35 = 7104878;
          uint64_t v36 = 0xE300000000000000;
        }
        else
        {
          id v45 = v0[25];
          os_log_type_t v44 = v0[26];
          outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(v0[19], v44, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
          outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(v44, v45, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
          uint64_t v35 = String.init<A>(reflecting:)();
          uint64_t v36 = v46;
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v44, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
        }
        NSString v47 = v0[24];
        outlined destroy of Any?(v0[20], &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent?);
        *(void *)(v34 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v51);
        swift_bridgeObjectRelease();
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v47, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
        *(_WORD *)(v34 + 12) = 2080;
        v0[14] = v19;
        swift_errorRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        NSString v48 = String.init<A>(reflecting:)();
        *(void *)(v34 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v51);
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v53, v52, "Failed to handle event: %s, reason: %s", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        if (!v12) {
          goto LABEL_21;
        }
      }
      else
      {
        swift_errorRelease();
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v29, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
        swift_errorRelease();
        swift_errorRelease();

        if (!v12) {
          goto LABEL_21;
        }
      }
    }
    else if (!v12)
    {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v16, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  if (v12)
  {
LABEL_20:
    uint64_t v37 = v12;
    uint64_t v38 = (void *)voucher_adopt();
  }
LABEL_21:
  uint64_t v39 = v0[28];

  outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v39, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  return _swift_task_switch(closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:), 0, 0);
}

void NearbyGroupHost.handle(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.MembershipMutation?);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v91 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v83 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v86 = (uint64_t)&v83 - v11;
  __chkstk_darwin(v10);
  uint64_t v87 = ((char *)&v83 - v12);
  uint64_t v13 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0);
  uint64_t v92 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v88 = (uint64_t)&v83 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v89 = (uint64_t)&v83 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v93 = (uint64_t)&v83 - v22;
  __chkstk_darwin(v21);
  unint64_t v90 = (uint64_t *)((char *)&v83 - v23);
  uint64_t v24 = type metadata accessor for DispatchPredicate();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  Swift::String v27 = (void **)((char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::String v28 = *(void **)((char *)v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  *Swift::String v27 = v28;
  (*(void (**)(void *, void, uint64_t))(v25 + 104))(v27, enum case for DispatchPredicate.onQueue(_:), v24);
  id v29 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v25 + 8))(v27, v24);
  if ((v28 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v95 = v13;
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = (void *)IDSCopyAddressDestinationForDestination();

  uint64_t v32 = (void *)IDSCopyRawAddressForDestination();
  if (!v32)
  {
    if (one-time initialization token for host == -1)
    {
LABEL_8:
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Log.host);
      outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(a1, (uint64_t)v16, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      NSString v47 = v2;
      NSString v48 = Logger.logObject.getter();
      int v49 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v48, (os_log_type_t)v49))
      {
        uint64_t v87 = v48;
        LODWORD(v93) = v49;
        uint64_t v50 = swift_slowAlloc();
        uint64_t v51 = (void *)swift_slowAlloc();
        uint64_t v94 = swift_slowAlloc();
        uint64_t v98 = v94;
        *(_DWORD *)uint64_t v50 = 138412546;
        uint64_t v96 = (uint64_t)v47;
        uint64_t v52 = v47;
        unint64_t v90 = &v97;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v51 = v47;

        *(_WORD *)(v50 + 12) = 2080;
        outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation((uint64_t)v16, (uint64_t)v9, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
        uint64_t v53 = v92;
        uint64_t v54 = v95;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v9, 0, 1, v95);
        uint64_t v55 = (uint64_t)v91;
        outlined init with copy of (String, Any)((uint64_t)v9, (uint64_t)v91, &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.MembershipMutation?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v55, 1, v54) == 1)
        {
          uint64_t v56 = 7104878;
          unint64_t v57 = 0xE300000000000000;
        }
        else
        {
          uint64_t v76 = v55;
          uint64_t v77 = v89;
          outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(v76, v89, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
          outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(v77, v88, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
          uint64_t v56 = String.init<A>(reflecting:)();
          unint64_t v57 = v78;
          outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v77, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
        }
        NSString v48 = v87;
        outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.MembershipMutation?);
        uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization((uint64_t)v16, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
        _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v93, "%@ Failed to convert ID into Raw IDS Destination: %s", (uint8_t *)v50, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization((uint64_t)v16, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      }

      lazy protocol witness table accessor for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors();
      swift_allocError();
      unsigned char *v79 = 3;
      swift_willThrow();
      return;
    }
LABEL_27:
    swift_once();
    goto LABEL_8;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v33 = (objc_class *)type metadata accessor for NearbyGroupMember();
  id v34 = objc_allocWithZone(v33);
  swift_bridgeObjectRetain();
  uint64_t v35 = (void *)NearbyGroupMember.init(handle:tokenID:)();
  id v36 = objc_allocWithZone(v33);
  swift_bridgeObjectRetain();
  uint64_t v37 = (char *)NearbyGroupMember.init(handle:tokenID:)();
  uint64_t v38 = *(uint64_t (**)(void))((swift_isaMask & *v2) + 0xB8);
  uint64_t v39 = v38();
  char v40 = specialized Set.contains(_:)(v35, v39);
  uint64_t v41 = swift_bridgeObjectRelease();
  if ((v40 & 1) != 0
    || (uint64_t v42 = ((uint64_t (*)(uint64_t))v38)(v41),
        char v43 = specialized Set.contains(_:)(v37, v42),
        swift_bridgeObjectRelease(),
        (v43 & 1) != 0))
  {
    uint64_t v44 = a1 + *(int *)(v95 + 24);
    com_apple_SharePlay_NearbyInvitationsService::NearbyGroupHostIDSService::MessageEvent::Member v45 = *(com_apple_SharePlay_NearbyInvitationsService::NearbyGroupHostIDSService::MessageEvent::Member *)v44;
    if (*(unsigned char *)(v44 + 32)) {
      NearbyGroupHost.handle(removedMember:)(v45);
    }
    else {
      NearbyGroupHost.handle(addedMember:)(v45);
    }
  }
  else
  {
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)static Log.group);
    uint64_t v59 = (uint64_t)v90;
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(a1, (uint64_t)v90, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
    uint64_t v60 = v93;
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(a1, v93, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
    uint64_t v61 = v2;
    uint64_t v62 = Logger.logObject.getter();
    int v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, (os_log_type_t)v63))
    {
      int v84 = v63;
      uint64_t v91 = v37;
      uint64_t v94 = (uint64_t)v35;
      uint64_t v64 = swift_slowAlloc();
      os_log_type_t v65 = (void *)swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      uint64_t v98 = v85;
      *(_DWORD *)uint64_t v64 = 138412802;
      uint64_t v96 = (uint64_t)v61;
      uint64_t v66 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v83 = v65;
      *os_log_type_t v65 = v2;

      *(_WORD *)(v64 + 12) = 2080;
      uint64_t v67 = v95;
      uint64_t v68 = (uint64_t *)(v59 + *(int *)(v95 + 20));
      uint64_t v69 = *v68;
      unint64_t v70 = v68[1];
      swift_bridgeObjectRetain();
      uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v59, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      *(_WORD *)(v64 + 22) = 2080;
      uint64_t v71 = (uint64_t)v87;
      outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(v93, (uint64_t)v87, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      uint64_t v72 = v92;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v92 + 56))(v71, 0, 1, v67);
      uint64_t v73 = v86;
      outlined init with copy of (String, Any)(v71, v86, &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.MembershipMutation?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v73, 1, v67) == 1)
      {
        uint64_t v74 = 7104878;
        unint64_t v75 = 0xE300000000000000;
      }
      else
      {
        uint64_t v80 = v89;
        outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(v73, v89, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
        outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(v80, v88, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
        uint64_t v74 = String.init<A>(reflecting:)();
        unint64_t v75 = v81;
        outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v80, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      }
      outlined destroy of Any?(v71, &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.MembershipMutation?);
      uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v93, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v84, "%@ couldn't find member %s in membership list. Failing membership mutation: %s", (uint8_t *)v64, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v35 = (void *)v94;
      uint64_t v37 = v91;
    }
    else
    {

      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v59, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
      outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(v60, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
    }
    lazy protocol witness table accessor for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors();
    swift_allocError();
    *uint64_t v82 = 0;
    swift_willThrow();
  }
}

void closure #2 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)(void *a1)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    type metadata accessor for NearbyGroupHost();
    id v7 = v3;
    uint64_t v8 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s Finished setting up incomingMessageListener", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void closure #3 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.group);
    id v3 = v1;
    swift_bridgeObjectRetain_n();
    uint64_t v4 = v3;
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v20 = v6;
      uint64_t v7 = swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412802;
      unint64_t v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v1;

      *(_WORD *)(v7 + 12) = 2080;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
      uint64_t v10 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, (uint64_t *)&v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v12 = swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 22) = 2080;
      if ((*(uint64_t (**)(uint64_t))((swift_isaMask & *v9) + 0x150))(v12))
      {
        type metadata accessor for NearbyGroupHostConnection();
        uint64_t v13 = String.init<A>(reflecting:)();
        unint64_t v15 = v14;
      }
      else
      {
        unint64_t v15 = 0xE300000000000000;
        uint64_t v13 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, (uint64_t *)&v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v20, "%@ learned about updated members: %s, updating client %s", (uint8_t *)v7, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v16 = (*(uint64_t (**)(void))((swift_isaMask & *v4) + 0x150))();
    if (v16)
    {
      uint64_t v17 = (void *)v16;
      XPCHostConnection.clientObject.getter();

      uint64_t v18 = v21;
      type metadata accessor for NearbyGroupMember();
      lazy protocol witness table accessor for type Pseudonym and conformance Pseudonym((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (void (*)(uint64_t))&type metadata accessor for NearbyGroupMember);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      [v18 setMembers:isa];

      swift_unknownObjectRelease();
    }
  }
}

uint64_t closure #4 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 72) = a4;
  *(void *)(v5 + 80) = a5;
  return _swift_task_switch(closure #4 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:), 0, 0);
}

uint64_t closure #4 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)()
{
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[11] = __swift_project_value_buffer(v1, (uint64_t)static Log.group);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching firewall", v4, 2u);
    swift_slowDealloc();
  }
  os_log_type_t v6 = (void *)v0[9];
  uint64_t v5 = v0[10];

  outlined init with copy of PseudonymProtocol(v5 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service, (uint64_t)(v0 + 2));
  type metadata accessor for NearbyGroupFirewall();
  swift_allocObject();
  id v7 = v6;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[12] = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #4 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:);
  uint64_t v9 = v0[9];
  return NearbyGroupFirewall.init(group:service:)(v9, (uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  (*(void (**)(void))((swift_isaMask & **(void **)(v0 + 72)) + 0x1A0))(*(void *)(v0 + 112));
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Fetched firewall", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  void *v11;
  uint64_t v12;

  uint64_t v11 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = v0[13];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v10 = v5;
    v0[7] = v3;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    os_log_type_t v6 = String.init<A>(reflecting:)();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to fetch firewall, error: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t closure #4 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 104) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = closure #4 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:);
  }
  else
  {
    *(void *)(v4 + 112) = a1;
    uint64_t v5 = closure #4 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:);
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t NearbyGroupHost.join(withNearbyGroupMembers:)(void (*a1)(uint64_t, uint64_t, uint64_t, void))
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)((char *)v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  void *v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    if (one-time initialization token for group == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.group);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Received join message from client. We're now synced", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x128))(1);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x100))(v14);
  uint64_t v17 = v16;
  uint64_t v18 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xB8))();
  a1(v15, v17, v18, 0);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t NearbyGroupHost.addMember(nearbyGroupMember:completion:)(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v12 = *(void **)((char *)v4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v14)
  {
    uint64_t v44 = a2;
    if (one-time initialization token for group == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v43[2] = a3;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Log.group);
  id v17 = a1;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    v43[1] = v16;
    v46[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    id v22 = objc_msgSend(v17, "description", v20 + 4);
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    id v45 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Received request to add member: %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(uint64_t *__return_ptr))((swift_isaMask & *v4) + 0xE8))(v46);
  uint64_t v26 = v47;
  uint64_t v27 = v48;
  __swift_project_boxed_opaque_existential_1(v46, v47);
  (*(void (**)(uint64_t, uint64_t))(v27 + 56))(v26, v27);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v46);
  Swift::String v28 = *(uint64_t (**)(uint64_t *))((swift_isaMask & *v4) + 0xC8);
  id v29 = v17;
  NSString v30 = (void (*)(uint64_t *, void))v28(v46);
  char v31 = specialized Set._Variant.insert(_:)(&v45, v29);

  v30(v46, 0);
  if (v31)
  {
    NearbyGroupHostIDSService.distributeAdd(for:addingMember:)(v4, v29);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1000D61E0;
    *(void *)(inited + 32) = v29;
    v46[0] = inited;
    specialized Array._endMutation()();
    unint64_t v39 = v46[0];
    id v40 = v29;
    uint64_t v41 = specialized Set.init<A>(_:)(v39);
    swift_bridgeObjectRelease();
    NearbyGroupHostIDSService.distributeGroupInitialization(for:to:)(v4, v41);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = v4;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315138;
      id v45 = (id)(*(uint64_t (**)(void))((swift_isaMask & *v32) + 0xB8))();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
      uint64_t v36 = String.init<A>(reflecting:)();
      id v45 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Ignoring addMember since member is already part of NearbyGroup: %s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  return v44(0);
}

void NearbyGroupHost.kickMember(nearbyGroupMember:completion:)(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v12 = *(void **)((char *)v4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    if (one-time initialization token for group == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Log.group);
  uint64_t v16 = a1;
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v48 = a3;
  if (v19)
  {
    uint64_t v47 = (void (*)(void))v15;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 138412290;
    v50[0] = (uint64_t)v16;
    uint64_t v21 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v46 = v16;

    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received request to kick member: %@", v20, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v17 = v16;
  }

  id v22 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))((swift_isaMask & *v4) + 0xC8))(v50);
  uint64_t v23 = (void *)specialized Set._Variant.remove(_:)(v16);
  v22(v50, 0);
  if (v23)
  {
    NearbyGroupHostIDSService.distributeRemove(for:removingMember:)(v4, v16);
    ((void (*)(void))a2)(0);
  }
  else
  {
    unint64_t v24 = v4;
    unint64_t v25 = v16;
    uint64_t v26 = v24;
    uint64_t v27 = v4;
    Swift::String v28 = v25;
    id v29 = v26;
    NSString v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    int v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v47 = a2;
      uint64_t v35 = (void *)v34;
      uint64_t v46 = (void *)swift_slowAlloc();
      uint64_t v49 = (uint64_t)v29;
      v50[0] = (uint64_t)v46;
      *(_DWORD *)uint64_t v33 = 138412802;
      os_log_t v45 = v30;
      uint64_t v36 = v29;
      int v44 = v32;
      unint64_t v37 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v35 = v27;

      *(_WORD *)(v33 + 12) = 2112;
      uint64_t v49 = (uint64_t)v28;
      uint64_t v38 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v35[1] = v28;

      *(_WORD *)(v33 + 22) = 2080;
      (*(void (**)(void))((swift_isaMask & *v37) + 0xB8))();
      type metadata accessor for NearbyGroupMember();
      lazy protocol witness table accessor for type Pseudonym and conformance Pseudonym((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (void (*)(uint64_t))&type metadata accessor for NearbyGroupMember);
      uint64_t v39 = Set.description.getter();
      unint64_t v41 = v40;
      swift_bridgeObjectRelease();
      uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      NSString v30 = v45;
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v44, "%@ Not able to kick member since member isn't found in membership list, member: %@, list: %s", (uint8_t *)v33, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      a2 = v47;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    lazy protocol witness table accessor for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors();
    swift_allocError();
    unsigned char *v42 = 2;
    a2();
    swift_errorRelease();
  }
}

uint64_t NearbyGroupHost.leave(completion:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)&v2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue];
  void *v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  char v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v10)
  {
    if (one-time initialization token for group == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.group);
  os_log_type_t v12 = v2;
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v20[1] = a2;
    id v17 = (void *)v16;
    *(_DWORD *)uint64_t v15 = 138412290;
    id v22 = v12;
    os_log_type_t v18 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v17 = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%@ Received request to leave", v15, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v13 = v12;
  }

  NearbyGroupHostIDSService.distributeLeave(for:)(v12);
  (*(void (**)(void))((swift_isaMask & (uint64_t)v12->isa) + 0x1D8))();
  return v21(0);
}

Swift::Void __swiftcall NearbyGroupHost.invalidate()()
{
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.group);
  uint64_t v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    uint64_t v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v2;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ invalidating", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x128))(2);
  (*(void (**)(void))((swift_isaMask & *v2) + 0x158))(0);
}

Swift::Void __swiftcall NearbyGroupHost.distributeGroupInitialization()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = *(void *)&v0[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = partial apply for closure #1 in NearbyGroupHost.distributeGroupInitialization();
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_2;
  char v10 = _Block_copy(aBlock);
  uint64_t v11 = v0;
  static DispatchQoS.unspecified.getter();
  v12[1] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type Pseudonym and conformance Pseudonym(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
}

void closure #1 in NearbyGroupHost.distributeGroupInitialization()(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
  NearbyGroupHostIDSService.distributeGroupInitialization(for:to:)(a1, v2);
  swift_bridgeObjectRelease();
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.group);
  osos_log_t log = a1;
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    uint64_t v8 = oslog;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = a1;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Successfully distributed groupInitialization", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t NearbyGroupHost.connectionInfo.getter()
{
  uint64_t v1 = type metadata accessor for UUID();
  __chkstk_darwin(v1);
  uint64_t v4 = (*(uint64_t (**)(char *, uint64_t))(v3 + 16))((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_id);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0xB0))(v4);
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x100))(v5);
  id v6 = objc_allocWithZone((Class)type metadata accessor for NearbyGroupConnectionInfo());
  return NearbyGroupConnectionInfo.init(id:endpoint:localMember:)();
}

void NearbyGroupHost.init()()
{
}

id NearbyGroupHost.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbyGroupHost();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NearbyGroupHost.handle(addedMember:)(com_apple_SharePlay_NearbyInvitationsService::NearbyGroupHostIDSService::MessageEvent::Member addedMember)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v6 = *(void **)((char *)v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  void *v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    objc_allocWithZone((Class)type metadata accessor for NearbyGroupMember());
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = (void *)NearbyGroupMember.init(handle:tokenID:)();
    uint64_t v9 = *(uint64_t (**)(unsigned char *))((swift_isaMask & *v1) + 0xC8);
    id v10 = v8;
    uint64_t v11 = (void (*)(unsigned char *, void))v9(v13);
    specialized Set._Variant.insert(_:)(&v14, v10);

    v11(v13, 0);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NearbyGroupHost.handle(removedMember:)(com_apple_SharePlay_NearbyInvitationsService::NearbyGroupHostIDSService::MessageEvent::Member removedMember)
{
  uint64_t v2 = v1;
  uint64_t object = removedMember.token.value._object;
  uint64_t v4 = removedMember.handle._object;
  uint64_t countAndFlagsBits = (void *)removedMember.handle._countAndFlagsBits;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v10 = *(void **)((char *)v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  id v13 = *(void (**)(void *, uint64_t))(v7 + 8);
  os_log_type_t v12 = (void *)(v7 + 8);
  v13(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  id v14 = (objc_class *)type metadata accessor for NearbyGroupMember();
  objc_allocWithZone(v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t countAndFlagsBits = (void *)NearbyGroupMember.init(handle:tokenID:)();
  os_log_type_t v12 = &swift_isaMask;
  uint64_t v15 = *(void (**)(void))((swift_isaMask & *v1) + 0x100);
  v15();
  id v16 = objc_allocWithZone(v14);
  uint64_t object = (void *)NearbyGroupMember.init(handle:tokenID:)();
  uint64_t v17 = ((uint64_t (*)(void))v15)();
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x108))(v17);
  id v18 = objc_allocWithZone(v14);
  uint64_t v4 = (void *)NearbyGroupMember.init(handle:tokenID:)();
  if (static NSObject.== infix(_:_:)() & 1) != 0 || (static NSObject.== infix(_:_:)())
  {
    if (one-time initialization token for group == -1)
    {
LABEL_5:
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Log.group);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        id v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Removed member is localMember, invalidating session.", v22, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(void))((*v12 & *v2) + 0x1D8))();
      goto LABEL_8;
    }
LABEL_17:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v23 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))((swift_isaMask & *v1) + 0xC8))(v46);
  unint64_t v24 = (void *)specialized Set._Variant.remove(_:)(countAndFlagsBits);
  v23(v46, 0);

  if (v24)
  {
LABEL_8:

    return;
  }
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Log.group);
  uint64_t v26 = v2;
  id v27 = countAndFlagsBits;
  Swift::String v28 = v26;
  id v29 = v27;
  NSString v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  int v32 = v31;
  os_log_t v45 = v30;
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v33 = swift_slowAlloc();
    int v43 = v32;
    uint64_t v34 = v33;
    uint64_t v42 = (void *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    v46[0] = v44;
    *(_DWORD *)uint64_t v34 = 138412546;
    v41[1] = v34 + 12;
    uint64_t v47 = (uint64_t)v28;
    uint64_t v35 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v42 = v2;

    *(_WORD *)(v34 + 12) = 2080;
    uint64_t v47 = (uint64_t)v29;
    id v36 = v29;
    uint64_t v37 = String.init<A>(reflecting:)();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    uint64_t v39 = v45;
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v43, "%@ Couldn't find member %s to remove", (uint8_t *)v34, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  lazy protocol witness table accessor for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors();
  swift_allocError();
  unsigned char *v40 = 2;
  swift_willThrow();
}

Swift::Bool __swiftcall NearbyGroupHost.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized NearbyGroupHost.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

uint64_t closure #1 in NearbyGroupHost.listener(_:shouldAcceptNewConnection:)(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue);
  id v6 = objc_allocWithZone((Class)type metadata accessor for NearbyGroupHostConnection());
  swift_unknownObjectWeakInit();
  id v7 = a2;
  id v8 = v5;
  *a1 = XPCHostConnection.init(connection:queue:)();
  return _objc_release_x1();
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  id v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      id v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v5 = a1;
    char v6 = __CocoaSet.contains(_:)();

    if (v6)
    {
      uint64_t v7 = specialized Set._Variant._migrateToNative(_:removing:)();
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v8 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v9 = NSObject._rawHashValue(seed:)(v8);
  uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    goto LABEL_12;
  }
  type metadata accessor for NearbyGroupMember();
  id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    uint64_t v14 = ~v10;
    do
    {
      unint64_t v11 = (v11 + 1) & v14;
      if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_12;
      }
      id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
      char v16 = static NSObject.== infix(_:_:)();
    }
    while ((v16 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *v2;
  uint64_t v20 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v18 = v20;
  }
  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v11);
  specialized _NativeSet._delete(at:)(v11);
  *uint64_t v2 = v20;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  Swift::Int v4 = specialized _NativeSet.init(_:capacity:)(v3, v2);
  Swift::Int v16 = v4;
  Swift::Int v5 = *(void *)(v4 + 40);
  swift_retain();
  Swift::Int v6 = NSObject._rawHashValue(seed:)(v5);
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    type metadata accessor for NearbyGroupMember();
    id v9 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
    char v10 = static NSObject.== infix(_:_:)();

    if (v10)
    {
LABEL_6:
      swift_release();
      uint64_t v14 = *(void *)(*(void *)(v4 + 48) + 8 * v8);
      specialized _NativeSet._delete(at:)(v8);
      if (static NSObject.== infix(_:_:)())
      {
        *uint64_t v1 = v16;
        return v14;
      }
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v7;
      while (1)
      {
        unint64_t v8 = (v8 + 1) & v11;
        if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
        char v13 = static NSObject.== infix(_:_:)();

        if (v13) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          char v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *char v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        unint64_t v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        uint64_t v12 = NSObject._rawHashValue(seed:)(v10);

        char v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            BOOL v16 = *(void *)(v3 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *uint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  uint64_t v20 = __OFSUB__(v19, 1);
  os_log_type_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v10 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 56);
    do
    {
      Swift::Int v5 = *(v4 - 3);
      Swift::Int v6 = *(v4 - 2);
      Swift::Int v7 = *(v4 - 1);
      uint64_t v8 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v9, v5, v6, v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 4;
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

unint64_t lazy protocol witness table accessor for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHost.Errors and conformance NearbyGroupHost.Errors);
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NearbyGroupMember();
  lazy protocol witness table accessor for type Pseudonym and conformance Pseudonym((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (void (*)(uint64_t))&type metadata accessor for NearbyGroupMember);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        Swift::Int v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        specialized Set._Variant.insert(_:)(&v9, v6);
      }
    }
    else
    {
      Swift::Int v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type Pseudonym and conformance Pseudonym(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v4 = result;
  id v9 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    Swift::Int v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v5) {
      return v4;
    }
  }
  else
  {
    Swift::Int v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      return v4;
    }
  }
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        Swift::Int v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        Swift::Int v7 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      specialized Set._Variant.insert(_:)(&v8, v7);
      swift_release();
    }
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NearbyGroupHost()
{
  uint64_t result = type metadata singleton initialization cache for NearbyGroupHost;
  if (!type metadata singleton initialization cache for NearbyGroupHost) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100052A84()
{
  swift_unknownObjectWeakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100052ABC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return _swift_deallocObject(v0, v6, v5);
}

uint64_t partial apply for closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)(a1, v6, v7, v8, v9, v10, v11);
}

void partial apply for closure #3 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)()
{
}

uint64_t sub_100052CF4()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for closure #4 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  *(_OWORD *)(v2 + 72) = v3;
  return _swift_task_switch(closure #4 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:), 0, 0);
}

uint64_t sub_100052DE8()
{
  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for closure #1 in NearbyGroupHost.distributeGroupInitialization()()
{
  closure #1 in NearbyGroupHost.distributeGroupInitialization()(*(void **)(v0 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t specialized NearbyGroupHost.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.group);
  uint64_t v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    aBlock = v5;
    uint64_t v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    uint64_t v2 = v1;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Asked to accept new connection from %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v37 = 0;
  uint64_t v11 = *(NSObject **)&v2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService15NearbyGroupHost_queue];
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = &v37;
  uint64_t v12[3] = v5;
  void v12[4] = v2;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = partial apply for closure #1 in NearbyGroupHost.listener(_:shouldAcceptNewConnection:);
  *(void *)(v13 + 24) = v12;
  uint64_t v35 = partial apply for thunk for @callee_guaranteed () -> ();
  uint64_t v36 = v13;
  aBlock = _NSConcreteStackBlock;
  uint64_t v32 = 1107296256;
  uint64_t v33 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v34 = &block_descriptor_59;
  uint64_t v14 = _Block_copy(&aBlock);
  uint64_t v15 = v5;
  BOOL v16 = v2;
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = v37;
    if (!v37)
    {
      uint64_t v26 = v15;
      id v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        id v29 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v29 = 67109120;
        LODWORD(aBlock) = [v26 processIdentifier];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v27, v28, "NearbyGroupHostConnection could not be created; rejecting connection from PID %d.",
          v29,
          8u);
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v25 = 0;
      goto LABEL_14;
    }
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v16;
    *(void *)(v19 + 24) = v18;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = partial apply for closure #2 in NearbyGroupHost.listener(_:shouldAcceptNewConnection:);
    *(void *)(v20 + 24) = v19;
    uint64_t v35 = thunk for @callee_guaranteed () -> ()partial apply;
    uint64_t v36 = v20;
    aBlock = _NSConcreteStackBlock;
    uint64_t v32 = 1107296256;
    uint64_t v33 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v34 = &block_descriptor_69;
    os_log_type_t v21 = _Block_copy(&aBlock);
    id v22 = v18;
    uint64_t v23 = v16;
    id v24 = v22;
    swift_retain();
    swift_release();
    dispatch_sync(v11, v21);

    _Block_release(v21);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if ((v24 & 1) == 0)
    {
      uint64_t v25 = partial apply for closure #2 in NearbyGroupHost.listener(_:shouldAcceptNewConnection:);
LABEL_14:
      NSString v30 = v37;
      swift_release();

      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v25);
      return v18 != 0;
    }
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyGroupHost.State and conformance NearbyGroupHost.State()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHost.State and conformance NearbyGroupHost.State;
  if (!lazy protocol witness table cache variable for type NearbyGroupHost.State and conformance NearbyGroupHost.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHost.State and conformance NearbyGroupHost.State);
  }
  return result;
}

uint64_t sub_100053658(void **a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xD0))();
}

uint64_t sub_1000536B0(void **a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xE8))();
}

uint64_t sub_100053704(uint64_t a1, void **a2)
{
  outlined init with copy of PseudonymProtocol(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))((swift_isaMask & **a2) + 0xF0))(v4);
}

uint64_t sub_100053770@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x108))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000537D4(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0x110);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_100053854(void **a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x138))();
}

uint64_t sub_1000538B4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x150))();
  *a2 = result;
  return result;
}

uint64_t sub_100053918(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((swift_isaMask & **a2) + 0x158);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_100053988@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x168))();
  *a2 = result;
  return result;
}

uint64_t sub_1000539EC(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x170);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_100053A58@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x180))();
  *a2 = result;
  return result;
}

uint64_t sub_100053ABC(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x188);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_100053B28@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x198))();
  *a2 = result;
  return result;
}

uint64_t sub_100053B8C(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x1A0);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t ObjC metadata update function for NearbyGroupHost()
{
  return type metadata accessor for NearbyGroupHost();
}

void type metadata completion function for NearbyGroupHost()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Set<NearbyGroupMember>>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<NearbyGroupHost.State>();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void type metadata accessor for Published<Set<NearbyGroupMember>>()
{
  if (!lazy cache variable for type metadata for Published<Set<NearbyGroupMember>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Set<NearbyGroupMember>>);
    }
  }
}

void type metadata accessor for Published<NearbyGroupHost.State>()
{
  if (!lazy cache variable for type metadata for Published<NearbyGroupHost.State>)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<NearbyGroupHost.State>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for NearbyGroupHost.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100053EC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupHost.Errors()
{
  return &type metadata for NearbyGroupHost.Errors;
}

unsigned char *storeEnumTagSinglePayload for NearbyGroupHost.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100053FC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupHost.State()
{
  return &type metadata for NearbyGroupHost.State;
}

unint64_t lazy protocol witness table accessor for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member;
  if (!lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member;
  if (!lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvent.Member and conformance NearbyGroupHostIDSService.MessageEvent.Member);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Pseudonym and conformance Pseudonym(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005409C()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in NearbyGroupHost.listener(_:shouldAcceptNewConnection:)()
{
  return closure #1 in NearbyGroupHost.listener(_:shouldAcceptNewConnection:)(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000540E8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100054130()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #2 in NearbyGroupHost.listener(_:shouldAcceptNewConnection:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  unint64_t v2 = *(void **)(v0 + 24);
  int v3 = *(uint64_t (**)(void *))((swift_isaMask & *v1) + 0x158);
  id v4 = v2;
  return v3(v2);
}

uint64_t sub_1000541E0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in _PublisherElements.Iterator.next()()
{
  return specialized closure #1 in _PublisherElements.Iterator.next()();
}

uint64_t partial apply for specialized closure #2 in _PublisherElements.Iterator.next()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  return specialized closure #2 in _PublisherElements.Iterator.next()(a1, v4);
}

uint64_t outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void partial apply for closure #1 in closure #1 in NearbyGroupHost.init(id:members:localMember:idsService:localMemberToken:)()
{
  NearbyGroupHost.handle(_:)(*(void *)(v0 + 24));
}

uint64_t outlined consume of Set<NearbyGroupHostIDSService.MessageEvent.Member>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

id NIBluetoothSample.init(with:)(void *a1)
{
  id v2 = [a1 stableIdentifier];
  if (!v2)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.host);
    id v9 = a1;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CBDevice);
      id v9 = v9;
      uint64_t v13 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v15 = "Can't create NIBTSample for device: %s. No stableIdentifier.";
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v15, v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_14:
      return 0;
    }
LABEL_13:

    goto LABEL_14;
  }
  uint64_t v3 = v2;
  id v4 = [a1 model];
  if (!v4)
  {

    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.host);
    id v9 = a1;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CBDevice);
      id v9 = v9;
      uint64_t v17 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v15 = "Can't create NIBTSample for device: %s. No model.";
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  uint64_t v5 = v4;
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v7 = objc_msgSend(v6, "initWithRSSI:identifier:model:channel:machContinuousTimeSeconds:", v3, v5, objc_msgSend(a1, "bleChannel"), (double)(int)objc_msgSend(a1, "bleRSSI"), (double)mach_continuous_time());

  return v7;
}

uint64_t BluetoothScanner.Device.acquireScanRateAssertion()()
{
  long long v3 = *(_OWORD *)(v0 + 88);
  swift_retain();
  ((void (*)(uint64_t *__return_ptr))v3)(&v2);
  outlined release of IgnoreHashable<IgnoreEquatable<()>>((uint64_t)&v3);
  return v2;
}

uint64_t BluetoothScannerDiscoveryEngineDevice.hasInvitation.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

void *BluetoothScannerDiscoveryEngineDevice.sample.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

uint64_t BluetoothScannerDiscoveryEngineDevice.contact.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t BluetoothScannerDiscoveryEngineDevice.activityType.getter()
{
  return *(unsigned int *)(v0 + 48);
}

uint64_t BluetoothScannerDiscoveryEngineDevice.invitationCounter.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t BluetoothScannerDiscoveryEngineDevice.accountID.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BluetoothScannerDiscoveryEngineDevice.routeType.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t BluetoothScannerDiscoveryEngineDevice.init(stableIdentifier:hasInvitation:sample:contact:activityType:invitationCounter:accountID:routeType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(_DWORD *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a11;
  *(unsigned char *)(a9 + 80) = a12;
  return result;
}

uint64_t NearbyAdvertisement.init(scannerID:device:)(uint64_t a1, long long *a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)(a2 + 2), (uint64_t)v23, &demangling cache variable for type metadata for BluetoothScannerDiscoveryEngineDevice.ContactInfo?);
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)v23, (uint64_t)&v24, &demangling cache variable for type metadata for BluetoothScannerDiscoveryEngineDevice.ContactInfo?);
  if (*((void *)&v24 + 1) == 1)
  {
    outlined release of BluetoothScannerDiscoveryEngineDevice(a2);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    return 0;
  }
  else
  {
    outlined init with take of BluetoothScannerDiscoveryEngineDevice.ContactInfo(&v24, &v25);
    outlined init with take of BluetoothScannerDiscoveryEngineDevice.ContactInfo(&v25, &v26);
    uint64_t v19 = v2;
    if (*((void *)&v26 + 1))
    {
      uint64_t v17 = *((void *)&v26 + 1);
      uint64_t v18 = v26;
    }
    else
    {
      type metadata accessor for NearbyAdvertisement();
      uint64_t v10 = static NearbyAdvertisement.meContactID.getter();
      uint64_t v17 = v11;
      uint64_t v18 = v10;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    long long v21 = *a2;
    long long v22 = v21;
    outlined retain of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v23);
    outlined retain of String((uint64_t)&v22);
    uint64_t v16 = a1;
    v12._uint64_t countAndFlagsBits = 45;
    v12._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    uint64_t v20 = *((void *)a2 + 7);
    v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    LOBYTE(v21) = *((unsigned char *)a2 + 80);
    swift_bridgeObjectRetain();
    specialized Data.init<A>(_:)((uint64_t)&v21, (uint64_t)&v21 + 1);
    uint64_t v9 = dispatch thunk of NearbyAdvertisement.__allocating_init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)();
    outlined release of BluetoothScannerDiscoveryEngineDevice(a2);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v5);
  }
  return v9;
}

uint64_t BluetoothScannerDiscoveryEngineDevice.init(cbDevice:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized BluetoothScannerDiscoveryEngineDevice.init(cbDevice:)(a1, (uint64_t)v4);
  return outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)v4, a2, &demangling cache variable for type metadata for BluetoothScannerDiscoveryEngineDevice?);
}

__n128 BluetoothScanner.Device.cbDevice.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  long long v14 = *v1;
  *(_OWORD *)uint64_t v15 = v3;
  long long v4 = v1[3];
  *(_OWORD *)&v15[16] = v1[2];
  *(_OWORD *)uint64_t v16 = v4;
  *(_OWORD *)&v16[16] = v1[4];
  char v5 = *((unsigned char *)v1 + 80);
  char v17 = v5;
  long long v6 = v14;
  uint64_t v7 = *(void *)&v15[24];
  int v8 = v4;
  __n128 v12 = *(__n128 *)&v16[8];
  long long v13 = *(_OWORD *)&v15[8];
  uint64_t v9 = *(void *)&v16[24];
  char v10 = v15[0] & 1;
  outlined retain of IgnoreHashable<IgnoreEquatable<BluetoothScannerDiscoveryEngineDevice>>((uint64_t)&v14);
  *(_OWORD *)a1 = v6;
  *(unsigned char *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 24) = v13;
  *(void *)(a1 + 40) = v7;
  *(_DWORD *)(a1 + 48) = v8;
  __n128 result = v12;
  *(__n128 *)(a1 + 56) = v12;
  *(void *)(a1 + 72) = v9;
  *(unsigned char *)(a1 + 80) = v5;
  return result;
}

__n128 property wrapper backing initializer of BluetoothScanner.Device.cbDevice@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = *(_DWORD *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 72);
  char v6 = *(unsigned char *)(a1 + 80);
  char v7 = *(unsigned char *)(a1 + 16) & 1;
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = v3;
  *(_DWORD *)(a2 + 48) = v4;
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(a2 + 56) = result;
  *(void *)(a2 + 72) = v5;
  *(unsigned char *)(a2 + 80) = v6;
  return result;
}

uint64_t _PublisherElements.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t key path getter for BluetoothScanner.Device.cbDevice : BluetoothScanner.Device@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  int v4 = *(void **)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 72);
  char v9 = *(unsigned char *)(a1 + 80);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = v8;
  *(unsigned char *)(a2 + 80) = v9;
  id v10 = v4;
  swift_bridgeObjectRetain();
  outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v5, v6);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for BluetoothScanner.Device.cbDevice : BluetoothScanner.Device(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  uint64_t v18 = *a1;
  uint64_t v5 = (void *)a1[3];
  uint64_t v4 = a1[4];
  uint64_t v6 = a1[5];
  int v16 = *((_DWORD *)a1 + 12);
  char v17 = *((unsigned char *)a1 + 16);
  uint64_t v7 = a1[9];
  uint64_t v14 = a1[8];
  uint64_t v15 = a1[7];
  char v13 = *((unsigned char *)a1 + 80);
  char v9 = *(void **)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  id v11 = v5;
  swift_bridgeObjectRetain();
  outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v4, v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v8, v10);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 48) = v16;
  *(void *)(a2 + 56) = v15;
  *(void *)(a2 + 64) = v14;
  *(void *)(a2 + 72) = v7;
  *(unsigned char *)(a2 + 80) = v13;
  return result;
}

__n128 BluetoothScanner.Device.cbDevice.setter(uint64_t *a1)
{
  uint64_t v13 = a1[1];
  uint64_t v14 = *a1;
  uint64_t v2 = a1[5];
  int v3 = *((_DWORD *)a1 + 12);
  __n128 v11 = *(__n128 *)(a1 + 7);
  long long v12 = *(_OWORD *)(a1 + 3);
  uint64_t v4 = a1[9];
  char v5 = *((unsigned char *)a1 + 80);
  char v6 = a1[2] & 1;
  uint64_t v8 = *(void **)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v9 = *(void *)(v1 + 40);
  swift_bridgeObjectRelease();

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v7, v9);
  swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v14;
  *(void *)(v1 + 8) = v13;
  *(unsigned char *)(v1 + 16) = v6;
  *(_OWORD *)(v1 + 24) = v12;
  *(void *)(v1 + 40) = v2;
  *(_DWORD *)(v1 + 48) = v3;
  __n128 result = v11;
  *(__n128 *)(v1 + 56) = v11;
  *(void *)(v1 + 72) = v4;
  *(unsigned char *)(v1 + 80) = v5;
  return result;
}

uint64_t IgnoreHashable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for IgnoreEquatable();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)&v10 - v6, v2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 32))(a2, v7, v4);
}

void (*BluetoothScanner.Device.cbDevice.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Pseudonym.Configuration.featureID.modify();
  return BluetoothScanner.Device.cbDevice.modify;
}

void BluetoothScanner.Device.cbDevice.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t (*property wrapper backing initializer of BluetoothScanner.Device.acquireScanRateAssertionClosure(uint64_t a1, uint64_t a2))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  return partial apply for thunk for @escaping @callee_guaranteed () -> (@owned AssertionManager.Assertion?);
}

uint64_t (*BluetoothScanner.Device.acquireScanRateAssertionClosure.getter())()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  return partial apply for thunk for @escaping @callee_guaranteed () -> (@out AssertionManager.Assertion?);
}

__n128 BluetoothScanner.Device.init(device:acquireScanRateAssertionClosure:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[5];
  int v10 = *((_DWORD *)a1 + 12);
  __n128 v16 = *(__n128 *)(a1 + 7);
  long long v17 = *(_OWORD *)(a1 + 3);
  uint64_t v11 = a1[9];
  char v12 = *((unsigned char *)a1 + 80);
  char v13 = a1[2] & 1;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  *(void *)a4 = v7;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = v13;
  *(_OWORD *)(a4 + 24) = v17;
  *(void *)(a4 + 40) = v9;
  *(_DWORD *)(a4 + 48) = v10;
  __n128 result = v16;
  *(__n128 *)(a4 + 56) = v16;
  *(void *)(a4 + 72) = v11;
  *(unsigned char *)(a4 + 80) = v12;
  *(void *)(a4 + 88) = thunk for @escaping @callee_guaranteed () -> (@owned AssertionManager.Assertion?)partial apply;
  *(void *)(a4 + 96) = v14;
  return result;
}

uint64_t BluetoothScanner.scanner.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t property wrapper backing initializer of BluetoothScanner.devices()
{
  return CurrentSubject.init(wrappedValue:)();
}

uint64_t BluetoothScanner.devices.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices, v1);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6[1];
}

uint64_t BluetoothScanner.devices.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices, v3);
  v8[1] = a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void (*BluetoothScanner.devices.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  v2[6] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify();
  return BluetoothScanner.devices.modify;
}

void BluetoothScanner.devices.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48);
  uint64_t v3 = *(void *)(*a1 + 32);
  uint64_t v4 = *(void *)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

uint64_t BluetoothScanner.$devices.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices, v1);
  uint64_t v5 = CurrentSubject.projectedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v5;
}

uint64_t BluetoothScanner.maxScanAssertion.getter()
{
  return swift_retain();
}

uint64_t BluetoothScanner.maxScanAssertion.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner_maxScanAssertion);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*BluetoothScanner.maxScanAssertion.modify())()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t BluetoothScanner.__allocating_init(discoveryEngine:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  uint64_t ObjectType = swift_getObjectType();
  return specialized BluetoothScanner.init(discoveryEngine:)(a1, v4, ObjectType, a2);
}

uint64_t BluetoothScanner.init(discoveryEngine:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  return specialized BluetoothScanner.init(discoveryEngine:)(a1, v2, ObjectType, a2);
}

uint64_t closure #1 in BluetoothScanner.init(discoveryEngine:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.host);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "ScanRate assertions changed: %ld", v9, 0xCu);
      swift_slowDealloc();
    }

    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
    uint64_t v12 = v11(ObjectType, v5);
    char v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 40);
    if (a1)
    {
      v13(v12 | 0x8000000000000000, ObjectType, v5);
      unint64_t v14 = v11(ObjectType, v5) | 0x10000000000;
      uint64_t v15 = 60;
    }
    else
    {
      v13(v12 & 0x7FFFFFFFFFFFFFFFLL, ObjectType, v5);
      unint64_t v14 = v11(ObjectType, v5) & 0xFFFFFEFFFFFFFFFFLL;
      uint64_t v15 = 20;
    }
    v13(v14, ObjectType, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v15, ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t closure #2 in BluetoothScanner.init(discoveryEngine:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.host);
    outlined retain of IgnoreHashable<IgnoreEquatable<BluetoothScannerDiscoveryEngineDevice>>(a1);
    outlined retain of IgnoreHashable<IgnoreEquatable<BluetoothScannerDiscoveryEngineDevice>>(a1);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      long long v18 = *(_OWORD *)a1;
      long long v19 = *(_OWORD *)(a1 + 16);
      outlined retain of IgnoreHashable<IgnoreEquatable<BluetoothScannerDiscoveryEngineDevice>>(a1);
      uint64_t v8 = String.init<A>(reflecting:)();
      *(void *)&long long v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of BluetoothScannerDiscoveryEngineDevice((void *)a1);
      outlined release of BluetoothScannerDiscoveryEngineDevice((void *)a1);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Learned about updated BT device: %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      outlined release of BluetoothScannerDiscoveryEngineDevice((void *)a1);
      outlined release of BluetoothScannerDiscoveryEngineDevice((void *)a1);
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v3 + 168))(v10, v11, v12, v13, v14, v15, v16, v17, v18, *((void *)&v18 + 1), v19);
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in BluetoothScanner.init(discoveryEngine:)(uint64_t a1)
{
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?(a1, (uint64_t)v16, &demangling cache variable for type metadata for BluetoothScannerDiscoveryEngineDevice?);
  uint64_t v2 = (void *)v16[3];
  uint64_t v3 = v16[4];
  uint64_t v4 = v16[5];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.host);
    outlined retain of BluetoothScannerDiscoveryEngineDevice?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of BluetoothScannerDiscoveryEngineDevice?);
    outlined retain of BluetoothScannerDiscoveryEngineDevice?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of BluetoothScannerDiscoveryEngineDevice?);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?(a1, (uint64_t)v17, &demangling cache variable for type metadata for BluetoothScannerDiscoveryEngineDevice?);
      if (v18)
      {
        id v11 = v2;
        swift_bridgeObjectRetain();
        outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v3, v4);
        swift_bridgeObjectRetain();
        uint64_t v12 = String.init<A>(reflecting:)();
        unint64_t v14 = v13;
      }
      else
      {
        unint64_t v14 = 0xE300000000000000;
        uint64_t v12 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined retain of BluetoothScannerDiscoveryEngineDevice?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of BluetoothScannerDiscoveryEngineDevice?);
      outlined retain of BluetoothScannerDiscoveryEngineDevice?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of BluetoothScannerDiscoveryEngineDevice?);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Learned about BT device lost: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      outlined retain of BluetoothScannerDiscoveryEngineDevice?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of BluetoothScannerDiscoveryEngineDevice?);
      outlined retain of BluetoothScannerDiscoveryEngineDevice?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of BluetoothScannerDiscoveryEngineDevice?);
    }

    (*(void (**)(void))(*(void *)v6 + 168))();
    return swift_release();
  }
  return result;
}

uint64_t closure #4 in BluetoothScanner.init(discoveryEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a4;
  return _swift_task_switch(closure #4 in BluetoothScanner.init(discoveryEngine:), 0, 0);
}

uint64_t closure #4 in BluetoothScanner.init(discoveryEngine:)()
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[5] = __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Activating scanner.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[4];

  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 112) + **(int **)(v6 + 112));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[6] = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #4 in BluetoothScanner.init(discoveryEngine:);
  return v10(ObjectType, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #4 in BluetoothScanner.init(discoveryEngine:);
  }
  else {
    uint64_t v2 = closure #4 in BluetoothScanner.init(discoveryEngine:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Activated scanner.", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  void *v11;
  uint64_t v12;

  uint64_t v11 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = v0[7];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v10 = v5;
    v0[2] = v3;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v6 = String.init<A>(reflecting:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to activate the scanner. Reason: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

Swift::Void __swiftcall BluetoothScanner.handleDiscoveryEngineDevicesChanged()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(ObjectType, v2);
  swift_retain();
  uint64_t v5 = specialized Sequence.compactMap<A>(_:)(v4);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void *))(*(void *)v1 + 112);
  v6(v5);
}

uint64_t closure #1 in closure #1 in BluetoothScanner.handleDiscoveryEngineDevicesChanged()()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)Strong + 136))();
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 160))();
  swift_release();
  swift_release();
  return v2;
}

uint64_t BluetoothScanner.__allocating_init()()
{
  id v1 = [objc_allocWithZone((Class)CBDiscovery) init];
  [v1 setUseCase:131092];
  [v1 addDiscoveryType:21];
  uint64_t v2 = *(uint64_t (**)(id, _UNKNOWN **))(v0 + 160);
  return v2(v1, &protocol witness table for CBDiscovery);
}

uint64_t BluetoothScanner.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v2 + 120))(ObjectType, v2);
  swift_unknownObjectRelease();
  uint64_t v4 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  return v1;
}

uint64_t BluetoothScanner.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 120))(ObjectType, v1);
  swift_unknownObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t _PublisherElements.publisher.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t IgnoreEquatable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t key path setter for IgnoreHashable.wrappedValue : <A>IgnoreHashable<A>(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (char *)&v6 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v6 - v1);
  uint64_t v4 = type metadata accessor for IgnoreHashable();
  return IgnoreEquatable.wrappedValue.setter((uint64_t)v2, v4);
}

Swift::Int IgnoreHashable.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IgnoreHashable<A>()
{
  return Hasher._finalize()();
}

uint64_t CBDiscovery.devices.getter()
{
  id v1 = [v0 discoveredDevices];
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CBDevice);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_27:
    uint64_t v7 = _swiftEmptyArrayStorage;
LABEL_28:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v7;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_27;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v2 & 0xC000000000000001;
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v8 = (SEL *)&unk_1000FE000;
    os_log_type_t v9 = (SEL *)&unk_1000FE000;
    uint64_t v34 = v3;
    unint64_t v35 = v2;
    unint64_t v33 = v2 & 0xC000000000000001;
    while (1)
    {
      if (v6) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = *(id *)(v2 + 8 * v5 + 32);
      }
      uint64_t v11 = v10;
      id v12 = [v10 v8[465]];
      if (v12)
      {
        unint64_t v13 = v12;
        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        id v16 = [v11 accountID];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v38 = v19;
          uint64_t v39 = v18;

          BOOL v20 = ([v11 nearbyInfoV2Flags] & 4) != 0
             || [v11 v9[466]] != 0;
          BOOL v37 = v20;
          unsigned int v36 = [v11 v9[466]];
          unsigned __int8 v21 = [v11 nearbyInfoV2DecryptedFlags];
          if (([v11 deviceFlags] & 0x80) != 0)
          {
            uint64_t v24 = 0;
            uint64_t v26 = 0;
          }
          else
          {
            id v22 = [v11 contactID];
            if (v22)
            {
              uint64_t v23 = v22;
              uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v26 = v25;
            }
            else
            {
              uint64_t v24 = 0;
              uint64_t v26 = 1;
            }
          }
          type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NIBluetoothSample);
          id v27 = v11;
          id v28 = NIBluetoothSample.init(with:)(v27);
          unsigned __int8 v29 = [v27 nearbyInfoV2InvitationRouteType];

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
          }
          unint64_t v31 = v7[2];
          unint64_t v30 = v7[3];
          if (v31 >= v30 >> 1) {
            uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v7);
          }
          _OWORD v7[2] = v31 + 1;
          uint64_t v32 = &v7[11 * v31];
          v32[4] = v40;
          void v32[5] = v15;
          *((unsigned char *)v32 + 48) = v37;
          v32[7] = v28;
          v32[8] = v24;
          v32[9] = v26;
          *((_DWORD *)v32 + 20) = v21 & 1;
          v32[11] = v36;
          v32[12] = v39;
          v32[13] = v38;
          *((unsigned char *)v32 + 112) = v29;
          uint64_t v3 = v34;
          unint64_t v2 = v35;
          unint64_t v6 = v33;
          uint64_t v8 = (SEL *)&unk_1000FE000;
          os_log_type_t v9 = (SEL *)&unk_1000FE000;
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
      }

LABEL_7:
      if (v3 == ++v5) {
        goto LABEL_28;
      }
    }
  }
  __break(1u);
  return result;
}

id key path setter for CBDiscovery.deviceLost : CBDiscovery(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BluetoothScannerDiscoveryEngineDevice?) -> (@out ());
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?(v1);
  return CBDiscovery.deviceLost.setter((uint64_t)v4, v3);
}

id CBDiscovery.deviceLost.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = partial apply for closure #1 in CBDiscovery.deviceLost.setter;
    v9[5] = v6;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    long long v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
    long long v9[3] = &block_descriptor_3;
    uint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    [v3 setDeviceLostHandler:v7];
    _Block_release(v7);
    return (id)outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
  }
  else
  {
    return [v2 setDeviceFoundHandler:0];
  }
}

uint64_t closure #1 in CBDiscovery.deviceLost.setter(void *a1, void (*a2)(unsigned char *))
{
  specialized BluetoothScannerDiscoveryEngineDevice.init(cbDevice:)(a1, (uint64_t)v4);
  a2(v4);
  return outlined retain of BluetoothScannerDiscoveryEngineDevice?((uint64_t)v4, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of BluetoothScannerDiscoveryEngineDevice?);
}

void (*CBDiscovery.deviceLost.modify(void *a1))(void ****a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[7] = 0;
  v3[8] = v1;
  v3[6] = 0;
  return CBDiscovery.deviceLost.modify;
}

void CBDiscovery.deviceLost.modify(void ****a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1)[6];
  uint64_t v4 = (*a1)[8];
  if (a2)
  {
    if (v3)
    {
      uint64_t v5 = v2[7];
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v3;
      *(void *)(v6 + 24) = v5;
      v2[4] = (void **)closure #1 in CBDiscovery.deviceLost.setterpartial apply;
      v2[5] = (void **)v6;
      *uint64_t v2 = _NSConcreteStackBlock;
      v2[1] = (void **)1107296256;
      v2[2] = (void **)thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
      v2[3] = (void **)&block_descriptor_17;
      uint64_t v7 = _Block_copy(v2);
      swift_retain_n();
      swift_release();
      [v4 setDeviceLostHandler:v7];
      _Block_release(v7);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v3);
    }
    else
    {
      [(*a1)[8] setDeviceFoundHandler:0];
    }
    uint64_t v11 = (uint64_t)v2[6];
    goto LABEL_8;
  }
  if (v3)
  {
    uint64_t v8 = v2[7];
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v3;
    *(void *)(v9 + 24) = v8;
    v2[4] = (void **)closure #1 in CBDiscovery.deviceLost.setterpartial apply;
    v2[5] = (void **)v9;
    *uint64_t v2 = _NSConcreteStackBlock;
    v2[1] = (void **)1107296256;
    v2[2] = (void **)thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
    v2[3] = (void **)&block_descriptor_24;
    id v10 = _Block_copy(v2);
    swift_retain();
    swift_release();
    [v4 setDeviceLostHandler:v10];
    _Block_release(v10);
    uint64_t v11 = v3;
LABEL_8:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
    goto LABEL_10;
  }
  [(*a1)[8] setDeviceFoundHandler:0];
LABEL_10:
  free(v2);
}

id key path setter for CBDiscovery.deviceFound : CBDiscovery(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BluetoothScannerDiscoveryEngineDevice) -> (@out ());
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?(v1);
  return CBDiscovery.deviceFound.setter((uint64_t)v4, v3);
}

id CBDiscovery.deviceFound.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v7 = (void *)swift_allocObject();
    _OWORD v7[2] = v6;
    v7[3] = a1;
    v7[4] = a2;
    v10[4] = partial apply for closure #1 in CBDiscovery.deviceFound.setter;
    v10[5] = v7;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
    v10[3] = &block_descriptor_33;
    uint64_t v8 = _Block_copy(v10);
    swift_retain();
    swift_release();
    [v3 setDeviceFoundHandler:v8];
    _Block_release(v8);
    return (id)outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
  }
  else
  {
    return [v2 setDeviceFoundHandler:0];
  }
}

void closure #1 in CBDiscovery.deviceFound.setter(void *a1, uint64_t a2, void (*a3)(_OWORD *))
{
  id v4 = a1;
  specialized BluetoothScannerDiscoveryEngineDevice.init(cbDevice:)(v4, (uint64_t)v14);
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)v14, (uint64_t)v15, &demangling cache variable for type metadata for BluetoothScannerDiscoveryEngineDevice?);
  if (*((void *)&v15[0] + 1))
  {
    v17[2] = v15[2];
    uint64_t v17[3] = v15[3];
    v17[4] = v15[4];
    char v18 = v16;
    v17[0] = v15[0];
    v17[1] = v15[1];
    a3(v17);
    outlined retain of BluetoothScannerDiscoveryEngineDevice?((uint64_t)v14, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of BluetoothScannerDiscoveryEngineDevice?);
  }
  else
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.host);
    id v6 = v4;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(void *)&v17[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CBDevice);
      id v10 = v6;
      uint64_t v11 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, (uint64_t *)v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Couldn't generate device for CBDevice: %s, notifying as lost.", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_beginAccess();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong) {
  }
    }
}

void (*CBDiscovery.deviceFound.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[7] = 0;
  v3[8] = v1;
  v3[6] = 0;
  return CBDiscovery.deviceFound.modify;
}

void CBDiscovery.deviceFound.modify(id **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1)[6];
  if (a2)
  {
    uint64_t v4 = (uint64_t)v2[7];
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWListener.State) -> ())?((uint64_t)(*a1)[6]);
    CBDiscovery.deviceFound.setter(v3, v4);
    uint64_t v5 = (uint64_t)v2[6];
LABEL_5:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
    goto LABEL_7;
  }
  id v6 = v2[8];
  if (v3)
  {
    id v7 = v2[7];
    uint64_t v8 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v9 = (void *)swift_allocObject();
    long long v9[2] = v8;
    long long v9[3] = v3;
    v9[4] = v7;
    v2[4] = closure #1 in CBDiscovery.deviceFound.setterpartial apply;
    v2[5] = v9;
    *uint64_t v2 = _NSConcreteStackBlock;
    v2[1] = (id)1107296256;
    v2[2] = thunk for @escaping @callee_guaranteed (@guaranteed CBDevice) -> ();
    v2[3] = &block_descriptor_41;
    id v10 = _Block_copy(v2);
    swift_retain();
    swift_release();
    [v6 setDeviceFoundHandler:v10];
    _Block_release(v10);
    uint64_t v5 = v3;
    goto LABEL_5;
  }
  [v2[8] setDeviceFoundHandler:0];
LABEL_7:
  free(v2);
}

id CBDiscovery.scanRate.getter()
{
  return [v0 bleScanRate];
}

id CBDiscovery.scanRate.setter(uint64_t a1)
{
  return [v1 setBleScanRate:a1];
}

id (*CBDiscovery.scanRate.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = [v1 bleScanRate];
  return CBDiscovery.scanRate.modify;
}

id CBDiscovery.scanRate.modify(uint64_t a1)
{
  return [*(id *)a1 setBleScanRate:*(unsigned int *)(a1 + 8)];
}

id protocol witness for BluetoothScannerDiscoveryEngine.discoveryFlags.getter in conformance CBDiscovery()
{
  return [v0 discoveryFlags];
}

id protocol witness for BluetoothScannerDiscoveryEngine.discoveryFlags.setter in conformance CBDiscovery(uint64_t a1)
{
  return [v1 setDiscoveryFlags:a1];
}

id (*protocol witness for BluetoothScannerDiscoveryEngine.discoveryFlags.modify in conformance CBDiscovery(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = [v1 discoveryFlags];
  return protocol witness for BluetoothScannerDiscoveryEngine.discoveryFlags.modify in conformance CBDiscovery;
}

id protocol witness for BluetoothScannerDiscoveryEngine.discoveryFlags.modify in conformance CBDiscovery(uint64_t a1)
{
  return [*(id *)(a1 + 8) setDiscoveryFlags:*(void *)a1];
}

uint64_t (*protocol witness for BluetoothScannerDiscoveryEngine.deviceLost.modify in conformance CBDiscovery(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CBDiscovery.deviceLost.modify(v2);
  return protocol witness for BluetoothScannerDiscoveryEngine.deviceLost.modify in conformance CBDiscovery;
}

uint64_t (*protocol witness for BluetoothScannerDiscoveryEngine.deviceFound.modify in conformance CBDiscovery(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CBDiscovery.deviceFound.modify(v2);
  return protocol witness for BluetoothScannerDiscoveryEngine.deviceLost.modify in conformance CBDiscovery;
}

void protocol witness for BluetoothScannerDiscoveryEngine.deviceLost.modify in conformance CBDiscovery(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t protocol witness for BluetoothScannerDiscoveryEngine.activate() in conformance CBDiscovery()
{
  v1[2] = v1;
  v1[3] = protocol witness for BluetoothScannerDiscoveryEngine.activate() in conformance CBDiscovery;
  uint64_t v2 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  v1[13] = &block_descriptor_64;
  v1[14] = v2;
  [v0 activateWithCompletion:v1 + 10];
  return _swift_continuation_await(v1 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48)) {
    swift_willThrow();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

id protocol witness for BluetoothScannerDiscoveryEngine.invalidate() in conformance CBDiscovery()
{
  return [v0 invalidate];
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      id v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      unint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    id v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?, Never>>);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BluetoothScannerDiscoveryEngineDevice>);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BluetoothScanner.Device>);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 104);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[13 * v8 + 4]) {
          memmove(v12, a4 + 4, 104 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice>);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NearbyGroupHostIDSService.MessageEvent.Member>);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *outlined release of BluetoothScannerDiscoveryEngineDevice(void *a1)
{
  uint64_t v3 = (void *)a1[3];
  uint64_t v2 = a1[4];
  uint64_t v4 = a1[5];
  swift_bridgeObjectRelease();

  outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v2, v4);
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *outlined init with take of BluetoothScannerDiscoveryEngineDevice.ContactInfo(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

uint64_t *outlined retain of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(uint64_t *a1)
{
  return a1;
}

uint64_t specialized BluetoothScanner.init(discoveryEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices;
  v30[1] = _swiftEmptyArrayStorage;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BluetoothScanner.Device]);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v15, v14, v11);
  *(void *)(a2 + 16) = a1;
  *(void *)(a2 + 24) = a4;
  char v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16);
  swift_unknownObjectRetain();
  v16(20, a3, a4);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 24) = a4;
  swift_unknownObjectWeakInit();
  type metadata accessor for AssertionManager();
  char v18 = (void *)swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  v18[4] = Lock.init()();
  v18[5] = 0;
  v18[2] = partial apply for closure #1 in BluetoothScanner.init(discoveryEngine:);
  uint64_t v18[3] = v17;
  *(void *)(a2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner_maxScanAssertion) = v18;
  uint64_t v19 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  id v22 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v19 + 96);
  swift_unknownObjectRetain();
  swift_retain();
  v22(partial apply for closure #2 in BluetoothScanner.init(discoveryEngine:), v21, ObjectType, v19);
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v23 = *(void *)(a2 + 24);
  uint64_t v24 = swift_getObjectType();
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v23 + 72);
  swift_unknownObjectRetain();
  swift_retain();
  v26(partial apply for closure #3 in BluetoothScanner.init(discoveryEngine:), v25, v24, v23);
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v27 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v10, 1, 1, v27);
  id v28 = (void *)swift_allocObject();
  v28[2] = 0;
  uint64_t v28[3] = 0;
  uint64_t v28[4] = a2;
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #4 in BluetoothScanner.init(discoveryEngine:), (uint64_t)v28);
  swift_unknownObjectRelease();
  swift_release();
  return a2;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 104 * a1 + 32;
    unint64_t v6 = a3 + 104 * v4;
    if (v5 >= v6 || v5 + 104 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 88 * a1 + 32;
    unint64_t v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized BluetoothScannerDiscoveryEngineDevice.init(cbDevice:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (unint64_t)[a1 stableIdentifier];
  if (!v4)
  {

    uint64_t v11 = 0;
    uint64_t v7 = 0;
    id v12 = 0;
    id v8 = 0;
LABEL_7:
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    unsigned __int8 v18 = 0;
    goto LABEL_15;
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = [a1 accountID];
  if (!v8)
  {
    swift_bridgeObjectRelease();

    uint64_t v11 = 0;
    uint64_t v7 = 0;
    unint64_t v4 = 0;
    id v12 = 0;
    goto LABEL_7;
  }
  uint64_t v26 = v5;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v10;
  uint64_t v25 = v9;

  unint64_t v4 = ([a1 nearbyInfoV2Flags] & 4) != 0
    || [a1 nearbyInfoV2InvitationCounter] != 0;
  unsigned int v19 = [a1 nearbyInfoV2InvitationCounter];
  unint64_t v14 = (unint64_t)[a1 nearbyInfoV2DecryptedFlags] & 1;
  if (([a1 deviceFlags] & 0x80) != 0)
  {
    id v8 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    id v20 = [a1 contactID];
    if (v20)
    {
      uint64_t v21 = v20;
      id v8 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v22;
    }
    else
    {
      id v8 = 0;
      uint64_t v13 = 1;
    }
  }
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NIBluetoothSample);
  id v23 = a1;
  id v12 = NIBluetoothSample.init(with:)(v23);
  uint64_t v15 = v19;
  unsigned __int8 v18 = [v23 nearbyInfoV2InvitationRouteType];

  uint64_t v16 = v25;
  uint64_t v11 = v26;
  uint64_t v17 = v24;
LABEL_15:
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v13;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v15;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v17;
  *(unsigned char *)(a2 + 80) = v18;
}

uint64_t type metadata accessor for IgnoreEquatable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_100058FC0()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned AssertionManager.Assertion?)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out AssertionManager.Assertion?)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for closure #1 in CBDiscovery.deviceLost.setter(void *a1)
{
  return closure #1 in CBDiscovery.deviceLost.setter(a1, *(void (**)(unsigned char *))(v1 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_100059080()
{
  swift_unknownObjectWeakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000590B8()
{
  return objectdestroy_29Tm((void (*)(void))&_swift_release);
}

void partial apply for closure #1 in CBDiscovery.deviceFound.setter(void *a1)
{
  closure #1 in CBDiscovery.deviceFound.setter(a1, *(void *)(v1 + 16), *(void (**)(_OWORD *))(v1 + 24));
}

uint64_t sub_1000590DC()
{
  return objectdestroy_29Tm((void (*)(void))&_swift_release);
}

uint64_t base witness table accessor for Equatable in IgnoreHashable<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_100059118@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_100059124(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 88) = v4;
  *(void *)(a2 + 96) = v3;
  return result;
}

uint64_t sub_100059168@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_1000591B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 112);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_100059208@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_100059254(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 144);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1000592A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for IgnoreHashable();
  return IgnoreHashable.wrappedValue.getter(v2, a1);
}

uint64_t sub_1000592E8()
{
  return 8;
}

void *sub_1000592F4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_100059300(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_10005930C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

id sub_100059318@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = [*a1 bleScanRate];
  *a2 = result;
  return result;
}

id sub_10005934C(unsigned int *a1, id *a2)
{
  return [*a2 setBleScanRate:*a1];
}

uint64_t destroy for BluetoothScannerDiscoveryEngineDevice(uint64_t a1)
{
  swift_bridgeObjectRelease();

  if (*(void *)(a1 + 40) != 1) {
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BluetoothScannerDiscoveryEngineDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = (_OWORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  id v8 = v5;
  if (v7 == 1)
  {
    *(_OWORD *)(a1 + 32) = *v6;
  }
  else
  {
    *(void *)(a1 + 32) = *(void *)v6;
    *(void *)(a1 + 40) = v7;
    swift_bridgeObjectRetain();
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BluetoothScannerDiscoveryEngineDevice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  uint64_t v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  id v6 = v5;

  uint64_t v7 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) != 1)
  {
    if (v7 != 1)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined release of String?(a1 + 32);
    goto LABEL_6;
  }
  if (v7 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
LABEL_8:
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for BluetoothScannerDiscoveryEngineDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  long long v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  id v6 = (void *)(a2 + 32);
  if (*(void *)(a1 + 40) != 1)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    if (v7 != 1)
    {
      *(void *)(a1 + 32) = *v6;
      *(void *)(a1 + 40) = v7;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined release of String?(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v6;
LABEL_6:
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for BluetoothScannerDiscoveryEngineDevice(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BluetoothScannerDiscoveryEngineDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BluetoothScannerDiscoveryEngineDevice()
{
  return &type metadata for BluetoothScannerDiscoveryEngineDevice;
}

void *initializeBufferWithCopyOfBuffer for BluetoothScannerDiscoveryEngineDevice.ContactInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for BluetoothScannerDiscoveryEngineDevice.ContactInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for BluetoothScannerDiscoveryEngineDevice.ContactInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BluetoothScannerDiscoveryEngineDevice.ContactInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BluetoothScannerDiscoveryEngineDevice.ContactInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for BluetoothScannerDiscoveryEngineDevice.ContactInfo(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for BluetoothScannerDiscoveryEngineDevice.ContactInfo(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for BluetoothScannerDiscoveryEngineDevice.ContactInfo()
{
  return &type metadata for BluetoothScannerDiscoveryEngineDevice.ContactInfo;
}

uint64_t ObjC metadata update function for BluetoothScanner()
{
  return type metadata accessor for BluetoothScanner();
}

uint64_t type metadata accessor for BluetoothScanner()
{
  uint64_t result = type metadata singleton initialization cache for BluetoothScanner;
  if (!type metadata singleton initialization cache for BluetoothScanner) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for BluetoothScanner()
{
  type metadata accessor for CurrentSubject<[BluetoothScanner.Device]>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for CurrentSubject<[BluetoothScanner.Device]>()
{
  if (!lazy cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [BluetoothScanner.Device]);
    unint64_t v0 = type metadata accessor for CurrentSubject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
    }
  }
}

uint64_t destroy for BluetoothScanner.Device(uint64_t a1)
{
  swift_bridgeObjectRelease();

  if (*(void *)(a1 + 40) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for BluetoothScanner.Device(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  long long v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  id v6 = (_OWORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  id v8 = v5;
  if (v7 == 1)
  {
    *(_OWORD *)(a1 + 32) = *v6;
  }
  else
  {
    *(void *)(a1 + 32) = *(void *)v6;
    *(void *)(a1 + 40) = v7;
    swift_bridgeObjectRetain();
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BluetoothScanner.Device(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  long long v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  id v6 = v5;

  uint64_t v7 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) != 1)
  {
    if (v7 != 1)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined release of String?(a1 + 32);
    goto LABEL_6;
  }
  if (v7 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
LABEL_8:
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for BluetoothScanner.Device(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  long long v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  long long v6 = (void *)(a2 + 32);
  if (*(void *)(a1 + 40) != 1)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    if (v7 != 1)
    {
      *(void *)(a1 + 32) = *v6;
      *(void *)(a1 + 40) = v7;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined release of String?(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v6;
LABEL_6:
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BluetoothScanner.Device(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BluetoothScanner.Device(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BluetoothScanner.Device()
{
  return &type metadata for BluetoothScanner.Device;
}

uint64_t type metadata instantiation function for IgnoreEquatable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata completion function for IgnoreEquatable()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IgnoreEquatable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *long long v3 = *a2;
    long long v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for IgnoreEquatable(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for IgnoreEquatable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for IgnoreEquatable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for IgnoreEquatable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for IgnoreEquatable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for IgnoreEquatable(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for IgnoreEquatable(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x10005A448);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for IgnoreHashable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BluetoothScannerDiscoveryEngineDevice) -> (@out ())(uint64_t a1)
{
  unint64_t v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  long long v3 = *(_OWORD *)(a1 + 48);
  void v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  return v2(v6);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BluetoothScannerDiscoveryEngineDevice?) -> (@out ())(uint64_t a1)
{
  unint64_t v2 = *(uint64_t (**)(unsigned char *))(v1 + 16);
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?(a1, (uint64_t)v4, &demangling cache variable for type metadata for BluetoothScannerDiscoveryEngineDevice?);
  return v2(v4);
}

uint64_t outlined copy of BluetoothScannerDiscoveryEngineDevice?(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    id v8 = a4;
    swift_bridgeObjectRetain();
    outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(a5, a6);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of BluetoothScannerDiscoveryEngineDevice?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 80);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), v4);
  return a1;
}

uint64_t outlined consume of BluetoothScannerDiscoveryEngineDevice?(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease();

    outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(a5, a6);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of IgnoreHashable<IgnoreEquatable<BluetoothScannerDiscoveryEngineDevice>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(id *)(a1 + 24);
  swift_bridgeObjectRetain();
  outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unsigned int v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    char v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005AA94()
{
  swift_weakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in BluetoothScanner.handleDiscoveryEngineDevicesChanged()()
{
  return closure #1 in closure #1 in BluetoothScanner.handleDiscoveryEngineDevicesChanged()();
}

uint64_t sub_10005AAD4()
{
  swift_unknownObjectWeakDestroy();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in BluetoothScanner.init(discoveryEngine:)(uint64_t a1)
{
  return closure #1 in BluetoothScanner.init(discoveryEngine:)(a1, v1);
}

uint64_t partial apply for closure #2 in BluetoothScanner.init(discoveryEngine:)(uint64_t a1)
{
  return closure #2 in BluetoothScanner.init(discoveryEngine:)(a1);
}

uint64_t partial apply for closure #3 in BluetoothScanner.init(discoveryEngine:)(uint64_t a1)
{
  return closure #3 in BluetoothScanner.init(discoveryEngine:)(a1);
}

uint64_t sub_10005AB24()
{
  return objectdestroy_29Tm((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t objectdestroy_29Tm(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();
  return _swift_deallocObject(v1, 40, 7);
}

uint64_t partial apply for closure #4 in BluetoothScanner.init(discoveryEngine:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  v3[4] = v2;
  return _swift_task_switch(closure #4 in BluetoothScanner.init(discoveryEngine:), 0, 0);
}

void key path setter for NearbyGroupHostManager.idsService : NearbyGroupHostManager(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 112);
  *(void *)(v3 + 112) = v2;
  id v5 = v2;
}

id NearbyGroupHostManager.idsService.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 112);
  return v1;
}

void NearbyGroupHostManager.idsService.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 112);
  *(void *)(v1 + 112) = a1;
}

uint64_t (*NearbyGroupHostManager.idsService.modify())()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t property wrapper backing initializer of NearbyGroupHostManager.groups()
{
  return Published.init(initialValue:)();
}

uint64_t key path getter for NearbyGroupHostManager.groups : NearbyGroupHostManager@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for NearbyGroupHostManager.groups : NearbyGroupHostManager()
{
  return static Published.subscript.setter();
}

uint64_t NearbyGroupHostManager.groups.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t NearbyGroupHostManager.groups.setter()
{
  return static Published.subscript.setter();
}

void (*NearbyGroupHostManager.groups.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return NearbyInvitationAdvertiser.connections.modify;
}

uint64_t key path getter for NearbyGroupHostManager.$groups : NearbyGroupHostManager()
{
  return swift_endAccess();
}

uint64_t key path setter for NearbyGroupHostManager.$groups : NearbyGroupHostManager(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  size_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v8 = (char *)&v11 - v7;
  BOOL v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t NearbyGroupHostManager.$groups.getter()
{
  return swift_endAccess();
}

uint64_t NearbyGroupHostManager.$groups.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*NearbyGroupHostManager.$groups.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager__groups;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return NearbyInvitationAdvertiser.$connections.modify;
}

uint64_t key path setter for NearbyGroupHostManager.groupStateListeners : NearbyGroupHostManager(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a2
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners);
  swift_beginAccess();
  *uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t NearbyGroupHostManager.groupStateListeners.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyGroupHostManager.groupStateListeners.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyGroupHostManager.groupStateListeners.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t key path setter for NearbyGroupHostManager.idsMessageListenerTask : NearbyGroupHostManager(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a2
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask);
  swift_beginAccess();
  *uint64_t v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t NearbyGroupHostManager.idsMessageListenerTask.getter()
{
  return swift_retain();
}

uint64_t NearbyGroupHostManager.idsMessageListenerTask.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*NearbyGroupHostManager.idsMessageListenerTask.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyGroupHostManager.abcReporter.getter()
{
  return swift_retain();
}

uint64_t NearbyGroupHostManager.__allocating_init(serviceName:)()
{
  uint64_t v0 = swift_allocObject();
  NearbyGroupHostManager.init(serviceName:)();
  return v0;
}

void NearbyGroupHostManager.init(serviceName:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  uint64_t v9 = v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager__groups;
  v19[1] = &_swiftEmptyDictionarySingleton;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : NearbyGroupHost]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v9, v8, v5);
  *(void *)(v1
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners) = &_swiftEmptyDictionarySingleton;
  *(void *)(v1
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask) = 0;
  uint64_t v10 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_abcReporter;
  type metadata accessor for ABCReporter();
  swift_allocObject();
  *(void *)(v1 + v10) = ABCReporter.init(domain:type:)();
  id v11 = objc_allocWithZone((Class)IDSService);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v11 initWithService:v12];

  if (v13)
  {
    unsigned int v14 = (char *)objc_allocWithZone((Class)type metadata accessor for NearbyGroupHostIDSService());
    *(void *)(v1 + 112) = specialized NearbyGroupHostIDSService.init(idsService:)(v13, v14);
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v4, 1, 1, v15);
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = v1;
    swift_retain();
    uint64_t v17 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyGroupHostManager.init(serviceName:), (uint64_t)v16);
    unsigned __int8 v18 = (uint64_t *)(v1
                    + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask);
    swift_beginAccess();
    *unsigned __int8 v18 = v17;
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in NearbyGroupHostManager.init(serviceName:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return NearbyGroupHostManager.listenForEvents()();
}

uint64_t NearbyGroupHostManager.listenForEvents()()
{
  v1[16] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent?);
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0);
  v1[21] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent(0);
  v1[22] = v2;
  v1[23] = *(void *)(v2 - 8);
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  v1[29] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  v1[30] = swift_task_alloc();
  return _swift_task_switch(NearbyGroupHostManager.listenForEvents(), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v5;

  uint64_t v1 = v0[16];
  swift_beginAccess();
  v0[9] = *(void *)(*(void *)(v1 + 112)
                    + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_incomingMessages);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner);
  uint64_t v2 = swift_allocObject();
  swift_retain();
  uint64_t v3 = (_DWORD *)swift_slowAlloc();
  *(void *)(v2 + 16) = v3;
  *(void *)(v2 + 24) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = static Subscribers.Demand.none.getter();
  *uint64_t v3 = 0;
  v0[10] = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner and conformance _PublisherElements<A>.Iterator.Inner, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner);
  Publisher.subscribe<A>(_:)();
  swift_release();
  v0[13] = v2;
  lazy protocol witness table accessor for type NearbyGroupHostManager and conformance NearbyGroupHostManager(&lazy protocol witness table cache variable for type NearbyGroupHostManager and conformance NearbyGroupHostManager, (void (*)(uint64_t))type metadata accessor for NearbyGroupHostManager);
  return _swift_task_switch(NearbyGroupHostManager.listenForEvents(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[13];
  v0[31] = v1;
  uint64_t v2 = swift_task_alloc();
  v0[32] = v2;
  *(void *)(v2 + 16) = v0 + 13;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[33] = v3;
  *uint64_t v3 = v0;
  v3[1] = NearbyGroupHostManager.listenForEvents();
  uint64_t v5 = v0[29];
  uint64_t v4 = v0[30];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v4, &async function pointer to partial apply for specialized closure #2 in _PublisherElements.Iterator.next(), v2, _s44com_apple_SharePlay_NearbyInvitationsService18_PublisherElementsV8IteratorV4next6OutputQzSgyYaFyyYbXEfU_7Combine03AnyH0VyAA0E19GroupHostIDSServiceC12MessageEventO_AN0R7ContextVts5NeverOG_Tg5TA_0, v1, 0, 0, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(NearbyGroupHostManager.listenForEvents(), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  void *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v26 = v0;
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    swift_release();
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.host);
    swift_retain_n();
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.error.getter();
    uint64_t v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void *)(v0 + 128);
    if (v6)
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      *(void *)(v0 + 88) = v7;
      type metadata accessor for NearbyGroupHostManager();
      swift_retain();
      uint64_t v9 = String.init<A>(reflecting:)();
      *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s stopped listening for incoming messages. This shouldn't ever happen until dealloc.", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  else
  {
    id v11 = *(void *)(v0 + 224);
    NSString v12 = *(void **)(v1 + *(int *)(v2 + 48));
    *(void *)(v0 + 272) = v12;
    outlined init with take of NearbyGroupHostIDSService.MessageEvent(v1, v11, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    id v13 = voucher_copy();
    *(void *)(v0 + 280) = v13;
    if (v12)
    {
      unsigned int v14 = v12;
      uint64_t v15 = (void *)voucher_adopt();
    }
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent(*(void *)(v0 + 224), *(void *)(v0 + 216), type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v17 = *(void *)(v0 + 216);
    if (EnumCaseMultiPayload == 1)
    {
      outlined destroy of NearbyGroupHostIDSService.MessageEvent(v17, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
      if (v13)
      {
        unsigned __int8 v18 = *(id *)(v0 + 280);
        unsigned int v19 = (void *)voucher_adopt();
      }
      id v20 = *(void *)(v0 + 224);

      outlined destroy of NearbyGroupHostIDSService.MessageEvent(v20, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
      return _swift_task_switch(NearbyGroupHostManager.listenForEvents(), 0, 0);
    }
    else
    {
      outlined init with take of NearbyGroupHostIDSService.MessageEvent(v17, *(void *)(v0 + 168), type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 288) = v22;
      *uint64_t v22 = v0;
      v22[1] = NearbyGroupHostManager.listenForEvents();
      id v23 = *(void *)(v0 + 168);
      return NearbyGroupHostManager.handle(_:)(v23);
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0) {
    uint64_t v4 = NearbyGroupHostManager.listenForEvents();
  }
  else {
    uint64_t v4 = NearbyGroupHostManager.listenForEvents();
  }
  return _swift_task_switch(v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 280);
  outlined destroy of NearbyGroupHostIDSService.MessageEvent(*(void *)(v0 + 168), type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
  if (v1)
  {
    uint64_t v2 = *(id *)(v0 + 280);
    uint64_t v3 = (void *)voucher_adopt();
  }
  uint64_t v4 = *(void *)(v0 + 224);

  outlined destroy of NearbyGroupHostIDSService.MessageEvent(v4, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  return _swift_task_switch(NearbyGroupHostManager.listenForEvents(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t *v40;
  uint64_t v41;

  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 128);
  outlined destroy of NearbyGroupHostIDSService.MessageEvent(*(void *)(v0 + 168), type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
  static TaskPriority.background.getter();
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v2, 0, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0;
  v7[3] = 0;
  v7[4] = v4;
  v7[5] = v1;
  outlined init with copy of (String, Any)(v2, v3, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  LODWORD(v3) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v5);
  swift_retain();
  swift_errorRetain();
  uint64_t v8 = *(void *)(v0 + 152);
  if (v3 == 1)
  {
    outlined destroy of Any?(*(void *)(v0 + 152), (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  NSString v12 = swift_allocObject();
  *(void *)(v12 + 16) = &async function pointer to partial apply for closure #1 in NearbyGroupHostManager.listenForEvents();
  *(void *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    *(void *)(v0 + 16) = 0;
    *(void *)(v0 + 24) = 0;
    *(void *)(v0 + 32) = v9;
    *(void *)(v0 + 40) = v10;
  }
  id v13 = *(void *)(v0 + 160);
  swift_task_create();
  swift_release();
  outlined destroy of Any?(v13, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  unsigned int v14 = *(void *)(v0 + 224);
  uint64_t v15 = *(void *)(v0 + 208);
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.host);
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent(v14, v15, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v17 = Logger.logObject.getter();
  unsigned __int8 v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v40 = (uint64_t *)(v0 + 112);
    unsigned int v19 = *(void *)(v0 + 208);
    uint64_t v21 = *(void *)(v0 + 176);
    id v20 = *(void *)(v0 + 184);
    uint64_t v22 = *(void *)(v0 + 136);
    id v23 = *(void *)(v0 + 144);
    uint64_t v24 = swift_slowAlloc();
    *(void *)(v0 + 112) = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent(v19, v23, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v21);
    outlined init with copy of (String, Any)(v23, v22, &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v22, 1, v21) == 1)
    {
      uint64_t v25 = 0xE300000000000000;
      uint64_t v26 = 7104878;
    }
    else
    {
      unsigned __int8 v29 = *(void *)(v0 + 192);
      id v28 = *(void *)(v0 + 200);
      outlined init with take of NearbyGroupHostIDSService.MessageEvent(*(void *)(v0 + 136), v28, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
      outlined init with copy of NearbyGroupHostIDSService.MessageEvent(v28, v29, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
      uint64_t v26 = String.init<A>(reflecting:)();
      uint64_t v25 = v30;
      outlined destroy of NearbyGroupHostIDSService.MessageEvent(v28, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    }
    unint64_t v31 = *(void *)(v0 + 296);
    uint64_t v32 = *(void *)(v0 + 208);
    outlined destroy of Any?(*(void *)(v0 + 144), &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent?);
    *(void *)(v24 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, v40);
    swift_bridgeObjectRelease();
    outlined destroy of NearbyGroupHostIDSService.MessageEvent(v32, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    *(_WORD *)(v24 + 12) = 2080;
    *(void *)(v0 + 120) = v31;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    unint64_t v33 = String.init<A>(reflecting:)();
    *(void *)(v24 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v40);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to handle event %s, reason: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v27 = *(void *)(v0 + 208);
    swift_errorRelease();
    outlined destroy of NearbyGroupHostIDSService.MessageEvent(v27, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    swift_errorRelease();
    swift_errorRelease();
  }
  unint64_t v35 = *(void **)(v0 + 280);
  if (v35)
  {
    unsigned int v36 = v35;
    BOOL v37 = (void *)voucher_adopt();
  }
  uint64_t v38 = *(void *)(v0 + 224);

  outlined destroy of NearbyGroupHostIDSService.MessageEvent(v38, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  return _swift_task_switch(NearbyGroupHostManager.listenForEvents(), 0, 0);
}

uint64_t closure #1 in NearbyGroupHostManager.listenForEvents()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[3] = a4;
  v5[4] = a5;
  v5[5] = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_abcReporter;
  return _swift_task_switch(closure #1 in NearbyGroupHostManager.listenForEvents(), a4, 0);
}

uint64_t closure #1 in NearbyGroupHostManager.listenForEvents()()
{
  v0[6] = *(void *)(v0[3] + v0[5]);
  return _swift_task_switch(closure #1 in NearbyGroupHostManager.listenForEvents(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __n128 v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t (*v14)(void);
  uint64_t (*v15)(uint64_t, __n128);
  uint64_t v16;

  uint64_t v1 = v0[4];
  _StringGuts.grow(_:)(77);
  v2._uint64_t countAndFlagsBits = 0xD00000000000004BLL;
  v2._uint64_t object = (void *)0x80000001000DBA60;
  String.append(_:)(v2);
  v0[2] = v1;
  swift_errorRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v3._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = [self mainBundle];
  uint64_t v5 = [v4 bundleIdentifier];

  if (v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v6 = dispatch thunk of ABCReporter.signature(subType:context:process:)();
  v0[7] = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v6)
  {
    uint64_t v15 = (uint64_t (*)(uint64_t, __n128))((char *)&async function pointer to dispatch thunk of ABCReporter.report(with:duration:)
                                                  + async function pointer to dispatch thunk of ABCReporter.report(with:duration:));
    uint64_t v7 = (void *)swift_task_alloc();
    v0[8] = v7;
    void *v7 = v0;
    v7[1] = closure #1 in NearbyGroupHostManager.listenForEvents();
    v8.n128_u64[0] = 0;
    return v15(v6, v8);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.abcReporter);
    id v11 = Logger.logObject.getter();
    NSString v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to generate signature for create new NearbyGroupHost failure", v13, 2u);
      swift_slowDealloc();
    }

    unsigned int v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (String, Any)(a1, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t NearbyGroupHostManager.handle(_:)(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization?);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0);
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  return _swift_task_switch(NearbyGroupHostManager.handle(_:), v1, 0);
}

uint64_t NearbyGroupHostManager.handle(_:)()
{
  uint64_t v25 = v0;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[14];
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent(v1, v2, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[14];
  if (v6)
  {
    uint64_t v9 = v0[10];
    uint64_t v8 = v0[11];
    uint64_t v10 = v0[8];
    uint64_t v11 = v0[9];
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    outlined init with copy of NearbyGroupHostIDSService.MessageEvent(v7, v11, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v9);
    outlined init with copy of (String, Any)(v11, v10, &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v9) == 1)
    {
      unint64_t v13 = 0xE300000000000000;
      uint64_t v14 = 7104878;
    }
    else
    {
      uint64_t v16 = v0[12];
      uint64_t v15 = v0[13];
      outlined init with take of NearbyGroupHostIDSService.MessageEvent(v0[8], v15, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
      outlined init with copy of NearbyGroupHostIDSService.MessageEvent(v15, v16, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
      uint64_t v14 = String.init<A>(reflecting:)();
      unint64_t v13 = v17;
      outlined destroy of NearbyGroupHostIDSService.MessageEvent(v15, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
    }
    uint64_t v18 = v0[14];
    outlined destroy of Any?(v0[9], &demangling cache variable for type metadata for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization?);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NearbyGroupHostIDSService.MessageEvent(v18, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received request to create group for initialization: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    outlined destroy of NearbyGroupHostIDSService.MessageEvent(v0[14], type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
  }

  long long v23 = *(_OWORD *)(v0 + 3);
  (*(void (**)(void, void, void))(v0[6] + 16))(v0[7], v0[3], v0[5]);
  uint64_t v19 = swift_task_alloc();
  v0[15] = v19;
  *(_OWORD *)(v19 + 16) = v23;
  id v20 = (void *)swift_task_alloc();
  v0[16] = v20;
  *id v20 = v0;
  v20[1] = NearbyGroupHostManager.handle(_:);
  uint64_t v21 = v0[7];
  return NearbyGroupHostManager.createGroup(id:generator:)(v21, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyGroupHostManager.handle(_:), v19);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t NearbyGroupHostManager.handle(_:)(void *a1)
{
  uint64_t v4 = *(void **)v2;
  os_log_type_t v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[4];
    (*(void (**)(void, void))(v4[6] + 8))(v4[7], v4[5]);
    swift_task_dealloc();
    return _swift_task_switch(NearbyGroupHostManager.handle(_:), v6, 0);
  }
  else
  {
    uint64_t v7 = v4[6];
    uint64_t v8 = v4[7];
    uint64_t v9 = v4[5];

    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v5[1];
    return v10();
  }
}

uint64_t closure #1 in NearbyGroupHostManager.handle(_:)(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(closure #1 in NearbyGroupHostManager.handle(_:), a2, 0);
}

uint64_t closure #1 in NearbyGroupHostManager.handle(_:)()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  type metadata accessor for NearbyGroupHost();
  outlined init with copy of NearbyGroupHostIDSService.MessageEvent(v3, v1, type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
  swift_beginAccess();
  uint64_t v4 = NearbyGroupHost.__allocating_init(remoteInitialization:idsService:localMemberToken:)(v1, (char *)*(id *)(v2 + 112), 0, 0);
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

uint64_t NearbyGroupHostManager.removeGroup(groupID:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  BOOL v37 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v9 = &v31[-v8];
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.host);
  uint64_t v38 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v38(v9, a1, v4);
  swift_retain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  int v13 = v12;
  BOOL v14 = os_log_type_enabled(v11, v12);
  uint64_t v36 = v2;
  if (v14)
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v35 = a1;
    uint64_t v16 = v15;
    uint64_t v34 = swift_slowAlloc();
    v40[0] = v34;
    *(_DWORD *)uint64_t v16 = 136315394;
    os_log_t v33 = v11;
    uint64_t v39 = v2;
    type metadata accessor for NearbyGroupHostManager();
    int v32 = v13;
    swift_retain();
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v16 + 12) = 2080;
    lazy protocol witness table accessor for type NearbyGroupHostManager and conformance NearbyGroupHostManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
    v21(v9, v4);
    os_log_t v22 = v33;
    _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v32, "%s removing NearbyGroup id: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v35;
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    uint64_t v21 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
    v21(v9, v4);
  }
  uint64_t v23 = (uint64_t)v37;
  v38(v37, a1, v4);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v24 = a1;
  uint64_t v25 = v36;
  uint64_t v26 = (void (*)(uint64_t *, void))static Published.subscript.modify();
  uint64_t v27 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v23);
  v21((unsigned char *)v23, v4);

  v26(v40, 0);
  swift_release();
  swift_release();
  uint64_t v28 = v25 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners;
  swift_beginAccess();
  if (*(void *)(*(void *)v28 + 16))
  {
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v24);
    if (v29)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      Task.cancel()();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v24);
  swift_endAccess();
  return swift_release();
}

uint64_t NearbyGroupHostManager.createGroup(id:generator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher);
  v4[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[18] = v6;
  v4[19] = *(void *)(v6 + 64);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v4[22] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v4[23] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[24] = v8;
  v4[25] = *(void *)(v8 + 64);
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  return _swift_task_switch(NearbyGroupHostManager.createGroup(id:generator:), v3, 0);
}

uint64_t NearbyGroupHostManager.createGroup(id:generator:)()
{
  unint64_t v41 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (*(void *)(v0[9] + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v0[13]);
    char v2 = v1;
    swift_bridgeObjectRelease();
    if (v2)
    {
      if (one-time initialization token for host != -1) {
        swift_once();
      }
      uint64_t v3 = v0[26];
      uint64_t v4 = v0[23];
      uint64_t v5 = v0[24];
      uint64_t v6 = v0[13];
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Log.host);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      BOOL v10 = os_log_type_enabled(v8, v9);
      uint64_t v11 = v0[26];
      uint64_t v12 = v0[23];
      uint64_t v13 = v0[24];
      if (v10)
      {
        BOOL v14 = (uint8_t *)swift_slowAlloc();
        v40[0] = swift_slowAlloc();
        *(_DWORD *)BOOL v14 = 136315138;
        lazy protocol witness table accessor for type NearbyGroupHostManager and conformance NearbyGroupHostManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Trying to create a NearbyGroup with %s when one already exists.", v14, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v13 + 8))(v0[26], v0[23]);
      }

      char v36 = 0;
LABEL_19:
      lazy protocol witness table accessor for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors();
      swift_allocError();
      char *v37 = v36;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v38 = (uint64_t (*)(void))v0[1];
      return v38();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v17 = *(void *)(v0[10] + 16);
  swift_bridgeObjectRelease();
  unint64_t v18 = (void *)specialized NearbyGroupServerBag.numericConfig(for:)(3);
  id v19 = [v18 integerValue];

  if (v17 >= (uint64_t)v19)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v22 = v0[27];
    uint64_t v24 = v0[23];
    uint64_t v23 = v0[24];
    uint64_t v25 = v0[13];
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.host);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v25, v24);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = v0[27];
    uint64_t v31 = v0[23];
    uint64_t v32 = v0[24];
    if (v29)
    {
      os_log_t v33 = (uint8_t *)swift_slowAlloc();
      v40[0] = swift_slowAlloc();
      *(_DWORD *)os_log_t v33 = 136315138;
      lazy protocol witness table accessor for type NearbyGroupHostManager and conformance NearbyGroupHostManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to create new NearbyGroupHost with %s due to group count limit", v33, 0xCu);
      char v36 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v32 + 8))(v0[27], v0[23]);

      char v36 = 1;
    }
    goto LABEL_19;
  }
  uint64_t v39 = (uint64_t (*)(void))(v0[14] + *(int *)v0[14]);
  unint64_t v20 = (void *)swift_task_alloc();
  v0[30] = v20;
  *unint64_t v20 = v0;
  v20[1] = NearbyGroupHostManager.createGroup(id:generator:);
  return v39();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t *v4;
  uint64_t *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, uint64_t, uint64_t);
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  void (*v20)(void *, void);
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  char v1 = (void *)v0[31];
  char v2 = v0[29];
  uint64_t v27 = v0[28];
  uint64_t v32 = v0[22];
  os_log_t v33 = v0[23];
  uint64_t v30 = v0[21];
  uint64_t v26 = v0[20];
  os_log_type_t v28 = v0[19];
  uint64_t v34 = v0[18];
  uint64_t v25 = v0[17];
  uint64_t v31 = v0[16];
  uint64_t v23 = v0[13];
  uint64_t v24 = v0[24];
  uint64_t v22 = *(void (**)(uint64_t))(v24 + 16);
  v22(v2);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v3 = v1;
  unint64_t v20 = (void (*)(void *, void))static Published.subscript.modify();
  uint64_t v5 = v4;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v35 = *v5;
  void *v5 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v3, v2, isUniquelyReferenced_nonNull_native);
  void *v5 = v35;
  swift_bridgeObjectRelease();
  BOOL v29 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v29(v2, v33);
  v20(v0 + 2, 0);
  swift_release();
  swift_release();
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v2, v23, v33);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v32, 1, 1, v7);
  uint64_t v21 = swift_allocObject();
  uint64_t v8 = swift_weakInit();
  (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0x138))(v8);
  os_log_type_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v34 + 32);
  v9(v26, v30, v25);
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v27, v23, v33);
  BOOL v10 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v11 = (v28 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = (*(unsigned __int8 *)(v24 + 80) + v11 + 8) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  v9(v13 + v10, v26, v25);
  *(void *)(v13 + v11) = v21;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 32))(v13 + v12, v27, v33);
  BOOL v14 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v32, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyGroupHostManager.createGroup(id:generator:), v13);
  uint64_t v15 = (uint64_t *)(v31
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners);
  swift_beginAccess();
  unint64_t v16 = swift_isUniquelyReferenced_nonNull_native();
  char v36 = *v15;
  *uint64_t v15 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, v2, v16);
  *uint64_t v15 = v36;
  swift_bridgeObjectRelease();
  v29(v2, v33);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(uint64_t))v0[1];
  unint64_t v18 = v0[31];
  return v17(v18);
}

uint64_t NearbyGroupHostManager.createGroup(id:generator:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 128);
    *(void *)(v4 + 248) = a1;
    return _swift_task_switch(NearbyGroupHostManager.createGroup(id:generator:), v8, 0);
  }
}

uint64_t closure #1 in NearbyGroupHostManager.createGroup(id:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  uint64_t v7 = type metadata accessor for UUID();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroupHost.State>.Publisher>);
  v6[13] = v8;
  v6[14] = *(void *)(v8 - 8);
  v6[15] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroupHost.State>.Publisher>.Iterator);
  v6[16] = v9;
  v6[17] = *(void *)(v9 - 8);
  v6[18] = swift_task_alloc();
  return _swift_task_switch(closure #1 in NearbyGroupHostManager.createGroup(id:generator:), 0, 0);
}

uint64_t closure #1 in NearbyGroupHostManager.createGroup(id:generator:)()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Published<NearbyGroupHost.State>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher);
  Publisher<>.values.getter();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_beginAccess();
  uint64_t v4 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<NearbyGroupHost.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroupHost.State>.Publisher>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[19] = v5;
  void *v5 = v0;
  v5[1] = closure #1 in NearbyGroupHostManager.createGroup(id:generator:);
  uint64_t v6 = v0[16];
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 22, v6, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in NearbyGroupHostManager.createGroup(id:generator:);
  }
  else {
    uint64_t v2 = closure #1 in NearbyGroupHostManager.createGroup(id:generator:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  *(unsigned char *)(v0 + 177) = *(unsigned char *)(v0 + 176);
  return _swift_task_switch(closure #1 in NearbyGroupHostManager.createGroup(id:generator:), 0, 0);
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v26 = v0;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 177);
  if (v1 != 2)
  {
    if (v1 != 3)
    {
      uint64_t v2 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<NearbyGroupHost.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroupHost.State>.Publisher>.Iterator);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 152) = v3;
      *uint64_t v3 = v0;
      v3[1] = closure #1 in NearbyGroupHostManager.createGroup(id:generator:);
      uint64_t v4 = *(void *)(v0 + 128);
      return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 176, v4, v2);
    }
    goto LABEL_11;
  }
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 168) = Strong;
  if (!Strong)
  {
LABEL_11:
    (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  uint64_t v6 = Strong;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 96);
  BOOL v10 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.host);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
  swift_retain_n();
  uint64_t v12 = Logger.logObject.getter();
  uint64_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  unint64_t v16 = *(void *)(v0 + 88);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v17 = *(void *)(v0 + 80);
  if (v14)
  {
    unint64_t v18 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)unint64_t v18 = 136315394;
    *(void *)(v0 + 48) = v6;
    type metadata accessor for NearbyGroupHostManager();
    swift_retain();
    id v19 = String.init<A>(reflecting:)();
    *(void *)(v18 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v25);
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    lazy protocol witness table accessor for type NearbyGroupHostManager and conformance NearbyGroupHostManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v18 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v25);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s learned that NearbyGroup %s invalidated.", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }

  return _swift_task_switch(closure #1 in NearbyGroupHostManager.createGroup(id:generator:), v6, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 40) = *(void *)(v0 + 160);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t v2;

  NearbyGroupHostManager.removeGroup(groupID:)(*(void *)(v0 + 72));
  return _swift_task_switch(closure #1 in NearbyGroupHostManager.createGroup(id:generator:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  swift_release();
  uint64_t v1 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<NearbyGroupHost.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroupHost.State>.Publisher>.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in NearbyGroupHostManager.createGroup(id:generator:);
  uint64_t v3 = *(void *)(v0 + 128);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 176, v3, v1);
}

uint64_t NearbyGroupHostManager.createGroup(with:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(NearbyGroupHostManager.createGroup(with:), v1, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  uint64_t v4 = (void *)*v2;
  v4[8] = v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v5 = v4[6];
  uint64_t v6 = v4[5];
  uint64_t v7 = v4[4];
  uint64_t v8 = v4[3];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v9 = NearbyGroupHostManager.createGroup(with:);
  }
  else
  {
    v4[9] = a1;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v9 = NearbyGroupHostManager.createGroup(with:);
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t NearbyGroupHostManager.createGroup(with:)()
{
  uint64_t v1 = (void *)v0[2];
  NearbyGroupCreationRequest.id.getter();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroupHostManager.createGroup(id:generator:)
                                                                  + async function pointer to specialized NearbyGroupHostManager.createGroup(id:generator:));
  id v2 = v1;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  *uint64_t v3 = v0;
  v3[1] = NearbyGroupHostManager.createGroup(with:);
  uint64_t v4 = v0[6];
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  return v8(v4, v5, v6, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  uint64_t v1 = *(void **)(v0 + 72);
  id v2 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x1E8))();

  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t NearbyGroupHostManager.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager__groups;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t NearbyGroupHostManager.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager__groups;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return _swift_defaultActor_deallocate(v0);
}

uint64_t NearbyGroupHostManager.unownedExecutor.getter()
{
  return v0;
}

uint64_t specialized _PublisherElements.Iterator.Inner.cancel()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v0 + 24);
  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  uint64_t v6 = v0 + 32;
  swift_beginAccess();
  outlined init with copy of (String, Any)(v0 + 32, (uint64_t)&v43, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
  if (v44 >= 2)
  {
    outlined init with take of PseudonymProtocol(&v43, (uint64_t)v41);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.default);
    outlined init with copy of PseudonymProtocol((uint64_t)v41, (uint64_t)v39);
    BOOL v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v31 = v4;
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)unint64_t v16 = 136315138;
      outlined init with copy of PseudonymProtocol((uint64_t)v39, (uint64_t)v38);
      outlined init with copy of (String, Any)((uint64_t)v38, (uint64_t)&v36, &demangling cache variable for type metadata for Subscription?);
      uint64_t v32 = v5;
      if (v37)
      {
        outlined init with take of PseudonymProtocol(&v36, (uint64_t)v34);
        outlined init with copy of PseudonymProtocol((uint64_t)v34, (uint64_t)&v33);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
        uint64_t v17 = String.init<A>(reflecting:)();
        unint64_t v19 = v18;
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v34);
      }
      else
      {
        uint64_t v17 = 7104878;
        unint64_t v19 = 0xE300000000000000;
      }
      outlined destroy of Any?((uint64_t)v38, &demangling cache variable for type metadata for Subscription?);
      v38[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v39);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Handling cancellation by terminating upstream subscription: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v4 = v31;
      uint64_t v5 = v32;
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v39);
    }
    memset(v39, 0, sizeof(v39));
    long long v40 = xmmword_1000D77C0;
    swift_beginAccess();
    outlined assign with take of _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State((uint64_t)v39, v6);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    __swift_project_boxed_opaque_existential_1(v41, v42);
    dispatch thunk of Cancellable.cancel()();
    uint64_t v26 = *(void *)(v5 + 16);
    if (v26)
    {
      uint64_t v27 = (uint64_t *)(v5 + 32);
      do
      {
        uint64_t v28 = *v27++;
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v3, 1, 1, v29);
        outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)v3, *(void *)(*(void *)(v28 + 64) + 40), &demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
        swift_continuation_resume();
        --v26;
      }
      while (v26);
    }
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v41);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v31 = v4;
      BOOL v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      v34[0] = v30;
      *(_DWORD *)BOOL v10 = 136315138;
      outlined init with copy of (String, Any)(v6, (uint64_t)v41, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
      outlined init with copy of (String, Any)((uint64_t)v41, (uint64_t)v39, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State?);
      uint64_t v32 = v5;
      if ((void)v40 == 2)
      {
        uint64_t v11 = 7104878;
        unint64_t v12 = 0xE300000000000000;
      }
      else
      {
        outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)v39, (uint64_t)v38, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
        outlined init with copy of (String, Any)((uint64_t)v38, (uint64_t)&v36, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
        uint64_t v11 = String.init<A>(reflecting:)();
        unint64_t v12 = v20;
        outlined destroy of Any?((uint64_t)v38, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
      }
      outlined destroy of Any?((uint64_t)v41, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State?);
      v41[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Terminating sequence from state: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v4 = v31;
      uint64_t v5 = v32;
    }
    else
    {

      swift_release_n();
    }
    memset(v41, 0, sizeof(v41));
    long long v42 = xmmword_1000D77C0;
    swift_beginAccess();
    outlined assign with take of _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State((uint64_t)v41, v6);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    uint64_t v21 = *(void *)(v5 + 16);
    if (v21)
    {
      uint64_t v22 = (uint64_t *)(v5 + 32);
      do
      {
        uint64_t v23 = *v22++;
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v3, 1, 1, v24);
        outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)v3, *(void *)(*(void *)(v23 + 64) + 40), &demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
        swift_continuation_resume();
        --v21;
      }
      while (v21);
    }
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)&v43, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
  }
}

void specialized closure #1 in _PublisherElements.Iterator.Inner.next()(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = (os_unfair_lock_s *)a2[2];
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  outlined init with copy of (String, Any)((uint64_t)(a2 + 4), (uint64_t)&v24, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
  if (!v25)
  {
    os_log_type_t v9 = a2 + 3;
    swift_beginAccess();
    BOOL v10 = (void *)a2[3];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a2[3] = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      BOOL v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *os_log_type_t v9 = v10;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      BOOL v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
      *os_log_type_t v9 = v10;
    }
    v10[2] = v13 + 1;
    v10[v13 + 4] = a1;
    swift_endAccess();
    BOOL v14 = a2 + 9;
    swift_beginAccess();
    uint64_t v15 = a2[9];
    static Subscribers.Demand.unlimited.getter();
    if (static Subscribers.Demand.== infix(_:_:)()) {
      goto LABEL_12;
    }
    if (v15 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v16 = v15 + 1;
    if (__OFADD__(v15, 1)) {
LABEL_12:
    }
      uint64_t v16 = static Subscribers.Demand.unlimited.getter();
    *BOOL v14 = v16;
    swift_endAccess();
    os_unfair_lock_unlock(v7);
    return;
  }
  if (v25 == 1)
  {
    os_unfair_lock_unlock(v7);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)v6, *(void *)(*(void *)(a1 + 64) + 40), &demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
    swift_continuation_resume();
  }
  else
  {
    outlined init with take of PseudonymProtocol(&v24, (uint64_t)v23);
    uint64_t v17 = a2 + 3;
    swift_beginAccess();
    unint64_t v18 = (void *)a2[3];
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    a2[3] = v18;
    if ((v19 & 1) == 0)
    {
      unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      *uint64_t v17 = v18;
    }
    unint64_t v21 = v18[2];
    unint64_t v20 = v18[3];
    if (v21 >= v20 >> 1)
    {
      unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v18);
      *uint64_t v17 = v18;
    }
    v18[2] = v21 + 1;
    v18[v21 + 4] = a1;
    swift_endAccess();
    os_unfair_lock_unlock(v7);
    __swift_project_boxed_opaque_existential_1(v23, v23[3]);
    dispatch thunk of Subscription.request(_:)();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v23);
  }
}

uint64_t specialized closure #1 in _PublisherElements.Iterator.next()()
{
  return specialized _PublisherElements.Iterator.Inner.cancel()();
}

uint64_t specialized closure #2 in _PublisherElements.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(specialized closure #2 in _PublisherElements.Iterator.next(), 0, 0);
}

uint64_t specialized closure #2 in _PublisherElements.Iterator.next()()
{
  *(void *)(v0 + 104) = **(void **)(v0 + 88);
  swift_retain();
  return _swift_task_switch(specialized closure #2 in _PublisherElements.Iterator.next(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = v0[12];
  uint64_t v2 = (void *)v0[13];
  v0[2] = v0;
  v0[7] = v1;
  v0[3] = specialized closure #2 in _PublisherElements.Iterator.next();
  uint64_t v3 = swift_continuation_init();
  specialized closure #1 in _PublisherElements.Iterator.Inner.next()(v3, v2);
  return _swift_continuation_await(v0 + 2);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?(*(void *)(*v0 + 96), *(void *)(*v0 + 80), &demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

char *specialized NearbyGroupHostIDSService.init(idsService:)(void *a1, char *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  __chkstk_darwin(v4);
  uint64_t v49 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for Publishers.PrefetchStrategy();
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unint64_t v44 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>);
  uint64_t v47 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  os_log_t v45 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  __chkstk_darwin(v8);
  long long v40 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v11 - 8);
  v56[3] = (id)type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSService);
  v56[4] = &protocol witness table for IDSService;
  v56[0] = a1;
  uint64_t v12 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService__incomingMessages;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  swift_allocObject();
  uint64_t v39 = a2;
  uint64_t v13 = PassthroughSubject.init()();
  uint64_t v43 = (uint64_t)a2;
  uint64_t v38 = v12;
  *(void *)&a2[v12] = v13;
  uint64_t v54 = 0;
  unint64_t v55 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v54 = (void *)0xD00000000000001ALL;
  unint64_t v55 = 0x80000001000DBAF0;
  id v14 = [a1 serviceIdentifier];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;
  }
  else
  {
    unint64_t v18 = (void *)0xE700000000000000;
    uint64_t v16 = 0x4E574F4E4B4E55;
  }
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v19._uint64_t countAndFlagsBits = v16;
  v19._uint64_t object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  uint64_t v54 = &_swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type NearbyGroupHostManager and conformance NearbyGroupHostManager((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v41 + 104))(v40, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v42);
  uint64_t v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  unint64_t v21 = v39;
  *(void *)&v39[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_queue] = v20;
  outlined init with copy of PseudonymProtocol((uint64_t)v56, (uint64_t)&v21[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service]);
  uint64_t v54 = *(void **)(v43 + v38);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  uint64_t v43 = Publisher.eraseToAnyPublisher()();
  uint64_t v54 = (void *)v43;
  uint64_t v22 = v46;
  uint64_t v23 = v44;
  uint64_t v24 = v48;
  (*(void (**)(char *, void, uint64_t))(v46 + 104))(v44, enum case for Publishers.PrefetchStrategy.byRequest(_:), v48);
  uint64_t v26 = v51;
  uint64_t v25 = v52;
  uint64_t v27 = v49;
  (*(void (**)(char *, void, uint64_t))(v51 + 104))(v49, enum case for Publishers.BufferingStrategy.dropOldest<A>(_:), v52);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  uint64_t v28 = v45;
  Publisher.buffer(size:prefetch:whenFull:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v25);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>);
  uint64_t v29 = v50;
  uint64_t v30 = Publisher.eraseToAnyPublisher()();
  swift_release();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v29);
  *(void *)&v21[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_incomingMessages] = v30;

  uint64_t v31 = (objc_class *)type metadata accessor for NearbyGroupHostIDSService();
  v53.receiver = v21;
  v53.super_class = v31;
  id v32 = objc_msgSendSuper2(&v53, "init");
  id v33 = objc_allocWithZone((Class)IDSServiceDelegateProperties);
  uint64_t v34 = (char *)v32;
  id v35 = [v33 init];
  [v35 setWantsCrossAccountMessaging:1];
  [v56[0] addDelegate:v34 withDelegateProperties:v35 queue:*(void *)&v34[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_queue]];

  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v56);
  return v34;
}

uint64_t sub_1000617AC()
{
  swift_unknownObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in NearbyGroupHostManager.init(serviceName:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return NearbyGroupHostManager.listenForEvents()();
}

uint64_t type metadata accessor for NearbyGroupHostManager()
{
  uint64_t result = type metadata singleton initialization cache for NearbyGroupHostManager;
  if (!type metadata singleton initialization cache for NearbyGroupHostManager) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with take of NearbyGroupHostIDSService.MessageEvent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of NearbyGroupHostIDSService.MessageEvent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000619D8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_errorRelease();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for closure #1 in NearbyGroupHostManager.listenForEvents()()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(_OWORD *)(v2 + 24) = v3;
  *(void *)(v2 + 40) = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_abcReporter;
  return _swift_task_switch(closure #1 in NearbyGroupHostManager.listenForEvents(), v3, 0);
}

uint64_t sub_100061AD8()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t outlined init with copy of NearbyGroupHostIDSService.MessageEvent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in NearbyGroupHostManager.handle(_:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in NearbyGroupHostManager.handle(_:);
  return closure #1 in NearbyGroupHostManager.handle(_:)(v2, v3);
}

uint64_t partial apply for closure #1 in NearbyGroupHostManager.handle(_:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

unint64_t lazy protocol witness table accessor for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors);
  }
  return result;
}

uint64_t sub_100061D60()
{
  swift_weakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for closure #1 in NearbyGroupHostManager.createGroup(id:generator:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80);
  uint64_t v9 = v7 + v8 + 8;
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = *(void *)(v1 + v7);
  uint64_t v14 = v1 + (v9 & ~v8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyGroupHostManager.createGroup(id:generator:)(a1, v10, v11, v12, v13, v14);
}

uint64_t specialized NearbyGroupHostManager.createGroup(id:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[18] = a3;
  v4[19] = a4;
  v4[16] = a1;
  v4[17] = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher);
  v4[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[21] = v7;
  v4[22] = *(void *)(v7 + 64);
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v4[25] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v4[26] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[27] = v9;
  v4[28] = *(void *)(v9 + 64);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  unsigned char v4[32] = swift_task_alloc();
  return _swift_task_switch(specialized NearbyGroupHostManager.createGroup(id:generator:), a2, 0);
}

uint64_t specialized NearbyGroupHostManager.createGroup(id:generator:)()
{
  uint64_t v41 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (*(void *)(v0[12] + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v0[16]);
    char v2 = v1;
    swift_bridgeObjectRelease();
    if (v2)
    {
      if (one-time initialization token for host != -1) {
        swift_once();
      }
      uint64_t v3 = v0[29];
      uint64_t v4 = v0[26];
      uint64_t v5 = v0[27];
      uint64_t v6 = v0[16];
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Log.host);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      BOOL v10 = os_log_type_enabled(v8, v9);
      uint64_t v11 = v0[29];
      uint64_t v12 = v0[26];
      uint64_t v13 = v0[27];
      if (v10)
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        v40[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 136315138;
        lazy protocol witness table accessor for type NearbyGroupHostManager and conformance NearbyGroupHostManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Trying to create a NearbyGroup with %s when one already exists.", v14, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v13 + 8))(v0[29], v0[26]);
      }

      char v35 = 0;
LABEL_19:
      long long v36 = (void *)v0[18];
      lazy protocol witness table accessor for type NearbyGroupHostManager.Errors and conformance NearbyGroupHostManager.Errors();
      swift_allocError();
      char *v37 = v35;
      swift_willThrow();

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v38 = (uint64_t (*)(void))v0[1];
      return v38();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v17 = *(void *)(v0[14] + 16);
  swift_bridgeObjectRelease();
  unint64_t v18 = (void *)specialized NearbyGroupServerBag.numericConfig(for:)(3);
  id v19 = [v18 integerValue];

  if (v17 >= (uint64_t)v19)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v21 = v0[30];
    uint64_t v22 = v0[26];
    uint64_t v23 = v0[27];
    uint64_t v24 = v0[16];
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.host);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, v24, v22);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = v0[30];
    uint64_t v30 = v0[26];
    uint64_t v31 = v0[27];
    if (v28)
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      v40[0] = swift_slowAlloc();
      *(_DWORD *)id v32 = 136315138;
      lazy protocol witness table accessor for type NearbyGroupHostManager and conformance NearbyGroupHostManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to create new NearbyGroupHost with %s due to group count limit", v32, 0xCu);
      char v35 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v31 + 8))(v0[30], v0[26]);

      char v35 = 1;
    }
    goto LABEL_19;
  }
  uint64_t v20 = v0[19];
  return _swift_task_switch(specialized NearbyGroupHostManager.createGroup(id:generator:), v20, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  char v2 = (void *)v0[18];
  char v1 = v0[19];
  type metadata accessor for NearbyGroupHost();
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 112);
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[33] = v6;
  *uint64_t v6 = v0;
  v6[1] = specialized NearbyGroupHostManager.createGroup(id:generator:);
  uint64_t v7 = v0[18];
  return NearbyGroupHost.__allocating_init(request:idsService:localMemberToken:)(v7, (uint64_t)v5, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t *v4;
  uint64_t *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, uint64_t, uint64_t);
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  void (*v20)(void *, void);
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  char v1 = (void *)v0[35];
  char v2 = v0[32];
  os_log_type_t v27 = v0[31];
  uint64_t v33 = v0[25];
  unint64_t v34 = v0[26];
  uint64_t v31 = v0[24];
  uint64_t v26 = v0[23];
  BOOL v28 = v0[22];
  char v35 = v0[21];
  uint64_t v25 = v0[20];
  uint64_t v30 = (void *)v0[18];
  id v32 = v0[17];
  uint64_t v23 = v0[16];
  uint64_t v24 = v0[27];
  uint64_t v22 = *(void (**)(uint64_t))(v24 + 16);
  v22(v2);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v3 = v1;
  uint64_t v20 = (void (*)(void *, void))static Published.subscript.modify();
  uint64_t v5 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  long long v36 = *v5;
  void *v5 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v3, v2, isUniquelyReferenced_nonNull_native);
  void *v5 = v36;
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v29(v2, v34);
  v20(v0 + 2, 0);
  swift_release();
  swift_release();
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v2, v23, v34);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v33, 1, 1, v7);
  uint64_t v21 = swift_allocObject();
  uint64_t v8 = swift_weakInit();
  (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0x138))(v8);
  os_log_type_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v35 + 32);
  v9(v26, v31, v25);
  ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v27, v23, v34);
  BOOL v10 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  uint64_t v11 = (v28 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = (*(unsigned __int8 *)(v24 + 80) + v11 + 8) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  v9(v13 + v10, v26, v25);
  *(void *)(v13 + v11) = v21;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 32))(v13 + v12, v27, v34);
  uint64_t v14 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v33, (uint64_t)&closure #1 in NearbyGroupHostManager.createGroup(id:generator:)partial apply, v13);
  uint64_t v15 = (uint64_t *)(v32
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners);
  swift_beginAccess();
  unint64_t v16 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v37 = *v15;
  *uint64_t v15 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, v2, v16);
  *uint64_t v15 = v37;
  swift_bridgeObjectRelease();
  v29(v2, v34);
  swift_endAccess();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(uint64_t))v0[1];
  unint64_t v18 = v0[35];
  return v17(v18);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized NearbyGroupHostManager.createGroup(id:generator:)(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[34] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[17];
  if (v1)
  {
    uint64_t v6 = specialized NearbyGroupHostManager.createGroup(id:generator:);
  }
  else
  {
    v4[35] = a1;
    uint64_t v6 = specialized NearbyGroupHostManager.createGroup(id:generator:);
  }
  return _swift_task_switch(v6, v5, 0);
}

id sub_100062E78@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 112);
  *a2 = v4;
  return v4;
}

uint64_t sub_100062EDC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_groupStateListeners);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100062F38@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService22NearbyGroupHostManager_idsMessageListenerTask);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t ObjC metadata update function for NearbyGroupHostManager()
{
  return type metadata accessor for NearbyGroupHostManager();
}

void type metadata completion function for NearbyGroupHostManager()
{
  type metadata accessor for Published<[UUID : NearbyGroupHost]>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

unsigned char *storeEnumTagSinglePayload for NearbyGroupHostManager.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000631A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupHostManager.Errors()
{
  return &type metadata for NearbyGroupHostManager.Errors;
}

uint64_t objectdestroy_23Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return _swift_deallocObject(v0, v10, v11);
}

uint64_t closure #1 in NearbyGroupHostManager.createGroup(id:generator:)partial apply(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroupHost.State>.Publisher)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80);
  uint64_t v9 = v7 + v8 + 8;
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = *(void *)(v1 + v7);
  uint64_t v14 = v1 + (v9 & ~v8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  return closure #1 in NearbyGroupHostManager.createGroup(id:generator:)(a1, v10, v11, v12, v13, v14);
}

uint64_t outlined assign with take of _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner.State);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA_58(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  unint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t lazy protocol witness table accessor for type NearbyGroupHostManager and conformance NearbyGroupHostManager(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t NearbyProtoJoinRequest.encryptedData.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest(0) + 24));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for NearbyProtoJoinRequest(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinRequest);
}

uint64_t NearbyProtoJoinRequest.publicKey.getter()
{
  return NearbyProtoJoinRequest.publicKey.getter(type metadata accessor for NearbyProtoJoinRequest);
}

void NearbyProtoNearbySessionMessageType.init(rawValue:)()
{
}

void protocol witness for Enum.init() in conformance NearbyProtoNearbySessionMessageType(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

void protocol witness for Enum.init(rawValue:) in conformance NearbyProtoNearbySessionMessageType(uint64_t a1@<X8>)
{
  specialized NearbyProtoNearbySessionMessageType.init(rawValue:)();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance NearbyProtoNearbySessionMessageType()
{
  return *(void *)v0;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance NearbyProtoNearbySessionMessageType(uint64_t a1@<X8>)
{
  specialized NearbyProtoNearbySessionMessageType.init(rawValue:)();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NearbyProtoNearbySessionMessageType(void *a1@<X8>)
{
  *a1 = *v1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyProtoNearbySessionMessageType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoNearbySessionMessageType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType();
  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyProtoNearbySessionMessageType()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyProtoNearbySessionMessageType(void *a1, void *a2)
{
  return *a1 == *a2;
}

void one-time initialization function for allCases()
{
  static NearbyProtoNearbySessionMessageType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t *NearbyProtoNearbySessionMessageType.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static NearbyProtoNearbySessionMessageType.allCases;
}

uint64_t static NearbyProtoNearbySessionMessageType.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static NearbyProtoNearbySessionMessageType.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static NearbyProtoNearbySessionMessageType.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static NearbyProtoNearbySessionMessageType.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance NearbyProtoNearbySessionMessageType@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a1 = static NearbyProtoNearbySessionMessageType.allCases;
  return swift_bridgeObjectRetain();
}

uint64_t NearbyProtoSessionMessage.version.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for NearbyProtoSessionMessage(0) + 20));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t NearbyProtoSessionMessage.version.setter(int a1)
{
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*NearbyProtoSessionMessage.version.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoSessionMessage(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return NearbyProtoSessionMessage.version.modify;
}

uint64_t NearbyProtoSessionMessage.version.modify(uint64_t result)
{
  uint64_t v1 = *(void *)result + *(int *)(result + 12);
  *(_DWORD *)uint64_t v1 = *(_DWORD *)(result + 8);
  *(unsigned char *)(v1 + 4) = 0;
  return result;
}

BOOL NearbyProtoSessionMessage.hasVersion.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for NearbyProtoSessionMessage(0) + 20) + 4) & 1) == 0;
}

Swift::Void __swiftcall NearbyProtoSessionMessage.clearVersion()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NearbyProtoSessionMessage(0) + 20);
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
}

uint64_t NearbyProtoSessionMessage.type.getter()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for NearbyProtoSessionMessage(0) + 24));
  if (v1[9]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t NearbyProtoSessionMessage.type.setter(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0);
  uint64_t v6 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 9) = 0;
  return result;
}

uint64_t (*NearbyProtoSessionMessage.type.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoSessionMessage(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  char v6 = *((unsigned char *)v4 + 8);
  int v7 = *((unsigned __int8 *)v4 + 9);
  if (v7) {
    uint64_t v5 = 0;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = (v7 | v6) & 1;
  return NearbyProtoSessionMessage.type.modify;
}

uint64_t NearbyProtoSessionMessage.type.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16) + *(int *)(result + 12);
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)uint64_t v1 = *(void *)result;
  *(_WORD *)(v1 + 8) = v2;
  return result;
}

BOOL NearbyProtoSessionMessage.hasType.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for NearbyProtoSessionMessage(0) + 24) + 9) & 1) == 0;
}

Swift::Void __swiftcall NearbyProtoSessionMessage.clearType()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NearbyProtoSessionMessage(0) + 24);
  *(void *)uint64_t v1 = 0;
  *(_WORD *)(v1 + 8) = 256;
}

uint64_t NearbyProtoSessionMessage.data.getter()
{
  return NearbyProtoSessionMessage.data.getter(type metadata accessor for NearbyProtoSessionMessage);
}

uint64_t NearbyProtoSessionMessage.data.setter(uint64_t a1, uint64_t a2)
{
  return NearbyProtoSessionMessage.data.setter(a1, a2, type metadata accessor for NearbyProtoSessionMessage);
}

uint64_t (*NearbyProtoSessionMessage.data.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoSessionMessage(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  char v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

BOOL NearbyProtoSessionMessage.hasData.getter()
{
  return NearbyProtoSessionMessage.hasData.getter(type metadata accessor for NearbyProtoSessionMessage);
}

Swift::Void __swiftcall NearbyProtoSessionMessage.clearData()()
{
}

double NearbyProtoSessionMessage.init()@<D0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  unsigned __int8 v2 = (int *)type metadata accessor for NearbyProtoSessionMessage(0);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  *(void *)uint64_t v4 = 0;
  *(_WORD *)(v4 + 8) = 256;
  double result = 0.0;
  *(_OWORD *)(a1 + v2[7]) = xmmword_1000D61F0;
  return result;
}

uint64_t NearbyProtoConnectionRequest.handle.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyProtoConnectionRequest.handle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t NearbyProtoConnectionRequest.displayName.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 28));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for NearbyProtoConnectionRequest.displayName : NearbyProtoConnectionRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 28));
  unint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = v4;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NearbyProtoConnectionRequest.displayName : NearbyProtoConnectionRequest(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 28));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t NearbyProtoConnectionRequest.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*NearbyProtoConnectionRequest.displayName.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NearbyProtoConnectionRequest.displayName.modify;
}

BOOL NearbyProtoConnectionRequest.hasDisplayName.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 28) + 8) != 0;
}

Swift::Void __swiftcall NearbyProtoConnectionRequest.clearDisplayName()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 28));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t NearbyProtoConnectionRequest.userInfo.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 32));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t key path setter for NearbyProtoConnectionRequest.userInfo : NearbyProtoConnectionRequest(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 32));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  uint64_t result = outlined consume of Data?(v5, v6);
  *unint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NearbyProtoConnectionRequest.userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 32);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NearbyProtoConnectionRequest.userInfo.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

BOOL NearbyProtoConnectionRequest.hasUserInfo.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 32) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NearbyProtoConnectionRequest.clearUserInfo()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 32);
  outlined consume of Data?(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_1000D61F0;
}

uint64_t NearbyProtoConnectionRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyProtoConnectionRequest.unknownFields.getter(type metadata accessor for NearbyProtoConnectionRequest, a1);
}

uint64_t NearbyProtoConnectionRequest.unknownFields.setter(uint64_t a1)
{
  return NearbyProtoConnectionRequest.unknownFields.setter(a1, type metadata accessor for NearbyProtoConnectionRequest);
}

void (__swiftcall *NearbyProtoConnectionRequest.unknownFields.modify())()
{
  return Log.init();
}

double NearbyProtoConnectionRequest.init()@<D0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for NearbyProtoConnectionRequest(0);
  UnknownStorage.init()();
  uint64_t v3 = (void *)((char *)a1 + *(int *)(v2 + 28));
  *uint64_t v3 = 0;
  v3[1] = 0;
  double result = 0.0;
  *(_OWORD *)((char *)a1 + *(int *)(v2 + 32)) = xmmword_1000D61F0;
  return result;
}

uint64_t NearbyProtoConnectionResponse.Content.operation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NearbyProtoConnectionResponse.Content(0);
  return outlined init with copy of (String, Any)(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
}

uint64_t NearbyProtoConnectionResponse.Content.operation.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NearbyProtoConnectionResponse.Content(0);
  return outlined assign with take of AsyncStream<CBDevice>?(a1, v1 + *(int *)(v3 + 24), &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
}

void (__swiftcall *NearbyProtoConnectionResponse.Content.operation.modify())()
{
  return Log.init();
}

uint64_t NearbyProtoConnectionResponse.Content.denied.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NearbyProtoConnectionResponse.Content(0);
  outlined init with copy of (String, Any)(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v5, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    return UnknownStorage.init()();
  }
  return outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v5, a1, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t key path getter for NearbyProtoConnectionResponse.Content.denied : NearbyProtoConnectionResponse.Content@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NearbyProtoConnectionResponse.Content(0);
  outlined init with copy of (String, Any)(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v6, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    return UnknownStorage.init()();
  }
  return outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v6, a2, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t NearbyProtoConnectionResponse.Content.denied.setter(uint64_t a1)
{
  return NearbyProtoConnectionResponse.Content.denied.setter(a1, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

void (*NearbyProtoConnectionResponse.Content.denied.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent(0) - 8)
                 + 64);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0) + 24);
  *((_DWORD *)v3 + 12) = v8;
  outlined init with copy of (String, Any)(v1 + v8, (uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v5, (uint64_t)v7, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
      return NearbyProtoConnectionResponse.Content.denied.modify;
    }
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v5, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  }
  UnknownStorage.init()();
  return NearbyProtoConnectionResponse.Content.denied.modify;
}

void NearbyProtoConnectionResponse.Content.denied.modify(uint64_t a1, char a2)
{
}

uint64_t NearbyProtoConnectionResponse.Content.approved.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NearbyProtoConnectionResponse.Content(0);
  outlined init with copy of (String, Any)(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v5, (uint64_t)a1, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    }
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v5, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  }
  *a1 = xmmword_1000D7960;
  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for NearbyProtoConnectionResponse.Content.approved : NearbyProtoConnectionResponse.Content@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NearbyProtoConnectionResponse.Content(0);
  outlined init with copy of (String, Any)(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v6, (uint64_t)a2, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    }
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v6, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  }
  *a2 = xmmword_1000D7960;
  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for NearbyProtoConnectionResponse.Content.denied : NearbyProtoConnectionResponse.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v9 = a5(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v15 - v10;
  outlined init with copy of NearbyProtoConnectionResponse.Content.DeniedContent(a1, (uint64_t)&v15 - v10, a6);
  uint64_t v12 = a2 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0) + 24);
  outlined destroy of Any?(v12, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v11, v12, a6);
  uint64_t v13 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 0, 1, v13);
}

uint64_t NearbyProtoConnectionResponse.Content.approved.setter(uint64_t a1)
{
  return NearbyProtoConnectionResponse.Content.denied.setter(a1, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t NearbyProtoConnectionResponse.Content.denied.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0) + 24);
  outlined destroy of Any?(v5, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(a1, v5, a2);
  uint64_t v6 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 0, 1, v6);
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1000D7960;
  type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0);
  return UnknownStorage.init()();
}

void (*NearbyProtoConnectionResponse.Content.approved.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) - 8)
                 + 64);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0) + 24);
  *((_DWORD *)v3 + 12) = v8;
  outlined init with copy of (String, Any)(v1 + v8, (uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
LABEL_6:
    _OWORD *v7 = xmmword_1000D7960;
    UnknownStorage.init()();
    return NearbyProtoConnectionResponse.Content.approved.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v5, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v5, (uint64_t)v7, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  return NearbyProtoConnectionResponse.Content.approved.modify;
}

void NearbyProtoConnectionResponse.Content.approved.modify(uint64_t a1, char a2)
{
}

uint64_t NearbyProtoConnectionResponse.Content.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t NearbyProtoConnectionResponse.Content.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

void (__swiftcall *NearbyProtoConnectionResponse.Content.unknownFields.modify())()
{
  return Log.init();
}

uint64_t NearbyGroup_Group.MemberLeft.groupUuid.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t NearbyGroup_Group.MemberLeft.groupUuid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.getter(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent, a1);
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.setter(uint64_t a1)
{
  return NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.setter(a1, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

void (__swiftcall *NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.modify())()
{
  return Log.init();
}

uint64_t NearbyProtoConnectionResponse.Content.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  uint64_t v1 = (char *)a1 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0) + 24);
  uint64_t v2 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return UnknownStorage.init()();
}

uint64_t NearbyProtoJoinRequest.publicKey.setter(uint64_t a1, uint64_t a2)
{
  return NearbyProtoJoinRequest.publicKey.setter(a1, a2, type metadata accessor for NearbyProtoJoinRequest);
}

uint64_t (*NearbyProtoJoinRequest.publicKey.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinRequest(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

BOOL NearbyProtoJoinRequest.hasPublicKey.getter()
{
  return NearbyProtoJoinRequest.hasPublicKey.getter(type metadata accessor for NearbyProtoJoinRequest);
}

Swift::Void __swiftcall NearbyProtoJoinRequest.clearPublicKey()()
{
}

uint64_t key path setter for NearbyProtoJoinRequest.encryptedData : NearbyProtoJoinRequest(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NearbyProtoJoinRequest(0) + 24));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  uint64_t result = outlined consume of Data?(v5, v6);
  *uint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t NearbyProtoJoinRequest.encryptedData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NearbyProtoJoinRequest(0) + 24);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NearbyProtoJoinRequest.encryptedData.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinRequest(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

BOOL NearbyProtoJoinRequest.hasEncryptedData.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest(0) + 24) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NearbyProtoJoinRequest.clearEncryptedData()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest(0) + 24);
  outlined consume of Data?(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_1000D61F0;
}

uint64_t NearbyProtoJoinRequest.Content.displayName.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0) + 24));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for NearbyProtoJoinRequest.Content.displayName : NearbyProtoJoinRequest.Content@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0) + 24));
  unint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    unint64_t v6 = v4;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NearbyProtoJoinRequest.Content.displayName : NearbyProtoJoinRequest.Content(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0) + 24));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t NearbyProtoJoinRequest.Content.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*NearbyProtoJoinRequest.Content.displayName.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return NearbyProtoConnectionRequest.displayName.modify;
}

uint64_t NearbyProtoConnectionRequest.displayName.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(a1[2] + *((int *)a1 + 6));
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
  }
  return result;
}

BOOL NearbyProtoJoinRequest.Content.hasDisplayName.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0) + 24) + 8) != 0;
}

Swift::Void __swiftcall NearbyProtoJoinRequest.Content.clearDisplayName()()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0) + 24));
  swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t NearbyProtoJoinRequest.Content.userInfo.getter()
{
  return NearbyProtoSessionMessage.data.getter(type metadata accessor for NearbyProtoJoinRequest.Content);
}

uint64_t NearbyProtoSessionMessage.data.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 28));
  unint64_t v3 = v2[1];
  if (v3 >> 60 == 15) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *v2;
  }
  outlined copy of Data?(*v2, v3);
  return v4;
}

uint64_t key path setter for NearbyProtoSessionMessage.data : NearbyProtoSessionMessage(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v7 = (uint64_t *)(a2 + *(int *)(a5(0) + 28));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  outlined copy of Data._Representation(v5, v6);
  uint64_t result = outlined consume of Data?(v8, v9);
  uint64_t *v7 = v5;
  v7[1] = v6;
  return result;
}

uint64_t NearbyProtoJoinRequest.Content.userInfo.setter(uint64_t a1, uint64_t a2)
{
  return NearbyProtoSessionMessage.data.setter(a1, a2, type metadata accessor for NearbyProtoJoinRequest.Content);
}

uint64_t NearbyProtoSessionMessage.data.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a3(0) + 28);
  uint64_t result = outlined consume of Data?(*(void *)v6, *(void *)(v6 + 8));
  *(void *)uint64_t v6 = a1;
  *(void *)(v6 + 8) = a2;
  return result;
}

uint64_t (*NearbyProtoJoinRequest.Content.userInfo.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

BOOL NearbyProtoJoinRequest.Content.hasUserInfo.getter()
{
  return NearbyProtoSessionMessage.hasData.getter(type metadata accessor for NearbyProtoJoinRequest.Content);
}

BOOL NearbyProtoSessionMessage.hasData.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 28) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NearbyProtoJoinRequest.Content.clearUserInfo()()
{
}

double NearbyProtoSessionMessage.clearData()(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 28);
  outlined consume of Data?(*(void *)v2, *(void *)(v2 + 8));
  double result = 0.0;
  *(_OWORD *)uint64_t v2 = xmmword_1000D61F0;
  return result;
}

uint64_t NearbyProtoJoinRequest.Content.wantsTokenUri.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0) + 32)) & 1;
}

uint64_t NearbyProtoJoinRequest.Content.wantsTokenUri.setter(char a1)
{
  uint64_t result = type metadata accessor for NearbyProtoJoinRequest.Content(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*NearbyProtoJoinRequest.Content.wantsTokenUri.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return NearbyProtoJoinRequest.Content.wantsTokenUri.modify;
}

uint64_t NearbyProtoJoinRequest.Content.wantsTokenUri.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)result + *(int *)(result + 8)) = *(unsigned char *)(result + 12);
  return result;
}

BOOL NearbyProtoJoinRequest.Content.hasWantsTokenUri.getter()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0) + 32)) != 2;
}

Swift::Void __swiftcall NearbyProtoJoinRequest.Content.clearWantsTokenUri()()
{
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for NearbyProtoJoinRequest.Content(0) + 32)) = 2;
}

uint64_t NearbyProtoJoinRequest.Content.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.getter(type metadata accessor for NearbyProtoJoinRequest.Content, a1);
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t NearbyProtoJoinRequest.Content.unknownFields.setter(uint64_t a1)
{
  return NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.setter(a1, type metadata accessor for NearbyProtoJoinRequest.Content);
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

void (__swiftcall *NearbyProtoJoinRequest.Content.unknownFields.modify())()
{
  return Log.init();
}

double NearbyProtoJoinRequest.Content.init()@<D0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v2 = (int *)type metadata accessor for NearbyProtoJoinRequest.Content(0);
  UnknownStorage.init()();
  uint64_t v3 = (void *)((char *)a1 + v2[6]);
  *uint64_t v3 = 0;
  v3[1] = 0;
  double result = 0.0;
  *(_OWORD *)((char *)a1 + v2[7]) = xmmword_1000D61F0;
  *((unsigned char *)a1 + v2[8]) = 2;
  return result;
}

double NearbyProtoJoinRequest.init()@<D0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for NearbyProtoJoinRequest(0);
  double result = 0.0;
  *(_OWORD *)(a1 + *(int *)(v2 + 20)) = xmmword_1000D61F0;
  *(_OWORD *)(a1 + *(int *)(v2 + 24)) = xmmword_1000D61F0;
  return result;
}

uint64_t NearbyProtoJoinResponse.encryptedData.getter()
{
  return NearbyProtoJoinRequest.publicKey.getter(type metadata accessor for NearbyProtoJoinResponse);
}

uint64_t NearbyProtoJoinRequest.publicKey.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 20));
  unint64_t v3 = v2[1];
  if (v3 >> 60 == 15) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *v2;
  }
  outlined copy of Data?(*v2, v3);
  return v4;
}

uint64_t key path setter for NearbyProtoJoinRequest.publicKey : NearbyProtoJoinRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t *)(a2 + *(int *)(a5(0) + 20));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  outlined copy of Data._Representation(v5, v6);
  uint64_t result = outlined consume of Data?(v8, v9);
  uint64_t *v7 = v5;
  v7[1] = v6;
  return result;
}

uint64_t NearbyProtoJoinResponse.encryptedData.setter(uint64_t a1, uint64_t a2)
{
  return NearbyProtoJoinRequest.publicKey.setter(a1, a2, type metadata accessor for NearbyProtoJoinResponse);
}

uint64_t NearbyProtoJoinRequest.publicKey.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a3(0) + 20);
  uint64_t result = outlined consume of Data?(*(void *)v6, *(void *)(v6 + 8));
  *(void *)uint64_t v6 = a1;
  *(void *)(v6 + 8) = a2;
  return result;
}

uint64_t (*NearbyProtoJoinResponse.encryptedData.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinResponse(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

BOOL NearbyProtoJoinResponse.hasEncryptedData.getter()
{
  return NearbyProtoJoinRequest.hasPublicKey.getter(type metadata accessor for NearbyProtoJoinResponse);
}

BOOL NearbyProtoJoinRequest.hasPublicKey.getter(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 20) + 8) >> 60 != 15;
}

Swift::Void __swiftcall NearbyProtoJoinResponse.clearEncryptedData()()
{
}

double NearbyProtoJoinRequest.clearPublicKey()(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 20);
  outlined consume of Data?(*(void *)v2, *(void *)(v2 + 8));
  double result = 0.0;
  *(_OWORD *)uint64_t v2 = xmmword_1000D61F0;
  return result;
}

uint64_t NearbyProtoJoinResponse.Content.operation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NearbyProtoJoinResponse.Content(0);
  return outlined init with copy of (String, Any)(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
}

uint64_t NearbyProtoJoinResponse.Content.operation.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NearbyProtoJoinResponse.Content(0);
  return outlined assign with take of AsyncStream<CBDevice>?(a1, v1 + *(int *)(v3 + 20), &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
}

void (__swiftcall *NearbyProtoJoinResponse.Content.operation.modify())()
{
  return Log.init();
}

uint64_t NearbyProtoJoinResponse.Content.denied.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NearbyProtoJoinResponse.Content(0);
  outlined init with copy of (String, Any)(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v5, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    return UnknownStorage.init()();
  }
  return outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v5, a1, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t key path getter for NearbyProtoJoinResponse.Content.denied : NearbyProtoJoinResponse.Content@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NearbyProtoJoinResponse.Content(0);
  outlined init with copy of (String, Any)(a1 + *(int *)(v7 + 20), (uint64_t)v6, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v6, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    return UnknownStorage.init()();
  }
  return outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v6, a2, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t NearbyProtoJoinResponse.Content.denied.setter(uint64_t a1)
{
  return NearbyProtoJoinResponse.Content.denied.setter(a1, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
}

void (*NearbyProtoJoinResponse.Content.denied.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent(0) - 8) + 64);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0) + 20);
  *((_DWORD *)v3 + 12) = v8;
  outlined init with copy of (String, Any)(v1 + v8, (uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v5, (uint64_t)v7, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
      return NearbyProtoJoinResponse.Content.denied.modify;
    }
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v5, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  }
  UnknownStorage.init()();
  return NearbyProtoJoinResponse.Content.denied.modify;
}

void NearbyProtoJoinResponse.Content.denied.modify(uint64_t a1, char a2)
{
}

double NearbyProtoJoinResponse.Content.approved.getter@<D0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NearbyProtoJoinResponse.Content(0);
  outlined init with copy of (String, Any)(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v5, (uint64_t)a1, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
      return result;
    }
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v5, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
  UnknownStorage.init()();
  double result = 0.0;
  *(_OWORD *)((char *)a1 + *(int *)(v9 + 28)) = xmmword_1000D61F0;
  return result;
}

uint64_t key path setter for NearbyProtoJoinResponse.Content.denied : NearbyProtoJoinResponse.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v9 = a5(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v15 - v10;
  outlined init with copy of NearbyProtoConnectionResponse.Content.DeniedContent(a1, (uint64_t)&v15 - v10, a6);
  uint64_t v12 = a2 + *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0) + 20);
  outlined destroy of Any?(v12, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v11, v12, a6);
  uint64_t v13 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 0, 1, v13);
}

uint64_t NearbyProtoJoinResponse.Content.approved.setter(uint64_t a1)
{
  return NearbyProtoJoinResponse.Content.denied.setter(a1, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t NearbyProtoJoinResponse.Content.denied.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0) + 20);
  outlined destroy of Any?(v5, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(a1, v5, a2);
  uint64_t v6 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 0, 1, v6);
}

double NearbyProtoJoinResponse.Content.ApprovalContent.init()@<D0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = _swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
  UnknownStorage.init()();
  double result = 0.0;
  *(_OWORD *)((char *)a1 + *(int *)(v2 + 28)) = xmmword_1000D61F0;
  return result;
}

void (*NearbyProtoJoinResponse.Content.approved.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  v3[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[3] = v8;
  uint64_t v9 = *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0) + 20);
  *((_DWORD *)v3 + 12) = v9;
  outlined init with copy of (String, Any)(v1 + v9, (uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v10 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  v3[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
LABEL_6:
    *uint64_t v8 = 0;
    v8[1] = 0xE000000000000000;
    void v8[2] = _swiftEmptyArrayStorage;
    UnknownStorage.init()();
    *(_OWORD *)((char *)v8 + *(int *)(v6 + 28)) = xmmword_1000D61F0;
    return NearbyProtoJoinResponse.Content.approved.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v5, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v5, (uint64_t)v8, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
  return NearbyProtoJoinResponse.Content.approved.modify;
}

void NearbyProtoJoinResponse.Content.approved.modify(uint64_t a1, char a2)
{
}

void NearbyProtoConnectionResponse.Content.denied.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(void *)(*(void *)a1 + 32);
  uint64_t v10 = *(void *)(*(void *)a1 + 40);
  uint64_t v11 = *(int *)(*(void *)a1 + 48);
  uint64_t v12 = *(void **)(*(void *)a1 + 16);
  uint64_t v13 = *(void **)(*(void *)a1 + 24);
  uint64_t v14 = *(void **)(*(void *)a1 + 8);
  uint64_t v15 = **(void **)a1 + v11;
  if (a2)
  {
    outlined init with copy of NearbyProtoConnectionResponse.Content.DeniedContent(*(void *)(*(void *)a1 + 24), (uint64_t)v12, a4);
    outlined destroy of Any?(v15, a3);
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v12, v15, a4);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v13, a6);
  }
  else
  {
    outlined destroy of Any?(**(void **)a1 + v11, a3);
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v13, v15, a4);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  free(v13);
  free(v12);
  free(v14);
  free(v8);
}

uint64_t NearbyProtoJoinResponse.Content.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyProtoConnectionRequest.unknownFields.getter(type metadata accessor for NearbyProtoJoinResponse.Content, a1);
}

uint64_t NearbyProtoConnectionRequest.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t NearbyProtoJoinResponse.Content.unknownFields.setter(uint64_t a1)
{
  return NearbyProtoConnectionRequest.unknownFields.setter(a1, type metadata accessor for NearbyProtoJoinResponse.Content);
}

uint64_t NearbyProtoConnectionRequest.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

void (__swiftcall *NearbyProtoJoinResponse.Content.unknownFields.modify())()
{
  return Log.init();
}

uint64_t NearbyGroup_Group.Initialization.members.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyGroup_Group.Initialization.members.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent.userInfo.getter()
{
  return NearbyProtoSessionMessage.data.getter(type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent.userInfo.setter(uint64_t a1, uint64_t a2)
{
  return NearbyProtoSessionMessage.data.setter(a1, a2, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t (*NearbyProtoJoinResponse.Content.ApprovalContent.userInfo.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return NearbyProtoSessionMessage.data.modify;
}

uint64_t NearbyProtoSessionMessage.data.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16) + *(int *)(a1 + 24);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)v3;
  unint64_t v6 = *(void *)(v3 + 8);
  if (a2)
  {
    outlined copy of Data._Representation(*(void *)a1, v2);
    outlined consume of Data?(v5, v6);
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
    return outlined consume of Data._Representation(v4, v2);
  }
  else
  {
    uint64_t result = outlined consume of Data?(*(void *)v3, *(void *)(v3 + 8));
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
  }
  return result;
}

BOOL NearbyProtoJoinResponse.Content.ApprovalContent.hasUserInfo.getter()
{
  return NearbyProtoSessionMessage.hasData.getter(type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

Swift::Void __swiftcall NearbyProtoJoinResponse.Content.ApprovalContent.clearUserInfo()()
{
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyProtoConnectionRequest.unknownFields.getter(type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent, a1);
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent.unknownFields.setter(uint64_t a1)
{
  return NearbyProtoConnectionRequest.unknownFields.setter(a1, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

void (__swiftcall *NearbyProtoJoinResponse.Content.ApprovalContent.unknownFields.modify())()
{
  return Log.init();
}

uint64_t NearbyProtoSessionMessage.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t NearbyProtoSessionMessage.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t NearbyProtoJoinResponse.Content.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v1 = (char *)a1 + *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0) + 20);
  uint64_t v2 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return UnknownStorage.init()();
}

double NearbyProtoJoinResponse.init()@<D0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for NearbyProtoJoinResponse(0);
  double result = 0.0;
  *(_OWORD *)(a1 + *(int *)(v2 + 20)) = xmmword_1000D61F0;
  return result;
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NearbyProtoNearbySessionMessageType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyProtoNearbySessionMessageType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000D7970;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "unknown";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "joinRequest";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "joinResponse";
  *((void *)v12 + 1) = 12;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "connectionRequest";
  *((void *)v14 + 1) = 17;
  unsigned char v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  unint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)unint64_t v16 = "connectionResponse";
  *((void *)v16 + 1) = 18;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  unint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)unint64_t v18 = "groupMessage";
  *((void *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NearbyProtoSessionMessage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyProtoSessionMessage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000D7980;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "type";
  *((void *)v10 + 1) = 4;
  unsigned char v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "data";
  *(void *)(v11 + 8) = 4;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NearbyProtoJoinRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyProtoJoinRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000D7990;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "publicKey";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "encryptedData";
  *((void *)v10 + 1) = 13;
  unsigned char v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NearbyProtoJoinRequest.Content._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyProtoJoinRequest.Content._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000D6620;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "identifier";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 3;
  *(void *)unint64_t v10 = "displayName";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "userInfo";
  *((void *)v12 + 1) = 8;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "wantsTokenURI";
  *((void *)v14 + 1) = 13;
  unsigned char v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NearbyProtoJoinResponse.Content._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyProtoJoinResponse.Content._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000D7980;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "identifier";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 3;
  *(void *)unint64_t v10 = "denied";
  *((void *)v10 + 1) = 6;
  unsigned char v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 4;
  *(void *)uint64_t v11 = "approved";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000D7980;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "sessionIdentifier";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "memberHandles";
  *((void *)v10 + 1) = 13;
  unsigned char v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "userInfo";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NearbyGroup_Group._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyGroup_Group._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000D6620;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "initialize";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "memberAdded";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "memberRemoved";
  *((void *)v12 + 1) = 13;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "memberLeft";
  *((void *)v14 + 1) = 10;
  unsigned char v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NearbyGroup_Group.MemberAdded._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyGroup_Group.MemberAdded._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000D7990;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "groupUUID";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "member";
  *((void *)v10 + 1) = 6;
  unsigned char v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NearbyGroup_Group.MemberRemoved._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyGroup_Group.MemberRemoved._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000D7990;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "groupUUID";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "member";
  *((void *)v10 + 1) = 6;
  unsigned char v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static NearbyGroup_Group.MemberLeft._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static NearbyGroup_Group.MemberLeft._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000D7990;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "groupUUID";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "usesToken";
  *((void *)v10 + 1) = 9;
  unsigned char v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoNearbySessionMessageType._protobuf_nameMap);
}

uint64_t static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoNearbySessionMessageType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoNearbySessionMessageType._protobuf_nameMap, a1);
}

void *NearbyProtoSessionMessage.protoMessageName.unsafeMutableAddressor()
{
  return &static NearbyProtoSessionMessage.protoMessageName;
}

unint64_t static NearbyProtoSessionMessage.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t NearbyProtoSessionMessage._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoSessionMessage._protobuf_nameMap);
}

uint64_t static NearbyProtoSessionMessage._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoSessionMessage._protobuf_nameMap, a1);
}

uint64_t NearbyProtoSessionMessage.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v1 = v0;
    if (v0 || (v3 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 3:
        type metadata accessor for NearbyProtoSessionMessage(0);
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
LABEL_3:
        uint64_t v1 = 0;
        break;
      case 2:
        closure #2 in NearbyProtoSessionMessage.decodeMessage<A>(decoder:)();
        goto LABEL_3;
      case 1:
        type metadata accessor for NearbyProtoSessionMessage(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
        goto LABEL_3;
    }
    uint64_t v0 = v1;
  }
}

uint64_t closure #2 in NearbyProtoSessionMessage.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t NearbyProtoSessionMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NearbyProtoSessionMessage.traverse<A>(visitor:)(v3);
  if (!v4)
  {
    closure #2 in NearbyProtoSessionMessage.traverse<A>(visitor:)(v3);
    closure #3 in NearbyProtoSessionMessage.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NearbyProtoSessionMessage);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NearbyProtoSessionMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 20) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #2 in NearbyProtoSessionMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 24) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NearbyProtoSessionMessage.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter((void (*)(void))type metadata accessor for NearbyProtoSessionMessage, &lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage, (void (*)(uint64_t))type metadata accessor for NearbyProtoSessionMessage);
}

double protocol witness for Message.init() in conformance NearbyProtoSessionMessage@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  *(void *)uint64_t v6 = 0;
  *(_WORD *)(v6 + 8) = 256;
  double result = 0.0;
  *(_OWORD *)(a2 + a1[7]) = xmmword_1000D61F0;
  return result;
}

uint64_t protocol witness for Message.isInitialized.getter in conformance NearbyProtoSessionMessage()
{
  return Message.isInitialized.getter();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoSessionMessage()
{
  return NearbyProtoSessionMessage.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoSessionMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoSessionMessage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance NearbyProtoSessionMessage()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoSessionMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage, (void (*)(uint64_t))type metadata accessor for NearbyProtoSessionMessage);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance NearbyProtoSessionMessage()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoSessionMessage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoSessionMessage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoSessionMessage()
{
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage, (void (*)(uint64_t))type metadata accessor for NearbyProtoSessionMessage);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoSessionMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage, (void (*)(uint64_t))type metadata accessor for NearbyProtoSessionMessage);
  return Message.hash(into:)(a1, a2, v4);
}

void *NearbyProtoConnectionRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static NearbyProtoConnectionRequest.protoMessageName;
}

unint64_t static NearbyProtoConnectionRequest.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1)
{
  return one-time initialization function for _protobuf_nameMap(a1, static NearbyProtoConnectionRequest._protobuf_nameMap, (uint64_t)"displayName", 11, (uint64_t)"userInfo");
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NearbyProtoConnectionResponse._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NearbyProtoConnectionResponse.Content._protobuf_nameMap, (uint64_t)"denied", 6, (uint64_t)"approved");
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NearbyProtoConnectionResponse.Content.ApprovalContent._protobuf_nameMap, 1, (uint64_t)"invitationData", 14);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NearbyProtoConnectionResponse.Content.DeniedContent._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NearbyProtoJoinResponse._protobuf_nameMap, 2, (uint64_t)"encryptedData", 13);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NearbyProtoJoinResponse.Content.DeniedContent._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NearbyGroup_Member._protobuf_nameMap, (uint64_t)"handle", 6, (uint64_t)"tokenID");
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static NearbyGroup_Group.Initialization._protobuf_nameMap, (uint64_t)"groupUUID", 9, (uint64_t)"members");
}

uint64_t NearbyProtoConnectionRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionRequest._protobuf_nameMap);
}

uint64_t static NearbyProtoConnectionRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionRequest._protobuf_nameMap, a1);
}

uint64_t NearbyProtoConnectionRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for NearbyProtoConnectionRequest(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for NearbyProtoConnectionRequest(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t NearbyProtoConnectionRequest.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      uint64_t result = closure #1 in NearbyProtoConnectionRequest.traverse<A>(visitor:)((uint64_t)v0);
      if (!v1)
      {
        closure #2 in NearbyProtoConnectionRequest.traverse<A>(visitor:)((uint64_t)v0);
        type metadata accessor for NearbyProtoConnectionRequest(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in NearbyProtoConnectionRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NearbyProtoConnectionRequest(0);
  if (*(void *)(a1 + *(int *)(result + 28) + 8)) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #2 in NearbyProtoConnectionRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NearbyProtoConnectionRequest(0);
  uint64_t v3 = a1 + *(int *)(result + 32);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

Swift::Int NearbyProtoConnectionRequest.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter((void (*)(void))type metadata accessor for NearbyProtoConnectionRequest, &lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionRequest);
}

double protocol witness for Message.init() in conformance NearbyProtoConnectionRequest@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 32);
  uint64_t v5 = (void *)((char *)a2 + *(int *)(a1 + 28));
  void *v5 = 0;
  v5[1] = 0;
  double result = 0.0;
  *(_OWORD *)((char *)a2 + v4) = xmmword_1000D61F0;
  return result;
}

void (__swiftcall *protocol witness for Message.unknownFields.modify in conformance NearbyProtoConnectionRequest())()
{
  return Log.init();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoConnectionRequest()
{
  return NearbyProtoConnectionRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoConnectionRequest()
{
  return NearbyProtoConnectionRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoConnectionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoConnectionRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoConnectionRequest()
{
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoConnectionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *NearbyProtoConnectionResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static NearbyProtoConnectionResponse.protoMessageName;
}

unint64_t static NearbyProtoConnectionResponse.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t NearbyProtoConnectionResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionResponse._protobuf_nameMap);
}

uint64_t static NearbyProtoConnectionResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionResponse._protobuf_nameMap, a1);
}

uint64_t NearbyProtoConnectionResponse.Content.DeniedContent.decodeMessage<A>(decoder:)()
{
  return NearbyProtoConnectionResponse.decodeMessage<A>(decoder:)();
}

uint64_t static NearbyProtoConnectionResponse.Content.DeniedContent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v14 - v9, a1, v4);
  v11(v8, a2, v4);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a2 & 1;
}

Swift::Int NearbyProtoConnectionResponse.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter((void (*)(void))type metadata accessor for NearbyProtoConnectionResponse, &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoConnectionResponse()
{
  return NearbyProtoConnectionResponse.Content.DeniedContent.decodeMessage<A>(decoder:)();
}

uint64_t NearbyProtoConnectionResponse.traverse<A>(visitor:)()
{
  return NearbyProtoJoinResponse.Content.DeniedContent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoConnectionResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoConnectionResponse()
{
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void one-time initialization function for protoMessageName(uint64_t a1)
{
}

{
  one-time initialization function for protoMessageName(a1, 0xD000000000000010, (void *)0x80000001000DBBA0, &static NearbyProtoConnectionResponse.Content.ApprovalContent.protoMessageName, &qword_100104828);
}

{
  one-time initialization function for protoMessageName(a1, 0x436465696E65442ELL, (void *)0xEE00746E65746E6FLL, &static NearbyProtoConnectionResponse.Content.DeniedContent.protoMessageName, &qword_100104850);
}

{
  one-time initialization function for protoMessageName(a1, 0x526E696F4A2E7063, 0xEE00747365757165, static NearbyProtoJoinRequest.Content.protoMessageName, &static NearbyProtoJoinRequest.Content.protoMessageName[1]);
}

{
  one-time initialization function for protoMessageName(a1, 0x526E696F4A2E7063, 0xEF65736E6F707365, &static NearbyProtoJoinResponse.Content.protoMessageName, &qword_1001048D0);
}

{
  one-time initialization function for protoMessageName(a1, 0xD000000000000010, (void *)0x80000001000DBBA0, &static NearbyProtoJoinResponse.Content.ApprovalContent.protoMessageName, &qword_1001048F8);
}

{
  one-time initialization function for protoMessageName(a1, 0x436465696E65442ELL, (void *)0xEE00746E65746E6FLL, &static NearbyProtoJoinResponse.Content.DeniedContent.protoMessageName, &qword_100104920);
}

uint64_t *NearbyProtoConnectionResponse.Content.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static NearbyProtoConnectionResponse.Content.protoMessageName;
}

uint64_t static NearbyProtoConnectionResponse.Content.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter(&one-time initialization token for protoMessageName, &static NearbyProtoConnectionResponse.Content.protoMessageName);
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v6, a2);
  __swift_project_value_buffer(v6, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v7 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v8 = *(void *)(*(void *)v7 + 72);
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v7 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1000D6620;
  uint64_t v11 = (void *)(v10 + v9);
  uint64_t v12 = (char *)v11 + v7[14];
  *uint64_t v11 = 1;
  *(void *)uint64_t v12 = "identifier";
  *((void *)v12 + 1) = 10;
  unsigned char v12[16] = 2;
  uint64_t v13 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v14 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v15 = *(void (**)(void))(*(void *)(v14 - 8) + 104);
  ((void (*)(char *, uint64_t, uint64_t))v15)(v12, v13, v14);
  unint64_t v16 = (char *)v11 + v8 + v7[14];
  *(void *)((char *)v11 + v8) = 2;
  *(void *)unint64_t v16 = "handle";
  *((void *)v16 + 1) = 6;
  v16[16] = 2;
  v15();
  uint64_t v17 = v7[14];
  unint64_t v18 = (void *)((char *)v11 + 2 * v8);
  *unint64_t v18 = 3;
  id v19 = (char *)v18 + v17;
  *(void *)id v19 = a3;
  *((void *)v19 + 1) = a4;
  v19[16] = 2;
  v15();
  uint64_t v20 = (void *)((char *)v11 + 3 * v8);
  uint64_t v21 = (char *)v20 + v7[14];
  *uint64_t v20 = 4;
  *(void *)uint64_t v21 = a5;
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v15();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  unint64_t v9 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v9, a2);
  __swift_project_value_buffer(v9, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v10 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
              - 8);
  uint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1000D61D0;
  uint64_t v13 = v12 + v11 + v10[14];
  *(void *)(v12 + v11) = a3;
  *(void *)uint64_t v13 = a4;
  *(void *)(v13 + 8) = a5;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  char *v18;

  uint64_t v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, a2);
  __swift_project_value_buffer(v8, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  unint64_t v9 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v10 = *(void *)(*(void *)v9 + 72);
  uint64_t v11 = (*(unsigned __int8 *)(*(void *)v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v9 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1000D7990;
  uint64_t v13 = (void *)(v12 + v11);
  uint64_t v14 = v12 + v11 + v9[14];
  *uint64_t v13 = 1;
  *(void *)uint64_t v14 = a3;
  *(void *)(v14 + 8) = a4;
  *(unsigned char *)(v14 + 16) = 2;
  uint64_t v15 = enum case for _NameMap.NameDescription.same(_:);
  unint64_t v16 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v17 = *(void (**)(void))(*(void *)(v16 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v17)(v14, v15, v16);
  unint64_t v18 = (char *)v13 + v10 + v9[14];
  *(void *)((char *)v13 + v10) = 2;
  *(void *)unint64_t v18 = a5;
  *((void *)v18 + 1) = 7;
  v18[16] = 2;
  v17();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t NearbyProtoConnectionResponse.Content._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionResponse.Content._protobuf_nameMap);
}

uint64_t static NearbyProtoConnectionResponse.Content._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionResponse.Content._protobuf_nameMap, a1);
}

uint64_t NearbyProtoConnectionResponse.Content.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          closure #3 in NearbyProtoConnectionResponse.Content.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        case 4:
          closure #4 in NearbyProtoConnectionResponse.Content.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in NearbyProtoConnectionResponse.Content.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0) + 24);
  outlined init with copy of (String, Any)(v35, (uint64_t)v11, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    uint64_t v25 = v12;
LABEL_5:
    uint64_t v28 = v41;
    uint64_t v27 = v42;
    goto LABEL_7;
  }
  uint64_t v26 = (uint64_t)v40;
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v11, (uint64_t)v18, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v18, (uint64_t)v16, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  uint64_t v25 = v12;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v16, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    goto LABEL_5;
  }
  outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v16, v26, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v26, (uint64_t)v23, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
  uint64_t v28 = v41;
  v24(v23, 0, 1, v41);
  uint64_t v27 = v42;
LABEL_7:
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27) {
    return outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
  }
  uint64_t v30 = v38;
  outlined init with copy of (String, Any)((uint64_t)v23, v38, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v28) == 1)
  {
    outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
    return outlined destroy of Any?(v30, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v31, v37, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.DeniedContent?);
    uint64_t v33 = v35;
    outlined destroy of Any?(v35, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v32, v33, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #4 in NearbyProtoConnectionResponse.Content.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content(0) + 24);
  outlined init with copy of (String, Any)(v35, (uint64_t)v11, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v11, (uint64_t)v18, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v18, (uint64_t)v16, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
      outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v16, v26, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
      outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v26, (uint64_t)v23, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v16, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
  }
  uint64_t v30 = v38;
  outlined init with copy of (String, Any)((uint64_t)v23, v38, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
    return outlined destroy of Any?(v30, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v31, v37, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.ApprovalContent?);
    uint64_t v33 = v35;
    outlined destroy of Any?(v35, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v32, v33, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t NearbyProtoConnectionResponse.Content.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = v0[1];
  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v8 = v0[3];
    uint64_t v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0) {
      uint64_t v9 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      uint64_t v10 = type metadata accessor for NearbyProtoConnectionResponse.Content(0);
      outlined init with copy of (String, Any)((uint64_t)v0 + *(int *)(v10 + 24), (uint64_t)v4, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      uint64_t v11 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v4, 1, v11) == 1) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
      if (swift_getEnumCaseMultiPayload() == 1) {
        closure #2 in NearbyProtoConnectionResponse.Content.traverse<A>(visitor:)((uint64_t)v0);
      }
      else {
        closure #1 in NearbyProtoConnectionResponse.Content.traverse<A>(visitor:)((uint64_t)v0);
      }
      uint64_t result = outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v4, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
      if (!v1) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in NearbyProtoConnectionResponse.Content.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NearbyProtoConnectionResponse.Content(0);
  outlined init with copy of (String, Any)(a1 + *(int *)(v8 + 24), (uint64_t)v4, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v4, (uint64_t)v7, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v7, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
  }
  uint64_t result = outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v4, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in NearbyProtoConnectionResponse.Content.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NearbyProtoConnectionResponse.Content(0);
  outlined init with copy of (String, Any)(a1 + *(int *)(v8 + 24), (uint64_t)v4, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v4, (uint64_t)v7, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v7, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  }
  uint64_t result = outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v4, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int NearbyProtoConnectionResponse.Content.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter((void (*)(void))type metadata accessor for NearbyProtoConnectionResponse.Content, &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content);
}

uint64_t protocol witness for Message.init() in conformance NearbyProtoConnectionResponse.Content@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  uint64_t v2 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v3 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content(a1, a2, &one-time initialization token for protoMessageName, &static NearbyProtoConnectionResponse.Content.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NearbyProtoConnectionResponse.Content@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NearbyProtoConnectionResponse.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

void (__swiftcall *protocol witness for Message.unknownFields.modify in conformance NearbyProtoConnectionResponse.Content())()
{
  return Log.init();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoConnectionResponse.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoConnectionResponse.Content.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoConnectionResponse.Content()
{
  return NearbyProtoConnectionResponse.Content.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoConnectionResponse.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoConnectionResponse.Content@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionResponse.Content._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoConnectionResponse.Content()
{
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoConnectionResponse.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t *NearbyProtoConnectionResponse.Content.ApprovalContent.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static NearbyProtoConnectionResponse.Content.ApprovalContent.protoMessageName;
}

uint64_t static NearbyProtoConnectionResponse.Content.ApprovalContent.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter(&one-time initialization token for protoMessageName, &static NearbyProtoConnectionResponse.Content.ApprovalContent.protoMessageName);
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionResponse.Content.ApprovalContent._protobuf_nameMap);
}

uint64_t static NearbyProtoConnectionResponse.Content.ApprovalContent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionResponse.Content.ApprovalContent._protobuf_nameMap, a1);
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
  }
  return result;
}

uint64_t NearbyProtoConnectionResponse.Content.ApprovalContent.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
      return result;
  }
}

Swift::Int NearbyProtoConnectionResponse.Content.ApprovalContent.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter((void (*)(void))type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent, &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t protocol witness for Message.init() in conformance NearbyProtoConnectionResponse.Content.ApprovalContent@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1000D7960;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content(a1, a2, &one-time initialization token for protoMessageName, &static NearbyProtoConnectionResponse.Content.ApprovalContent.protoMessageName);
}

void (__swiftcall *protocol witness for Message.unknownFields.modify in conformance NearbyProtoConnectionResponse.Content.ApprovalContent())()
{
  return Log.init();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoConnectionResponse.Content.ApprovalContent()
{
  return NearbyProtoConnectionResponse.Content.ApprovalContent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoConnectionResponse.Content.ApprovalContent()
{
  return NearbyProtoConnectionResponse.Content.ApprovalContent.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoConnectionResponse.Content.ApprovalContent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionResponse.Content.ApprovalContent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoConnectionResponse.Content.ApprovalContent()
{
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  return Message.hash(into:)(a1, a2, v4);
}

void one-time initialization function for protoMessageName(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5)
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v10 = static NearbyProtoConnectionResponse.Content.protoMessageName;
  uint64_t v11 = qword_100104800;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = a2;
  v9._uint64_t object = a3;
  String.append(_:)(v9);
  *a4 = v10;
  *a5 = v11;
}

{
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v10 = static NearbyProtoJoinResponse.Content.protoMessageName;
  uint64_t v11 = qword_1001048D0;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = a2;
  v9._uint64_t object = a3;
  String.append(_:)(v9);
  *a4 = v10;
  *a5 = v11;
}

uint64_t *NearbyProtoConnectionResponse.Content.DeniedContent.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static NearbyProtoConnectionResponse.Content.DeniedContent.protoMessageName;
}

uint64_t static NearbyProtoConnectionResponse.Content.DeniedContent.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter(&one-time initialization token for protoMessageName, &static NearbyProtoConnectionResponse.Content.DeniedContent.protoMessageName);
}

uint64_t NearbyProtoConnectionResponse.Content.DeniedContent._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionResponse.Content.DeniedContent._protobuf_nameMap);
}

uint64_t static NearbyProtoConnectionResponse.Content.DeniedContent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionResponse.Content.DeniedContent._protobuf_nameMap, a1);
}

Swift::Int NearbyProtoConnectionResponse.Content.DeniedContent.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter((void (*)(void))type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent, &lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content.DeniedContent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content(a1, a2, &one-time initialization token for protoMessageName, &static NearbyProtoConnectionResponse.Content.DeniedContent.protoMessageName);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoConnectionResponse.Content.DeniedContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoConnectionResponse.Content.DeniedContent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoConnectionResponse.Content.DeniedContent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoConnectionResponse.Content.DeniedContent()
{
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoConnectionResponse.Content.DeniedContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
  return Message.hash(into:)(a1, a2, v4);
}

const char *NearbyProtoJoinRequest.protoMessageName.unsafeMutableAddressor()
{
  return "cp.JoinRequest";
}

uint64_t static NearbyProtoJoinRequest.protoMessageName.getter()
{
  return 0x526E696F4A2E7063;
}

uint64_t NearbyProtoJoinRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinRequest._protobuf_nameMap);
}

uint64_t static NearbyProtoJoinRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinRequest._protobuf_nameMap, a1);
}

uint64_t NearbyProtoJoinRequest.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2 || result == 1)
    {
      type metadata accessor for NearbyProtoJoinRequest(0);
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t NearbyProtoJoinRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NearbyProtoJoinRequest.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NearbyProtoJoinRequest);
  if (!v4)
  {
    closure #2 in NearbyProtoJoinRequest.traverse<A>(visitor:)(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in NearbyProtoJoinRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NearbyProtoJoinRequest(0);
  uint64_t v3 = a1 + *(int *)(result + 24);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

Swift::Int NearbyProtoJoinRequest.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter((void (*)(void))type metadata accessor for NearbyProtoJoinRequest, &lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest);
}

double protocol witness for Message.init() in conformance NearbyProtoJoinRequest@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  double result = 0.0;
  uint64_t v5 = *(int *)(a1 + 24);
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_1000D61F0;
  *(_OWORD *)(a2 + v5) = xmmword_1000D61F0;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoJoinRequest()
{
  return NearbyProtoJoinRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoJoinRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoJoinRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoJoinRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoJoinRequest()
{
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoJoinRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *NearbyProtoJoinRequest.Content.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return static NearbyProtoJoinRequest.Content.protoMessageName;
}

uint64_t static NearbyProtoJoinRequest.Content.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter(&one-time initialization token for protoMessageName, static NearbyProtoJoinRequest.Content.protoMessageName);
}

uint64_t NearbyProtoJoinRequest.Content._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinRequest.Content._protobuf_nameMap);
}

uint64_t static NearbyProtoJoinRequest.Content._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinRequest.Content._protobuf_nameMap, a1);
}

uint64_t NearbyProtoJoinRequest.Content.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        break;
      case 3:
        type metadata accessor for NearbyProtoJoinRequest.Content(0);
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        break;
      case 4:
        type metadata accessor for NearbyProtoJoinRequest.Content(0);
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        break;
      case 5:
        type metadata accessor for NearbyProtoJoinRequest.Content(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t NearbyProtoJoinRequest.Content.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t result = closure #1 in NearbyProtoJoinRequest.Content.traverse<A>(visitor:)((uint64_t)v3);
    if (!v4)
    {
      closure #3 in NearbyProtoSessionMessage.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for NearbyProtoJoinRequest.Content);
      closure #3 in NearbyProtoJoinRequest.Content.traverse<A>(visitor:)((uint64_t)v3);
      type metadata accessor for NearbyProtoJoinRequest.Content(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in NearbyProtoJoinRequest.Content.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NearbyProtoJoinRequest.Content(0);
  if (*(void *)(a1 + *(int *)(result + 24) + 8)) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #3 in NearbyProtoSessionMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v7 = a1 + *(int *)(result + 28);
  unint64_t v8 = *(void *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *(void *)v7;
    outlined copy of Data._Representation(*(void *)v7, *(void *)(v7 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v9, v8);
  }
  return result;
}

uint64_t closure #3 in NearbyProtoJoinRequest.Content.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for NearbyProtoJoinRequest.Content(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 32)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int NearbyProtoJoinRequest.Content.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter((void (*)(void))type metadata accessor for NearbyProtoJoinRequest.Content, &lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest.Content);
}

double protocol witness for Message.init() in conformance NearbyProtoJoinRequest.Content@<D0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = a1[7];
  uint64_t v5 = (void *)((char *)a2 + a1[6]);
  void *v5 = 0;
  v5[1] = 0;
  double result = 0.0;
  *(_OWORD *)((char *)a2 + v4) = xmmword_1000D61F0;
  *((unsigned char *)a2 + a1[8]) = 2;
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoJoinRequest.Content(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content(a1, a2, &one-time initialization token for protoMessageName, static NearbyProtoJoinRequest.Content.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NearbyProtoConnectionResponse.Content.ApprovalContent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoJoinRequest.Content()
{
  return NearbyProtoJoinRequest.Content.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoJoinRequest.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinRequest.Content.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoJoinRequest.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest.Content);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoJoinRequest.Content@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinRequest.Content._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoJoinRequest.Content()
{
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest.Content);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoJoinRequest.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest.Content);
  return Message.hash(into:)(a1, a2, v4);
}

void *NearbyProtoJoinResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static NearbyProtoJoinResponse.protoMessageName;
}

uint64_t static NearbyProtoJoinResponse.protoMessageName.getter()
{
  return 0x526E696F4A2E7063;
}

uint64_t NearbyProtoJoinResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinResponse._protobuf_nameMap);
}

uint64_t static NearbyProtoJoinResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinResponse._protobuf_nameMap, a1);
}

uint64_t NearbyProtoJoinResponse.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      type metadata accessor for NearbyProtoJoinResponse(0);
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t NearbyProtoJoinResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in NearbyProtoJoinRequest.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for NearbyProtoJoinResponse);
  if (!v4) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in NearbyProtoJoinRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v7 = a1 + *(int *)(result + 20);
  unint64_t v8 = *(void *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *(void *)v7;
    outlined copy of Data._Representation(*(void *)v7, *(void *)(v7 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v9, v8);
  }
  return result;
}

Swift::Int NearbyProtoJoinResponse.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter((void (*)(void))type metadata accessor for NearbyProtoJoinResponse, &lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse);
}

double protocol witness for Message.init() in conformance NearbyProtoJoinResponse@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  double result = 0.0;
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_1000D61F0;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoJoinResponse()
{
  return NearbyProtoJoinResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoJoinResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoJoinResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoJoinResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoJoinResponse()
{
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoJoinResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void one-time initialization function for protoMessageName(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  v7._uint64_t countAndFlagsBits = 0x746E65746E6F432ELL;
  v7._uint64_t object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  *a4 = a2;
  *a5 = a3;
}

uint64_t *NearbyProtoJoinResponse.Content.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static NearbyProtoJoinResponse.Content.protoMessageName;
}

uint64_t static NearbyProtoJoinResponse.Content.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter(&one-time initialization token for protoMessageName, &static NearbyProtoJoinResponse.Content.protoMessageName);
}

uint64_t NearbyProtoJoinResponse.Content._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinResponse.Content._protobuf_nameMap);
}

uint64_t static NearbyProtoJoinResponse.Content._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinResponse.Content._protobuf_nameMap, a1);
}

uint64_t NearbyProtoJoinResponse.Content.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 4:
        closure #3 in NearbyProtoJoinResponse.Content.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 3:
        closure #2 in NearbyProtoJoinResponse.Content.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 1:
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        break;
    }
  }
  return result;
}

uint64_t closure #2 in NearbyProtoJoinResponse.Content.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0) + 20);
  outlined init with copy of (String, Any)(v35, (uint64_t)v11, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    uint64_t v25 = v12;
LABEL_5:
    uint64_t v28 = v41;
    uint64_t v27 = v42;
    goto LABEL_7;
  }
  uint64_t v26 = (uint64_t)v40;
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v11, (uint64_t)v18, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v18, (uint64_t)v16, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  uint64_t v25 = v12;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v16, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    goto LABEL_5;
  }
  outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v16, v26, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v26, (uint64_t)v23, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
  uint64_t v28 = v41;
  v24(v23, 0, 1, v41);
  uint64_t v27 = v42;
LABEL_7:
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27) {
    return outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
  }
  uint64_t v30 = v38;
  outlined init with copy of (String, Any)((uint64_t)v23, v38, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v28) == 1)
  {
    outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
    return outlined destroy of Any?(v30, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v31, v37, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.DeniedContent?);
    uint64_t v33 = v35;
    outlined destroy of Any?(v35, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v32, v33, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #3 in NearbyProtoJoinResponse.Content.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for NearbyProtoJoinResponse.Content(0) + 20);
  outlined init with copy of (String, Any)(v35, (uint64_t)v11, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v11, (uint64_t)v18, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v18, (uint64_t)v16, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
      outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v16, v26, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
      outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v26, (uint64_t)v23, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v16, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
  }
  uint64_t v30 = v38;
  outlined init with copy of (String, Any)((uint64_t)v23, v38, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
    return outlined destroy of Any?(v30, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v31, v37, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of Any?((uint64_t)v23, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.ApprovalContent?);
    uint64_t v33 = v35;
    outlined destroy of Any?(v35, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v32, v33, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t NearbyProtoJoinResponse.Content.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = v0[1];
  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    uint64_t v8 = type metadata accessor for NearbyProtoJoinResponse.Content(0);
    outlined init with copy of (String, Any)((uint64_t)v0 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    uint64_t v9 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    if (swift_getEnumCaseMultiPayload() == 1) {
      closure #2 in NearbyProtoJoinResponse.Content.traverse<A>(visitor:)((uint64_t)v0);
    }
    else {
      closure #1 in NearbyProtoJoinResponse.Content.traverse<A>(visitor:)((uint64_t)v0);
    }
    uint64_t result = outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v4, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (!v1) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in NearbyProtoJoinResponse.Content.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NearbyProtoJoinResponse.Content(0);
  outlined init with copy of (String, Any)(a1 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v4, (uint64_t)v7, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v7, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
  }
  uint64_t result = outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v4, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in NearbyProtoJoinResponse.Content.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NearbyProtoJoinResponse.Content(0);
  outlined init with copy of (String, Any)(a1 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v4, (uint64_t)v7, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v7, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
  }
  uint64_t result = outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v4, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int NearbyProtoJoinResponse.Content.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter((void (*)(void))type metadata accessor for NearbyProtoJoinResponse.Content, &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content);
}

uint64_t protocol witness for Message.init() in conformance NearbyProtoJoinResponse.Content@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  uint64_t v2 = (char *)a2 + *(int *)(a1 + 20);
  uint64_t v3 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoJoinResponse.Content(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content(a1, a2, &one-time initialization token for protoMessageName, &static NearbyProtoJoinResponse.Content.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoJoinResponse.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinResponse.Content.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoJoinResponse.Content()
{
  return NearbyProtoJoinResponse.Content.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoJoinResponse.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoJoinResponse.Content@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinResponse.Content._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoJoinResponse.Content()
{
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoJoinResponse.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t *NearbyProtoJoinResponse.Content.ApprovalContent.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static NearbyProtoJoinResponse.Content.ApprovalContent.protoMessageName;
}

uint64_t static NearbyProtoJoinResponse.Content.ApprovalContent.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter(&one-time initialization token for protoMessageName, &static NearbyProtoJoinResponse.Content.ApprovalContent.protoMessageName);
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap);
}

uint64_t static NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap, a1);
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularBytesField(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t NearbyProtoJoinResponse.Content.ApprovalContent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    if (!*(void *)(v3[2] + 16)
      || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v4))
    {
      uint64_t result = closure #3 in NearbyProtoSessionMessage.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
      if (!v4)
      {
        type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int NearbyProtoJoinResponse.Content.ApprovalContent.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter((void (*)(void))type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent, &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

double protocol witness for Message.init() in conformance NearbyProtoJoinResponse.Content.ApprovalContent@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = _swiftEmptyArrayStorage;
  UnknownStorage.init()();
  double result = 0.0;
  *(_OWORD *)((char *)a2 + *(int *)(a1 + 28)) = xmmword_1000D61F0;
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content(a1, a2, &one-time initialization token for protoMessageName, &static NearbyProtoJoinResponse.Content.ApprovalContent.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance NearbyProtoConnectionRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance NearbyProtoConnectionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance NearbyProtoJoinResponse.Content.ApprovalContent()
{
  return NearbyProtoJoinResponse.Content.ApprovalContent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyProtoJoinResponse.Content.ApprovalContent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoJoinResponse.Content.ApprovalContent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinResponse.Content.ApprovalContent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoJoinResponse.Content.ApprovalContent()
{
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t *NearbyProtoJoinResponse.Content.DeniedContent.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static NearbyProtoJoinResponse.Content.DeniedContent.protoMessageName;
}

uint64_t static NearbyProtoJoinResponse.Content.DeniedContent.protoMessageName.getter()
{
  return static NearbyProtoConnectionResponse.Content.protoMessageName.getter(&one-time initialization token for protoMessageName, &static NearbyProtoJoinResponse.Content.DeniedContent.protoMessageName);
}

uint64_t static NearbyProtoConnectionResponse.Content.protoMessageName.getter(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return _NameMap.init()();
}

uint64_t NearbyProtoJoinResponse.Content.DeniedContent._protobuf_nameMap.unsafeMutableAddressor()
{
  return NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinResponse.Content.DeniedContent._protobuf_nameMap);
}

uint64_t NearbyProtoNearbySessionMessageType._protobuf_nameMap.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static NearbyProtoJoinResponse.Content.DeniedContent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinResponse.Content.DeniedContent._protobuf_nameMap, a1);
}

uint64_t static NearbyProtoNearbySessionMessageType._protobuf_nameMap.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t NearbyProtoConnectionResponse.decodeMessage<A>(decoder:)()
{
  do
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t NearbyProtoJoinResponse.Content.DeniedContent.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

Swift::Int NearbyProtoJoinResponse.Content.DeniedContent.hashValue.getter()
{
  return NearbyProtoSessionMessage.hashValue.getter((void (*)(void))type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent, &lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
}

Swift::Int NearbyProtoSessionMessage.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoJoinResponse.Content.DeniedContent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content(a1, a2, &one-time initialization token for protoMessageName, &static NearbyProtoJoinResponse.Content.DeniedContent.protoMessageName);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance NearbyProtoConnectionResponse.Content(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance NearbyProtoJoinResponse.Content.DeniedContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoJoinResponse.Content.DeniedContent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType(&one-time initialization token for _protobuf_nameMap, (uint64_t)static NearbyProtoJoinResponse.Content.DeniedContent._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance NearbyProtoNearbySessionMessageType@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyProtoJoinResponse.Content.DeniedContent()
{
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
  return Message.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyProtoSessionMessage()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NearbyProtoJoinResponse.Content.DeniedContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
  return Message.hash(into:)(a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyProtoSessionMessage()
{
  return Hasher._finalize()();
}

uint64_t specialized static NearbyProtoConnectionResponse.Content.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v42 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyProtoConnectionResponse.Content.OneOf_Operation?, NearbyProtoConnectionResponse.Content.OneOf_Operation?));
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v46 = (uint64_t)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v39 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v39 - v20;
  if (*a1 == *a2 && a1[1] == a2[1] || (char v22 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3] || (char v22 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v41 = v4;
      uint64_t v23 = type metadata accessor for NearbyProtoConnectionResponse.Content(0);
      outlined init with copy of (String, Any)((uint64_t)a1 + *(int *)(v23 + 24), (uint64_t)v21, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      uint64_t v40 = v23;
      outlined init with copy of (String, Any)((uint64_t)a2 + *(int *)(v23 + 24), (uint64_t)v19, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      uint64_t v24 = (uint64_t)&v13[*(int *)(v11 + 48)];
      outlined init with copy of (String, Any)((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      outlined init with copy of (String, Any)((uint64_t)v19, v24, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      if (v25((uint64_t)v13, 1, v8) == 1)
      {
        outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
        outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
        if (v25(v24, 1, v8) == 1)
        {
          outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
LABEL_14:
          uint64_t v29 = v40;
          uint64_t v30 = (char *)a1 + *(int *)(v40 + 28);
          uint64_t v31 = v45;
          uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
          uint64_t v33 = v43;
          uint64_t v34 = v41;
          v32(v43, v30, v41);
          uint64_t v35 = (char *)a2 + *(int *)(v29 + 28);
          uint64_t v36 = v44;
          v32(v44, v35, v34);
          lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
          v37(v36, v34);
          v37(v33, v34);
          return v22 & 1;
        }
      }
      else
      {
        uint64_t v26 = v46;
        outlined init with copy of (String, Any)((uint64_t)v13, v46, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
        if (v25(v24, 1, v8) != 1)
        {
          uint64_t v27 = v42;
          outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v24, v42, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
          char v28 = specialized static NearbyProtoConnectionResponse.Content.OneOf_Operation.__derived_enum_equals(_:_:)(v26, v27);
          outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation(v27, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
          outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
          outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
          outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation(v26, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
          outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
          if (v28) {
            goto LABEL_14;
          }
LABEL_15:
          char v22 = 0;
          return v22 & 1;
        }
        outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
        outlined destroy of Any?((uint64_t)v21, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
        outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation(v26, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
      }
      outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for (NearbyProtoConnectionResponse.Content.OneOf_Operation?, NearbyProtoConnectionResponse.Content.OneOf_Operation?));
      goto LABEL_15;
    }
  }
  return v22 & 1;
}

uint64_t specialized static NearbyProtoConnectionResponse.Content.OneOf_Operation.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v3 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyProtoConnectionResponse.Content.OneOf_Operation, NearbyProtoConnectionResponse.Content.OneOf_Operation));
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v18[*(int *)(v16 + 56)];
  outlined init with copy of NearbyProtoConnectionResponse.Content.DeniedContent(a1, (uint64_t)v18, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  outlined init with copy of NearbyProtoConnectionResponse.Content.DeniedContent(v25, v19, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v18, (uint64_t)v14, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v19, (uint64_t)v8, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v8, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
      outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v14, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
      outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v18, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
      return v20 & 1;
    }
    uint64_t v21 = type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent;
    uint64_t v22 = (uint64_t)v14;
    goto LABEL_9;
  }
  outlined init with copy of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v18, (uint64_t)v12, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v21 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent;
    uint64_t v22 = (uint64_t)v12;
LABEL_9:
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation(v22, v21);
    outlined destroy of Any?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for (NearbyProtoConnectionResponse.Content.OneOf_Operation, NearbyProtoConnectionResponse.Content.OneOf_Operation));
LABEL_12:
    char v20 = 0;
    return v20 & 1;
  }
  outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v19, (uint64_t)v5, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  if ((specialized static Data.== infix(_:_:)(*(void *)v12, *((void *)v12 + 1), *(void *)v5, *((void *)v5 + 1)) & 1) == 0
    || (type metadata accessor for UnknownStorage(),
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (void (*)(uint64_t))&type metadata accessor for UnknownStorage), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v5, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v12, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v18, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    goto LABEL_12;
  }
  outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v5, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v12, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
  outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v18, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  char v20 = 1;
  return v20 & 1;
}

uint64_t specialized static NearbyProtoConnectionResponse.Content.ApprovalContent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)))
  {
    uint64_t v11 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 20), v4);
    v12(v8, a2 + *(int *)(v11 + 20), v4);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static NearbyProtoConnectionRequest.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v31[-v9];
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v14 = (int *)type metadata accessor for NearbyProtoConnectionRequest(0);
      uint64_t v15 = v14[7];
      uint64_t v16 = &a1[v15];
      uint64_t v17 = *(void *)&a1[v15 + 8];
      uint64_t v18 = &a2[v15];
      uint64_t v19 = *((void *)v18 + 1);
      if (v17)
      {
        if (!v19) {
          goto LABEL_27;
        }
        if (*(void *)v16 != *(void *)v18 || v17 != v19)
        {
          char v12 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return v12 & 1;
          }
        }
      }
      else if (v19)
      {
        goto LABEL_27;
      }
      uint64_t v33 = v5;
      uint64_t v21 = v14[8];
      uint64_t v22 = *(void *)&a1[v21];
      unint64_t v23 = *(void *)&a1[v21 + 8];
      uint64_t v24 = (uint64_t *)&a2[v21];
      uint64_t v25 = *v24;
      unint64_t v26 = v24[1];
      if (v23 >> 60 == 15)
      {
        if (v26 >> 60 == 15) {
          goto LABEL_26;
        }
        goto LABEL_24;
      }
      if (v26 >> 60 == 15)
      {
LABEL_24:
        outlined copy of Data?(v22, v23);
        outlined copy of Data?(v25, v26);
        outlined consume of Data?(v22, v23);
        outlined consume of Data?(v25, v26);
        goto LABEL_27;
      }
      outlined copy of Data?(v22, v23);
      outlined copy of Data?(v25, v26);
      int v32 = specialized static Data.== infix(_:_:)(v22, v23, v25, v26);
      outlined consume of Data?(v25, v26);
      outlined consume of Data?(v22, v23);
      if (v32)
      {
LABEL_26:
        uint64_t v27 = v33;
        char v28 = *(void (**)(unsigned char *, char *, uint64_t))(v33 + 16);
        v28(v10, &a1[v14[6]], v4);
        v28(v8, &a2[v14[6]], v4);
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v29 = *(void (**)(unsigned char *, uint64_t))(v27 + 8);
        v29(v8, v4);
        v29(v10, v4);
        return v12 & 1;
      }
LABEL_27:
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static NearbyProtoSessionMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v33[-v9];
  BOOL v11 = (int *)type metadata accessor for NearbyProtoSessionMessage(0);
  uint64_t v12 = v11[5];
  BOOL v13 = (_DWORD *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 4);
  uint64_t v15 = (_DWORD *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if (v14)
  {
    if (!v16) {
      goto LABEL_18;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_18;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 9);
  char v20 = (uint64_t *)(a2 + v17);
  if (v19)
  {
    if ((*((unsigned char *)v20 + 9) & 1) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    if (*((unsigned char *)v20 + 9)) {
      goto LABEL_18;
    }
    uint64_t v21 = *v18;
    uint64_t v22 = *v20;
    if (v20[1])
    {
      switch(v22)
      {
        case 1:
          if (v21 != 1) {
            goto LABEL_18;
          }
          goto LABEL_13;
        case 2:
          if (v21 != 2) {
            goto LABEL_18;
          }
          goto LABEL_13;
        case 3:
          if (v21 != 3) {
            goto LABEL_18;
          }
          goto LABEL_13;
        case 4:
          if (v21 != 4) {
            goto LABEL_18;
          }
          goto LABEL_13;
        case 5:
          if (v21 != 5) {
            goto LABEL_18;
          }
          goto LABEL_13;
        default:
          if (!v21) {
            goto LABEL_13;
          }
          goto LABEL_18;
      }
    }
    if (v21 != v22) {
      goto LABEL_18;
    }
  }
LABEL_13:
  uint64_t v23 = v11[7];
  uint64_t v24 = *(void *)(a1 + v23);
  unint64_t v25 = *(void *)(a1 + v23 + 8);
  unint64_t v26 = (uint64_t *)(a2 + v23);
  uint64_t v27 = *v26;
  unint64_t v28 = v26[1];
  if (v25 >> 60 == 15)
  {
    if (v28 >> 60 == 15) {
      goto LABEL_24;
    }
    goto LABEL_17;
  }
  if (v28 >> 60 == 15)
  {
LABEL_17:
    outlined copy of Data?(v24, v25);
    outlined copy of Data?(v27, v28);
    outlined consume of Data?(v24, v25);
    outlined consume of Data?(v27, v28);
    goto LABEL_18;
  }
  outlined copy of Data?(v24, v25);
  outlined copy of Data?(v27, v28);
  int v34 = specialized static Data.== infix(_:_:)(v24, v25, v27, v28);
  outlined consume of Data?(v27, v28);
  outlined consume of Data?(v24, v25);
  if (v34)
  {
LABEL_24:
    uint64_t v31 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
    v31(v10, a1, v4);
    v31(v8, a2, v4);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v32 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
    v32(v8, v4);
    v32(v10, v4);
    return v29 & 1;
  }
LABEL_18:
  char v29 = 0;
  return v29 & 1;
}

uint64_t specialized static NearbyProtoJoinResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v21[-v9];
  uint64_t v11 = *(int *)(type metadata accessor for NearbyProtoJoinResponse(0) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  char v14 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 == 15) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (v16 >> 60 == 15)
  {
LABEL_5:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v15, v16);
LABEL_8:
    char v18 = 0;
    return v18 & 1;
  }
  outlined copy of Data?(v12, v13);
  outlined copy of Data?(v15, v16);
  int v22 = specialized static Data.== infix(_:_:)(v12, v13, v15, v16);
  outlined consume of Data?(v15, v16);
  outlined consume of Data?(v12, v13);
  if ((v22 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v17 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v17(v10, a1, v4);
  v17(v8, a2, v4);
  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v19 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v19(v8, v4);
  v19(v10, v4);
  return v18 & 1;
}

uint64_t specialized static NearbyProtoJoinResponse.Content.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v41 = (char *)&v38 - v7;
  uint64_t v8 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v40 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyProtoJoinResponse.Content.OneOf_Operation?, NearbyProtoJoinResponse.Content.OneOf_Operation?));
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  char v20 = (char *)&v38 - v19;
  __chkstk_darwin(v18);
  int v22 = (char *)&v38 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  if (v23 == *(void *)a2 && v24 == *((void *)a2 + 1)
    || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v39 = v4;
    uint64_t v26 = type metadata accessor for NearbyProtoJoinResponse.Content(0);
    outlined init with copy of (String, Any)((uint64_t)&v44[*(int *)(v26 + 20)], (uint64_t)v22, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    outlined init with copy of (String, Any)((uint64_t)&v45[*(int *)(v26 + 20)], (uint64_t)v20, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of (String, Any)((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    outlined init with copy of (String, Any)((uint64_t)v20, v27, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    unint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
      outlined destroy of Any?((uint64_t)v22, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
      if (v28(v27, 1, v8) == 1)
      {
        outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
LABEL_11:
        uint64_t v31 = v43;
        int v32 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
        uint64_t v33 = v41;
        uint64_t v34 = v39;
        v32(v41, &v44[*(int *)(v26 + 24)], v39);
        uint64_t v35 = v42;
        v32(v42, &v45[*(int *)(v26 + 24)], v34);
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v36 = *(void (**)(char *, uint64_t))(v31 + 8);
        v36(v35, v34);
        v36(v33, v34);
        return v25 & 1;
      }
    }
    else
    {
      outlined init with copy of (String, Any)((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
      if (v28(v27, 1, v8) != 1)
      {
        uint64_t v29 = v40;
        outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v27, v40, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
        char v30 = specialized static NearbyProtoJoinResponse.Content.OneOf_Operation.__derived_enum_equals(_:_:)((uint64_t)v17, v29);
        outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation(v29, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
        outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
        outlined destroy of Any?((uint64_t)v22, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
        outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v17, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
        outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
        if (v30) {
          goto LABEL_11;
        }
LABEL_12:
        char v25 = 0;
        return v25 & 1;
      }
      outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
      outlined destroy of Any?((uint64_t)v22, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
      outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v17, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    }
    outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for (NearbyProtoJoinResponse.Content.OneOf_Operation?, NearbyProtoJoinResponse.Content.OneOf_Operation?));
    goto LABEL_12;
  }
  return v25 & 1;
}

uint64_t specialized static NearbyProtoJoinResponse.Content.OneOf_Operation.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyProtoJoinResponse.Content.OneOf_Operation, NearbyProtoJoinResponse.Content.OneOf_Operation));
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t)&v19[*(int *)(v17 + 56)];
  outlined init with copy of NearbyProtoConnectionResponse.Content.DeniedContent(a1, (uint64_t)v19, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  outlined init with copy of NearbyProtoConnectionResponse.Content.DeniedContent(a2, v20, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v19, (uint64_t)v13, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v20, (uint64_t)v6, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
      char v21 = specialized static NearbyProtoJoinResponse.Content.ApprovalContent.== infix(_:_:)((uint64_t)v13, (uint64_t)v6);
      outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v6, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
      uint64_t v22 = (uint64_t)v13;
      uint64_t v23 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent;
LABEL_9:
      outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation(v22, v23);
      outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v19, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
      return v21 & 1;
    }
    uint64_t v24 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent;
    uint64_t v25 = (uint64_t)v13;
  }
  else
  {
    outlined init with copy of NearbyProtoConnectionResponse.Content.DeniedContent((uint64_t)v19, (uint64_t)v15, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(v20, (uint64_t)v9, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v9, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
      uint64_t v22 = (uint64_t)v15;
      uint64_t v23 = type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent;
      goto LABEL_9;
    }
    uint64_t v24 = type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent;
    uint64_t v25 = (uint64_t)v15;
  }
  outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation(v25, v24);
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for (NearbyProtoJoinResponse.Content.OneOf_Operation, NearbyProtoJoinResponse.Content.OneOf_Operation));
  char v21 = 0;
  return v21 & 1;
}

uint64_t specialized static NearbyProtoJoinResponse.Content.ApprovalContent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v24[-v9];
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (specialized static Array<A>.== infix(_:_:)(*(void **)(a1 + 16), *(void **)(a2 + 16)))
    {
      uint64_t v26 = v5;
      uint64_t v13 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
      uint64_t v14 = *(int *)(v13 + 28);
      uint64_t v15 = *(void *)(a1 + v14);
      unint64_t v16 = *(void *)(a1 + v14 + 8);
      uint64_t v17 = (uint64_t *)(a2 + v14);
      uint64_t v18 = *v17;
      unint64_t v19 = v17[1];
      if (v16 >> 60 == 15)
      {
        if (v19 >> 60 == 15) {
          goto LABEL_15;
        }
      }
      else if (v19 >> 60 != 15)
      {
        outlined copy of Data?(v15, v16);
        outlined copy of Data?(v18, v19);
        int v25 = specialized static Data.== infix(_:_:)(v15, v16, v18, v19);
        outlined consume of Data?(v18, v19);
        outlined consume of Data?(v15, v16);
        if (v25)
        {
LABEL_15:
          uint64_t v21 = v26;
          uint64_t v22 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v26 + 16);
          v22(v10, a1 + *(int *)(v13 + 24), v4);
          v22(v8, a2 + *(int *)(v13 + 24), v4);
          lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v21 + 8);
          v23(v8, v4);
          v23(v10, v4);
          return v12 & 1;
        }
        goto LABEL_12;
      }
      outlined copy of Data?(v15, v16);
      outlined copy of Data?(v18, v19);
      outlined consume of Data?(v15, v16);
      outlined consume of Data?(v18, v19);
    }
LABEL_12:
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t specialized static NearbyProtoJoinRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v33 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  int v32 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = type metadata accessor for NearbyProtoJoinRequest(0);
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = *(void *)(a1 + v10);
  unint64_t v12 = *(void *)(a1 + v10 + 8);
  uint64_t v13 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  if (v12 >> 60 != 15)
  {
    if (v15 >> 60 != 15)
    {
      outlined copy of Data?(v11, v12);
      outlined copy of Data?(v14, v15);
      char v18 = specialized static Data.== infix(_:_:)(v11, v12, v14, v15);
      outlined consume of Data?(v14, v15);
      outlined consume of Data?(v11, v12);
      if ((v18 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }
LABEL_5:
    outlined copy of Data?(v11, v12);
    outlined copy of Data?(v14, v15);
    outlined consume of Data?(v11, v12);
    uint64_t v16 = v14;
    unint64_t v17 = v15;
LABEL_12:
    outlined consume of Data?(v16, v17);
    goto LABEL_13;
  }
  if (v15 >> 60 != 15) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v19 = *(int *)(v9 + 24);
  uint64_t v20 = *(void *)(a1 + v19);
  unint64_t v21 = *(void *)(a1 + v19 + 8);
  uint64_t v22 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  if (v21 >> 60 == 15)
  {
    if (v24 >> 60 == 15) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  if (v24 >> 60 == 15)
  {
LABEL_11:
    outlined copy of Data?(v20, v21);
    outlined copy of Data?(v23, v24);
    outlined consume of Data?(v20, v21);
    uint64_t v16 = v23;
    unint64_t v17 = v24;
    goto LABEL_12;
  }
  outlined copy of Data?(v20, v21);
  outlined copy of Data?(v23, v24);
  char v27 = specialized static Data.== infix(_:_:)(v20, v21, v23, v24);
  outlined consume of Data?(v23, v24);
  outlined consume of Data?(v20, v21);
  if (v27)
  {
LABEL_16:
    uint64_t v28 = v33;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
    v29(v8, a1, v4);
    char v30 = v32;
    v29(v32, a2, v4);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v28 + 8);
    v31(v30, v4);
    v31(v8, v4);
    return v25 & 1;
  }
LABEL_13:
  char v25 = 0;
  return v25 & 1;
}

uint64_t specialized static NearbyProtoJoinRequest.Content.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v33[-v9];
  if (*(void *)a1 != *(void *)a2 || *((void *)a1 + 1) != *((void *)a2 + 1))
  {
    char v12 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v12 & 1;
    }
  }
  uint64_t v13 = (int *)type metadata accessor for NearbyProtoJoinRequest.Content(0);
  uint64_t v14 = v13[6];
  unint64_t v15 = &a1[v14];
  uint64_t v16 = *(void *)&a1[v14 + 8];
  unint64_t v17 = &a2[v14];
  uint64_t v18 = *((void *)v17 + 1);
  if (!v16)
  {
    if (v18) {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  if (!v18) {
    goto LABEL_20;
  }
  BOOL v19 = *(void *)v15 == *(void *)v17 && v16 == v18;
  if (v19 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_15:
    uint64_t v35 = v5;
    uint64_t v20 = v13[7];
    uint64_t v21 = *(void *)&a1[v20];
    unint64_t v22 = *(void *)&a1[v20 + 8];
    uint64_t v23 = (uint64_t *)&a2[v20];
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    if (v22 >> 60 == 15)
    {
      if (v25 >> 60 == 15)
      {
LABEL_23:
        uint64_t v27 = v13[8];
        int v28 = a1[v27];
        int v29 = a2[v27];
        if (v28 == 2)
        {
          if (v29 == 2)
          {
LABEL_28:
            uint64_t v30 = v35;
            uint64_t v31 = *(void (**)(unsigned char *, char *, uint64_t))(v35 + 16);
            v31(v10, &a1[v13[5]], v4);
            v31(v8, &a2[v13[5]], v4);
            lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
            char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
            int v32 = *(void (**)(unsigned char *, uint64_t))(v30 + 8);
            v32(v8, v4);
            v32(v10, v4);
            return v12 & 1;
          }
        }
        else if (v29 != 2 && ((((v29 & 1) == 0) ^ v28) & 1) != 0)
        {
          goto LABEL_28;
        }
LABEL_20:
        char v12 = 0;
        return v12 & 1;
      }
    }
    else if (v25 >> 60 != 15)
    {
      outlined copy of Data?(v21, v22);
      outlined copy of Data?(v24, v25);
      int v34 = specialized static Data.== infix(_:_:)(v21, v22, v24, v25);
      outlined consume of Data?(v24, v25);
      outlined consume of Data?(v21, v22);
      if ((v34 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_23;
    }
    outlined copy of Data?(v21, v22);
    outlined copy of Data?(v24, v25);
    outlined consume of Data?(v21, v22);
    outlined consume of Data?(v24, v25);
    goto LABEL_20;
  }
  return v12 & 1;
}

uint64_t type metadata accessor for NearbyProtoSessionMessage(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoSessionMessage);
}

uint64_t type metadata accessor for NearbyProtoConnectionRequest(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoConnectionRequest);
}

uint64_t type metadata accessor for NearbyProtoConnectionResponse.Content(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoConnectionResponse.Content);
}

uint64_t type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoConnectionResponse.Content.OneOf_Operation);
}

uint64_t type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t outlined init with take of NearbyProtoConnectionResponse.Content.DeniedContent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of NearbyProtoConnectionResponse.Content.DeniedContent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for NearbyProtoJoinRequest.Content(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinRequest.Content);
}

uint64_t type metadata accessor for NearbyProtoJoinResponse(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinResponse);
}

uint64_t type metadata accessor for NearbyProtoJoinResponse.Content(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinResponse.Content);
}

uint64_t type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinResponse.Content.OneOf_Operation);
}

uint64_t type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for NearbyProtoConnectionResponse(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyProtoConnectionResponse);
}

unint64_t lazy protocol witness table accessor for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType;
  if (!lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType;
  if (!lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType;
  if (!lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType;
  if (!lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoNearbySessionMessageType and conformance NearbyProtoNearbySessionMessageType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [NearbyProtoNearbySessionMessageType] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [NearbyProtoNearbySessionMessageType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NearbyProtoNearbySessionMessageType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NearbyProtoNearbySessionMessageType]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [NearbyProtoNearbySessionMessageType] and conformance [A]);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoSessionMessage()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage, (void (*)(uint64_t))type metadata accessor for NearbyProtoSessionMessage);
}

uint64_t base witness table accessor for Message in NearbyProtoSessionMessage()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage, (void (*)(uint64_t))type metadata accessor for NearbyProtoSessionMessage);
}

uint64_t base witness table accessor for Hashable in NearbyProtoSessionMessage()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage, (void (*)(uint64_t))type metadata accessor for NearbyProtoSessionMessage);
}

uint64_t base witness table accessor for Equatable in NearbyProtoSessionMessage()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoSessionMessage and conformance NearbyProtoSessionMessage, (void (*)(uint64_t))type metadata accessor for NearbyProtoSessionMessage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoConnectionRequest()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionRequest);
}

uint64_t base witness table accessor for Message in NearbyProtoConnectionRequest()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionRequest);
}

uint64_t base witness table accessor for Hashable in NearbyProtoConnectionRequest()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionRequest);
}

uint64_t base witness table accessor for Equatable in NearbyProtoConnectionRequest()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionRequest and conformance NearbyProtoConnectionRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoConnectionResponse()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse);
}

uint64_t base witness table accessor for Message in NearbyProtoConnectionResponse()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse);
}

uint64_t base witness table accessor for Hashable in NearbyProtoConnectionResponse()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse);
}

uint64_t base witness table accessor for Equatable in NearbyProtoConnectionResponse()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse and conformance NearbyProtoConnectionResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoConnectionResponse.Content()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content);
}

uint64_t base witness table accessor for Message in NearbyProtoConnectionResponse.Content()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content);
}

uint64_t base witness table accessor for Hashable in NearbyProtoConnectionResponse.Content()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content);
}

uint64_t base witness table accessor for Equatable in NearbyProtoConnectionResponse.Content()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoConnectionResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for Message in NearbyProtoConnectionResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for Hashable in NearbyProtoConnectionResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for Equatable in NearbyProtoConnectionResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.ApprovalContent and conformance NearbyProtoConnectionResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoConnectionResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for Message in NearbyProtoConnectionResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for Hashable in NearbyProtoConnectionResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for Equatable in NearbyProtoConnectionResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content.DeniedContent and conformance NearbyProtoConnectionResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoJoinRequest()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest);
}

uint64_t base witness table accessor for Message in NearbyProtoJoinRequest()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest);
}

uint64_t base witness table accessor for Hashable in NearbyProtoJoinRequest()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest);
}

uint64_t base witness table accessor for Equatable in NearbyProtoJoinRequest()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinRequest and conformance NearbyProtoJoinRequest, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoJoinRequest.Content()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest.Content);
}

uint64_t base witness table accessor for Message in NearbyProtoJoinRequest.Content()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest.Content);
}

uint64_t base witness table accessor for Hashable in NearbyProtoJoinRequest.Content()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest.Content);
}

uint64_t base witness table accessor for Equatable in NearbyProtoJoinRequest.Content()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinRequest.Content and conformance NearbyProtoJoinRequest.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinRequest.Content);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoJoinResponse()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse);
}

uint64_t base witness table accessor for Message in NearbyProtoJoinResponse()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse);
}

uint64_t base witness table accessor for Hashable in NearbyProtoJoinResponse()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse);
}

uint64_t base witness table accessor for Equatable in NearbyProtoJoinResponse()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse and conformance NearbyProtoJoinResponse, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoJoinResponse.Content()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content);
}

uint64_t base witness table accessor for Message in NearbyProtoJoinResponse.Content()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content);
}

uint64_t base witness table accessor for Hashable in NearbyProtoJoinResponse.Content()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content);
}

uint64_t base witness table accessor for Equatable in NearbyProtoJoinResponse.Content()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoJoinResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for Message in NearbyProtoJoinResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage((unint64_t *)&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for Hashable in NearbyProtoJoinResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for Equatable in NearbyProtoJoinResponse.Content.ApprovalContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.ApprovalContent and conformance NearbyProtoJoinResponse.Content.ApprovalContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in NearbyProtoJoinResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for Message in NearbyProtoJoinResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for Hashable in NearbyProtoJoinResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t base witness table accessor for Equatable in NearbyProtoJoinResponse.Content.DeniedContent()
{
  return lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content.DeniedContent and conformance NearbyProtoJoinResponse.Content.DeniedContent, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
}

uint64_t sub_100072108@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0);
  uint64_t v5 = (int *)(a1 + *(int *)(result + 20));
  if (*((unsigned char *)v5 + 4)) {
    int v6 = 0;
  }
  else {
    int v6 = *v5;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100072150(int *a1, uint64_t a2)
{
  int v3 = *a1;
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0);
  uint64_t v5 = a2 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v5 = v3;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t sub_10007218C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0);
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(result + 24));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)v5 + 8);
  int v8 = *((unsigned __int8 *)v5 + 9);
  if (v8) {
    uint64_t v6 = 0;
  }
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = (v8 | v7) & 1;
  return result;
}

uint64_t sub_1000721E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for NearbyProtoSessionMessage(0);
  uint64_t v6 = a2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = v3;
  *(unsigned char *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 9) = 0;
  return result;
}

uint64_t sub_100072230@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_8Tm(a1, type metadata accessor for NearbyProtoSessionMessage, a2);
}

uint64_t sub_100072248(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoSessionMessage.data : NearbyProtoSessionMessage(a1, a2, a3, a4, type metadata accessor for NearbyProtoSessionMessage);
}

uint64_t sub_10007227C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 32));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  if (v5 >> 60 == 15) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v3;
  }
  unint64_t v7 = 0xC000000000000000;
  if (v5 >> 60 != 15) {
    unint64_t v7 = v5;
  }
  *a2 = v6;
  a2[1] = v7;
  return outlined copy of Data?(v4, v5);
}

uint64_t sub_1000722E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoConnectionResponse.Content.denied : NearbyProtoConnectionResponse.Content(a1, a2, a3, a4, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent, type metadata accessor for NearbyProtoConnectionResponse.Content.DeniedContent);
}

uint64_t sub_10007232C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoConnectionResponse.Content.denied : NearbyProtoConnectionResponse.Content(a1, a2, a3, a4, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t sub_100072370@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_18Tm(a1, type metadata accessor for NearbyProtoJoinRequest, a2);
}

uint64_t sub_100072388(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoJoinRequest.publicKey : NearbyProtoJoinRequest(a1, a2, a3, a4, type metadata accessor for NearbyProtoJoinRequest);
}

uint64_t sub_1000723B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NearbyProtoJoinRequest(0) + 24));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  if (v5 >> 60 == 15) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v3;
  }
  unint64_t v7 = 0xC000000000000000;
  if (v5 >> 60 != 15) {
    unint64_t v7 = v5;
  }
  *a2 = v6;
  a2[1] = v7;
  return outlined copy of Data?(v4, v5);
}

uint64_t sub_100072420@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_8Tm(a1, type metadata accessor for NearbyProtoJoinRequest.Content, a2);
}

uint64_t keypath_get_8Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)(a1 + *(int *)(a2(0) + 28));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *a3 = v7;
  a3[1] = v8;
  return outlined copy of Data?(v5, v6);
}

uint64_t sub_10007249C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoSessionMessage.data : NearbyProtoSessionMessage(a1, a2, a3, a4, type metadata accessor for NearbyProtoJoinRequest.Content);
}

uint64_t sub_1000724C8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = type metadata accessor for NearbyProtoJoinRequest.Content(0);
  *a2 = *(unsigned char *)(a1 + *(int *)(result + 32)) & 1;
  return result;
}

uint64_t sub_100072504(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t result = type metadata accessor for NearbyProtoJoinRequest.Content(0);
  *(unsigned char *)(a2 + *(int *)(result + 32)) = v3;
  return result;
}

uint64_t sub_100072538@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_18Tm(a1, type metadata accessor for NearbyProtoJoinResponse, a2);
}

uint64_t keypath_get_18Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)(a1 + *(int *)(a2(0) + 20));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *a3 = v7;
  a3[1] = v8;
  return outlined copy of Data?(v5, v6);
}

uint64_t sub_1000725B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoJoinRequest.publicKey : NearbyProtoJoinRequest(a1, a2, a3, a4, type metadata accessor for NearbyProtoJoinResponse);
}

uint64_t sub_1000725E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoJoinResponse.Content.denied : NearbyProtoJoinResponse.Content(a1, a2, a3, a4, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent, type metadata accessor for NearbyProtoJoinResponse.Content.DeniedContent);
}

double sub_100072628@<D0>(void *a1@<X8>)
{
  return NearbyProtoJoinResponse.Content.approved.getter(a1);
}

uint64_t sub_10007264C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoJoinResponse.Content.denied : NearbyProtoJoinResponse.Content(a1, a2, a3, a4, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t sub_100072690@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_8Tm(a1, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent, a2);
}

uint64_t sub_1000726A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyProtoSessionMessage.data : NearbyProtoSessionMessage(a1, a2, a3, a4, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NearbyProtoNearbySessionMessageType(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NearbyProtoNearbySessionMessageType(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for NearbyProtoNearbySessionMessageType(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for NearbyProtoNearbySessionMessageType(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyProtoNearbySessionMessageType()
{
  return &type metadata for NearbyProtoNearbySessionMessageType;
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoSessionMessage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    char v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)char v12 = *(void *)v13;
    *((_WORD *)v12 + 4) = *((_WORD *)v13 + 4);
    uint64_t v14 = a3[7];
    unint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    unint64_t v17 = *((void *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    }
    else
    {
      uint64_t v19 = *(void *)v16;
      outlined copy of Data._Representation(*(void *)v16, *((void *)v16 + 1));
      *(void *)unint64_t v15 = v19;
      *((void *)v15 + 1) = v17;
    }
  }
  return a1;
}

uint64_t destroy for NearbyProtoSessionMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  unint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15)
  {
    uint64_t v8 = *v6;
    return outlined consume of Data._Representation(v8, v7);
  }
  return result;
}

uint64_t initializeWithCopy for NearbyProtoSessionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_WORD *)(v11 + 8) = *(_WORD *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  unint64_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = v15[1];
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = *v15;
    outlined copy of Data._Representation(*v15, v15[1]);
    *(void *)uint64_t v14 = v17;
    *(void *)(v14 + 8) = v16;
  }
  return a1;
}

uint64_t assignWithCopy for NearbyProtoSessionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  *(_WORD *)(v12 + 8) = *((_WORD *)v13 + 4);
  *(void *)uint64_t v12 = v14;
  uint64_t v15 = a3[7];
  unint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = *(void *)(a2 + v15 + 8);
  if (*(void *)(a1 + v15 + 8) >> 60 != 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v20 = *v17;
      outlined copy of Data._Representation(v20, v18);
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      *unint64_t v16 = v20;
      v16[1] = v18;
      outlined consume of Data._Representation(v21, v22);
      return a1;
    }
    outlined destroy of Data((uint64_t)v16);
    goto LABEL_6;
  }
  if (v18 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    return a1;
  }
  uint64_t v19 = *v17;
  outlined copy of Data._Representation(v19, v18);
  *unint64_t v16 = v19;
  v16[1] = v18;
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for NearbyProtoSessionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_WORD *)(v11 + 8) = *(_WORD *)(v12 + 8);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for NearbyProtoSessionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(_WORD *)(v11 + 8) = *(_WORD *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = *(void *)(a1 + v13 + 8);
  if (v16 >> 60 != 15)
  {
    unint64_t v17 = v15[1];
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *v14;
      *uint64_t v14 = *v15;
      v14[1] = v17;
      outlined consume of Data._Representation(v18, v16);
      return a1;
    }
    outlined destroy of Data((uint64_t)v14);
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoSessionMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100072D5C);
}

uint64_t sub_100072D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8) >> 60;
    BOOL v11 = ((4 * v10) & 0xC) == 0;
    unsigned int v12 = ((4 * v10) & 0xC | (v10 >> 2)) ^ 0xF;
    if (v11) {
      return 0;
    }
    else {
      return v12;
    }
  }
}

uint64_t storeEnumTagSinglePayload for NearbyProtoSessionMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100072E3C);
}

uint64_t sub_100072E3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    BOOL v11 = (void *)(a1 + *(int *)(a4 + 28));
    *BOOL v11 = 0;
    v11[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  return result;
}

uint64_t type metadata completion function for NearbyProtoSessionMessage()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoConnectionRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    BOOL v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    unint64_t v16 = (uint64_t *)((char *)v4 + v14);
    unint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *unint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = (char *)v4 + v15;
    uint64_t v20 = (_OWORD *)((char *)a2 + v15);
    unint64_t v21 = *(uint64_t *)((char *)a2 + v15 + 8);
    swift_bridgeObjectRetain();
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v19 = *v20;
    }
    else
    {
      uint64_t v23 = *(void *)v20;
      outlined copy of Data._Representation(v23, v21);
      *(void *)uint64_t v19 = v23;
      *((void *)v19 + 1) = v21;
    }
  }
  return v4;
}

uint64_t destroy for NearbyProtoConnectionRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 32));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *v7;
    return outlined consume of Data._Representation(v9, v8);
  }
  return result;
}

void *initializeWithCopy for NearbyProtoConnectionRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)((char *)a1 + v13);
  unint64_t v16 = (void *)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = (char *)a1 + v14;
  uint64_t v19 = (char *)a2 + v14;
  unint64_t v20 = *((void *)v19 + 1);
  swift_bridgeObjectRetain();
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v21 = *(void *)v19;
    outlined copy of Data._Representation(v21, v20);
    *(void *)uint64_t v18 = v21;
    *((void *)v18 + 1) = v20;
  }
  return a1;
}

void *assignWithCopy for NearbyProtoConnectionRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  unint64_t v16 = *(void *)((char *)a2 + v13 + 8);
  if (*(void *)((char *)a1 + v13 + 8) >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      uint64_t v18 = *v15;
      outlined copy of Data._Representation(v18, v16);
      uint64_t v19 = *v14;
      unint64_t v20 = v14[1];
      *uint64_t v14 = v18;
      v14[1] = v16;
      outlined consume of Data._Representation(v19, v20);
      return a1;
    }
    outlined destroy of Data((uint64_t)v14);
    goto LABEL_6;
  }
  if (v16 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    return a1;
  }
  uint64_t v17 = *v15;
  outlined copy of Data._Representation(v17, v16);
  *uint64_t v14 = v17;
  v14[1] = v16;
  return a1;
}

_OWORD *initializeWithTake for NearbyProtoConnectionRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

void *assignWithTake for NearbyProtoConnectionRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  unint64_t v20 = *(void *)((char *)a1 + v17 + 8);
  if (v20 >> 60 != 15)
  {
    unint64_t v21 = v19[1];
    if (v21 >> 60 != 15)
    {
      uint64_t v22 = *v18;
      *uint64_t v18 = *v19;
      v18[1] = v21;
      outlined consume of Data._Representation(v22, v20);
      return a1;
    }
    outlined destroy of Data((uint64_t)v18);
  }
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoConnectionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_41Tm);
}

uint64_t storeEnumTagSinglePayload for NearbyProtoConnectionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_42Tm);
}

uint64_t type metadata completion function for NearbyProtoConnectionRequest()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_44Tm);
}

uint64_t storeEnumTagSinglePayload for NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_45Tm);
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoConnectionResponse.Content(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    __dst = (uint64_t *)((char *)a1 + v9);
    uint64_t v10 = (uint64_t *)((char *)a2 + v9);
    uint64_t v11 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v16 = *v10;
        unint64_t v17 = v10[1];
        outlined copy of Data._Representation(*v10, v17);
        void *__dst = v16;
        __dst[1] = v17;
        uint64_t v18 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
        uint64_t v19 = (char *)__dst + v18;
        unint64_t v20 = (char *)v10 + v18;
        uint64_t v21 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
      }
      else
      {
        uint64_t v22 = type metadata accessor for UnknownStorage();
        (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v22 - 8) + 16))(__dst, v10, v22);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v23 = *(int *)(a3 + 28);
    uint64_t v24 = (char *)v4 + v23;
    unint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
  }
  return v4;
}

uint64_t destroy for NearbyProtoConnectionResponse.Content(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined consume of Data._Representation(*(void *)v4, *(void *)(v4 + 8));
      v4 += *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
    }
    uint64_t v6 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  return v9(v7, v8);
}

void *initializeWithCopy for NearbyProtoConnectionResponse.Content(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = *v9;
      unint64_t v15 = v9[1];
      outlined copy of Data._Representation(*v9, v15);
      *uint64_t v8 = v14;
      v8[1] = v15;
      uint64_t v16 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
      unint64_t v17 = (char *)v8 + v16;
      uint64_t v18 = (char *)v9 + v16;
      uint64_t v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      uint64_t v20 = type metadata accessor for UnknownStorage();
      (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v20 - 8) + 16))(v8, v9, v20);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v21 = *(int *)(a3 + 28);
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
  return a1;
}

void *assignWithCopy for NearbyProtoConnectionResponse.Content(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v14 = *v8;
        unint64_t v15 = v8[1];
        outlined copy of Data._Representation(*v8, v15);
        uint64_t *v7 = v14;
        v7[1] = v15;
        uint64_t v16 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
        unint64_t v17 = (char *)v7 + v16;
        uint64_t v18 = (char *)v8 + v16;
        uint64_t v19 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
      }
      else
      {
        uint64_t v27 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v27 - 8) + 16))(v7, v8, v27);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    memcpy(v7, v8, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_14;
  }
  if (v13)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v7, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v7, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = *v8;
      unint64_t v22 = v8[1];
      outlined copy of Data._Representation(*v8, v22);
      uint64_t *v7 = v21;
      v7[1] = v22;
      uint64_t v23 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
      uint64_t v24 = (char *)v7 + v23;
      unint64_t v25 = (char *)v8 + v23;
      uint64_t v26 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
    }
    else
    {
      uint64_t v33 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v33 - 8) + 16))(v7, v8, v33);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v28 = *(int *)(a3 + 28);
  int v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 24))(v29, v30, v31);
  return a1;
}

_OWORD *initializeWithTake for NearbyProtoConnectionResponse.Content(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (_OWORD *)((char *)a1 + v7);
  uint64_t v9 = (_OWORD *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v8 = *v9;
      uint64_t v13 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
      uint64_t v14 = (char *)v8 + v13;
      unint64_t v15 = (char *)v9 + v13;
      uint64_t v16 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    }
    else
    {
      uint64_t v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v17 - 8) + 32))(v8, v9, v17);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v18 = *(int *)(a3 + 28);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

void *assignWithTake for NearbyProtoConnectionResponse.Content(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (_OWORD *)((char *)a1 + v8);
  uint64_t v10 = (_OWORD *)((char *)a2 + v8);
  uint64_t v11 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *uint64_t v9 = *v10;
        uint64_t v16 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
        uint64_t v17 = (char *)v9 + v16;
        uint64_t v18 = (char *)v10 + v16;
        uint64_t v19 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
      }
      else
      {
        uint64_t v25 = type metadata accessor for UnknownStorage();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v25 - 8) + 32))(v9, v10, v25);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    memcpy(v9, v10, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_14;
  }
  if (v15)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v9, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v9, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v9 = *v10;
      uint64_t v21 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
      unint64_t v22 = (char *)v9 + v21;
      uint64_t v23 = (char *)v10 + v21;
      uint64_t v24 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
    }
    else
    {
      uint64_t v31 = type metadata accessor for UnknownStorage();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v31 - 8) + 32))(v9, v10, v31);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v26 = *(int *)(a3 + 28);
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoConnectionResponse.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007464C);
}

uint64_t sub_10007464C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for NearbyProtoConnectionResponse.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100074790);
}

uint64_t sub_100074790(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for NearbyProtoConnectionResponse.Content()
{
  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation?(319, &lazy cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoConnectionResponse.Content.OneOf_Operation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = *a2;
      unint64_t v7 = a2[1];
      outlined copy of Data._Representation(*a2, v7);
      *a1 = v6;
      a1[1] = v7;
      uint64_t v8 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for NearbyProtoConnectionResponse.Content.OneOf_Operation(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
    a1 += *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
  }
  uint64_t v2 = type metadata accessor for UnknownStorage();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t *initializeWithCopy for NearbyProtoConnectionResponse.Content.OneOf_Operation(uint64_t *a1, uint64_t *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = *a2;
    unint64_t v5 = a2[1];
    outlined copy of Data._Representation(*a2, v5);
    *a1 = v4;
    a1[1] = v5;
    uint64_t v6 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
    unint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for NearbyProtoConnectionResponse.Content.OneOf_Operation(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)a1, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = *a2;
      unint64_t v5 = a2[1];
      outlined copy of Data._Representation(*a2, v5);
      *a1 = v4;
      a1[1] = v5;
      uint64_t v6 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
      unint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      uint64_t v10 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for NearbyProtoConnectionResponse.Content.OneOf_Operation(_OWORD *a1, _OWORD *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v4 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
    unint64_t v5 = (char *)a1 + v4;
    uint64_t v6 = (char *)a2 + v4;
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for NearbyProtoConnectionResponse.Content.OneOf_Operation(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)a1, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v4 = *(int *)(type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0) + 20);
      unint64_t v5 = (char *)a1 + v4;
      uint64_t v6 = (char *)a2 + v4;
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    }
    else
    {
      uint64_t v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for NearbyProtoConnectionResponse.Content.OneOf_Operation()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for NearbyProtoConnectionResponse.Content.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for NearbyProtoConnectionResponse.Content.OneOf_Operation(a1, a2, a3, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *initializeWithCopy for NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for NearbyProtoConnectionResponse.Content.ApprovalContent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000753D8);
}

uint64_t sub_1000753D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NearbyProtoConnectionResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000754A8);
}

void *sub_1000754A8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NearbyProtoConnectionResponse.Content.ApprovalContent()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NearbyProtoConnectionResponse.Content.DeniedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_44Tm_0);
}

uint64_t storeEnumTagSinglePayload for NearbyProtoConnectionResponse.Content.DeniedContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_45Tm_0);
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoJoinRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    unint64_t v17 = *((void *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    }
    else
    {
      uint64_t v18 = *(void *)v16;
      outlined copy of Data._Representation(*(void *)v16, *((void *)v16 + 1));
      *(void *)uint64_t v15 = v18;
      *((void *)v15 + 1) = v17;
    }
  }
  return a1;
}

uint64_t destroy for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    uint64_t result = outlined consume of Data._Representation(*v6, v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15)
  {
    uint64_t v10 = *v8;
    return outlined consume of Data._Representation(v10, v9);
  }
  return result;
}

uint64_t initializeWithCopy for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *v14;
    outlined copy of Data._Representation(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + 8) = v15;
  }
  return a1;
}

uint64_t assignWithCopy for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      outlined copy of Data._Representation(v11, v10);
      *uint64_t v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v12 = *v9;
  outlined copy of Data._Representation(v12, v10);
  uint64_t v13 = *v8;
  unint64_t v14 = v8[1];
  *uint64_t v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (uint64_t *)(a1 + v15);
  unint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = *(void *)(a2 + v15 + 8);
  if (*(void *)(a1 + v15 + 8) >> 60 != 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v20 = *v17;
      outlined copy of Data._Representation(v20, v18);
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      *uint64_t v16 = v20;
      v16[1] = v18;
      outlined consume of Data._Representation(v21, v22);
      return a1;
    }
    outlined destroy of Data((uint64_t)v16);
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    return a1;
  }
  uint64_t v19 = *v17;
  outlined copy of Data._Representation(v19, v18);
  *uint64_t v16 = v19;
  v16[1] = v18;
  return a1;
}

uint64_t initializeWithTake for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  uint64_t v13 = *(int *)(a3 + 24);
  unint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = *(void *)(a1 + v13 + 8);
  if (v16 >> 60 != 15)
  {
    unint64_t v17 = v15[1];
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *v14;
      *unint64_t v14 = *v15;
      v14[1] = v17;
      outlined consume of Data._Representation(v18, v16);
      return a1;
    }
    outlined destroy of Data((uint64_t)v14);
  }
  *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_index_57Tm);
}

uint64_t storeEnumTagSinglePayload for NearbyProtoJoinRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_58Tm);
}

uint64_t type metadata completion function for NearbyProtoJoinRequest()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for NearbyProtoJoinRequest.Content(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (void *)((char *)v4 + v13);
    unint64_t v16 = (void *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (char *)v4 + v14;
    uint64_t v19 = (_OWORD *)((char *)a2 + v14);
    unint64_t v20 = *(void *)((char *)a2 + v14 + 8);
    swift_bridgeObjectRetain();
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v18 = *v19;
    }
    else
    {
      uint64_t v22 = *(void *)v19;
      outlined copy of Data._Representation(v22, v20);
      *(void *)uint64_t v18 = v22;
      *((void *)v18 + 1) = v20;
    }
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  }
  return v4;
}

uint64_t destroy for NearbyProtoJoinRequest.Content(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *v7;
    return outlined consume of Data._Representation(v9, v8);
  }
  return result;
}

void *initializeWithCopy for NearbyProtoJoinRequest.Content(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (char *)a1 + v13;
  uint64_t v18 = (_OWORD *)((char *)a2 + v13);
  unint64_t v19 = *(void *)((char *)a2 + v13 + 8);
  swift_bridgeObjectRetain();
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v17 = *v18;
  }
  else
  {
    uint64_t v20 = *(void *)v18;
    outlined copy of Data._Representation(v20, v19);
    *(void *)uint64_t v17 = v20;
    *((void *)v17 + 1) = v19;
  }
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

void *assignWithCopy for NearbyProtoJoinRequest.Content(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  unint64_t v16 = *(void *)((char *)a2 + v13 + 8);
  if (*(void *)((char *)a1 + v13 + 8) >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      uint64_t v18 = *v15;
      outlined copy of Data._Representation(v18, v16);
      uint64_t v19 = *v14;
      unint64_t v20 = v14[1];
      *uint64_t v14 = v18;
      v14[1] = v16;
      outlined consume of Data._Representation(v19, v20);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)v14);
    goto LABEL_6;
  }
  if (v16 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    goto LABEL_8;
  }
  uint64_t v17 = *v15;
  outlined copy of Data._Representation(v17, v16);
  *uint64_t v14 = v17;
  v14[1] = v16;
LABEL_8:
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

_OWORD *initializeWithTake for NearbyProtoJoinRequest.Content(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

void *assignWithTake for NearbyProtoJoinRequest.Content(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  unint64_t v19 = *(void *)((char *)a1 + v16 + 8);
  if (v19 >> 60 != 15)
  {
    unint64_t v20 = v18[1];
    if (v20 >> 60 != 15)
    {
      uint64_t v21 = *v17;
      *uint64_t v17 = *v18;
      v17[1] = v20;
      outlined consume of Data._Representation(v21, v19);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)v17);
  }
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
LABEL_6:
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoJoinRequest.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100076320);
}

uint64_t sub_100076320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NearbyProtoJoinRequest.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000763E4);
}

uint64_t sub_1000763E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NearbyProtoJoinRequest.Content()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoJoinResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
  }
  return a1;
}

uint64_t destroy for NearbyProtoJoinResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15)
  {
    uint64_t v8 = *v6;
    return outlined consume of Data._Representation(v8, v7);
  }
  return result;
}

uint64_t initializeWithCopy for NearbyProtoJoinResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  return a1;
}

uint64_t assignWithCopy for NearbyProtoJoinResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      outlined copy of Data._Representation(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      *uint64_t v8 = v12;
      v8[1] = v10;
      outlined consume of Data._Representation(v13, v14);
      return a1;
    }
    outlined destroy of Data((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    return a1;
  }
  uint64_t v11 = *v9;
  outlined copy of Data._Representation(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t initializeWithTake for NearbyProtoJoinResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for NearbyProtoJoinResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      outlined consume of Data._Representation(v12, v10);
      return a1;
    }
    outlined destroy of Data((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoJoinResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000769BC);
}

uint64_t __swift_get_extra_inhabitant_index_57Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    BOOL v11 = ((4 * v10) & 0xC) == 0;
    unsigned int v12 = ((4 * v10) & 0xC | (v10 >> 2)) ^ 0xF;
    if (v11) {
      return 0;
    }
    else {
      return v12;
    }
  }
}

uint64_t storeEnumTagSinglePayload for NearbyProtoJoinResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100076AA0);
}

uint64_t __swift_store_extra_inhabitant_index_58Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    BOOL v11 = (void *)(a1 + *(int *)(a4 + 20));
    *BOOL v11 = 0;
    v11[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  return result;
}

uint64_t type metadata completion function for NearbyProtoJoinResponse()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoJoinResponse.Content(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v16 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v16;
        long long v9[2] = v10[2];
        uint64_t v17 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
        uint64_t v18 = *(int *)(v17 + 24);
        uint64_t v33 = (char *)v9 + v18;
        uint64_t v34 = v17;
        int v32 = (char *)v10 + v18;
        uint64_t v19 = type metadata accessor for UnknownStorage();
        uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v31(v33, v32, v19);
        uint64_t v20 = *(int *)(v34 + 28);
        uint64_t v21 = (char *)v9 + v20;
        uint64_t v22 = (char *)v10 + v20;
        unint64_t v23 = *((void *)v22 + 1);
        if (v23 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
        }
        else
        {
          uint64_t v25 = *(void *)v22;
          outlined copy of Data._Representation(*(void *)v22, *((void *)v22 + 1));
          *(void *)uint64_t v21 = v25;
          *((void *)v21 + 1) = v23;
        }
      }
      else
      {
        uint64_t v24 = type metadata accessor for UnknownStorage();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(v9, v10, v24);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v26 = *(int *)(a3 + 24);
    uint64_t v27 = (char *)v4 + v26;
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  }
  return v4;
}

uint64_t destroy for NearbyProtoJoinResponse.Content(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
      uint64_t v7 = v4 + *(int *)(v6 + 24);
      uint64_t v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
      uint64_t v9 = (uint64_t *)(v4 + *(int *)(v6 + 28));
      unint64_t v10 = v9[1];
      if (v10 >> 60 != 15) {
        outlined consume of Data._Representation(*v9, v10);
      }
    }
    else
    {
      uint64_t v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v4, v11);
    }
  }
  uint64_t v12 = a1 + *(int *)(a2 + 24);
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  return v14(v12, v13);
}

void *initializeWithCopy for NearbyProtoJoinResponse.Content(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = v9[1];
      *uint64_t v8 = *v9;
      v8[1] = v14;
      void v8[2] = v9[2];
      uint64_t v15 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
      uint64_t v16 = *(int *)(v15 + 24);
      uint64_t v31 = (char *)v8 + v16;
      uint64_t v32 = v15;
      uint64_t v30 = (char *)v9 + v16;
      uint64_t v17 = type metadata accessor for UnknownStorage();
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29(v31, v30, v17);
      uint64_t v18 = *(int *)(v32 + 28);
      uint64_t v19 = (char *)v8 + v18;
      uint64_t v20 = (char *)v9 + v18;
      unint64_t v21 = *((void *)v20 + 1);
      if (v21 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      }
      else
      {
        uint64_t v23 = *(void *)v20;
        outlined copy of Data._Representation(*(void *)v20, *((void *)v20 + 1));
        *(void *)uint64_t v19 = v23;
        *((void *)v19 + 1) = v21;
      }
    }
    else
    {
      uint64_t v22 = type metadata accessor for UnknownStorage();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v8, v9, v22);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v24 = *(int *)(a3 + 24);
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
  return a1;
}

void *assignWithCopy for NearbyProtoJoinResponse.Content(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        void *v7 = *v8;
        v7[1] = v8[1];
        _OWORD v7[2] = v8[2];
        uint64_t v14 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
        uint64_t v15 = *(int *)(v14 + 24);
        uint64_t v41 = (char *)v7 + v15;
        uint64_t v43 = v14;
        uint64_t v39 = (char *)v8 + v15;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38(v41, v39, v16);
        uint64_t v17 = *(int *)(v43 + 28);
        uint64_t v18 = (char *)v7 + v17;
        uint64_t v19 = (char *)v8 + v17;
        unint64_t v20 = *((void *)v19 + 1);
        if (v20 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
        }
        else
        {
          uint64_t v30 = *(void *)v19;
          outlined copy of Data._Representation(*(void *)v19, *((void *)v19 + 1));
          *(void *)uint64_t v18 = v30;
          *((void *)v18 + 1) = v20;
        }
      }
      else
      {
        uint64_t v29 = type metadata accessor for UnknownStorage();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v29 - 8) + 16))(v7, v8, v29);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_16;
    }
LABEL_8:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    memcpy(v7, v8, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_16;
  }
  if (v13)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v7, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v7, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      void *v7 = *v8;
      v7[1] = v8[1];
      _OWORD v7[2] = v8[2];
      uint64_t v22 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
      uint64_t v23 = *(int *)(v22 + 24);
      uint64_t v42 = (char *)v8 + v23;
      uint64_t v44 = (char *)v7 + v23;
      uint64_t v24 = type metadata accessor for UnknownStorage();
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40(v44, v42, v24);
      uint64_t v25 = *(int *)(v22 + 28);
      uint64_t v26 = (char *)v7 + v25;
      uint64_t v27 = (char *)v8 + v25;
      unint64_t v28 = *((void *)v27 + 1);
      if (v28 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
      }
      else
      {
        uint64_t v37 = *(void *)v27;
        outlined copy of Data._Representation(*(void *)v27, *((void *)v27 + 1));
        *(void *)uint64_t v26 = v37;
        *((void *)v26 + 1) = v28;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v36 = type metadata accessor for UnknownStorage();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v36 - 8) + 16))(v7, v8, v36);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_16:
  uint64_t v31 = *(int *)(a3 + 24);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 24))(v32, v33, v34);
  return a1;
}

_OWORD *initializeWithTake for NearbyProtoJoinResponse.Content(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      _OWORD v7[2] = v8[2];
      uint64_t v12 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
      uint64_t v13 = *(int *)(v12 + 24);
      uint64_t v14 = (char *)v7 + v13;
      uint64_t v15 = (char *)v8 + v13;
      uint64_t v16 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      *(_OWORD *)((char *)v7 + *(int *)(v12 + 28)) = *(_OWORD *)((char *)v8 + *(int *)(v12 + 28));
    }
    else
    {
      uint64_t v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 32))(v7, v8, v17);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = (char *)a1 + v18;
  unint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

void *assignWithTake for NearbyProtoJoinResponse.Content(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        void v8[2] = v9[2];
        uint64_t v15 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
        uint64_t v16 = *(int *)(v15 + 24);
        uint64_t v17 = (char *)v8 + v16;
        uint64_t v18 = (char *)v9 + v16;
        uint64_t v19 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
        *(_OWORD *)((char *)v8 + *(int *)(v15 + 28)) = *(_OWORD *)((char *)v9 + *(int *)(v15 + 28));
      }
      else
      {
        uint64_t v26 = type metadata accessor for UnknownStorage();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v26 - 8) + 32))(v8, v9, v26);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    memcpy(v8, v9, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_14;
  }
  if (v14)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v8, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)v8, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      void v8[2] = v9[2];
      uint64_t v21 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
      uint64_t v22 = *(int *)(v21 + 24);
      uint64_t v23 = (char *)v8 + v22;
      uint64_t v24 = (char *)v9 + v22;
      uint64_t v25 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
      *(_OWORD *)((char *)v8 + *(int *)(v21 + 28)) = *(_OWORD *)((char *)v9 + *(int *)(v21 + 28));
    }
    else
    {
      uint64_t v32 = type metadata accessor for UnknownStorage();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 32))(v8, v9, v32);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v27 = *(int *)(a3 + 24);
  unint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  uint64_t v30 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 40))(v28, v29, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoJoinResponse.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100077D00);
}

uint64_t sub_100077D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for NearbyProtoJoinResponse.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100077E44);
}

uint64_t sub_100077E44(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 24);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for NearbyProtoJoinResponse.Content()
{
  type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation?(319, &lazy cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoJoinResponse.Content.OneOf_Operation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      a1[2] = a2[2];
      uint64_t v7 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
      uint64_t v8 = *(int *)(v7 + 24);
      uint64_t v20 = (char *)a1 + v8;
      uint64_t v9 = (char *)a2 + v8;
      uint64_t v10 = type metadata accessor for UnknownStorage();
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11(v20, v9, v10);
      uint64_t v12 = *(int *)(v7 + 28);
      uint64_t v13 = (char *)a1 + v12;
      int v14 = (char *)a2 + v12;
      unint64_t v15 = *((void *)v14 + 1);
      if (v15 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      }
      else
      {
        uint64_t v18 = *(void *)v14;
        outlined copy of Data._Representation(*(void *)v14, *((void *)v14 + 1));
        *(void *)uint64_t v13 = v18;
        *((void *)v13 + 1) = v15;
      }
    }
    else
    {
      uint64_t v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for NearbyProtoJoinResponse.Content.OneOf_Operation(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
    uint64_t v3 = a1 + *(int *)(v2 + 24);
    uint64_t v4 = type metadata accessor for UnknownStorage();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
    uint64_t v6 = (uint64_t *)(a1 + *(int *)(v2 + 28));
    unint64_t v7 = v6[1];
    if (v7 >> 60 != 15)
    {
      uint64_t v10 = *v6;
      return outlined consume of Data._Representation(v10, v7);
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    return v9(a1, v8);
  }
  return result;
}

void *initializeWithCopy for NearbyProtoJoinResponse.Content.OneOf_Operation(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    a1[2] = a2[2];
    uint64_t v5 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
    uint64_t v6 = *(int *)(v5 + 24);
    uint64_t v17 = (char *)a1 + v6;
    unint64_t v7 = (char *)a2 + v6;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9(v17, v7, v8);
    uint64_t v10 = *(int *)(v5 + 28);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    unint64_t v13 = *((void *)v12 + 1);
    if (v13 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    }
    else
    {
      uint64_t v15 = *(void *)v12;
      outlined copy of Data._Representation(*(void *)v12, *((void *)v12 + 1));
      *(void *)uint64_t v11 = v15;
      *((void *)v11 + 1) = v13;
    }
  }
  else
  {
    uint64_t v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for NearbyProtoJoinResponse.Content.OneOf_Operation(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation((uint64_t)a1, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      uint64_t v4 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
      uint64_t v5 = *(int *)(v4 + 24);
      uint64_t v16 = (char *)a1 + v5;
      uint64_t v6 = (char *)a2 + v5;
      uint64_t v7 = type metadata accessor for UnknownStorage();
      uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(v16, v6, v7);
      uint64_t v9 = *(int *)(v4 + 28);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      unint64_t v12 = *((void *)v11 + 1);
      if (v12 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      }
      else
      {
        uint64_t v14 = *(void *)v11;
        outlined copy of Data._Representation(*(void *)v11, *((void *)v11 + 1));
        *(void *)uint64_t v10 = v14;
        *((void *)v10 + 1) = v12;
      }
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for NearbyProtoJoinResponse.Content.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v4 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
    uint64_t v5 = *(int *)(v4 + 24);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    *(_OWORD *)(a1 + *(int *)(v4 + 28)) = *(_OWORD *)(a2 + *(int *)(v4 + 28));
  }
  else
  {
    uint64_t v9 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for NearbyProtoJoinResponse.Content.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of NearbyProtoConnectionResponse.Content.OneOf_Operation(a1, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v4 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
      uint64_t v5 = *(int *)(v4 + 24);
      uint64_t v6 = a1 + v5;
      uint64_t v7 = a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
      *(_OWORD *)(a1 + *(int *)(v4 + 28)) = *(_OWORD *)(a2 + *(int *)(v4 + 28));
    }
    else
    {
      uint64_t v9 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoConnectionResponse.Content.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for NearbyProtoConnectionResponse.Content.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t type metadata completion function for NearbyProtoJoinResponse.Content.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for NearbyProtoConnectionResponse.Content.OneOf_Operation(a1, a2, a3, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
}

uint64_t type metadata completion function for NearbyProtoConnectionResponse.Content.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v6 <= 0x3F)
  {
    uint64_t result = a4(319);
    if (v7 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    unint64_t v16 = *((void *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v18 = *(void *)v15;
      outlined copy of Data._Representation(*(void *)v15, *((void *)v15 + 1));
      *(void *)uint64_t v14 = v18;
      *((void *)v14 + 1) = v16;
    }
  }
  return v4;
}

uint64_t destroy for NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *v7;
    return outlined consume of Data._Representation(v9, v8);
  }
  return result;
}

void *initializeWithCopy for NearbyProtoJoinResponse.Content.ApprovalContent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 24);
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  unint64_t v15 = *((void *)v14 + 1);
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *(void *)v14;
    outlined copy of Data._Representation(*(void *)v14, *((void *)v14 + 1));
    *(void *)uint64_t v13 = v16;
    *((void *)v13 + 1) = v15;
  }
  return a1;
}

void *assignWithCopy for NearbyProtoJoinResponse.Content.ApprovalContent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  unint64_t v13 = *(void *)((char *)a2 + v10 + 8);
  if (*(void *)((char *)a1 + v10 + 8) >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v15 = *v12;
      outlined copy of Data._Representation(v15, v13);
      uint64_t v16 = *v11;
      unint64_t v17 = v11[1];
      *uint64_t v11 = v15;
      v11[1] = v13;
      outlined consume of Data._Representation(v16, v17);
      return a1;
    }
    outlined destroy of Data((uint64_t)v11);
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    return a1;
  }
  uint64_t v14 = *v12;
  outlined copy of Data._Representation(v14, v13);
  *uint64_t v11 = v14;
  v11[1] = v13;
  return a1;
}

uint64_t initializeWithTake for NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

void *assignWithTake for NearbyProtoJoinResponse.Content.ApprovalContent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)((char *)a1 + v11);
  unint64_t v13 = (void *)((char *)a2 + v11);
  unint64_t v14 = *(void *)((char *)a1 + v11 + 8);
  if (v14 >> 60 != 15)
  {
    unint64_t v15 = v13[1];
    if (v15 >> 60 != 15)
    {
      uint64_t v16 = *v12;
      *uint64_t v12 = *v13;
      v12[1] = v15;
      outlined consume of Data._Representation(v16, v14);
      return a1;
    }
    outlined destroy of Data((uint64_t)v12);
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007902C);
}

uint64_t __swift_get_extra_inhabitant_index_41Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000790F4);
}

uint64_t __swift_store_extra_inhabitant_index_42Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for NearbyProtoJoinResponse.Content.ApprovalContent()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for NearbyProtoConnectionResponse(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for NearbyProtoConnectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyProtoJoinResponse.Content.DeniedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000794C0);
}

uint64_t __swift_get_extra_inhabitant_index_44Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for NearbyProtoJoinResponse.Content.DeniedContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100079544);
}

uint64_t __swift_store_extra_inhabitant_index_45Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for NearbyProtoConnectionResponse()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

Swift::Void __swiftcall NearbyInvitationServiceHost.resume()()
{
  [*(id *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_listener) resume];
}

id NearbyInvitationServiceHost.queue.getter()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_queue));
}

void *NearbyInvitationServiceHost.connection.getter()
{
  unint64_t v1 = (void **)(v0
               + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void NearbyInvitationServiceHost.connection.setter(void *a1)
{
  id v3 = (void **)(v1
               + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*NearbyInvitationServiceHost.connection.modify())()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t NearbyInvitationServiceHost.dataSource.getter()
{
  return swift_retain();
}

char *NearbyInvitationServiceHost.__allocating_init(listener:queue:featureFlags:)(void *a1, void *a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return NearbyInvitationServiceHost.init(listener:queue:featureFlags:)(a1, a2, a3);
}

char *NearbyInvitationServiceHost.init(listener:queue:featureFlags:)(void *a1, void *a2, void *a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v3[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection] = 0;
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_dataSource;
  type metadata accessor for NearbyInvitationsProviderDataSource();
  swift_allocObject();
  uint64_t v9 = v3;
  NearbyInvitationsProviderDataSource.init()();
  *(void *)&v3[v8] = v10;
  *(void *)&v9[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_listener] = a1;
  *(void *)&v9[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_queue] = a2;
  *(void *)&v9[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_featureFlags] = a3;
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;

  v25.receiver = v9;
  v25.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v25, "init");
  uint64_t v15 = one-time initialization token for host;
  uint64_t v16 = (char *)v14;
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.host);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Initialized NearbyInvitationServiceHost", v20, 2u);
    swift_slowDealloc();
  }

  uint64_t v21 = *(void (**)(char *, _UNKNOWN **))(**(void **)&v16[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_dataSource]
                                                   + 216);
  uint64_t v22 = v16;
  swift_retain();
  v21(v16, &protocol witness table for NearbyInvitationServiceHost);
  swift_release();
  uint64_t v23 = v22;
  [v11 setDelegate:v23];

  return v23;
}

id NearbyInvitationServiceHost.__deallocating_deinit()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  [*(id *)&v0[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_listener] invalidate];
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "dealloc");
}

void NearbyInvitationServiceHost.init()()
{
}

Swift::Bool __swiftcall NearbyInvitationServiceHost.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized NearbyInvitationServiceHost.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

uint64_t NearbyInvitationServiceHost.didReceiveInvitationApprovalRequest(request:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v16[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    type metadata accessor for IncomingInvitationJoinRequest();
    id v9 = v5;
    uint64_t v10 = String.init<A>(reflecting:)();
    id v15 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "NearbyInvitationServiceHost: Did receive invitation request: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v12 = (id *)(v2
             + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  uint64_t result = swift_beginAccess();
  if (*v12)
  {
    id v14 = *v12;
    XPCHostConnection.clientObject.getter();

    [v15 didReceiveInvitationApprovalRequestWithRequest:v5];
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall NearbyInvitationServiceHost.didUpdateGroups(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v13[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [NearbyGroupConnectionInfo]);
    uint64_t v7 = String.init<A>(reflecting:)();
    id v12 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "NearbyInvitationServiceHost: Updating clients about groups: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v9 = (id *)(v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  swift_beginAccess();
  if (*v9)
  {
    id v10 = *v9;
    XPCHostConnection.clientObject.getter();

    type metadata accessor for NearbyGroupConnectionInfo();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v12 didReceiveUpdatedGroups:isa];

    swift_unknownObjectRelease();
  }
}

uint64_t NearbyInvitationServiceHost.didReceiveConnectionRequest(advertisement:)(void *a1)
{
  return NearbyInvitationServiceHost.didReceiveConnectionRequest(advertisement:)(a1, "NearbyInvitationServiceHost: Updating client about connection request %@", (SEL *)&selRef_didReceiveConnectionRequestWithAdvertisement_);
}

uint64_t NearbyInvitationServiceHost.didDiscoverNearbyAdvertisement(advertisement:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v16 = v2;
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v8 = 136315138;
    id v9 = [v5 debugDescription];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    id v17 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v2 = v16;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "NearbyInvitationServiceHost: Updating client about nearby advertisement %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v13 = (id *)(v2
             + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  uint64_t result = swift_beginAccess();
  if (*v13)
  {
    id v15 = *v13;
    XPCHostConnection.clientObject.getter();

    [v17 didDiscoverNearbyAdvertisementWithAdvertisement:v5];
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t NearbyInvitationServiceHost.didLoseNearbyAdvertisement(advertisement:)(void *a1)
{
  return NearbyInvitationServiceHost.didReceiveConnectionRequest(advertisement:)(a1, "NearbyInvitationServiceHost: Updating client lost nearby advertisement %@", (SEL *)&selRef_didLoseNearbyAdvertisementWithAdvertisement_);
}

uint64_t NearbyInvitationServiceHost.didDiscoverNearbySessionInvitation(id:invitation:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  outlined copy of Data._Representation(a3, a4);
  outlined copy of Data._Representation(a3, a4);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v11 = 136315138;
    outlined copy of Data._Representation(a3, a4);
    uint64_t v12 = Data.description.getter();
    unint64_t v14 = v13;
    outlined consume of Data._Representation(a3, a4);
    uint64_t v20 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data._Representation(a3, a4);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "NearbyInvitationServiceHost: Updating client about discovered invitation %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data._Representation(a3, a4);
  }

  id v15 = (id *)(v5
             + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  uint64_t result = swift_beginAccess();
  if (*v15)
  {
    id v17 = *v15;
    XPCHostConnection.clientObject.getter();

    NSString v18 = String._bridgeToObjectiveC()();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v20 didDiscoverNearbySessionInvitationWithId:v18 invitation:isa];

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t NearbyInvitationServiceHost.didReceiveSessionJoinResponse(response:)(void *a1)
{
  return NearbyInvitationServiceHost.didReceiveConnectionRequest(advertisement:)(a1, "NearbyInvitationServiceHost: Updating client about join response %@", (SEL *)&selRef_didReceiveSessionJoinResponseWithResponse_);
}

uint64_t NearbyInvitationServiceHost.didReceiveConnectionRequest(advertisement:)(void *a1, char *a2, SEL *a3)
{
  uint64_t v6 = v3;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  id v9 = a1;
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    unint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    format = a2;
    unint64_t v14 = a3;
    id v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v13 = v9;

    a3 = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, format, v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v16 = (id *)(v6
             + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  uint64_t result = swift_beginAccess();
  if (*v16)
  {
    id v18 = *v16;
    XPCHostConnection.clientObject.getter();

    objc_msgSend(v20, *a3, v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

char *specialized NearbyInvitationServiceHost.__allocating_init(listener:featureFlags:)(void *a1, void *a2)
{
  unint64_t v13 = a2;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  type metadata accessor for OS_dispatch_queue();
  unint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  unint64_t v14 = &_swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v3);
  id v9 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v10 = objc_allocWithZone((Class)type metadata accessor for NearbyInvitationServiceHost());
  return NearbyInvitationServiceHost.init(listener:queue:featureFlags:)(a1, v9, v13);
}

uint64_t specialized NearbyInvitationServiceHost.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = v2;
    id v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    id v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v10 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Asked to accept new connection from %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v2 = v9;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if ((NSXPCConnection.isEntitledToUseNearbyInvitations.getter() & 1) == 0)
  {
    uint64_t v22 = v5;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      objc_super v25 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 138412290;
      uint64_t v26 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v25 = v22;

      uint64_t v27 = "NearbyInvitationServiceHost rejecting connection %@ because client is not entitled";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v21, v23, v27, v24, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
LABEL_15:
      swift_slowDealloc();
      uint64_t v20 = 0;
      goto LABEL_18;
    }
LABEL_16:

    goto LABEL_17;
  }
  NSXPCConnection.bundleIdentifier.getter();
  if (!v12)
  {
    uint64_t v22 = v5;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      unint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 138412290;
      uint64_t v29 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v28 = v22;

      uint64_t v27 = "NearbyInvitationServiceHost rejecting connection because a client identifier could not be derived: %@";
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  unint64_t v13 = *(void **)(v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_queue);
  uint64_t v14 = *(void *)(v2
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_dataSource);
  objc_allocWithZone((Class)type metadata accessor for NearbyInvitationServiceHostConnection());
  id v15 = v5;
  id v16 = v13;
  swift_retain();
  uint64_t v17 = NearbyInvitationServiceHostConnection.init(connection:queue:dataSource:)((uint64_t)v15, (uint64_t)v16, v14);
  if (!v17)
  {
    uint64_t v22 = v15;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 67109120;
      [v22 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v21, v31, "NearbyInvitationServiceHost could not be created; rejecting connection from PID %d.",
        v32,
        8u);
      goto LABEL_15;
    }

LABEL_17:
    uint64_t v20 = 0;
    uint64_t v21 = v22;
    goto LABEL_18;
  }
  id v18 = v17;
  os_log_type_t v19 = (NSObject **)(v2
                    + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService27NearbyInvitationServiceHost_connection);
  uint64_t v20 = 1;
  swift_beginAccess();
  uint64_t v21 = *v19;
  *os_log_type_t v19 = v18;
LABEL_18:

  return v20;
}

uint64_t type metadata accessor for NearbyInvitationServiceHost()
{
  return self;
}

uint64_t NearbyGroupHostConnection.__allocating_init(connection:queue:)()
{
  id v1 = objc_allocWithZone(v0);
  swift_unknownObjectWeakInit();
  return XPCHostConnection.init(connection:queue:)();
}

uint64_t NearbyGroupHostConnection.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

void NearbyGroupHostConnection.delegate.setter(void *a1)
{
}

void (*NearbyGroupHostConnection.delegate.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for NearbyGroupHostConnection.delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return NearbyGroupHostConnection.delegate.modify;
}

void NearbyGroupHostConnection.delegate.modify(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }
  free(v3);
}

Swift::Void __swiftcall NearbyGroupHostConnection.handleHostConnectionInvalidated()()
{
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.group);
  id v7 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    id v5 = (void *)swift_slowAlloc();
    *(_DWORD *)id v4 = 138412290;
    id v6 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v7;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "NearbyGroupHostConnectionInvalidated: %@", v4, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t NearbyGroupHostConnection.init(connection:queue:)()
{
  swift_unknownObjectWeakInit();
  return XPCHostConnection.init(connection:queue:)();
}

uint64_t NearbyGroupHostConnection.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t @objc NearbyGroupHostConnection.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

void NearbyGroupHostConnection.join(withNearbyGroupMembers:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t *v7 = XPCHostConnection.queue.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  char v8 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    swift_beginAccess();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      id v10 = Strong;
      (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *Strong) + 0x1B8))(a1, a2);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t @objc NearbyGroupHostConnection.join(withNearbyGroupMembers:)(void *a1, int a2, void *a3)
{
  return @objc NearbyGroupHostConnection.join(withNearbyGroupMembers:)(a1, a2, a3, (uint64_t)&unk_1000F8280, (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSSet?, @unowned NSError?) -> (), NearbyGroupHostConnection.join(withNearbyGroupMembers:));
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSSet?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4, uint64_t a5)
{
  Class isa = a3;
  if (a2)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    if (!isa) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  NSString v8 = 0;
  if (a3)
  {
LABEL_3:
    type metadata accessor for NearbyGroupMember();
    lazy protocol witness table accessor for type NearbyGroupMember and conformance NSObject();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
  }
LABEL_4:
  if (a4) {
    uint64_t v9 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v9 = 0;
  }
  id v10 = (id)v9;
  (*(void (**)(uint64_t, NSString, Class))(a5 + 16))(a5, v8, isa);
}

void NearbyGroupHostConnection.addMember(nearbyGroupMember:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v9 = XPCHostConnection.queue.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  char v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    swift_beginAccess();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v12 = Strong;
      (*(void (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *Strong) + 0x1C0))(a1, a2, a3);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t @objc NearbyGroupHostConnection.addMember(nearbyGroupMember:completion:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc NearbyGroupHostConnection.addMember(nearbyGroupMember:completion:)(a1, a2, a3, a4, (uint64_t)&unk_1000F8258, (uint64_t)thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()partial apply, (void (*)(id, uint64_t, uint64_t))NearbyGroupHostConnection.addMember(nearbyGroupMember:completion:));
}

void NearbyGroupHostConnection.kickMember(nearbyGroupMember:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v9 = XPCHostConnection.queue.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  char v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    swift_beginAccess();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v12 = Strong;
      (*(void (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *Strong) + 0x1C8))(a1, a2, a3);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t @objc NearbyGroupHostConnection.kickMember(nearbyGroupMember:completion:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc NearbyGroupHostConnection.addMember(nearbyGroupMember:completion:)(a1, a2, a3, a4, (uint64_t)&unk_1000F8230, (uint64_t)thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()partial apply, (void (*)(id, uint64_t, uint64_t))NearbyGroupHostConnection.kickMember(nearbyGroupMember:completion:));
}

uint64_t @objc NearbyGroupHostConnection.addMember(nearbyGroupMember:completion:)(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  id v13 = a3;
  id v14 = a1;
  a7(v13, a6, v12);

  return swift_release();
}

void NearbyGroupHostConnection.leave(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t *v7 = XPCHostConnection.queue.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  char v8 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    swift_beginAccess();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      char v10 = Strong;
      (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *Strong) + 0x1D0))(a1, a2);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t @objc NearbyGroupHostConnection.leave(completion:)(void *a1, int a2, void *a3)
{
  return @objc NearbyGroupHostConnection.join(withNearbyGroupMembers:)(a1, a2, a3, (uint64_t)&unk_1000F8208, (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> (), NearbyGroupHostConnection.leave(completion:));
}

uint64_t @objc NearbyGroupHostConnection.join(withNearbyGroupMembers:)(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  id v11 = a1;
  a6(a5, v10);

  return swift_release();
}

uint64_t sub_10007BCDC@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_10007BD34()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for NearbyGroupHostConnection()
{
  uint64_t result = type metadata singleton initialization cache for NearbyGroupHostConnection;
  if (!type metadata singleton initialization cache for NearbyGroupHostConnection) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for NearbyGroupHostConnection()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for NearbyGroupHostConnection()
{
  return type metadata accessor for NearbyGroupHostConnection();
}

uint64_t sub_10007BE2C()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(a1, *(void *)(v1 + 16));
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSSet?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, objc_class *a3, uint64_t a4)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSSet?, @unowned NSError?) -> ()(a1, a2, a3, a4, *(void *)(v4 + 16));
}

unint64_t lazy protocol witness table accessor for type NearbyGroupMember and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject)
  {
    type metadata accessor for NearbyGroupMember();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject);
  }
  return result;
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of Any?(a1, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void *specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v13 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    char v8 = (uint64_t *)(a3 + 48);
    do
    {
      uint64_t v9 = *(v8 - 1);
      uint64_t v10 = *v8;
      v12[0] = *(v8 - 2);
      v12[1] = v9;
      void v12[2] = v10;
      swift_bridgeObjectRetain();
      swift_retain();
      a1(&v11, v12);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }
      swift_release();
      swift_bridgeObjectRelease();
      if (v11)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 += 3;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return (void *)v13;
  }
  return result;
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>>.Iterator);
  uint64_t v4 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  v2[6] = v5;
  void *v5 = v2;
  v5[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5TQ0_;
  return dispatch thunk of AsyncIteratorProtocol.next()(v2 + 2, v3, v4);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5TQ0_()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    if (v2)
    {
      swift_getObjectType();
      uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v5 = v4;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5TY2_;
  }
  else
  {
    if (v2)
    {
      swift_getObjectType();
      uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v5 = v7;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5TY1_;
  }
  return _swift_task_switch(v6, v3, v5);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5TY1_()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5TY2_()
{
  v0[3] = v0[7];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  swift_willThrowTypedImpl();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t NearbyInvitationsProviderDataSource.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  NearbyInvitationsProviderDataSource.init()();
  return v0;
}

uint64_t NearbyInvitationsProviderDataSource.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t NearbyInvitationsProviderDataSource.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*NearbyInvitationsProviderDataSource.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = Strong;
  v3[4] = v5;
  return NearbyInvitationsProviderDataSource.delegate.modify;
}

void NearbyInvitationsProviderDataSource.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 24) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t NearbyInvitationsProviderDataSource.abcReporter.getter()
{
  return swift_retain();
}

uint64_t NearbyInvitationsProviderDataSource.waitingJoinRequests.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyInvitationsProviderDataSource.waitingJoinRequests.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 104) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyInvitationsProviderDataSource.waitingJoinRequests.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyInvitationsProviderDataSource.waitingConnectionRequests.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyInvitationsProviderDataSource.waitingConnectionRequests.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyInvitationsProviderDataSource.waitingConnectionRequests.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyInvitationsProviderDataSource.connectionRequest.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyInvitationsProviderDataSource.connectionRequest.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 120) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyInvitationsProviderDataSource.connectionRequest.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t NearbyInvitationsProviderDataSource.filteredDeviceScanners.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyInvitationsProviderDataSource.filteredDeviceScanners.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 128) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyInvitationsProviderDataSource.filteredDeviceScanners.modify())()
{
  return NearbyInvitationsScanner.deviceFoundContinuation.modify;
}

uint64_t key path getter for NearbyInvitationsProviderDataSource.dataReceived : NearbyInvitationsProviderDataSource@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 400))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for NearbyInvitationsProviderDataSource.dataReceived : NearbyInvitationsProviderDataSource(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(void **)a2 + 408);
  outlined copy of Data?(*a1, v3);
  return v4(v2, v3);
}

uint64_t NearbyInvitationsProviderDataSource.dataReceived.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t NearbyInvitationsProviderDataSource.dataReceived.setter()
{
  return static Published.subscript.setter();
}

void (*NearbyInvitationsProviderDataSource.dataReceived.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return NearbyInvitationAdvertiser.connections.modify;
}

uint64_t key path setter for NearbyInvitationsProviderDataSource.$dataReceived : NearbyInvitationsProviderDataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>.Publisher);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 432))(v6);
}

uint64_t NearbyInvitationsProviderDataSource.$dataReceived.getter()
{
  return swift_endAccess();
}

uint64_t NearbyInvitationsProviderDataSource.$dataReceived.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*NearbyInvitationsProviderDataSource.$dataReceived.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource__dataReceived;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  Published.projectedValue.getter();
  swift_endAccess();
  return NearbyInvitationAdvertiser.$connections.modify;
}

uint64_t NearbyInvitationsProviderDataSource.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyInvitationsProviderDataSource.cancellables.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1
                + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource_cancellables);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyInvitationsProviderDataSource.cancellables.modify())()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

void NearbyInvitationsProviderDataSource.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v2 - 8);
  uint64_t v36 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  __chkstk_darwin(v4);
  uint64_t v38 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v10 - 8);
  v0[3] = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v42 = &_swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v37);
  v0[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for ABCReporter();
  v0[10] = 0;
  v0[11] = 0;
  v0[9] = 0;
  swift_allocObject();
  v0[12] = ABCReporter.init(domain:type:)();
  v0[13] = &_swiftEmptyDictionarySingleton;
  v0[14] = &_swiftEmptyDictionarySingleton;
  v0[15] = &_swiftEmptyDictionarySingleton;
  v0[16] = &_swiftEmptyDictionarySingleton;
  uint64_t v11 = (char *)v0
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource__dataReceived;
  long long v42 = xmmword_1000D61F0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  uint64_t v12 = v38;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v11, v12, v40);
  *(void *)((char *)v1
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource_cancellables) = &_swiftEmptySetSingleton;
  v1[5] = [objc_allocWithZone((Class)type metadata accessor for NearbyInvitationServiceBluetoothController(0)) init];
  unint64_t v13 = (objc_class *)type metadata accessor for NearbyInvitationJoinRequestController();
  id v14 = (char *)objc_allocWithZone(v13);
  *(void *)&v14[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_credentialsByHandle] = &_swiftEmptyDictionarySingleton;
  *(void *)&v14[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_pseudonymsByHandle] = &_swiftEmptyDictionarySingleton;
  *(void *)&v14[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_sessionProvider] = 1;
  id v15 = objc_allocWithZone((Class)IDSService);
  id v16 = v14;
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v15 initWithService:v17];

  if (v18)
  {
    *(void *)&v16[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService37NearbyInvitationJoinRequestController_service] = v18;

    v41.receiver = v16;
    v41.super_class = v13;
    id v19 = objc_msgSendSuper2(&v41, "init");
    v1[6] = v19;
    uint64_t v20 = (void *)v1[4];
    id v21 = objc_allocWithZone((Class)IDSService);
    id v22 = v20;
    id v23 = v19;
    NSString v24 = String._bridgeToObjectiveC()();
    id v25 = [v21 initWithService:v24];

    if (v25)
    {
      uint64_t v26 = (char *)objc_allocWithZone((Class)type metadata accessor for NearbyIDSServiceController());
      uint64_t v27 = specialized NearbyIDSServiceController.init(queue:service:delegate:joinRequestsController:)(v22, (uint64_t)v25, 0, 0, v23, v26);
      v1[7] = v27;
      type metadata accessor for NearbyGroupHostManager();
      swift_allocObject();
      NearbyGroupHostManager.init(serviceName:)();
      v1[8] = v28;
      uint64_t v29 = *(void (**)(uint64_t, _UNKNOWN **))((swift_isaMask & *v27) + 0x90);
      uint64_t v30 = v27;
      uint64_t v31 = swift_retain();
      v29(v31, &protocol witness table for NearbyInvitationsProviderDataSource);

      uint64_t v32 = type metadata accessor for TaskPriority();
      uint64_t v33 = (uint64_t)v36;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v36, 1, 1, v32);
      uint64_t v34 = (void *)swift_allocObject();
      v34[2] = 0;
      v34[3] = 0;
      v34[4] = v1;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v33, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.init(), (uint64_t)v34);
      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10007D9B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 400))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10007DA04(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(void **)a2 + 408);
  outlined copy of Data?(*a1, v3);
  return v4(v2, v3);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>.Publisher);
  v4[10] = v5;
  v4[11] = *(void *)(v5 - 8);
  v4[12] = swift_task_alloc();
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.init(), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.init()()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 72) + 64);
  *(void *)(v0 + 104) = v1;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.init(), v1, 0);
}

{
  uint64_t v1;

  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.init(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void *, void);
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v4 = v0[9];
  unint64_t v3 = v0[10];
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Published<[UUID : NearbyGroupHost]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UUID : NearbyGroupHost]>.Publisher);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  uint64_t v5 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v4 + 464))(v0 + 2);
  AnyCancellable.store(in:)();
  swift_release();
  v5(v0 + 2, 0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.init()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = swift_bridgeObjectRetain();
    unint64_t v3 = specialized Sequence.compactMap<A>(_:)(v2);
    swift_bridgeObjectRelease();
    (*(void (**)(void *))(*(void *)v1 + 640))(v3);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t NearbyInvitationsProviderDataSource.createGroup(with:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.host);
  id v13 = a1;
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v29 = v11;
    uint64_t v17 = v16;
    uint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    v33[0] = v28;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v30 = a2;
    uint64_t v18 = _typeName(_:qualified:)();
    uint64_t v31 = a3;
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2112;
    uint64_t v32 = (uint64_t)v13;
    id v20 = v13;
    a2 = v30;
    a3 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s received request to create group %@", (uint8_t *)v17, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v11 = v29;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v21 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v11, 1, 1, v21);
  id v22 = (void *)swift_allocObject();
  void v22[2] = 0;
  v22[3] = 0;
  v22[4] = v4;
  v22[5] = v13;
  v22[6] = a2;
  v22[7] = a3;
  v22[8] = v8;
  id v23 = v13;
  swift_retain();
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:), (uint64_t)v22);
  uint64_t v24 = v4[12];
  v33[3] = type metadata accessor for ABCReporter();
  unsigned char v33[4] = (uint64_t)&protocol witness table for ABCReporter;
  v33[0] = v24;
  swift_retain();
  Task<>.reportFailure(on:function:process:)();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v33);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[6] = a4;
  uint64_t v9 = type metadata accessor for UUID();
  v8[11] = v9;
  v8[12] = *(void *)(v9 - 8);
  v8[13] = swift_task_alloc();
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 48) + 64);
  *(void *)(v0 + 112) = v1;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:), v1, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v1 = (void *)v0[7];
  NearbyGroupCreationRequest.id.getter();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroupHostManager.createGroup(id:generator:)
                                                                  + async function pointer to specialized NearbyGroupHostManager.createGroup(id:generator:));
  uint64_t v2 = v1;
  swift_retain();
  unint64_t v3 = (void *)swift_task_alloc();
  v0[15] = v3;
  *unint64_t v3 = v0;
  v3[1] = closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:);
  uint64_t v5 = v0[13];
  uint64_t v4 = v0[14];
  uint64_t v6 = v0[7];
  return v8(v5, v4, v6, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = *(void **)(v0 + 136);
  *(void *)(v0 + 144) = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x1E8))();

  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:), 0, 0);
}

{
  void *v0;
  void *v1;
  void (*v2)(void *, void);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = (void (*)(void *, void))v0[8];
  unint64_t v3 = v1;
  v2(v1, 0);

  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void, uint64_t);
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15;

  id v14 = v0;
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void (**)(void, uint64_t))(v0 + 64);
  swift_errorRetain();
  v2(0, v1);
  *(void *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0 && *(unsigned char *)(v0 + 152) == 1)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    unint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.host);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      v13[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315650;
      uint64_t v8 = _typeName(_:qualified:)();
      *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x80000001000DBEF0, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 22) = 2112;
      swift_errorRetain();
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 40) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v7 = v10;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s %s - Suppressing report of error: %@", (uint8_t *)v6, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v11();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 96);
  v4[16] = v1;
  swift_task_dealloc();
  uint64_t v6 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v7 = v4[14];
  uint64_t v8 = v4[13];
  uint64_t v9 = v4[11];
  swift_release();
  if (v1)
  {
    (*v6)(v8, v9);
    uint64_t v10 = closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:);
  }
  else
  {
    v4[17] = a1;
    (*v6)(v8, v9);
    uint64_t v10 = closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:);
  }
  return _swift_task_switch(v10, v7, 0);
}

uint64_t NearbyInvitationsProviderDataSource.requestApproval(with:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.host);
  id v12 = a1;
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v26 = a2;
    uint64_t v29 = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v27 = a3;
    uint64_t v17 = _typeName(_:qualified:)();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v28 = (uint64_t)v12;
    type metadata accessor for InvitationApprovalRequest();
    id v19 = v12;
    uint64_t v20 = String.init<A>(reflecting:)();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    a3 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s received request to attempt requesting approval with %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    a2 = v26;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v22 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v10, 1, 1, v22);
  id v23 = (void *)swift_allocObject();
  uint64_t v23[2] = 0;
  v23[3] = 0;
  void v23[4] = v4;
  v23[5] = v12;
  v23[6] = a2;
  v23[7] = a3;
  id v24 = v12;
  swift_retain();
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:), (uint64_t)v23);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[38] = a6;
  v7[39] = a7;
  v7[36] = a4;
  v7[37] = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  v7[40] = v8;
  v7[41] = *(void *)(v8 - 8);
  v7[42] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DispatchQoS();
  v7[43] = v9;
  v7[44] = *(void *)(v9 - 8);
  v7[45] = swift_task_alloc();
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)()
{
  uint64_t v1 = *(void *)(v0[36] + 56);
  uint64_t v2 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_service;
  v0[46] = v1;
  v0[47] = v2;
  uint64_t v3 = *(void *)(v1 + v2 + 24);
  uint64_t v4 = *(void *)(v1 + v2 + 32);
  uint64_t v5 = __swift_project_boxed_opaque_existential_1((void *)(v1 + v2), v3);
  v0[23] = v3;
  v0[24] = *(void *)(v4 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 20);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v3 - 8) + 16))(boxed_opaque_existential_1, v5, v3);
  specialized NearbyGroupServerBag.pseudonymConfig(service:reusable:)(v0 + 20, 1, (uint64_t)(v0 + 14));
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[15];
  v0[48] = v8;
  uint64_t v9 = v0[16];
  uint64_t v10 = v0[17];
  outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?((uint64_t)(v0 + 18), (uint64_t)(v0 + 33), &demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)(v0 + 33));
  v0[2] = v7;
  v0[3] = v8;
  v0[4] = v9;
  v0[5] = v10;
  v0[6] = 0xD000000000000016;
  v0[7] = 0x80000001000DB790;
  id v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized static Pseudonym.reusable(for:configuration:)
                                                 + async function pointer to specialized static Pseudonym.reusable(for:configuration:));
  uint64_t v11 = (void *)swift_task_alloc();
  v0[49] = v11;
  *uint64_t v11 = v0;
  v11[1] = closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:);
  return v13((uint64_t)(v0 + 20), (uint64_t)(v0 + 2));
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  void *v14;
  void *v15;
  id v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = v0[51];
  id v19 = v0[52];
  id v23 = v0[45];
  uint64_t v27 = v0[44];
  uint64_t v28 = v0[43];
  uint64_t v26 = v0[41];
  id v24 = v0[42];
  id v25 = v0[40];
  unint64_t v21 = v0[38];
  uint64_t v22 = v0[39];
  uint64_t v2 = (void *)(v0[46] + v0[47]);
  uint64_t v3 = v0[36];
  uint64_t v20 = (void *)v0[37];
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 20));
  swift_beginAccess();
  uint64_t v4 = [*(id *)(v1 + 16) URI];
  uint64_t v5 = [v4 prefixedURI];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  uint64_t v10 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v11 = __swift_project_boxed_opaque_existential_1(v2, v10);
  v0[28] = v10;
  id v12 = *(void *)(v9 + 8);
  v0[29] = v12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 25);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, v11, v10);
  specialized static Pseudonym.markUsed(handle:for:reuseIdentifier:)(v6, v8, (uint64_t)boxed_opaque_existential_1, 0xD000000000000016, 0x80000001000DB790, v19, v10, v12);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v0 + 25));
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v3;
  v14[3] = v20;
  void v14[4] = v1;
  v14[5] = v21;
  v14[6] = v22;
  v0[12] = partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:);
  v0[13] = v14;
  v0[8] = _NSConcreteStackBlock;
  v0[9] = 1107296256;
  v0[10] = thunk for @escaping @callee_guaranteed () -> ();
  v0[11] = &block_descriptor_196;
  uint64_t v15 = _Block_copy(v0 + 8);
  swift_retain();
  uint64_t v16 = v20;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v0[35] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v23, v28);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 160);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 400) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 408) = a1;
    *(void *)(v4 + 416) = type metadata accessor for Pseudonym();
    uint64_t v5 = closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:);
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v46 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v46 - v15;
  uint64_t v17 = *(void **)(a1 + 56);
  swift_beginAccess();
  id v18 = [*(id *)(a3 + 16) URI];
  id v19 = [v18 prefixedURI];

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  (*(void (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *v17) + 0x118))(a2, v20, v22);
  uint64_t v23 = v51;
  uint64_t v49 = a1;
  uint64_t v50 = v11;
  swift_bridgeObjectRelease();
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Log.host);
  uint64_t v25 = v23;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  uint64_t v27 = v14;
  uint64_t v48 = v16;
  uint64_t v28 = v8;
  uint64_t v29 = v26;
  v26(v14, v16, v28);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    v54[0] = v47;
    *(_DWORD *)uint64_t v32 = 136315138;
    v46[1] = v32 + 4;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v25 + 8);
    v35(v27, v28);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Sent joinRequest with ID: %s, staging for completion", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v35 = *(void (**)(char *, uint64_t))(v25 + 8);
    v35(v27, v28);
  }

  uint64_t v36 = (uint64_t)v50;
  uint64_t v37 = v28;
  uint64_t v38 = v48;
  v29(v50, v48, v28);
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v52;
  *(void *)(v39 + 24) = v53;
  uint64_t v40 = *(uint64_t (**)(uint64_t *))(*(void *)v49 + 320);
  swift_retain();
  objc_super v41 = (void (*)(uint64_t *, void))v40(v54);
  uint64_t v43 = v42;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v55 = *v43;
  *uint64_t v43 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:), v39, v36, isUniquelyReferenced_nonNull_native);
  *uint64_t v43 = v55;
  swift_bridgeObjectRelease();
  v35((char *)v36, v37);
  v41(v54, 0);
  return ((uint64_t (*)(char *, uint64_t))v35)(v38, v37);
}

uint64_t closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)(void **a1, uint64_t *a2, void (*a3)(void, void))
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.host);
  id v7 = v4;
  swift_errorRetain();
  id v8 = v7;
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = 7104878;
    uint64_t v12 = v4;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v24 = a3;
    if (v12)
    {
      type metadata accessor for InvitationJoinResponse();
      id v14 = v8;
      uint64_t v15 = String.init<A>(reflecting:)();
      unint64_t v17 = v16;
    }
    else
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v15 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v13 + 12) = 2080;
    if (v5)
    {
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v11 = String.init<A>(reflecting:)();
      unint64_t v19 = v18;
    }
    else
    {
      unint64_t v19 = 0xE300000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received joinResponse: %s, error: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a3 = v24;
    uint64_t v4 = v12;
    if (!v5) {
      goto LABEL_13;
    }
LABEL_7:
    swift_errorRetain();
    a3(0, v5);
    return swift_errorRelease();
  }

  swift_errorRelease();
  swift_errorRelease();

  if (v5) {
    goto LABEL_7;
  }
LABEL_13:
  if (v4)
  {
    InvitationJoinResponse.sessionIdentifier.getter();
    if (v20)
    {
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(void *, void))a3)(v4, 0);
    }
  }
  lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
  uint64_t v22 = swift_allocError();
  unsigned char *v23 = 1;
  a3(0, v22);
  return swift_errorRelease();
}

uint64_t NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v41 = *v5;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v46 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v44 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  long long v42 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.host);
  id v14 = a1;
  id v15 = a2;
  unint64_t v16 = v14;
  unint64_t v17 = v15;
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v40 = v10;
    uint64_t v21 = v20;
    uint64_t v37 = (void *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    aBlock[0] = v38;
    *(_DWORD *)uint64_t v21 = 136315650;
    uint64_t v39 = a4;
    uint64_t v22 = _typeName(_:qualified:)();
    uint64_t v47 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    uint64_t v47 = v16;
    type metadata accessor for IncomingInvitationJoinRequest();
    uint64_t v24 = v16;
    uint64_t v41 = a3;
    id v25 = v24;
    uint64_t v26 = String.init<A>(reflecting:)();
    uint64_t v47 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v21 + 22) = 2112;
    uint64_t v47 = v17;
    uint64_t v28 = v17;
    a4 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v37 = v17;

    a3 = v41;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s approve pendingMember %s with response: %@", (uint8_t *)v21, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v10 = v40;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v29 = (void *)swift_allocObject();
  uint64_t v29[2] = v5;
  v29[3] = v16;
  v29[4] = v17;
  v29[5] = a3;
  v29[6] = a4;
  aBlock[4] = (uint64_t)partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:);
  aBlock[5] = (uint64_t)v29;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_4;
  uint64_t v30 = _Block_copy(aBlock);
  os_log_type_t v31 = v16;
  uint64_t v32 = v17;
  swift_retain();
  swift_retain();
  uint64_t v33 = v42;
  static DispatchQoS.unspecified.getter();
  uint64_t v47 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  unint64_t v34 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v10);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v45);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4(0);
}

uint64_t NearbyInvitationsProviderDataSource.reject(pendingMember:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v36 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.host);
  id v14 = a1;
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v34 = v8;
    uint64_t v18 = v17;
    uint64_t v31 = swift_slowAlloc();
    aBlock[0] = v31;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v33 = v9;
    uint64_t v19 = _typeName(_:qualified:)();
    uint64_t v32 = a3;
    uint64_t v38 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v38 = v14;
    type metadata accessor for IncomingInvitationJoinRequest();
    uint64_t v21 = v12;
    uint64_t v22 = a2;
    unint64_t v23 = v14;
    uint64_t v24 = String.init<A>(reflecting:)();
    uint64_t v38 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, aBlock);
    a3 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v9 = v33;
    swift_bridgeObjectRelease();

    a2 = v22;
    uint64_t v12 = v21;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s reject pendingMember %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v8 = v34;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v26 = (void *)swift_allocObject();
  long long v26[2] = v4;
  v26[3] = v14;
  v26[4] = a2;
  v26[5] = a3;
  aBlock[4] = (uint64_t)partial apply for closure #1 in NearbyInvitationsProviderDataSource.reject(pendingMember:completion:);
  aBlock[5] = (uint64_t)v26;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_20;
  unint64_t v27 = _Block_copy(aBlock);
  uint64_t v28 = v14;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v38 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v29 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v29, v8);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v37);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.reject(pendingMember:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0);
}

uint64_t NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v3;
  v10[5] = a2;
  void v10[6] = a3;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:), (uint64_t)v10);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[17] = a5;
  v6[18] = a6;
  v6[16] = a4;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:)()
{
  uint64_t v3 = (uint64_t (*)(uint64_t))(*(void *)((swift_isaMask & **(void **)(*(void *)(v0 + 128) + 48))
                                                   + 0xA8)
                                       + **(int **)((swift_isaMask & **(void **)(*(void *)(v0 + 128) + 48))
                                                  + 0xA8));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:);
  return v3(v0 + 56);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  void *v11;
  id v12;
  uint64_t (*v13)(void);
  void (*v15)(void *, void);
  uint64_t v16;

  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = outlined init with take of PseudonymProtocol((long long *)(v0 + 56), v0 + 16);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 96))(v2);
  if (v4 >> 60 == 15)
  {
    (*(void (**)(void, void))(v0 + 136))(0, 0);
    swift_release();
  }
  else
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    id v15 = *(void (**)(void *, void))(v0 + 136);
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v8);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 16);
    outlined copy of Data._Representation(v5, v6);
    v9(v8, v7);
    uint64_t v10 = objc_allocWithZone((Class)type metadata accessor for NearbyInvitationJoinRequestMetadata());
    uint64_t v11 = (void *)NearbyInvitationJoinRequestMetadata.init(publicKey:pseudonym:)();
    uint64_t v12 = v11;
    v15(v11, 0);
    swift_release();

    outlined consume of Data?(v5, v6);
  }
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(void, uint64_t);
  uint64_t (*v14)(void);
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[21];
  uint64_t v6 = v0[16];
  if (v4)
  {
    uint64_t v7 = swift_slowAlloc();
    os_log_type_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    v0[12] = v6;
    type metadata accessor for NearbyInvitationsProviderDataSource();
    swift_retain();
    uint64_t v8 = String.init<A>(reflecting:)();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v0[14] = v5;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(reflecting:)();
    v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s failed to provision pseudonym, error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v12 = v0[21];
  uint64_t v13 = (void (*)(void, uint64_t))v0[17];
  swift_errorRetain();
  v13(0, v12);
  swift_errorRelease();
  swift_errorRelease();
  id v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 168) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:);
  }
  else {
    uint64_t v4 = closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:);
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.host);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "NearbyInvitationsProviderDataSource advertiseNearbyInvitation", v15, 2u);
    swift_slowDealloc();
  }

  id v16 = a1;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v33 = (uint64_t)v16;
    uint64_t v34 = v20;
    uint64_t v30 = v11;
    uint64_t v31 = a3;
    *(_DWORD *)uint64_t v19 = 136315138;
    type metadata accessor for NearbyAdvertisementRequest();
    id v21 = v16;
    uint64_t v32 = a4;
    id v22 = v21;
    uint64_t v23 = String.init<A>(reflecting:)();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v34);
    uint64_t v11 = v30;
    a3 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    a4 = v32;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Got pseud %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v25 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v11, 1, 1, v25);
  uint64_t v26 = (void *)swift_allocObject();
  long long v26[2] = 0;
  v26[3] = 0;
  v26[4] = v5;
  v26[5] = v16;
  v26[6] = a3;
  v26[7] = a4;
  id v27 = v16;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:), (uint64_t)v26);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  _OWORD v7[2] = a4;
  v7[3] = a5;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:);
  uint64_t v2 = *(void *)(v0 + 24);
  return NearbyInvitationServiceBluetoothController.broadcast(invitation:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:);
  }
  else {
    uint64_t v2 = closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:);
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:)(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.host);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "NearbyInvitationsProviderDataSource advertiseNearbySessionEndpoint", v14, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for NearbyInvitationAdvertiser();
  id v15 = (void *)swift_allocObject();
  id v16 = a1;
  swift_retain();
  uint64_t v17 = specialized NearbyInvitationAdvertiser.init(listenerConfiguration:delegate:)(v16, v4, v15);
  swift_release();
  *(void *)(v4 + 80) = v17;
  swift_release();
  uint64_t v18 = *(void *)(v4 + 80);
  if (v18)
  {
    uint64_t v19 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v10, 1, 1, v19);
    uint64_t v20 = (void *)swift_allocObject();
    void v20[2] = 0;
    v20[3] = 0;
    v20[4] = v18;
    v20[5] = a2;
    v20[6] = a3;
    swift_retain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:), (uint64_t)v20);
    return swift_release();
  }
  else
  {
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v11, (uint64_t)static Log.client);
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "NearbyInvitationsProviderDataSource failed to create nearbyInvitationsListener", v24, 2u);
      swift_slowDealloc();
    }

    lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
    swift_allocError();
    unsigned char *v25 = 2;
    a2();
    return swift_errorRelease();
  }
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  void v6[2] = a4;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:)()
{
  (*(void (**)(void))(**(void **)(v0 + 16) + 320))();
  (*(void (**)(void))(v0 + 24))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v24 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v11 - 8);
  os_log_type_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.host);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v23 = v13;
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "NearbyInvitationsProviderDataSource stopAdvertising", v17, 2u);
    uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    os_log_type_t v13 = v23;
    swift_slowDealloc();
  }

  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v13, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  unint64_t v19 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = 0;
  *((void *)v20 + 3) = 0;
  *((void *)v20 + 4) = v4;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v19], v10, v7);
  id v21 = &v20[(v9 + v19 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(void *)id v21 = v24;
  *((void *)v21 + 1) = a3;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:), (uint64_t)v20);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  _OWORD v7[2] = a4;
  v7[3] = a5;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:);
  uint64_t v2 = *(void *)(v0 + 24);
  return NearbyInvitationServiceBluetoothController.stopBroadcast(invitation:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:);
  }
  else {
    uint64_t v2 = closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 32))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[7];
  uint64_t v2 = (void (*)(uint64_t))v0[4];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:)(void (*a1)(void), uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "NearbyInvitationsProviderDataSource stopAdvertisingEndpoint", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *(void *)(v2 + 80);
  if (v12)
  {
    uint64_t v13 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 1, 1, v13);
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = 0;
    v14[3] = 0;
    void v14[4] = v12;
    v14[5] = a1;
    v14[6] = a2;
    swift_retain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:), (uint64_t)v14);
    return swift_release();
  }
  else
  {
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "NearbyInvitationsProviderDataSource unable to create nearbyInvitationsBrowser", v18, 2u);
      swift_slowDealloc();
    }

    lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
    swift_allocError();
    *unint64_t v19 = 2;
    a1();
    return swift_errorRelease();
  }
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[2] = a5;
  v6[3] = a6;
  uint64_t v9 = (uint64_t (*)(void))(*(void *)(*(void *)a4 + 328) + **(int **)(*(void *)a4 + 328));
  uint64_t v7 = (void *)swift_task_alloc();
  v6[4] = v7;
  void *v7 = v6;
  v7[1] = closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:);
  return v9();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:)()
{
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 16))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)(a1, a2, a3, "NearbyInvitationsProviderDataSource markInvitationUsed", (uint64_t)&unk_1000F8488, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:));
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  _OWORD v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)()
{
  uint64_t v1 = *(void **)(v0[3] + 48);
  uint64_t v2 = NearbyInvitationJoinRequestMetadata.pseudonym.getter();
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0xD0))(v2);
  uint64_t v3 = (void (*)(void))v0[5];
  swift_bridgeObjectRelease();
  v3(0);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5 - 8);
  uint64_t v35 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v32 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - v11;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.host);
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v33(v12, a1, v7);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v31 = a1;
    uint64_t v17 = v16;
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v30 = v17 + 4;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    *(_WORD *)(v17 + 12) = 2048;
    uint64_t v20 = v37;
    uint64_t v40 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "NearbyInvitationsProviderDataSource assertAdvertisementPublic invitation: %s for %lu rotations", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v31;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);

    uint64_t v20 = v37;
  }
  uint64_t v21 = type metadata accessor for TaskPriority();
  uint64_t v22 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v35, 1, 1, v21);
  os_log_type_t v23 = v32;
  v33(v32, a1, v7);
  unint64_t v24 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v25 = (v34 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = (char *)swift_allocObject();
  *((void *)v26 + 2) = 0;
  *((void *)v26 + 3) = 0;
  *((void *)v26 + 4) = v39;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v26[v24], v23, v7);
  *(void *)&v26[v25] = v20;
  id v27 = &v26[(v25 + 15) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v28 = v36;
  *(void *)id v27 = v38;
  *((void *)v27 + 1) = v28;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v22, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:), (uint64_t)v26);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  void v8[5] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v8[10] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v8[11] = v9;
  v8[12] = *(void *)(v9 - 8);
  v8[13] = swift_task_alloc();
  v8[14] = swift_task_alloc();
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[15] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:);
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  return NearbyInvitationServiceBluetoothController.assertPublic(invitation:rotations:)(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:);
  }
  else {
    uint64_t v2 = closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, void);
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[14];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[10];
  uint64_t v5 = (void (*)(uint64_t, void))v0[8];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v1, v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v2);
  v5(v4, 0);
  outlined destroy of Any?(v4, &demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t (*v21)(void);
  uint64_t v23;
  void *v24;
  uint64_t v25;

  unint64_t v24 = v0;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.host);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.error.getter();
  uint64_t v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[16];
  uint64_t v11 = v0[12];
  uint64_t v10 = v0[13];
  uint64_t v12 = v0[11];
  if (v8)
  {
    uint64_t v13 = swift_slowAlloc();
    os_log_type_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    *(_WORD *)(v13 + 12) = 2080;
    v0[3] = v9;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v16 = String.init<A>(reflecting:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to assert invitation %s as public, reason: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(v0[13], v0[11]);
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v18 = v0[16];
  unint64_t v19 = v0[10];
  uint64_t v20 = (void (*)(uint64_t, uint64_t))v0[8];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[12] + 56))(v19, 1, 1, v0[11]);
  swift_errorRetain();
  v20(v19, v18);
  swift_errorRelease();
  swift_errorRelease();
  outlined destroy of Any?(v19, &demangling cache variable for type metadata for UUID?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = a4;
  uint64_t v58 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6 - 8);
  unint64_t v57 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v56 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v55 = (char *)v47 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v47 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v47 - v17;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.host);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v20(v18, a1, v8);
  uint64_t v54 = v20;
  v20(v16, a2, v8);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  int v23 = v22;
  uint64_t v53 = v21;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v48 = v16;
    uint64_t v25 = v24;
    uint64_t v50 = swift_slowAlloc();
    uint64_t v62 = v50;
    *(_DWORD *)uint64_t v25 = 136315394;
    v47[2] = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    int v49 = v23;
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v62);
    uint64_t v51 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v52 = a2;
    uint64_t v28 = *(void (**)(char *, uint64_t))(v9 + 8);
    v28(v18, v8);
    *(_WORD *)(v25 + 12) = 2080;
    v47[1] = v25 + 14;
    uint64_t v29 = v48;
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v62);
    a1 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v28(v29, v8);
    a2 = v52;
    uint64_t v32 = v53;
    _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v49, "NearbyInvitationsProviderDataSource releaseAdvertisementPublicAssertion invitation: %s assertionIdentifier: %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v33 = *(void (**)(char *, uint64_t))(v9 + 8);
    v33(v18, v8);
    v33(v16, v8);
  }
  uint64_t v34 = type metadata accessor for TaskPriority();
  uint64_t v35 = (uint64_t)v57;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v57, 1, 1, v34);
  uint64_t v36 = v54;
  uint64_t v37 = v55;
  v54(v55, a1, v8);
  uint64_t v38 = v56;
  v36(v56, a2, v8);
  uint64_t v39 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v40 = (v39 + 40) & ~v39;
  uint64_t v41 = (v10 + v39 + v40) & ~v39;
  long long v42 = (char *)swift_allocObject();
  *((void *)v42 + 2) = 0;
  *((void *)v42 + 3) = 0;
  *((void *)v42 + 4) = v59;
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v43(&v42[v40], v37, v8);
  v43(&v42[v41], v38, v8);
  uint64_t v44 = &v42[(v10 + v41 + 7) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v45 = v60;
  *(void *)uint64_t v44 = v58;
  *((void *)v44 + 1) = v45;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v35, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:), (uint64_t)v42);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[6] = a4;
  uint64_t v9 = type metadata accessor for UUID();
  v8[11] = v9;
  v8[12] = *(void *)(v9 - 8);
  v8[13] = swift_task_alloc();
  v8[14] = swift_task_alloc();
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[15] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:);
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  return NearbyInvitationServiceBluetoothController.releasePublicAssertion(invitation:assertionIdentifier:)(v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:);
  }
  else {
    uint64_t v2 = closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 72))(0);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t (*v28)(void);
  NSObject *log;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  uint64_t v32 = v0;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v6 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v8(v1, v6, v3);
  v8(v2, v5, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.error.getter();
  uint64_t v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = v0[16];
  uint64_t v14 = v0[13];
  uint64_t v13 = v0[14];
  uint64_t v16 = v0[11];
  uint64_t v15 = v0[12];
  if (v11)
  {
    os_log_t log = v9;
    uint64_t v17 = swift_slowAlloc();
    unint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315650;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v20(v13, v16);
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v20(v14, v16);
    *(_WORD *)(v17 + 22) = 2080;
    v0[4] = v12;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    int v23 = String.init<A>(reflecting:)();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v10, "Failed to release invitation %s's assertion %s, reason: %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v25(v0[14], v0[11]);
    v25(v14, v16);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v26 = v0[16];
  unint64_t v27 = (void (*)(uint64_t))v0[9];
  swift_errorRetain();
  v27(v26);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = (uint64_t (*)(void))v0[1];
  return v28();
}

uint64_t NearbyInvitationsProviderDataSource.releaseInvitation(_:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)(a1, a2, a3, "NearbyInvitationsProviderDataSource releaseInvitation", (uint64_t)&unk_1000F8500, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.releaseInvitation(_:response:));
}

uint64_t NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a6;
  uint64_t v8 = v6;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, a4, v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v14, 1, 1, v19);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = 0;
  v20[3] = 0;
  v20[4] = v8;
  v20[5] = a1;
  v20[6] = a2;
  v20[7] = a3;
  swift_retain();
  id v21 = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, v24, (uint64_t)v20);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.releaseInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  _OWORD v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.releaseInvitation(_:response:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.releaseInvitation(_:response:)()
{
  uint64_t v1 = *(void **)(v0[3] + 48);
  uint64_t v2 = NearbyInvitationJoinRequestMetadata.pseudonym.getter();
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0xB0))(v2);
  uint64_t v3 = (void (*)(void))v0[5];
  swift_bridgeObjectRelease();
  v3(0);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v26 = a1;
  unint64_t v27 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.host);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "NearbyInvitationsProviderDataSource scanNearbyInvitations", v15, 2u);
    swift_slowDealloc();
  }

  id v16 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  unsigned int v17 = [v16 btScanAbstraction];

  if (v17)
  {
    uint64_t v18 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v11, 1, 1, v18);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v6);
    unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v20 = (char *)swift_allocObject();
    *((void *)v20 + 2) = 0;
    *((void *)v20 + 3) = 0;
    *((void *)v20 + 4) = v4;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v20[v19], (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    id v21 = &v20[(v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8];
    *(void *)id v21 = v27;
    *((void *)v21 + 1) = a3;
    swift_retain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), (uint64_t)v20);
  }
  else
  {
    v27(0);
    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v11, 1, 1, v22);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v6);
    unint64_t v23 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v24 = (char *)swift_allocObject();
    *((void *)v24 + 2) = 0;
    *((void *)v24 + 3) = 0;
    *((void *)v24 + 4) = v4;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v24[v23], (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    swift_retain();
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), (uint64_t)v24);
  }
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v7[11] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v7[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[13] = v9;
  v7[14] = *(void *)(v9 + 64);
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)()
{
  uint64_t v44 = v0;
  if (!*(void *)((*(uint64_t (**)(void))(**(void **)(v0 + 56) + 376))() + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 64));
  char v2 = v1;
  swift_bridgeObjectRelease();
  if ((v2 & 1) == 0)
  {
LABEL_8:
    uint64_t v17 = *(void *)(v0 + 128);
    uint64_t v18 = *(void *)(v0 + 104);
    uint64_t v19 = *(void *)(v0 + 96);
    uint64_t v38 = *(void *)(v0 + 88);
    uint64_t v20 = *(void *)(v0 + 64);
    uint64_t v39 = *(void *)(v0 + 112);
    uint64_t v40 = *(void *)(v0 + 72);
    uint64_t v41 = *(void *)(v0 + 80);
    uint64_t v42 = *(void *)(v0 + 56);
    id v21 = [objc_allocWithZone((Class)CBDiscovery) init];
    [v21 setUseCase:131092];
    [v21 addDiscoveryType:21];
    type metadata accessor for BluetoothScanner();
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = specialized BluetoothScanner.init(discoveryEngine:)(v21, v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilteredBluetoothScanner<NearbyRangingFilter>);
    swift_allocObject();
    uint64_t v24 = specialized FilteredBluetoothScanner.init(scanner:config:)(v23, 1, 3);
    swift_release();
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    v37(v17, v20, v19);
    uint64_t v25 = *(uint64_t (**)(uint64_t))(*(void *)v42 + 392);
    swift_retain();
    uint64_t v26 = (void (*)(uint64_t, void))v25(v0 + 16);
    uint64_t v28 = v27;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v43 = *v28;
    *uint64_t v28 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v24, v17, isUniquelyReferenced_nonNull_native);
    *uint64_t v28 = v43;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    v26(v0 + 16, 0);
    uint64_t v30 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v38, 1, 1, v30);
    v37(v17, v20, v19);
    unint64_t v31 = (*(unsigned __int8 *)(v18 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    uint64_t v32 = (char *)swift_allocObject();
    *((void *)v32 + 2) = 0;
    *((void *)v32 + 3) = 0;
    *((void *)v32 + 4) = v40;
    *((void *)v32 + 5) = v41;
    *((void *)v32 + 6) = v24;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(&v32[v31], v17, v19);
    *(void *)&v32[(v39 + v31 + 7) & 0xFFFFFFFFFFFFFFF8] = v42;
    swift_retain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v38, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), (uint64_t)v32);
    swift_release();
    goto LABEL_11;
  }
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 104);
  if (v10)
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v14 = 136315138;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received request to scan for ID: %s which already exists.", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v13 + 8))(*(void *)(v0 + 120), *(void *)(v0 + 96));
  }

  uint64_t v33 = *(void (**)(void))(v0 + 72);
  lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
  swift_allocError();
  unsigned char *v34 = 4;
  v33();
  swift_errorRelease();
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
  return v35();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = a7;
  unsigned char v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[12] = a4;
  v8[17] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<NearbyAdvertisement>>);
  v8[18] = swift_task_alloc();
  v8[19] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<NearbyAdvertisement>);
  v8[20] = v9;
  v8[21] = *(void *)(v9 - 8);
  v8[22] = swift_task_alloc();
  v8[23] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>>);
  v8[24] = v10;
  v8[25] = *(void *)(v10 - 8);
  v8[26] = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>>.Iterator);
  v8[27] = v11;
  v8[28] = *(void *)(v11 - 8);
  v8[29] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UUID();
  v8[30] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v8[31] = v13;
  v8[32] = *(void *)(v13 + 64);
  v8[33] = swift_task_alloc();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>);
  v8[34] = v14;
  v8[35] = *(void *)(v14 - 8);
  v8[36] = swift_task_alloc();
  return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), 0, 0);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v13 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v8 = (*(uint64_t (**)(void))(v0 + 96))(0);
  *(void *)(v0 + 64) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 192))(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v3);
  unint64_t v9 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v10 + v9, v1, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>);
  *(void *)(v0 + 296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NearbyAdvertisement]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>);
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice], Never>, [NearbyAdvertisement]>);
  Publisher<>.values.getter();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v13);
  *(void *)(v0 + 304) = _swiftEmptyArrayStorage;
  uint64_t v14 = (char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5Tu
      + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5Tu;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 312) = v11;
  *uint64_t v11 = v0;
  v11[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:);
  return ((uint64_t (*)(void, void, uint64_t))v14)(0, 0, v0 + 48);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  uint64_t (*v33)(void);
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  void *v42;
  char *v43;
  void (*v44)(void *, void);
  uint64_t v45;

  uint64_t v1 = v0[40];
  if (v1)
  {
    v0[11] = v0[38];
    uint64_t v2 = v0 + 11;
    uint64_t v3 = v0[23];
    uint64_t v5 = v0[20];
    uint64_t v4 = v0[21];
    uint64_t v6 = v0[18];
    uint64_t v7 = v0[19];
    uint64_t v8 = v0[17];
    uint64_t v40 = v1;
    *(v2 - 4) = v1;
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [NearbyAdvertisement] and conformance [A], &demangling cache variable for type metadata for [NearbyAdvertisement]);
    BidirectionalCollection.difference<A>(from:by:)();
    swift_bridgeObjectRelease();
    uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v41(v6, v3, v5);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type CollectionDifference<NearbyAdvertisement> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<NearbyAdvertisement>);
    dispatch thunk of Collection.startIndex.getter();
    *(void *)(v6 + *(int *)(v8 + 36)) = *(v2 - 2);
    outlined init with take of AsyncStream<NearbyAdvertisement>.Continuation?(v6, v7, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<NearbyAdvertisement>>);
    unint64_t v9 = (uint64_t *)(v7 + *(int *)(v8 + 36));
    uint64_t v10 = *v9;
    uint64_t v11 = v42;
    dispatch thunk of Collection.endIndex.getter();
    if (v10 == *(v2 - 1))
    {
LABEL_3:
      uint64_t v12 = v11[23];
      uint64_t v14 = v11[20];
      uint64_t v13 = v11[21];
      outlined destroy of Any?(v11[19], &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<NearbyAdvertisement>>);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      v11[38] = v40;
      uint64_t v43 = (char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5Tu
          + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI10PublishersO10CompactMapVy_AI19CurrentValueSubjectCySay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0V6DeviceVyAT0S13RangingFilterC_GGs5NeverOGSay0S8Sessions0S13AdvertisementCGG_G_Tg5Tu;
      uint64_t v15 = (void *)swift_task_alloc();
      v11[39] = v15;
      *uint64_t v15 = v11;
      v15[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:);
      return ((uint64_t (*)(void, void, void *))v43)(0, 0, v11 + 6);
    }
    while (1)
    {
      uint64_t v25 = v11[21];
      uint64_t v26 = v11[22];
      unint64_t v27 = v11[19];
      uint64_t v28 = v11[20];
      uint64_t v29 = v11[16];
      uint64_t v44 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      unint64_t v31 = *(void **)(v30 + 8);
      uint64_t v32 = *(unsigned char *)(v30 + 25);
      outlined copy of CollectionDifference<NearbyAdvertisement>.Change();
      v44(v42 + 2, 0);
      v41(v26, v27, v28);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v28);
      uint64_t v33 = *(uint64_t (**)(void))(*(void *)v29 + 208);
      uint64_t v34 = v31;
      uint64_t v35 = v33();
      uint64_t v37 = v36;
      if (v32)
      {
        uint64_t v11 = v42;
        if (!v35) {
          goto LABEL_11;
        }
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(id, uint64_t, uint64_t))(v37 + 40))(v34, ObjectType, v37);
      }
      else
      {
        uint64_t v11 = v42;
        if (!v35) {
          goto LABEL_11;
        }
        uint64_t v39 = swift_getObjectType();
        (*(void (**)(id, uint64_t, uint64_t))(v37 + 32))(v34, v39, v37);
      }
      swift_unknownObjectRelease();
LABEL_11:
      outlined consume of CollectionDifference<NearbyAdvertisement>.Change();
      outlined consume of CollectionDifference<NearbyAdvertisement>.Change();
      uint64_t v24 = *v9;
      dispatch thunk of Collection.endIndex.getter();
      if (v24 == v11[10]) {
        goto LABEL_3;
      }
    }
  }
  uint64_t v18 = v0[35];
  uint64_t v17 = v0[36];
  uint64_t v19 = v0[34];
  id v21 = v0[28];
  uint64_t v20 = v0[29];
  uint64_t v22 = v0[27];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 320) = a1;
  swift_task_dealloc();
  return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a3;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  if (v5)
  {
    void v19[4] = a2;
    uint64_t v20 = a3;
    swift_bridgeObjectRetain();
    uint64_t v6 = (long long *)(v4 + 40);
    uint64_t v7 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = *((void *)v6 - 1);
      unint64_t v9 = *(uint64_t (**)(uint64_t))(**((void **)v6 + 1) + 208);
      long long v21 = *v6;
      swift_bridgeObjectRetain();
      uint64_t v10 = swift_retain();
      if (v9(v10))
      {
        uint64_t v22 = v7;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1);
          uint64_t v7 = v22;
        }
        unint64_t v12 = v7[2];
        unint64_t v11 = v7[3];
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          uint64_t v7 = v22;
        }
        _OWORD v7[2] = v12 + 1;
        uint64_t v13 = &v7[3 * v12];
        v13[4] = v8;
        *(_OWORD *)(v13 + 5) = v21;
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      --v5;
    }
    while (v5);
    a1 = swift_bridgeObjectRelease();
    uint64_t v3 = v20;
  }
  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }
  __chkstk_darwin(a1);
  v19[2] = v14;
  unint64_t v15 = (unint64_t)specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, void *))partial apply for closure #2 in closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), (uint64_t)v19, (uint64_t)v7);
  swift_release();
  if ((v15 & 0x8000000000000000) != 0 || (v15 & 0x4000000000000000) != 0)
  {
    unint64_t v18 = swift_bridgeObjectRetain();
    uint64_t v16 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  uint64_t v22 = (void *)v16;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v22);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v3 = v22;
  return result;
}

uint64_t closure #2 in closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  type metadata accessor for NearbyAdvertisement();
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v10 + 152))(&v14, v11);
  void v20[2] = v16;
  v20[3] = v17;
  v20[4] = v18;
  char v21 = v19;
  v20[0] = v14;
  v20[1] = v15;
  char v23 = v19;
  void v22[2] = v16;
  v22[3] = v17;
  v22[4] = v18;
  v22[0] = v14;
  v22[1] = v15;
  outlined retain of IgnoreHashable<IgnoreEquatable<BluetoothScannerDiscoveryEngineDevice>>((uint64_t)v20);
  outlined release of BluetoothScanner.Device(&v14);
  uint64_t result = NearbyAdvertisement.init(scannerID:device:)((uint64_t)v9, v22);
  *a3 = result;
  return result;
}

uint64_t closure #2 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)()
{
  uint64_t v0 = NearbyAdvertisement.identifier.getter();
  uint64_t v2 = v1;
  if (v0 == NearbyAdvertisement.identifier.getter() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = a4;
  void v5[3] = a5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v5[4] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
  v5[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[6] = v7;
  v5[7] = *(void *)(v7 + 64);
  v5[8] = swift_task_alloc();
  v5[9] = swift_task_alloc();
  return _swift_task_switch(closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), 0, 0);
}

uint64_t closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)()
{
  NearbyInvitationServiceBluetoothController.findInvitations(scannerID:for:ignoringDistance:)(v0[3], 1, 0);
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v15 = v6;
  uint64_t v7 = v0[2];
  uint64_t v8 = type metadata accessor for TaskPriority();
  long long v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  v16(v5, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v10 = (v3 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v2, v15);
  *(void *)(v11 + v10) = v7;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), v11);
  swift_release();
  v16(v5, 1, 1, v8);
  unint64_t v12 = (void *)swift_allocObject();
  void v12[2] = 0;
  void v12[3] = 0;
  void v12[4] = v7;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), (uint64_t)v12);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[3] = a4;
  v5[4] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Iterator);
  v5[5] = v6;
  v5[6] = *(void *)(v6 - 8);
  v5[7] = swift_task_alloc();
  return _swift_task_switch(closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), 0, 0);
}

uint64_t closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:);
  uint64_t v2 = *(void *)(v0 + 40);
  return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0, 0, v2);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    if ((*(uint64_t (**)(void))(**(void **)(v0 + 32) + 208))())
    {
      uint64_t v3 = v2;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, uint64_t, uint64_t))(v3 + 32))(v1, ObjectType, v3);
      swift_unknownObjectRelease();
    }

    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v5;
    void *v5 = v0;
    v5[1] = closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:);
    uint64_t v6 = *(void *)(v0 + 40);
    return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0, 0, v6);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>.Iterator);
  void v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
  v4[7] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
  v4[8] = v6;
  v4[9] = *(void *)(v6 - 8);
  v4[10] = swift_task_alloc();
  return _swift_task_switch(closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), 0, 0);
}

uint64_t closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[7];
  NearbyInvitationServiceBluetoothController.lostInvitations()(v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of Any?(v0[7], &demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[9] + 32))(v0[10], v0[7], v0[8]);
    AsyncStream.makeAsyncIterator()();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[11] = v6;
    *uint64_t v6 = v0;
    v6[1] = closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:);
    uint64_t v7 = v0[4];
    return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v7);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return _swift_task_switch(closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    if ((*(uint64_t (**)(void))(**(void **)(v0 + 24) + 208))())
    {
      uint64_t v3 = v2;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, uint64_t, uint64_t))(v3 + 40))(v1, ObjectType, v3);
      swift_unknownObjectRelease();
    }

    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v5;
    void *v5 = v0;
    v5[1] = closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:);
    uint64_t v6 = *(void *)(v0 + 32);
    return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0, 0, v6);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 80);
    unint64_t v9 = *(void *)(v0 + 64);
    (*(void (**)(void, void))(*(void *)(v0 + 40) + 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:)(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v26 = a4;
  uint64_t v28 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.host);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "NearbyInvitationsProviderDataSource scanNearbyEndpoints", v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v16 = v26;
  a3(0);
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v11, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
  unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = 0;
  *((void *)v20 + 3) = 0;
  *((void *)v20 + 4) = v27;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v20[v18], (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  char v21 = v28;
  *(void *)&v20[v19] = v28;
  uint64_t v22 = &v20[(v19 + 15) & 0xFFFFFFFFFFFFFFF8];
  *(void *)uint64_t v22 = a3;
  *((void *)v22 + 1) = v16;
  swift_retain();
  id v23 = v21;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:), (uint64_t)v20);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  void v8[2] = a4;
  uint64_t v9 = type metadata accessor for UUID();
  v8[7] = v9;
  v8[8] = *(void *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:)()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = (void *)v0[4];
  uint64_t v3 = v0[2];
  (*(void (**)(uint64_t, void, void))(v0[8] + 16))(v1, v0[3], v0[7]);
  type metadata accessor for NearbyInvitationScanner();
  uint64_t v4 = (void *)swift_allocObject();
  id v5 = v2;
  swift_retain();
  uint64_t v6 = specialized NearbyInvitationScanner.init(scannerID:configuration:delegate:)(v1, v5, v3, v4);
  swift_release();
  *(void *)(v3 + 72) = v6;
  swift_release();
  uint64_t v7 = *(void *)(v3 + 72);
  if (v7)
  {
    uint64_t v8 = *(void (**)(uint64_t))(*(void *)v7 + 232);
    uint64_t v9 = swift_retain();
    v8(v9);
    swift_release();
  }
  else
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.host);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "NearbyInvitationsProviderDataSource unable to create nearbyInvitationsBrowser", v13, 2u);
      swift_slowDealloc();
    }
    os_log_type_t v14 = (void (*)(void))v0[5];

    lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
    swift_allocError();
    *uint64_t v15 = 3;
    v14();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

void NearbyInvitationsProviderDataSource.stopScanningNearbyInvitations(provider:response:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "NearbyInvitationsProviderDataSource scanNearbyInvitations", v5, 2u);
    swift_slowDealloc();
  }

  id v6 = [objc_allocWithZone((Class)TUFeatureFlags) init];
  unsigned int v7 = [v6 btScanAbstraction];

  if (v7)
  {
    uint64_t v8 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*v1 + 392))(v14);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    *uint64_t v10 = &_swiftEmptyDictionarySingleton;
    v8(v14, 0);
  }
  uint64_t v11 = *(void *)(v1[5]
                  + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService42NearbyInvitationServiceBluetoothController_participantInvitationScan);
  if (v11)
  {
    os_log_type_t v12 = *(void (**)(uint64_t))(*(void *)v11 + 336);
    uint64_t v13 = swift_retain();
    v12(v13);
    swift_release();
  }
}

uint64_t NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)(a1, a2, a3, a4, (uint64_t)&unk_1000F85A0, (uint64_t)partial apply for closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:), (uint64_t)&block_descriptor_74);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8 - 8);
  uint64_t v36 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.host);
  id v11 = a1;
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v35 = a5;
    uint64_t v16 = (void *)v15;
    *(_DWORD *)os_log_type_t v14 = 138412290;
    v40[0] = v11;
    id v17 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v11;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "NearbyInvitationsProviderDataSource requestConnection with %@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    a5 = v35;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Data, Error>);
  swift_allocObject();
  uint64_t v18 = PassthroughSubject.init()();
  uint64_t v19 = NearbyAdvertisement.identifier.getter();
  uint64_t v21 = v20;
  uint64_t v22 = *(uint64_t (**)(void *))(*a2 + 344);
  swift_retain();
  id v23 = (void (*)(void *, void))v22(v40);
  uint64_t v25 = v24;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = *v25;
  uint64_t *v25 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, v19, v21, isUniquelyReferenced_nonNull_native);
  uint64_t *v25 = v39;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23(v40, 0);
  uint64_t v27 = (void *)a2[7];
  uint64_t v28 = NearbyInvitationJoinRequestMetadata.pseudonym.getter();
  (*(void (**)(uint64_t))((swift_isaMask & *v27) + 0x110))(v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = type metadata accessor for TaskPriority();
  uint64_t v30 = (uint64_t)v36;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v36, 1, 1, v29);
  unint64_t v31 = (void *)swift_allocObject();
  _OWORD v31[2] = 0;
  uint64_t v31[3] = 0;
  unsigned char v31[4] = a2;
  v31[5] = v11;
  uint64_t v32 = v38;
  v31[6] = v18;
  v31[7] = v32;
  v31[8] = a5;
  id v33 = v11;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v30, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:), (uint64_t)v31);
  return swift_release();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned char v8[16] = a7;
  v8[17] = a8;
  v8[14] = a5;
  v8[15] = a6;
  v8[13] = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<PassthroughSubject<Data, Error>>);
  v8[18] = v9;
  v8[19] = *(void *)(v9 - 8);
  v8[20] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<PassthroughSubject<Data, Error>>.Iterator);
  v8[21] = v10;
  v8[22] = *(void *)(v10 - 8);
  v8[23] = swift_task_alloc();
  return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:), 0, 0);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)()
{
  id v23 = v0;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[14];
  uint64_t v2 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  swift_retain_n();
  id v3 = v1;
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v8 = v0[13];
  unsigned int v7 = (void *)v0[14];
  if (v6)
  {
    os_log_type_t type = v5;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    v0[10] = v8;
    type metadata accessor for NearbyInvitationsProviderDataSource();
    swift_retain();
    uint64_t v10 = String.init<A>(reflecting:)();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    v0[12] = v7;
    id v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, type, "%s: awating requestConnection with %@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v14 = v0[19];
  uint64_t v13 = v0[20];
  uint64_t v15 = v0[18];
  v0[4] = v0[15];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Data, Error>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<Data, Error> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<Data, Error>);
  Publisher.values.getter();
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  uint64_t v16 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AsyncThrowingPublisher<PassthroughSubject<Data, Error>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<PassthroughSubject<Data, Error>>.Iterator);
  id v17 = (void *)swift_task_alloc();
  v0[25] = v17;
  *id v17 = v0;
  v17[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:);
  uint64_t v18 = v0[21];
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 2, v18, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:);
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *, void);
  void *v15;
  uint64_t (*v16)(void);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  id v23 = v0;
  if (v0[3] >> 60 == 15)
  {
    (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
  }
  else
  {
    uint64_t v20 = v0[2];
    uint64_t v21 = v0[3];
    uint64_t v1 = (void *)v0[14];
    swift_retain_n();
    uint64_t v2 = v1;
    id v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    os_log_type_t v5 = os_log_type_enabled(v3, v4);
    unsigned int v7 = v0[13];
    BOOL v6 = (void *)v0[14];
    if (v5)
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315394;
      v0[7] = v7;
      type metadata accessor for NearbyInvitationsProviderDataSource();
      swift_retain();
      uint64_t v9 = String.init<A>(reflecting:)();
      v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2112;
      v0[9] = v6;
      unint64_t v11 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v6;

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: received requestConnection with %@", (uint8_t *)v8, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    id v12 = v0[22];
    uint64_t v19 = v0[23];
    uint64_t v13 = v0[21];
    uint64_t v14 = (void (*)(void *, void))v0[16];
    NearbyAdvertisement.identifier.getter();
    objc_allocWithZone((Class)type metadata accessor for InvitationBlob());
    outlined copy of Data._Representation(v20, v21);
    uint64_t v15 = (void *)InvitationBlob.init(invitationID:dataBlob:)();
    v14(v15, 0);

    outlined consume of Data?(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v19, v13);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 40) = *(void *)(v0 + 208);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:), 0, 0);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void, uint64_t);
  uint64_t (*v8)(void);
  uint64_t v10;

  (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)id v3 = 138412290;
    swift_errorRetain();
    os_log_type_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "NearbyInvitationsProviderDataSource connection request was denied %@", v3, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  BOOL v6 = v0[26];
  unsigned int v7 = (void (*)(void, uint64_t))v0[16];

  swift_errorRetain();
  v7(0, v6);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)(a1, a2, a3, a4, (uint64_t)&unk_1000F85F0, (uint64_t)partial apply for closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:), (uint64_t)&block_descriptor_80);
}

uint64_t NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v25[0] = a7;
  uint64_t v9 = v7;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v17 - 8);
  uint64_t v27 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(void *)(v9 + 32);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = a1;
  v20[3] = v9;
  v20[4] = a2;
  _OWORD v20[5] = a3;
  v20[6] = a4;
  aBlock[4] = a6;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v25[0];
  uint64_t v21 = _Block_copy(aBlock);
  id v22 = a1;
  swift_retain();
  id v23 = a2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v27);
  return swift_release();
}

void closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)(void *a1, void *a2, void *a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v72 = a5;
  uint64_t v73 = a4;
  unint64_t v70 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v7 - 8);
  uint64_t v69 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v67 = *(void *)(v9 - 8);
  uint64_t v68 = v9;
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWBrowser.Result?);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for NWBrowser.Result();
  uint64_t v75 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v74 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v62 - v25;
  uint64_t v71 = a1;
  NearbyAdvertisement.identifier.getter();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    uint64_t v27 = &demangling cache variable for type metadata for UUID?;
    uint64_t v28 = (uint64_t)v19;
LABEL_10:
    outlined destroy of Any?(v28, v27);
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Log.client);
    swift_retain_n();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v76 = (uint64_t)a2;
      uint64_t v77 = v39;
      *(_DWORD *)uint64_t v38 = 136315138;
      type metadata accessor for NearbyInvitationsProviderDataSource();
      swift_retain();
      uint64_t v40 = String.init<A>(reflecting:)();
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s: Received no scannerID in connection request", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    return;
  }
  uint64_t v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(v26, v19, v20);
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(*a2 + 352))(v29);
  if (*(void *)(v30 + 16))
  {
    unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26);
    uint64_t v32 = v75;
    if (v33)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v75 + 16))(v14, *(void *)(v30 + 56) + *(void *)(v75 + 72) * v31, v15);
      uint64_t v34 = 0;
    }
    else
    {
      uint64_t v34 = 1;
    }
  }
  else
  {
    uint64_t v34 = 1;
    uint64_t v32 = v75;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v14, v34, 1, v15);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v14, 1, v15) == 1)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v20);
    uint64_t v27 = &demangling cache variable for type metadata for NWBrowser.Result?;
    uint64_t v28 = (uint64_t)v14;
    goto LABEL_10;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v74, v14, v15);
  uint64_t v42 = a2[9];
  if (v42)
  {
    uint64_t v43 = one-time initialization token for host;
    swift_retain();
    if (v43 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Log.host);
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v24, v26, v20);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      os_log_t v65 = v45;
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      uint64_t v77 = v64;
      int v63 = v47;
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v66 = (void (*)(char *, uint64_t))(v47 + 4);
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v66 = *(void (**)(char *, uint64_t))(v21 + 8);
      v66(v24, v20);
      uint64_t v45 = v65;
      _os_log_impl((void *)&_mh_execute_header, v65, v46, "NearbyInvitationsProviderDataSource connecting to endpoint to %s", v63, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v66 = *(void (**)(char *, uint64_t))(v21 + 8);
      v66(v24, v20);
    }

    uint64_t v54 = v74;
    NWBrowser.Result.endpoint.getter();
    (*(void (**)(char *))(*(void *)v42 + 240))(v11);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v11, v68);
    uint64_t v55 = type metadata accessor for TaskPriority();
    uint64_t v56 = (uint64_t)v69;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v69, 1, 1, v55);
    unint64_t v57 = (void *)swift_allocObject();
    v57[2] = 0;
    v57[3] = 0;
    uint64_t v59 = v70;
    uint64_t v58 = v71;
    v57[4] = v42;
    uint64_t v57[5] = v59;
    v57[6] = v58;
    swift_retain();
    id v60 = v59;
    id v61 = v58;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v56, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:), (uint64_t)v57);
    swift_release();
    v73(0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v54, v15);
    v66(v26, v20);
  }
  else
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Log.host);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "NearbyInvitationsProviderDataSource requestEndpointConnection cannot find nearbyInvitationsBrowser", v53, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v15);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v20);
  }
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v6[6] = a5;
  v6[7] = a6;
  _OWORD v6[5] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>);
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>.Publisher);
  v6[11] = v8;
  v6[12] = *(void *)(v8 - 8);
  v6[13] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator);
  v6[14] = v9;
  v6[15] = *(void *)(v9 - 8);
  v6[16] = swift_task_alloc();
  return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:), 0, 0);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 72);
  (*(void (**)(void))(**(void **)(v0 + 40) + 200))();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Published<[NWConnection]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[NWConnection]>.Publisher);
  Publisher<>.values.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  uint64_t v7 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:);
  uint64_t v9 = *(void *)(v0 + 112);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, v9, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:);
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 152) = *(void *)(v0 + 16);
  return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 24) = *(void *)(v0 + 144);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = v3;
  unint64_t v4 = *(void *)(v3 + 152);
  if (v4)
  {
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      a1 = swift_bridgeObjectRelease();
      if (!v5) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v5) {
        goto LABEL_19;
      }
    }
    uint64_t v30 = *(void (**)(uint64_t))(**(void **)(v3 + 40) + 248);
    if (v5 < 1)
    {
      __break(1u);
      return dispatch thunk of AsyncIteratorProtocol.next()(a1, a2, a3);
    }
    uint64_t v6 = 0;
    unint64_t v28 = *(void *)(v3 + 152) & 0xC000000000000001;
    unint64_t v29 = v4;
    do
    {
      if (v28)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v9 = *(void *)(v4 + 8 * v6 + 32);
        swift_retain();
      }
      uint64_t v10 = v5;
      if (one-time initialization token for client != -1) {
        swift_once();
      }
      uint64_t v11 = *(void **)(v3 + 48);
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Log.client);
      id v13 = v11;
      swift_retain_n();
      id v14 = v13;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      BOOL v17 = os_log_type_enabled(v15, v16);
      uint64_t v18 = *(void **)(v3 + 48);
      if (v17)
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315394;
        uint64_t v20 = NearbyInvitationJoinRequestMetadata.pseudonym.getter();
        *(void *)(v19 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v31);
        swift_bridgeObjectRelease();

        *(_WORD *)(v19 + 12) = 2080;
        *(void *)(v3 + 32) = v9;
        type metadata accessor for NWConnection();
        swift_retain();
        uint64_t v22 = String.init<A>(reflecting:)();
        *(void *)(v19 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v31);
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "NearbyInvitationsProviderDataSource Sending pre-lmi data %s to %s", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }

      ++v6;
      uint64_t v7 = NearbyInvitationJoinRequestMetadata.pseudonym.getter();
      v30(v7);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v5 = v10;
      BOOL v8 = v10 == v6;
      unint64_t v4 = v29;
    }
    while (!v8);
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v26 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator);
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v3 + 136) = v27;
    *uint64_t v27 = v3;
    v27[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:);
    a2 = *(void *)(v3 + 112);
    a1 = v3 + 16;
    a3 = v26;
    return dispatch thunk of AsyncIteratorProtocol.next()(a1, a2, a3);
  }
  (*(void (**)(void, void))(*(void *)(v3 + 120) + 8))(*(void *)(v3 + 128), *(void *)(v3 + 112));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v3 + 8);
  return v24();
}

uint64_t NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  id v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(void *)(v4 + 32);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v4;
  v15[3] = a1;
  v15[4] = a2;
  _OWORD v15[5] = a3;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:);
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_86;
  os_log_type_t v16 = _Block_copy(aBlock);
  swift_retain();
  id v17 = a1;
  outlined copy of Data._Representation(a2, a3);
  static DispatchQoS.unspecified.getter();
  unint64_t v21 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  return swift_release();
}

void closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.host);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "NearbyInvitationsProviderDataSource approveConnectionRequest", v14, 2u);
    swift_slowDealloc();
  }

  id v15 = [objc_allocWithZone((Class)CPFeatureFlags) init];
  unsigned int v16 = [v15 wranglerHomePodBoopEnabled];

  if (v16)
  {
    uint64_t v17 = *(void *)(a1 + 80);
    if (v17)
    {
      uint64_t v18 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v10, 1, 1, v18);
      uint64_t v19 = (void *)swift_allocObject();
      void v19[2] = 0;
      v19[3] = 0;
      void v19[4] = v17;
      void v19[5] = a2;
      v19[6] = a3;
      v19[7] = a4;
      swift_retain();
      id v20 = a2;
      outlined copy of Data._Representation(a3, a4);
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:), (uint64_t)v19);
      swift_release();
    }
    else
    {
      os_log_t v28 = (os_log_t)Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v24, "NearbyInvitationsProviderDataSource nearbyInvitationsListener is nil", v25, 2u);
        swift_slowDealloc();
      }
      os_log_t v26 = v28;
    }
  }
  else
  {
    NearbyAdvertisement.handle.getter();
    if (v21)
    {
      uint64_t v22 = *(void **)(a1 + 56);
      uint64_t v23 = NearbyAdvertisement.identifier.getter();
      (*(void (**)(uint64_t))((swift_isaMask & *v22) + 0xF8))(v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _OWORD v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>);
  v7[8] = v8;
  v7[9] = *(void *)(v8 - 8);
  v7[10] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>.Publisher);
  v7[11] = v9;
  v7[12] = *(void *)(v9 - 8);
  v7[13] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator);
  v7[14] = v10;
  v7[15] = *(void *)(v10 - 8);
  v7[16] = swift_task_alloc();
  return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:), 0, 0);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 72);
  (*(void (**)(void))(**(void **)(v0 + 32) + 184))();
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Published<[NWConnection]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[NWConnection]>.Publisher);
  Publisher<>.values.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  uint64_t v7 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:);
  uint64_t v9 = *(void *)(v0 + 112);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, v9, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:);
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 152) = *(void *)(v0 + 16);
  return _swift_task_switch(closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:), 0, 0);
}

uint64_t closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3[19];
  if (v4)
  {
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      a1 = swift_bridgeObjectRelease();
      if (!v5) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v5) {
        goto LABEL_14;
      }
    }
    if (v5 < 1)
    {
      __break(1u);
      return dispatch thunk of AsyncIteratorProtocol.next()(a1, a2, a3);
    }
    uint64_t v6 = 0;
    unint64_t v17 = v3[19] & 0xC000000000000001;
    unint64_t v7 = v4;
    do
    {
      if (v17)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v8 = *(void *)(v4 + 8 * v6 + 32);
        swift_retain();
      }
      uint64_t v10 = v3[6];
      unint64_t v9 = v3[7];
      ++v6;
      uint64_t v11 = NearbyAdvertisement.identifier.getter();
      NearbyInvitationAdvertiser.approveConnectionRequest(id:localInvitation:connection:)(v11, v12, v10, v9, v8);
      swift_bridgeObjectRelease();
      swift_release();
      unint64_t v4 = v7;
    }
    while (v5 != v6);
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v15 = lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<[NWConnection]>.Publisher>.Iterator);
    unsigned int v16 = (void *)swift_task_alloc();
    v3[17] = v16;
    *unsigned int v16 = v3;
    v16[1] = closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:);
    a2 = v3[14];
    a1 = (uint64_t)(v3 + 2);
    a3 = v15;
    return dispatch thunk of AsyncIteratorProtocol.next()(a1, a2, a3);
  }
  (*(void (**)(void, void))(v3[15] + 8))(v3[16], v3[14]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v13 = (uint64_t (*)(void))v3[1];
  return v13();
}

uint64_t NearbyInvitationsProviderDataSource.denyConnectionRequest(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)(v1 + 32);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = v1;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsProviderDataSource.denyConnectionRequest(_:);
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_92;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.denyConnectionRequest(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = NearbyAdvertisement.handle.getter();
  if (v4)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.host);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "NearbyInvitationsProviderDataSource denyConnectionRequest", v8, 2u);
      swift_slowDealloc();
    }

    uint64_t v9 = *(void **)(a2 + 56);
    uint64_t v10 = NearbyAdvertisement.identifier.getter();
    (*(void (**)(uint64_t))((swift_isaMask & *v9) + 0xF0))(v10);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall NearbyInvitationsProviderDataSource.didUpdateGroups(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = v2[4];
  uint64_t v12 = (Swift::OpaquePointer *)swift_allocObject();
  v12[2]._rawValue = v2;
  v12[3]._rawValue = a1._rawValue;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsProviderDataSource.didUpdateGroups(_:);
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_98;
  id v13 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v14[1] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.didUpdateGroups(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 208))();
  if (result)
  {
    uint64_t v5 = v4;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(a2, ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  return result;
}

id *NearbyInvitationsProviderDataSource.deinit()
{
  outlined destroy of weak PeerConnectionDelegate?((uint64_t)(v0 + 2));

  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = (char *)v0
     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService35NearbyInvitationsProviderDataSource__dataReceived;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NearbyInvitationsProviderDataSource.__deallocating_deinit()
{
  NearbyInvitationsProviderDataSource.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for NearbyInvitationsProvider.generateNearbyInvitation(provider:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 512))();
}

uint64_t protocol witness for NearbyInvitationsProvider.advertiseNearbyInvitation(_:provider:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 520))();
}

uint64_t protocol witness for NearbyInvitationsProvider.stopAdvertisingNearbyInvitation(_:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 536))();
}

uint64_t protocol witness for NearbyInvitationsProvider.scanNearbyInvitations(scannerID:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 584))();
}

uint64_t protocol witness for NearbyInvitationsProvider.scanNearbyEndpoints(params:scannerID:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 592))();
}

uint64_t protocol witness for NearbyInvitationsProvider.stopScanningNearbyInvitations(provider:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 600))();
}

uint64_t protocol witness for NearbyInvitationsProvider.requestConnection(with:localInvitation:response:) in conformance NearbyInvitationsProviderDataSource()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 608))();
}

void NearbyInvitationsProviderDataSource.serviceController(_:didReceiveConnection:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 48) = a4;
  *(void *)(v5 + 56) = a5;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:)()
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v1._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  id v2 = [self mainBundle];
  id v3 = [v2 bundleIdentifier];

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v4 = dispatch thunk of ABCReporter.signature(subType:context:process:)();
  v0[8] = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
  {
    id v13 = (uint64_t (*)(uint64_t, __n128))((char *)&async function pointer to dispatch thunk of ABCReporter.report(with:duration:)
                                                  + async function pointer to dispatch thunk of ABCReporter.report(with:duration:));
    uint64_t v5 = (void *)swift_task_alloc();
    v0[9] = v5;
    void *v5 = v0;
    v5[1] = closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:);
    v6.n128_u64[0] = 0;
    return v13(v4, v6);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.abcReporter);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to generate signature for session unsuspend failure", v11, 2u);
      swift_slowDealloc();
    }

    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  id v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t NearbyInvitationsProviderDataSource.serviceController(_:didReceiveConnection:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return specialized NearbyInvitationsProviderDataSource.serviceController(_:didReceiveConnection:)(a3);
}

void NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t NearbyInvitationsProviderDataSource.connectionChanged(added:endpoint:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWBrowser.Result?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v9 - 8);
  uint64_t v44 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v38 - v16;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.host);
  id v19 = a1;
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  id v45 = v19;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v43 = v3;
    os_log_type_t v24 = (uint8_t *)v23;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v42 = v12;
    uint64_t v39 = (void *)v25;
    uint64_t v40 = v15;
    *(_DWORD *)os_log_type_t v24 = 138412290;
    v46[0] = v45;
    id v26 = v45;
    uint64_t v41 = a2;
    id v27 = v26;
    id v28 = v45;
    uint64_t v15 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v39 = v28;

    a2 = v41;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "NearbyInvitationsProviderDataSource is adding connection from delegate %@)", v24, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v12 = v42;
    swift_slowDealloc();
    uint64_t v3 = v43;
    swift_slowDealloc();
  }
  else
  {
  }
  NearbyAdvertisement.identifier.getter();
  uint64_t v29 = (uint64_t)v44;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v29, 1, v11) == 1) {
    return outlined destroy of Any?(v29, &demangling cache variable for type metadata for UUID?);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v17, v29, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  uint64_t v31 = type metadata accessor for NWBrowser.Result();
  uint64_t v32 = *(void *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v8, a2, v31);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v8, 0, 1, v31);
  uint64_t v33 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v3 + 368))(v46);
  specialized Dictionary.subscript.setter((uint64_t)v8, (uint64_t)v15);
  uint64_t v34 = v33(v46, 0);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 208))(v34))
  {
    uint64_t v36 = v35;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(id, uint64_t, uint64_t))(v36 + 32))(v45, ObjectType, v36);
    swift_unknownObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
}

uint64_t NearbyInvitationsProviderDataSource.connectionChanged(removed:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWBrowser.Result?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v39 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v40 = (char *)&v34 - v12;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.host);
  id v14 = a1;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v37 = v8;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v41 = (uint64_t)v14;
    v42[0] = v19;
    uint64_t v35 = v4;
    uint64_t v36 = v9;
    *(_DWORD *)uint64_t v18 = 136315138;
    type metadata accessor for NearbyAdvertisement();
    id v20 = v14;
    uint64_t v21 = String.init<A>(reflecting:)();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v42);
    uint64_t v4 = v35;
    uint64_t v9 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "NearbyInvitationsProviderDataSource is removing connection from delegate %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v8 = v37;
    swift_slowDealloc();
  }
  else
  {
  }
  NearbyAdvertisement.identifier.getter();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
  }
  id v24 = v14;
  uint64_t v25 = v40;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v40, v7, v8);
  uint64_t v26 = (uint64_t)v39;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v39, v25, v8);
  uint64_t v27 = type metadata accessor for NWBrowser.Result();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v4, 1, 1, v27);
  uint64_t v28 = v38;
  uint64_t v29 = (uint64_t (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v38 + 368))(v42);
  specialized Dictionary.subscript.setter((uint64_t)v4, v26);
  uint64_t v30 = v29(v42, 0);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v28 + 208))(v30))
  {
    uint64_t v32 = v31;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(id, uint64_t, uint64_t))(v32 + 40))(v24, ObjectType, v32);
    swift_unknownObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v40, v8);
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  Swift::Int v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_151;
    }
    if (v4) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, v3);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_159;
  }
  Swift::Int v118 = result;
  id v115 = v3;
  if (v4 < 2)
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    uint64_t v128 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
LABEL_117:
      if (v13 >= 2)
      {
        uint64_t v108 = *v115;
        do
        {
          unint64_t v109 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_146;
          }
          if (!v108) {
            goto LABEL_158;
          }
          uint64_t v110 = *(void *)&v10[16 * v109 + 32];
          uint64_t v111 = *(void *)&v10[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v108 + 8 * v110), (id *)(v108 + 8 * *(void *)&v10[16 * v13 + 16]), (id *)(v108 + 8 * v111), __dst);
          if (v2) {
            break;
          }
          if (v111 < v110) {
            goto LABEL_147;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
          }
          if (v109 >= *((void *)v10 + 2)) {
            goto LABEL_148;
          }
          uint64_t v112 = &v10[16 * v109 + 32];
          *(void *)uint64_t v112 = v110;
          *((void *)v112 + 1) = v111;
          unint64_t v113 = *((void *)v10 + 2);
          if (v13 > v113) {
            goto LABEL_149;
          }
          memmove(&v10[16 * v13 + 16], &v10[16 * v13 + 32], 16 * (v113 - v13));
          *((void *)v10 + 2) = v113 - 1;
          unint64_t v13 = v113 - 1;
        }
        while (v113 > 2);
      }
LABEL_128:
      swift_bridgeObjectRelease();
      *(void *)((v128 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v3;
    uint64_t v8 = v6 >> 1;
    type metadata accessor for NearbyAdvertisement();
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v3 = v7;
    __dst = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v128 = v9;
  }
  Swift::Int v11 = 0;
  uint64_t v12 = *v3;
  uint64_t v116 = *v3 + 16;
  uint64_t v117 = *v3 - 8;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v122 = v4;
  uint64_t v127 = *v3;
  while (2)
  {
    Swift::Int v14 = v11++;
    if (v11 >= v4) {
      goto LABEL_45;
    }
    uint64_t v15 = v2;
    os_log_type_t v16 = *(void **)(v12 + 8 * v11);
    uint64_t v17 = *(void **)(v12 + 8 * v14);
    id v18 = v16;
    id v19 = v17;
    uint64_t v20 = NearbyAdvertisement.identifier.getter();
    uint64_t v22 = v21;
    if (NearbyAdvertisement.identifier.getter() == v20 && v23 == v22) {
      int v124 = 0;
    }
    else {
      int v124 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    Swift::Int v11 = v14 + 2;
    Swift::Int v4 = v122;
    if (v14 + 2 >= v122) {
      goto LABEL_36;
    }
    Swift::Int v25 = v14;
    uint64_t v26 = v10;
    Swift::Int v120 = v25;
    uint64_t v27 = (id *)(v116 + 8 * v25);
    while (1)
    {
      uint64_t v29 = *(v27 - 1);
      id v30 = *v27;
      id v31 = v29;
      uint64_t v32 = NearbyAdvertisement.identifier.getter();
      uint64_t v34 = v33;
      if (NearbyAdvertisement.identifier.getter() == v32 && v35 == v34)
      {

        swift_bridgeObjectRelease_n();
        if (v124)
        {
          uint64_t v2 = v15;
          uint64_t v10 = v26;
          Swift::Int v14 = v120;
          Swift::Int v4 = v122;
          uint64_t v12 = v127;
          goto LABEL_37;
        }
        goto LABEL_25;
      }
      int v28 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v124 ^ v28)) {
        break;
      }
LABEL_25:
      ++v11;
      ++v27;
      Swift::Int v4 = v122;
      if (v122 == v11)
      {
        Swift::Int v11 = v122;
        uint64_t v10 = v26;
        goto LABEL_35;
      }
    }
    uint64_t v10 = v26;
    Swift::Int v4 = v122;
LABEL_35:
    Swift::Int v14 = v120;
LABEL_36:
    uint64_t v2 = v15;
    uint64_t v12 = v127;
    if (v124)
    {
LABEL_37:
      if (v11 < v14) {
        goto LABEL_152;
      }
      if (v14 < v11)
      {
        uint64_t v37 = (uint64_t *)(v117 + 8 * v11);
        Swift::Int v38 = v11;
        Swift::Int v39 = v14;
        uint64_t v40 = (uint64_t *)(v12 + 8 * v14);
        do
        {
          if (v39 != --v38)
          {
            if (!v12) {
              goto LABEL_157;
            }
            uint64_t v41 = *v40;
            uint64_t *v40 = *v37;
            uint64_t *v37 = v41;
          }
          ++v39;
          --v37;
          ++v40;
        }
        while (v39 < v38);
      }
    }
LABEL_45:
    if (v11 >= v4) {
      goto LABEL_68;
    }
    if (__OFSUB__(v11, v14)) {
      goto LABEL_150;
    }
    if (v11 - v14 >= v118)
    {
LABEL_68:
      if (v11 < v14) {
        goto LABEL_145;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
      }
      unint64_t v58 = *((void *)v10 + 2);
      unint64_t v57 = *((void *)v10 + 3);
      unint64_t v13 = v58 + 1;
      uint64_t v12 = v127;
      if (v58 >= v57 >> 1)
      {
        uint64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v10);
        uint64_t v12 = v127;
        uint64_t v10 = v107;
      }
      uint64_t v126 = v2;
      *((void *)v10 + 2) = v13;
      uint64_t v59 = v10 + 32;
      id v60 = &v10[16 * v58 + 32];
      *(void *)id v60 = v14;
      *((void *)v60 + 1) = v11;
      if (!v58)
      {
        unint64_t v13 = 1;
LABEL_14:
        Swift::Int v4 = v122;
        uint64_t v2 = v126;
        if (v11 >= v122) {
          goto LABEL_117;
        }
        continue;
      }
      while (1)
      {
        unint64_t v61 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v66 = &v59[16 * v13];
          uint64_t v67 = *((void *)v66 - 8);
          uint64_t v68 = *((void *)v66 - 7);
          BOOL v72 = __OFSUB__(v68, v67);
          uint64_t v69 = v68 - v67;
          if (v72) {
            goto LABEL_134;
          }
          uint64_t v71 = *((void *)v66 - 6);
          uint64_t v70 = *((void *)v66 - 5);
          BOOL v72 = __OFSUB__(v70, v71);
          uint64_t v64 = v70 - v71;
          char v65 = v72;
          if (v72) {
            goto LABEL_135;
          }
          unint64_t v73 = v13 - 2;
          uint64_t v74 = &v59[16 * v13 - 32];
          uint64_t v76 = *(void *)v74;
          uint64_t v75 = *((void *)v74 + 1);
          BOOL v72 = __OFSUB__(v75, v76);
          uint64_t v77 = v75 - v76;
          if (v72) {
            goto LABEL_137;
          }
          BOOL v72 = __OFADD__(v64, v77);
          uint64_t v78 = v64 + v77;
          if (v72) {
            goto LABEL_140;
          }
          if (v78 >= v69)
          {
            uint64_t v96 = &v59[16 * v61];
            uint64_t v98 = *(void *)v96;
            uint64_t v97 = *((void *)v96 + 1);
            BOOL v72 = __OFSUB__(v97, v98);
            uint64_t v99 = v97 - v98;
            if (v72) {
              goto LABEL_144;
            }
            BOOL v89 = v64 < v99;
            goto LABEL_105;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v90 = *((void *)v10 + 4);
            uint64_t v91 = *((void *)v10 + 5);
            BOOL v72 = __OFSUB__(v91, v90);
            uint64_t v83 = v91 - v90;
            char v84 = v72;
            goto LABEL_99;
          }
          uint64_t v63 = *((void *)v10 + 4);
          uint64_t v62 = *((void *)v10 + 5);
          BOOL v72 = __OFSUB__(v62, v63);
          uint64_t v64 = v62 - v63;
          char v65 = v72;
        }
        if (v65) {
          goto LABEL_136;
        }
        unint64_t v73 = v13 - 2;
        unint64_t v79 = &v59[16 * v13 - 32];
        uint64_t v81 = *(void *)v79;
        uint64_t v80 = *((void *)v79 + 1);
        BOOL v82 = __OFSUB__(v80, v81);
        uint64_t v83 = v80 - v81;
        char v84 = v82;
        if (v82) {
          goto LABEL_139;
        }
        uint64_t v85 = &v59[16 * v61];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        BOOL v72 = __OFSUB__(v86, v87);
        uint64_t v88 = v86 - v87;
        if (v72) {
          goto LABEL_142;
        }
        if (__OFADD__(v83, v88)) {
          goto LABEL_143;
        }
        if (v83 + v88 >= v64)
        {
          BOOL v89 = v64 < v88;
LABEL_105:
          if (v89) {
            unint64_t v61 = v73;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v84) {
          goto LABEL_138;
        }
        uint64_t v92 = &v59[16 * v61];
        uint64_t v94 = *(void *)v92;
        uint64_t v93 = *((void *)v92 + 1);
        BOOL v72 = __OFSUB__(v93, v94);
        uint64_t v95 = v93 - v94;
        if (v72) {
          goto LABEL_141;
        }
        if (v95 < v83) {
          goto LABEL_14;
        }
LABEL_107:
        unint64_t v100 = v61 - 1;
        if (v61 - 1 >= v13)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v12) {
          goto LABEL_156;
        }
        id v101 = v10;
        v102 = &v59[16 * v100];
        uint64_t v103 = *(void *)v102;
        uint64_t v104 = &v59[16 * v61];
        uint64_t v105 = *((void *)v104 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v12 + 8 * *(void *)v102), (id *)(v12 + 8 * *(void *)v104), (id *)(v12 + 8 * v105), __dst);
        if (v126) {
          goto LABEL_128;
        }
        if (v105 < v103) {
          goto LABEL_131;
        }
        if (v61 > *((void *)v101 + 2)) {
          goto LABEL_132;
        }
        *(void *)v102 = v103;
        *(void *)&v59[16 * v100 + 8] = v105;
        unint64_t v106 = *((void *)v101 + 2);
        if (v61 >= v106) {
          goto LABEL_133;
        }
        uint64_t v10 = v101;
        unint64_t v13 = v106 - 1;
        memmove(&v59[16 * v61], v104 + 16, 16 * (v106 - 1 - v61));
        *((void *)v101 + 2) = v106 - 1;
        uint64_t v12 = v127;
        if (v106 <= 2) {
          goto LABEL_14;
        }
      }
    }
    break;
  }
  if (__OFADD__(v14, v118)) {
    goto LABEL_153;
  }
  if (v14 + v118 >= v4) {
    Swift::Int v42 = v4;
  }
  else {
    Swift::Int v42 = v14 + v118;
  }
  if (v42 >= v14)
  {
    if (v11 != v42)
    {
      Swift::Int v119 = v42;
      Swift::Int v121 = v14;
      id v114 = v10;
      uint64_t v125 = v2;
      uint64_t v43 = v117 + 8 * v11;
      do
      {
        uint64_t v44 = *(void **)(v12 + 8 * v11);
        Swift::Int v45 = v121;
        uint64_t v46 = v43;
        while (1)
        {
          uint64_t v47 = *(void **)v46;
          id v48 = v44;
          id v49 = v47;
          uint64_t v50 = NearbyAdvertisement.identifier.getter();
          uint64_t v52 = v51;
          if (NearbyAdvertisement.identifier.getter() == v50 && v53 == v52) {
            break;
          }
          char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v55 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v12 = v127;
          if (!v127) {
            goto LABEL_155;
          }
          uint64_t v56 = *(void **)v46;
          uint64_t v44 = *(void **)(v46 + 8);
          *(void *)uint64_t v46 = v44;
          *(void *)(v46 + 8) = v56;
          v46 -= 8;
          if (v11 == ++v45) {
            goto LABEL_57;
          }
        }

        swift_bridgeObjectRelease_n();
LABEL_56:
        uint64_t v12 = v127;
LABEL_57:
        ++v11;
        v43 += 8;
      }
      while (v11 != v119);
      Swift::Int v11 = v119;
      uint64_t v2 = v125;
      uint64_t v10 = v114;
      Swift::Int v14 = v121;
    }
    goto LABEL_68;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v20 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
LABEL_6:
    uint64_t v7 = *(void **)(v5 + 8 * v4);
    uint64_t v8 = v20;
    uint64_t v21 = v6;
    while (1)
    {
      uint64_t v9 = *(void **)v6;
      id v10 = v7;
      id v11 = v9;
      uint64_t v12 = NearbyAdvertisement.identifier.getter();
      uint64_t v14 = v13;
      if (NearbyAdvertisement.identifier.getter() == v12 && v15 == v14)
      {

        Swift::Int result = swift_bridgeObjectRelease_n();
LABEL_5:
        ++v4;
        uint64_t v6 = v21 + 8;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      id v18 = *(void **)v6;
      uint64_t v7 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + 8) = v18;
      v6 -= 8;
      if (v4 == ++v8) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(id *a1, id *__src, id *a3, char *__dst)
{
  uint64_t v5 = a3;
  uint64_t v6 = __src;
  uint64_t v7 = (char *)__src - (char *)a1;
  uint64_t v8 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0) {
    uint64_t v8 = (char *)__src - (char *)a1;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = (char *)a3 - (char *)__src;
  uint64_t v11 = (char *)a3 - (char *)__src + 7;
  if ((char *)a3 - (char *)__src >= 0) {
    uint64_t v11 = (char *)a3 - (char *)__src;
  }
  uint64_t v12 = v11 >> 3;
  Swift::Int v45 = a1;
  uint64_t v44 = (void **)__dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7) {
      goto LABEL_54;
    }
    if (__dst != (char *)__src || &__src[v12] <= (id *)__dst) {
      memmove(__dst, __src, 8 * v12);
    }
    Swift::Int v39 = __dst;
    uint64_t v26 = (id *)&__dst[8 * v12];
    uint64_t v43 = (char *)v26;
    Swift::Int v45 = v6;
    if (a1 >= v6 || v10 < 8)
    {
LABEL_53:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v45, (const void **)&v44, &v43);
      return 1;
    }
    uint64_t v27 = v6;
    while (1)
    {
      Swift::Int v42 = v5;
      int v28 = *--v27;
      id v29 = *(v26 - 1);
      id v30 = v28;
      uint64_t v31 = NearbyAdvertisement.identifier.getter();
      uint64_t v33 = v32;
      if (NearbyAdvertisement.identifier.getter() == v31 && v34 == v33) {
        break;
      }
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = (char *)v42;
      uint64_t v5 = v42 - 1;
      if ((v36 & 1) == 0) {
        goto LABEL_46;
      }
      if (v42 != v6 || v5 >= v6) {
        id *v5 = *v27;
      }
      Swift::Int v45 = v27;
LABEL_51:
      if (v27 > a1)
      {
        uint64_t v6 = v27;
        if (v26 > (id *)v39) {
          continue;
        }
      }
      goto LABEL_53;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v37 = (char *)v42;
    uint64_t v5 = v42 - 1;
LABEL_46:
    uint64_t v43 = (char *)(v26 - 1);
    if (v37 < (char *)v26 || v5 >= v26 || v37 != (char *)v26) {
      id *v5 = *(v26 - 1);
    }
    uint64_t v27 = v6;
    --v26;
    goto LABEL_51;
  }
  if (v7 >= -7)
  {
    if (__dst != (char *)a1 || &a1[v9] <= (id *)__dst) {
      memmove(__dst, a1, 8 * v9);
    }
    uint64_t v41 = (void **)&__dst[8 * v9];
    uint64_t v43 = (char *)v41;
    if (v6 < v5 && v7 >= 8)
    {
      uint64_t v13 = (void **)__dst;
      uint64_t v14 = a1;
      while (1)
      {
        uint64_t v15 = v5;
        os_log_type_t v16 = *v13;
        id v17 = *v6;
        id v18 = v16;
        uint64_t v19 = NearbyAdvertisement.identifier.getter();
        uint64_t v21 = v20;
        if (NearbyAdvertisement.identifier.getter() == v19 && v22 == v21) {
          break;
        }
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v24 & 1) == 0) {
          goto LABEL_23;
        }
        Swift::Int v25 = v6 + 1;
        uint64_t v5 = v15;
        if (v14 < v6 || v14 >= v25 || v14 != v6) {
          *uint64_t v14 = *v6;
        }
LABEL_26:
        ++v14;
        if (v13 < v41)
        {
          uint64_t v6 = v25;
          if (v25 < v5) {
            continue;
          }
        }
        Swift::Int v45 = v14;
        goto LABEL_53;
      }

      swift_bridgeObjectRelease_n();
LABEL_23:
      uint64_t v5 = v15;
      if (v14 != v13) {
        *uint64_t v14 = *v13;
      }
      uint64_t v44 = ++v13;
      Swift::Int v25 = v6;
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_54:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

id specialized NearbyIDSServiceController.init(queue:service:delegate:joinRequestsController:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char *a6)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSService);
  v32[4] = &protocol witness table for IDSService;
  v32[0] = a2;
  uint64_t v14 = &a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_delegate];
  *(void *)&a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = &a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_firewall];
  *((void *)v15 + 4) = 0;
  *(_OWORD *)uint64_t v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *(void *)&a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_requesterCredentialsByOwnerPseudonym] = &_swiftEmptyDictionarySingleton;
  *(void *)&a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController____lazy_storage___contactStore] = 0;
  swift_beginAccess();
  *((void *)v14 + 1) = a4;
  swift_unknownObjectWeakAssign();
  outlined init with copy of PseudonymProtocol((uint64_t)v32, (uint64_t)&a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_service]);
  *(void *)&a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_queue] = a1;
  *(void *)&a6[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyIDSServiceController_joinRequestsController] = a5;
  os_log_type_t v16 = (objc_class *)type metadata accessor for NearbyIDSServiceController();
  v31.receiver = a6;
  v31.super_class = v16;
  id v17 = a1;
  id v18 = a5;
  id v19 = objc_msgSendSuper2(&v31, "init");
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v13, 1, 1, v20);
  outlined init with copy of PseudonymProtocol((uint64_t)v32, (uint64_t)v30);
  uint64_t v21 = (void *)swift_allocObject();
  void v21[2] = 0;
  uint64_t v21[3] = 0;
  uint64_t v21[4] = v19;
  outlined init with take of PseudonymProtocol(v30, (uint64_t)(v21 + 5));
  id v22 = v19;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyIDSServiceController.init(queue:service:delegate:joinRequestsController:), (uint64_t)v21);
  swift_release();
  id v23 = [objc_allocWithZone((Class)IDSServiceDelegateProperties) init];
  [v23 setWantsCrossAccountMessaging:1];
  char v24 = (void *)v32[0];
  id v25 = v17;
  id v26 = v22;
  id v27 = v23;
  [v24 addDelegate:v26 withDelegateProperties:v27 queue:v25];

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v32);
  return v26;
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.init()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.init()(a1, v4, v5, v6);
}

uint64_t sub_10008DA78()
{
  return objectdestroy_5Tm(72);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.createGroup(with:response:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10008DB5C()
{
  return objectdestroy_5Tm(64);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_10008DC38()
{
  swift_release();

  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)()
{
  return partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)((uint64_t (*)(void, void, void, void, void))closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_10008DCB8()
{
  swift_release();

  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.reject(pendingMember:completion:)()
{
  return closure #1 in NearbyInvitationsProviderDataSource.reject(pendingMember:completion:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(void *)(v3 + 144) = v2;
  *(_OWORD *)(v3 + 128) = v4;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.generateNearbyInvitation(provider:response:), 0, 0);
}

uint64_t sub_10008DDC4()
{
  return objectdestroy_5Tm(64);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbyInvitation(_:provider:response:), 0, 0);
}

uint64_t specialized closure #1 in closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)result + 168))(result);
    (*(void (**)(uint64_t))(*(void *)v1 + 176))(v2);
    return swift_release();
  }
  return result;
}

uint64_t specialized BluetoothScanner.init(discoveryEngine:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[BluetoothScanner.Device]>);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner__devices;
  v26[1] = _swiftEmptyArrayStorage;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BluetoothScanner.Device]);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v11, v10, v7);
  *(void *)(a2 + 16) = a1;
  *(void *)(a2 + 24) = &protocol witness table for CBDiscovery;
  id v12 = a1;
  [v12 setBleScanRate:20];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 24) = &protocol witness table for CBDiscovery;
  swift_unknownObjectWeakInit();
  type metadata accessor for AssertionManager();
  uint64_t v14 = (void *)swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  void v14[4] = Lock.init()();
  v14[5] = 0;
  void v14[2] = partial apply for closure #1 in BluetoothScanner.init(discoveryEngine:);
  v14[3] = v13;
  *(void *)(a2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService16BluetoothScanner_maxScanAssertion) = v14;
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  id v18 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v15 + 96);
  swift_unknownObjectRetain();
  swift_retain();
  v18(partial apply for closure #2 in BluetoothScanner.init(discoveryEngine:), v17, ObjectType, v15);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v19 = *(void *)(a2 + 24);
  uint64_t v20 = swift_getObjectType();
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  id v22 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v19 + 72);
  swift_unknownObjectRetain();
  swift_retain();
  v22(partial apply for closure #3 in BluetoothScanner.init(discoveryEngine:), v21, v20, v19);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v6, 1, 1, v23);
  char v24 = (void *)swift_allocObject();
  v24[2] = 0;
  uint64_t v24[3] = 0;
  unsigned char v24[4] = a2;
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #4 in BluetoothScanner.init(discoveryEngine:), (uint64_t)v24);
  swift_release();

  return a2;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void specialized NearbyInvitationsProviderDataSource.receivedMessage(content:message:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequestData?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for InvitationRequestData();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.host);
  outlined copy of Data?(a1, a2);
  outlined copy of Data?(a1, a2);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  unint64_t v16 = a2 >> 60;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v27 = v3;
    uint64_t v29 = v10;
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    unint64_t v26 = a2 >> 60;
    int v28 = v12;
    if (a2 >> 60 == 15)
    {
      unint64_t v18 = 0xE300000000000000;
      uint64_t v19 = 7104878;
    }
    else
    {
      uint64_t v30 = a1;
      unint64_t v31 = a2;
      outlined copy of Data._Representation(a1, a2);
      uint64_t v19 = String.init<A>(reflecting:)();
      unint64_t v18 = v20;
    }
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data?(a1, a2);
    outlined consume of Data?(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "NearbyInvitationsProviderDataSource is getting data from delegate %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v12 = v28;
    uint64_t v10 = v29;
    unint64_t v16 = v26;
    uint64_t v3 = v27;
  }
  else
  {
    outlined consume of Data?(a1, a2);
    outlined consume of Data?(a1, a2);
  }
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  if (v16 > 0xE)
  {
    __break(1u);
  }
  else
  {
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData, (void (*)(uint64_t))&type metadata accessor for InvitationRequestData);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    type metadata accessor for InvitationJoinResponse();
    InvitationRequestData.id.getter();
    uint64_t v21 = (void *)static InvitationJoinResponse.approved(sessionIdentifier:memberHandles:userInfo:)();
    uint64_t v22 = swift_bridgeObjectRelease();
    if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 208))(v22))
    {
      uint64_t v24 = v23;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, uint64_t, uint64_t))(v24 + 56))(v21, ObjectType, v24);

      swift_unknownObjectRelease();
      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_release();
    }
  }
}

void specialized NearbyInvitationsProviderDataSource.scannerError(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWError();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.host);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v7(v5, a1, v2);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412290;
    v13[1] = v10 + 4;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NWError and conformance NWError, (void (*)(uint64_t))&type metadata accessor for NWError);
    swift_allocError();
    v7(v11, (uint64_t)v5, v2);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v15 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v12;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "NearbyInvitationsProviderDataSource received error from browser connection %@", v10, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t specialized NearbyInvitationsProviderDataSource.receivedApprovalMessage(content:message:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequestData?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for InvitationRequestData();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.host);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "NearbyInvitationsProviderDataSource received approval message", v15, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t result = JSONDecoder.init()();
  if (a2 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData, (void (*)(uint64_t))&type metadata accessor for InvitationRequestData);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    uint64_t v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    if (!(*(uint64_t (**)(uint64_t))(*(void *)v3 + 208))(v17))
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return swift_release();
    }
    uint64_t v19 = v18;
    v26[0] = InvitationRequestData.id.getter();
    uint64_t v21 = v20;
    uint64_t result = InvitationRequestData.invitationData.getter();
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = result;
      unint64_t v24 = v22;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v19 + 48))(v26[0], v21, v23, v24, ObjectType, v19);
      swift_release();
      outlined consume of Data?(v23, v24);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  __break(1u);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0K6DeviceVyAF0H13RangingFilterC_GG_7Combine14AnyCancellableCs5NeverOTg508_s44com_e1_fg1_hi9Service24klm49C7scanner6configACyxGAA0iJ0C_6ConfigQztcfcySayAH6n16VGcfU_7Combine14rs24CAC0hN0Vyx_GXEfU1_AA0E13oP5C_TG5AHyALGTf1cn_nTf4ng_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    type metadata accessor for NearbyRangingFilter();
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type NearbyRangingFilter and conformance NearbyRangingFilter, (void (*)(uint64_t))type metadata accessor for NearbyRangingFilter);
    uint64_t v4 = a1 + 48;
    do
    {
      swift_bridgeObjectRetain();
      swift_retain();
      dispatch thunk of ObservableObject.objectWillChange.getter();
      swift_allocObject();
      swift_weakInit();
      type metadata accessor for ObservableObjectPublisher();
      swift_retain();
      Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 24;
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *specialized NearbyInvitationAdvertiser.init(listenerConfiguration:delegate:)(void *a1, uint64_t a2, void *a3)
{
  id v35 = a1;
  uint64_t v36 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  uint64_t v33 = *(void *)(v4 - 8);
  uint64_t v34 = v4;
  __chkstk_darwin(v4);
  uint64_t v32 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  __chkstk_darwin(v6);
  uint64_t v29 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v37 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v28);
  a3[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  a3[4] = _swiftEmptyArrayStorage;
  uint64_t v13 = (char *)a3
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__connections;
  *(void *)&long long v37 = _swiftEmptyArrayStorage;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NWConnection]);
  os_log_type_t v14 = v29;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v13, v14, v31);
  uint64_t v15 = (char *)a3
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser__dataReceived;
  long long v37 = xmmword_1000D61F0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  unint64_t v16 = v32;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v15, v16, v34);
  uint64_t v17 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser_connectionRequests;
  *(void *)((char *)a3 + v17) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  *(void *)((char *)a3
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser_delegate
            + 8) = 0;
  swift_unknownObjectWeakInit();
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.client);
  uint64_t v19 = v35;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    unint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v22 = 138412290;
    *(void *)&long long v37 = v19;
    unint64_t v24 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v23 = v19;

    _os_log_impl((void *)&_mh_execute_header, v20, v21, "NearbyInvitationsAdvertiser init %@", v22, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v20 = v19;
  }

  a3[3] = v19;
  id v25 = (char *)a3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService26NearbyInvitationAdvertiser_delegate;
  swift_beginAccess();
  *((void *)v25 + 1) = &protocol witness table for NearbyInvitationsProviderDataSource;
  swift_unknownObjectWeakAssign();
  return a3;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors);
  }
  return result;
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.advertiseNearbySessionEndpoint(params:response:), 0, 0);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v0 + v4);
  *(void *)(v1 + 16) = v7;
  *(void *)uint64_t v7 = v1;
  *(void *)(v7 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(_OWORD *)(v7 + 32) = v8;
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbyInvitation(_:response:), 0, 0);
}

uint64_t objectdestroy_22Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.stopAdvertisingNearbySessionEndpoint(response:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10008F91C()
{
  return objectdestroy_5Tm(64);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(_OWORD *)(v2 + 40) = v4;
  *(_OWORD *)(v2 + 24) = v3;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.markInvitationUsed(_:response:), 0, 0);
}

uint64_t sub_10008F9D4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return _swift_deallocObject(v0, v6, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = *(void *)((char *)v1 + v6);
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = (void *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v15;
  *uint64_t v15 = v2;
  v15[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.assertAdvertisementPublic(_:rotations:response:)(a1, v7, v8, v9, v11, v10, v13, v14);
}

uint64_t sub_10008FC1C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = ((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);
  swift_release();
  return _swift_deallocObject(v0, v8, v6);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 40) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = (v7 + v5 + v6) & ~v5;
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = (uint64_t)v1 + v6;
  uint64_t v13 = (uint64_t)v1 + v8;
  uint64_t v14 = (void *)((char *)v1 + ((v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v17;
  *uint64_t v17 = v2;
  v17[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.releaseAdvertisementPublicAssertion(_:assertionIdentifier:response:)(a1, v9, v10, v11, v12, v13, v15, v16);
}

uint64_t sub_10008FE80()
{
  return objectdestroy_5Tm(64);
}

uint64_t objectdestroy_5Tm(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  return _swift_deallocObject(v1, a1, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.releaseInvitation(_:response:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(_OWORD *)(v2 + 40) = v4;
  *(_OWORD *)(v2 + 24) = v3;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.releaseInvitation(_:response:), 0, 0);
}

uint64_t sub_10008FF94()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  return closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(a1, v5, v6, v7, v8);
}

uint64_t objectdestroy_34Tm()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return _swift_deallocObject(v0, v6, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100090398()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();
  return _swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = *(void *)((char *)v1 + v6);
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = (void *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v15;
  *uint64_t v15 = v2;
  v15[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in NearbyInvitationsProviderDataSource.scanNearbyEndpoints(params:scannerID:response:)(a1, v7, v8, v9, v11, v10, v13, v14);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)()
{
  return partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)((uint64_t (*)(void, void, void, void, void))closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:));
}

uint64_t objectdestroy_70Tm()
{
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)()
{
  return partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)((uint64_t (*)(void, void, void, void, void))closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:));
}

uint64_t sub_100090670()
{
  swift_release();

  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return _swift_deallocObject(v0, 48, 7);
}

void partial apply for closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)()
{
  closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000906C4()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.denyConnectionRequest(_:)()
{
  return closure #1 in NearbyInvitationsProviderDataSource.denyConnectionRequest(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10009070C()
{
  return objectdestroy_94Tm((void (*)(void))&_swift_bridgeObjectRelease, 32);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.didUpdateGroups(_:)()
{
  return closure #1 in NearbyInvitationsProviderDataSource.didUpdateGroups(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void *specialized FilteredBluetoothScanner.init(scanner:config:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v7 = a2 & 1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice]>);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[2] = &_swiftEmptySetSingleton;
  v4[3] = &_swiftEmptySetSingleton;
  uint64_t v12 = (char *)v4 + *(void *)(*v4 + 112);
  uint64_t v18 = _swiftEmptyArrayStorage;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FilteredBluetoothScanner<NearbyRangingFilter>.FilteredDevice]);
  CurrentSubject.init(wrappedValue:)();
  uint64_t v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v11, v8);
  uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(v13);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = a1;
  *(unsigned char *)(v15 + 32) = v7;
  *(void *)(v15 + 40) = a3;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[BluetoothScanner.Device], Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<[BluetoothScanner.Device], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[BluetoothScanner.Device], Never>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  return v4;
}

void *specialized NearbyInvitationScanner.init(scannerID:configuration:delegate:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v31 = a2;
  uint64_t v32 = a3;
  uint64_t v33 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[NWConnection]>);
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v30 = (uint8_t *)v5;
  __chkstk_darwin(v5);
  uint64_t v28 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v11 - 8);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  v35[0] = (uint64_t)_swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v27);
  a4[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  a4[5] = 0;
  swift_unknownObjectWeakInit();
  a4[6] = 0;
  uint64_t v12 = (char *)a4
      + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner__connections;
  v35[0] = (uint64_t)_swiftEmptyArrayStorage;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NWConnection]);
  uint64_t v13 = v28;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint8_t *))(v29 + 32))(v12, v13, v30);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.client);
  id v15 = v31;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    v35[0] = swift_slowAlloc();
    id v31 = a4 + 4;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v30 = v18 + 4;
    id v19 = [v15 debugDescription];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "NearbyInvitationScanner init with parameters %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  a4[3] = v15;
  swift_beginAccess();
  a4[5] = &protocol witness table for NearbyInvitationsProviderDataSource;
  swift_unknownObjectWeakAssign();
  uint64_t v23 = (char *)a4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService23NearbyInvitationScanner_scannerID;
  uint64_t v24 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(v23, v33, v24);
  return a4;
}

void specialized NearbyInvitationsProviderDataSource.serviceController(_:didReceiveConnection:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  __chkstk_darwin(v2 - 8);
  UUID.init()();
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NearbyProtoConnectionRequest(0) + 32));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  objc_allocWithZone((Class)type metadata accessor for NearbyAdvertisement());
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v4, v5);
  uint64_t v6 = (void *)NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)();
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Marking all generated pseudonyms as used due to incoming connection request", v10, 2u);
    swift_slowDealloc();
  }

  uint64_t v11 = (*(uint64_t (**)(void))((swift_isaMask & *v15[6]) + 0xC8))();
  if (((uint64_t (*)(uint64_t))(*v15)[26])(v11))
  {
    uint64_t v13 = v12;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t))(v13 + 16))(v6, ObjectType, v13);

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

void specialized NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v70 = a6;
  unint64_t v71 = a7;
  uint64_t v73 = a4;
  uint64_t v74 = a5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v12 - 8);
  uint64_t v76 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)type metadata accessor for NearbyProtoJoinRequest.Content(0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v17 - 8);
  id v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  BOOL v72 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  id v25 = (char *)&v62 - v24;
  UUID.init(uuidString:)();
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  uint64_t v75 = a2;
  if (v26 != 1)
  {
    uint64_t v69 = v8;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v25, v19, v20);
    unint64_t v35 = a3;
    NSString v36 = String._bridgeToObjectiveC()();
    long long v37 = (void *)IDSCopyAddressDestinationForDestination();

    Swift::Int v38 = (void *)IDSCopyRawAddressForDestination();
    if (!v38) {
      goto LABEL_28;
    }
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;

    if (String.count.getter() <= 0)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v64 = v39;
    int v42 = *(unsigned __int8 *)(a1 + v14[8]);
    outlined init with copy of NearbyProtoJoinResponse.Content(a1, (uint64_t)v16, type metadata accessor for NearbyProtoJoinRequest.Content);
    uint64_t v68 = v41;
    if (v42 == 2)
    {
      outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v16, type metadata accessor for NearbyProtoJoinRequest.Content);
      uint64_t v43 = v72;
      unint64_t v44 = v35;
LABEL_17:
      swift_bridgeObjectRetain();
      uint64_t v63 = v75;
      unint64_t v66 = v44;
      goto LABEL_18;
    }
    int v48 = v16[v14[8]];
    uint64_t v43 = v72;
    if (v48 == 2)
    {
      outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v16, type metadata accessor for NearbyProtoJoinRequest.Content);
      uint64_t v63 = 0;
      unint64_t v66 = 0;
    }
    else
    {
      outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v16, type metadata accessor for NearbyProtoJoinRequest.Content);
      unint64_t v44 = v35;
      if (v48) {
        goto LABEL_17;
      }
      uint64_t v63 = 0;
      unint64_t v66 = 0;
    }
LABEL_18:
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v43, v25, v20);
    id v49 = (uint64_t *)(a1 + v14[6]);
    unint64_t v50 = v49[1];
    if (v50)
    {
      uint64_t v62 = *v49;
      unint64_t v65 = v50;
    }
    else
    {
      uint64_t v62 = 0;
      unint64_t v65 = 0xE000000000000000;
    }
    uint64_t v51 = (uint64_t *)(a1 + v14[7]);
    uint64_t v53 = *v51;
    unint64_t v52 = v51[1];
    if (v52 >> 60 == 15) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = (char *)*v51;
    }
    BOOL v72 = v54;
    unint64_t v55 = 0xC000000000000000;
    if (v52 >> 60 != 15) {
      unint64_t v55 = v52;
    }
    unint64_t v67 = v55;
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & *v69[6]) + 0xD8);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v53, v52);
    v56(v73, v74);
    objc_allocWithZone((Class)type metadata accessor for IncomingInvitationJoinRequest());
    outlined copy of Data._Representation(v70, v71);
    unint64_t v57 = (void *)IncomingInvitationJoinRequest.init(invitationID:remotePseudonym:destinationToken:remotePublicKey:displayName:userInfo:hostInfo:)();
    if (!((uint64_t (*)(void *, uint64_t))(*v69)[26])(v57, v58))
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);

      return;
    }
    uint64_t v60 = v59;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t))(v60 + 24))(v57, ObjectType, v60);
    swift_unknownObjectRelease();

LABEL_28:
    (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
    return;
  }
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
  lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
  uint64_t v27 = swift_allocError();
  *uint64_t v28 = 0;
  swift_willThrow();
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Log.host);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    v78[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, a3, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 12) = 2080;
    uint64_t v77 = v27;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v33 = String.init<A>(reflecting:)();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Dropping joinRequest from: %s, reason: %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v45 = (uint64_t)v76;
  static TaskPriority.background.getter();
  uint64_t v46 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 0, 1, v46);
  uint64_t v47 = (void *)swift_allocObject();
  v47[2] = 0;
  void v47[3] = 0;
  v47[4] = v8;
  v47[5] = v27;
  swift_errorRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v45, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:), (uint64_t)v47);
  swift_release();
  swift_errorRelease();
  outlined destroy of Any?(v45, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
}

uint64_t specialized NearbyInvitationsProviderDataSource.serviceController(_:didReceiveConnection:)(uint64_t *a1)
{
  uint64_t v131 = type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent(0);
  uint64_t v2 = __chkstk_darwin(v131);
  uint64_t v4 = (uint64_t *)((char *)&v124 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  uint64_t v127 = (uint64_t *)((char *)&v124 - v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v130 = (uint64_t)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v129 = (uint64_t)&v124 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v124 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v126 = (uint64_t)&v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v133 = (uint64_t)&v124 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v125 = (uint64_t)&v124 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v132 = (uint64_t)&v124 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v124 - v23;
  __chkstk_darwin(v22);
  int v26 = (char *)&v124 - v25;
  uint64_t v27 = type metadata accessor for NearbyProtoConnectionResponse.Content(0);
  uint64_t v141 = *(void *)(v27 - 8);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v124 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v138 = (uint64_t)&v124 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  unint64_t v35 = (char *)&v124 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v135 = (uint64_t)&v124 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v136 = (uint64_t)&v124 - v39;
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v124 - v40;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v137 = v35;
  uint64_t v134 = v30;
  uint64_t v128 = v4;
  uint64_t v42 = type metadata accessor for Logger();
  uint64_t v43 = __swift_project_value_buffer(v42, (uint64_t)static Log.host);
  outlined init with copy of NearbyProtoJoinResponse.Content((uint64_t)a1, (uint64_t)v41, type metadata accessor for NearbyProtoConnectionResponse.Content);
  uint64_t v139 = v43;
  unint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.info.getter();
  BOOL v46 = os_log_type_enabled(v44, v45);
  v143 = v12;
  if (v46)
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    v144[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 136315138;
    outlined init with copy of NearbyProtoJoinResponse.Content((uint64_t)v41, (uint64_t)v26, type metadata accessor for NearbyProtoConnectionResponse.Content);
    uint64_t v48 = v141;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v141 + 56))(v26, 0, 1, v27);
    outlined init with copy of (String, Any)((uint64_t)v26, (uint64_t)v24, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
    int v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v24, 1, v27);
    uint64_t v140 = a1;
    if (v49 == 1)
    {
      uint64_t v50 = 7104878;
      unint64_t v51 = 0xE300000000000000;
    }
    else
    {
      uint64_t v52 = v136;
      outlined init with take of NearbyProtoJoinResponse.Content.ApprovalContent((uint64_t)v24, v136, type metadata accessor for NearbyProtoConnectionResponse.Content);
      outlined init with copy of NearbyProtoJoinResponse.Content(v52, v135, type metadata accessor for NearbyProtoConnectionResponse.Content);
      uint64_t v50 = String.init<A>(reflecting:)();
      unint64_t v51 = v53;
      outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation(v52, type metadata accessor for NearbyProtoConnectionResponse.Content);
    }
    outlined destroy of Any?((uint64_t)v26, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
    uint64_t v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v41, type metadata accessor for NearbyProtoConnectionResponse.Content);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "NearbyInvitationsProviderDataSource got didReceiveConnection response: %s", v47, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v12 = v143;
    a1 = v140;
  }
  else
  {
    outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v41, type metadata accessor for NearbyProtoConnectionResponse.Content);
  }
  uint64_t v54 = (uint64_t)a1 + *(int *)(v27 + 24);
  outlined init with copy of (String, Any)(v54, (uint64_t)v12, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
  uint64_t v55 = type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation(0);
  uint64_t v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48);
  uint64_t result = v56(v12, 1, v55);
  if (result != 1)
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v70 = v138;
      outlined init with copy of NearbyProtoJoinResponse.Content((uint64_t)a1, v138, type metadata accessor for NearbyProtoConnectionResponse.Content);
      unint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc();
        v144[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v73 = 136315138;
        uint64_t v74 = v70;
        uint64_t v75 = v133;
        outlined init with copy of NearbyProtoJoinResponse.Content(v74, v133, type metadata accessor for NearbyProtoConnectionResponse.Content);
        uint64_t v76 = v141;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v141 + 56))(v75, 0, 1, v27);
        uint64_t v77 = v126;
        outlined init with copy of (String, Any)(v75, v126, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v77, 1, v27) == 1)
        {
          uint64_t v78 = a1;
          uint64_t v79 = 7104878;
          unint64_t v80 = 0xE300000000000000;
        }
        else
        {
          uint64_t v78 = a1;
          uint64_t v92 = v136;
          outlined init with take of NearbyProtoJoinResponse.Content.ApprovalContent(v77, v136, type metadata accessor for NearbyProtoConnectionResponse.Content);
          outlined init with copy of NearbyProtoJoinResponse.Content(v92, v135, type metadata accessor for NearbyProtoConnectionResponse.Content);
          uint64_t v79 = String.init<A>(reflecting:)();
          unint64_t v80 = v93;
          outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation(v92, type metadata accessor for NearbyProtoConnectionResponse.Content);
        }
        outlined destroy of Any?(v133, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
        uint64_t v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, v144);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation(v138, type metadata accessor for NearbyProtoConnectionResponse.Content);
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "NearbyInvitationsProviderDataSource: Connection response got denied %s", v73, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        a1 = v78;
      }
      else
      {
        outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation(v70, type metadata accessor for NearbyProtoConnectionResponse.Content);
      }
      uint64_t v94 = (uint64_t)v134;
      uint64_t v95 = *a1;
      uint64_t v96 = a1[1];
      uint64_t v97 = *(uint64_t (**)(uint64_t))(*(void *)v142 + 328);
      uint64_t v98 = swift_bridgeObjectRetain();
      if (*(void *)(v97(v98) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v95, v96), (v99 & 1) != 0))
      {
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type NearbyInvitationsProviderDataSource.Errors and conformance NearbyInvitationsProviderDataSource.Errors();
        uint64_t v100 = swift_allocError();
        *id v101 = 1;
        v144[0] = v100;
        PassthroughSubject.send(completion:)();
        swift_errorRelease();
        uint64_t v102 = *a1;
        uint64_t v103 = a1[1];
        uint64_t v104 = *(uint64_t (**)(uint64_t *))(*(void *)v142 + 344);
        swift_bridgeObjectRetain();
        uint64_t v105 = (void (*)(uint64_t *, void))v104(v144);
        specialized Dictionary._Variant.removeValue(forKey:)(v102, v103);
        swift_bridgeObjectRelease();
        swift_release();
        v105(v144, 0);
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with copy of NearbyProtoJoinResponse.Content((uint64_t)a1, v94, type metadata accessor for NearbyProtoConnectionResponse.Content);
        unint64_t v106 = Logger.logObject.getter();
        os_log_type_t v107 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v106, v107))
        {
          uint64_t v108 = (uint8_t *)swift_slowAlloc();
          v144[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v108 = 136315138;
          lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NearbyProtoConnectionResponse.Content and conformance NearbyProtoConnectionResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoConnectionResponse.Content);
          uint64_t v109 = Message.debugDescription.getter();
          uint64_t v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, v144);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation(v94, type metadata accessor for NearbyProtoConnectionResponse.Content);
          _os_log_impl((void *)&_mh_execute_header, v106, v107, "NearbyInvitationsProviderDataSource Could not find a request in flight for %s", v108, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation(v94, type metadata accessor for NearbyProtoConnectionResponse.Content);
        }
      }
      return outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v143, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    }
    uint64_t v58 = (uint64_t)v137;
    outlined init with copy of NearbyProtoJoinResponse.Content((uint64_t)a1, (uint64_t)v137, type metadata accessor for NearbyProtoConnectionResponse.Content);
    uint64_t v59 = Logger.logObject.getter();
    int v60 = static os_log_type_t.default.getter();
    BOOL v61 = os_log_type_enabled(v59, (os_log_type_t)v60);
    uint64_t v140 = a1;
    if (v61)
    {
      LODWORD(v139) = v60;
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v138 = swift_slowAlloc();
      v144[0] = v138;
      *(_DWORD *)uint64_t v62 = 136315138;
      uint64_t v63 = v58;
      uint64_t v64 = v132;
      outlined init with copy of NearbyProtoJoinResponse.Content(v63, v132, type metadata accessor for NearbyProtoConnectionResponse.Content);
      uint64_t v65 = v141;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v141 + 56))(v64, 0, 1, v27);
      uint64_t v66 = v64;
      uint64_t v67 = v125;
      outlined init with copy of (String, Any)(v66, v125, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v67, 1, v27) == 1)
      {
        uint64_t v68 = 7104878;
        unint64_t v69 = 0xE300000000000000;
      }
      else
      {
        uint64_t v81 = v136;
        outlined init with take of NearbyProtoJoinResponse.Content.ApprovalContent(v67, v136, type metadata accessor for NearbyProtoConnectionResponse.Content);
        outlined init with copy of NearbyProtoJoinResponse.Content(v81, v135, type metadata accessor for NearbyProtoConnectionResponse.Content);
        uint64_t v68 = String.init<A>(reflecting:)();
        unint64_t v69 = v82;
        outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation(v81, type metadata accessor for NearbyProtoConnectionResponse.Content);
      }
      outlined destroy of Any?(v132, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content?);
      uint64_t v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v137, type metadata accessor for NearbyProtoConnectionResponse.Content);
      _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v139, "NearbyInvitationsProviderDataSource: Connection approved with: %s", v62, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a1 = v140;
    }
    else
    {
      outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation(v58, type metadata accessor for NearbyProtoConnectionResponse.Content);
    }
    uint64_t v83 = *a1;
    uint64_t v84 = a1[1];
    uint64_t v85 = *(uint64_t (**)(uint64_t *))(*(void *)v142 + 344);
    swift_bridgeObjectRetain();
    uint64_t v86 = (uint64_t (*)(uint64_t *, void))v85(v144);
    uint64_t v87 = specialized Dictionary._Variant.removeValue(forKey:)(v83, v84);
    swift_bridgeObjectRelease();
    uint64_t v88 = v86(v144, 0);
    if (!v87)
    {
LABEL_38:
      if (!(*(uint64_t (**)(uint64_t))(*(void *)v142 + 208))(v88)) {
        return outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v143, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
      }
      uint64_t v114 = v113;
      uint64_t v115 = *v140;
      uint64_t v116 = v140[1];
      uint64_t v117 = v54;
      uint64_t v118 = v130;
      outlined init with copy of (String, Any)(v117, v130, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      if (v56((char *)v118, 1, v55) == 1)
      {
        outlined destroy of Any?(v118, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
        Swift::Int v119 = v128;
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        Swift::Int v119 = v128;
        if (EnumCaseMultiPayload == 1)
        {
          outlined init with take of NearbyProtoJoinResponse.Content.ApprovalContent(v118, (uint64_t)v128, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
LABEL_45:
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v122 = *v119;
          unint64_t v123 = v119[1];
          outlined copy of Data._Representation(*v119, v123);
          outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v119, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
          (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v114 + 48))(v115, v116, v122, v123, ObjectType, v114);
          swift_unknownObjectRelease();
          outlined consume of Data._Representation(v122, v123);
          return outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v143, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
        }
        outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation(v118, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
      }
      *(_OWORD *)Swift::Int v119 = xmmword_1000D7960;
      UnknownStorage.init()();
      goto LABEL_45;
    }
    uint64_t v89 = v129;
    outlined init with copy of (String, Any)(v54, v129, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
    if (v56((char *)v89, 1, v55) == 1)
    {
      outlined destroy of Any?(v89, &demangling cache variable for type metadata for NearbyProtoConnectionResponse.Content.OneOf_Operation?);
      uint64_t v90 = v127;
    }
    else
    {
      int v91 = swift_getEnumCaseMultiPayload();
      uint64_t v90 = v127;
      if (v91 == 1)
      {
        outlined init with take of NearbyProtoJoinResponse.Content.ApprovalContent(v89, (uint64_t)v127, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
LABEL_37:
        uint64_t v111 = *v90;
        unint64_t v112 = v90[1];
        outlined copy of Data._Representation(*v90, v112);
        outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v90, type metadata accessor for NearbyProtoConnectionResponse.Content.ApprovalContent);
        v144[0] = v111;
        v144[1] = v112;
        PassthroughSubject.send(_:)();
        swift_release();
        uint64_t v88 = outlined consume of Data._Representation(v111, v112);
        goto LABEL_38;
      }
      outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation(v89, type metadata accessor for NearbyProtoConnectionResponse.Content.OneOf_Operation);
    }
    *(_OWORD *)uint64_t v90 = xmmword_1000D7960;
    UnknownStorage.init()();
    goto LABEL_37;
  }
  return result;
}

uint64_t specialized static InvitationJoinResponse.from(content:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NearbyProtoJoinResponse.Content(0);
  outlined init with copy of (String, Any)(a1 + *(int *)(v8 + 20), (uint64_t)v4, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for NearbyProtoJoinResponse.Content.OneOf_Operation?);
LABEL_12:
    type metadata accessor for InvitationJoinResponse();
    return static InvitationJoinResponse.denied.getter();
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v4, type metadata accessor for NearbyProtoJoinResponse.Content.OneOf_Operation);
    goto LABEL_12;
  }
  outlined init with take of NearbyProtoJoinResponse.Content.ApprovalContent((uint64_t)v4, (uint64_t)v7, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
  uint64_t v10 = (uint64_t *)&v7[*(int *)(v5 + 28)];
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  if (v12 >> 60 == 15) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *v10;
  }
  if (v12 >> 60 == 15) {
    unint64_t v14 = 0xC000000000000000;
  }
  else {
    unint64_t v14 = v10[1];
  }
  type metadata accessor for InvitationJoinResponse();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v11, v12);
  uint64_t v15 = static InvitationJoinResponse.approved(sessionIdentifier:memberHandles:userInfo:)();
  outlined consume of Data._Representation(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v7, type metadata accessor for NearbyProtoJoinResponse.Content.ApprovalContent);
  return v15;
}

void specialized NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)type metadata accessor for UUID();
  uint64_t v60 = *(v7 - 1);
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v57 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v53 - v11;
  __chkstk_darwin(v10);
  BOOL v61 = (char *)&v53 - v13;
  uint64_t v14 = type metadata accessor for NearbyProtoJoinResponse.Content(0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Log.host);
  outlined init with copy of NearbyProtoJoinResponse.Content(a1, (uint64_t)v16, type metadata accessor for NearbyProtoJoinResponse.Content);
  uint64_t v58 = v18;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v59 = v2;
  if (v21)
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v56 = v7;
    uint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v55 = v12;
    v63[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v54 = v6;
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NearbyProtoJoinResponse.Content and conformance NearbyProtoJoinResponse.Content, (void (*)(uint64_t))type metadata accessor for NearbyProtoJoinResponse.Content);
    uint64_t v25 = Message.debugDescription.getter();
    uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v63);
    uint64_t v6 = v54;
    uint64_t v2 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v16, type metadata accessor for NearbyProtoJoinResponse.Content);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "NearbyInvitationsProviderDataSource didReceiveJoinResponse: %s", v23, 0xCu);
    swift_arrayDestroy();
    unint64_t v12 = v55;
    swift_slowDealloc();
    uint64_t v7 = v56;
    swift_slowDealloc();
  }
  else
  {
    outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation((uint64_t)v16, type metadata accessor for NearbyProtoJoinResponse.Content);
  }

  uint64_t v27 = (void *)specialized static InvitationJoinResponse.from(content:)(a1);
  UUID.init(uuidString:)();
  uint64_t v28 = v60;
  int v29 = (*(uint64_t (**)(char *, uint64_t, void *))(v60 + 48))(v6, 1, v7);
  uint64_t v30 = (uint64_t)v61;
  if (v29 == 1)
  {
    uint64_t v31 = outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    uint64_t v56 = v27;
    (*(void (**)(char *, char *, void *))(v28 + 32))(v61, v6, v7);
    uint64_t v54 = *(char **)(v28 + 16);
    ((void (*)(char *, uint64_t, void *))v54)(v12, v30, v7);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      v63[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315138;
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v63);
      uint64_t v2 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = v7;
      uint64_t v55 = *(char **)(v60 + 8);
      ((void (*)(char *, void *))v55)(v12, v7);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Looking up waitingJoinRequest with identifier: %s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v30 = (uint64_t)v61;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v37 = v7;
      uint64_t v55 = *(char **)(v28 + 8);
      ((void (*)(char *, void *))v55)(v12, v7);
    }

    uint64_t v38 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v2 + 320))(v63);
    uint64_t v39 = (void (*)(uint64_t *, uint64_t *))specialized Dictionary._Variant.removeValue(forKey:)(v30);
    uint64_t v60 = v40;
    v38(v63, 0);
    uint64_t v41 = v37;
    if (v39)
    {
      uint64_t v42 = v57;
      ((void (*)(char *, uint64_t, void *))v54)(v57, v30, v41);
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        os_log_type_t v45 = v42;
        BOOL v46 = (uint8_t *)swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        v63[0] = v58;
        *(_DWORD *)BOOL v46 = 136315138;
        uint64_t v54 = (char *)(v46 + 4);
        lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        ((void (*)(char *, void *))v55)(v45, v41);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Calling callback that was waiting for a joinResponse, identifier: %s", v46, 0xCu);
        swift_arrayDestroy();
        uint64_t v2 = v59;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        ((void (*)(char *, void *))v55)(v42, v41);
      }

      uint64_t v62 = 0;
      v63[0] = (uint64_t)v56;
      int v49 = v56;
      v39(v63, &v62);

      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v39);
      uint64_t v30 = (uint64_t)v61;
    }
    uint64_t v31 = ((uint64_t (*)(uint64_t, void *))v55)(v30, v41);
    uint64_t v27 = v56;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 208))(v31))
  {
    uint64_t v51 = v50;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t))(v51 + 56))(v27, ObjectType, v51);
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1000937E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 304))();
  *a2 = result;
  return result;
}

uint64_t sub_100093838(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 312);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_100093894@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 328))();
  *a2 = result;
  return result;
}

uint64_t sub_1000938E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 336);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_100093944@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 352))();
  *a2 = result;
  return result;
}

uint64_t sub_100093998(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 360);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1000939F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 376))();
  *a2 = result;
  return result;
}

uint64_t sub_100093A48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 384);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_100093AA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 424))();
}

uint64_t sub_100093AF4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 448))();
  *a2 = result;
  return result;
}

uint64_t sub_100093B48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 456);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ObjC metadata update function for NearbyInvitationsProviderDataSource()
{
  return type metadata accessor for NearbyInvitationsProviderDataSource();
}

uint64_t type metadata accessor for NearbyInvitationsProviderDataSource()
{
  uint64_t result = type metadata singleton initialization cache for NearbyInvitationsProviderDataSource;
  if (!type metadata singleton initialization cache for NearbyInvitationsProviderDataSource) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for NearbyInvitationsProviderDataSource()
{
  type metadata accessor for Published<Data?>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for Published<Data?>()
{
  if (!lazy cache variable for type metadata for Published<Data?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Data?>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for NearbyInvitationsProviderDataSource.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100093DFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationsProviderDataSource.Errors()
{
  return &type metadata for NearbyInvitationsProviderDataSource.Errors;
}

uint64_t outlined init with take of NearbyProtoJoinResponse.Content.ApprovalContent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100093E9C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_errorRelease();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  *(_OWORD *)(v2 + 48) = v3;
  return _swift_task_switch(closure #1 in NearbyInvitationsProviderDataSource.serviceController(_:didReceiveJoin:fromID:toID:publicKey:), 0, 0);
}

uint64_t outlined init with copy of NearbyProtoJoinResponse.Content(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of NearbyProtoJoinResponse.Content.OneOf_Operation(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100094058()
{
  swift_unknownObjectRelease();
  swift_release();

  outlined consume of Data._Representation(*(void *)(v0 + 48), *(void *)(v0 + 56));
  return _swift_deallocObject(v0, 64, 7);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsProviderDataSource.approveConnectionRequest(_:localInvitation:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_10009417C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestEndpointConnection(with:pseudonym:response:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100094294()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestConnection(with:localInvitation:response:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000943C8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return _swift_deallocObject(v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_100094600()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(a1, v6, a2);
}

uint64_t outlined consume of CollectionDifference<NearbyAdvertisement>.Change()
{
  return _objc_release_x1();
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100094734()
{
  swift_weakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009476C()
{
  return objectdestroy_94Tm((void (*)(void))&_swift_release, 48);
}

uint64_t objectdestroy_94Tm(void (*a1)(void), uint64_t a2)
{
  swift_release();
  a1(*(void *)(v2 + 24));
  return _swift_deallocObject(v2, a2, 7);
}

uint64_t partial apply for specialized closure #1 in FilteredBluetoothScanner.init(scanner:config:)()
{
  return specialized closure #1 in FilteredBluetoothScanner.init(scanner:config:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t specialized closure #1 in FilteredBluetoothScanner.init(scanner:config:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v73 = result;
  if (result)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.host);
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(void *)&v74[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      uint64_t v11 = (*(uint64_t (**)(void))(*(void *)a2 + 104))();
      int64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        os_log_type_t v55 = v9;
        uint64_t v56 = v10;
        unint64_t v57 = v8;
        uint64_t v58 = a2;
        char v59 = a3;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
        uint64_t v13 = 0;
        uint64_t v60 = v11;
        do
        {
          uint64_t v14 = *(void *)(v11 + v13 + 40);
          char v67 = *(unsigned char *)(v11 + v13 + 48);
          uint64_t v15 = *(void *)(v11 + v13 + 64);
          uint64_t v16 = *(void *)(v11 + v13 + 72);
          int v66 = *(_DWORD *)(v11 + v13 + 80);
          uint64_t v64 = *(void *)(v11 + v13 + 88);
          uint64_t v17 = *(void *)(v11 + v13 + 104);
          uint64_t v63 = *(void *)(v11 + v13 + 96);
          char v62 = *(unsigned char *)(v11 + v13 + 112);
          uint64_t v69 = *(void *)(v11 + v13 + 32);
          unint64_t v71 = *(void **)(v11 + v13 + 56);
          id v18 = v71;
          swift_bridgeObjectRetain();
          outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v15, v16);
          unint64_t v20 = _swiftEmptyArrayStorage[2];
          unint64_t v19 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain();
          if (v20 >= v19 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v20 + 1;
          BOOL v21 = &_swiftEmptyArrayStorage[11 * v20];
          uint64_t v21[4] = v69;
          uint64_t v21[5] = v14;
          *((unsigned char *)v21 + 48) = v67;
          v21[7] = v71;
          v21[8] = v15;
          v21[9] = v16;
          *((_DWORD *)v21 + 20) = v66;
          v21[11] = v64;
          unsigned char v21[12] = v63;
          v21[13] = v17;
          *((unsigned char *)v21 + 112) = v62;
          v13 += 104;
          --v12;
          uint64_t v11 = v60;
        }
        while (v12);
        swift_bridgeObjectRelease();
        a3 = v59;
        a2 = v58;
        uint64_t v10 = v56;
        uint64_t v8 = v57;
        os_log_type_t v9 = v55;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BluetoothScannerDiscoveryEngineDevice]);
      uint64_t v23 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, (uint64_t *)v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Learned about updated BT devices: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v22 = swift_release_n();
    }
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(v22);
    uint64_t v72 = *(void *)(v25 + 16);
    if (v72)
    {
      uint64_t v26 = 0;
      char v65 = a3 & 1;
      uint64_t v70 = v25 + 32;
      uint64_t v68 = *(uint64_t (**)(uint64_t))(*(void *)v73 + 168);
      uint64_t v27 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v29 = v70 + 104 * v26;
        long long v30 = *(_OWORD *)(v29 + 32);
        long long v31 = *(_OWORD *)v29;
        v74[1] = *(_OWORD *)(v29 + 16);
        void v74[2] = v30;
        v74[0] = v31;
        long long v32 = *(_OWORD *)(v29 + 48);
        long long v33 = *(_OWORD *)(v29 + 64);
        long long v34 = *(_OWORD *)(v29 + 80);
        uint64_t v75 = *(void *)(v29 + 96);
        v74[4] = v33;
        v74[5] = v34;
        v74[3] = v32;
        unsigned long long v35 = v74[0];
        outlined retain of BluetoothScanner.Device((uint64_t)v74);
        uint64_t v36 = swift_bridgeObjectRetain();
        uint64_t v37 = v68(v36);
        uint64_t v38 = *(void *)(v37 + 16);
        if (v38)
        {
          uint64_t v39 = (uint64_t *)(v37 + 48);
          while (1)
          {
            uint64_t v41 = *(v39 - 2);
            uint64_t v40 = *(v39 - 1);
            uint64_t v42 = *v39;
            if ((void)v35 == v41 && *((void *)&v35 + 1) == v40) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              goto LABEL_31;
            }
            v39 += 3;
            if (!--v38) {
              goto LABEL_26;
            }
          }
          uint64_t v40 = v35 >> 64;
          uint64_t v41 = v35;
LABEL_31:
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(_OWORD *))(*(void *)v42 + 200))(v74);
          swift_bridgeObjectRetain();
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
          }
          unint64_t v48 = v27[2];
          unint64_t v47 = v27[3];
          if (v48 >= v47 >> 1) {
            uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, v27);
          }
          v27[2] = v48 + 1;
          int v49 = &v27[3 * v48];
          v49[4] = v41;
          v49[5] = v40;
          v49[6] = v42;
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_26:
          swift_bridgeObjectRelease();
          type metadata accessor for NearbyRangingFilter();
          swift_allocObject();
          outlined retain of BluetoothScanner.Device((uint64_t)v74);
          uint64_t v44 = NearbyRangingFilter.init(scannerDevice:config:)((uint64_t)v74, v65, a4);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
          }
          unint64_t v46 = v27[2];
          unint64_t v45 = v27[3];
          if (v46 >= v45 >> 1) {
            uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v46 + 1, 1, v27);
          }
          v27[2] = v46 + 1;
          uint64_t v28 = &v27[3 * v46];
          *((_OWORD *)v28 + 2) = v35;
          v28[6] = v44;
        }
        outlined release of BluetoothScanner.Device(v74);
        ++v26;
      }
      while (v26 != v72);
    }
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v50 = swift_bridgeObjectRetain();
    uint64_t v51 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay44com_apple_SharePlay_NearbyInvitationsService24FilteredBluetoothScannerC0K6DeviceVyAF0H13RangingFilterC_GG_7Combine14AnyCancellableCs5NeverOTg508_s44com_e1_fg1_hi9Service24klm49C7scanner6configACyxGAA0iJ0C_6ConfigQztcfcySayAH6n16VGcfU_7Combine14rs24CAC0hN0Vyx_GXEfU1_AA0E13oP5C_TG5AHyALGTf1cn_nTf4ng_n(v50);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v52 = specialized Set.init<A>(_:)((unint64_t)v51);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v73 + 152))(v52);
    uint64_t v53 = *(void (**)(uint64_t))(*(void *)v73 + 176);
    uint64_t v54 = swift_bridgeObjectRetain();
    v53(v54);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)()
{
  return specialized closure #1 in closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)();
}

uint64_t sub_100094F4C()
{
  swift_unknownObjectWeakDestroy();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100094F88()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return _swift_deallocObject(v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyAdvertisement>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #1 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(a1, v6, v7, v8, v9);
}

uint64_t objectdestroyTm_0()
{
  swift_unknownObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in NearbyInvitationsAdvertiser.start();
  return closure #2 in closure #2 in NearbyInvitationsProviderDataSource.scanNearbyInvitations(scannerID:response:)(a1, v4, v5, v6);
}

uint64_t sub_100095294()
{
  swift_release();

  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)()
{
  return partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)(closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:));
}

uint64_t partial apply for closure #1 in NearbyInvitationsProviderDataSource.approve(pendingMember:response:completion:)(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100095314()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)(void **a1, uint64_t *a2)
{
  return closure #1 in closure #1 in closure #1 in NearbyInvitationsProviderDataSource.requestApproval(with:completion:)(a1, a2, *(void (**)(void, void))(v2 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsProviderDataSource.init()()
{
  return closure #1 in closure #1 in NearbyInvitationsProviderDataSource.init()();
}

uint64_t sub_10009535C()
{
  swift_unknownObjectRelease();

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 40);
  return _swift_deallocObject(v0, 80, 7);
}

uint64_t partial apply for closure #1 in NearbyIDSServiceController.init(queue:service:delegate:joinRequestsController:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #1 in NearbyInvitationAdvertiser.stopAdvertising();
  return closure #1 in NearbyIDSServiceController.init(queue:service:delegate:joinRequestsController:)(a1, v4, v5, v6, (uint64_t)(v1 + 5));
}

void *AssertionManager.__allocating_init(callback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  void v4[4] = Lock.init()();
  v4[5] = 0;
  v4[2] = a1;
  v4[3] = a2;
  return v4;
}

uint64_t AssertionManager.updateCallback.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t AssertionManager.assertionCount.getter()
{
  Lock.withLock<A>(_:)();
  return v1;
}

void AssertionManager.assertionCount.setter(uint64_t a1)
{
  Lock.lock()();
  uint64_t v3 = *(void *)(v1 + 40);
  if (v3 == a1)
  {
    Lock.unlock()();
  }
  else
  {
    *(void *)(v1 + 40) = a1;
    Lock.unlock()();
    if (v3) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = a1 <= 0;
    }
    if (!v4 || (v3 >= 1 ? (BOOL v5 = a1 == 0) : (BOOL v5 = 0), v5)) {
      (*(void (**)(uint64_t))(v1 + 16))(a1);
    }
  }
  Lock.assertNotOwned()();
}

void *AssertionManager.init(callback:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Lock();
  swift_allocObject();
  v2[4] = Lock.init()();
  v2[5] = 0;
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

void partial apply for closure #1 in AssertionManager.assertionCount.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 40);
}

uint64_t AssertionManager.subscribe()()
{
  type metadata accessor for AssertionManager.Assertion();
  swift_allocObject();
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized AssertionManager.Assertion.init(manager:)(v0);
  swift_release();
  return v1;
}

uint64_t AssertionManager.Assertion.__allocating_init(manager:)(uint64_t a1)
{
  swift_allocObject();
  uint64_t v2 = specialized AssertionManager.Assertion.init(manager:)(a1);
  swift_release();
  return v2;
}

uint64_t type metadata accessor for AssertionManager.Assertion()
{
  return self;
}

uint64_t AssertionManager.Assertion.init(manager:)(uint64_t a1)
{
  uint64_t v1 = specialized AssertionManager.Assertion.init(manager:)(a1);
  swift_release();
  return v1;
}

uint64_t AssertionManager.Assertion.deinit()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
LABEL_11:
    swift_weakDestroy();
    return v0;
  }
  uint64_t v2 = Strong;
  uint64_t result = Lock.withLock<A>(_:)();
  uint64_t v4 = v6 - 1;
  if (!__OFSUB__(v6, 1))
  {
    Lock.lock()();
    uint64_t v5 = *(void *)(v2 + 40);
    if (v5 == v4)
    {
      Lock.unlock()();
    }
    else
    {
      *(void *)(v2 + 40) = v4;
      Lock.unlock()();
      if (!v5 && v4 >= 1 || v5 >= 1 && v6 == 1) {
        (*(void (**)(uint64_t))(v2 + 16))(v4);
      }
    }
    Lock.assertNotOwned()();
    swift_release();
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t AssertionManager.Assertion.__deallocating_deinit()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
LABEL_11:
    swift_weakDestroy();
    return swift_deallocClassInstance();
  }
  uint64_t v1 = Strong;
  uint64_t result = Lock.withLock<A>(_:)();
  uint64_t v3 = v5 - 1;
  if (!__OFSUB__(v5, 1))
  {
    Lock.lock()();
    uint64_t v4 = *(void *)(v1 + 40);
    if (v4 == v3)
    {
      Lock.unlock()();
    }
    else
    {
      *(void *)(v1 + 40) = v3;
      Lock.unlock()();
      if (!v4 && v3 >= 1 || v4 >= 1 && v5 == 1) {
        (*(void (**)(uint64_t))(v1 + 16))(v3);
      }
    }
    Lock.assertNotOwned()();
    swift_release();
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t AssertionManager.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t AssertionManager.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized AssertionManager.Assertion.init(manager:)(uint64_t a1)
{
  swift_weakInit();
  swift_weakAssign();
  uint64_t result = Lock.withLock<A>(_:)();
  uint64_t v4 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    Lock.lock()();
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5 == v4)
    {
      Lock.unlock()();
    }
    else
    {
      *(void *)(a1 + 40) = v4;
      Lock.unlock()();
      if (!v5 && v4 > 0 || v5 >= 1 && v6 == -1) {
        (*(void (**)(uint64_t))(a1 + 16))(v4);
      }
    }
    Lock.assertNotOwned()();
    return v1;
  }
  return result;
}

uint64_t sub_100095B0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

void sub_100095B58(uint64_t *a1)
{
}

uint64_t type metadata accessor for AssertionManager()
{
  return self;
}

void closure #1 in AssertionManager.assertionCount.getterpartial apply(void *a1@<X8>)
{
}

uint64_t NearbySession.__allocating_init(stableIdentifier:rangingConfig:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  char v8 = a3 & 1;
  id v9 = objc_allocWithZone(v4);
  return NearbySession.init(stableIdentifier:rangingConfig:)(a1, a2, v8, a4);
}

uint64_t NearbySession.RangedDevice.location.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t property wrapper backing initializer of NearbySession.isRunning()
{
  return CurrentSubject.init(wrappedValue:)();
}

uint64_t NearbySession.isRunning.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Bool>);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__isRunning, v1);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  return v6[15];
}

uint64_t NearbySession.isRunning.setter(char a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Bool>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__isRunning, v3);
  v8[15] = a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t (*NearbySession.isRunning.modify(void *a1))()
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Bool>);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  v2[6] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify();
  return NearbySession.isRunning.modify;
}

uint64_t NearbySession.$isRunning.getter()
{
  return NearbySession.$isRunning.getter(&demangling cache variable for type metadata for CurrentSubject<Bool>, &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__isRunning);
}

uint64_t NearbySession.config.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_config);
}

uint64_t property wrapper backing initializer of NearbySession.rangedDevice()
{
  return CurrentSubject.init(wrappedValue:)();
}

uint64_t NearbySession.rangedDevice.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__rangedDevice, v1);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  return v6[15];
}

uint64_t NearbySession.rangedDevice.setter(char a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__rangedDevice, v3);
  v8[15] = a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t (*NearbySession.rangedDevice.modify(void *a1))()
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  v2[6] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify();
  return NearbySession.isRunning.modify;
}

uint64_t NearbySession.$rangedDevice.getter()
{
  return NearbySession.$isRunning.getter(&demangling cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>, &OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__rangedDevice);
}

uint64_t NearbySession.$isRunning.getter(uint64_t *a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *a2, v4);
  uint64_t v8 = CurrentSubject.projectedValue.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t NearbySession.stableIdentifier.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_stableIdentifier);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t NearbySession.stableIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_stableIdentifier);
  swift_beginAccess();
  void *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbySession.stableIdentifier.modify())()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

id NearbySession.session.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session);
}

uint64_t NearbySession.init(stableIdentifier:rangingConfig:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v47 = a2;
  uint64_t v48 = a4;
  int v46 = a3 & 1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = &v45[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<Bool>);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v45[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = &v4[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__isRunning];
  LOBYTE(v50) = 0;
  uint64_t v15 = v4;
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(char *, unsigned char *, uint64_t))(v11 + 32))(v14, v13, v10);
  uint64_t v16 = &v15[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession__rangedDevice];
  LOBYTE(v50) = 3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbySession.RangedDevice?);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(char *, unsigned char *, uint64_t))(v7 + 32))(v16, v9, v6);
  uint64_t v17 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session;
  *(void *)&v15[v17] = [objc_allocWithZone((Class)NISession) init];
  id v18 = &v15[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_stableIdentifier];
  uint64_t v19 = v47;
  *(void *)id v18 = a1;
  *((void *)v18 + 1) = v19;
  unint64_t v20 = &v15[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_config];
  *unint64_t v20 = v46;
  *((void *)v20 + 1) = v48;

  BOOL v21 = (objc_class *)type metadata accessor for NearbySession();
  v49.receiver = v15;
  v49.super_class = v21;
  uint64_t v22 = (char *)objc_msgSendSuper2(&v49, "init");
  uint64_t v23 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session;
  unint64_t v24 = *(void **)&v22[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session];
  uint64_t v25 = v22;
  [v24 setDelegate:v25];
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v26 = v24;
  uint64_t v27 = (void *)static OS_dispatch_queue.main.getter();
  [v26 setDelegateQueue:v27];

  uint64_t v28 = *(void **)&v22[v23];
  uint64_t v29 = *(void *)&v25[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_config + 8];
  id v30 = objc_allocWithZone((Class)NIRegionPredicate);
  id v31 = v28;
  NSString v32 = String._bridgeToObjectiveC()();
  id v33 = [v30 initWithName:v32 devicePresencePreset:v29];

  id v34 = objc_allocWithZone((Class)NIRegionPredicate);
  NSString v35 = String._bridgeToObjectiveC()();
  id v36 = [v34 initWithName:v35 devicePresencePreset:5];

  id v37 = objc_allocWithZone((Class)NIDevicePresenceConfiguration);
  id v50 = 0;
  id v38 = v33;
  id v39 = v36;
  id v40 = [v37 initWithInnerBoundary:v38 outerBoundary:v39 error:&v50];
  if (v40)
  {
    uint64_t v41 = v40;
    id v42 = v50;

    [v41 setAllowedDevices:4];
    [v41 setMonitoringOption:1];

    [v31 runWithConfiguration:v41];
    return (uint64_t)v25;
  }
  else
  {
    id v44 = v50;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t NearbyRangingFilter.Config.niDevicePresenceConfig.getter(uint64_t a1, uint64_t a2)
{
  id v3 = objc_allocWithZone((Class)NIRegionPredicate);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 initWithName:v4 devicePresencePreset:a2];

  id v6 = objc_allocWithZone((Class)NIRegionPredicate);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithName:v7 devicePresencePreset:5];

  id v9 = objc_allocWithZone((Class)NIDevicePresenceConfiguration);
  id v17 = 0;
  id v10 = v5;
  id v11 = v8;
  id v12 = [v9 initWithInnerBoundary:v10 outerBoundary:v11 error:&v17];
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = v17;

    [v13 setAllowedDevices:4];
    [v13 setMonitoringOption:1];

    return (uint64_t)v13;
  }
  else
  {
    id v16 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for NearbySession()
{
  uint64_t result = type metadata singleton initialization cache for NearbySession;
  if (!type metadata singleton initialization cache for NearbySession) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void NearbySession.handle(device:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (*(unsigned char *)(a1 + 16))
  {
    id v8 = *(void **)(a1 + 24);
    if (v8)
    {
      id v9 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x78);
      id v10 = v8;
      if ((v9() & 1) == 0)
      {
        id v11 = *(void **)((char *)v1
                       + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session);
        uint64_t v12 = *(void *)((char *)v2
                        + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_config
                        + 8);
        id v13 = objc_allocWithZone((Class)NIRegionPredicate);
        NSString v14 = String._bridgeToObjectiveC()();
        id v15 = [v13 initWithName:v14 devicePresencePreset:v12];

        id v16 = objc_allocWithZone((Class)NIRegionPredicate);
        NSString v17 = String._bridgeToObjectiveC()();
        id v18 = [v16 initWithName:v17 devicePresencePreset:5];

        id v19 = objc_allocWithZone((Class)NIDevicePresenceConfiguration);
        id v32 = 0;
        id v20 = v15;
        id v21 = v18;
        id v22 = [v19 initWithInnerBoundary:v20 outerBoundary:v21 error:&v32];
        if (!v22)
        {
          id v31 = v32;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_unexpectedError();
          __break(1u);
          return;
        }
        uint64_t v23 = v22;
        id v24 = v32;

        [v23 setAllowedDevices:4];
        [v23 setMonitoringOption:1];

        [v11 runWithConfiguration:v23];
      }
      id v25 = [*(id *)((char *)v2+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session) devicePresenceNotifier];
      [v25 notifyBluetoothSample:v10];

      return;
    }
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.host);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to create NIBluetoothSample, can't update ranging to the device.", v29, 2u);
      swift_slowDealloc();
    }

    id v30 = *(void (**)(uint64_t))((swift_isaMask & *v2) + 0xA0);
    v30(3);
  }
  else
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.host);
    NSString v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Device lost invitation", v6, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0xA0))(3);
    NSString v7 = *(void **)((char *)v2 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session);
    [v7 invalidate];
  }
}

Swift::Void __swiftcall NearbySession.invalidate()()
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 136315138;
    NSString v7 = *(void **)&v2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session];
    uint64_t v12 = v6;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NISession);
    id v8 = v7;
    uint64_t v9 = String.init<A>(reflecting:)();
    uint64_t v11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "NISession %s Invalidate", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session], "invalidate", v11, v12);
}

void NearbySession.init()()
{
}

id NearbySession.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbySession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall NearbySession.sessionDidStartRunning(_:)(NISession a1)
{
  objc_super v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  os_log_type_t v5 = a1.super.isa;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)id v8 = 136315138;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NISession);
    uint64_t v9 = v5;
    uint64_t v10 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "NISession %s Running", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x80))(1);
}

uint64_t NearbySession.session(_:didFailWithError:)(void *a1, uint64_t a2)
{
  return NearbySession.session(_:didFailWithError:)(a1, a2, "NISession %s Failed: %@");
}

uint64_t NearbySession.session(_:didInvalidateWith:)(void *a1, uint64_t a2)
{
  return NearbySession.session(_:didFailWithError:)(a1, a2, "NISession %s Invalidated: %@");
}

uint64_t NearbySession.session(_:didFailWithError:)(void *a1, uint64_t a2, const char *a3)
{
  os_log_type_t v5 = v3;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  id v8 = a1;
  swift_errorRetain();
  id v9 = v8;
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    id v13 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NISession);
    id v14 = v9;
    uint64_t v15 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain();
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v13 = v18;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, a3, (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(void))((swift_isaMask & *v5) + 0x80))(0);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v5) + 0xA0))(3);
}

uint64_t NearbySession.session(_:suspendedWith:)(void *a1)
{
  objc_super v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NISession);
    id v9 = v5;
    uint64_t v10 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "NISession %s Suspended: %ld", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(void))((swift_isaMask & *v2) + 0x80))(0);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xA0))(3);
}

void NearbySession.session(_:suspensionReasonEnded:isNoLongerSuspended:)(void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  id v8 = a1;
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    id v30 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315650;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NISession);
    id v12 = v8;
    uint64_t v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)&v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 22) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "NISession %s Suspension Ended: %ld, isActive: %{BOOL}d", (uint8_t *)v11, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if ((a3 & 1) == 0) {
      return;
    }
  }
  else
  {

    if ((a3 & 1) == 0) {
      return;
    }
  }
  uint64_t v15 = *(void **)(v4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session);
  uint64_t v16 = *(void *)(v4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_config + 8);
  id v17 = objc_allocWithZone((Class)NIRegionPredicate);
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v17 initWithName:v18 devicePresencePreset:v16];

  id v20 = objc_allocWithZone((Class)NIRegionPredicate);
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 initWithName:v21 devicePresencePreset:5];

  id v23 = objc_allocWithZone((Class)NIDevicePresenceConfiguration);
  id v30 = 0;
  id v24 = v19;
  id v25 = v22;
  id v26 = [v23 initWithInnerBoundary:v24 outerBoundary:v25 error:&v30];
  if (v26)
  {
    uint64_t v27 = v26;
    id v28 = v30;

    [v27 setAllowedDevices:4];
    [v27 setMonitoringOption:1];

    [v15 runWithConfiguration:v27];
  }
  else
  {
    id v29 = v30;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
  }
}

Swift::Void __swiftcall NearbySession.session(_:didDiscover:)(NISession _, NINearbyObject didDiscover)
{
  id v5 = [(objc_class *)didDiscover.super.isa deviceIdentifier];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xB8))();
  if (v9)
  {
    if (v7 == v10 && v9 == v11)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0) {
        return;
      }
    }
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.host);
    uint64_t v15 = _.super.isa;
    uint64_t v16 = didDiscover.super.isa;
    id v26 = v15;
    id v17 = v16;
    NSString v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      NSString v21 = (void *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315394;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NISession);
      id v22 = v26;
      uint64_t v23 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2112;
      id v25 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v21 = v17;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "NISession %s discovered device: %@", (uint8_t *)v20, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void NearbySession.session(_:object:didUpdateRegion:previousRegion:)(uint64_t a1, void *a2, void *a3)
{
}

void NearbySession.session(_:didUpdateAlgorithmState:for:)(uint64_t a1, void *a2)
{
}

void specialized NearbySession.session(_:object:didUpdateRegion:previousRegion:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v6 = [a1 deviceIdentifier];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    if (v8 == (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0xB8))() && v10 == v11)
    {
      swift_bridgeObjectRelease_n();
      if (a2)
      {
LABEL_8:
        id v14 = [a2 name];
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v17 = v16;

        if (v15 == 0x72656E6E69 && v17 == 0xE500000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0xA0))(1);
          goto LABEL_31;
        }
        if (v15 == 0x726574756FLL && v17 == 0xE500000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0xA0))(2);
          goto LABEL_31;
        }
        if (one-time initialization token for host != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        __swift_project_value_buffer(v29, (uint64_t)static Log.host);
        swift_bridgeObjectRetain();
        id v26 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v26, v30))
        {

          swift_bridgeObjectRelease_n();
LABEL_31:
          if (*((unsigned char *)v3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_config) == 1) {
            [*(id *)((char *)v3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService13NearbySession_session) invalidate];
          }
          return;
        }
        id v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        *(_DWORD *)id v31 = 136446210;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v26, v30, "Unexpected Region: %{public}s", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_20;
      }
    }
    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0) {
        return;
      }
      if (a2) {
        goto LABEL_8;
      }
    }
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.host);
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v27)) {
      goto LABEL_21;
    }
    id v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unexpected Region: none", v28, 2u);
LABEL_20:
    swift_slowDealloc();
LABEL_21:

    goto LABEL_31;
  }
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.host);
  id v32 = a1;
  os_log_type_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    NSString v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)NSString v21 = 136315138;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NINearbyObject);
    id v22 = v32;
    uint64_t v23 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Found object but doesn't have a deviceIdentifier. Object: %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void specialized NearbySession.session(_:didUpdateAlgorithmState:for:)(void *a1)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  id v8 = a1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    id v6 = (void *)swift_slowAlloc();
    *(_DWORD *)id v5 = 138412290;
    id v7 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v6 = v8;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Algorithm state updated: %@", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

unint64_t lazy protocol witness table accessor for type NearbySession.RangedDevice.Location and conformance NearbySession.RangedDevice.Location()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbySession.RangedDevice.Location and conformance NearbySession.RangedDevice.Location;
  if (!lazy protocol witness table cache variable for type NearbySession.RangedDevice.Location and conformance NearbySession.RangedDevice.Location)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbySession.RangedDevice.Location and conformance NearbySession.RangedDevice.Location);
  }
  return result;
}

uint64_t sub_100098F4C@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x78))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_100098FAC(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0x80))(*a1);
}

uint64_t sub_100099004@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x98))();
  *a2 = result;
  return result;
}

uint64_t sub_100099060(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **a2) + 0xA0))(*a1);
}

uint64_t sub_1000990B8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xB8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100099114(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0xC0);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t ObjC metadata update function for NearbySession()
{
  return type metadata accessor for NearbySession();
}

void type metadata completion function for NearbySession()
{
  type metadata accessor for CurrentSubject<Bool>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CurrentSubject<NearbySession.RangedDevice?>();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for CurrentSubject<Bool>()
{
  if (!lazy cache variable for type metadata for CurrentSubject<Bool>)
  {
    unint64_t v0 = type metadata accessor for CurrentSubject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CurrentSubject<Bool>);
    }
  }
}

void type metadata accessor for CurrentSubject<NearbySession.RangedDevice?>()
{
  if (!lazy cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for NearbySession.RangedDevice?);
    unint64_t v0 = type metadata accessor for CurrentSubject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CurrentSubject<NearbySession.RangedDevice?>);
    }
  }
}

ValueMetadata *type metadata accessor for NearbySession.RangedDevice()
{
  return &type metadata for NearbySession.RangedDevice;
}

unsigned char *storeEnumTagSinglePayload for NearbySession.RangedDevice(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100099418);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySession.RangedDevice.Location()
{
  return &type metadata for NearbySession.RangedDevice.Location;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  id v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  id v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  id v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  __chkstk_darwin(v13);
  uint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  __chkstk_darwin(v17);
  os_log_type_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  os_log_type_t v27 = v15;
  uint64_t v43 = ContiguousArray.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  uint64_t v41 = v19;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    id v37 = v23;
    unint64_t v24 = v27;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

void *FilteredBluetoothScanner.__allocating_init(scanner:config:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  unsigned int v4 = specialized FilteredBluetoothScanner.init(scanner:config:)(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  swift_release();
  return v4;
}

__n128 FilteredBluetoothScanner.FilteredDevice.device.getter@<Q0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a2 + 48))(v7, a1, a2);
  long long v4 = v7[5];
  *(_OWORD *)(a3 + 64) = v7[4];
  *(_OWORD *)(a3 + 80) = v4;
  *(void *)(a3 + 96) = v8;
  long long v5 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v5;
  __n128 result = (__n128)v7[3];
  *(_OWORD *)(a3 + 32) = v7[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t FilteredBluetoothScanner.cancellables.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*FilteredBluetoothScanner.cancellables.modify())()
{
  return NearbyInvitationAdvertiser.listeners.modify;
}

uint64_t FilteredBluetoothScanner.FilteredDevice.filter.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t FilteredBluetoothScanner.FilteredDevice.filter.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t FilteredBluetoothScanner.FilteredDevice.shouldHandleUpdates(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a2 && a1[1] == a3) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t FilteredBluetoothScanner.showDeviceObservers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilteredBluetoothScanner.showDeviceObservers.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t property wrapper backing initializer of FilteredBluetoothScanner.filteredDevices()
{
  return CurrentSubject.init(wrappedValue:)();
}

uint64_t FilteredBluetoothScanner.filteredDevices.getter()
{
  uint64_t v1 = *(void *)v0;
  type metadata accessor for FilteredBluetoothScanner.FilteredDevice();
  type metadata accessor for Array();
  uint64_t v2 = type metadata accessor for CurrentSubject();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  long long v5 = (char *)v7 - v4;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)v7 - v4, &v0[*(void *)(v1 + 112)], v2);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7[1];
}

uint64_t FilteredBluetoothScanner.filteredDevices.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  type metadata accessor for FilteredBluetoothScanner.FilteredDevice();
  type metadata accessor for Array();
  uint64_t v4 = type metadata accessor for CurrentSubject();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v9 - v6;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v9 - v6, &v1[*(void *)(v3 + 112)], v4);
  v9[1] = a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void (*FilteredBluetoothScanner.filteredDevices.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  type metadata accessor for FilteredBluetoothScanner.FilteredDevice();
  type metadata accessor for Array();
  uint64_t v3 = type metadata accessor for CurrentSubject();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  v2[6] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify();
  return BluetoothScanner.devices.modify;
}

uint64_t FilteredBluetoothScanner.$filteredDevices.getter()
{
  uint64_t v1 = *(void *)v0;
  type metadata accessor for FilteredBluetoothScanner.FilteredDevice();
  type metadata accessor for Array();
  uint64_t v2 = type metadata accessor for CurrentSubject();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - v4;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)&v8 - v4, &v0[*(void *)(v1 + 112)], v2);
  uint64_t v6 = CurrentSubject.projectedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v6;
}

void *FilteredBluetoothScanner.init(scanner:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = specialized FilteredBluetoothScanner.init(scanner:config:)(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  swift_release();
  return v3;
}

uint64_t closure #1 in FilteredBluetoothScanner.init(scanner:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v51 = a4;
    char v59 = (uint64_t *)result;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.host);
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      uint64_t v11 = (*(uint64_t (**)(void))(*(void *)a3 + 104))();
      int64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        os_log_type_t v47 = v9;
        uint64_t v48 = v10;
        objc_super v49 = v8;
        uint64_t v50 = a3;
        uint64_t v73 = _swiftEmptyArrayStorage;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
        uint64_t v13 = 0;
        uint64_t v14 = _swiftEmptyArrayStorage;
        uint64_t v52 = v11;
        do
        {
          uint64_t v15 = *(void *)(v11 + v13 + 40);
          uint64_t v58 = *(void *)(v11 + v13 + 32);
          uint64_t v16 = *(void *)(v11 + v13 + 64);
          uint64_t v17 = *(void *)(v11 + v13 + 72);
          int v56 = *(_DWORD *)(v11 + v13 + 80);
          char v57 = *(unsigned char *)(v11 + v13 + 48);
          uint64_t v18 = *(void *)(v11 + v13 + 104);
          uint64_t v54 = *(void *)(v11 + v13 + 96);
          uint64_t v55 = *(void *)(v11 + v13 + 88);
          char v53 = *(unsigned char *)(v11 + v13 + 112);
          uint64_t v60 = *(void **)(v11 + v13 + 56);
          id v19 = v60;
          swift_bridgeObjectRetain();
          outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v16, v17);
          uint64_t v73 = v14;
          unint64_t v21 = v14[2];
          unint64_t v20 = v14[3];
          swift_bridgeObjectRetain();
          if (v21 >= v20 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
            uint64_t v14 = v73;
          }
          void v14[2] = v21 + 1;
          id v22 = &v14[11 * v21];
          v22[4] = v58;
          long long v22[5] = v15;
          *((unsigned char *)v22 + 48) = v57;
          v22[7] = v60;
          v22[8] = v16;
          v22[9] = v17;
          *((_DWORD *)v22 + 20) = v56;
          v22[11] = v55;
          v22[12] = v54;
          v22[13] = v18;
          *((unsigned char *)v22 + 112) = v53;
          v13 += 104;
          --v12;
          uint64_t v11 = v52;
        }
        while (v12);
        swift_bridgeObjectRelease();
        a3 = v50;
        uint64_t v8 = v49;
        uint64_t v10 = v48;
        os_log_type_t v9 = v47;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = _swiftEmptyArrayStorage;
      }
      uint64_t v73 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [BluetoothScannerDiscoveryEngineDevice]);
      uint64_t v23 = String.init<A>(reflecting:)();
      uint64_t v73 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Learned about updated BT devices: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    type metadata accessor for FilteredBluetoothScanner.FilteredDevice();
    uint64_t v25 = Array.init()();
    uint64_t v73 = (void *)v25;
    uint64_t v61 = (*(uint64_t (**)(void))(*(void *)a3 + 104))();
    uint64_t v26 = *(void *)(v61 + 16);
    if (v26)
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = *(void *)(v61 + v27 + 120);
        uint64_t v29 = *(void *)(v61 + v27 + 128);
        char v30 = *(unsigned char *)(v61 + v27 + 112);
        uint64_t v31 = *(void *)(v61 + v27 + 104);
        int v32 = *(_DWORD *)(v61 + v27 + 80);
        uint64_t v34 = *(void *)(v61 + v27 + 64);
        uint64_t v33 = *(void *)(v61 + v27 + 72);
        uint64_t v35 = *(void **)(v61 + v27 + 56);
        char v36 = *(unsigned char *)(v61 + v27 + 48);
        uint64_t v37 = *(void *)(v61 + v27 + 40);
        v62[0] = *(void *)(v61 + v27 + 32);
        v62[1] = v37;
        char v63 = v36;
        uint64_t v64 = v35;
        uint64_t v65 = v34;
        uint64_t v66 = v33;
        int v67 = v32;
        long long v68 = *(_OWORD *)(v61 + v27 + 88);
        uint64_t v69 = v31;
        char v70 = v30;
        uint64_t v71 = v28;
        uint64_t v72 = v29;
        id v38 = v35;
        swift_bridgeObjectRetain();
        outlined copy of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v34, v33);
        swift_bridgeObjectRetain();
        swift_retain();
        closure #2 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)((uint64_t)v62, v59, (uint64_t)&v73, v51);
        swift_bridgeObjectRelease();

        outlined consume of BluetoothScannerDiscoveryEngineDevice.ContactInfo?(v34, v33);
        swift_bridgeObjectRelease();
        swift_release();
        v27 += 104;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
      uint64_t v25 = (uint64_t)v73;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v62[0] = v25;
    uint64_t v39 = type metadata accessor for Array();
    uint64_t v40 = type metadata accessor for AnyCancellable();
    swift_bridgeObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable();
    unint64_t v43 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:), (uint64_t)v59, v39, v40, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v42);
    swift_bridgeObjectRelease();
    uint64_t v44 = specialized Set.init<A>(_:)(v43);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*v59 + 152))(v44);
    unint64_t v45 = *(void (**)(uint64_t))(*v59 + 176);
    uint64_t v46 = swift_bridgeObjectRetain();
    v45(v46);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #2 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a4;
  uint64_t v26 = a3;
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*a2 + 88);
  uint64_t v7 = *(void *)(*a2 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v23 - v9;
  long long v11 = *(_OWORD *)(a1 + 80);
  unsigned char v33[4] = *(_OWORD *)(a1 + 64);
  uint64_t v33[5] = v11;
  uint64_t v34 = *(void *)(a1 + 96);
  long long v12 = *(_OWORD *)(a1 + 16);
  v33[0] = *(_OWORD *)a1;
  v33[1] = v12;
  long long v13 = *(_OWORD *)(a1 + 48);
  id v33[2] = *(_OWORD *)(a1 + 32);
  v33[3] = v13;
  uint64_t v14 = *((void *)&v33[0] + 1);
  uint64_t v23 = *(void *)&v33[0];
  uint64_t v15 = *(uint64_t (**)(uint64_t))(v5 + 168);
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v35 = v15(v16);
  uint64_t v27 = v7;
  uint64_t v28 = v6;
  uint64_t v29 = v33;
  type metadata accessor for FilteredBluetoothScanner.FilteredDevice();
  type metadata accessor for Array();
  swift_getWitnessTable();
  Sequence.first(where:)();
  swift_bridgeObjectRelease();
  uint64_t v17 = v31;
  if (v31)
  {
    uint64_t v18 = v32;
    uint64_t v19 = v30;
    swift_bridgeObjectRelease();
    (*(void (**)(_OWORD *, uint64_t, uint64_t))(v6 + 32))(v33, v7, v6);
    uint64_t v30 = v19;
    uint64_t v31 = v17;
    uint64_t v32 = v18;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v10, v25, AssociatedTypeWitness);
    unint64_t v20 = *(uint64_t (**)(_OWORD *, char *, uint64_t, uint64_t))(v6 + 24);
    outlined retain of BluetoothScanner.Device((uint64_t)v33);
    uint64_t v21 = v20(v33, v10, v7, v6);
    uint64_t v30 = v23;
    uint64_t v31 = v14;
    uint64_t v32 = v21;
  }
  return Array.append(_:)();
}

uint64_t closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v13 = a2;
  uint64_t v2 = *(void *)(*(void *)a1 + 88);
  uint64_t v3 = *(void *)(*(void *)a1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v7 = (char *)&v12 - v6;
  dispatch thunk of ObservableObject.objectWillChange.getter();
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = v3;
  long long v9[3] = v2;
  v9[4] = v8;
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v10 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  uint64_t result = swift_release();
  *long long v13 = v10;
  return result;
}

uint64_t FilteredBluetoothScanner.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 112);
  type metadata accessor for FilteredBluetoothScanner.FilteredDevice();
  type metadata accessor for Array();
  uint64_t v2 = type metadata accessor for CurrentSubject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t FilteredBluetoothScanner.__deallocating_deinit()
{
  FilteredBluetoothScanner.deinit();
  return swift_deallocClassInstance();
}

void *specialized FilteredBluetoothScanner.init(scanner:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v25 = a2;
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 88);
  uint64_t v7 = *(void *)(*v3 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v23[2] = *(void *)(v8 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  v23[0] = (char *)v23 - v9;
  uint64_t v10 = v6;
  type metadata accessor for FilteredBluetoothScanner.FilteredDevice();
  type metadata accessor for Array();
  uint64_t v11 = type metadata accessor for CurrentSubject();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v23 - v13;
  v3[2] = &_swiftEmptySetSingleton;
  v23[1] = v3 + 2;
  v3[3] = &_swiftEmptySetSingleton;
  uint64_t v15 = (char *)v3 + *(void *)(v5 + 112);
  Array.init()();
  property wrapper backing initializer of FilteredBluetoothScanner.filteredDevices();
  uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v15, v14, v11);
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(v16);
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = v23[0];
  uint64_t v19 = AssociatedTypeWitness;
  (*(void (**)(void, uint64_t, uint64_t))(v8 + 16))(v23[0], v25, AssociatedTypeWitness);
  unint64_t v20 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = v7;
  *((void *)v21 + 3) = v10;
  *((void *)v21 + 4) = v17;
  *((void *)v21 + 5) = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(&v21[v20], v18, v19);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[BluetoothScanner.Device], Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<[BluetoothScanner.Device], Never> and conformance CurrentValueSubject<A, B>();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  return v3;
}

uint64_t type metadata accessor for FilteredBluetoothScanner.FilteredDevice()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_10009B04C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_10009B098(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 128);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_10009B0EC()
{
  return 16;
}

__n128 sub_10009B0F8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10009B104@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_10009B150(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 152);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_10009B1A4()
{
  return 16;
}

__n128 sub_10009B1B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10009B1BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_10009B208(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_10009B25C()
{
  return 16;
}

__n128 sub_10009B268(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for FilteredBluetoothScanner()
{
  type metadata accessor for FilteredBluetoothScanner.FilteredDevice();
  type metadata accessor for Array();
  uint64_t result = type metadata accessor for CurrentSubject();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for FilteredBluetoothScanner()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for FilteredBluetoothScanner.FilteredDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t destroy for FilteredBluetoothScanner.FilteredDevice()
{
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for FilteredBluetoothScanner.FilteredDevice(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for FilteredBluetoothScanner.FilteredDevice(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for FilteredBluetoothScanner.FilteredDevice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FilteredBluetoothScanner.FilteredDevice(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FilteredBluetoothScanner.FilteredDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_10009B51C()
{
  swift_weakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009B554()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in FilteredBluetoothScanner.init(scanner:config:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return closure #1 in FilteredBluetoothScanner.init(scanner:config:)(a1, v4, v5, v6);
}

unint64_t lazy protocol witness table accessor for type CurrentValueSubject<[BluetoothScanner.Device], Never> and conformance CurrentValueSubject<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrentValueSubject<[BluetoothScanner.Device], Never> and conformance CurrentValueSubject<A, B>;
  if (!lazy protocol witness table cache variable for type CurrentValueSubject<[BluetoothScanner.Device], Never> and conformance CurrentValueSubject<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CurrentValueSubject<[BluetoothScanner.Device], Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<[BluetoothScanner.Device], Never> and conformance CurrentValueSubject<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)(v1, a1);
}

uint64_t sub_10009B758()
{
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)()
{
  return specialized closure #1 in closure #3 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in FilteredBluetoothScanner.init(scanner:config:)(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 32);
  if (*v2 == *a1 && v2[1] == a1[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t NearbyGroupHostIDSService.MessageEvents.makeAsyncIterator()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner);
  uint64_t v0 = swift_allocObject();
  swift_retain();
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = static Subscribers.Demand.none.getter();
  *uint64_t v1 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner and conformance _PublisherElements<A>.Iterator.Inner, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>.Iterator.Inner);
  Publisher.subscribe<A>(_:)();
  swift_release();
  return v0;
}

void NearbyGroupHostIDSService.distributeAdd(for:addingMember:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v153 = type metadata accessor for Logger();
  uint64_t v149 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  unint64_t v148 = &v139[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v159 = type metadata accessor for UUID();
  uint64_t v155 = *(void *)(v159 - 8);
  uint64_t v7 = __chkstk_darwin(v159);
  v152 = (void (*)(void))&v139[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v146 = &v139[-v10];
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v139[-v12];
  __chkstk_darwin(v11);
  v157 = &v139[-v14];
  uint64_t v154 = type metadata accessor for NearbyGroup_Group(0);
  uint64_t v15 = __chkstk_darwin(v154);
  uint64_t v17 = &v139[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = __chkstk_darwin(v15);
  v158 = &v139[-v19];
  unint64_t v20 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8);
  uint64_t v21 = v20(v18);
  if ((v21 & 0xC000000000000001) != 0) {
    uint64_t v22 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v22 = *(void *)(v21 + 16);
  }
  uint64_t v23 = swift_bridgeObjectRelease();
  if (v22)
  {
    __chkstk_darwin(v23);
    uint64_t v150 = lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup_Group and conformance NearbyGroup_Group, (void (*)(uint64_t))type metadata accessor for NearbyGroup_Group);
    uint64_t v24 = v160;
    uint64_t v25 = static Message.with(_:)();
    uint64_t v160 = v24;
    uint64_t v26 = v20(v25);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1000D61E0;
    *(void *)(inited + 32) = a2;
    v163[0] = inited;
    specialized Array._endMutation()();
    uint64_t v28 = v163[0];
    uint64_t v145 = a1;
    if ((v26 & 0xC000000000000001) != 0)
    {
      if (v26 < 0) {
        uint64_t v29 = v26;
      }
      else {
        uint64_t v29 = v26 & 0xFFFFFFFFFFFFFF8;
      }
      id v30 = a2;
      swift_bridgeObjectRetain();
      uint64_t v31 = __CocoaSet.count.getter();
      Swift::Int v32 = specialized _NativeSet.init(_:capacity:)(v29, v31);
      swift_bridgeObjectRelease();
      uint64_t v26 = v32;
    }
    else
    {
      id v39 = a2;
    }
    uint64_t v40 = v159;
    uint64_t v41 = v157;
    unint64_t v42 = (unint64_t)specialized _NativeSet.subtracting<A>(_:)(v28, v26);
    swift_bridgeObjectRelease();
    UUID.init()();
    unint64_t v43 = v158;
    uint64_t v44 = v155;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v45 = __swift_project_value_buffer(v153, (uint64_t)static Log.host);
    uint64_t v46 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v44 + 16);
    uint64_t v144 = v44 + 16;
    v143 = (void (*)(void (*)(void), unsigned char *, uint64_t))v46;
    v46(v13, v41, v40);
    outlined init with copy of NearbyGroup_Group((uint64_t)v43, (uint64_t)v17, type metadata accessor for NearbyGroup_Group);
    id v47 = v3;
    swift_retain_n();
    uint64_t v48 = (char *)v47;
    v151 = (void (*)(void, void))v17;
    objc_super v49 = v48;
    uint64_t v147 = v45;
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    int v52 = v51;
    BOOL v53 = os_log_type_enabled(v50, v51);
    v156 = (void *)v42;
    if (v53)
    {
      uint64_t v54 = swift_slowAlloc();
      uint64_t v55 = v49;
      int v56 = (void *)swift_slowAlloc();
      uint64_t v142 = swift_slowAlloc();
      v163[0] = v142;
      *(_DWORD *)uint64_t v54 = 138413058;
      os_log_t v141 = v50;
      id v166 = v55;
      char v57 = v55;
      int v140 = v52;
      uint64_t v58 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v56 = v55;

      *(_WORD *)(v54 + 12) = 2080;
      lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
      id v166 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v61 = *(void (**)(unsigned char *, uint64_t))(v44 + 8);
      v61(v13, v159);
      *(_WORD *)(v54 + 22) = 2080;
      char v62 = v151;
      uint64_t v63 = Message.debugDescription.getter();
      id v166 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of NearbyGroup_Group((uint64_t)v62, type metadata accessor for NearbyGroup_Group);
      *(_WORD *)(v54 + 32) = 2080;
      uint64_t v41 = v157;
      type metadata accessor for NearbyGroupMember();
      lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (void (*)(uint64_t))&type metadata accessor for NearbyGroupMember);
      swift_retain();
      uint64_t v65 = Set.description.getter();
      unint64_t v67 = v66;
      swift_release();
      id v166 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v67, v163);
      unint64_t v68 = (unint64_t)v156;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v69 = v141;
      _os_log_impl((void *)&_mh_execute_header, v141, (os_log_type_t)v140, "%@ Distributing addMember event (%s) %s to %s", (uint8_t *)v54, 0x2Au);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v40 = v159;
      swift_slowDealloc();

      objc_super v49 = v55;
      if ((v68 & 0xC000000000000001) != 0)
      {
LABEL_19:
        uint64_t v70 = __CocoaSet.count.getter();
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v68 = v42;

      uint64_t v61 = *(void (**)(unsigned char *, uint64_t))(v44 + 8);
      v61(v13, v40);
      outlined destroy of NearbyGroup_Group((uint64_t)v151, type metadata accessor for NearbyGroup_Group);

      swift_release_n();
      if ((v42 & 0xC000000000000001) != 0) {
        goto LABEL_19;
      }
    }
    uint64_t v70 = *(void *)(v68 + 16);
LABEL_22:
    v151 = (void (*)(void, void))v61;
    if (v70)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
      uint64_t v71 = swift_initStackObject();
      *(_OWORD *)(v71 + 16) = xmmword_1000D7980;
      *(void *)(v71 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v71 + 40) = v72;
      *(NSNumber *)(v71 + 48) = Int._bridgeToObjectiveC()();
      *(void *)(v71 + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v71 + 64) = v73;
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      *(NSNumber *)(v71 + 72) = NSNumber.init(BOOLeanLiteral:)(1);
      *(void *)(v71 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v71 + 88) = v74;
      uint64_t v75 = v145;
      uint64_t v76 = (swift_isaMask & *v145) + 256;
      v152 = *(void (**)(void))((swift_isaMask & *v145) + 0x100);
      v152();
      NSString v77 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v78 = IDSCopyBestGuessIDForID();

      if (v78)
      {
        *(void *)(v71 + 96) = v78;
        unint64_t v79 = specialized Dictionary.init(dictionaryLiteral:)(v71);
        uint64_t v80 = (uint64_t)&v49[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service];
        uint64_t v81 = *(void *)&v49[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service
                            + 32];
        __swift_project_boxed_opaque_existential_1(&v49[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service], *(void *)&v49[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service+ 24]);
        uint64_t v82 = ((uint64_t (*)(void))v152)();
        uint64_t v142 = v76;
        uint64_t v83 = (void (*)(void))(*(uint64_t (**)(uint64_t))(v81 + 64))(v82);
        swift_bridgeObjectRelease();
        if (v83)
        {
          v152 = v83;
          id v166 = 0;
          outlined init with copy of PseudonymProtocol(v80, (uint64_t)v163);
          uint64_t v84 = v164;
          uint64_t v85 = v165;
          __swift_project_boxed_opaque_existential_1(v163, v164);
          uint64_t v86 = v158;
          uint64_t v87 = v160;
          uint64_t v88 = Message.serializedData(partial:)();
          if (v87)
          {
            swift_release();

            swift_bridgeObjectRelease();
            v151(v157, v159);
            outlined destroy of NearbyGroup_Group((uint64_t)v86, type metadata accessor for NearbyGroup_Group);
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v163);
          }
          else
          {
            uint64_t v116 = v88;
            unint64_t v117 = v89;
            uint64_t v118 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v79);
            swift_bridgeObjectRelease();
            id v162 = 0;
            (*(void (**)(uint64_t, unint64_t, void (*)(void), void *, uint64_t, uint64_t, id *, uint64_t, uint64_t))(v85 + 56))(v116, v117, v152, v156, 300, v118, &v162, v84, v85);
            uint64_t v160 = 0;
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v116, v117);
            swift_release();
            id v166 = v162;
            id v120 = v162;
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v163);
            uint64_t v121 = v149;
            uint64_t v122 = v148;
            uint64_t v123 = v153;
            (*(void (**)(unsigned char *, uint64_t, uint64_t))(v149 + 16))(v148, v147, v153);
            uint64_t v124 = v146;
            uint64_t v125 = v157;
            uint64_t v126 = v159;
            v143((void (*)(void))v146, v157, v159);
            uint64_t v127 = Logger.logObject.getter();
            os_log_type_t v128 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v127, v128))
            {
              uint64_t v129 = swift_slowAlloc();
              id v162 = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v129 = 136315394;
              lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v130 = dispatch thunk of CustomStringConvertible.description.getter();
              v163[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v131, (uint64_t *)&v162);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              v151(v124, v126);
              *(_WORD *)(v129 + 12) = 2080;
              swift_beginAccess();
              id v132 = v166;
              if (v166)
              {
                uint64_t v161 = (uint64_t)v166;
                type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSString);
                id v133 = v132;
                uint64_t v134 = String.init<A>(reflecting:)();
                unint64_t v136 = v135;
              }
              else
              {
                unint64_t v136 = 0xE300000000000000;
                uint64_t v134 = 7104878;
              }
              uint64_t v138 = v148;
              uint64_t v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v136, (uint64_t *)&v162);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v127, v128, "Distribution of addMember event (%s) sent with ID %s", (uint8_t *)v129, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(unsigned char *, uint64_t))(v149 + 8))(v138, v153);
              v151(v157, v159);
            }
            else
            {

              uint64_t v137 = (void (*)(unsigned char *, uint64_t))v151;
              v151(v124, v126);
              (*(void (**)(unsigned char *, uint64_t))(v121 + 8))(v122, v123);
              v137(v125, v126);
            }
            outlined destroy of NearbyGroup_Group((uint64_t)v158, type metadata accessor for NearbyGroup_Group);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v102 = v49;
          id v103 = v75;
          uint64_t v104 = v102;
          id v105 = v103;
          unint64_t v106 = Logger.logObject.getter();
          os_log_type_t v107 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v106, v107))
          {
            uint64_t v108 = swift_slowAlloc();
            v156 = (void *)swift_slowAlloc();
            uint64_t v160 = swift_slowAlloc();
            v163[0] = v160;
            *(_DWORD *)uint64_t v108 = 138412546;
            id v166 = v104;
            uint64_t v109 = v104;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v156 = v104;

            *(_WORD *)(v108 + 12) = 2080;
            uint64_t v110 = ((uint64_t (*)(void))v152)();
            id v166 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, v163);
            unint64_t v112 = (void (*)(unsigned char *, uint64_t))v151;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v106, v107, "%@ couldn't find account to send message from with handle: %s", (uint8_t *)v108, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v113 = v158;
            uint64_t v114 = v157;
          }
          else
          {

            uint64_t v113 = v158;
            uint64_t v114 = v157;
            unint64_t v112 = (void (*)(unsigned char *, uint64_t))v151;
          }
          lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
          swift_allocError();
          *Swift::Int v119 = 1;
          swift_willThrow();
          v112(v114, v159);
          outlined destroy of NearbyGroup_Group((uint64_t)v113, type metadata accessor for NearbyGroup_Group);
        }
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      swift_release();
      uint64_t v90 = v152;
      v143(v152, v41, v40);
      int v91 = v49;
      uint64_t v92 = Logger.logObject.getter();
      os_log_type_t v93 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v92, v93))
      {
        uint64_t v94 = swift_slowAlloc();
        uint64_t v95 = (void *)swift_slowAlloc();
        v156 = (void *)swift_slowAlloc();
        v163[0] = (uint64_t)v156;
        *(_DWORD *)uint64_t v94 = 138412546;
        id v166 = v91;
        uint64_t v96 = v91;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v95 = v91;

        *(_WORD *)(v94 + 12) = 2080;
        lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v97 = v152;
        uint64_t v98 = v159;
        uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter();
        id v166 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, v163);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        id v101 = (void (*)(unsigned char *, uint64_t))v151;
        v151(v97, v98);
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "%@ Not distributing addMember event %s since there are no destinations", (uint8_t *)v94, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v101(v157, v98);
      }
      else
      {

        uint64_t v115 = (void (*)(unsigned char *, uint64_t))v151;
        v151(v90, v40);

        v115(v41, v40);
      }
      outlined destroy of NearbyGroup_Group((uint64_t)v158, type metadata accessor for NearbyGroup_Group);
    }
    return;
  }
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v153, (uint64_t)static Log.host);
  id v33 = v2;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    char v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = (void *)swift_slowAlloc();
    *(_DWORD *)char v36 = 138412290;
    v163[0] = (uint64_t)v33;
    id v38 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v37 = v33;

    _os_log_impl((void *)&_mh_execute_header, v34, v35, "%@ asked to distribute add to nobody else.", v36, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void NearbyGroupHostIDSService.distributeGroupInitialization(for:to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v121 = &v112[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v112[-v11];
  __chkstk_darwin(v10);
  uint64_t v14 = &v112[-v13];
  id v133 = (void *)type metadata accessor for NearbyGroup_Group(0);
  uint64_t v15 = __chkstk_darwin(v133);
  uint64_t v17 = &v112[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  uint64_t v134 = &v112[-v18];
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter())
    {
LABEL_3:
      uint64_t v127 = a2;
      uint64_t v132 = v7;
      uint64_t v129 = v6;
      uint64_t v19 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x100);
      uint64_t v125 = (swift_isaMask & *a1) + 256;
      uint64_t v130 = (void (*)(void))v19;
      uint64_t v20 = v19();
      os_log_type_t v128 = v14;
      (*(void (**)(uint64_t))((swift_isaMask & *a1) + 0x108))(v20);
      Class v119 = (Class)type metadata accessor for NearbyGroupMember();
      id v21 = objc_allocWithZone(v119);
      uint64_t v22 = v128;
      uint64_t v23 = NearbyGroupMember.init(handle:tokenID:)();
      id v122 = (id)__chkstk_darwin(v23);
      uint64_t v124 = lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup_Group and conformance NearbyGroup_Group, (void (*)(uint64_t))type metadata accessor for NearbyGroup_Group);
      uint64_t v24 = v131;
      static Message.with(_:)();
      id v120 = v24;
      UUID.init()();
      if (one-time initialization token for host != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Log.host);
      uint64_t v27 = v132;
      uint64_t v28 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v132 + 16);
      uint64_t v29 = v129;
      uint64_t v117 = v132 + 16;
      uint64_t v116 = v28;
      v28(v12, v22, v129);
      outlined init with copy of NearbyGroup_Group((uint64_t)v134, (uint64_t)v17, type metadata accessor for NearbyGroup_Group);
      id v30 = v3;
      uint64_t v31 = a1;
      swift_bridgeObjectRetain_n();
      Swift::Int v32 = v30;
      uint64_t v126 = v31;
      uint64_t v118 = v26;
      id v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      int v35 = v34;
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v36 = swift_slowAlloc();
        unint64_t v131 = v32;
        uint64_t v37 = v36;
        id v38 = (void *)swift_slowAlloc();
        uint64_t v115 = swift_slowAlloc();
        v137[0] = v115;
        *(_DWORD *)uint64_t v37 = 138413314;
        os_log_t v114 = v33;
        id v140 = v131;
        id v39 = v131;
        int v113 = v35;
        id v40 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v38 = v131;

        *(_WORD *)(v37 + 12) = 2080;
        lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
        id v140 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v123 = *(void (**)(unsigned char *, uint64_t))(v132 + 8);
        v123(v12, v29);
        *(_WORD *)(v37 + 22) = 2080;
        uint64_t v43 = Message.debugDescription.getter();
        id v140 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of NearbyGroup_Group((uint64_t)v17, type metadata accessor for NearbyGroup_Group);
        *(_WORD *)(v37 + 32) = 2080;
        id v45 = v126;
        id v46 = [v126 description];
        uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v49 = v48;

        id v140 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 42) = 2080;
        lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (void (*)(uint64_t))&type metadata accessor for NearbyGroupMember);
        swift_bridgeObjectRetain();
        uint64_t v50 = Set.description.getter();
        unint64_t v52 = v51;
        swift_bridgeObjectRelease();
        id v140 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        os_log_t v53 = v114;
        _os_log_impl((void *)&_mh_execute_header, v114, (os_log_type_t)v113, "%@ Distributing initialization event (%s) %s to %s and members %s", (uint8_t *)v37, 0x34u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        Swift::Int v32 = v131;
        swift_slowDealloc();
      }
      else
      {

        uint64_t v123 = *(void (**)(unsigned char *, uint64_t))(v27 + 8);
        v123(v12, v29);
        outlined destroy of NearbyGroup_Group((uint64_t)v17, type metadata accessor for NearbyGroup_Group);

        swift_bridgeObjectRelease_n();
        id v61 = v126;
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1000D7980;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v63;
      *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
      *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 64) = v64;
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      *(NSNumber *)(inited + 72) = NSNumber.init(BOOLeanLiteral:)(1);
      *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 88) = v65;
      v130();
      NSString v66 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v67 = IDSCopyBestGuessIDForID();

      if (v67)
      {
        *(void *)(inited + 96) = v67;
        unint64_t v68 = specialized Dictionary.init(dictionaryLiteral:)(inited);
        uint64_t v69 = (uint64_t)v32
            + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service;
        uint64_t v70 = *(void *)((char *)v32
                        + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service
                        + 32);
        __swift_project_boxed_opaque_existential_1((void *)((char *)v32+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service), *(void *)((char *)v32+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service+ 24));
        uint64_t v71 = ((uint64_t (*)(void))v130)();
        uint64_t v72 = (void *)(*(uint64_t (**)(uint64_t))(v70 + 64))(v71);
        swift_bridgeObjectRelease();
        if (v72)
        {
          unint64_t v131 = v72;
          id v140 = 0;
          outlined init with copy of PseudonymProtocol(v69, (uint64_t)v137);
          uint64_t v74 = v138;
          uint64_t v73 = v139;
          __swift_project_boxed_opaque_existential_1(v137, v138);
          uint64_t v75 = v120;
          uint64_t v76 = Message.serializedData(partial:)();
          if (v75)
          {

            swift_bridgeObjectRelease();
            v123(v128, v129);
            outlined destroy of NearbyGroup_Group((uint64_t)v134, type metadata accessor for NearbyGroup_Group);
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v137);
          }
          else
          {
            uint64_t v88 = v76;
            unint64_t v89 = v77;
            uint64_t v90 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v68);
            swift_bridgeObjectRelease();
            id v136 = 0;
            (*(void (**)(uint64_t, unint64_t, void *, uint64_t, uint64_t, uint64_t, id *, uint64_t, uint64_t))(v73 + 56))(v88, v89, v131, v127, 300, v90, &v136, v74, v73);
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v88, v89);
            id v140 = v136;
            id v93 = v136;
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v137);
            uint64_t v94 = v121;
            uint64_t v95 = v128;
            uint64_t v96 = v129;
            v116(v121, v128, v129);
            swift_bridgeObjectRetain_n();
            uint64_t v97 = Logger.logObject.getter();
            os_log_type_t v98 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v97, v98))
            {
              uint64_t v99 = swift_slowAlloc();
              id v133 = (void *)swift_slowAlloc();
              id v136 = v133;
              *(_DWORD *)uint64_t v99 = 136315650;
              lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter();
              v137[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, (uint64_t *)&v136);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              uint64_t v102 = v132 + 8;
              v123(v94, v96);
              *(_WORD *)(v99 + 12) = 2080;
              swift_beginAccess();
              id v103 = v140;
              uint64_t v132 = v102;
              if (v140)
              {
                uint64_t v135 = (uint64_t)v140;
                type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSString);
                id v104 = v103;
                uint64_t v105 = String.init<A>(reflecting:)();
                unint64_t v107 = v106;
              }
              else
              {
                unint64_t v107 = 0xE300000000000000;
                uint64_t v105 = 7104878;
              }
              uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v107, (uint64_t *)&v136);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v99 + 22) = 2080;
              lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (void (*)(uint64_t))&type metadata accessor for NearbyGroupMember);
              swift_bridgeObjectRetain();
              uint64_t v109 = Set.description.getter();
              unint64_t v111 = v110;
              swift_bridgeObjectRelease();
              uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v111, (uint64_t *)&v136);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v97, v98, "Distribution of initialization event (%s) sent with ID %s and to members: %s", (uint8_t *)v99, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              v123(v128, v129);
            }
            else
            {
              swift_bridgeObjectRelease_n();

              uint64_t v108 = v123;
              v123(v94, v96);
              v108(v95, v96);
            }
            outlined destroy of NearbyGroup_Group((uint64_t)v134, type metadata accessor for NearbyGroup_Group);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v78 = v32;
          unint64_t v79 = v126;
          uint64_t v80 = v78;
          uint64_t v81 = v79;
          uint64_t v82 = Logger.logObject.getter();
          os_log_type_t v83 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v82, v83))
          {
            uint64_t v84 = swift_slowAlloc();
            unint64_t v131 = (void *)swift_slowAlloc();
            id v133 = (void *)swift_slowAlloc();
            v137[0] = (uint64_t)v133;
            *(_DWORD *)uint64_t v84 = 138412546;
            id v140 = v80;
            uint64_t v85 = v80;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *unint64_t v131 = v80;

            *(_WORD *)(v84 + 12) = 2080;
            uint64_t v86 = ((uint64_t (*)(void))v130)();
            id v140 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v137);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v82, v83, "%@ couldn't find account to send message from with handle: %s", (uint8_t *)v84, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          uint64_t v91 = v129;
          lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
          swift_allocError();
          *uint64_t v92 = 1;
          swift_willThrow();

          v123(v128, v91);
          outlined destroy of NearbyGroup_Group((uint64_t)v134, type metadata accessor for NearbyGroup_Group);
        }
      }
      else
      {
        __break(1u);
      }
      return;
    }
  }
  else if (*(void *)(a2 + 16))
  {
    goto LABEL_3;
  }
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  __swift_project_value_buffer(v54, (uint64_t)static Log.host);
  id v55 = v3;
  int v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    uint64_t v59 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v58 = 138412290;
    v137[0] = (uint64_t)v55;
    id v60 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v59 = v55;

    _os_log_impl((void *)&_mh_execute_header, v56, v57, "%@ asked to distribute initialization to nobody else.", v58, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void NearbyGroupHostIDSService.distributeRemove(for:removingMember:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v125 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v124 = (char *)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v140 = *(void *)(v6 - 8);
  uint64_t v141 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v135 = (void (*)(void))((char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v123 = (char *)&v120 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v120 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v120 - v14;
  uint64_t v16 = type metadata accessor for NearbyGroup_Group(0);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  id v21 = (char *)&v120 - v20;
  uint64_t v144 = a1;
  uint64_t v145 = a2;
  uint64_t v132 = lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup_Group and conformance NearbyGroup_Group, (void (*)(uint64_t))type metadata accessor for NearbyGroup_Group);
  id v133 = (void *)v16;
  uint64_t v22 = v139;
  uint64_t v23 = static Message.with(_:)();
  uint64_t v139 = v22;
  uint64_t v24 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8);
  uint64_t v137 = a1;
  uint64_t v143 = v24(v23);
  specialized Set._Variant.insert(_:)(v147, a2);

  UUID.init()();
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v126 = v4;
  uint64_t v25 = __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  uint64_t v26 = v140;
  os_log_type_t v128 = *(void (**)(char *, char *, uint64_t))(v140 + 16);
  uint64_t v129 = v140 + 16;
  v128(v13, v15, v141);
  outlined init with copy of NearbyGroup_Group((uint64_t)v21, (uint64_t)v19, type metadata accessor for NearbyGroup_Group);
  uint64_t v27 = v134;
  uint64_t v131 = v25;
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  int v30 = v29;
  BOOL v31 = os_log_type_enabled(v28, v29);
  id v136 = v21;
  uint64_t v138 = v15;
  uint64_t v134 = v27;
  if (v31)
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    id v120 = v19;
    uint64_t v130 = (void (*)(char *, uint64_t))v33;
    uint64_t v127 = (void *)swift_slowAlloc();
    v147[0] = v127;
    *(_DWORD *)uint64_t v32 = 138413058;
    os_log_t v122 = v28;
    uint64_t v151 = (uint64_t)v27;
    os_log_type_t v34 = v27;
    int v121 = v30;
    int v35 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)uint64_t v130 = v27;

    *(_WORD *)(v32 + 12) = 2080;
    lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v38 = *(void (**)(char *, uint64_t))(v140 + 8);
    v38(v13, v141);
    *(_WORD *)(v32 + 22) = 2080;
    uint64_t v39 = (uint64_t)v120;
    uint64_t v40 = Message.debugDescription.getter();
    uint64_t v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, (uint64_t *)v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NearbyGroup_Group(v39, type metadata accessor for NearbyGroup_Group);
    *(_WORD *)(v32 + 32) = 2080;
    uint64_t v42 = v141;
    swift_beginAccess();
    type metadata accessor for NearbyGroupMember();
    lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (void (*)(uint64_t))&type metadata accessor for NearbyGroupMember);
    swift_bridgeObjectRetain();
    uint64_t v43 = Set.description.getter();
    unint64_t v45 = v44;
    swift_bridgeObjectRelease();
    uint64_t v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, (uint64_t *)v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = v122;
    _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v121, "%@ Distributing removeMember event (%s) %s to %s", (uint8_t *)v32, 0x2Au);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v15 = v138;
    swift_slowDealloc();
  }
  else
  {

    id v38 = *(void (**)(char *, uint64_t))(v26 + 8);
    uint64_t v42 = v141;
    v38(v13, v141);
    outlined destroy of NearbyGroup_Group((uint64_t)v19, type metadata accessor for NearbyGroup_Group);
  }

  swift_beginAccess();
  id v46 = v137;
  uint64_t v47 = v135;
  if ((v143 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v48 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
    if (v48) {
      goto LABEL_8;
    }
LABEL_13:
    v128((char *)v47, v15, v42);
    unint64_t v68 = v134;
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.debug.getter();
    int v71 = v70;
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v72 = swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      LODWORD(v133) = v71;
      uint64_t v74 = (void *)v73;
      uint64_t v137 = (void *)swift_slowAlloc();
      v147[0] = v137;
      *(_DWORD *)uint64_t v72 = 138412546;
      uint64_t v134 = v69;
      id v150 = v68;
      uint64_t v130 = v38;
      uint64_t v75 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v74 = v68;

      *(_WORD *)(v72 + 12) = 2080;
      lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v76 = v141;
      uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter();
      id v150 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, (uint64_t *)v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v79 = v130;
      v130((char *)v47, v76);
      uint64_t v80 = v134;
      _os_log_impl((void *)&_mh_execute_header, v134, (os_log_type_t)v133, "%@ Not distributing removeMember event %s since there are no destinations", (uint8_t *)v72, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v79(v138, v76);
    }
    else
    {

      v38((char *)v47, v42);
      v38(v15, v42);
    }
    outlined destroy of NearbyGroup_Group((uint64_t)v136, type metadata accessor for NearbyGroup_Group);
LABEL_23:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(void *)(v143 + 16)) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v130 = v38;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000D7980;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v50;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 64) = v51;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(NSNumber *)(inited + 72) = NSNumber.init(BOOLeanLiteral:)(1);
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v52;
  uint64_t v53 = (swift_isaMask & *v46) + 256;
  uint64_t v135 = *(void (**)(void))((swift_isaMask & *v46) + 0x100);
  v135();
  NSString v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v55 = IDSCopyBestGuessIDForID();

  if (v55)
  {
    *(void *)(inited + 96) = v55;
    uint64_t v127 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
    int v56 = v134;
    os_log_type_t v57 = (char *)v134
        + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service;
    uint64_t v58 = *(uint64_t *)((char *)&v134[4].isa
                     + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service);
    __swift_project_boxed_opaque_existential_1((Class *)((char *)&v134->isa+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service), *(uint64_t *)((char *)&v134[3].isa+ OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service));
    uint64_t v59 = ((uint64_t (*)(void))v135)();
    id v60 = (void *)(*(uint64_t (**)(uint64_t))(v58 + 64))(v59);
    swift_bridgeObjectRelease();
    if (v60)
    {
      uint64_t v61 = (uint64_t)v127;
      uint64_t v137 = v60;
      id v150 = 0;
      outlined init with copy of PseudonymProtocol((uint64_t)v57, (uint64_t)v147);
      uint64_t v63 = v148;
      uint64_t v62 = v149;
      __swift_project_boxed_opaque_existential_1(v147, v148);
      uint64_t v64 = (uint64_t)v136;
      uint64_t v65 = v139;
      uint64_t v66 = Message.serializedData(partial:)();
      if (v65)
      {

        swift_bridgeObjectRelease();
        v130(v138, v141);
        outlined destroy of NearbyGroup_Group(v64, type metadata accessor for NearbyGroup_Group);
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v147);
      }
      else
      {
        uint64_t v92 = v66;
        unint64_t v93 = v67;
        uint64_t v139 = 0;
        uint64_t v94 = v143;
        swift_bridgeObjectRetain();
        uint64_t v95 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v61);
        swift_bridgeObjectRelease();
        id v146 = 0;
        id v96 = v137;
        uint64_t v97 = v139;
        (*(void (**)(uint64_t, unint64_t, void *, uint64_t, uint64_t, uint64_t, id *, uint64_t, uint64_t))(v62 + 56))(v92, v93, v137, v94, 300, v95, &v146, v63, v62);
        uint64_t v139 = v97;
        if (v97)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v92, v93);

          v130(v138, v141);
          outlined destroy of NearbyGroup_Group((uint64_t)v136, type metadata accessor for NearbyGroup_Group);
          id v98 = v150;
          id v99 = v146;

          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v147);
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v92, v93);
          id v150 = v146;
          id v102 = v146;
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v147);
          id v103 = v124;
          uint64_t v104 = v125;
          uint64_t v105 = v126;
          (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v124, v131, v126);
          unint64_t v106 = v123;
          unint64_t v107 = v138;
          uint64_t v108 = v141;
          v128(v123, v138, v141);
          uint64_t v109 = Logger.logObject.getter();
          os_log_type_t v110 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v109, v110))
          {
            uint64_t v111 = swift_slowAlloc();
            id v146 = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v111 = 136315394;
            lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v112 = dispatch thunk of CustomStringConvertible.description.getter();
            v147[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v113, (uint64_t *)&v146);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v130(v106, v108);
            *(_WORD *)(v111 + 12) = 2080;
            swift_beginAccess();
            id v114 = v150;
            if (v150)
            {
              uint64_t v142 = (uint64_t)v150;
              type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSString);
              id v115 = v114;
              uint64_t v116 = String.init<A>(reflecting:)();
              unint64_t v118 = v117;
            }
            else
            {
              unint64_t v118 = 0xE300000000000000;
              uint64_t v116 = 7104878;
            }
            uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v118, (uint64_t *)&v146);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v109, v110, "Distribution of removeMember event (%s) sent with ID %s", (uint8_t *)v111, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v126);
            v130(v138, v108);
          }
          else
          {

            Class v119 = v130;
            v130(v106, v108);
            (*(void (**)(char *, uint64_t))(v104 + 8))(v103, v105);
            v119(v107, v108);
          }
          outlined destroy of NearbyGroup_Group((uint64_t)v136, type metadata accessor for NearbyGroup_Group);
        }
      }
    }
    else
    {
      uint64_t v139 = v53;
      swift_bridgeObjectRelease();
      uint64_t v81 = v56;
      uint64_t v82 = v137;
      os_log_type_t v83 = v81;
      uint64_t v84 = v82;
      uint64_t v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.fault.getter();
      int v87 = v86;
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v88 = swift_slowAlloc();
        id v133 = (void *)swift_slowAlloc();
        uint64_t v137 = (void *)swift_slowAlloc();
        v147[0] = v137;
        *(_DWORD *)uint64_t v88 = 138412546;
        LODWORD(v134) = v87;
        id v150 = v83;
        unint64_t v89 = v83;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v133 = v83;

        *(_WORD *)(v88 + 12) = 2080;
        uint64_t v90 = ((uint64_t (*)(void))v135)();
        id v150 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, (uint64_t *)v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v134, "%@ couldn't find account to send message from with handle: %s", (uint8_t *)v88, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v100 = v138;
      lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
      swift_allocError();
      *unint64_t v101 = 1;
      swift_willThrow();
      v130(v100, v141);
      outlined destroy of NearbyGroup_Group((uint64_t)v136, type metadata accessor for NearbyGroup_Group);
    }
    goto LABEL_23;
  }
  __break(1u);
}

void NearbyGroupHostIDSService.distributeLeave(for:)(NSObject *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v140 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v139 = (char *)v135 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v144 = (void (*)(void))((char *)v135 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v138 = (char *)v135 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v135 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v135 - v13;
  uint64_t v15 = type metadata accessor for NearbyGroup_Group(0);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (void (*)(uint64_t, uint64_t))((char *)v135 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v135 - v19;
  v158 = a1;
  uint64_t v147 = lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup_Group and conformance NearbyGroup_Group, (void (*)(uint64_t))type metadata accessor for NearbyGroup_Group);
  uint64_t v148 = v15;
  uint64_t v21 = v155;
  uint64_t v22 = static Message.with(_:)();
  uint64_t v154 = v21;
  uint64_t v23 = *(uint64_t (**)(uint64_t))((swift_isaMask & (uint64_t)a1->isa) + 0xB8);
  uint64_t v153 = a1;
  uint64_t v24 = v14;
  uint64_t v25 = v23(v22);
  UUID.init()();
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v141 = v2;
  uint64_t v26 = __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v143 = v5 + 16;
  uint64_t v142 = v27;
  v27(v12, v24, v4);
  outlined init with copy of NearbyGroup_Group((uint64_t)v20, (uint64_t)v18, type metadata accessor for NearbyGroup_Group);
  uint64_t v28 = v151;
  uint64_t v151 = v18;
  os_log_type_t v29 = v24;
  int v30 = v28;
  swift_bridgeObjectRetain_n();
  BOOL v31 = v30;
  uint64_t v155 = v25;
  uint64_t v32 = v31;
  uint64_t v146 = v26;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  int v35 = v34;
  BOOL v36 = os_log_type_enabled(v33, v34);
  uint64_t v37 = v5;
  v152 = v20;
  v156 = v29;
  uint64_t v149 = v5;
  id v150 = v32;
  if (v36)
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    v135[0] = v12;
    uint64_t v40 = (void *)v39;
    v135[1] = v39;
    uint64_t v145 = swift_slowAlloc();
    v160[0] = v145;
    *(_DWORD *)uint64_t v38 = 138413058;
    os_log_t v137 = v33;
    int v136 = v35;
    id v163 = v32;
    unint64_t v41 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v40 = v32;

    *(_WORD *)(v38 + 12) = 2080;
    lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v42 = v135[0];
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
    id v163 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v45 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    uint64_t v46 = v4;
    v45(v42, v4);
    *(_WORD *)(v38 + 22) = 2080;
    uint64_t v47 = (uint64_t)v151;
    uint64_t v48 = Message.debugDescription.getter();
    id v163 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NearbyGroup_Group(v47, type metadata accessor for NearbyGroup_Group);
    *(_WORD *)(v38 + 32) = 2080;
    type metadata accessor for NearbyGroupMember();
    lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (void (*)(uint64_t))&type metadata accessor for NearbyGroupMember);
    uint64_t v50 = v155;
    swift_bridgeObjectRetain();
    uint64_t v51 = Set.description.getter();
    unint64_t v53 = v52;
    swift_bridgeObjectRelease();
    id v163 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v54 = v137;
    _os_log_impl((void *)&_mh_execute_header, v137, (os_log_type_t)v136, "%@ Distributing leave event (%s) %s to %s", (uint8_t *)v38, 0x2Au);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v55 = v50;
  }
  else
  {

    unint64_t v45 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    uint64_t v46 = v4;
    v45((uint64_t)v12, v4);
    outlined destroy of NearbyGroup_Group((uint64_t)v151, type metadata accessor for NearbyGroup_Group);

    uint64_t v55 = v155;
    swift_bridgeObjectRelease_n();
  }
  int v56 = v153;
  if ((v55 & 0xC000000000000001) != 0) {
    uint64_t v57 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v57 = *(void *)(v55 + 16);
  }
  uint64_t v58 = v156;
  uint64_t v151 = v45;
  if (v57)
  {
    uint64_t v145 = v46;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1000D7980;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v60;
    *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
    *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 64) = v61;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    *(NSNumber *)(inited + 72) = NSNumber.init(BOOLeanLiteral:)(1);
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 88) = v62;
    uint64_t v63 = (swift_isaMask & (uint64_t)v56->isa) + 256;
    uint64_t v144 = *(void (**)(void))((swift_isaMask & (uint64_t)v56->isa) + 0x100);
    v144();
    NSString v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v65 = IDSCopyBestGuessIDForID();

    if (v65)
    {
      *(void *)(inited + 96) = v65;
      unint64_t v66 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      id v67 = v150;
      unint64_t v68 = &v150[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service];
      uint64_t v69 = *(void *)&v150[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service
                           + 32];
      __swift_project_boxed_opaque_existential_1(&v150[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service], *(void *)&v150[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service+ 24]);
      uint64_t v70 = ((uint64_t (*)(void))v144)();
      uint64_t v71 = (*(uint64_t (**)(uint64_t))(v69 + 64))(v70);
      swift_bridgeObjectRelease();
      if (v71)
      {
        uint64_t v72 = (void *)v71;
        id v163 = 0;
        outlined init with copy of PseudonymProtocol((uint64_t)v68, (uint64_t)v160);
        uint64_t v74 = v161;
        uint64_t v73 = v162;
        __swift_project_boxed_opaque_existential_1(v160, v161);
        uint64_t v75 = (uint64_t)v152;
        uint64_t v76 = v154;
        uint64_t v77 = Message.serializedData(partial:)();
        if (v76)
        {
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          v151((uint64_t)v156, v145);
          outlined destroy of NearbyGroup_Group(v75, type metadata accessor for NearbyGroup_Group);
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v160);
        }
        else
        {
          uint64_t v107 = v77;
          unint64_t v108 = v78;
          uint64_t v109 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v66);
          uint64_t v154 = 0;
          uint64_t v110 = v109;
          swift_bridgeObjectRelease();
          id v159 = 0;
          uint64_t v111 = v154;
          (*(void (**)(uint64_t, unint64_t, void *, uint64_t, uint64_t, uint64_t, id *, uint64_t, uint64_t))(v73 + 56))(v107, v108, v72, v155, 300, v110, &v159, v74, v73);
          uint64_t v154 = v111;
          uint64_t v112 = (void (*)(char *, uint64_t))v151;
          if (v111)
          {
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v107, v108);
            swift_bridgeObjectRelease();

            v112(v156, v145);
            outlined destroy of NearbyGroup_Group((uint64_t)v152, type metadata accessor for NearbyGroup_Group);
            id v113 = v163;
            id v114 = v159;

            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v160);
          }
          else
          {
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v107, v108);
            swift_bridgeObjectRelease();
            id v163 = v159;
            id v116 = v159;
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v160);
            uint64_t v117 = v140;
            unint64_t v118 = v139;
            uint64_t v119 = v141;
            (*(void (**)(char *, uint64_t, uint64_t))(v140 + 16))(v139, v146, v141);
            id v120 = v138;
            int v121 = v156;
            uint64_t v122 = v145;
            v142(v138, v156, v145);
            uint64_t v123 = Logger.logObject.getter();
            LODWORD(v155) = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v123, (os_log_type_t)v155))
            {
              uint64_t v124 = swift_slowAlloc();
              id v159 = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v124 = 136315394;
              lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v125 = dispatch thunk of CustomStringConvertible.description.getter();
              v160[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v125, v126, (uint64_t *)&v159);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              v151((uint64_t)v120, v122);
              *(_WORD *)(v124 + 12) = 2080;
              swift_beginAccess();
              id v127 = v163;
              uint64_t v128 = (uint64_t)v152;
              if (v163)
              {
                uint64_t v157 = (uint64_t)v163;
                type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSString);
                id v129 = v127;
                uint64_t v130 = String.init<A>(reflecting:)();
                unint64_t v132 = v131;
              }
              else
              {
                unint64_t v132 = 0xE300000000000000;
                uint64_t v130 = 7104878;
              }
              os_log_type_t v134 = v155;
              uint64_t v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v132, (uint64_t *)&v159);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v123, v134, "Distribution of leave event (%s) sent with ID %s", (uint8_t *)v124, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(char *, uint64_t))(v140 + 8))(v139, v141);
              v151((uint64_t)v156, v145);
              uint64_t v133 = v128;
            }
            else
            {

              v112(v120, v122);
              (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v119);
              v112(v121, v122);
              uint64_t v133 = (uint64_t)v152;
            }
            outlined destroy of NearbyGroup_Group(v133, type metadata accessor for NearbyGroup_Group);
          }
        }
      }
      else
      {
        uint64_t v154 = v63;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v93 = v67;
        uint64_t v94 = v153;
        id v95 = v93;
        id v96 = v94;
        uint64_t v97 = Logger.logObject.getter();
        os_log_type_t v98 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v97, v98))
        {
          uint64_t v99 = swift_slowAlloc();
          uint64_t v100 = (void *)swift_slowAlloc();
          uint64_t v155 = swift_slowAlloc();
          v160[0] = v155;
          *(_DWORD *)uint64_t v99 = 138412546;
          uint64_t v153 = v97;
          id v163 = v95;
          id v101 = v95;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v100 = v95;

          *(_WORD *)(v99 + 12) = 2080;
          uint64_t v102 = ((uint64_t (*)(void))v144)();
          id v163 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, v160);
          uint64_t v104 = (void (*)(char *, uint64_t))v151;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          uint64_t v105 = v153;
          _os_log_impl((void *)&_mh_execute_header, v153, v98, "%@ couldn't find account to send message from with handle: %s", (uint8_t *)v99, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v104 = (void (*)(char *, uint64_t))v151;
        }
        lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
        swift_allocError();
        *id v115 = 1;
        swift_willThrow();
        v104(v156, v145);
        outlined destroy of NearbyGroup_Group((uint64_t)v152, type metadata accessor for NearbyGroup_Group);
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v79 = v144;
    uint64_t v80 = v46;
    v142((char *)v144, v58, v46);
    uint64_t v81 = v150;
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      uint64_t v145 = v80;
      os_log_type_t v86 = (void *)v85;
      uint64_t v155 = swift_slowAlloc();
      v160[0] = v155;
      *(_DWORD *)uint64_t v84 = 138412546;
      id v163 = v81;
      int v87 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v86 = v81;

      *(_WORD *)(v84 + 12) = 2080;
      lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v88 = v144;
      uint64_t v89 = v145;
      uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
      id v163 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v92 = (void (*)(char *, uint64_t))v151;
      v151((uint64_t)v88, v89);
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "%@ Not distributing leave event %s since there are no destinations", (uint8_t *)v84, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v92(v156, v89);
    }
    else
    {

      unint64_t v106 = (void (*)(char *, uint64_t))v151;
      v151((uint64_t)v79, v80);

      v106(v58, v80);
    }
    outlined destroy of NearbyGroup_Group((uint64_t)v152, type metadata accessor for NearbyGroup_Group);
  }
}

uint64_t NearbyGroupHostIDSService.distributeGroupInitialization(for:)(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
  NearbyGroupHostIDSService.distributeGroupInitialization(for:to:)(a1, v2);
  return swift_bridgeObjectRelease();
}

void NearbyGroupHostIDSService.__allocating_init(serviceName:)()
{
  id v1 = objc_allocWithZone((Class)IDSService);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithService:v2];

  if (v3)
  {
    v4[3] = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSService);
    void v4[4] = &protocol witness table for IDSService;
    v4[0] = v3;
    (*(void (**)(void *))(v0 + 136))(v4);
  }
  else
  {
    __break(1u);
  }
}

id NearbyGroupHostIDSService.queue.getter()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_queue));
}

uint64_t NearbyGroupHostIDSService.service.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PseudonymProtocol(v1 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service, a1);
}

uint64_t NearbyGroupHostIDSService.MessageEvents.init(_:)(uint64_t a1)
{
  v16[1] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Publishers.PrefetchStrategy();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>);
  uint64_t v10 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Publishers.PrefetchStrategy.byRequest(_:), v6);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Publishers.BufferingStrategy.dropOldest<A>(_:), v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  Publisher.buffer(size:prefetch:whenFull:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>);
  uint64_t v13 = v17;
  uint64_t v14 = Publisher.eraseToAnyPublisher()();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v13);
  return v14;
}

uint64_t NearbyGroupHostIDSService.MessageEvents.Iterator.baseIterator.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t NearbyGroupHostIDSService.MessageEvents.Iterator.next()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(NearbyGroupHostIDSService.MessageEvents.Iterator.next(), 0, 0);
}

uint64_t NearbyGroupHostIDSService.MessageEvents.Iterator.next()()
{
  uint64_t v1 = (uint64_t *)v0[3];
  uint64_t v2 = *v1;
  v0[4] = *v1;
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  *uint64_t v4 = v0;
  v4[1] = NearbyGroupHostIDSService.MessageEvents.Iterator.next();
  uint64_t v6 = v0[2];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v6, &async function pointer to partial apply for specialized closure #2 in _PublisherElements.Iterator.next(), v3, partial apply for specialized closure #1 in _PublisherElements.Iterator.next(), v2, 0, 0, v5);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NearbyGroupHostIDSService.MessageEvents.Iterator(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(protocol witness for AsyncIteratorProtocol.next() in conformance NearbyGroupHostIDSService.MessageEvents.Iterator, 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NearbyGroupHostIDSService.MessageEvents.Iterator()
{
  uint64_t v1 = (uint64_t *)v0[3];
  uint64_t v2 = *v1;
  v0[4] = *v1;
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  *uint64_t v4 = v0;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance NearbyGroupHostIDSService.MessageEvents.Iterator;
  uint64_t v6 = v0[2];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v6, &closure #2 in _PublisherElements.Iterator.next()specialized partial apply, v3, partial apply for specialized closure #1 in _PublisherElements.Iterator.next(), v2, 0, 0, v5);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _s44com_apple_SharePlay_NearbyInvitationsService0E19GroupHostIDSServiceC13MessageEventsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(_s44com_apple_SharePlay_NearbyInvitationsService0E19GroupHostIDSServiceC13MessageEventsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_, 0, 0);
}

uint64_t _s44com_apple_SharePlay_NearbyInvitationsService0E19GroupHostIDSServiceC13MessageEventsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_()
{
  uint64_t v1 = (uint64_t *)v0[3];
  uint64_t v2 = *v1;
  v0[4] = *v1;
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext)?);
  *uint64_t v4 = v0;
  v4[1] = _s44com_apple_SharePlay_NearbyInvitationsService0E19GroupHostIDSServiceC13MessageEventsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_;
  uint64_t v6 = v0[2];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v6, &closure #2 in _PublisherElements.Iterator.next()specialized partial apply, v3, partial apply for specialized closure #1 in _PublisherElements.Iterator.next(), v2, 0, 0, v5);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance NearbyGroupHostIDSService.MessageEvents@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = NearbyGroupHostIDSService.MessageEvents.makeAsyncIterator()();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t NearbyGroupHostIDSService.incomingMessages.getter()
{
  return swift_retain();
}

char *NearbyGroupHostIDSService.__allocating_init(idsService:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = __swift_mutable_project_boxed_opaque_existential_1(a1, v4);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  uint64_t v10 = specialized NearbyGroupHostIDSService.init(idsService:)((uint64_t)v8, v3, v4, v5);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v10;
}

char *NearbyGroupHostIDSService.init(idsService:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized NearbyGroupHostIDSService.init(idsService:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v9;
}

void NearbyGroupHostIDSService.init()()
{
}

id NearbyGroupHostIDSService.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbyGroupHostIDSService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void *NearbyGroupHostIDSService.MessageContext.voucher.getter(void *a1)
{
  id v2 = a1;
  return a1;
}

uint64_t NearbyGroupHostIDSService.MessageEvent.Member.token.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void NearbyGroupHostIDSService.MessageEvent.Member.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (a5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int NearbyGroupHostIDSService.MessageEvent.Member.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyGroupHostIDSService.MessageEvent.Member()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NearbyGroupHostIDSService.MessageEvent.Member()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyGroupHostIDSService.MessageEvent.Member()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NearbyGroupHostIDSService.MessageEvent.Member(uint64_t *a1, uint64_t *a2)
{
  return specialized static NearbyGroupHostIDSService.MessageEvent.Member.__derived_struct_equals(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization.members.getter()
{
  type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0);
  return swift_bridgeObjectRetain();
}

uint64_t NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization.members.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0) + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

void (__swiftcall *NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization.members.modify())()
{
  return Log.init();
}

uint64_t NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization.init(id:members:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0);
  *(void *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization.id.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t NearbyGroupHostIDSService.MessageEvent.MembershipMutation.fromHandle.getter()
{
  uint64_t v1 = *(void *)(v0
                 + *(int *)(type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0)
                          + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyGroupHostIDSService.MessageEvent.MembershipMutation.fromHandle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2
                + *(int *)(type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0) + 20));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

void (__swiftcall *NearbyGroupHostIDSService.MessageEvent.MembershipMutation.fromHandle.modify())()
{
  return Log.init();
}

uint64_t NearbyGroupHostIDSService.MessageEvent.MembershipMutation.operation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1
                 + *(int *)(type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0)
                          + 24));
  return outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation(v3, a1);
}

uint64_t NearbyGroupHostIDSService.MessageEvent.MembershipMutation.operation.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0) + 24);
  return outlined assign with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation(a1, v3);
}

void (__swiftcall *NearbyGroupHostIDSService.MessageEvent.MembershipMutation.operation.modify())()
{
  return Log.init();
}

uint64_t NearbyGroupHostIDSService.MessageEvent.MembershipMutation.init(id:fromHandle:operation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t v11 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0);
  uint64_t v12 = (void *)(a5 + *(int *)(v11 + 20));
  *uint64_t v12 = a2;
  v12[1] = a3;
  uint64_t v13 = a5 + *(int *)(v11 + 24);
  return outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation(a4, v13);
}

uint64_t NearbyGroupHostIDSService.MessageEvent.Member.init(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  type metadata accessor for NearbyGroup_Member(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of NearbyGroup_Group((uint64_t)a1, type metadata accessor for NearbyGroup_Member);
  return v2;
}

uint64_t closure #1 in NearbyGroupHostIDSService.distributeGroupInitialization(for:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroup_Group.OneOf_Event?);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for NearbyGroup_Group.Initialization(0);
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group(&lazy protocol witness table cache variable for type NearbyGroup_Group.Initialization and conformance NearbyGroup_Group.Initialization, (void (*)(uint64_t))type metadata accessor for NearbyGroup_Group.Initialization);
  static Message.with(_:)();
  uint64_t v9 = type metadata accessor for NearbyGroup_Group.OneOf_Event(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  return outlined assign with take of NearbyGroup_Group.OneOf_Event?((uint64_t)v8, a1);
}

uint64_t closure #1 in closure #1 in NearbyGroupHostIDSService.distributeGroupInitialization(for:to:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for NearbyGroup_Member(0);
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v58 = (uint64_t *)((char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v51 - v9;
  uint64_t v11 = UUID.data.getter();
  uint64_t v13 = v12;
  uint64_t v14 = outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v13;
  uint64_t v52 = a1;
  uint64_t v15 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a2) + 0xB8))(v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000D61E0;
  *(void *)(inited + 32) = a3;
  v59[0] = inited;
  specialized Array._endMutation()();
  unint64_t v17 = v59[0];
  id v18 = a3;
  int64_t v19 = specialized Set.union<A>(_:)(v17, v15);
  swift_bridgeObjectRelease();
  unint64_t v57 = v19 & 0xC000000000000001;
  if ((v19 & 0xC000000000000001) != 0)
  {
    uint64_t v20 = __CocoaSet.count.getter();
    if (v20) {
      goto LABEL_3;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v24 = _swiftEmptyArrayStorage;
LABEL_25:
    uint64_t v50 = v52;
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v50 + 16) = v24;
    return result;
  }
  uint64_t v20 = *(void *)(v19 + 16);
  if (!v20) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v63 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
  if (v57)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    unsigned __int8 v23 = 1;
  }
  else
  {
    uint64_t result = specialized _NativeSet.startIndex.getter(v19);
    unsigned __int8 v23 = v25 & 1;
  }
  uint64_t v60 = result;
  uint64_t v61 = v22;
  unsigned __int8 v62 = v23;
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t v26 = v19 & 0xFFFFFFFFFFFFFF8;
    if (v19 < 0) {
      uint64_t v26 = v19;
    }
    uint64_t v53 = v26;
    int64_t v54 = v19;
    do
    {
      while (1)
      {
        uint64_t v33 = (uint64_t)v10;
        uint64_t v34 = v60;
        uint64_t v35 = v61;
        uint64_t v36 = v62;
        specialized Set.subscript.getter(v60, v61, v62, v19);
        uint64_t v38 = v37;
        uint64_t v39 = v56;
        uint64_t v40 = v58;
        UnknownStorage.init()();
        unint64_t v41 = (uint64_t *)((char *)v40 + *(int *)(v39 + 24));
        *unint64_t v41 = 0;
        v41[1] = 0;
        uint64_t *v40 = NearbyGroupMember.handle.getter();
        v40[1] = v42;
        uint64_t v43 = NearbyGroupMember.tokenID.getter();
        uint64_t v45 = v44;

        if (v45)
        {
          *unint64_t v41 = v43;
          v41[1] = v45;
        }
        uint64_t v10 = (char *)v33;
        outlined init with take of NearbyGroup_Group((uint64_t)v58, v33, type metadata accessor for NearbyGroup_Member);
        uint64_t v46 = v63;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1);
          uint64_t v46 = v63;
        }
        unint64_t v48 = v46[2];
        unint64_t v47 = v46[3];
        if (v48 >= v47 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
          uint64_t v46 = v63;
        }
        void v46[2] = v48 + 1;
        uint64_t result = outlined init with take of NearbyGroup_Group(v33, (uint64_t)v46+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v48, type metadata accessor for NearbyGroup_Member);
        if (v57) {
          break;
        }
        int64_t v27 = v54;
        uint64_t v28 = specialized _NativeSet.index(after:)(v34, v35, v36, v54);
        uint64_t v30 = v29;
        char v32 = v31;
        outlined consume of Set<NearbyGroupHostIDSService.MessageEvent.Member>.Index._Variant(v34, v35, v36);
        uint64_t v60 = v28;
        uint64_t v61 = v30;
        int64_t v19 = v27;
        unsigned __int8 v62 = v32 & 1;
        if (!--v20) {
          goto LABEL_24;
        }
      }
      int64_t v19 = v54;
      if ((v36 & 1) == 0) {
        goto LABEL_27;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>.Index);
      unint64_t v49 = (void (*)(unint64_t *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v49(v59, 0);
      --v20;
    }
    while (v20);
LABEL_24:
    outlined consume of Set<NearbyGroupHostIDSService.MessageEvent.Member>.Index._Variant(v60, v61, v62);
    swift_bridgeObjectRelease();
    uint64_t v24 = v63;
    goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void NearbyGroup_Member.init(member:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NearbyGroup_Member(0);
  UnknownStorage.init()();
  uint64_t v5 = (uint64_t *)((char *)a2 + *(int *)(v4 + 24));
  uint64_t *v5 = 0;
  v5[1] = 0;
  *a2 = NearbyGroupMember.handle.getter();
  a2[1] = v6;
  uint64_t v7 = NearbyGroupMember.tokenID.getter();
  uint64_t v9 = v8;

  if (v9)
  {
    uint64_t *v5 = v7;
    v5[1] = v9;
  }
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    unint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    int64_t v19 = *(void **)(*(void *)(a1 + 56) + 8 * v12);
    *(void *)&v37[0] = *v17;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    v19;
    swift_dynamicCast();
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSObject);
    swift_dynamicCast();
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    outlined init with take of Any(&v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    outlined consume of Set<IDSAccount>.Iterator._Variant();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  uint64_t v31;
  _OWORD v32[2];
  long long v33;
  long long v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  long long v39;
  _OWORD v40[2];

  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    unint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    int64_t v19 = *v17;
    uint64_t v18 = v17[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&uint64_t v39 = v19;
    *((void *)&v39 + 1) = v18;
    _OWORD v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    outlined init with take of Any(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    outlined consume of Set<IDSAccount>.Iterator._Variant();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t closure #1 in NearbyGroupHostIDSService.distributeAdd(for:addingMember:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroup_Group.OneOf_Event?);
  __chkstk_darwin(v6 - 8);
  int64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for NearbyGroup_Group.MemberAdded(0);
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group(&lazy protocol witness table cache variable for type NearbyGroup_Group.MemberAdded and conformance NearbyGroup_Group.MemberAdded, (void (*)(uint64_t))type metadata accessor for NearbyGroup_Group.MemberAdded);
  static Message.with(_:)();
  uint64_t v9 = type metadata accessor for NearbyGroup_Group.OneOf_Event(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  return outlined assign with take of NearbyGroup_Group.OneOf_Event?((uint64_t)v8, a1);
}

uint64_t closure #1 in NearbyGroupHostIDSService.distributeRemove(for:removingMember:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroup_Group.OneOf_Event?);
  __chkstk_darwin(v6 - 8);
  int64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for NearbyGroup_Group.MemberRemoved(0);
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group(&lazy protocol witness table cache variable for type NearbyGroup_Group.MemberRemoved and conformance NearbyGroup_Group.MemberRemoved, (void (*)(uint64_t))type metadata accessor for NearbyGroup_Group.MemberRemoved);
  static Message.with(_:)();
  uint64_t v9 = type metadata accessor for NearbyGroup_Group.OneOf_Event(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  return outlined assign with take of NearbyGroup_Group.OneOf_Event?((uint64_t)v8, a1);
}

uint64_t closure #1 in closure #1 in NearbyGroupHostIDSService.distributeAdd(for:addingMember:)(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  BOOL v25 = a4;
  uint64_t v6 = type metadata accessor for NearbyGroup_Member(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = UUID.data.getter();
  uint64_t v15 = v14;
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v15;
  id v16 = a3;
  UnknownStorage.init()();
  unint64_t v17 = (uint64_t *)((char *)v10 + *(int *)(v6 + 24));
  *unint64_t v17 = 0;
  v17[1] = 0;
  *uint64_t v10 = NearbyGroupMember.handle.getter();
  v10[1] = v18;
  uint64_t v19 = NearbyGroupMember.tokenID.getter();
  uint64_t v21 = v20;

  if (v21)
  {
    *unint64_t v17 = v19;
    v17[1] = v21;
  }
  outlined init with take of NearbyGroup_Group((uint64_t)v10, (uint64_t)v12, type metadata accessor for NearbyGroup_Member);
  uint64_t v22 = a1 + *(int *)(v25(0) + 24);
  outlined destroy of Any?(v22, &demangling cache variable for type metadata for NearbyGroup_Member?);
  outlined init with take of NearbyGroup_Group((uint64_t)v12, v22, type metadata accessor for NearbyGroup_Member);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v22, 0, 1, v6);
}

uint64_t closure #1 in NearbyGroupHostIDSService.distributeLeave(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroup_Group.OneOf_Event?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for NearbyGroup_Group.MemberLeft(0);
  uint64_t v10 = a2;
  lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group(&lazy protocol witness table cache variable for type NearbyGroup_Group.MemberLeft and conformance NearbyGroup_Group.MemberLeft, (void (*)(uint64_t))type metadata accessor for NearbyGroup_Group.MemberLeft);
  static Message.with(_:)();
  uint64_t v7 = type metadata accessor for NearbyGroup_Group.OneOf_Event(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
  return outlined assign with take of NearbyGroup_Group.OneOf_Event?((uint64_t)v6, a1);
}

void NearbyGroupHostIDSService.service(_:account:incomingData:fromID:context:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void *a7)
{
}

void NearbyGroupHostIDSService.handleIncomingData(from:data:context:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v109 = a3;
  unint64_t v110 = a4;
  uint64_t v112 = a1;
  uint64_t v8 = type metadata accessor for NearbyGroup_Group.MemberLeft(0);
  __chkstk_darwin(v8 - 8);
  unint64_t v103 = (void *)((char *)v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for NearbyGroup_Group.MemberRemoved(0);
  __chkstk_darwin(v10 - 8);
  id v95 = (void *)((char *)v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for NearbyGroup_Group.MemberAdded(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v94 = (void *)((char *)v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for NearbyGroup_Group.Initialization(0);
  __chkstk_darwin(v14 - 8);
  id v93 = (void *)((char *)v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroup_Group.OneOf_Event?);
  __chkstk_darwin(v16);
  uint64_t v106 = (uint64_t)v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NearbyGroup_Group?);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v101 = (uint64_t)v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v105 = (uint64_t)v91 - v21;
  uint64_t v22 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v22 - 8);
  unint64_t v108 = (char *)v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for NearbyGroup_Group(0);
  uint64_t v100 = *(void *)(v111 - 8);
  uint64_t v24 = __chkstk_darwin(v111);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v102 = (uint64_t)v91 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v97 = (uint64_t)v91 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v98 = (uint64_t)v91 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v113 = (uint64_t)v91 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v107 = (char *)v91 - v34;
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)v91 - v35;
  uint64_t v37 = type metadata accessor for DispatchPredicate();
  uint64_t v38 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v40 = (void *)((char *)v91 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v99 = v5;
  unint64_t v41 = *(void **)(v5 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_queue);
  void *v40 = v41;
  (*(void (**)(void *, void, uint64_t))(v38 + 104))(v40, enum case for DispatchPredicate.onQueue(_:), v37);
  id v42 = v41;
  LOBYTE(v41) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v38 + 8))(v40, v37);
  if (v41)
  {
    if (one-time initialization token for host == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v43 = type metadata accessor for Logger();
  uint64_t v44 = __swift_project_value_buffer(v43, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  id v45 = a5;
  unint64_t v46 = a2;
  id v47 = v45;
  unint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.info.getter();
  BOOL v50 = os_log_type_enabled(v48, v49);
  uint64_t v96 = v16;
  unint64_t v104 = v46;
  if (v50)
  {
    uint64_t v51 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    v91[1] = v44;
    uint64_t v53 = (void *)v52;
    v91[0] = swift_slowAlloc();
    uint64_t v114 = v91[0];
    *(_DWORD *)uint64_t v51 = 136315394;
    uint64_t v92 = v36;
    *(void *)&v115[0] = v112;
    *((void *)&v115[0] + 1) = v46;
    swift_bridgeObjectRetain();
    uint64_t v54 = String.init<A>(reflecting:)();
    *(void *)&v115[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v51 + 12) = 2112;
    *(void *)&v115[0] = v47;
    id v56 = v47;
    uint64_t v36 = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v53 = v47;

    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Handling incoming data from: %s context: %@", (uint8_t *)v51, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v57 = v113;
  id v58 = [v47 publicIntentAction];
  if (v58)
  {
    uint64_t v59 = v58;
    id v60 = [v58 integerValue];

    if (v60 == (id)5)
    {
      uint64_t v116 = 0;
      memset(v115, 0, sizeof(v115));
      outlined copy of Data._Representation(v109, v110);
      BinaryDecodingOptions.init()();
      uint64_t v61 = lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup_Group and conformance NearbyGroup_Group, (void (*)(uint64_t))type metadata accessor for NearbyGroup_Group);
      uint64_t v62 = (uint64_t)v107;
      uint64_t v63 = v111;
      Message.init(serializedData:extensions:partial:options:)();
      outlined init with take of NearbyGroup_Group(v62, (uint64_t)v36, type metadata accessor for NearbyGroup_Group);
      outlined init with copy of NearbyGroup_Group((uint64_t)v36, v57, type metadata accessor for NearbyGroup_Group);
      NSString v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v64, v65))
      {
        unint64_t v110 = v61;
        unint64_t v66 = (uint8_t *)swift_slowAlloc();
        uint64_t v109 = swift_slowAlloc();
        *(void *)&v115[0] = v109;
        *(_DWORD *)unint64_t v66 = 136315138;
        uint64_t v67 = v57;
        uint64_t v68 = v105;
        outlined init with copy of NearbyGroup_Group(v67, v105, type metadata accessor for NearbyGroup_Group);
        uint64_t v69 = v100;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v100 + 56))(v68, 0, 1, v63);
        uint64_t v70 = v68;
        uint64_t v71 = v101;
        outlined init with copy of (String, Any)(v70, v101, (uint64_t *)&demangling cache variable for type metadata for NearbyGroup_Group?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v71, 1, v63) == 1)
        {
          unint64_t v72 = 0xE300000000000000;
          uint64_t v73 = 7104878;
        }
        else
        {
          uint64_t v74 = v98;
          outlined init with take of NearbyGroup_Group(v71, v98, type metadata accessor for NearbyGroup_Group);
          outlined init with copy of NearbyGroup_Group(v74, v97, type metadata accessor for NearbyGroup_Group);
          uint64_t v73 = String.init<A>(reflecting:)();
          unint64_t v72 = v75;
          outlined destroy of NearbyGroup_Group(v74, type metadata accessor for NearbyGroup_Group);
        }
        outlined destroy of Any?(v105, (uint64_t *)&demangling cache variable for type metadata for NearbyGroup_Group?);
        uint64_t v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v72, (uint64_t *)v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of NearbyGroup_Group(v113, type metadata accessor for NearbyGroup_Group);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Message: %s", v66, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        outlined destroy of NearbyGroup_Group(v57, type metadata accessor for NearbyGroup_Group);
      }
      uint64_t v76 = v106;
      outlined init with copy of (String, Any)((uint64_t)v36, v106, &demangling cache variable for type metadata for NearbyGroup_Group.OneOf_Event?);
      uint64_t v77 = type metadata accessor for NearbyGroup_Group.OneOf_Event(0);
      int v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 48))(v76, 1, v77);
      unint64_t v79 = v104;
      if (v78 == 1)
      {
        uint64_t v80 = v102;
        outlined init with copy of NearbyGroup_Group((uint64_t)v36, v102, type metadata accessor for NearbyGroup_Group);
        uint64_t v81 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v81, v82))
        {
          uint64_t v83 = v80;
          uint64_t v84 = (uint8_t *)swift_slowAlloc();
          *(void *)&v115[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v84 = 136315138;
          uint64_t v85 = Message.debugDescription.getter();
          uint64_t v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, (uint64_t *)v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of NearbyGroup_Group(v83, type metadata accessor for NearbyGroup_Group);
          _os_log_impl((void *)&_mh_execute_header, v81, v82, "Unknown message: %s", v84, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          outlined destroy of NearbyGroup_Group(v80, type metadata accessor for NearbyGroup_Group);
        }
        uint64_t v87 = (uint64_t)v36;
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v89 = v103;
        switch(EnumCaseMultiPayload)
        {
          case 1:
            uint64_t v89 = v94;
            outlined init with take of NearbyGroup_Group(v76, (uint64_t)v94, type metadata accessor for NearbyGroup_Group.MemberAdded);
            NearbyGroupHostIDSService.handleMemberAdded(from:addedMember:)(v112, v79, (uint64_t)v89);
            uint64_t v90 = type metadata accessor for NearbyGroup_Group.MemberAdded;
            break;
          case 2:
            uint64_t v89 = v95;
            outlined init with take of NearbyGroup_Group(v76, (uint64_t)v95, type metadata accessor for NearbyGroup_Group.MemberRemoved);
            NearbyGroupHostIDSService.handleMemberRemoved(from:removedMember:)(v112, v79, (uint64_t)v89);
            uint64_t v90 = type metadata accessor for NearbyGroup_Group.MemberRemoved;
            break;
          case 3:
            outlined init with take of NearbyGroup_Group(v76, (uint64_t)v103, type metadata accessor for NearbyGroup_Group.MemberLeft);
            NearbyGroupHostIDSService.handleMemberLeft(from:leftMember:)(v112, v79, (uint64_t)v89);
            uint64_t v90 = type metadata accessor for NearbyGroup_Group.MemberLeft;
            break;
          default:
            uint64_t v89 = v93;
            outlined init with take of NearbyGroup_Group(v76, (uint64_t)v93, type metadata accessor for NearbyGroup_Group.Initialization);
            NearbyGroupHostIDSService.handleInitialize(from:initialization:)(v112, v79, v89);
            uint64_t v90 = type metadata accessor for NearbyGroup_Group.Initialization;
            break;
        }
        outlined destroy of NearbyGroup_Group((uint64_t)v89, v90);
        uint64_t v87 = (uint64_t)v36;
      }
      outlined destroy of NearbyGroup_Group(v87, type metadata accessor for NearbyGroup_Group);
    }
  }
}

uint64_t NearbyGroupHostIDSService.handleInitialize(from:initialization:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v87 = a1;
  uint64_t v92 = a3;
  unint64_t v88 = a2;
  uint64_t v85 = type metadata accessor for NearbyGroup_Group.Initialization(0);
  __chkstk_darwin(v85);
  uint64_t v90 = (uint64_t)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
  __chkstk_darwin(v81);
  uint64_t v83 = (uint64_t)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent(0);
  __chkstk_darwin(v80);
  os_log_type_t v82 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for NearbyGroup_Member(0);
  uint64_t v86 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v8 = (uint64_t *)((char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v89 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v84 = v3;
  uint64_t v19 = *(void **)(v3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_queue);
  *uint64_t v18 = (uint64_t)v19;
  (*(void (**)(uint64_t *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v21 = v92;
  outlined copy of Data._Representation(*v92, v92[1]);
  UUID.init(data:)();
  uint64_t v18 = v21;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for host == -1)
    {
LABEL_4:
      uint64_t v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Log.host);
      uint64_t v23 = v90;
      outlined init with copy of NearbyGroup_Group((uint64_t)v18, v90, type metadata accessor for NearbyGroup_Group.Initialization);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v94 = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136315138;
        lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group(&lazy protocol witness table cache variable for type NearbyGroup_Group.Initialization and conformance NearbyGroup_Group.Initialization, (void (*)(uint64_t))type metadata accessor for NearbyGroup_Group.Initialization);
        uint64_t v27 = Message.debugDescription.getter();
        uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of NearbyGroup_Group(v23, type metadata accessor for NearbyGroup_Group.Initialization);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to derive UUID from Initialization message: %s", v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        outlined destroy of NearbyGroup_Group(v23, type metadata accessor for NearbyGroup_Group.Initialization);
      }

      lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
      swift_allocError();
      *uint64_t v43 = 0;
      return swift_willThrow();
    }
LABEL_54:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v79 = v13;
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t v85 = v12;
  v29(v89, v11, v12);
  uint64_t v30 = v21[2];
  uint64_t v31 = *(void *)(v30 + 16);
  if (v31)
  {
    uint64_t v32 = v30 + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80));
    uint64_t v90 = *(void *)(v86 + 72);
    uint64_t v86 = v30;
    swift_bridgeObjectRetain_n();
    uint64_t v33 = _swiftEmptyArrayStorage;
    do
    {
      outlined init with copy of NearbyGroup_Group(v32, (uint64_t)v8, type metadata accessor for NearbyGroup_Member);
      uint64_t v34 = (uint64_t *)((char *)v8 + *(int *)(v91 + 24));
      if (v34[1])
      {
        uint64_t v35 = *v34;
        unint64_t v36 = v34[1];
      }
      else
      {
        uint64_t v35 = 0;
        unint64_t v36 = 0xE000000000000000;
      }
      uint64_t v38 = *v8;
      uint64_t v37 = v8[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined destroy of NearbyGroup_Group((uint64_t)v8, type metadata accessor for NearbyGroup_Member);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
      }
      unint64_t v40 = v33[2];
      unint64_t v39 = v33[3];
      uint64_t v92 = v33;
      if (v40 >= v39 >> 1) {
        uint64_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v92);
      }
      unint64_t v41 = v92;
      v92[2] = v40 + 1;
      uint64_t v33 = v41;
      id v42 = &v41[4 * v40];
      uint64_t v42[4] = v38;
      v42[5] = v37;
      v42[6] = v35;
      v42[7] = v36;
      v32 += v90;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v92 = _swiftEmptyArrayStorage;
  }
  uint64_t v46 = v87;
  unint64_t v45 = v88;
  NSString v47 = String._bridgeToObjectiveC()();
  unint64_t v48 = (void *)IDSCopyAddressDestinationForDestination();

  os_log_type_t v49 = (void *)IDSCopyRawAddressForDestination();
  if (!v49) {
    goto LABEL_40;
  }
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v52 = v51;

  if (String.count.getter() <= 0)
  {
    swift_bridgeObjectRelease();
LABEL_40:
    swift_bridgeObjectRelease();
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    id v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v94 = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v45, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failed to convert ID into Raw IDS Destination: %s", v62, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v89, v85);
  }
  uint64_t v53 = v92[2];
  if (v53)
  {
    uint64_t v54 = v92 + 7;
    do
    {
      uint64_t v55 = *(v54 - 1);
      uint64_t v56 = *v54;
      BOOL v57 = *(v54 - 3) == v50 && *(v54 - 2) == v52;
      if (v57 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (!v56) {
          goto LABEL_46;
        }
      }
      else if (!v56)
      {
        goto LABEL_35;
      }
      BOOL v58 = v55 == v46 && v56 == v45;
      if (v58 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_46:
        swift_bridgeObjectRelease();
        uint64_t v63 = v79;
        uint64_t v64 = (uint64_t)v82;
        os_log_type_t v65 = v89;
        uint64_t v66 = v85;
        (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v82, v89, v85);
        uint64_t v67 = specialized Set.init<A>(_:)((uint64_t)v92);
        swift_bridgeObjectRelease();
        *(void *)(v64
                  + *(int *)(type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0)
                           + 20)) = v67;
        swift_storeEnumTagMultiPayload();
        uint64_t v68 = (void *)voucher_copy();
        uint64_t v69 = v83;
        uint64_t v70 = *(int *)(v81 + 48);
        outlined init with copy of NearbyGroup_Group(v64, v83, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
        *(void *)(v69 + v70) = v68;
        swift_retain();
        id v71 = v68;
        PassthroughSubject.send(_:)();

        swift_release();
        outlined destroy of Any?(v69, (uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
        outlined destroy of NearbyGroup_Group(v64, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
        return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v65, v66);
      }
LABEL_35:
      v54 += 4;
      --v53;
    }
    while (v53);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v72 = type metadata accessor for Logger();
  __swift_project_value_buffer(v72, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  uint64_t v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v73, v74))
  {
    unint64_t v75 = (uint8_t *)swift_slowAlloc();
    uint64_t v94 = swift_slowAlloc();
    *(_DWORD *)unint64_t v75 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v45, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "Failed message verification. fromID %s not present in membership list.", v75, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v76 = v85;
  uint64_t v77 = v79;
  lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
  swift_allocError();
  unsigned char *v78 = 0;
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v89, v76);
}

uint64_t NearbyGroupHostIDSService.handleMemberAdded(from:addedMember:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v64 = a2;
  uint64_t v60 = a1;
  uint64_t v67 = type metadata accessor for NearbyGroup_Group.MemberAdded(0);
  __chkstk_darwin(v67);
  uint64_t v62 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
  __chkstk_darwin(v61);
  uint64_t v65 = (uint64_t)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent(0);
  __chkstk_darwin(v59);
  uint64_t v63 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroup_Member?);
  __chkstk_darwin(v9 - 8);
  uint64_t v56 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for NearbyGroup_Member(0);
  uint64_t v55 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v12 = (uint64_t *)((char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  BOOL v58 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (uint64_t *)((char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v66 = v4;
  uint64_t v23 = *(void **)(v4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_queue);
  *uint64_t v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  id v24 = v23;
  uint64_t v25 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if ((v25 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  outlined copy of Data._Representation(*(void *)a3, *(void *)(a3 + 8));
  UUID.init(data:)();
  uint64_t v25 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for host == -1)
    {
LABEL_4:
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Log.host);
      uint64_t v27 = v62;
      outlined init with copy of NearbyGroup_Group(v25, v62, type metadata accessor for NearbyGroup_Group.MemberAdded);
      unint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136315138;
        lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group(&lazy protocol witness table cache variable for type NearbyGroup_Group.MemberAdded and conformance NearbyGroup_Group.MemberAdded, (void (*)(uint64_t))type metadata accessor for NearbyGroup_Group.MemberAdded);
        uint64_t v31 = Message.debugDescription.getter();
        uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of NearbyGroup_Group(v27, type metadata accessor for NearbyGroup_Group.MemberAdded);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to derive UUID from member added message: %s", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        outlined destroy of NearbyGroup_Group(v27, type metadata accessor for NearbyGroup_Group.MemberAdded);
      }

      lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
      swift_allocError();
      unsigned char *v38 = 0;
      return swift_willThrow();
    }
LABEL_13:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v33 = v16;
  uint64_t v34 = v58;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v58, v15, v33);
  uint64_t v35 = v56;
  outlined init with copy of (String, Any)(a3 + *(int *)(v67 + 24), v56, &demangling cache variable for type metadata for NearbyGroup_Member?);
  uint64_t v36 = v57;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v35, 1, v57) == 1)
  {
    *uint64_t v12 = 0;
    v12[1] = 0xE000000000000000;
    UnknownStorage.init()();
    uint64_t v37 = (uint64_t *)((char *)v12 + *(int *)(v36 + 24));
    void *v37 = 0;
    v37[1] = 0;
    outlined destroy of Any?(v35, &demangling cache variable for type metadata for NearbyGroup_Member?);
  }
  else
  {
    outlined init with take of NearbyGroup_Group(v35, (uint64_t)v12, type metadata accessor for NearbyGroup_Member);
  }
  uint64_t v41 = *v12;
  uint64_t v40 = v12[1];
  id v42 = (uint64_t *)((char *)v12 + *(int *)(v36 + 24));
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of NearbyGroup_Group((uint64_t)v12, type metadata accessor for NearbyGroup_Member);
  uint64_t v45 = (uint64_t)v63;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v63, v34, v33);
  uint64_t v46 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0);
  NSString v47 = (void *)(v45 + *(int *)(v46 + 20));
  uint64_t v48 = v64;
  void *v47 = v60;
  v47[1] = v48;
  uint64_t v49 = v45 + *(int *)(v46 + 24);
  *(void *)uint64_t v49 = v41;
  *(void *)(v49 + 8) = v40;
  *(void *)(v49 + 16) = v44;
  *(void *)(v49 + 24) = v43;
  *(unsigned char *)(v49 + 32) = 0;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  uint64_t v50 = (void *)voucher_copy();
  uint64_t v51 = v65;
  uint64_t v52 = *(int *)(v61 + 48);
  outlined init with copy of NearbyGroup_Group(v45, v65, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  *(void *)(v51 + v52) = v50;
  swift_retain();
  id v53 = v50;
  PassthroughSubject.send(_:)();

  swift_release();
  outlined destroy of Any?(v51, (uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
  outlined destroy of NearbyGroup_Group(v45, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v34, v33);
}

uint64_t NearbyGroupHostIDSService.handleMemberRemoved(from:removedMember:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v64 = a2;
  uint64_t v60 = a1;
  uint64_t v67 = type metadata accessor for NearbyGroup_Group.MemberRemoved(0);
  __chkstk_darwin(v67);
  uint64_t v62 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
  __chkstk_darwin(v61);
  uint64_t v65 = (uint64_t)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent(0);
  __chkstk_darwin(v59);
  uint64_t v63 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyGroup_Member?);
  __chkstk_darwin(v9 - 8);
  uint64_t v56 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for NearbyGroup_Member(0);
  uint64_t v55 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v12 = (uint64_t *)((char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  BOOL v58 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (uint64_t *)((char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v66 = v4;
  uint64_t v23 = *(void **)(v4 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_queue);
  *uint64_t v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  id v24 = v23;
  uint64_t v25 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if ((v25 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  outlined copy of Data._Representation(*(void *)a3, *(void *)(a3 + 8));
  UUID.init(data:)();
  uint64_t v25 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for host == -1)
    {
LABEL_4:
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Log.host);
      uint64_t v27 = v62;
      outlined init with copy of NearbyGroup_Group(v25, v62, type metadata accessor for NearbyGroup_Group.MemberRemoved);
      unint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136315138;
        lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group(&lazy protocol witness table cache variable for type NearbyGroup_Group.MemberRemoved and conformance NearbyGroup_Group.MemberRemoved, (void (*)(uint64_t))type metadata accessor for NearbyGroup_Group.MemberRemoved);
        uint64_t v31 = Message.debugDescription.getter();
        uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of NearbyGroup_Group(v27, type metadata accessor for NearbyGroup_Group.MemberRemoved);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to derive UUID from member added message: %s", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        outlined destroy of NearbyGroup_Group(v27, type metadata accessor for NearbyGroup_Group.MemberRemoved);
      }

      lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
      swift_allocError();
      unsigned char *v38 = 0;
      return swift_willThrow();
    }
LABEL_13:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v33 = v16;
  uint64_t v34 = v58;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v58, v15, v33);
  uint64_t v35 = v56;
  outlined init with copy of (String, Any)(a3 + *(int *)(v67 + 24), v56, &demangling cache variable for type metadata for NearbyGroup_Member?);
  uint64_t v36 = v57;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v35, 1, v57) == 1)
  {
    *uint64_t v12 = 0;
    v12[1] = 0xE000000000000000;
    UnknownStorage.init()();
    uint64_t v37 = (uint64_t *)((char *)v12 + *(int *)(v36 + 24));
    void *v37 = 0;
    v37[1] = 0;
    outlined destroy of Any?(v35, &demangling cache variable for type metadata for NearbyGroup_Member?);
  }
  else
  {
    outlined init with take of NearbyGroup_Group(v35, (uint64_t)v12, type metadata accessor for NearbyGroup_Member);
  }
  uint64_t v41 = *v12;
  uint64_t v40 = v12[1];
  id v42 = (uint64_t *)((char *)v12 + *(int *)(v36 + 24));
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of NearbyGroup_Group((uint64_t)v12, type metadata accessor for NearbyGroup_Member);
  uint64_t v45 = (uint64_t)v63;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v63, v34, v33);
  uint64_t v46 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0);
  NSString v47 = (void *)(v45 + *(int *)(v46 + 20));
  uint64_t v48 = v64;
  void *v47 = v60;
  v47[1] = v48;
  uint64_t v49 = v45 + *(int *)(v46 + 24);
  *(void *)uint64_t v49 = v41;
  *(void *)(v49 + 8) = v40;
  *(void *)(v49 + 16) = v44;
  *(void *)(v49 + 24) = v43;
  *(unsigned char *)(v49 + 32) = 1;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  uint64_t v50 = (void *)voucher_copy();
  uint64_t v51 = v65;
  uint64_t v52 = *(int *)(v61 + 48);
  outlined init with copy of NearbyGroup_Group(v45, v65, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  *(void *)(v51 + v52) = v50;
  swift_retain();
  id v53 = v50;
  PassthroughSubject.send(_:)();

  swift_release();
  outlined destroy of Any?(v51, (uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
  outlined destroy of NearbyGroup_Group(v45, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v34, v33);
}

uint64_t NearbyGroupHostIDSService.handleMemberLeft(from:leftMember:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v66 = a2;
  uint64_t v67 = a1;
  uint64_t v64 = type metadata accessor for NearbyGroup_Group.MemberLeft(0);
  __chkstk_darwin(v64);
  uint64_t v65 = (uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
  __chkstk_darwin(v61);
  uint64_t v59 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent(0);
  __chkstk_darwin(v60);
  uint64_t v62 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v68 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char **)((char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v63 = v3;
  uint64_t v18 = *(void **)(v3 + OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_queue);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  outlined copy of Data._Representation(*(void *)a3, *(void *)(a3 + 8));
  UUID.init(data:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for host == -1)
    {
LABEL_4:
      uint64_t v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Log.host);
      uint64_t v21 = v65;
      outlined init with copy of NearbyGroup_Group(a3, v65, type metadata accessor for NearbyGroup_Group.MemberLeft);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        id v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v70 = swift_slowAlloc();
        *(_DWORD *)id v24 = 136315138;
        lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group(&lazy protocol witness table cache variable for type NearbyGroup_Group.MemberLeft and conformance NearbyGroup_Group.MemberLeft, (void (*)(uint64_t))type metadata accessor for NearbyGroup_Group.MemberLeft);
        uint64_t v25 = Message.debugDescription.getter();
        uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of NearbyGroup_Group(v21, type metadata accessor for NearbyGroup_Group.MemberLeft);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to derive UUID from member left message: %s", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        outlined destroy of NearbyGroup_Group(v21, type metadata accessor for NearbyGroup_Group.MemberLeft);
      }

      lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors();
      swift_allocError();
      *uint64_t v43 = 0;
      return swift_willThrow();
    }
LABEL_21:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v27 = v11;
  uint64_t v28 = v12;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v68, v10, v11);
  unint64_t v29 = v66;
  uint64_t v30 = v67;
  NSString v31 = String._bridgeToObjectiveC()();
  unint64_t v32 = (void *)IDSCopyAddressDestinationForDestination();

  uint64_t v33 = (void *)IDSCopyRawAddressForDestination();
  if (v33)
  {
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;

    if (String.count.getter() >= 1)
    {
      uint64_t v37 = v28;
      int v38 = *(unsigned __int8 *)(a3 + 16);
      uint64_t v65 = v36;
      uint64_t v64 = v34;
      if (v38 == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v39 = v67;
        uint64_t v40 = v67;
        unint64_t v41 = v29;
        unint64_t v42 = v29;
      }
      else
      {
        uint64_t v40 = 0;
        unint64_t v41 = 0;
        unint64_t v42 = v29;
        uint64_t v39 = v67;
      }
      uint64_t v49 = (uint64_t)v59;
      uint64_t v50 = (uint64_t)v62;
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v62, v68, v27);
      uint64_t v51 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0);
      uint64_t v52 = (uint64_t *)(v50 + *(int *)(v51 + 20));
      *uint64_t v52 = v39;
      v52[1] = v42;
      uint64_t v53 = v50 + *(int *)(v51 + 24);
      uint64_t v54 = v65;
      *(void *)uint64_t v53 = v64;
      *(void *)(v53 + 8) = v54;
      *(void *)(v53 + 16) = v40;
      *(void *)(v53 + 24) = v41;
      *(unsigned char *)(v53 + 32) = 1;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      uint64_t v55 = (void *)voucher_copy();
      uint64_t v56 = v27;
      uint64_t v57 = *(int *)(v61 + 48);
      outlined init with copy of NearbyGroup_Group(v50, v49, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
      *(void *)(v49 + v57) = v55;
      swift_retain();
      id v58 = v55;
      PassthroughSubject.send(_:)();

      swift_release();
      outlined destroy of Any?(v49, (uint64_t *)&demangling cache variable for type metadata for (NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext));
      outlined destroy of NearbyGroup_Group(v50, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v68, v56);
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  __swift_project_value_buffer(v45, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v65 = v27;
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    *(_DWORD *)uint64_t v48 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to convert ID into Raw IDS Destination: %s", v48, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v68, v65);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v68, v27);
  }
}

id IDSService.account(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id result = [v3 accounts];
  if (result)
  {
    uint64_t v7 = result;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSAccount);
    lazy protocol witness table accessor for type IDSAccount and conformance NSObject();
    uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)(v8, a1, a2);
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (id)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in IDSService.account(for:)(id *a1, uint64_t a2, uint64_t a3)
{
  id v5 = *a1;
  uint64_t result = (uint64_t)[*a1 pseudonyms];
  if (!result) {
    goto LABEL_22;
  }
  uint64_t v7 = (void *)result;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for IDSPseudonym);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v26 = a3;
  if (!(v8 >> 62))
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    id v25 = v5;
    if (v9) {
      goto LABEL_4;
    }
LABEL_16:
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v9 = result;
  id v25 = v5;
  if (!result) {
    goto LABEL_16;
  }
LABEL_4:
  if (v9 < 1)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = 0;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  do
  {
    if ((v8 & 0xC000000000000001) != 0) {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v12 = *(id *)(v8 + 8 * v10 + 32);
    }
    uint64_t v13 = v12;
    id v14 = [v12 URI];
    id v15 = [v14 prefixedURI];

    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v20 = *((void *)v11 + 2);
    unint64_t v19 = *((void *)v11 + 3);
    if (v20 >= v19 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, v11);
    }
    ++v10;
    *((void *)v11 + 2) = v20 + 1;
    uint64_t v21 = &v11[16 * v20];
    *((void *)v21 + 4) = v16;
    *((void *)v21 + 5) = v18;
  }
  while (v9 != v10);
LABEL_17:
  swift_bridgeObjectRelease_n();
  char v22 = specialized Sequence<>.contains(_:)(a2, v26, v11);
  swift_bridgeObjectRelease();
  if (v22) {
    return 1;
  }
  uint64_t result = (uint64_t)[v25 aliasStrings];
  if (result)
  {
    os_log_type_t v23 = (void *)result;
    id v24 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v23) = specialized Sequence<>.contains(_:)(a2, v26, v24);
    swift_bridgeObjectRelease();
    return v23 & 1;
  }
LABEL_23:
  __break(1u);
  return result;
}

id protocol witness for IDSServiceProtocol.account(for:) in conformance IDSService(uint64_t a1, uint64_t a2)
{
  id result = [*v2 accounts];
  if (result)
  {
    uint64_t v6 = result;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSAccount);
    lazy protocol witness table accessor for type IDSAccount and conformance NSObject();
    uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)(v7, a1, a2);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (id)v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in NearbyGroupHostIDSService.distributeAdd(for:addingMember:)(uint64_t a1)
{
  return closure #1 in NearbyGroupHostIDSService.distributeAdd(for:addingMember:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupMember>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for NearbyGroupMember();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for AnyCancellable();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return v2;
}

void *specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  v35[0] = a1;
  unint64_t v33 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    return (void *)v2;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_21;
  }
LABEL_4:
  unint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  unint64_t v34 = a1 & 0xC000000000000001;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v32 = a1 & 0xFFFFFFFFFFFFFF8;
  if (a1 < 0) {
    uint64_t v7 = a1;
  }
  uint64_t v30 = a1 + 32;
  uint64_t v31 = v7;
  while (1)
  {
    if (v34)
    {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v5 >= *(void *)(v32 + 16)) {
        __break(1u);
      }
      id v8 = *(id *)(v30 + 8 * v5);
    }
    char v9 = v8;
    if (__OFADD__(v5++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v12 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13)) {
      break;
    }
LABEL_19:

    if (v33)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v5 == v19) {
        goto LABEL_21;
      }
    }
    else if (v5 == *(void *)(v32 + 16))
    {
      goto LABEL_21;
    }
  }
  type metadata accessor for NearbyGroupMember();
  id v14 = *(id *)(*(void *)(v2 + 48) + 8 * v13);
  char v15 = static NSObject.== infix(_:_:)();

  if ((v15 & 1) == 0)
  {
    uint64_t v16 = ~v12;
    do
    {
      unint64_t v13 = (v13 + 1) & v16;
      if (((*(void *)(v6 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
        goto LABEL_19;
      }
      id v17 = *(id *)(*(void *)(v2 + 48) + 8 * v13);
      char v18 = static NSObject.== infix(_:_:)();
    }
    while ((v18 & 1) == 0);
  }

  v35[1] = v5;
  char v21 = *(unsigned char *)(v2 + 32);
  unint64_t v22 = (unint64_t)((1 << v21) + 63) >> 6;
  size_t v23 = 8 * v22;
  if ((v21 & 0x3Fu) < 0xE
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v29 - ((v23 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v23);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v29 - ((v23 + 15) & 0x3FFFFFFFFFFFFFF0)), v22, v2, v13, v35);
    uint64_t v25 = v24;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = (void *)swift_slowAlloc();
    memcpy(v26, (const void *)(v2 + 56), v23);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v26, v22, v2, v13, v35);
    uint64_t v25 = v27;
    swift_release();
    swift_bridgeObjectRelease();
    swift_slowDealloc();
  }
  return (void *)v25;
}

unint64_t lazy protocol witness table accessor for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHostIDSService.Errors and conformance NearbyGroupHostIDSService.Errors);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in NearbyGroupHostIDSService.distributeGroupInitialization(for:to:)(uint64_t a1)
{
  return closure #1 in NearbyGroupHostIDSService.distributeGroupInitialization(for:to:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in NearbyGroupHostIDSService.distributeRemove(for:removingMember:)(uint64_t a1)
{
  return closure #1 in NearbyGroupHostIDSService.distributeRemove(for:removingMember:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in NearbyGroupHostIDSService.distributeLeave(for:)(uint64_t a1)
{
  return closure #1 in NearbyGroupHostIDSService.distributeLeave(for:)(a1, *(void *)(v1 + 16));
}

void specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  unint64_t v5 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v33 = v7 - 1;
  unint64_t v8 = a5[1];
  if (*a5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8 == v9) {
      goto LABEL_3;
    }
  }
  else if (v8 == *(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(a1, a2, v33, a3);
    return;
  }
  uint64_t v35 = a3 + 56;
  unint64_t v34 = v5;
  while (1)
  {
    uint64_t v10 = *v5;
    if ((*v5 & 0xC000000000000001) != 0)
    {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_10;
    }
    if ((v8 & 0x8000000000000000) != 0) {
      break;
    }
    if (v8 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_31;
    }
    id v11 = *(id *)(v10 + 8 * v8 + 32);
LABEL_10:
    uint64_t v12 = v11;
    uint64_t v13 = v5[1];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_32;
    }
    v5[1] = v15;
    Swift::Int v16 = NSObject._rawHashValue(seed:)(*(void *)(a3 + 40));
    uint64_t v17 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v18 = v16 & ~v17;
    unint64_t v19 = v18 >> 6;
    uint64_t v20 = 1 << v18;
    if (((1 << v18) & *(void *)(v35 + 8 * (v18 >> 6))) == 0) {
      goto LABEL_18;
    }
    type metadata accessor for NearbyGroupMember();
    id v21 = *(id *)(*(void *)(a3 + 48) + 8 * v18);
    char v22 = static NSObject.== infix(_:_:)();

    if ((v22 & 1) == 0)
    {
      uint64_t v23 = ~v17;
      for (unint64_t i = v18 + 1; ; unint64_t i = v25 + 1)
      {
        unint64_t v25 = i & v23;
        if (((*(void *)(v35 + (((i & v23) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v23)) & 1) == 0) {
          break;
        }
        id v26 = *(id *)(*(void *)(a3 + 48) + 8 * v25);
        char v27 = static NSObject.== infix(_:_:)();

        if (v27)
        {

          unint64_t v19 = v25 >> 6;
          uint64_t v20 = 1 << v25;
          goto LABEL_20;
        }
      }
LABEL_18:

      unint64_t v5 = v34;
      goto LABEL_23;
    }

LABEL_20:
    unint64_t v28 = a1[v19];
    a1[v19] = v28 & ~v20;
    unint64_t v5 = v34;
    if ((v20 & v28) != 0)
    {
      uint64_t v29 = v33 - 1;
      if (__OFSUB__(v33, 1)) {
        goto LABEL_33;
      }
      --v33;
      if (!v29) {
        return;
      }
    }
LABEL_23:
    unint64_t v8 = v5[1];
    if (*v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v8 == v30) {
        goto LABEL_3;
      }
    }
    else if (v8 == *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NearbyGroupMember>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = (void *)result;
  uint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    Swift::Int v18 = v9[5];
    id v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1 << *((unsigned char *)v9 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

char *specialized NearbyGroupHostIDSService.init(idsService:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  uint64_t v62 = *(void *)(v7 - 8);
  uint64_t v63 = v7;
  __chkstk_darwin(v7);
  uint64_t v61 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Publishers.PrefetchStrategy();
  uint64_t v58 = *(void *)(v9 - 8);
  uint64_t v59 = v9;
  __chkstk_darwin(v9);
  uint64_t v55 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v64 = v11;
  uint64_t v65 = v12;
  __chkstk_darwin(v11);
  uint64_t v60 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v52 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v51 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v15);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v16 - 8);
  v70[3] = a3;
  v70[4] = a4;
  uint64_t v54 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v70);
  Swift::Int v18 = *(void (**)(void))(*(void *)(a3 - 8) + 32);
  uint64_t v56 = a3;
  uint64_t v57 = boxed_opaque_existential_1;
  v18();
  uint64_t v19 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService__incomingMessages;
  uint64_t v50 = OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService__incomingMessages;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  swift_allocObject();
  uint64_t v49 = a2;
  unint64_t v66 = a2;
  *(void *)&a2[v19] = PassthroughSubject.init()();
  uint64_t v68 = 0;
  unint64_t v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v68 = (void *)0xD00000000000001ALL;
  unint64_t v69 = 0x80000001000DBAF0;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)(a4 + 8) + 8))(a3);
  if (v21) {
    uint64_t v22 = v20;
  }
  else {
    uint64_t v22 = 0x4E574F4E4B4E55;
  }
  if (v21) {
    unint64_t v23 = v21;
  }
  else {
    unint64_t v23 = (void *)0xE700000000000000;
  }
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v24._uint64_t countAndFlagsBits = v22;
  v24._uint64_t object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  uint64_t v68 = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type NearbyGroup_Group and conformance NearbyGroup_Group((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v52 + 104))(v51, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v53);
  uint64_t v25 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  BOOL v26 = v66;
  *(void *)&v66[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_queue] = v25;
  outlined init with copy of PseudonymProtocol((uint64_t)v70, (uint64_t)&v26[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_service]);
  uint64_t v68 = *(void **)&v49[v50];
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  uint64_t v68 = (void *)Publisher.eraseToAnyPublisher()();
  uint64_t v28 = v58;
  uint64_t v27 = v59;
  uint64_t v29 = v55;
  (*(void (**)(char *, void, uint64_t))(v58 + 104))(v55, enum case for Publishers.PrefetchStrategy.byRequest(_:), v59);
  uint64_t v31 = v61;
  uint64_t v30 = v62;
  uint64_t v32 = v63;
  (*(void (**)(char *, void, uint64_t))(v62 + 104))(v61, enum case for Publishers.BufferingStrategy.dropOldest<A>(_:), v63);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>);
  uint64_t v33 = v60;
  Publisher.buffer(size:prefetch:whenFull:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<(NearbyGroupHostIDSService.MessageEvent, NearbyGroupHostIDSService.MessageContext), Never>>);
  uint64_t v34 = v64;
  uint64_t v35 = Publisher.eraseToAnyPublisher()();
  swift_release();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v33, v34);
  uint64_t v36 = v66;
  *(void *)&v66[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_incomingMessages] = v35;

  uint64_t v37 = (objc_class *)type metadata accessor for NearbyGroupHostIDSService();
  v67.receiver = v36;
  v67.super_class = v37;
  id v38 = objc_msgSendSuper2(&v67, "init");
  id v39 = objc_allocWithZone((Class)IDSServiceDelegateProperties);
  uint64_t v40 = (char *)v38;
  id v41 = [v39 init];
  [v41 setWantsCrossAccountMessaging:1];
  unint64_t v42 = *(void **)&v40[OBJC_IVAR____TtC44com_apple_SharePlay_NearbyInvitationsService25NearbyGroupHostIDSService_queue];
  uint64_t v43 = v54;
  uint64_t v44 = *(void (**)(char *, id, void *, uint64_t, uint64_t))(v54 + 32);
  uint64_t v45 = v40;
  id v46 = v41;
  id v47 = v42;
  v44(v40, v41, v42, v56, v43);

  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v70);
  return v45;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t type metadata accessor for NearbyGroupHostIDSService()
{
  return self;
}

uint64_t specialized static NearbyGroupHostIDSService.MessageEvent.Member.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 == a5 && a2 == a6 || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    if (a4)
    {
      if (a8 && (a3 == a7 && a4 == a8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization);
}

uint64_t type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyGroupHostIDSService.MessageEvent.MembershipMutation);
}

uint64_t outlined init with copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  char v7 = *((unsigned char *)a1 + 32);
  outlined copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 32) = v7;
  return a2;
}

uint64_t outlined assign with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined destroy of NearbyGroup_Group(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void specialized Sequence.first(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSAccount);
    lazy protocol witness table accessor for type IDSAccount and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v6 = v25;
    uint64_t v23 = v26;
    uint64_t v7 = v27;
    int64_t v8 = v28;
    unint64_t v9 = v29;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v23 = a1 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    int64_t v8 = 0;
  }
  int64_t v22 = (unint64_t)(v7 + 64) >> 6;
  if ((v6 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_36;
  }
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for IDSAccount);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v14 = v30;
  swift_unknownObjectRelease();
  int64_t v15 = v8;
  uint64_t v16 = v9;
  if (!v14) {
    goto LABEL_36;
  }
  while (1)
  {
    id v30 = v14;
    char v20 = closure #1 in IDSService.account(for:)(&v30, a2, a3);
    if (v4)
    {

      goto LABEL_36;
    }
    if (v20) {
      goto LABEL_36;
    }

    int64_t v8 = v15;
    unint64_t v9 = v16;
    if (v6 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v9) {
      break;
    }
    uint64_t v16 = (v9 - 1) & v9;
    unint64_t v17 = __clz(__rbit64(v9)) | (v8 << 6);
    int64_t v15 = v8;
LABEL_24:
    id v14 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
    if (!v14) {
      goto LABEL_36;
    }
  }
  int64_t v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    return;
  }
  if (v15 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v15);
  if (v18)
  {
LABEL_23:
    uint64_t v16 = (v18 - 1) & v18;
    unint64_t v17 = __clz(__rbit64(v18)) + (v15 << 6);
    goto LABEL_24;
  }
  int64_t v19 = v8 + 2;
  if (v8 + 2 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v19 = v8 + 3;
  if (v8 + 3 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v19 = v8 + 4;
  if (v8 + 4 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18)
  {
LABEL_22:
    int64_t v15 = v19;
    goto LABEL_23;
  }
  int64_t v15 = v8 + 5;
  if (v8 + 5 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v15);
  if (v18) {
    goto LABEL_23;
  }
  int64_t v21 = v8 + 6;
  while (v22 != v21)
  {
    unint64_t v18 = *(void *)(v23 + 8 * v21++);
    if (v18)
    {
      int64_t v15 = v21 - 1;
      goto LABEL_23;
    }
  }
LABEL_36:
  outlined consume of Set<IDSAccount>.Iterator._Variant();
}

unint64_t specialized Set.union<A>(_:)(unint64_t result, uint64_t a2)
{
  unint64_t v2 = result;
  uint64_t v9 = a2;
  if (!(result >> 62))
  {
    uint64_t v3 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
    return v9;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    return v9;
  }
LABEL_3:
  if (v3 >= 1)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        specialized Set._Variant.insert(_:)(&v8, v5);
      }
    }
    else
    {
      uint64_t v6 = (void **)(v2 + 32);
      do
      {
        uint64_t v7 = *v6++;
        specialized Set._Variant.insert(_:)(&v8, v7);

        --v3;
      }
      while (v3);
    }
    return v9;
  }
  __break(1u);
  return result;
}

void specialized NearbyGroupHostIDSService.service(_:account:incomingData:fromID:context:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  if (!a4)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v7 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.host);
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Dropping message due to invalid fromID %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  if (a2 >> 60 == 15)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    JUMPOUT(0x1000A9390);
  }
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 == a1 >> 32) {
        goto LABEL_20;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(a1 + 16) == *(void *)(a1 + 24)) {
        goto LABEL_20;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_20;
    default:
      if ((a2 & 0xFF000000000000) == 0)
      {
LABEL_20:
        if (one-time initialization token for host != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)static Log.host);
        osos_log_t log = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(oslog, v13))
        {
          id v14 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v14 = 0;
          _os_log_impl((void *)&_mh_execute_header, oslog, v13, "Dropping message due to invalid data", v14, 2u);
          swift_slowDealloc();
        }

        return;
      }
LABEL_8:
      if (!a5) {
        goto LABEL_29;
      }
      NearbyGroupHostIDSService.handleIncomingData(from:data:context:)(a3, a4, a1, a2, a5);
      break;
  }
}

uint64_t type metadata accessor for NearbyGroupHostIDSService.MessageEvent(uint64_t a1)
{
  return type metadata accessor for NearbyInvitationsInviteScanner(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyGroupHostIDSService.MessageEvent);
}

uint64_t outlined init with copy of NearbyGroup_Group(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of NearbyGroup_Group(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in NearbyGroupHostIDSService.MessageEvents.Iterator()
{
  return &protocol witness table for Never;
}

unint64_t lazy protocol witness table accessor for type NearbyGroupHostIDSService.MessageEvents.Iterator and conformance NearbyGroupHostIDSService.MessageEvents.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvents.Iterator and conformance NearbyGroupHostIDSService.MessageEvents.Iterator;
  if (!lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvents.Iterator and conformance NearbyGroupHostIDSService.MessageEvents.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupHostIDSService.MessageEvents.Iterator and conformance NearbyGroupHostIDSService.MessageEvents.Iterator);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NearbyGroupHostIDSService.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A9670);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupHostIDSService.Errors()
{
  return &type metadata for NearbyGroupHostIDSService.Errors;
}

ValueMetadata *type metadata accessor for NearbyGroupHostIDSService.MessageEvents()
{
  return &type metadata for NearbyGroupHostIDSService.MessageEvents;
}

ValueMetadata *type metadata accessor for NearbyGroupHostIDSService.MessageEvents.Iterator()
{
  return &type metadata for NearbyGroupHostIDSService.MessageEvents.Iterator;
}

void **initializeBufferWithCopyOfBuffer for NearbyGroupHostIDSService.MessageContext(void **a1, void **a2)
{
  int v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for NearbyGroupHostIDSService.MessageContext(id *a1)
{
}

void **assignWithCopy for NearbyGroupHostIDSService.MessageContext(void **a1, void **a2)
{
  int v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void **assignWithTake for NearbyGroupHostIDSService.MessageContext(void **a1, void **a2)
{
  int v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyGroupHostIDSService.MessageContext(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyGroupHostIDSService.MessageContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupHostIDSService.MessageContext()
{
  return &type metadata for NearbyGroupHostIDSService.MessageContext;
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyGroupHostIDSService.MessageEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0);
      uint64_t v9 = *(int *)(v8 + 20);
      os_log_type_t v10 = (uint64_t *)((char *)a1 + v9);
      uint64_t v11 = (uint64_t *)((char *)a2 + v9);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      *os_log_type_t v10 = v13;
      v10[1] = v12;
      uint64_t v14 = *(int *)(v8 + 24);
      int64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = *(void *)v16;
      uint64_t v18 = *((void *)v16 + 1);
      uint64_t v19 = *((void *)v16 + 2);
      uint64_t v20 = *((void *)v16 + 3);
      char v21 = v16[32];
      swift_bridgeObjectRetain();
      outlined copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
      *(void *)int64_t v15 = v17;
      *((void *)v15 + 1) = v18;
      *((void *)v15 + 2) = v19;
      *((void *)v15 + 3) = v20;
      unsigned char v15[32] = v21;
    }
    else
    {
      uint64_t v23 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0);
      *(uint64_t *)((char *)a1 + *(int *)(v23 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v23 + 20));
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation()
{
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for NearbyGroupHostIDSService.MessageEvent(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0);
    swift_bridgeObjectRelease();
    return outlined consume of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
  }
  else
  {
    type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0);
    return swift_bridgeObjectRelease();
  }
}

uint64_t outlined consume of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NearbyGroupHostIDSService.MessageEvent(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0);
    uint64_t v7 = *(int *)(v6 + 20);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (uint64_t *)(a2 + v7);
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    *uint64_t v8 = v11;
    v8[1] = v10;
    uint64_t v12 = *(int *)(v6 + 24);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = (uint64_t *)(a2 + v12);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = v14[3];
    char v19 = *((unsigned char *)v14 + 32);
    swift_bridgeObjectRetain();
    outlined copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
    *(void *)uint64_t v13 = v15;
    *(void *)(v13 + 8) = v16;
    *(void *)(v13 + 16) = v17;
    *(void *)(v13 + 24) = v18;
    *(unsigned char *)(v13 + 32) = v19;
  }
  else
  {
    uint64_t v20 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0);
    *(void *)(a1 + *(int *)(v20 + 20)) = *(void *)(a2 + *(int *)(v20 + 20));
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for NearbyGroupHostIDSService.MessageEvent(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of NearbyGroup_Group(a1, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0);
      uint64_t v7 = *(int *)(v6 + 20);
      uint64_t v8 = (void *)(a1 + v7);
      uint64_t v9 = (void *)(a2 + v7);
      *uint64_t v8 = *v9;
      v8[1] = v9[1];
      uint64_t v10 = *(int *)(v6 + 24);
      uint64_t v11 = a1 + v10;
      uint64_t v12 = (uint64_t *)(a2 + v10);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      uint64_t v15 = v12[2];
      uint64_t v16 = v12[3];
      char v17 = *((unsigned char *)v12 + 32);
      swift_bridgeObjectRetain();
      outlined copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
      *(void *)uint64_t v11 = v13;
      *(void *)(v11 + 8) = v14;
      *(void *)(v11 + 16) = v15;
      *(void *)(v11 + 24) = v16;
      *(unsigned char *)(v11 + 32) = v17;
    }
    else
    {
      uint64_t v18 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0);
      *(void *)(a1 + *(int *)(v18 + 20)) = *(void *)(a2 + *(int *)(v18 + 20));
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for NearbyGroupHostIDSService.MessageEvent(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0);
    *(_OWORD *)(a1 + *(int *)(v6 + 20)) = *(_OWORD *)(a2 + *(int *)(v6 + 20));
    uint64_t v7 = *(int *)(v6 + 24);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    long long v10 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v10;
    *(unsigned char *)(v8 + 32) = *(unsigned char *)(v9 + 32);
  }
  else
  {
    uint64_t v11 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0);
    *(void *)(a1 + *(int *)(v11 + 20)) = *(void *)(a2 + *(int *)(v11 + 20));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for NearbyGroupHostIDSService.MessageEvent(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of NearbyGroup_Group(a1, type metadata accessor for NearbyGroupHostIDSService.MessageEvent);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(0);
      *(_OWORD *)(a1 + *(int *)(v6 + 20)) = *(_OWORD *)(a2 + *(int *)(v6 + 20));
      uint64_t v7 = *(int *)(v6 + 24);
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      long long v10 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v10;
      *(unsigned char *)(v8 + 32) = *(unsigned char *)(v9 + 32);
    }
    else
    {
      uint64_t v11 = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(0);
      *(void *)(a1 + *(int *)(v11 + 20)) = *(void *)(a2 + *(int *)(v11 + 20));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for NearbyGroupHostIDSService.MessageEvent()
{
  uint64_t result = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for NearbyGroupHostIDSService.MessageEvent.Member()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for NearbyGroupHostIDSService.MessageEvent.Member(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NearbyGroupHostIDSService.MessageEvent.Member(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for NearbyGroupHostIDSService.MessageEvent.Member(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NearbyGroupHostIDSService.MessageEvent.Member()
{
  return &type metadata for NearbyGroupHostIDSService.MessageEvent.Member;
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AA4D4);
}

uint64_t sub_1000AA4D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AA5A8);
}

uint64_t sub_1000AA5A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for NearbyGroupHostIDSService.MessageEvent.RemoteGroupInitialization()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    unint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (char *)a1 + v9;
    uint64_t v14 = (char *)a2 + v9;
    uint64_t v15 = *(uint64_t *)((char *)a2 + v9);
    uint64_t v16 = *((void *)v14 + 1);
    uint64_t v17 = *((void *)v14 + 2);
    uint64_t v18 = *((void *)v14 + 3);
    char v19 = v14[32];
    swift_bridgeObjectRetain();
    outlined copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
    *(void *)uint64_t v13 = v15;
    *((void *)v13 + 1) = v16;
    *((void *)v13 + 2) = v17;
    *((void *)v13 + 3) = v18;
    unsigned char v13[32] = v19;
  }
  return a1;
}

uint64_t destroy for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return outlined consume of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
}

uint64_t initializeWithCopy for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  uint64_t v14 = *(void *)(a2 + v8);
  uint64_t v15 = *(void *)(a2 + v8 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v17 = *(void *)(v13 + 24);
  char v18 = *(unsigned char *)(v13 + 32);
  swift_bridgeObjectRetain();
  outlined copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
  *(void *)uint64_t v12 = v14;
  *(void *)(v12 + 8) = v15;
  *(void *)(v12 + 16) = v16;
  *(void *)(v12 + 24) = v17;
  *(unsigned char *)(v12 + 32) = v18;
  return a1;
}

uint64_t assignWithCopy for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = v12[2];
  uint64_t v16 = v12[3];
  char v17 = *((unsigned char *)v12 + 32);
  outlined copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
  *(void *)uint64_t v11 = v13;
  *(void *)(v11 + 8) = v14;
  *(void *)(v11 + 16) = v15;
  *(void *)(v11 + 24) = v16;
  *(unsigned char *)(v11 + 32) = v17;
  outlined consume of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
  return a1;
}

uint64_t initializeWithTake for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 32) = *(unsigned char *)(v9 + 32);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  return a1;
}

uint64_t assignWithTake for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  char v15 = *(unsigned char *)(v14 + 32);
  long long v16 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v16;
  *(unsigned char *)(v13 + 32) = v15;
  outlined consume of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AABD4);
}

uint64_t sub_1000AABD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for NearbyGroupHostIDSService.MessageEvent.MembershipMutation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AACAC);
}

uint64_t sub_1000AACAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for NearbyGroupHostIDSService.MessageEvent.MembershipMutation()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation()
{
  return outlined consume of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
}

uint64_t initializeWithCopy for NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  char v7 = *((unsigned char *)a2 + 32);
  outlined copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  char v7 = *((unsigned char *)a2 + 32);
  outlined copy of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation();
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyGroupHostIDSService.MessageEvent.MembershipMutation.Operation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}