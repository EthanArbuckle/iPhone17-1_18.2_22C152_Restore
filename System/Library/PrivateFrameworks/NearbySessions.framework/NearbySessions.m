uint64_t key path getter for NearbyInvitationServiceClient.delegate : NearbyInvitationServiceClient@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  result = MEMORY[0x25A2B6540](v3);
  v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for NearbyInvitationServiceClient.delegate : NearbyInvitationServiceClient(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t NearbyInvitationServiceClient.delegate.getter()
{
  uint64_t v1 = v0 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  return MEMORY[0x25A2B6540](v1);
}

uint64_t NearbyInvitationServiceClient.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*NearbyInvitationServiceClient.delegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for NearbyInvitationServiceClient.delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x25A2B6540](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return NearbyInvitationServiceClient.delegate.modify;
}

id one-time initialization function for shared()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NearbyInvitationServiceClient()), sel_init);
  static NearbyInvitationServiceClient.shared = (uint64_t)result;
  return result;
}

id NearbyInvitationServiceClient.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t *NearbyInvitationServiceClient.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static NearbyInvitationServiceClient.shared;
}

id static NearbyInvitationServiceClient.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NearbyInvitationServiceClient.shared;
  return v0;
}

id NearbyInvitationServiceClient.init()()
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[direct field offset for NearbyInvitationServiceClient.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v4.receiver = v0;
  v4.super_class = ObjectType;
  id v2 = objc_msgSendSuper2(&v4, sel_init);
  dispatch thunk of XPCClient.connectionClosure.setter();

  return v2;
}

id closure #1 in NearbyInvitationServiceClient.init()()
{
  uint64_t v0 = type metadata accessor for MachServiceName();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F33FE0], v0);
  uint64_t v4 = MachServiceName.rawValue.getter();
  uint64_t v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v7 = objc_allocWithZone(MEMORY[0x263F08D68]);
  v8 = (void *)MEMORY[0x25A2B5660](v4, v6);
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v7, sel_initWithServiceName_, v8);

  return v9;
}

id @objc NearbyInvitationServiceClient.init()(char *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&a1[direct field offset for NearbyInvitationServiceClient.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v5.receiver = a1;
  v5.super_class = ObjectType;
  id v3 = objc_msgSendSuper2(&v5, sel_init);
  dispatch thunk of XPCClient.connectionClosure.setter();

  return v3;
}

Swift::Void __swiftcall NearbyInvitationServiceClient.handleServerDisconnect()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v4 = XPCClient.queue.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F0E0], v1);
  char v5 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v6 = v0 + direct field offset for NearbyInvitationServiceClient.delegate;
    swift_beginAccess();
    if (MEMORY[0x25A2B6540](v6))
    {
      uint64_t v7 = *(void *)(v6 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v7 + 16))(v0, &protocol witness table for NearbyInvitationServiceClient, ObjectType, v7);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t NearbyInvitationServiceClient.createGroup(with:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.createGroup(with:response:)(a1, a2, a3, (uint64_t)&unk_270653140, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.createGroup(with:response:), (uint64_t)&block_descriptor);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)();
}

{
  uint64_t v0;

  return closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  id v9 = a2;
  v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v21 = a3;
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315650;
    aBlock[0] = v13;
    uint64_t v14 = _typeName(_:qualified:)();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, aBlock);
    uint64_t v22 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x80000002573C20D0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2080;
    uint64_t v24 = (uint64_t)v9;
    type metadata accessor for NearbyGroupCreationRequest(0);
    id v16 = v9;
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v22;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v10, v11, "%s %s %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    uint64_t v19 = v13;
    a3 = v21;
    MEMORY[0x25A2B6460](v19, -1, -1);
    MEMORY[0x25A2B6460](v12, -1, -1);
  }
  else
  {
  }
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed NearbyGroupConnectionInfo?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_191;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_createGroupWith_response_, v9, v20);
  _Block_release(v20);
}

uint64_t closure #2 in closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(void *a1, void *a2, uint64_t (*a3)(void, void *))
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  id v7 = a2;
  id v8 = a1;
  id v9 = v7;
  id v10 = a1;
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v21 = v20;
    *(_DWORD *)uint64_t v13 = 138412546;
    id v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v9;

    *(_WORD *)(v13 + 12) = 2080;
    id v16 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v17 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v11, v12, "Failed createGroup(with: %@), error: %s", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v14, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v20, -1, -1);
    MEMORY[0x25A2B6460](v13, -1, -1);
  }
  else
  {
  }
  return a3(0, a1);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t NearbyInvitationServiceClient.requestApproval(with:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.createGroup(with:response:)(a1, a2, a3, (uint64_t)&unk_270653190, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:), (uint64_t)&block_descriptor_20);
}

uint64_t NearbyInvitationServiceClient.createGroup(with:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  os_log_type_t v12 = (char *)&ObjectType - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  id v15 = (char *)&ObjectType - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = (void *)XPCClient.queue.getter();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v6;
  v17[3] = a1;
  v17[4] = v23;
  v17[5] = a3;
  v17[6] = ObjectType;
  aBlock[4] = v24;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v25;
  unint64_t v18 = _Block_copy(aBlock);
  id v19 = v6;
  id v20 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v15, v12, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v26);
  return swift_release();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  id v9 = a2;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v21 = a3;
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315650;
    aBlock[0] = v13;
    uint64_t v14 = _typeName(_:qualified:)();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, aBlock);
    uint64_t v22 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000002573C2050, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2080;
    uint64_t v24 = (uint64_t)v9;
    type metadata accessor for InvitationApprovalRequest();
    id v16 = v9;
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v22;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v10, v11, "%s %s %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    uint64_t v19 = v13;
    a3 = v21;
    MEMORY[0x25A2B6460](v19, -1, -1);
    MEMORY[0x25A2B6460](v12, -1, -1);
  }
  else
  {
  }
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed NearbyGroupConnectionInfo?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_185;
  id v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_requestApprovalWith_completion_, v9, v20);
  _Block_release(v20);
}

uint64_t closure #2 in closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)(void *a1, void *a2, uint64_t (*a3)(void, void *))
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  id v7 = a2;
  id v8 = a1;
  id v9 = v7;
  id v10 = a1;
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v22 = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    type metadata accessor for InvitationApprovalRequest();
    id v15 = v9;
    uint64_t v16 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    id v18 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v19 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v11, v12, "Failed requestApproval(with: %s), error: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v14, -1, -1);
    MEMORY[0x25A2B6460](v13, -1, -1);
  }
  else
  {
  }
  return a3(0, a1);
}

uint64_t NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(a1, a2, a3, a4, (uint64_t)&unk_2706531E0, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:), (uint64_t)&block_descriptor_26);
}

uint64_t closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a4;
  v8[4] = a5;
  id v9 = a2;
  swift_retain();
  XPCClient.withHost(body:errorHandler:)();
  return swift_release();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)()
{
  return closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(void **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.client);
  id v10 = a2;
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v22 = a5;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315650;
    uint64_t v15 = _typeName(_:qualified:)();
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, aBlock);
    uint64_t v23 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x80000002573C1FD0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2080;
    uint64_t v26 = (uint64_t)v10;
    type metadata accessor for IncomingInvitationJoinRequest(0);
    id v17 = v10;
    uint64_t v18 = String.init<A>(reflecting:)();
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    id v8 = v23;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v11, v12, "%s %s %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v14, -1, -1);
    uint64_t v20 = v13;
    a5 = v22;
    MEMORY[0x25A2B6460](v20, -1, -1);
  }
  else
  {
  }
  aBlock[4] = a4;
  aBlock[5] = a5;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_179;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_approveWithPendingMember_response_completion_, v10, a3, v21);
  _Block_release(v21);
}

uint64_t NearbyInvitationServiceClient.reject(pendingMember:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.createGroup(with:response:)(a1, a2, a3, (uint64_t)&unk_270653230, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.reject(pendingMember:completion:), (uint64_t)&block_descriptor_32);
}

uint64_t closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = (void *)swift_allocObject();
  v7[2] = a2;
  v7[3] = a3;
  v7[4] = a4;
  id v8 = a2;
  swift_retain();
  XPCClient.withHost(body:errorHandler:)();
  return swift_release();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.reject(pendingMember:completion:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.reject(pendingMember:completion:)(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  id v9 = a2;
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v21 = a3;
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315650;
    aBlock[0] = v13;
    uint64_t v14 = _typeName(_:qualified:)();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, aBlock);
    uint64_t v22 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000002573C1FA0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2080;
    uint64_t v24 = (uint64_t)v9;
    type metadata accessor for IncomingInvitationJoinRequest(0);
    id v16 = v9;
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v22;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v10, v11, "%s %s %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    uint64_t v19 = v13;
    a3 = v21;
    MEMORY[0x25A2B6460](v19, -1, -1);
    MEMORY[0x25A2B6460](v12, -1, -1);
  }
  else
  {
  }
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_173;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_rejectWithPendingMember_completion_, v9, v20);
  _Block_release(v20);
}

uint64_t closure #2 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(void *a1, void *a2, uint64_t (*a3)(void *), uint64_t a4, const char *a5)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.client);
  id v10 = a2;
  id v11 = a1;
  id v12 = v10;
  id v13 = a1;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v25 = v17;
    *(_DWORD *)uint64_t v16 = 136315394;
    type metadata accessor for IncomingInvitationJoinRequest(0);
    id v18 = v12;
    uint64_t v19 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    id v21 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v22 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v14, v15, a5, (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v17, -1, -1);
    MEMORY[0x25A2B6460](v16, -1, -1);
  }
  else
  {
  }
  return a3(a1);
}

uint64_t NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(a1, a2, a3, (uint64_t)&unk_270653280, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:), (uint64_t)&block_descriptor_38);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)();
}

{
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.client);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v11 = _typeName(_:qualified:)();
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x80000002573C1F70, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_257351000, v8, v9, "%s %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v14, -1, -1);
    MEMORY[0x25A2B6460](v10, -1, -1);
  }

  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed NearbyGroupConnectionInfo?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_167;
  id v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_generateNearbyInvitationWithProvider_response_, a2, v13);
  _Block_release(v13);
}

uint64_t NearbyInvitationServiceClient.advertiseNearbyInvitation(_:provider:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v15 = (void *)XPCClient.queue.getter();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v4;
  v16[3] = a1;
  uint64_t v17 = v23;
  v16[4] = v22;
  v16[5] = v17;
  v16[6] = a4;
  v16[7] = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbyInvitation(_:provider:response:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_44;
  id v18 = _Block_copy(aBlock);
  id v19 = v4;
  id v20 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v14, v11, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v24);
  return swift_release();
}

uint64_t sub_257355E90()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbyInvitation(_:provider:response:)()
{
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbyInvitation(_:provider:response:)(void **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  id v11 = a2;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v23 = a5;
    uint64_t v14 = swift_slowAlloc();
    id v21 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    aBlock[0] = v22;
    *(_DWORD *)uint64_t v14 = 136315650;
    uint64_t v15 = _typeName(_:qualified:)();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000002573C1EF0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 22) = 2112;
    uint64_t v25 = (uint64_t)v11;
    uint64_t v17 = a4;
    id v18 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v21 = v11;

    a4 = v17;
    _os_log_impl(&dword_257351000, v12, v13, "%s %s %@", (uint8_t *)v14, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v21, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v22, -1, -1);
    uint64_t v19 = v14;
    a5 = v23;
    MEMORY[0x25A2B6460](v19, -1, -1);
  }
  else
  {
  }
  aBlock[4] = a4;
  aBlock[5] = a5;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_164;
  id v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_advertiseNearbyInvitation_provider_response_, v11, a3, v20);
  _Block_release(v20);
}

uint64_t NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.createGroup(with:response:)(a1, a2, a3, (uint64_t)&unk_270653320, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:), (uint64_t)&block_descriptor_50);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)();
}

{
  return XPCClient.withHost(body:errorHandler:)();
}

uint64_t NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(a1, a2, a3, (uint64_t)&unk_270653370, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:), (uint64_t)&block_descriptor_56);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)();
}

{
  type metadata accessor for UUID();
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a4;
  uint64_t v24 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.client);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v23[2] = a2;
  v12(v10, a2, v7);
  os_log_type_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    aBlock[0] = v23[0];
    *(_DWORD *)uint64_t v15 = 136315650;
    uint64_t v16 = _typeName(_:qualified:)();
    v23[1] = v4;
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x80000002573C1E80, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 22) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl(&dword_257351000, v13, v14, "%s %s %s", (uint8_t *)v15, 0x20u);
    uint64_t v20 = v23[0];
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v20, -1, -1);
    MEMORY[0x25A2B6460](v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  aBlock[4] = v24;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_158;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v25, sel_stopAdvertisingNearbyInvitation_response_, isa, v22);
  _Block_release(v22);
}

uint64_t NearbyInvitationServiceClient.stopAdvertisingNearbySessionEndpoint(response:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v18[0] - 8);
  MEMORY[0x270FA5388](v18[0]);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v13 = (void *)XPCClient.queue.getter();
  os_log_type_t v14 = (void *)swift_allocObject();
  v14[2] = v2;
  v14[3] = a1;
  v14[4] = a2;
  v14[5] = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbySessionEndpoint(response:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_62;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18[1] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v12, v9, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, void))(v10 + 8))(v12, v18[0]);
  return swift_release();
}

uint64_t sub_2573569A8()
{
  return objectdestroy_58Tm(48);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbySessionEndpoint(response:)()
{
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbySessionEndpoint(response:)(void **a1, uint64_t a2, uint64_t a3)
{
  char v5 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    aBlock[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = _typeName(_:qualified:)();
    uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000002573C1E50, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_257351000, v7, v8, "%s %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v10, -1, -1);
    MEMORY[0x25A2B6460](v9, -1, -1);
  }

  aBlock[4] = a2;
  aBlock[5] = a3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_155;
  os_log_type_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_stopAdvertisingNearbySessionEndpointWithResponse_, v13);
  _Block_release(v13);
}

uint64_t NearbyInvitationServiceClient.markInvitationUsed(_:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.createGroup(with:response:)(a1, a2, a3, (uint64_t)&unk_270653410, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.markInvitationUsed(_:response:), (uint64_t)&block_descriptor_68);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.markInvitationUsed(_:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)();
}

uint64_t NearbyInvitationServiceClient.assertAdvertisementPublic(_:rotations:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = a4;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  v34 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  os_log_type_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v15 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v4;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v14, v13, v10);
  uint64_t v19 = v31;
  *(void *)(v18 + v15) = v30;
  uint64_t v20 = (void *)(v18 + v16);
  uint64_t v21 = v33;
  void *v20 = v19;
  v20[1] = v21;
  *(void *)(v18 + v17) = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.assertAdvertisementPublic(_:rotations:response:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_74;
  uint64_t v22 = _Block_copy(aBlock);
  id v23 = v4;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  id v25 = v34;
  uint64_t v24 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v26 = (void *)v32;
  MEMORY[0x25A2B5970](0, v9, v25, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v25, v24);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v37);
  return swift_release();
}

uint64_t sub_2573570A8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.assertAdvertisementPublic(_:rotations:response:)()
{
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.assertAdvertisementPublic(_:rotations:response:)(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a5;
  uint64_t v31 = a4;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v32 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.client);
  unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v30 = a2;
  v14(v12, a2, v9);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v29 = v5;
    uint64_t v18 = v17;
    uint64_t v27 = swift_slowAlloc();
    aBlock[0] = v27;
    *(_DWORD *)uint64_t v18 = 136315650;
    uint64_t v19 = _typeName(_:qualified:)();
    uint64_t v28 = a3;
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000002573C1DF0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 22) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, aBlock);
    a3 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    _os_log_impl(&dword_257351000, v15, v16, "%s %s %s", (uint8_t *)v18, 0x20u);
    uint64_t v23 = v27;
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v23, -1, -1);
    MEMORY[0x25A2B6460](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  aBlock[4] = v31;
  aBlock[5] = v33;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed UUID?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_149;
  id v25 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v32, sel_assertAdvertisementPublic_rotations_response_, isa, a3, v25);
  _Block_release(v25);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed UUID?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
  }
  swift_retain();
  id v12 = a3;
  v9(v8, a3);
  swift_release();

  return outlined destroy of UUID?((uint64_t)v8);
}

uint64_t NearbyInvitationServiceClient.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v33 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v36 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  id v32 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  id v12 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v30 = XPCClient.queue.getter();
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15(v14, v29, v8);
  v15(v12, a2, v8);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  uint64_t v18 = (v10 + v16 + v17) & ~v16;
  unint64_t v19 = (v10 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v2;
  uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v21(v20 + v17, v14, v8);
  v21(v20 + v18, v12, v8);
  *(void *)(v20 + v19) = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.releaseAdvertisementPublicAssertion(_:assertionIdentifier:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_80;
  unint64_t v22 = _Block_copy(aBlock);
  id v23 = v2;
  static DispatchQoS.unspecified.getter();
  uint64_t v37 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  id v25 = v32;
  uint64_t v24 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v26 = (void *)v30;
  MEMORY[0x25A2B5970](0, v7, v25, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v24);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v35);
  return swift_release();
}

uint64_t sub_257357BB0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = ((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;

  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);
  return MEMORY[0x270FA0238](v0, v8, v6);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)()
{
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.client);
  id v12 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = a2;
  v12(v10, a2, v7);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    v24[1] = a3;
    uint64_t v16 = v15;
    v24[0] = swift_slowAlloc();
    uint64_t v28 = v24[0];
    *(_DWORD *)uint64_t v16 = 136315650;
    uint64_t v17 = _typeName(_:qualified:)();
    v24[2] = v3;
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003BLL, 0x80000002573C1D90, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl(&dword_257351000, v13, v14, "%s %s %s", (uint8_t *)v16, 0x20u);
    uint64_t v21 = v24[0];
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v21, -1, -1);
    MEMORY[0x25A2B6460](v16, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v23 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, sel_releaseAdvertisementPublicAssertion_assertionIdentifier_, isa, v23);
}

uint64_t NearbyInvitationServiceClient.releaseInvitation(_:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.createGroup(with:response:)(a1, a2, a3, (uint64_t)&unk_270653500, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.releaseInvitation(_:response:), (uint64_t)&block_descriptor_86);
}

uint64_t objectdestroyTm()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.releaseInvitation(_:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.markInvitationUsed(_:response:)(void **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, SEL *a9)
{
  uint64_t v11 = a9;
  id v12 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.client);
  id v14 = a2;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    Class v23 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    aBlock[0] = v24;
    *(_DWORD *)uint64_t v17 = 136315650;
    uint64_t v18 = _typeName(_:qualified:)();
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, a7, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 22) = 2112;
    uint64_t v30 = (uint64_t)v14;
    id v20 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *Class v23 = v14;

    _os_log_impl(&dword_257351000, v15, v16, "%s %s %@", (uint8_t *)v17, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v23, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v24, -1, -1);
    uint64_t v21 = v17;
    uint64_t v11 = a9;
    MEMORY[0x25A2B6460](v21, -1, -1);
  }
  else
  {
  }
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = a8;
  unint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v12, *v11, v14, v22);
  _Block_release(v22);
}

uint64_t NearbyInvitationServiceClient.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(a1, a2, a3, (uint64_t)&unk_270653550, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.scanNearbyInvitations(scannerID:response:), (uint64_t)&block_descriptor_92);
}

uint64_t NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v27 = a4;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v34 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v36 = v10;
  MEMORY[0x270FA5388](v10);
  id v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v13);
  os_log_type_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v6;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v19 + v17, v16, v13);
  id v20 = (void *)(v19 + v18);
  uint64_t v21 = v31;
  void *v20 = v30;
  v20[1] = v21;
  *(void *)(v19 + ((v18 + 23) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
  aBlock[4] = v32;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v33;
  unint64_t v22 = _Block_copy(aBlock);
  id v23 = v6;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v38 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v24 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v25 = (void *)v29;
  MEMORY[0x25A2B5970](0, v12, v9, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v24);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v36);
  return swift_release();
}

uint64_t objectdestroy_52Tm()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.scanNearbyInvitations(scannerID:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.scanNearbyInvitations(scannerID:response:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.client);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    aBlock[0] = v15;
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v11 = _typeName(_:qualified:)();
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x80000002573C1D40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_257351000, v8, v9, "%s %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v15, -1, -1);
    MEMORY[0x25A2B6460](v10, -1, -1);
  }

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_143;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_scanNearbyInvitationsWithScannerID_response_, isa, v14);
  _Block_release(v14);
}

uint64_t NearbyInvitationServiceClient.scanNearbyEndpoints(params:scannerID:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v32 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v31 = (char *)&ObjectType - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&ObjectType - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&ObjectType - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v4;
  *(void *)(v17 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v15, v14, v11);
  unint64_t v18 = (void *)(v17 + v16);
  uint64_t v19 = v29;
  *unint64_t v18 = v28;
  v18[1] = v19;
  *(void *)(v17 + ((v16 + 23) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.scanNearbyEndpoints(params:scannerID:response:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_98;
  id v20 = _Block_copy(aBlock);
  id v21 = v4;
  id v22 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v24 = v31;
  uint64_t v23 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v25 = (void *)v30;
  MEMORY[0x25A2B5970](0, v10, v24, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  return swift_release();
}

uint64_t sub_257359118()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.scanNearbyEndpoints(params:scannerID:response:)()
{
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.scanNearbyEndpoints(params:scannerID:response:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    aBlock[0] = v16;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v12 = _typeName(_:qualified:)();
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000002573C1D10, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_257351000, v9, v10, "%s %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v16, -1, -1);
    MEMORY[0x25A2B6460](v11, -1, -1);
  }

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  aBlock[4] = a4;
  aBlock[5] = a5;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_140;
  unint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_scanNearbyEndpointsWithParams_scannerID_response_, a2, isa, v15);
  _Block_release(v15);
}

uint64_t NearbyInvitationServiceClient.stopScanningNearbyInvitations(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(a1, a2, a3, (uint64_t)&unk_2706535F0, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.stopScanningNearbyInvitations(provider:response:), (uint64_t)&block_descriptor_104);
}

uint64_t NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  unint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)XPCClient.queue.getter();
  uint64_t v17 = (void *)swift_allocObject();
  uint64_t v18 = v22;
  v17[2] = v6;
  v17[3] = v18;
  v17[4] = v23;
  v17[5] = a3;
  v17[6] = ObjectType;
  aBlock[4] = v24;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v25;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v6;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v15, v12, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v26);
  return swift_release();
}

uint64_t objectdestroy_34Tm()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.stopScanningNearbyInvitations(provider:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, SEL *a9)
{
  uint64_t v12 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.client);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v22 = a8;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    aBlock[0] = v21;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v17 = _typeName(_:qualified:)();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, a7, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_257351000, v14, v15, "%s %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v21, -1, -1);
    uint64_t v19 = v16;
    a8 = v22;
    MEMORY[0x25A2B6460](v19, -1, -1);
  }

  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = a8;
  id v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v12, *a9, a2, v20);
  _Block_release(v20);
}

uint64_t NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(a1, a2, a3, a4, (uint64_t)&unk_270653640, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:), (uint64_t)&block_descriptor_110);
}

uint64_t NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v28 = a3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (void *)XPCClient.queue.getter();
  unint64_t v18 = (void *)swift_allocObject();
  void v18[2] = v7;
  v18[3] = a1;
  uint64_t v19 = v28;
  v18[4] = a2;
  v18[5] = v19;
  uint64_t v20 = ObjectType;
  v18[6] = a4;
  v18[7] = v20;
  aBlock[4] = v29;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v30;
  uint64_t v21 = _Block_copy(aBlock);
  id v22 = v7;
  id v23 = a1;
  id v24 = a2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v16, v13, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v31);
  return swift_release();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:)();
}

{
  return XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.client);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    aBlock[0] = v16;
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = _typeName(_:qualified:)();
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x80000002573C1C90, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_257351000, v10, v11, "%s %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v16, -1, -1);
    MEMORY[0x25A2B6460](v12, -1, -1);
  }

  aBlock[4] = a4;
  aBlock[5] = a5;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed NearbyGroupConnectionInfo?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_134;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_requestConnectionWith_localInvitation_response_, a2, a3, v15);
  _Block_release(v15);
}

void thunk for @escaping @callee_guaranteed (@guaranteed NearbyGroupConnectionInfo?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(a1, a2, a3, a4, (uint64_t)&unk_270653690, (uint64_t)partial apply for closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:), (uint64_t)&block_descriptor_116);
}

uint64_t objectdestroy_22Tm()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:)();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.client);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    aBlock[0] = v16;
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = _typeName(_:qualified:)();
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x80000002573C1C10, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_257351000, v10, v11, "%s %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v16, -1, -1);
    MEMORY[0x25A2B6460](v12, -1, -1);
  }

  aBlock[4] = a4;
  aBlock[5] = a5;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_131;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_requestEndpointConnectionWith_pseudonym_response_, a2, a3, v15);
  _Block_release(v15);
}

uint64_t NearbyInvitationServiceClient.approveConnectionRequest(_:localInvitation:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = (void *)XPCClient.queue.getter();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  v15[6] = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.approveConnectionRequest(_:localInvitation:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_122;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v3;
  id v18 = a1;
  outlined copy of Data._Representation(a2, a3);
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v13, v10, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v21);
  return swift_release();
}

uint64_t sub_25735A814()
{
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.approveConnectionRequest(_:localInvitation:)()
{
  return partial apply for closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

void closure #1 in closure #1 in NearbyInvitationServiceClient.approveConnectionRequest(_:localInvitation:)(void **a1, void *a2)
{
  uint64_t v3 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  id v5 = a2;
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = v14;
    *(_DWORD *)uint64_t v8 = 136315650;
    uint64_t v9 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x80000002573C1BC0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2112;
    id v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v5;

    _os_log_impl(&dword_257351000, v6, v7, "%s %s %@", (uint8_t *)v8, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v14, -1, -1);
    MEMORY[0x25A2B6460](v8, -1, -1);
  }
  else
  {
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, sel_approveConnectionRequest_localInvitation_, v5, isa);
}

uint64_t NearbyInvitationServiceClient.denyConnectionRequest(_:)(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  os_log_type_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)XPCClient.queue.getter();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v1;
  v13[3] = a1;
  v13[4] = ObjectType;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationServiceClient.denyConnectionRequest(_:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_128;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v1;
  id v16 = a1;
  static DispatchQoS.unspecified.getter();
  v18[1] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v11, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

uint64_t sub_25735AF04()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationServiceClient.denyConnectionRequest(_:)()
{
  return XPCClient.withHost(body:errorHandler:)();
}

id closure #1 in closure #1 in NearbyInvitationServiceClient.denyConnectionRequest(_:)(void **a1, void *a2)
{
  uint64_t v3 = *a1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  id v5 = a2;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = v14;
    *(_DWORD *)uint64_t v8 = 136315650;
    uint64_t v10 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x80000002573C1BA0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2112;
    id v12 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl(&dword_257351000, v6, v7, "%s %s %@", (uint8_t *)v8, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v14, -1, -1);
    MEMORY[0x25A2B6460](v8, -1, -1);
  }
  else
  {
  }
  return objc_msgSend(v3, sel_denyConnectionRequest_, v5, v14);
}

uint64_t NearbyInvitationServiceClient.__ivar_destroyer()
{
  return outlined destroy of weak NearbyInvitationServiceClientDelegate?(v0 + direct field offset for NearbyInvitationServiceClient.delegate);
}

id NearbyInvitationServiceClient.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc NearbyInvitationServiceClient.__ivar_destroyer(uint64_t a1)
{
  return outlined destroy of weak NearbyInvitationServiceClientDelegate?(a1 + direct field offset for NearbyInvitationServiceClient.delegate);
}

uint64_t protocol witness for NearbyInvitationsControllerDataSourceProtocol.delegate.getter in conformance NearbyInvitationServiceClient()
{
  uint64_t v1 = v0 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  return MEMORY[0x25A2B6540](v1);
}

uint64_t protocol witness for NearbyInvitationsControllerDataSourceProtocol.delegate.setter in conformance NearbyInvitationServiceClient(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for NearbyInvitationsControllerDataSourceProtocol.delegate.modify in conformance NearbyInvitationServiceClient(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for NearbyInvitationServiceClient.delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x25A2B6540](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return NearbyInvitationServiceClient.delegate.modify;
}

void NearbyInvitationServiceClient.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

Swift::Void __swiftcall NearbyInvitationServiceClient.didReceiveUpdatedGroups(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v17[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = type metadata accessor for NearbyGroupConnectionInfo(0);
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v11 = MEMORY[0x25A2B5750](v10, v9);
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v5, v6, "Did receive updated groups: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v8, -1, -1);
    MEMORY[0x25A2B6460](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  if (MEMORY[0x25A2B6540](v14))
  {
    uint64_t v15 = *(void *)(v14 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t))(*(void *)(v15 + 8) + 8))(a1._rawValue, ObjectType);
    swift_unknownObjectRelease();
  }
}

uint64_t NearbyInvitationServiceClient.didReceiveInvitationApprovalRequest(request:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  id v5 = a1;
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl(&dword_257351000, v6, v7, "Did receive invitation approval request: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v9, -1, -1);
    MEMORY[0x25A2B6460](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x25A2B6540](v11);
  if (result)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(id, uint64_t))(*(void *)(v13 + 8) + 16))(v5, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t NearbyInvitationServiceClient.didReceiveConnectionRequest(advertisement:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl(&dword_257351000, v5, v6, "Did discover nearby advertisement from the host", v7, 2u);
    MEMORY[0x25A2B6460](v7, -1, -1);
  }

  uint64_t v8 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x25A2B6540](v8);
  if (result)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 + 8) + 24))(a1, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t NearbyInvitationServiceClient.didDiscoverNearbyAdvertisement(advertisement:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl(&dword_257351000, v5, v6, "Did discover nearby advertisement from the host", v7, 2u);
    MEMORY[0x25A2B6460](v7, -1, -1);
  }

  uint64_t v8 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x25A2B6540](v8);
  if (result)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 + 8) + 32))(a1, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t NearbyInvitationServiceClient.didLoseNearbyAdvertisement(advertisement:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl(&dword_257351000, v5, v6, "Did lose nearby advertisement from the host", v7, 2u);
    MEMORY[0x25A2B6460](v7, -1, -1);
  }

  uint64_t v8 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x25A2B6540](v8);
  if (result)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 + 8) + 40))(a1, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t NearbyInvitationServiceClient.didDiscoverNearbySessionInvitation(id:invitation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_257351000, v11, v12, "Did discover nearby advertisement from the host", v13, 2u);
    MEMORY[0x25A2B6460](v13, -1, -1);
  }

  uint64_t v14 = v5 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x25A2B6540](v14);
  if (result)
  {
    uint64_t v16 = *(void *)(v14 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 + 8) + 48))(a1, a2, a3, a4, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t NearbyInvitationServiceClient.didReceiveSessionJoinResponse(response:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl(&dword_257351000, v5, v6, "Did receive join response from the host", v7, 2u);
    MEMORY[0x25A2B6460](v7, -1, -1);
  }

  uint64_t v8 = v2 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x25A2B6540](v8);
  if (result)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 + 8) + 56))(a1, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t @objc NearbyInvitationServiceClient.didReceiveUpdatedGroups(_:)(void *a1)
{
  type metadata accessor for NearbyGroupConnectionInfo(0);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v3 = a1;
  NearbyInvitationServiceClient.didReceiveUpdatedGroups(_:)((Swift::OpaquePointer)v2);

  return swift_bridgeObjectRelease();
}

void @objc NearbyInvitationServiceClient.didReceiveInvitationApprovalRequest(request:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  NearbyInvitationServiceClient.didReceiveInvitationApprovalRequest(request:)(v4);
}

void @objc NearbyInvitationServiceClient.didReceiveConnectionRequest(advertisement:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  NearbyInvitationServiceClient.didReceiveConnectionRequest(advertisement:)((uint64_t)v4);
}

void @objc NearbyInvitationServiceClient.didDiscoverNearbyAdvertisement(advertisement:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  NearbyInvitationServiceClient.didDiscoverNearbyAdvertisement(advertisement:)((uint64_t)v4);
}

void @objc NearbyInvitationServiceClient.didLoseNearbyAdvertisement(advertisement:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  NearbyInvitationServiceClient.didLoseNearbyAdvertisement(advertisement:)((uint64_t)v4);
}

uint64_t @objc NearbyInvitationServiceClient.didDiscoverNearbySessionInvitation(id:invitation:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  id v9 = a4;
  id v10 = a1;
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  NearbyInvitationServiceClient.didDiscoverNearbySessionInvitation(id:invitation:)(v6, v8, v11, v13);
  outlined consume of Data._Representation(v11, v13);

  return swift_bridgeObjectRelease();
}

void @objc NearbyInvitationServiceClient.didReceiveSessionJoinResponse(response:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  NearbyInvitationServiceClient.didReceiveSessionJoinResponse(response:)((uint64_t)v4);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.createGroup(with:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.requestApproval(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.approve(pendingMember:response:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.reject(pendingMember:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.generateNearbyInvitation(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.advertiseNearbyInvitation(_:provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.advertiseNearbySessionEndpoint(params:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 80))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.stopAdvertisingNearbySessionEndpoint(response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.markInvitationUsed(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 104))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.assertAdvertisementPublic(_:rotations:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 112))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.releaseInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 128))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 136))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.scanNearbyEndpoints(params:scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 144))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.stopScanningNearbyInvitations(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 152))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.requestConnection(with:localInvitation:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 160))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.requestEndpointConnection(with:pseudonym:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 168))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.approveConnectionRequest(_:localInvitation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 176))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSourceProtocol.denyConnectionRequest(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 184))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didReceiveUpdatedGroups(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didReceiveInvitationApprovalRequest(request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didReceiveConnectionRequest(advertisement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didDiscoverNearbyAdvertisement(advertisement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didLoseNearbyAdvertisement(advertisement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didDiscoverNearbySessionInvitation(id:invitation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegateProtocol.didReceiveSessionJoinResponse(response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of NearbyInvitationServiceClientDelegate.didDisconnect(client:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t type metadata accessor for NearbyInvitationServiceClient()
{
  uint64_t result = type metadata singleton initialization cache for NearbyInvitationServiceClient;
  if (!type metadata singleton initialization cache for NearbyInvitationServiceClient) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for NearbyInvitationServiceClient()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for NearbyInvitationServiceClient()
{
  return type metadata accessor for NearbyInvitationServiceClient();
}

void type metadata accessor for CBNearbyInfoV2InvitationRouteType()
{
  if (!lazy cache variable for type metadata for CBNearbyInfoV2InvitationRouteType)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBNearbyInfoV2InvitationRouteType);
    }
  }
}

uint64_t outlined destroy of weak NearbyInvitationServiceClientDelegate?(uint64_t a1)
{
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.denyConnectionRequest(_:)(void **a1)
{
  return closure #1 in closure #1 in NearbyInvitationServiceClient.denyConnectionRequest(_:)(a1, *(void **)(v1 + 16));
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.approveConnectionRequest(_:localInvitation:)(void **a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.approveConnectionRequest(_:localInvitation:)(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:));
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in closure #1 in NearbyInvitationServiceClient.requestConnection(with:localInvitation:response:));
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.stopScanningNearbyInvitations(provider:response:)(void **a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)(a1, v1[2], v1[3], v1[4], v1[5], 0xD000000000000031, 0x80000002573C1CD0, (uint64_t)&block_descriptor_137, (SEL *)&selRef_stopScanningNearbyInvitationsWithProvider_response_);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.scanNearbyEndpoints(params:scannerID:response:)(void **a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.scanNearbyEndpoints(params:scannerID:response:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.scanNearbyInvitations(scannerID:response:)(void **a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.scanNearbyInvitations(scannerID:response:)(a1, v1[2], v1[3], v1[4]);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.releaseInvitation(_:response:)(void **a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.markInvitationUsed(_:response:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), 0xD00000000000001ELL, 0x80000002573C1D70, (uint64_t)&block_descriptor_146, (SEL *)&selRef_releaseInvitation_response_);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(id *a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.assertAdvertisementPublic(_:rotations:response:)(id *a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.assertAdvertisementPublic(_:rotations:response:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.markInvitationUsed(_:response:)(void **a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.markInvitationUsed(_:response:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), 0xD00000000000001FLL, 0x80000002573C1E30, (uint64_t)&block_descriptor_152, (SEL *)&selRef_markInvitationUsed_response_);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbySessionEndpoint(response:)(void **a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbySessionEndpoint(response:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(id *a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.stopAdvertisingNearbyInvitation(_:response:)(a1, v1[2], v1[3], v1[4]);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)(void **a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbySessionEndpoint(params:response:)(a1, v1[2], v1[3], v1[4], v1[5], 0xD000000000000030, 0x80000002573C1EB0, (uint64_t)&block_descriptor_161, (SEL *)&selRef_advertiseNearbySessionEndpointWithParams_response_);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbyInvitation(_:provider:response:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in closure #1 in NearbyInvitationServiceClient.advertiseNearbyInvitation(_:provider:response:));
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(void **a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.generateNearbyInvitation(provider:response:)(a1, v1[2], v1[3], v1[4]);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.reject(pendingMember:completion:)(void **a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.reject(pendingMember:completion:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_25735D168()
{
  return objectdestroy_58Tm(40);
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationServiceClient.reject(pendingMember:completion:)(void *a1)
{
  return closure #2 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(a1, *(void **)(v1 + 16), *(uint64_t (**)(void *))(v1 + 24), *(void *)(v1 + 32), "Failed reject(pendingMember: %s), error: %s");
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:));
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestEndpointConnection(with:pseudonym:response:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_25735D1F0()
{
  return objectdestroy_58Tm(40);
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(void *a1)
{
  return closure #2 in closure #1 in NearbyInvitationServiceClient.approve(pendingMember:response:completion:)(a1, *(void **)(v1 + 16), *(uint64_t (**)(void *))(v1 + 24), *(void *)(v1 + 32), "Failed approve(pendingMember: %s), error: %s");
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)(void **a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_25735D240()
{
  return objectdestroy_58Tm(40);
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)(void *a1)
{
  return closure #2 in closure #1 in NearbyInvitationServiceClient.requestApproval(with:completion:)(a1, *(void **)(v1 + 16), *(uint64_t (**)(void, void *))(v1 + 24));
}

void partial apply for closure #1 in closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(void **a1)
{
  closure #1 in closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_25735D274()
{
  return objectdestroy_58Tm(40);
}

uint64_t objectdestroy_58Tm(uint64_t a1)
{
  swift_release();
  return MEMORY[0x270FA0238](v1, a1, 7);
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(void *a1)
{
  return closure #2 in closure #1 in NearbyInvitationServiceClient.createGroup(with:response:)(a1, *(void **)(v1 + 16), *(uint64_t (**)(void, void *))(v1 + 24));
}

void NearbyGroupTable.contents.setter()
{
}

uint64_t (*Invitation_HostConnectionInfo.publicKey.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t (*Invitation_HostConnectionInfo.handle.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t Invitation_HostConnectionInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return Invitation_HostConnectionInfo.unknownFields.getter(type metadata accessor for Invitation_HostConnectionInfo, a1);
}

uint64_t type metadata accessor for Invitation_HostConnectionInfo(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for Invitation_HostConnectionInfo);
}

uint64_t Invitation_HostConnectionInfo.unknownFields.setter(uint64_t a1)
{
  return Invitation_HostConnectionInfo.unknownFields.setter(a1, type metadata accessor for Invitation_HostConnectionInfo);
}

uint64_t (*Invitation_HostConnectionInfo.unknownFields.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t Invitation_HostConnectionInfo.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_2573BF060;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  type metadata accessor for Invitation_HostConnectionInfo(0);
  return UnknownStorage.init()();
}

uint64_t Invitation_InvitationData.invitationID.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t Invitation_InvitationData.invitationID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*Invitation_InvitationData.invitationID.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t Invitation_InvitationData.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Invitation_InvitationData.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Invitation_InvitationData.displayName.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t Invitation_InvitationData.userInfo.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t type metadata accessor for Invitation_InvitationData(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for Invitation_InvitationData);
}

uint64_t type metadata accessor for Invitation_HostConnectionInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t key path setter for Invitation_InvitationData.userInfo : Invitation_InvitationData(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  uint64_t result = outlined consume of Data?(v5, v6);
  *unint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t Invitation_InvitationData.userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t (*Invitation_InvitationData.userInfo.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  unint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return Invitation_InvitationData.userInfo.modify;
}

uint64_t Invitation_InvitationData.userInfo.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16) + *(int *)(a1 + 24);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)v3;
  unint64_t v6 = *(void *)(v3 + 8);
  if (a2)
  {
    outlined copy of Data._Representation(*(void *)a1, v2);
    outlined consume of Data?(v5, v6);
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
    return outlined consume of Data._Representation(v4, v2);
  }
  else
  {
    uint64_t result = outlined consume of Data?(*(void *)v3, *(void *)(v3 + 8));
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
  }
  return result;
}

BOOL Invitation_InvitationData.hasUserInfo.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28) + 8) >> 60 != 15;
}

Swift::Void __swiftcall Invitation_InvitationData.clearUserInfo()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28);
  outlined consume of Data?(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_2573BF070;
}

uint64_t Invitation_InvitationData.hostConnectionInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Invitation_InvitationData(0);
  outlined init with copy of Invitation_HostConnectionInfo?(v1 + *(int *)(v6 + 32), (uint64_t)v5);
  uint64_t v7 = type metadata accessor for Invitation_HostConnectionInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of Invitation_HostConnectionInfo((uint64_t)v5, a1);
  }
  *(_OWORD *)a1 = xmmword_2573BF060;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  UnknownStorage.init()();
  return outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
}

uint64_t outlined init with copy of Invitation_HostConnectionInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Invitation_HostConnectionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t key path getter for Invitation_InvitationData.hostConnectionInfo : Invitation_InvitationData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Invitation_InvitationData(0);
  outlined init with copy of Invitation_HostConnectionInfo?(a1 + *(int *)(v7 + 32), (uint64_t)v6);
  uint64_t v8 = type metadata accessor for Invitation_HostConnectionInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of Invitation_HostConnectionInfo((uint64_t)v6, a2);
  }
  *(_OWORD *)a2 = xmmword_2573BF060;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  UnknownStorage.init()();
  return outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
}

uint64_t key path setter for Invitation_InvitationData.hostConnectionInfo : Invitation_InvitationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Invitation_HostConnectionInfo(a1, (uint64_t)v7);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 32);
  outlined destroy of Invitation_HostConnectionInfo?(v8, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  outlined init with take of Invitation_HostConnectionInfo((uint64_t)v7, v8);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t Invitation_InvitationData.hostConnectionInfo.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 32);
  outlined destroy of Invitation_HostConnectionInfo?(v3, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  outlined init with take of Invitation_HostConnectionInfo(a1, v3);
  uint64_t v4 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*Invitation_InvitationData.hostConnectionInfo.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Invitation_HostConnectionInfo(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Invitation_InvitationData(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of Invitation_HostConnectionInfo?(v1 + v11, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)uint64_t v10 = xmmword_2573BF060;
    v10[2] = 0;
    v10[3] = 0xE000000000000000;
    UnknownStorage.init()();
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  }
  else
  {
    outlined init with take of Invitation_HostConnectionInfo((uint64_t)v5, (uint64_t)v10);
  }
  return Invitation_InvitationData.hostConnectionInfo.modify;
}

void Invitation_InvitationData.hostConnectionInfo.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v3 = *(int *)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  uint64_t v7 = *(void *)(*(void *)a1 + 24);
  uint64_t v8 = *(void **)(*(void *)a1 + 8);
  uint64_t v9 = **(void **)a1 + v3;
  if (a2)
  {
    outlined init with copy of Invitation_HostConnectionInfo(*(void *)(*(void *)a1 + 40), (uint64_t)v4);
    outlined destroy of Invitation_HostConnectionInfo?(v9, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
    outlined init with take of Invitation_HostConnectionInfo((uint64_t)v4, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    outlined destroy of Invitation_HostConnectionInfo((uint64_t)v5);
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?(**(void **)a1 + v3, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
    outlined init with take of Invitation_HostConnectionInfo((uint64_t)v5, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

uint64_t outlined init with copy of Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Invitation_HostConnectionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Invitation_HostConnectionInfo(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Invitation_HostConnectionInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL Invitation_InvitationData.hasHostConnectionInfo.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Invitation_InvitationData(0);
  outlined init with copy of Invitation_HostConnectionInfo?(v0 + *(int *)(v4 + 32), (uint64_t)v3);
  uint64_t v5 = type metadata accessor for Invitation_HostConnectionInfo(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  return v6;
}

Swift::Void __swiftcall Invitation_InvitationData.clearHostConnectionInfo()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 32);
  outlined destroy of Invitation_HostConnectionInfo?(v1, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  uint64_t v2 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t Invitation_InvitationData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return Invitation_HostConnectionInfo.unknownFields.getter(type metadata accessor for Invitation_InvitationData, a1);
}

uint64_t Invitation_HostConnectionInfo.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Invitation_InvitationData.unknownFields.setter(uint64_t a1)
{
  return Invitation_HostConnectionInfo.unknownFields.setter(a1, type metadata accessor for Invitation_InvitationData);
}

uint64_t Invitation_HostConnectionInfo.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Invitation_InvitationData.unknownFields.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t Invitation_InvitationData.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_2573BF060;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  uint64_t v2 = type metadata accessor for Invitation_InvitationData(0);
  UnknownStorage.init()();
  *(_OWORD *)(a1 + *(int *)(v2 + 28)) = xmmword_2573BF070;
  uint64_t v3 = a1 + *(int *)(v2 + 32);
  uint64_t v4 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

void one-time initialization function for _protobuf_package()
{
  _protobuf_package._countAndFlagsBits = 28771;
  _protobuf_package._object = (void *)0xE200000000000000;
}

uint64_t one-time initialization function for protoMessageName(uint64_t a1)
{
  return one-time initialization function for protoMessageName(a1, 0xD000000000000015, static Invitation_HostConnectionInfo.protoMessageName, 0x80000002573C2AC0, &static Invitation_HostConnectionInfo.protoMessageName[1]);
}

{
  return one-time initialization function for protoMessageName(a1, 0xD000000000000011, static Invitation_InvitationData.protoMessageName, 0x80000002573C2AA0, &static Invitation_InvitationData.protoMessageName[1]);
}

void *Invitation_HostConnectionInfo.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return static Invitation_HostConnectionInfo.protoMessageName;
}

uint64_t static Invitation_HostConnectionInfo.protoMessageName.getter()
{
  return static Invitation_HostConnectionInfo.protoMessageName.getter(&one-time initialization token for protoMessageName, static Invitation_HostConnectionInfo.protoMessageName);
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Invitation_HostConnectionInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Invitation_HostConnectionInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2573BF080;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "publicKey";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "handle";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Invitation_InvitationData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Invitation_InvitationData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2573BF090;
  uint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "invitationID";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "displayName";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "userInfo";
  *((void *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *unint64_t v13 = 4;
  *(void *)uint64_t v14 = "hostConnectionInfo";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Invitation_HostConnectionInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return Invitation_HostConnectionInfo._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Invitation_HostConnectionInfo._protobuf_nameMap);
}

uint64_t static Invitation_HostConnectionInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static Invitation_HostConnectionInfo._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Invitation_HostConnectionInfo._protobuf_nameMap, a1);
}

uint64_t Invitation_HostConnectionInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Invitation_HostConnectionInfo.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        unint64_t v5 = v0[3];
        uint64_t v6 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0) {
          uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
        }
        if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for Invitation_HostConnectionInfo(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
      return result;
  }
}

Swift::Int Invitation_HostConnectionInfo.hashValue.getter()
{
  return Invitation_HostConnectionInfo.hashValue.getter((void (*)(void))type metadata accessor for Invitation_HostConnectionInfo, &lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, (void (*)(uint64_t))type metadata accessor for Invitation_HostConnectionInfo);
}

uint64_t protocol witness for Message.init() in conformance Invitation_HostConnectionInfo@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_2573BF060;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance Invitation_HostConnectionInfo(a1, a2, &one-time initialization token for protoMessageName, static Invitation_HostConnectionInfo.protoMessageName);
}

uint64_t protocol witness for Message.isInitialized.getter in conformance Invitation_HostConnectionInfo()
{
  return MEMORY[0x270F44C98]();
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance Invitation_HostConnectionInfo())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance Invitation_HostConnectionInfo()
{
  return Invitation_HostConnectionInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance Invitation_HostConnectionInfo()
{
  return Invitation_HostConnectionInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.hash(into:) in conformance Invitation_HostConnectionInfo()
{
  return MEMORY[0x270F44CD8]();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, (void (*)(uint64_t))type metadata accessor for Invitation_HostConnectionInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance Invitation_HostConnectionInfo()
{
  return MEMORY[0x270F44AD8]();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Invitation_HostConnectionInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Invitation_HostConnectionInfo(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Invitation_HostConnectionInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Invitation_HostConnectionInfo()
{
  lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, (void (*)(uint64_t))type metadata accessor for Invitation_HostConnectionInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, (void (*)(uint64_t))type metadata accessor for Invitation_HostConnectionInfo);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

uint64_t one-time initialization function for protoMessageName(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  if (one-time initialization token for _protobuf_package != -1) {
    uint64_t result = swift_once();
  }
  *a3 = a2;
  *a5 = a4;
  return result;
}

void *Invitation_InvitationData.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return static Invitation_InvitationData.protoMessageName;
}

uint64_t static Invitation_InvitationData.protoMessageName.getter()
{
  return static Invitation_HostConnectionInfo.protoMessageName.getter(&one-time initialization token for protoMessageName, static Invitation_InvitationData.protoMessageName);
}

uint64_t static Invitation_HostConnectionInfo.protoMessageName.getter(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t Invitation_InvitationData._protobuf_nameMap.unsafeMutableAddressor()
{
  return Invitation_HostConnectionInfo._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Invitation_InvitationData._protobuf_nameMap);
}

uint64_t Invitation_HostConnectionInfo._protobuf_nameMap.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Invitation_InvitationData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static Invitation_HostConnectionInfo._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Invitation_InvitationData._protobuf_nameMap, a1);
}

uint64_t static Invitation_HostConnectionInfo._protobuf_nameMap.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t Invitation_InvitationData.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for Invitation_InvitationData(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          closure #4 in Invitation_InvitationData.decodeMessage<A>(decoder:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #4 in Invitation_InvitationData.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t Invitation_InvitationData.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        unint64_t v5 = v0[3];
        uint64_t v6 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0) {
          uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
        }
        if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          uint64_t result = closure #1 in Invitation_InvitationData.traverse<A>(visitor:)((uint64_t)v0);
          if (!v1)
          {
            closure #2 in Invitation_InvitationData.traverse<A>(visitor:)((uint64_t)v0);
            type metadata accessor for Invitation_InvitationData(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
      return result;
  }
}

uint64_t closure #1 in Invitation_InvitationData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for Invitation_InvitationData(0);
  uint64_t v3 = a1 + *(int *)(result + 28);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #2 in Invitation_InvitationData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Invitation_InvitationData(0);
  outlined init with copy of Invitation_HostConnectionInfo?(a1 + *(int *)(v9 + 32), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  }
  outlined init with take of Invitation_HostConnectionInfo((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, (void (*)(uint64_t))type metadata accessor for Invitation_HostConnectionInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Invitation_HostConnectionInfo((uint64_t)v8);
}

Swift::Int Invitation_InvitationData.hashValue.getter()
{
  return Invitation_HostConnectionInfo.hashValue.getter((void (*)(void))type metadata accessor for Invitation_InvitationData, &lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, (void (*)(uint64_t))type metadata accessor for Invitation_InvitationData);
}

Swift::Int Invitation_HostConnectionInfo.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance Invitation_InvitationData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_2573BF060;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 32);
  *(_OWORD *)(a2 + *(int *)(a1 + 28)) = xmmword_2573BF070;
  uint64_t v5 = a2 + v4;
  uint64_t v6 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance Invitation_InvitationData(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance Invitation_HostConnectionInfo(a1, a2, &one-time initialization token for protoMessageName, static Invitation_InvitationData.protoMessageName);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance Invitation_HostConnectionInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance Invitation_InvitationData()
{
  return Invitation_InvitationData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance Invitation_InvitationData()
{
  return Invitation_InvitationData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance Invitation_InvitationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, (void (*)(uint64_t))type metadata accessor for Invitation_InvitationData);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Invitation_InvitationData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Invitation_HostConnectionInfo(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Invitation_InvitationData._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Invitation_HostConnectionInfo@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Invitation_InvitationData()
{
  lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, (void (*)(uint64_t))type metadata accessor for Invitation_InvitationData);
  return Message.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Invitation_HostConnectionInfo()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Invitation_InvitationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, (void (*)(uint64_t))type metadata accessor for Invitation_InvitationData);
  return MEMORY[0x270F44CD8](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Invitation_HostConnectionInfo()
{
  return Hasher._finalize()();
}

uint64_t specialized static Invitation_HostConnectionInfo.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v17 - v9;
  if (specialized static Data.== infix(_:_:)(*a1, a1[1], *a2, a2[1]))
  {
    BOOL v11 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v13 = type metadata accessor for Invitation_HostConnectionInfo(0);
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v14(v10, (char *)a1 + *(int *)(v13 + 24), v4);
      v14(v8, (char *)a2 + *(int *)(v13 + 24), v4);
      lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t specialized static Invitation_InvitationData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v61 = type metadata accessor for UnknownStorage();
  uint64_t v64 = *(void *)(v61 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v61);
  v63 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v53 - v6;
  uint64_t v8 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t v62 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Invitation_HostConnectionInfo?, Invitation_HostConnectionInfo?));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v53 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v53 - v21;
  if ((specialized static Data.== infix(_:_:)(*a1, a1[1], *a2, a2[1]) & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v57 = v11;
  v58 = v20;
  v59 = v22;
  v60 = v13;
  v54 = (uint64_t *)v10;
  v55 = v7;
  v56 = (uint64_t *)v17;
  uint64_t v23 = a1;
  if (a1[2] == a2[2] && a1[3] == a2[3] || (char v24 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v25 = type metadata accessor for Invitation_InvitationData(0);
    uint64_t v26 = *(int *)(v25 + 28);
    uint64_t v27 = *(uint64_t *)((char *)v23 + v26);
    unint64_t v28 = *(uint64_t *)((char *)v23 + v26 + 8);
    uint64_t v29 = (uint64_t *)((char *)a2 + v26);
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
    if (v28 >> 60 == 15)
    {
      if (v31 >> 60 == 15)
      {
LABEL_11:
        uint64_t v33 = (uint64_t)v59;
        outlined init with copy of Invitation_HostConnectionInfo?((uint64_t)v23 + *(int *)(v25 + 32), (uint64_t)v59);
        uint64_t v53 = v25;
        uint64_t v34 = (uint64_t)v58;
        outlined init with copy of Invitation_HostConnectionInfo?((uint64_t)a2 + *(int *)(v25 + 32), (uint64_t)v58);
        uint64_t v35 = (uint64_t)v60;
        uint64_t v36 = (uint64_t)&v60[*(int *)(v57 + 48)];
        outlined init with copy of Invitation_HostConnectionInfo?(v33, (uint64_t)v60);
        outlined init with copy of Invitation_HostConnectionInfo?(v34, v36);
        uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
        if (v37(v35, 1, v8) == 1)
        {
          outlined destroy of Invitation_HostConnectionInfo?(v34, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
          outlined destroy of Invitation_HostConnectionInfo?(v33, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
          int v38 = v37(v36, 1, v8);
          v40 = v63;
          uint64_t v39 = v64;
          if (v38 == 1)
          {
            outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
            uint64_t v41 = v61;
LABEL_14:
            uint64_t v42 = v53;
            v43 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
            v44 = v55;
            v43(v55, (char *)v23 + *(int *)(v53 + 24), v41);
            v43(v40, (char *)a2 + *(int *)(v42 + 24), v41);
            lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
            char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
            v45 = *(void (**)(char *, uint64_t))(v39 + 8);
            v45(v40, v41);
            v45(v44, v41);
            return v24 & 1;
          }
          goto LABEL_17;
        }
        v46 = v56;
        outlined init with copy of Invitation_HostConnectionInfo?(v35, (uint64_t)v56);
        int v47 = v37(v36, 1, v8);
        v40 = v63;
        uint64_t v39 = v64;
        if (v47 == 1)
        {
          outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
          outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
          outlined destroy of Invitation_HostConnectionInfo((uint64_t)v46);
LABEL_17:
          v48 = &demangling cache variable for type metadata for (Invitation_HostConnectionInfo?, Invitation_HostConnectionInfo?);
          uint64_t v49 = (uint64_t)v60;
LABEL_25:
          outlined destroy of Invitation_HostConnectionInfo?(v49, v48);
          goto LABEL_26;
        }
        v50 = v54;
        outlined init with take of Invitation_HostConnectionInfo(v36, (uint64_t)v54);
        if ((specialized static Data.== infix(_:_:)(*v46, v46[1], *v50, v50[1]) & 1) == 0
          || (v46[2] != v50[2] || v46[3] != v50[3]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          outlined destroy of Invitation_HostConnectionInfo((uint64_t)v50);
          outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
          outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
          outlined destroy of Invitation_HostConnectionInfo((uint64_t)v46);
          uint64_t v49 = (uint64_t)v60;
          v48 = (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?;
          goto LABEL_25;
        }
        lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x263F50560]);
        uint64_t v41 = v61;
        char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of Invitation_HostConnectionInfo((uint64_t)v50);
        outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
        outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
        outlined destroy of Invitation_HostConnectionInfo((uint64_t)v46);
        outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
        if (v51) {
          goto LABEL_14;
        }
LABEL_26:
        char v24 = 0;
        return v24 & 1;
      }
    }
    else if (v31 >> 60 != 15)
    {
      outlined copy of Data?(v27, v28);
      outlined copy of Data?(v30, v31);
      char v32 = specialized static Data.== infix(_:_:)(v27, v28, v30, v31);
      outlined consume of Data?(v30, v31);
      outlined consume of Data?(v27, v28);
      if ((v32 & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_11;
    }
    outlined copy of Data?(v27, v28);
    outlined copy of Data?(v30, v31);
    outlined consume of Data?(v27, v28);
    outlined consume of Data?(v30, v31);
    goto LABEL_26;
  }
  return v24 & 1;
}

uint64_t lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Invitation_HostConnectionInfo()
{
  return lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, (void (*)(uint64_t))type metadata accessor for Invitation_HostConnectionInfo);
}

uint64_t base witness table accessor for Message in Invitation_HostConnectionInfo()
{
  return lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, (void (*)(uint64_t))type metadata accessor for Invitation_HostConnectionInfo);
}

uint64_t base witness table accessor for Hashable in Invitation_HostConnectionInfo()
{
  return lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, (void (*)(uint64_t))type metadata accessor for Invitation_HostConnectionInfo);
}

uint64_t base witness table accessor for Equatable in Invitation_HostConnectionInfo()
{
  return lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, (void (*)(uint64_t))type metadata accessor for Invitation_HostConnectionInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Invitation_InvitationData()
{
  return lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, (void (*)(uint64_t))type metadata accessor for Invitation_InvitationData);
}

uint64_t base witness table accessor for Message in Invitation_InvitationData()
{
  return lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, (void (*)(uint64_t))type metadata accessor for Invitation_InvitationData);
}

uint64_t base witness table accessor for Hashable in Invitation_InvitationData()
{
  return lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, (void (*)(uint64_t))type metadata accessor for Invitation_InvitationData);
}

uint64_t base witness table accessor for Equatable in Invitation_InvitationData()
{
  return lazy protocol witness table accessor for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, (void (*)(uint64_t))type metadata accessor for Invitation_InvitationData);
}

uint64_t sub_257360718@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  if (v5 >> 60 == 15) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v3;
  }
  unint64_t v7 = 0xC000000000000000;
  if (v5 >> 60 != 15) {
    unint64_t v7 = v5;
  }
  *a2 = v6;
  a2[1] = v7;
  return outlined copy of Data?(v4, v5);
}

uint64_t *initializeBufferWithCopyOfBuffer for Invitation_HostConnectionInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *initializeWithCopy for Invitation_HostConnectionInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  return a1;
}

uint64_t *assignWithCopy for Invitation_HostConnectionInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for Invitation_HostConnectionInfo(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for Invitation_HostConnectionInfo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257360BB0);
}

uint64_t sub_257360BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Invitation_HostConnectionInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257360C74);
}

uint64_t sub_257360C74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for Invitation_HostConnectionInfo()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Invitation_InvitationData(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    unint64_t v18 = *((void *)v17 + 1);
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    }
    else
    {
      uint64_t v20 = *(void *)v17;
      outlined copy of Data._Representation(*(void *)v17, *((void *)v17 + 1));
      *(void *)uint64_t v16 = v20;
      *((void *)v16 + 1) = v18;
    }
    uint64_t v21 = a3[8];
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = type metadata accessor for Invitation_HostConnectionInfo(0);
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      uint64_t v27 = *v23;
      unint64_t v28 = v23[1];
      outlined copy of Data._Representation(*v23, v28);
      *uint64_t v22 = v27;
      v22[1] = v28;
      uint64_t v29 = v23[3];
      v22[2] = v23[2];
      v22[3] = v29;
      uint64_t v30 = *(int *)(v24 + 24);
      unint64_t v31 = (char *)v22 + v30;
      char v32 = (char *)v23 + v30;
      swift_bridgeObjectRetain();
      v14(v31, v32, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
  }
  return a1;
}

uint64_t destroy for Invitation_InvitationData(uint64_t a1, int *a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = (uint64_t *)(a1 + a2[7]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    outlined consume of Data._Representation(*v6, v7);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v8, *(void *)(v8 + 8));
    swift_bridgeObjectRelease();
    uint64_t v11 = v8 + *(int *)(v9 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

uint64_t *initializeWithCopy for Invitation_InvitationData(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  uint64_t v9 = a3[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  unint64_t v17 = *((void *)v16 + 1);
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  }
  else
  {
    uint64_t v18 = *(void *)v16;
    outlined copy of Data._Representation(*(void *)v16, *((void *)v16 + 1));
    *(void *)uint64_t v15 = v18;
    *((void *)v15 + 1) = v17;
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v25 = *v21;
    unint64_t v26 = v21[1];
    outlined copy of Data._Representation(*v21, v26);
    void *v20 = v25;
    v20[1] = v26;
    uint64_t v27 = v21[3];
    v20[2] = v21[2];
    v20[3] = v27;
    uint64_t v28 = *(int *)(v22 + 24);
    uint64_t v29 = (char *)v20 + v28;
    uint64_t v30 = (char *)v21 + v28;
    swift_bridgeObjectRetain();
    v13(v29, v30, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t *assignWithCopy for Invitation_InvitationData(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void *)(v13 - 8);
  v43 = *(void (**)(char *, char *))(v14 + 24);
  uint64_t v44 = v13;
  v43(v11, v12);
  uint64_t v15 = a3[7];
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  unint64_t v17 = (uint64_t *)((char *)a2 + v15);
  unint64_t v18 = *(uint64_t *)((char *)a2 + v15 + 8);
  if (*(unint64_t *)((char *)a1 + v15 + 8) >> 60 == 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *v17;
      outlined copy of Data._Representation(v19, v18);
      *uint64_t v16 = v19;
      v16[1] = v18;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v18 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v16);
LABEL_6:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_8;
  }
  uint64_t v20 = *v17;
  outlined copy of Data._Representation(v20, v18);
  uint64_t v21 = *v16;
  unint64_t v22 = v16[1];
  *uint64_t v16 = v20;
  v16[1] = v18;
  outlined consume of Data._Representation(v21, v22);
LABEL_8:
  uint64_t v23 = a3[8];
  uint64_t v24 = (uint64_t *)((char *)a1 + v23);
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  uint64_t v26 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      uint64_t v39 = *v25;
      unint64_t v40 = v25[1];
      outlined copy of Data._Representation(*v25, v40);
      uint64_t v41 = *v24;
      unint64_t v42 = v24[1];
      *uint64_t v24 = v39;
      v24[1] = v40;
      outlined consume of Data._Representation(v41, v42);
      v24[2] = v25[2];
      void v24[3] = v25[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v43)((char *)v24 + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v44);
      return a1;
    }
    outlined destroy of Invitation_HostConnectionInfo((uint64_t)v24);
    goto LABEL_13;
  }
  if (v30)
  {
LABEL_13:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
    memcpy(v24, v25, *(void *)(*(void *)(v37 - 8) + 64));
    return a1;
  }
  uint64_t v31 = *v25;
  unint64_t v32 = v25[1];
  outlined copy of Data._Representation(*v25, v32);
  *uint64_t v24 = v31;
  v24[1] = v32;
  v24[2] = v25[2];
  void v24[3] = v25[3];
  uint64_t v33 = *(int *)(v26 + 24);
  uint64_t v34 = (char *)v24 + v33;
  uint64_t v35 = (char *)v25 + v33;
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  swift_bridgeObjectRetain();
  v36(v34, v35, v44);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for Invitation_InvitationData(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  uint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    long long v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t *assignWithTake for Invitation_InvitationData(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v13 + 40);
  uint64_t v35 = v12;
  v34(v10, v11);
  uint64_t v14 = a3[7];
  uint64_t v15 = (uint64_t)a1 + v14;
  uint64_t v16 = a2 + v14;
  unint64_t v17 = *(uint64_t *)((char *)a1 + v14 + 8);
  if (v17 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v18 = *(void *)(v16 + 8);
  if (v18 >> 60 == 15)
  {
    outlined destroy of Data(v15);
LABEL_4:
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    goto LABEL_6;
  }
  uint64_t v19 = *(void *)v15;
  *(void *)uint64_t v15 = *(void *)v16;
  *(void *)(v15 + 8) = v18;
  outlined consume of Data._Representation(v19, v17);
LABEL_6:
  uint64_t v20 = a3[8];
  uint64_t v21 = (uint64_t *)((char *)a1 + v20);
  unint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v23 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      uint64_t v31 = *v21;
      unint64_t v32 = v21[1];
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      outlined consume of Data._Representation(v31, v32);
      uint64_t v33 = v22[3];
      v21[2] = v22[2];
      v21[3] = v33;
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v34)((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v35);
      return a1;
    }
    outlined destroy of Invitation_HostConnectionInfo((uint64_t)v21);
    goto LABEL_11;
  }
  if (v27)
  {
LABEL_11:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
    memcpy(v21, v22, *(void *)(*(void *)(v29 - 8) + 64));
    return a1;
  }
  long long v28 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v28;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v35);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for Invitation_InvitationData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_257361AEC);
}

uint64_t sub_257361AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for Invitation_InvitationData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_257361C30);
}

uint64_t sub_257361C30(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for Invitation_InvitationData()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Invitation_HostConnectionInfo?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Invitation_HostConnectionInfo?()
{
  if (!lazy cache variable for type metadata for Invitation_HostConnectionInfo?)
  {
    type metadata accessor for Invitation_HostConnectionInfo(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Invitation_HostConnectionInfo?);
    }
  }
}

uint64_t outlined destroy of Invitation_HostConnectionInfo?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t Log.client.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for client, (uint64_t)static Log.client);
}

uint64_t >> prefix<A>(_:)(uint64_t a1, uint64_t a2)
{
  v4[2] = a2;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in >> prefix<A>(_:), (uint64_t)v4, MEMORY[0x263F8E628], MEMORY[0x263F8D310], v2, (uint64_t)v5);
  if (v5[1]) {
    return v5[0];
  }
  else {
    return 7104878;
  }
}

BOOL Subsystem.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Subsystem.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

unint64_t Subsystem.rawValue.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Subsystem()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Subsystem()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Subsystem()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Subsystem()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Subsystem@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance Subsystem, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Subsystem(void *a1@<X8>)
{
  *a1 = 0xD00000000000001ELL;
  a1[1] = 0x80000002573C18E0;
}

uint64_t one-time initialization function for client()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.client);
  __swift_project_value_buffer(v0, (uint64_t)static Log.client);
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.init<A>(subsystem:category:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
}

uint64_t static Log.client.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.client.getter(&one-time initialization token for client, (uint64_t)static Log.client, a1);
}

uint64_t one-time initialization function for host()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.host);
  __swift_project_value_buffer(v0, (uint64_t)static Log.host);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.host.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for host, (uint64_t)static Log.host);
}

uint64_t static Log.host.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.client.getter(&one-time initialization token for host, (uint64_t)static Log.host, a1);
}

uint64_t one-time initialization function for session()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.session);
  __swift_project_value_buffer(v0, (uint64_t)static Log.session);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.session.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for session, (uint64_t)static Log.session);
}

uint64_t static Log.session.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.client.getter(&one-time initialization token for session, (uint64_t)static Log.session, a1);
}

uint64_t one-time initialization function for provider()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.provider);
  __swift_project_value_buffer(v0, (uint64_t)static Log.provider);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.provider.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for provider, (uint64_t)static Log.provider);
}

uint64_t static Log.provider.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.client.getter(&one-time initialization token for provider, (uint64_t)static Log.provider, a1);
}

uint64_t one-time initialization function for group()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.group);
  __swift_project_value_buffer(v0, (uint64_t)static Log.group);
  return Logger.init(subsystem:category:)();
}

uint64_t Log.group.unsafeMutableAddressor()
{
  return Log.client.unsafeMutableAddressor(&one-time initialization token for group, (uint64_t)static Log.group);
}

uint64_t Log.client.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Log.group.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.client.getter(&one-time initialization token for group, (uint64_t)static Log.group, a1);
}

uint64_t static Log.client.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t partial apply for closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in >> prefix<A>(_:)(a1, a2);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  int v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v10);
  unint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2)
{
  v7[2] = a2;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in DefaultStringInterpolation.appendInterpolation<A>(_:), (uint64_t)v7, MEMORY[0x263F8E628], MEMORY[0x263F8D310], v2, (uint64_t)&v8);
  if (v9) {
    uint64_t v3 = v8;
  }
  else {
    uint64_t v3 = 7104878;
  }
  if (v9) {
    unint64_t v4 = v9;
  }
  else {
    unint64_t v4 = 0xE300000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = String.init<A>(reflecting:)();
  *a2 = result;
  a2[1] = v6;
  return result;
}

unint64_t lazy protocol witness table accessor for type Subsystem and conformance Subsystem()
{
  unint64_t result = lazy protocol witness table cache variable for type Subsystem and conformance Subsystem;
  if (!lazy protocol witness table cache variable for type Subsystem and conformance Subsystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subsystem and conformance Subsystem);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Subsystem(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for Subsystem(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x257362C7CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for Subsystem()
{
  return 0;
}

ValueMetadata *type metadata accessor for Subsystem()
{
  return &type metadata for Subsystem;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

uint64_t partial apply for closure #1 in DefaultStringInterpolation.appendInterpolation<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #1 in >> prefix<A>(_:)(a1, a2);
}

uint64_t NearbyGroupMember.handle.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyGroupMember.tokenID.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID);
  swift_bridgeObjectRetain();
  return v1;
}

id NearbyGroupMember.__allocating_init(handle:tokenID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = (char *)objc_allocWithZone(v4);
  uint64_t v10 = &v9[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle];
  *(void *)uint64_t v10 = a1;
  *((void *)v10 + 1) = a2;
  uint64_t v11 = &v9[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID];
  *(void *)uint64_t v11 = a3;
  *((void *)v11 + 1) = a4;
  v13.receiver = v9;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, sel_init);
}

id NearbyGroupMember.init(handle:tokenID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = &v4[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle];
  *(void *)uint64_t v5 = a1;
  *((void *)v5 + 1) = a2;
  uint64_t v6 = &v4[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID];
  *(void *)uint64_t v6 = a3;
  *((void *)v6 + 1) = a4;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for NearbyGroupMember();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for NearbyGroupMember()
{
  return self;
}

uint64_t NearbyGroupMember.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)v8);
  if (!v9)
  {
    outlined destroy of Any?((uint64_t)v8);
    goto LABEL_17;
  }
  type metadata accessor for NearbyGroupMember();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  BOOL v2 = *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle) == *(void *)&v7[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle]
    && *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle + 8) == *(void *)&v7[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle + 8];
  if (!v2 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {

    goto LABEL_17;
  }
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID + 8);
  uint64_t v4 = *(void *)&v7[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID + 8];
  if (!v3)
  {
    swift_bridgeObjectRetain();

    if (!v4) {
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (v4)
  {
    if (*(void *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID) != *(void *)&v7[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID]
      || v3 != v4)
    {
      LOBYTE(v4) = _stringCompareWithSmolCheck(_:_:expecting:)();
      goto LABEL_15;
    }

LABEL_23:
    LOBYTE(v4) = 1;
    return v4 & 1;
  }
LABEL_15:

  return v4 & 1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Int NearbyGroupMember.hash.getter()
{
  Hasher.init()();
  lazy protocol witness table accessor for type String and conformance String();
  Swift::UInt v1 = StringProtocol.hash.getter();
  Hasher._combine(_:)(v1);
  if (*(void *)(v0 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID + 8))
  {
    Swift::UInt v2 = StringProtocol.hash.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher.finalize()();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t static NearbyGroupMember.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t NearbyGroupMember.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbyGroupMember.init(coder:)(a1);
}

uint64_t NearbyGroupMember.init(coder:)(void *a1)
{
  Swift::UInt v2 = v1;
  type metadata accessor for NSString();
  id v4 = v2;
  uint64_t v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  type metadata accessor for NearbyGroupMember();
  swift_deallocPartialClassInstance();
  return 0;
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

Swift::Void __swiftcall NearbyGroupMember.encode(with:)(NSCoder with)
{
  id v3 = (void *)MEMORY[0x25A2B5660](*(void *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle), *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle + 8));
  id v4 = (void *)MEMORY[0x25A2B5660](0x656C646E6168, 0xE600000000000000);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];

  if (*(void *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID + 8)) {
    uint64_t v5 = MEMORY[0x25A2B5660](*(void *)(v1 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID));
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)MEMORY[0x25A2B5660](0x44496E656B6F74, 0xE700000000000000);
  [(objc_class *)with.super.isa encodeObject:v5 forKey:v6];
  swift_unknownObjectRelease();
}

id NearbyGroupMember.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void NearbyGroupMember.init()()
{
}

id NearbyGroupMember.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbyGroupMember();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t NearbyGroupMember.description.getter()
{
  swift_getObjectType();
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle);
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle + 8);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x3D656C646E616820;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v6._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x44496E656B6F7420;
  v7._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 62;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 60;
}

uint64_t method lookup function for NearbyGroupMember(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyGroupMember);
}

uint64_t dispatch thunk of NearbyGroupMember.__allocating_init(handle:tokenID:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of NearbyGroupMember.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NearbyGroupMember.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t NearbySessionInvitation.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_identifier;
  uint64_t v4 = type metadata accessor for UUID();
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t NearbySessionInvitation.activityType.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_activityType);
}

id NearbySessionInvitation.metadata.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata);
}

uint64_t NearbySessionInvitation.sourceProviderID.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbySessionInvitation.sourceProviderName.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbySessionInvitation.isPublic.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic);
}

uint64_t NearbySessionInvitation.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbySessionInvitation.handle.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_handle);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbySessionInvitation.userInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo);
  outlined copy of Data?(v1, *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo + 8));
  return v1;
}

id NearbySessionInvitation.__allocating_init(identifier:activityType:metadata:sourceProviderID:sourceProviderName:displayName:handle:userInfo:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11)
{
  id v20 = objc_allocWithZone(v11);
  return NearbySessionInvitation.init(identifier:activityType:metadata:sourceProviderID:sourceProviderName:displayName:handle:userInfo:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10, *((uint64_t *)&a10 + 1), a11);
}

id NearbySessionInvitation.init(identifier:activityType:metadata:sourceProviderID:sourceProviderName:displayName:handle:userInfo:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v19 = &v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_identifier];
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v19, a1, v20);
  *(_DWORD *)&v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_activityType] = a2;
  *(void *)&v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata] = a3;
  uint64_t v22 = &v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderID];
  *uint64_t v22 = a4;
  v22[1] = a5;
  uint64_t v23 = &v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderName];
  *uint64_t v23 = a6;
  v23[1] = a7;
  uint64_t v24 = &v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo];
  *uint64_t v24 = a12;
  v24[1] = a13;
  v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic] = 0;
  uint64_t v25 = &v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName];
  *uint64_t v25 = a8;
  v25[1] = a9;
  uint64_t v26 = &v13[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_handle];
  *uint64_t v26 = a10;
  v26[1] = a11;
  v32.receiver = v13;
  v32.super_class = (Class)type metadata accessor for NearbySessionInvitation();
  id v27 = objc_msgSendSuper2(&v32, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a1, v20);
  return v27;
}

uint64_t type metadata accessor for NearbySessionInvitation()
{
  uint64_t result = type metadata singleton initialization cache for NearbySessionInvitation;
  if (!type metadata singleton initialization cache for NearbySessionInvitation) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t NearbySessionInvitation.description.getter()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  _StringGuts.grow(_:)(68);
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x6669746E65646920;
  v4._object = (void *)0xED0000203A726569;
  String.append(_:)(v4);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x203A6570797420;
  v6._object = (void *)0xE700000000000000;
  String.append(_:)(v6);
  LODWORD(v27) = *(_DWORD *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_activityType);
  _print_unlocked<A, B>(_:_:)();
  v7._object = (void *)0xEC000000203A6F66;
  v7._countAndFlagsBits = 0x6E4972657375202CLL;
  String.append(_:)(v7);
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo);
  unint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo + 8);
  if (v8 >> 60 == 15)
  {
    unint64_t v10 = 0xE300000000000000;
    uint64_t v11 = 7104878;
  }
  else
  {
    uint64_t v27 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo);
    outlined copy of Data._Representation(v9, v8);
    outlined copy of Data._Representation(v9, v8);
    uint64_t v11 = String.init<A>(reflecting:)();
    unint64_t v10 = v12;
  }
  unint64_t v13 = v10;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  outlined consume of Data?(v9, v8);
  v14._countAndFlagsBits = 0x61646174656D202CLL;
  v14._object = (void *)0xEC000000203A6174;
  String.append(_:)(v14);
  id v15 = *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata);
  id v16 = objc_msgSend(v15, sel_description, v27);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);

  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0x63696C627570202CLL;
  v21._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v21);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic)) {
    uint64_t v22 = 1702195828;
  }
  else {
    uint64_t v22 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic)) {
    unint64_t v23 = 0xE400000000000000;
  }
  else {
    unint64_t v23 = 0xE500000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 62;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  return 0;
}

uint64_t static NearbySessionInvitation.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbySessionInvitation.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Swift::String v5 = (void *)MEMORY[0x25A2B5660](0x696669746E656469, 0xEA00000000007265);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v5];

  Class v6 = UInt32._bridgeToObjectiveC()().super.super.isa;
  Swift::String v7 = (void *)MEMORY[0x25A2B5660](0x7974697669746361, 0xEC00000065707954);
  [(objc_class *)with.super.isa encodeObject:v6 forKey:v7];

  uint64_t v8 = *(void *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata);
  uint64_t v9 = (void *)MEMORY[0x25A2B5660](0x617461646174656DLL, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:v8 forKey:v9];

  unint64_t v10 = (uint64_t *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo);
  unint64_t v11 = *(void *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo + 8);
  if (v11 >> 60 != 15)
  {
    uint64_t v12 = *v10;
    outlined copy of Data._Representation(*v10, *(void *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo + 8));
    Class v13 = Data._bridgeToObjectiveC()().super.isa;
    Swift::String v14 = (void *)MEMORY[0x25A2B5660](0x6F666E4972657375, 0xE800000000000000);
    [(objc_class *)with.super.isa encodeObject:v13 forKey:v14];

    outlined consume of Data?(v12, v11);
  }
  uint64_t v15 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic);
  id v16 = (void *)MEMORY[0x25A2B5660](0x63696C6275507369, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeBool:v15 forKey:v16];

  uint64_t v17 = (void *)MEMORY[0x25A2B5660](*(void *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName), *(void *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName + 8));
  unint64_t v18 = (void *)MEMORY[0x25A2B5660](0x4E79616C70736964, 0xEB00000000656D61);
  [(objc_class *)with.super.isa encodeObject:v17 forKey:v18];

  uint64_t v19 = (void *)MEMORY[0x25A2B5660](*(void *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_handle), *(void *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_handle + 8));
  Swift::String v20 = (void *)MEMORY[0x25A2B5660](0x656C646E6168, 0xE600000000000000);
  [(objc_class *)with.super.isa encodeObject:v19 forKey:v20];

  Swift::String v21 = (void *)MEMORY[0x25A2B5660](*(void *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderID), *(void *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderID + 8));
  uint64_t v22 = (void *)MEMORY[0x25A2B5660](0xD000000000000010, 0x80000002573C2C10);
  [(objc_class *)with.super.isa encodeObject:v21 forKey:v22];

  unint64_t v23 = (void *)MEMORY[0x25A2B5660](*(void *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderName), *(void *)(v2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderName + 8));
  id v24 = (id)MEMORY[0x25A2B5660](0xD000000000000012, 0x80000002573C2C30);
  [(objc_class *)with.super.isa encodeObject:v23 forKey:v24];
}

id NearbySessionInvitation.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbySessionInvitation.init(coder:)(a1);
}

id NearbySessionInvitation.init(coder:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  Swift::String v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = v1;
  unint64_t v11 = (void *)MEMORY[0x25A2B5660](0x696669746E656469, 0xEA00000000007265);
  id v12 = objc_msgSend(a1, sel_decodeObjectForKey_, v11);

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v64 = 0u;
    long long v65 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v64, (uint64_t)v66);
  if (v67)
  {
    int v13 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, v13 ^ 1u, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      Swift::String v14 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v14(v9, v5, v6);
      uint64_t v15 = (void *)MEMORY[0x25A2B5660](0x7974697669746361, 0xEC00000065707954);
      id v16 = objc_msgSend(a1, sel_decodeObjectForKey_, v15);

      if (v16)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v64 = 0u;
        long long v65 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v64, (uint64_t)v66);
      if (v67)
      {
        if (swift_dynamicCast())
        {
          if (v62 > 1) {
            goto LABEL_24;
          }
          int v60 = (int)v62;
LABEL_17:
          uint64_t v17 = (void *)MEMORY[0x25A2B5660](0x617461646174656DLL, 0xE800000000000000);
          id v18 = objc_msgSend(a1, sel_decodeObjectForKey_, v17);

          if (v18)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            long long v64 = 0u;
            long long v65 = 0u;
          }
          outlined init with take of Any?((uint64_t)&v64, (uint64_t)v66);
          if (!v67)
          {

LABEL_56:
            outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v66, &demangling cache variable for type metadata for Any?);
            goto LABEL_61;
          }
          type metadata accessor for NearbyInvitationJoinRequestMetadata();
          if (swift_dynamicCast())
          {
            id v59 = v62;
            uint64_t v19 = (void *)MEMORY[0x25A2B5660](0x4E79616C70736964, 0xEB00000000656D61);
            id v20 = objc_msgSend(a1, sel_decodeObjectForKey_, v19);

            if (v20)
            {
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
            }
            else
            {
              long long v64 = 0u;
              long long v65 = 0u;
            }
            outlined init with take of Any?((uint64_t)&v64, (uint64_t)v66);
            if (v67)
            {
              if ((swift_dynamicCast() & 1) == 0)
              {

LABEL_60:
                goto LABEL_61;
              }
              unint64_t v21 = v63;
              uint64_t v57 = v14;
              v58 = v62;
              uint64_t v22 = (void *)MEMORY[0x25A2B5660](0x656C646E6168, 0xE600000000000000);
              id v23 = objc_msgSend(a1, sel_decodeObjectForKey_, v22);

              if (v23)
              {
                _bridgeAnyObjectToAny(_:)();
                swift_unknownObjectRelease();
              }
              else
              {
                long long v64 = 0u;
                long long v65 = 0u;
              }
              outlined init with take of Any?((uint64_t)&v64, (uint64_t)v66);
              if (v67)
              {
                if ((swift_dynamicCast() & 1) == 0)
                {

LABEL_59:
                  swift_bridgeObjectRelease();
                  goto LABEL_60;
                }
                v55 = v62;
                unint64_t v56 = v63;
                id v24 = (void *)MEMORY[0x25A2B5660](0xD000000000000010, 0x80000002573C2C10);
                id v25 = objc_msgSend(a1, sel_decodeObjectForKey_, v24);

                if (v25)
                {
                  _bridgeAnyObjectToAny(_:)();
                  swift_unknownObjectRelease();
                }
                else
                {
                  long long v64 = 0u;
                  long long v65 = 0u;
                }
                outlined init with take of Any?((uint64_t)&v64, (uint64_t)v66);
                if (v67)
                {
                  if ((swift_dynamicCast() & 1) == 0)
                  {

LABEL_58:
                    swift_bridgeObjectRelease();
                    goto LABEL_59;
                  }
                  uint64_t v53 = v62;
                  unint64_t v54 = v63;
                  uint64_t v26 = (void *)MEMORY[0x25A2B5660](0xD000000000000012, 0x80000002573C2C30);
                  id v27 = objc_msgSend(a1, sel_decodeObjectForKey_, v26);

                  if (v27)
                  {
                    _bridgeAnyObjectToAny(_:)();
                    swift_unknownObjectRelease();
                  }
                  else
                  {
                    long long v64 = 0u;
                    long long v65 = 0u;
                  }
                  outlined init with take of Any?((uint64_t)&v64, (uint64_t)v66);
                  if (v67)
                  {
                    if (swift_dynamicCast())
                    {
                      v52 = v62;
                      unint64_t v51 = v63;
                      uint64_t v28 = (void *)MEMORY[0x25A2B5660](0x6F666E4972657375, 0xE800000000000000);
                      id v29 = objc_msgSend(a1, sel_decodeObjectForKey_, v28);

                      if (v29)
                      {
                        _bridgeAnyObjectToAny(_:)();
                        swift_unknownObjectRelease();
                      }
                      else
                      {
                        long long v64 = 0u;
                        long long v65 = 0u;
                      }
                      outlined init with take of Any?((uint64_t)&v64, (uint64_t)v66);
                      if (v67)
                      {
                        int v32 = swift_dynamicCast();
                        uint64_t v33 = v62;
                        if (!v32) {
                          uint64_t v33 = 0;
                        }
                        v50 = v33;
                        if (v32) {
                          unint64_t v34 = v63;
                        }
                        else {
                          unint64_t v34 = 0xF000000000000000;
                        }
                      }
                      else
                      {
                        outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v66, &demangling cache variable for type metadata for Any?);
                        v50 = 0;
                        unint64_t v34 = 0xF000000000000000;
                      }
                      uint64_t v35 = (void *)MEMORY[0x25A2B5660](0x63696C6275507369, 0xE800000000000000);
                      id v36 = objc_msgSend(a1, sel_decodeObjectForKey_, v35);

                      if (v36)
                      {
                        _bridgeAnyObjectToAny(_:)();
                        swift_unknownObjectRelease();
                      }
                      else
                      {
                        long long v64 = 0u;
                        long long v65 = 0u;
                      }
                      uint64_t v37 = v57;
                      id v38 = v59;
                      outlined init with take of Any?((uint64_t)&v64, (uint64_t)v66);
                      if (v67)
                      {
                        if (swift_dynamicCast())
                        {
                          char v39 = (char)v62;
LABEL_80:
                          v37(&v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_identifier], v9, v6);
                          *(_DWORD *)&v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_activityType] = v60;
                          *(void *)&v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata] = v38;
                          unint64_t v40 = &v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo];
                          *(void *)unint64_t v40 = v50;
                          *((void *)v40 + 1) = v34;
                          v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic] = v39;
                          uint64_t v41 = &v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName];
                          *(void *)uint64_t v41 = v58;
                          *((void *)v41 + 1) = v21;
                          unint64_t v42 = &v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderID];
                          unint64_t v43 = v54;
                          *(void *)unint64_t v42 = v53;
                          *((void *)v42 + 1) = v43;
                          uint64_t v44 = &v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderName];
                          unint64_t v45 = v51;
                          *(void *)uint64_t v44 = v52;
                          *((void *)v44 + 1) = v45;
                          v46 = &v10[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_handle];
                          unint64_t v47 = v56;
                          *(void *)v46 = v55;
                          *((void *)v46 + 1) = v47;

                          v48 = (objc_class *)type metadata accessor for NearbySessionInvitation();
                          v61.receiver = v10;
                          v61.super_class = v48;
                          id v30 = objc_msgSendSuper2(&v61, sel_init);

                          return v30;
                        }
                      }
                      else
                      {
                        outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v66, &demangling cache variable for type metadata for Any?);
                      }
                      char v39 = 0;
                      goto LABEL_80;
                    }

                    swift_bridgeObjectRelease();
                    goto LABEL_58;
                  }

                  swift_bridgeObjectRelease();
                }
                else
                {
                }
                swift_bridgeObjectRelease();
              }
              else
              {
              }
              swift_bridgeObjectRelease();
            }
            else
            {
            }
            goto LABEL_56;
          }
LABEL_24:

LABEL_61:
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          goto LABEL_62;
        }
      }
      else
      {
        outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v66, &demangling cache variable for type metadata for Any?);
      }
      int v60 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v66, &demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }

  outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_62:
  type metadata accessor for NearbySessionInvitation();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id NearbySessionInvitation.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void NearbySessionInvitation.init()()
{
}

unint64_t NearbySessionInvitation.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7974697669746361;
      break;
    case 2:
      unint64_t result = 0x617461646174656DLL;
      break;
    case 3:
      return result;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x63696C6275507369;
      break;
    case 6:
      unint64_t result = 0x4E79616C70736964;
      break;
    case 7:
      unint64_t result = 0x656C646E6168;
      break;
    case 8:
      unint64_t result = 0x6F666E4972657375;
      break;
    default:
      unint64_t result = 0x696669746E656469;
      break;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbySessionInvitation.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbySessionInvitation.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NearbySessionInvitation.CodingKeys()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbySessionInvitation.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance NearbySessionInvitation.CodingKeys()
{
  return NearbySessionInvitation.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NearbySessionInvitation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NearbySessionInvitation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance NearbySessionInvitation.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance NearbySessionInvitation.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbySessionInvitation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbySessionInvitation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

id NearbySessionInvitation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbySessionInvitation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t NearbySessionInvitation.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NearbySessionInvitation.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v10) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LODWORD(v10) = *(_DWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_activityType);
    char v11 = 1;
    lazy protocol witness table accessor for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v10 = *(void *)(v3 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata);
    char v11 = 2;
    type metadata accessor for NearbyInvitationJoinRequestMetadata();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata and conformance NearbyInvitationJoinRequestMetadata, (void (*)(uint64_t))type metadata accessor for NearbyInvitationJoinRequestMetadata);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo);
    char v11 = 8;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

id NearbySessionInvitation.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbySessionInvitation.init(from:)(a1);
}

id NearbySessionInvitation.init(from:)(void *a1)
{
  id v3 = v1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NearbySessionInvitation.CodingKeys>);
  uint64_t v32 = *(void *)(v8 - 8);
  uint64_t v33 = v8;
  MEMORY[0x270FA5388](v8);
  long long v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  id v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  lazy protocol witness table accessor for type NearbySessionInvitation.CodingKeys and conformance NearbySessionInvitation.CodingKeys();
  id v35 = v3;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    id v30 = v35;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);

    type metadata accessor for NearbySessionInvitation();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v12 = v32;
    LOBYTE(v38) = 0;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v13 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v15 = v35;
    (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))((uint64_t)v35 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_identifier, v7, v5);
    char v39 = 1;
    lazy protocol witness table accessor for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v16 = (uint64_t)v36;
    *(_DWORD *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_activityType] = v38;
    type metadata accessor for NearbyInvitationJoinRequestMetadata();
    char v39 = 2;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata and conformance NearbyInvitationJoinRequestMetadata, (void (*)(uint64_t))type metadata accessor for NearbyInvitationJoinRequestMetadata);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata] = v38;
    LOBYTE(v38) = 3;
    uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
    id v18 = (uint64_t *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderID];
    *id v18 = v17;
    v18[1] = v19;
    LOBYTE(v38) = 4;
    uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
    unint64_t v21 = (uint64_t *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_sourceProviderName];
    *unint64_t v21 = v20;
    v21[1] = v22;
    LOBYTE(v38) = 5;
    v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_isPublic] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v38) = 6;
    uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
    id v24 = (uint64_t *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName];
    *id v24 = v23;
    v24[1] = v25;
    LOBYTE(v38) = 7;
    uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
    id v27 = (uint64_t *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_handle];
    *id v27 = v26;
    v27[1] = v28;
    char v39 = 8;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v15[OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_userInfo] = v38;

    id v29 = (objc_class *)type metadata accessor for NearbySessionInvitation();
    v37.receiver = v15;
    v37.super_class = v29;
    id v30 = objc_msgSendSuper2(&v37, sel_init);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v13);
    __swift_destroy_boxed_opaque_existential_0(v16);
  }
  return v30;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NearbySessionInvitation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 184))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NearbySessionInvitation()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0xB0))();
}

uint64_t ObjC metadata update function for NearbySessionInvitation()
{
  return type metadata accessor for NearbySessionInvitation();
}

uint64_t type metadata completion function for NearbySessionInvitation()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for NearbySessionInvitation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbySessionInvitation);
}

uint64_t dispatch thunk of NearbySessionInvitation.__allocating_init(identifier:activityType:metadata:sourceProviderID:sourceProviderName:displayName:handle:userInfo:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of NearbySessionInvitation.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of NearbySessionInvitation.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of NearbySessionInvitation.encode(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of NearbySessionInvitation.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NearbySessionInvitation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NearbySessionInvitation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2573664E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for NearbySessionInvitation.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for NearbySessionInvitation.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void *type metadata accessor for NearbySessionInvitation.CodingKeys()
{
  return &unk_270653D08;
}

uint64_t specialized NearbySessionInvitation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7974697669746361 && a2 == 0xEC00000065707954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002573C2C10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002573C2C30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x63696C6275507369 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656C646E6168 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t one-time initialization function for identity()
{
  uint64_t v0 = type metadata accessor for XPCIdentity();
  __swift_allocate_value_buffer(v0, static NearbyGroupInterface.identity);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static NearbyGroupInterface.identity);
  uint64_t v2 = *MEMORY[0x263F33FD8];
  BOOL v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 104);
  return v3(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for XPCIdentity();
  __swift_allocate_value_buffer(v0, static NearbyInvitationServiceInterface.identity);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static NearbyInvitationServiceInterface.identity);
  uint64_t v2 = *MEMORY[0x263F33FD0];
  BOOL v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 104);
  return v3(v1, v2, v0);
}

uint64_t static NearbyGroupInterface.identity.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for XPCIdentity();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static NearbyGroupInterface.identity);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static NearbyGroupInterface.identity.setter(uint64_t a1)
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for XPCIdentity();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static NearbyGroupInterface.identity);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static NearbyGroupInterface.identity.modify())()
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for XPCIdentity();
  __swift_project_value_buffer(v0, (uint64_t)static NearbyGroupInterface.identity);
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

id one-time initialization function for hostObjectInterface()
{
  id result = closure #1 in variable initialization expression of static NearbyGroupInterface.hostObjectInterface();
  static NearbyGroupInterface.hostObjectInterface = (uint64_t)result;
  return result;
}

{
  id result;

  id result = closure #1 in variable initialization expression of static NearbyInvitationServiceInterface.hostObjectInterface();
  static NearbyInvitationServiceInterface.hostObjectInterface = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static NearbyGroupInterface.hostObjectInterface()
{
  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_270659AA0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2573BF700;
  uint64_t v2 = type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(void *)(v1 + 32) = v2;
  uint64_t v3 = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSSet);
  *(void *)(v1 + 40) = v3;
  uint64_t v4 = type metadata accessor for NearbyGroupMember();
  *(void *)(v1 + 48) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2573BF700;
  *(void *)(v5 + 32) = v2;
  *(void *)(v5 + 40) = v3;
  *(void *)(v5 + 48) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  return v0;
}

id static NearbyGroupInterface.hostObjectInterface.getter()
{
  return static NearbyGroupInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (void **)&static NearbyGroupInterface.hostObjectInterface);
}

void static NearbyGroupInterface.hostObjectInterface.setter(void *a1)
{
}

uint64_t (*static NearbyGroupInterface.hostObjectInterface.modify())()
{
  if (one-time initialization token for hostObjectInterface != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static NearbyGroupInterface.hostObjectInterface.modify;
}

uint64_t one-time initialization function for clientObjectInterface()
{
  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_270659B00);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2573BF080;
  *(void *)(v1 + 32) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSSet);
  *(void *)(v1 + 40) = type metadata accessor for NearbyGroupMember();
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  uint64_t result = swift_bridgeObjectRelease();
  static NearbyGroupInterface.clientObjectInterface = (uint64_t)v0;
  return result;
}

id static NearbyGroupInterface.clientObjectInterface.getter()
{
  return static NearbyGroupInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (void **)&static NearbyGroupInterface.clientObjectInterface);
}

id static NearbyGroupInterface.hostObjectInterface.getter(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = *a2;
  return v3;
}

void static NearbyGroupInterface.clientObjectInterface.setter(void *a1)
{
}

void static NearbyGroupInterface.hostObjectInterface.setter(void *a1, void *a2, void **a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = *a3;
  *a3 = a1;
}

uint64_t (*static NearbyGroupInterface.clientObjectInterface.modify())()
{
  if (one-time initialization token for clientObjectInterface != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static NearbyGroupInterface.identity.modify;
}

uint64_t protocol witness for static XPCInterface.identity.getter in conformance NearbyGroupInterface@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for XPCIdentity();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static NearbyGroupInterface.identity);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyGroupInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyGroupInterface(a1, a2, &one-time initialization token for hostObjectInterface, (void **)&static NearbyGroupInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance NearbyGroupInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyGroupInterface(a1, a2, &one-time initialization token for clientObjectInterface, (void **)&static NearbyGroupInterface.clientObjectInterface);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyGroupInterface(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = *a4;
  return v5;
}

uint64_t protocol witness for static XPCInterface.isConnectionEntitled(_:) in conformance NearbyGroupInterface()
{
  return MEMORY[0x270F18928]();
}

ValueMetadata *type metadata accessor for NearbyGroupInterface()
{
  return &type metadata for NearbyGroupInterface;
}

uint64_t type metadata accessor for NSSet(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t NearbyGroupCreationRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_id, a1);
}

uint64_t NearbyGroupCreationRequest.members.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyGroupCreationRequest.description.getter()
{
  swift_getObjectType();
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x203A6469283ELL;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x7265626D656D202CLL;
  v3._object = (void *)0xEB00000000203A73;
  String.append(_:)(v3);
  type metadata accessor for NearbyGroupMember();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for NearbyGroupMember);
  v4._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 60;
}

id NearbyGroupCreationRequest.__allocating_init(id:members:)(uint64_t a1, uint64_t a2)
{
  Swift::String v5 = (char *)objc_allocWithZone(v2);
  char v6 = &v5[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_id];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  *(void *)&v5[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_members] = a2;
  v11.receiver = v5;
  v11.super_class = v2;
  id v9 = objc_msgSendSuper2(&v11, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v9;
}

id NearbyGroupCreationRequest.init(id:members:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  char v6 = &v2[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_id];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  *(void *)&v2[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_members] = a2;
  v11.receiver = v2;
  v11.super_class = ObjectType;
  id v9 = objc_msgSendSuper2(&v11, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v9;
}

uint64_t static NearbyGroupCreationRequest.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyGroupCreationRequest.encode(with:)(NSCoder with)
{
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Swift::String v3 = (void *)MEMORY[0x25A2B5660](25705, 0xE200000000000000);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v3];

  type metadata accessor for NearbyGroupMember();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for NearbyGroupMember);
  Class v4 = Set._bridgeToObjectiveC()().super.isa;
  id v5 = (id)MEMORY[0x25A2B5660](0x737265626D656DLL, 0xE700000000000000);
  [(objc_class *)with.super.isa encodeObject:v4 forKey:v5];
}

id NearbyGroupCreationRequest.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbyGroupCreationRequest.init(coder:)(a1);
}

id NearbyGroupCreationRequest.init(coder:)(void *a1)
{
  Swift::String v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  long long v10 = (char *)&v29 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  Swift::String v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  uint64_t v15 = v2;
  uint64_t v16 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    goto LABEL_6;
  }
  uint64_t v17 = (void *)v16;
  id v29 = v14;
  id v30 = a1;
  uint64_t v31 = (objc_class *)ObjectType;
  id v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v18(v8, 1, 1, v11);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v19(v8, 1, v11) == 1)
  {
    v18(v10, 1, 1, v11);
    a1 = v30;
LABEL_6:

    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    goto LABEL_7;
  }
  uint64_t v20 = v8;
  unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v21(v10, v20, v11);
  v18(v10, 0, 1, v11);
  unsigned int v22 = v19(v10, 1, v11);
  a1 = v30;
  uint64_t v23 = v31;
  if (v22 == 1) {
    goto LABEL_6;
  }
  uint64_t v26 = v29;
  v21(v29, v10, v11);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_2573BF080;
  *(void *)(v27 + 32) = type metadata accessor for NearbyGroupMember();
  *(void *)(v27 + 40) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSSet);
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v35)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
    if (swift_dynamicCast())
    {
      uint64_t v28 = v33;
      v21(&v15[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_id], v26, v11);
      *(void *)&v15[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_members] = v28;

      v32.receiver = v15;
      v32.super_class = v23;
      id v24 = objc_msgSendSuper2(&v32, sel_init);

      return v24;
    }
  }
  else
  {

    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v34, &demangling cache variable for type metadata for Any?);
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v11);
LABEL_7:
  swift_deallocPartialClassInstance();
  return 0;
}

void NearbyGroupCreationRequest.init()()
{
}

uint64_t NearbyGroupConnectionInfo.id.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id, a1);
}

uint64_t NearbyGroupCreationRequest.id.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

id NearbyGroupConnectionInfo.endpoint.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint);
}

uint64_t NearbyGroupConnectionInfo.localMember.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember);
  swift_bridgeObjectRetain();
  return v1;
}

id NearbyGroupConnectionInfo.__allocating_init(id:endpoint:localMember:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (char *)objc_allocWithZone(v4);
  long long v10 = &v9[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  *(void *)&v9[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint] = a2;
  uint64_t v13 = &v9[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember];
  *(void *)uint64_t v13 = a3;
  *((void *)v13 + 1) = a4;
  v16.receiver = v9;
  v16.super_class = v4;
  id v14 = objc_msgSendSuper2(&v16, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  return v14;
}

id NearbyGroupConnectionInfo.init(id:endpoint:localMember:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  long long v10 = &v4[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  *(void *)&v4[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint] = a2;
  uint64_t v13 = &v4[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember];
  *(void *)uint64_t v13 = a3;
  *((void *)v13 + 1) = a4;
  v16.receiver = v4;
  v16.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v16, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  return v14;
}

id @objc NearbyGroupCreationRequest.description.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  uint64_t v8 = (void *)MEMORY[0x25A2B5660](v5, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t NearbyGroupConnectionInfo.description.getter()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x203A6469283ELL;
  v3._object = (void *)0xE600000000000000;
  String.append(_:)(v3);
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x696F70646E65202CLL;
  v5._object = (void *)0xEC000000203A746ELL;
  String.append(_:)(v5);
  id v6 = *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint);
  id v7 = objc_msgSend(v6, sel_description);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);

  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x4D6C61636F6C202CLL;
  v12._object = (void *)0xEF203A7265626D65;
  String.append(_:)(v12);
  uint64_t v13 = v1 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember;
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember);
  uint64_t v15 = *(void **)(v13 + 8);
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  return 60;
}

uint64_t static NearbyGroupConnectionInfo.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyGroupConnectionInfo.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Swift::String v5 = (void *)MEMORY[0x25A2B5660](25705, 0xE200000000000000);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v5];

  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint);
  id v7 = (void *)MEMORY[0x25A2B5660](0x746E696F70646E65, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:v6 forKey:v7];

  uint64_t v8 = (void *)MEMORY[0x25A2B5660](*(void *)(v2 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember), *(void *)(v2 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember + 8));
  id v9 = (id)MEMORY[0x25A2B5660](0x6D654D6C61636F6CLL, 0xEB00000000726562);
  [(objc_class *)with.super.isa encodeObject:v8 forKey:v9];
}

id NearbyGroupConnectionInfo.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbyGroupConnectionInfo.init(coder:)(a1);
}

id NearbyGroupConnectionInfo.init(coder:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  long long v10 = (char *)&v34 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  uint64_t v15 = v2;
  uint64_t v16 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    goto LABEL_6;
  }
  uint64_t v17 = (void *)v16;
  uint64_t v35 = v14;
  id v36 = a1;
  objc_super v37 = (objc_class *)ObjectType;
  id v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v18(v8, 1, 1, v11);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v19(v8, 1, v11) == 1)
  {
    v18(v10, 1, 1, v11);
    a1 = v36;
LABEL_6:

    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    goto LABEL_7;
  }
  uint64_t v20 = v8;
  unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v21(v10, v20, v11);
  v18(v10, 0, 1, v11);
  unsigned int v22 = v19(v10, 1, v11);
  a1 = v36;
  uint64_t v23 = v37;
  if (v22 == 1) {
    goto LABEL_6;
  }
  uint64_t v26 = v35;
  v21(v35, v10, v11);
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSXPCListenerEndpoint);
  uint64_t v27 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v27)
  {
    uint64_t v28 = (void *)v27;
    uint64_t v34 = v21;
    type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
    uint64_t v29 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v29)
    {
      id v30 = (void *)v29;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();

      uint64_t v31 = v40;
      if (v40)
      {
        uint64_t v32 = v39;
        v34(&v15[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id], v26, v11);
        *(void *)&v15[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint] = v28;
        uint64_t v33 = &v15[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_localMember];
        *(void *)uint64_t v33 = v32;
        *((void *)v33 + 1) = v31;

        v38.receiver = v15;
        v38.super_class = v23;
        id v24 = objc_msgSendSuper2(&v38, sel_init);

        return v24;
      }
    }
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v11);
LABEL_7:
  swift_deallocPartialClassInstance();
  return 0;
}

id NearbyGroupConnectionInfo.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void NearbyGroupConnectionInfo.init()()
{
}

id NearbyGroupCreationRequest.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t key path setter for NearbyGroupTable.serialQueue : NearbyGroupTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AsyncSerialQueue();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 104))(v6);
}

uint64_t NearbyGroupTable.serialQueue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_serialQueue;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for AsyncSerialQueue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t NearbyGroupTable.serialQueue.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_serialQueue;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*NearbyGroupTable.serialQueue.modify())()
{
  return static NearbyGroupInterface.hostObjectInterface.modify;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, NearbyGroupTable.WeakNearbyGroup));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = MEMORY[0x263F8EE80];
LABEL_9:
    swift_bridgeObjectRelease();
    return v7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupTable.WeakNearbyGroup>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_9;
  }
  uint64_t v9 = v6 + 64;
  unint64_t v10 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v21[1] = a1;
  uint64_t v11 = a1 + v10;
  uint64_t v12 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (UUID, Bool)(v11, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, NearbyGroupTable.WeakNearbyGroup));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v14) {
      break;
    }
    unint64_t v15 = result;
    *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = *(void *)(v7 + 48);
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v16 + *(void *)(*(void *)(v17 - 8) + 72) * v15, v5, v17);
    unint64_t result = outlined init with take of NearbyGroupTable.WeakNearbyGroup();
    uint64_t v18 = *(void *)(v7 + 16);
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_12;
    }
    *(void *)(v7 + 16) = v20;
    v11 += v12;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v7;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, NearbyGroupConnectionInfo));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupConnectionInfo>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  unint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (UUID, Bool)(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, NearbyGroupConnectionInfo));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    BOOL v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    unint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, Bool));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Bool>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  unint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (UUID, Bool)(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, Bool));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(unsigned char *)(v7[7] + v16) = v5[v9];
    BOOL v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    unint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t NearbyGroupTable.WeakNearbyGroup.group.getter()
{
  return swift_weakLoadStrong();
}

uint64_t NearbyGroupTable.WeakNearbyGroup.group.setter()
{
  swift_weakAssign();
  return swift_release();
}

uint64_t (*NearbyGroupTable.WeakNearbyGroup.group.modify(uint64_t *a1))()
{
  a1[1] = v1;
  *a1 = swift_weakLoadStrong();
  return NearbyGroupTable.WeakNearbyGroup.group.modify;
}

uint64_t NearbyGroupTable.WeakNearbyGroup.group.modify()
{
  swift_weakAssign();
  return swift_release();
}

uint64_t NearbyGroupTable.WeakNearbyGroup.init()()
{
  return swift_weakInit();
}

uint64_t NearbyGroupTable.WeakNearbyGroup.init(group:)()
{
  swift_weakInit();
  return swift_release();
}

uint64_t NearbyGroupTable.cleanUpIfNotPresent(_:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for AsyncSerialQueue();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](NearbyGroupTable.cleanUpIfNotPresent(_:), 0, 0);
}

uint64_t NearbyGroupTable.cleanUpIfNotPresent(_:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  (*(void (**)(void))(*(void *)v2 + 96))();
  uint64_t v3 = swift_allocObject();
  v0[7] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  *uint64_t v4 = v0;
  v4[1] = NearbyGroupTable.cleanUpIfNotPresent(_:);
  return MEMORY[0x270F18948]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  uint64_t v2 = *(void *)(*(void *)v0 + 40);
  uint64_t v3 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return MEMORY[0x270FA2498](NearbyGroupTable.cleanUpIfNotPresent(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = a3;
  return MEMORY[0x270FA2498](closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:), 0, 0);
}

uint64_t closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized _NativeDictionary.filter(_:)(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Sequence.forEach(_:)(v3, (void (*)(char *, char *))partial apply for closure #2 in closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:));
  swift_release();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t partial apply for closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  *(_OWORD *)(v2 + 40) = v3;
  return MEMORY[0x270FA2498](closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:), 0, 0);
}

uint64_t closure #1 in closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a3 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v13) {
      return 0;
    }
  }
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v9, (uint64_t)static Log.group);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v15, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
  uint64_t v16 = Logger.logObject.getter();
  int v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    int v26 = v17;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v31 = v25;
    *(_DWORD *)uint64_t v18 = 136315394;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_WORD *)(v18 + 12) = 2080;
    outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
    char v30 = 0;
    outlined init with copy of (UUID, Bool)((uint64_t)&v29, (uint64_t)v28, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
    if (v28[8])
    {
      unint64_t v21 = 0xE300000000000000;
      uint64_t v22 = 7104878;
    }
    else
    {
      outlined init with take of NearbyGroupTable.WeakNearbyGroup();
      outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
      uint64_t v22 = String.init<A>(reflecting:)();
      unint64_t v21 = v23;
      outlined destroy of NearbyGroupTable.WeakNearbyGroup((uint64_t)v27);
    }
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)&v29, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NearbyGroupTable.WeakNearbyGroup((uint64_t)v32);
    _os_log_impl(&dword_257351000, v16, (os_log_type_t)v26, "NearbyGroup %s, %s was removed.", (uint8_t *)v18, 0x16u);
    uint64_t v24 = v25;
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v24, -1, -1);
    MEMORY[0x25A2B6460](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    outlined destroy of NearbyGroupTable.WeakNearbyGroup((uint64_t)v32);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return 1;
}

uint64_t closure #2 in closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.group);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    v18[1] = a3;
    char v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)char v13 = 136315138;
    uint64_t v19 = a1;
    v20[0] = v14;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v21[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v20);
    a1 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    _os_log_impl(&dword_257351000, v10, v11, "NearbyGroup %s is no longer tracked. Cleaning up.", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v14, -1, -1);
    MEMORY[0x25A2B6460](v13, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(a1, (uint64_t)v21);
  outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v21, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
  return swift_endAccess();
}

uint64_t NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  void v4[4] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[8] = v6;
  v4[9] = *(void *)(v6 + 64);
  v4[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AsyncSerialQueue();
  v4[11] = v7;
  v4[12] = *(void *)(v7 - 8);
  v4[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:), 0, 0);
}

uint64_t NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)()
{
  uint64_t v1 = v0;
  unint64_t v16 = v0 + 2;
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v7 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v8 = v0[3];
  uint64_t v9 = v0[4];
  (*(void (**)(void))(*(void *)v6 + 96))();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v8, v4);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  v1[14] = v11;
  *(void *)(v11 + 16) = v6;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v11 + v10, v2, v4);
  uint64_t v12 = (void *)(v11 + ((v3 + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v12 = v9;
  v12[1] = v7;
  swift_retain();
  swift_retain();
  char v13 = (void *)swift_task_alloc();
  v1[15] = v13;
  uint64_t v14 = type metadata accessor for NearbyGroup();
  *char v13 = v1;
  v13[1] = NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return MEMORY[0x270F18940](v16, &async function pointer to partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:), v11, v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 104);
  uint64_t v3 = *(void *)(*(void *)v1 + 96);
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0) {
    uint64_t v5 = NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  }
  else {
    uint64_t v5 = NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[22] = a4;
  v5[23] = a5;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  uint64_t v6 = type metadata accessor for UUID();
  v5[24] = v6;
  v5[25] = *(void *)(v6 - 8);
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:), 0, 0);
}

uint64_t closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)()
{
  uint64_t v53 = v0;
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_contents;
  *(void *)(v0 + 240) = OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_contents;
  uint64_t v3 = v1 + v2;
  swift_beginAccess();
  if (*(void *)(*(void *)v3 + 16))
  {
    uint64_t v4 = *(void *)(v0 + 168);
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v4);
    if (v5)
    {
      outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
      *(unsigned char *)(v0 + 72) = 0;
    }
    else
    {
      *(void *)(v0 + 64) = 0;
      *(unsigned char *)(v0 + 72) = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(v0 + 64) = 0;
    *(unsigned char *)(v0 + 72) = 1;
  }
  uint64_t v6 = (void **)(v0 + 120);
  if (*(unsigned char *)(v0 + 72))
  {
    outlined destroy of Invitation_HostConnectionInfo?(v0 + 64, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
LABEL_25:
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v31 = *(void *)(v0 + 224);
    uint64_t v32 = *(void *)(v0 + 192);
    uint64_t v33 = *(void *)(v0 + 200);
    uint64_t v34 = *(void *)(v0 + 168);
    uint64_t v35 = type metadata accessor for Logger();
    *(void *)(v0 + 248) = __swift_project_value_buffer(v35, (uint64_t)static Log.group);
    id v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
    *(void *)(v0 + 256) = v36;
    *(void *)(v0 + 264) = (v33 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v36(v31, v34, v32);
    objc_super v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = *(void *)(v0 + 224);
    uint64_t v41 = *(void *)(v0 + 192);
    uint64_t v42 = *(void *)(v0 + 200);
    if (v39)
    {
      unint64_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v52 = v44;
      *(_DWORD *)unint64_t v43 = 136315138;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v47 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v47(v40, v41);
      _os_log_impl(&dword_257351000, v37, v38, "Attempting generation for %s", v43, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v44, -1, -1);
      MEMORY[0x25A2B6460](v43, -1, -1);
    }
    else
    {
      unint64_t v47 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v47(*(void *)(v0 + 224), *(void *)(v0 + 192));
    }

    *(void *)(v0 + 272) = v47;
    unint64_t v51 = (uint64_t (*)(void))(*(void *)(v0 + 176) + **(int **)(v0 + 176));
    v48 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v48;
    void *v48 = v0;
    v48[1] = closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
    return v51();
  }
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of Invitation_HostConnectionInfo?(v0 + 64, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
  if (!Strong) {
    goto LABEL_25;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v8 = *v6;
  if ((unint64_t)*v6 >= 2)
  {
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.group);
    swift_retain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      int v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v52 = v49;
      *(_DWORD *)int v26 = 136315138;
      *(void *)(v0 + 128) = Strong;
      type metadata accessor for NearbyGroup();
      swift_retain();
      uint64_t v27 = String.init<A>(reflecting:)();
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_257351000, v24, v25, "NearbyGroup already but is invalidated. Creating a new NearbyGroup to replace it. Existing: %s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v49, -1, -1);
      MEMORY[0x25A2B6460](v26, -1, -1);
      outlined consume of NearbyGroup.State(v8);
      swift_release();
    }
    else
    {
      swift_release_n();
      outlined consume of NearbyGroup.State(v8);
    }

    goto LABEL_25;
  }
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v9 = *(void *)(v0 + 232);
  uint64_t v10 = *(void *)(v0 + 192);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.group);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v12, v10);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = *(void *)(v0 + 232);
  uint64_t v18 = *(void *)(v0 + 192);
  uint64_t v19 = *(void *)(v0 + 200);
  if (v16)
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    uint64_t v52 = v50;
    *(_DWORD *)unint64_t v20 = 136315138;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    _os_log_impl(&dword_257351000, v14, v15, "Group already exists for identifier: %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v50, -1, -1);
    MEMORY[0x25A2B6460](v20, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v19 + 8))(*(void *)(v0 + 232), *(void *)(v0 + 192));
  }

  **(void **)(v0 + 152) = Strong;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  unint64_t v20 = v0;
  (*(void (**)(void, void, void))(v0 + 256))(*(void *)(v0 + 216), *(void *)(v0 + 168), *(void *)(v0 + 192));
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v4 = *(void *)(v0 + 192);
    char v5 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v19 = v17;
    *(_DWORD *)char v5 = 136315394;
    swift_retain();
    uint64_t v6 = NearbyGroup.description.getter();
    uint64_t v8 = v7;
    swift_release();
    *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v18(v3, v4);
    _os_log_impl(&dword_257351000, v1, v2, "Generated group: %s for identifier: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v17, -1, -1);
    MEMORY[0x25A2B6460](v5, -1, -1);
  }
  else
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
    uint64_t v12 = *(void *)(v0 + 216);
    uint64_t v13 = *(void *)(v0 + 192);
    swift_release_n();
    v11(v12, v13);
  }

  uint64_t v14 = *(void *)(v0 + 208);
  (*(void (**)(uint64_t, void, void))(v0 + 256))(v14, *(void *)(v0 + 168), *(void *)(v0 + 192));
  swift_weakInit();
  *(unsigned char *)(v0 + 88) = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter(v0 + 80, v14);
  swift_endAccess();
  **(void **)(v0 + 152) = *(void *)(v0 + 288);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 288) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return MEMORY[0x270FA2498](closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:), 0, 0);
  }
}

uint64_t partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + v5;
  uint64_t v8 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)(a1, v6, v7, v9, v10);
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    outlined destroy of Invitation_HostConnectionInfo?(a1, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v9);
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a2, v4);
    return outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v9, &demangling cache variable for type metadata for NearbyGroupTable.WeakNearbyGroup?);
  }
  else
  {
    outlined init with take of NearbyGroupTable.WeakNearbyGroup();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v7 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
  }
}

uint64_t NearbyGroupTable.firstGroup()()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for AsyncSerialQueue();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](NearbyGroupTable.firstGroup(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(void))(**(void **)(v0 + 24) + 96))();
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = type metadata accessor for NearbyGroup();
  *uint64_t v1 = v0;
  v1[1] = NearbyGroupTable.firstGroup();
  uint64_t v3 = *(void *)(v0 + 24);
  return MEMORY[0x270F18940](v0 + 16, &async function pointer to partial apply for closure #1 in NearbyGroupTable.firstGroup(), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  uint64_t v3 = *(void *)(*(void *)v1 + 40);
  uint64_t v4 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0) {
    unint64_t v5 = NearbyGroupTable.firstGroup();
  }
  else {
    unint64_t v5 = NearbyGroupTable.firstGroup();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in NearbyGroupTable.firstGroup()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return MEMORY[0x270FA2498](closure #1 in NearbyGroupTable.firstGroup(), 0, 0);
}

uint64_t closure #1 in NearbyGroupTable.firstGroup()()
{
  swift_beginAccess();
  uint64_t v1 = swift_bridgeObjectRetain();
  unint64_t v2 = specialized Sequence.compactMap<A>(_:)(v1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup()();
    swift_allocError();
    swift_willThrow();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_9;
  }
  if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x25A2B5B10](0, v2);
  }
  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = *(void *)(v2 + 32);
    swift_retain();
  }
  unint64_t v5 = *(uint64_t **)(v0 + 40);
  swift_bridgeObjectRelease();
  *unint64_t v5 = v4;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
LABEL_9:
  return v6();
}

uint64_t partial apply for closure #1 in NearbyGroupTable.firstGroup()(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  v4[5] = a1;
  v4[6] = v1;
  return MEMORY[0x270FA2498](closure #1 in NearbyGroupTable.firstGroup(), 0, 0);
}

uint64_t partial apply for closure #1 in NearbyGroupTable.firstGroup()()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupTable.WeakNearbyGroup));
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v22 - v6;
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v23 = a1 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v24 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  while (v11)
  {
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v15 = v14 | (v13 << 6);
LABEL_22:
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v7, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v15, v20);
    outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
    outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v7, (uint64_t)v5, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupTable.WeakNearbyGroup));
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t result = outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v5, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupTable.WeakNearbyGroup));
    if (Strong)
    {
      MEMORY[0x25A2B5720](result);
      if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
  }
  int64_t v16 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v16 >= v24) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v23 + 8 * v16);
  ++v13;
  if (v17) {
    goto LABEL_21;
  }
  int64_t v13 = v16 + 1;
  if (v16 + 1 >= v24) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v23 + 8 * v13);
  if (v17) {
    goto LABEL_21;
  }
  int64_t v13 = v16 + 2;
  if (v16 + 2 >= v24) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v23 + 8 * v13);
  if (v17) {
    goto LABEL_21;
  }
  int64_t v13 = v16 + 3;
  if (v16 + 3 >= v24) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v23 + 8 * v13);
  if (v17)
  {
LABEL_21:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
    goto LABEL_22;
  }
  int64_t v18 = v16 + 4;
  if (v18 >= v24)
  {
LABEL_26:
    swift_release();
    return v25;
  }
  unint64_t v17 = *(void *)(v23 + 8 * v18);
  if (v17)
  {
    int64_t v13 = v18;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v13 >= v24) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v23 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  int64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NearbyGroupMember();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for NearbyGroupMember);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v27;
    uint64_t v25 = v28;
    uint64_t v3 = v29;
    uint64_t v4 = v30;
    unint64_t v5 = v31;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v25 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int v26 = (void *)MEMORY[0x263F8EE78];
  int64_t v24 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v9 = (v5 - 1) & v5;
      uint64_t v10 = __clz(__rbit64(v5)) | (v4 << 6);
      unint64_t v11 = v4;
      goto LABEL_29;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v13 >= v24) {
      goto LABEL_36;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v13);
    unint64_t v11 = v4 + 1;
    if (!v14)
    {
      unint64_t v11 = v4 + 2;
      if (v4 + 2 >= v24) {
        goto LABEL_36;
      }
      unint64_t v14 = *(void *)(v25 + 8 * v11);
      if (!v14)
      {
        unint64_t v11 = v4 + 3;
        if (v4 + 3 >= v24) {
          goto LABEL_36;
        }
        unint64_t v14 = *(void *)(v25 + 8 * v11);
        if (!v14)
        {
          unint64_t v11 = v4 + 4;
          if (v4 + 4 >= v24) {
            goto LABEL_36;
          }
          unint64_t v14 = *(void *)(v25 + 8 * v11);
          if (!v14)
          {
            unint64_t v11 = v4 + 5;
            if (v4 + 5 >= v24) {
              goto LABEL_36;
            }
            unint64_t v14 = *(void *)(v25 + 8 * v11);
            if (!v14)
            {
              unint64_t v15 = v4 + 6;
              while (v24 != v15)
              {
                unint64_t v14 = *(void *)(v25 + 8 * v15++);
                if (v14)
                {
                  unint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_36:
              outlined consume of Set<NearbyGroupMember>.Iterator._Variant();
              return (uint64_t)v26;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    uint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    uint64_t v12 = (char *)*(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_36;
    }
    while (1)
    {
      int64_t v16 = v1;
      unint64_t v17 = *(void *)&v12[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle];
      int64_t v18 = *(void *)&v12[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle + 8];
      uint64_t v19 = *(void *)&v12[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID];
      uint64_t v20 = *(void *)&v12[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID + 8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();

      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
        int v26 = (void *)result;
      }
      uint64_t v22 = v26[2];
      uint64_t v21 = v26[3];
      if (v22 >= v21 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v26);
        int v26 = (void *)result;
      }
      v26[2] = v22 + 1;
      uint64_t v23 = &v26[4 * v22];
      v23[4] = v17;
      v23[5] = v18;
      v23[6] = v19;
      v23[7] = v20;
      uint64_t v4 = v11;
      unint64_t v5 = v9;
      uint64_t v1 = v16;
      if ((v16 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NearbyGroupMember();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v12 = v32;
        swift_unknownObjectRelease();
        unint64_t v11 = v4;
        uint64_t v9 = v5;
        if (v32) {
          continue;
        }
      }
      goto LABEL_36;
    }
  }
  __break(1u);
  return result;
}

uint64_t NearbyGroupTable.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_serialQueue;
  uint64_t v2 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NearbyGroupTable.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_serialQueue;
  uint64_t v2 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v3, v4);
}

uint64_t NearbyGroupTable.__allocating_init()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F8F580], v0);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  uint64_t v9 = OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_contents;
  *(void *)(v7 + v9) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  return v7;
}

uint64_t NearbyGroupTable.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F580], v1);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  uint64_t v9 = OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_contents;
  *(void *)(v0 + v9) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  return v0;
}

void *one-time initialization function for shared()
{
  uint64_t result = specialized NearbyInvitationsController.__allocating_init(provider:)(1);
  static NearbyInvitationsController.shared = (uint64_t)result;
  return result;
}

uint64_t static NearbyInvitationsController.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t NearbyInvitationsController.groups.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for NearbyInvitationsController.groups : NearbyInvitationsController@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for NearbyInvitationsController.groups : NearbyInvitationsController()
{
  return static Published.subscript.setter();
}

uint64_t NearbyInvitationsController.groups.setter()
{
  return static Published.subscript.setter();
}

void (*NearbyInvitationsController.groups.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return NearbyInvitationsController.groups.modify;
}

void NearbyInvitationsController.groups.modify(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t NearbyInvitationsController.$groups.getter()
{
  return swift_endAccess();
}

uint64_t key path getter for NearbyInvitationsController.$groups : NearbyInvitationsController()
{
  return swift_endAccess();
}

uint64_t key path setter for NearbyInvitationsController.$groups : NearbyInvitationsController(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t NearbyInvitationsController.$groups.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*NearbyInvitationsController.$groups.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController__groups;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return NearbyInvitationsController.$groups.modify;
}

void NearbyInvitationsController.$groups.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 88) + 16);
  v4(*(void *)(*(void *)a1 + 104), v3[14], v3[10]);
  uint64_t v5 = (void *)v3[14];
  size_t v6 = (void *)v3[12];
  uint64_t v7 = (void *)v3[13];
  uint64_t v8 = v3[10];
  uint64_t v9 = v3[11];
  if (a2)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v9 + 8);
    v10(v7, v8);
    v10(v5, v8);
  }
  else
  {
    swift_beginAccess();
    Published.projectedValue.setter();
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v9 + 8))(v5, v8);
  }
  free(v5);
  free(v7);
  free(v6);
  free(v3);
}

uint64_t NearbyInvitationsController.approvalRequests.getter()
{
  return swift_retain();
}

uint64_t NearbyInvitationsController.approvalRequests.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_approvalRequests);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*NearbyInvitationsController.approvalRequests.modify())()
{
  return static NearbyGroupInterface.identity.modify;
}

BOOL static NearbyInvitationsController.Errors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void NearbyInvitationsController.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int NearbyInvitationsController.Errors.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance NearbyInvitationsController.Errors()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance NearbyInvitationsController.Errors()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance NearbyInvitationsController.Errors()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance NearbyInvitationsController.Errors()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t NearbyInvitationsController.groupTable.getter()
{
  return swift_retain();
}

uint64_t NearbyInvitationsController.__allocating_init(dataSource:queue:provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationsController.__allocating_init(dataSource:queue:provider:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized NearbyInvitationsController.__allocating_init(dataSource:queue:provider:));
}

uint64_t NearbyInvitationsController.init(dataSource:queue:provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationsController.__allocating_init(dataSource:queue:provider:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized NearbyInvitationsController.init(dataSource:queue:provider:));
}

uint64_t NearbyInvitationsController.__allocating_init(dataSource:queue:provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = a5(a1, a3, a4, v5, ObjectType, a2);
  swift_unknownObjectRelease();
  return v12;
}

uint64_t NearbyInvitationsController.createGroup(with:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return MEMORY[0x270FA2498](NearbyInvitationsController.createGroup(with:), 0, 0);
}

uint64_t NearbyInvitationsController.createGroup(with:)()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  uint64_t v3 = type metadata accessor for NearbyGroupConnectionInfo(0);
  *uint64_t v2 = v0;
  v2[1] = NearbyInvitationsController.createGroup(with:);
  return MEMORY[0x270FA2360](v0 + 16, 0, 0, 0xD000000000000012, 0x80000002573C2D30, partial apply for closure #1 in NearbyInvitationsController.createGroup(with:), v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NearbyInvitationsController.createGroup(with:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NearbyInvitationsController.createGroup(with:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in NearbyInvitationsController.createGroup(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v21[0] = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v8 - 8);
  uint64_t v23 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(void *)(a2 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = swift_allocObject();
  unint64_t v17 = (void *)v21[0];
  *(void *)(v16 + 16) = v21[0];
  *(void *)(v16 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v16 + v15, v14, v11);
  aBlock[4] = partial apply for closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_186;
  int64_t v18 = _Block_copy(aBlock);
  id v19 = v17;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v10, v7, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v23);
  return swift_release();
}

uint64_t closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v29 = v8;
  char v30 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.client);
  id v10 = a1;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v26 = a2;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v27 = a3;
    unint64_t v14 = (uint8_t *)v13;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v28 = v6;
    uint64_t v16 = (void *)v15;
    *(_DWORD *)unint64_t v14 = 138412290;
    id v31 = v10;
    id v17 = v10;
    a2 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v10;

    _os_log_impl(&dword_257351000, v11, v12, "NearbyInvitationsController received request to create group %@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    int64_t v18 = v16;
    uint64_t v6 = v28;
    MEMORY[0x25A2B6460](v18, -1, -1);
    id v19 = v14;
    a3 = v27;
    MEMORY[0x25A2B6460](v19, -1, -1);
  }
  else
  {
  }
  uint64_t v20 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v22 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v30, a3, v6);
  unint64_t v23 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v24 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v24 + v23, v22, v6);
  (*(void (**)(id, void *(*)(void *, void *), uint64_t, uint64_t, uint64_t))(v20 + 32))(v10, partial apply for closure #1 in closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:), v24, ObjectType, v20);
  return swift_release();
}

void *closure #1 in closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:)(void *result, id a2)
{
  if (result)
  {
    id v2 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
    return (void *)CheckedContinuation.resume(returning:)();
  }
  else if (a2)
  {
    id v3 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
    return (void *)CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NearbyInvitationsController.addObserver(_:)()
{
  swift_getObjectType();
  return specialized NearbyInvitationsController.addObserver(_:)();
}

uint64_t NearbyInvitationsController.removeObserver(_:)()
{
  return Lock.withLock<A>(_:)();
}

uint64_t NearbyInvitationsController.requestApproval(with:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsController.requestApproval(with:completion:)(a1, a2, a3, (uint64_t)&unk_270653D98, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.requestApproval(with:completion:), (uint64_t)&block_descriptor_0);
}

uint64_t closure #1 in NearbyInvitationsController.requestApproval(with:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  id v9 = a1;
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v21 = v13;
    *(_DWORD *)os_log_type_t v12 = 136315138;
    type metadata accessor for InvitationApprovalRequest();
    uint64_t v14 = a4;
    id v15 = v9;
    uint64_t v16 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v14;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v10, v11, "NearbyInvitationsController requestApproval with %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v13, -1, -1);
    MEMORY[0x25A2B6460](v12, -1, -1);
  }
  else
  {
  }
  uint64_t v18 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 40))(v9, a3, a4, ObjectType, v18);
}

uint64_t NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)(void *a1, void *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a2) + 0x80))();
  unint64_t v5 = v4;
  NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)(a1, v3, v4);
  return outlined consume of Data._Representation(v3, v5);
}

uint64_t NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  os_log_type_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(void *)(v4 + 32);
  id v15 = (void *)swift_allocObject();
  v15[2] = a1;
  v15[3] = v4;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.approveConnectionRequest(_:localInvitation:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_24;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = a1;
  swift_retain();
  outlined copy of Data._Representation(a2, a3);
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v14, v11, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v21 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    type metadata accessor for NearbyAdvertisement(0);
    uint64_t v14 = a4;
    id v15 = v9;
    uint64_t v16 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v14;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v10, v11, "NearbyInvitationsController approving connection request of advertisement %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v13, -1, -1);
    MEMORY[0x25A2B6460](v12, -1, -1);
  }
  else
  {
  }
  uint64_t v18 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 176))(v9, a3, a4, ObjectType, v18);
}

uint64_t closure #1 in NearbyInvitationsController.denyConnectionRequest(_:localInvitation:)(void *a1, uint64_t a2)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v16 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    type metadata accessor for NearbyAdvertisement(0);
    id v10 = v5;
    uint64_t v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v6, v7, "NearbyInvitationsController approving connection request of advertisement %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v9, -1, -1);
    MEMORY[0x25A2B6460](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(id, uint64_t, uint64_t))(v13 + 184))(v5, ObjectType, v13);
}

uint64_t NearbyInvitationsController.approve(pendingMember:response:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(void *)(v5 + 32);
  unint64_t v17 = (void *)swift_allocObject();
  v17[2] = a1;
  uint64_t v17[3] = a2;
  v17[4] = v5;
  v17[5] = a3;
  v17[6] = a4;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_30;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = a1;
  id v20 = a2;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v16, v13, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v23);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  id v11 = a1;
  id v12 = a2;
  id v13 = v11;
  id v14 = v12;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v29 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    type metadata accessor for IncomingInvitationJoinRequest(0);
    uint64_t v28 = a5;
    id v19 = v13;
    uint64_t v20 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    type metadata accessor for InvitationJoinResponse();
    id v22 = v14;
    uint64_t v23 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a5 = v28;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v15, v16, "NearbyInvitationsController requested approval of pendingMember %s with response: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v18, -1, -1);
    MEMORY[0x25A2B6460](v17, -1, -1);
  }
  else
  {
  }
  uint64_t v25 = *(void *)(a3 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(id, id, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 48))(v13, v14, a4, a5, ObjectType, v25);
}

uint64_t NearbyInvitationsController.reject(pendingMember:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsController.requestApproval(with:completion:)(a1, a2, a3, (uint64_t)&unk_270653E88, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.reject(pendingMember:completion:), (uint64_t)&block_descriptor_36);
}

uint64_t NearbyInvitationsController.requestApproval(with:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a6;
  uint64_t v8 = v6;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  id v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v8 + 32);
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = a1;
  v18[3] = v8;
  v18[4] = a2;
  v18[5] = a3;
  aBlock[4] = a5;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v23;
  id v19 = _Block_copy(aBlock);
  id v20 = a1;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v25);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.reject(pendingMember:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    uint64_t v19 = a3;
    uint64_t v14 = a4;
    id v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v9;

    a4 = v14;
    a3 = v19;
    _os_log_impl(&dword_257351000, v10, v11, "NearbyInvitationsController rejecting pending member %@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v13, -1, -1);
    MEMORY[0x25A2B6460](v12, -1, -1);
  }
  else
  {
  }
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v9, a3, a4, ObjectType, v16);
}

uint64_t NearbyInvitationsController.generateNearbyInvitation(response:)(uint64_t a1, uint64_t a2)
{
  return NearbyInvitationsController.generateNearbyInvitation(response:)(a1, a2, (uint64_t)&unk_270653ED8, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.generateNearbyInvitation(response:), (uint64_t)&block_descriptor_42);
}

uint64_t closure #1 in NearbyInvitationsController.generateNearbyInvitation(response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl(&dword_257351000, v7, v8, "NearbyInvitationsController generateNearbyInvitiation", v9, 2u);
    MEMORY[0x25A2B6460](v9, -1, -1);
  }

  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 64))(*(void *)(a1 + 40), a2, a3, ObjectType, v10);
}

uint64_t NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.client);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_257351000, v12, v13, "Utilization of deprecated SPI advertiseNearbyInvitation.", v14, 2u);
    MEMORY[0x25A2B6460](v14, -1, -1);
  }

  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v4;
  v16[5] = a1;
  v16[6] = a2;
  v16[7] = a3;
  swift_retain();
  id v17 = a1;
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:), (uint64_t)v16);
  return swift_release();
}

{
  return NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(a1, a2, a3, (uint64_t)&unk_270653F50, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:), (uint64_t)&block_descriptor_52);
}

uint64_t closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a6;
  v7[7] = a7;
  void v7[4] = a4;
  v7[5] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[8] = v8;
  v7[9] = *(void *)(v8 - 8);
  v7[10] = swift_task_alloc();
  v7[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:), 0, 0);
}

uint64_t closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)()
{
  uint64_t v3 = (uint64_t (*)(void))(*(void *)(**(void **)(*(void *)(v0 + 32)
                                                   + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_groupTable)
                                     + 160)
                         + **(int **)(**(void **)(*(void *)(v0 + 32)
                                                  + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_groupTable)
                                    + 160));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:);
  return v3();
}

{
  objc_super *v0;
  Class super_class;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  id receiver;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  id v13;
  id v14;
  Class v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  objc_class *v19;
  unsigned char *v20;
  uint64_t *v21;
  id v22;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(Class, char *, id);
  uint64_t v29;

  super_class = v0[2].super_class;
  uint64_t v28 = (void (*)(Class, char *, id))*((void *)v0[4].super_class + 2);
  v28(v0[5].super_class, (char *)super_class + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_identifier, v0[4].receiver);
  id v2 = *(void *)((char *)super_class + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName);
  uint64_t v3 = *(void *)((char *)super_class + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_displayName + 8);
  uint64_t v4 = *(void **)((char *)super_class + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata);
  uint64_t v5 = one-time initialization token for shared;
  swift_bridgeObjectRetain();
  uint64_t v6 = v4;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v8 = (uint64_t)v0[6].super_class;
  receiver = v0[7].receiver;
  uint64_t v9 = (uint64_t)v0[5].super_class;
  uint64_t v10 = static NearbyInvitationsController.shared;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>);
  swift_allocObject();
  swift_retain();
  uint64_t v11 = specialized NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(v9, v2, v3, v6, 0, 0xF000000000000000, v10, v8);
  swift_release();
  swift_release();

  if (!receiver)
  {
    os_log_type_t v13 = v0[5].receiver;
    uint64_t v14 = v0[4].receiver;
    uint64_t v15 = v0[4].super_class;
    uint64_t v26 = (uint64_t)v0[3].receiver;
    uint64_t v27 = (uint64_t)v0[3].super_class;
    uint64_t v25 = v13;
    uint64_t v16 = ((uint64_t (*)(id, uint64_t, id))v28)(v13, v11 + direct field offset for NearbyInvitation.id, v14);
    id v17 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 160))(v16);
    uint64_t v24 = v18;
    uint64_t v19 = (objc_class *)type metadata accessor for NearbyAdvertisementRequest();
    id v20 = objc_allocWithZone(v19);
    v28((Class)&v20[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier], (char *)v13, v14);
    unint64_t v21 = (uint64_t *)&v20[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
    *unint64_t v21 = v17;
    v21[1] = v24;
    v20[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = 2;
    *(_DWORD *)&v20[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = 1;
    v0[1].receiver = v20;
    v0[1].super_class = v19;
    uint64_t v22 = objc_msgSendSuper2(v0 + 1, sel_init);
    (*((void (**)(id, id))v15 + 1))(v25, v14);
    NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(v22, v26, v27);

    swift_release();
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0->super_class;
  return v12();
}

uint64_t closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[13] = a1;
  v3[14] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    return MEMORY[0x270FA2498](closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:), 0, 0);
  }
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of Invitation_HostConnectionInfo?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v19 = a4;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v13 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000026, 0x80000002573C2ED0, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_257351000, v9, v10, "%s %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v12, -1, -1);
    uint64_t v15 = v11;
    a4 = v19;
    MEMORY[0x25A2B6460](v15, -1, -1);
  }

  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 72))(a2, *(void *)(a1 + 40), a3, a4, ObjectType, v16);
}

uint64_t NearbyInvitationsController.advertiseNearbySessionEndpoint(params:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(a1, a2, a3, (uint64_t)&unk_270653FA0, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.advertiseNearbySessionEndpoint(params:response:), (uint64_t)&block_descriptor_58);
}

uint64_t NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  os_log_type_t v7 = v6;
  uint64_t v11 = *v7;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  id v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v7[4];
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = v7;
  v18[3] = a1;
  v18[4] = a2;
  v18[5] = a3;
  v18[6] = v11;
  aBlock[4] = v22;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v23;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  id v20 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v25);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.advertiseNearbySessionEndpoint(params:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v19 = a4;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v13 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000002573C1EB0, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_257351000, v9, v10, "%s %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v12, -1, -1);
    uint64_t v15 = v11;
    a4 = v19;
    MEMORY[0x25A2B6460](v15, -1, -1);
  }

  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 80))(a2, a3, a4, ObjectType, v16);
}

uint64_t NearbyInvitationsController.markInvitationUsed(_:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsController.requestApproval(with:completion:)(a1, a2, a3, (uint64_t)&unk_270653FF0, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.markInvitationUsed(_:response:), (uint64_t)&block_descriptor_64);
}

uint64_t closure #1 in NearbyInvitationsController.markInvitationUsed(_:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  uint64_t v9 = a1;
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v21 = a2;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v23 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v22 = a3;
    uint64_t v14 = a4;
    uint64_t v15 = *(void *)&v9[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym];
    unint64_t v16 = *(void *)&v9[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8];
    swift_bridgeObjectRetain();
    uint64_t v17 = v15;
    a2 = v21;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v14;
    a3 = v22;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v10, v11, "Requesting to mark pseudonym %s as used.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v13, -1, -1);
    MEMORY[0x25A2B6460](v12, -1, -1);
  }
  else
  {
  }
  uint64_t v18 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 104))(v9, a3, a4, ObjectType, v18);
}

uint64_t NearbyInvitationsController.assertAdvertisementPublic(_:rotations:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v26 = a2;
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  char v30 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v8 - 8);
  uint64_t v33 = v8;
  MEMORY[0x270FA5388](v8);
  os_log_type_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(v5 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18 + v15, v14, v11);
  *(void *)(v18 + v16) = v5;
  uint64_t v19 = v27;
  *(void *)(v18 + v17) = v26;
  uint64_t v20 = (void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = v28;
  void *v20 = v19;
  v20[1] = v21;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.assertAdvertisementPublic(_:rotations:response:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_70;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v24 = v30;
  uint64_t v23 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v10, v24, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v23);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.assertAdvertisementPublic(_:rotations:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v30 = a4;
    unint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v31 = a5;
    uint64_t v19 = v18;
    uint64_t v34 = v18;
    uint64_t v28 = a1;
    uint64_t v29 = a3;
    *(_DWORD *)unint64_t v17 = 136315138;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v34);
    a1 = v28;
    a3 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    _os_log_impl(&dword_257351000, v14, v15, "Requesting to assert invitation %s as public.", v17, 0xCu);
    swift_arrayDestroy();
    uint64_t v22 = v19;
    a5 = v31;
    MEMORY[0x25A2B6460](v22, -1, -1);
    uint64_t v23 = v17;
    a4 = v30;
    MEMORY[0x25A2B6460](v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  uint64_t v24 = *(void *)(v32 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 112))(a1, a3, a4, a5, ObjectType, v24);
}

uint64_t NearbyInvitationsController.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v29 = a2;
  uint64_t v33 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v36 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v32 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v6 - 8);
  uint64_t v35 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v30 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v31 = *(void *)(v2 + 32);
  os_log_type_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15((char *)&v28 - v13, v29, v8);
  v15(v12, a1, v8);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 16) & ~v16;
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = (v16 + v18 + 8) & ~v16;
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v20 + v17;
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v22(v21, v14, v8);
  *(void *)(v20 + v18) = v3;
  v22(v20 + v19, v12, v8);
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.releaseAdvertisementPublicAssertion(_:assertionIdentifier:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_76;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v24 = v30;
  static DispatchQoS.unspecified.getter();
  uint64_t v37 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v26 = v32;
  uint64_t v25 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v24, v26, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v25);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v35);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v23 = a2;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v27 = v15;
    uint64_t v24 = a1;
    uint64_t v25 = a3;
    *(_DWORD *)uint64_t v14 = 136315138;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v27);
    a1 = v24;
    a3 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl(&dword_257351000, v11, v12, "Request to release assertion identifier: %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v15, -1, -1);
    unint64_t v18 = v14;
    a2 = v23;
    MEMORY[0x25A2B6460](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  uint64_t v19 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 120))(a3, a1, ObjectType, v19);
}

uint64_t NearbyInvitationsController.releaseInvitation(_:response:)(void *a1, uint64_t a2, uint64_t a3)
{
  return NearbyInvitationsController.requestApproval(with:completion:)(a1, a2, a3, (uint64_t)&unk_2706540E0, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.releaseInvitation(_:response:), (uint64_t)&block_descriptor_82);
}

uint64_t closure #1 in NearbyInvitationsController.releaseInvitation(_:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  uint64_t v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v21 = a2;
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v23 = v13;
    *(_DWORD *)os_log_type_t v12 = 136315138;
    uint64_t v22 = a3;
    uint64_t v14 = a4;
    uint64_t v15 = *(void *)&v9[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym];
    unint64_t v16 = *(void *)&v9[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8];
    swift_bridgeObjectRetain();
    uint64_t v17 = v15;
    a2 = v21;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v14;
    a3 = v22;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v10, v11, "Requesting to release invitation from pseudonym %s.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v13, -1, -1);
    MEMORY[0x25A2B6460](v12, -1, -1);
  }
  else
  {
  }
  uint64_t v18 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 128))(v9, a3, a4, ObjectType, v18);
}

uint64_t NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_257351000, v7, v8, "Utilization of deprecated SPI stopAdvertisingNearbyInvitation.", v9, 2u);
    MEMORY[0x25A2B6460](v9, -1, -1);
  }

  uint64_t v10 = a1 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_identifier;
  return NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:)(v10, a2, a3);
}

{
  void *v3;
  void *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void aBlock[6];

  uint64_t v4 = v3;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v24 = *v3;
  uint64_t v28 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v11 = type metadata accessor for UUID();
  os_log_type_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v4[4];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  uint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v4;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v15, v14, v11);
  uint64_t v18 = (void *)(v17 + v16);
  uint64_t v19 = v26;
  *uint64_t v18 = v25;
  v18[1] = v19;
  *(void *)(v17 + ((v16 + 23) & 0xFFFFFFFFFFFFFFF8)) = v24;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_88;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v21 = v28;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v10, v7, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v21);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v19 = a4;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v13 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x80000002573C1E80, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_257351000, v9, v10, "%s %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v12, -1, -1);
    uint64_t v15 = v11;
    a4 = v19;
    MEMORY[0x25A2B6460](v15, -1, -1);
  }

  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 88))(a2, a3, a4, ObjectType, v16);
}

uint64_t NearbyInvitationsController.stopAdvertisingNearbySessionEndpoint(response:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  os_log_type_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = v3[4];
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = v6;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.stopAdvertisingNearbySessionEndpoint(response:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_94;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18[1] = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.stopAdvertisingNearbySessionEndpoint(response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000002573C1E50, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_257351000, v7, v8, "%s %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v10, -1, -1);
    MEMORY[0x25A2B6460](v9, -1, -1);
  }

  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 96))(a2, a3, ObjectType, v13);
}

uint64_t NearbyInvitationsController.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  os_log_type_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v28 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)(v3 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v4;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v16, v15, v12);
  uint64_t v19 = (void *)(v18 + v17);
  uint64_t v20 = v25;
  *uint64_t v19 = v24;
  v19[1] = v20;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.scanNearbyInvitations(scannerID:response:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_100;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v11, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_257351000, v9, v10, "NearbyInvitationsController scanNearbyInvitations", v11, 2u);
    MEMORY[0x25A2B6460](v11, -1, -1);
  }

  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 136))(a2, a3, a4, ObjectType, v12);
}

uint64_t NearbyInvitationsController.scanNearbyEndpoints(params:scannerID:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v29 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v10 - 8);
  uint64_t v31 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v13);
  unint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(v5 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v5;
  *(void *)(v19 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v19 + v17, v16, v13);
  uint64_t v20 = (void *)(v19 + v18);
  uint64_t v21 = v27;
  void *v20 = v26;
  v20[1] = v21;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.scanNearbyEndpoints(params:scannerID:response:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_106;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  id v23 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v24 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v12, v9, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v24);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.scanNearbyEndpoints(params:scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_257351000, v11, v12, "NearbyInvitationsController scan nearby endpoints", v13, 2u);
    MEMORY[0x25A2B6460](v13, -1, -1);
  }

  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 144))(a2, a3, a4, a5, ObjectType, v14);
}

uint64_t NearbyInvitationsController.stopScanningNearbyInvitations(response:)(uint64_t a1, uint64_t a2)
{
  return NearbyInvitationsController.generateNearbyInvitation(response:)(a1, a2, (uint64_t)&unk_270654270, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.stopScanningNearbyInvitations(response:), (uint64_t)&block_descriptor_112);
}

uint64_t NearbyInvitationsController.generateNearbyInvitation(response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v20[0] = a5;
  uint64_t v7 = v5;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  unint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)(v7 + 32);
  unint64_t v17 = (void *)swift_allocObject();
  v17[2] = v7;
  uint64_t v17[3] = a1;
  v17[4] = a2;
  aBlock[4] = a4;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v20[0];
  unint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v16, v13, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v21);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.stopScanningNearbyInvitations(response:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_257351000, v7, v8, "NearbyInvitationsController stopScanningNearbyInvitations", v9, 2u);
    MEMORY[0x25A2B6460](v9, -1, -1);
  }

  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 152))(*(void *)(a1 + 40), a2, a3, ObjectType, v10);
}

uint64_t NearbyInvitationsController.requestConnection(with:localInvitation:response:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.client);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_257351000, v9, v10, "Utilization of deprecated SPI requestConnection.", v11, 2u);
    MEMORY[0x25A2B6460](v11, -1, -1);
  }

  uint64_t v12 = *(void **)(a2 + OBJC_IVAR____TtC14NearbySessions23NearbySessionInvitation_metadata);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  swift_retain();
  NearbyInvitationsController.requestConnection(with:localInvitation:response:)(a1, v12, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.requestConnection(with:localInvitation:response:), v13);
  return swift_release();
}

uint64_t NearbyInvitationsController.requestConnection(with:localInvitation:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationsController.requestConnection(with:localInvitation:response:)(a1, a2, a3, a4, (uint64_t)&unk_2706542E8, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.requestConnection(with:localInvitation:response:), (uint64_t)&block_descriptor_121);
}

uint64_t closure #1 in NearbyInvitationsController.requestConnection(with:localInvitation:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_257351000, v11, v12, "NearbyInvitationsController requestConnection", v13, 2u);
    MEMORY[0x25A2B6460](v13, -1, -1);
  }

  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 160))(a2, a3, a4, a5, ObjectType, v14);
}

uint64_t NearbyInvitationsController.requestEndpointConnection(with:pseudonym:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return NearbyInvitationsController.requestConnection(with:localInvitation:response:)(a1, a2, a3, a4, (uint64_t)&unk_270654338, (uint64_t)partial apply for closure #1 in NearbyInvitationsController.requestEndpointConnection(with:pseudonym:response:), (uint64_t)&block_descriptor_127);
}

uint64_t NearbyInvitationsController.requestConnection(with:localInvitation:response:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v25[0] = a7;
  uint64_t v9 = v7;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v17 - 8);
  uint64_t v27 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(void *)(v9 + 32);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = v9;
  uint64_t v20[3] = a1;
  v20[4] = a2;
  v20[5] = a3;
  v20[6] = a4;
  aBlock[4] = a6;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = v25[0];
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  id v22 = a1;
  id v23 = a2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v19, v16, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v27);
  return swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.requestEndpointConnection(with:pseudonym:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_257351000, v11, v12, "NearbyInvitationsController requestEndpointConnection", v13, 2u);
    MEMORY[0x25A2B6460](v13, -1, -1);
  }

  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 168))(a2, a3, a4, a5, ObjectType, v14);
}

void NearbyInvitationsController.requestJoiningSession(with:response:)(uint64_t a1, void (*a2)(void))
{
  lazy protocol witness table accessor for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors();
  uint64_t v3 = (void *)swift_allocError();
  *uint64_t v4 = 2;
  a2();
}

uint64_t NearbyInvitationsController.deinit()
{
  swift_unknownObjectRelease();

  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController__groups;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  return v0;
}

uint64_t NearbyInvitationsController.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  swift_release();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController__groups;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  uint64_t v3 = *((unsigned int *)*v0 + 12);
  uint64_t v4 = *((unsigned __int16 *)*v0 + 26);
  return MEMORY[0x270FA0228](v0, v3, v4);
}

Swift::Void __swiftcall NearbyInvitationsController.didReceiveUpdatedGroups(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v32 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v29 = v2;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v30 = v7;
    uint64_t v15 = v14;
    aBlock[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    v28[1] = v13 + 4;
    uint64_t v16 = type metadata accessor for NearbyGroupConnectionInfo(0);
    uint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v18 = MEMORY[0x25A2B5750](v17, v16);
    uint64_t v31 = v8;
    uint64_t v19 = v5;
    uint64_t v20 = v4;
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v23 = v18;
    uint64_t v2 = v29;
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v4 = v20;
    uint64_t v5 = v19;
    uint64_t v8 = v31;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v11, v12, "NearbyInvitationsController: didReceiveUpdatedGroups %s", v13, 0xCu);
    swift_arrayDestroy();
    uint64_t v24 = v15;
    uint64_t v7 = v30;
    MEMORY[0x25A2B6460](v24, -1, -1);
    MEMORY[0x25A2B6460](v13, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = (Swift::OpaquePointer *)swift_allocObject();
  v25[2]._rawValue = v2;
  v25[3]._rawValue = a1._rawValue;
  aBlock[4] = (uint64_t)partial apply for closure #1 in NearbyInvitationsController.didReceiveUpdatedGroups(_:);
  aBlock[5] = (uint64_t)v25;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_133;
  uint64_t v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v27 = v32;
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v27, v7, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v8);
  swift_release();
}

uint64_t closure #1 in NearbyInvitationsController.didReceiveUpdatedGroups(_:)(char *a1, id *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v29 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v34 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  if ((unint64_t)a2 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_3;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v35 = v6;
    swift_retain();
    return static Published.subscript.setter();
  }
  uint64_t v7 = *(void *)(((unint64_t)a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_27;
  }
LABEL_3:
  uint64_t v28 = a1;
  unint64_t v32 = (unint64_t)a2 & 0xC000000000000001;
  uint64_t v33 = (void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  uint64_t v30 = a2;
  uint64_t v31 = (void (**)(uint64_t, uint64_t))(v29 + 8);
  uint64_t v8 = 4;
  while (1)
  {
    uint64_t v10 = v8 - 4;
    if (v32)
    {
      uint64_t v11 = (char *)MEMORY[0x25A2B5B10](v8 - 4, a2);
      uint64_t v12 = v8 - 3;
      if (__OFADD__(v10, 1)) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v11 = (char *)a2[v8];
      uint64_t v12 = v8 - 3;
      if (__OFADD__(v10, 1))
      {
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    a1 = v11;
    uint64_t v13 = v34;
    a2 = (id *)*v33;
    uint64_t v14 = v4;
    (*v33)(v34, (uint64_t)&v11[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id], v4);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v35 = v6;
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    uint64_t v18 = v6[2];
    BOOL v19 = (v16 & 1) == 0;
    uint64_t v20 = v18 + v19;
    if (__OFADD__(v18, v19)) {
      goto LABEL_24;
    }
    char v21 = v16;
    if (v6[3] < v20) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v6 = v35;
      if (v16) {
        goto LABEL_4;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v6 = v35;
      if (v21)
      {
LABEL_4:
        uint64_t v9 = v6[7];

        *(void *)(v9 + 8 * v17) = a1;
        uint64_t v4 = v14;
        goto LABEL_5;
      }
    }
LABEL_18:
    v6[(v17 >> 6) + 8] |= 1 << v17;
    uint64_t v4 = v14;
    ((void (*)(unint64_t, uint64_t, uint64_t))a2)(v6[6] + *(void *)(v29 + 72) * v17, v34, v14);
    *(void *)(v6[7] + 8 * v17) = a1;
    uint64_t v24 = v6[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_25;
    }
    v6[2] = v26;
LABEL_5:
    swift_bridgeObjectRelease();
    (*v31)(v34, v4);
    ++v8;
    a2 = v30;
    if (v12 == v7) {
      goto LABEL_27;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
  if ((v21 & 1) == (v23 & 1))
  {
    unint64_t v17 = v22;
    uint64_t v6 = v35;
    if (v21) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t NearbyInvitationsController.didReceiveInvitationApprovalRequest(request:)(void *a1)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.client);
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    id v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v3;

    _os_log_impl(&dword_257351000, v4, v5, "NearbyInvitationsController didReceiveInvitationApprovalRequest %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v7, -1, -1);
    MEMORY[0x25A2B6460](v6, -1, -1);
  }
  else
  {
  }
  swift_beginAccess();
  swift_retain();
  PassthroughSubject.send(_:)();
  return swift_release();
}

void NearbyInvitationsController.didDiscoverNearbyAdvertisement(advertisement:)(void *a1)
{
}

uint64_t NearbyInvitationsController.notifyObservers(with:)()
{
  uint64_t result = Lock.withLock<A>(_:)();
  __break(1u);
  return result;
}

void NearbyInvitationsController.didLoseNearbyAdvertisement(advertisement:)(void *a1)
{
}

void NearbyInvitationsController.didDiscoverNearbyAdvertisement(advertisement:)(void *a1, const char *a2)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)id v8 = 138412290;
    id v9 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v5;

    _os_log_impl(&dword_257351000, v6, v7, a2, v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v11, -1, -1);
    MEMORY[0x25A2B6460](v8, -1, -1);
  }
  else
  {
  }
  id v10 = v5;
  specialized NearbyInvitationsController.notifyObservers(with:)();
}

void NearbyInvitationsController.didReceiveConnectionRequest(advertisement:)(void *a1)
{
}

uint64_t NearbyInvitationsController.didDiscoverNearbySessionInvitation(id:invitation:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.client);
  outlined copy of Data._Representation(a3, a4);
  outlined copy of Data._Representation(a3, a4);
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = v10;
    *(_DWORD *)id v9 = 136315138;
    outlined copy of Data._Representation(a3, a4);
    uint64_t v11 = Data.description.getter();
    unint64_t v13 = v12;
    outlined consume of Data._Representation(a3, a4);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data._Representation(a3, a4);
    _os_log_impl(&dword_257351000, v7, v8, "NearbyInvitationsController didDiscoverNearbySessionInvitation %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v10, -1, -1);
    MEMORY[0x25A2B6460](v9, -1, -1);
  }
  else
  {
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data._Representation(a3, a4);
  }

  outlined copy of Data._Representation(a3, a4);
  swift_bridgeObjectRetain();
  specialized NearbyInvitationsController.notifyObservers(with:)();
  outlined consume of Data._Representation(a3, a4);
  return swift_bridgeObjectRelease();
}

void closure #1 in NearbyInvitationsController.didDiscoverNearbySessionInvitation(id:invitation:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a1, sel_respondsToSelector_, sel_didDiscoverNearbySessionInvitationWithId_invitation_))
  {
    swift_unknownObjectRetain();
    uint64_t v14 = (void *)MEMORY[0x25A2B5660](a2, a3);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a1, sel_didDiscoverNearbySessionInvitationWithId_invitation_, v14, isa);
    swift_unknownObjectRelease();
  }
  char v16 = specialized static NearbyInvitationData.create(from:)(a4, a5);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID], v10);
  id v28 = *(id *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo];
  uint64_t v17 = UUID.uuidString.getter();
  uint64_t v26 = v18;
  uint64_t v27 = v17;
  uint64_t v19 = *(void *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
  uint64_t v20 = *(void *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName + 8];
  uint64_t v21 = *(void *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
  uint64_t v22 = *(void *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName + 8];
  uint64_t v24 = *(void *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo];
  unint64_t v23 = *(void *)&v16[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo + 8];
  objc_allocWithZone((Class)type metadata accessor for NearbySessionInvitation());
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v24, v23);
  id v25 = NearbySessionInvitation.init(identifier:activityType:metadata:sourceProviderID:sourceProviderName:displayName:handle:userInfo:)((uint64_t)v13, 1, (uint64_t)v28, v27, v26, v19, v20, v21, v22, v21, v22, v24, v23);
  if (objc_msgSend(a1, sel_respondsToSelector_, sel_didDiscoverNearbySessionInvitationWithInvitation_)) {
    objc_msgSend(a1, sel_didDiscoverNearbySessionInvitationWithInvitation_, v25);
  }
}

void NearbyInvitationsController.didDisconnect(client:)()
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.client);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_257351000, oslog, v1, "NearbyInvitationsController didDisconnect", v2, 2u);
    MEMORY[0x25A2B6460](v2, -1, -1);
  }
}

void NearbyInvitationsController.didReceiveSessionJoinResponse(response:)(void *a1)
{
}

uint64_t closure #1 in NearbyInvitationsController.notifyObservers(with:)(uint64_t *a1, uint64_t a2)
{
  id v3 = objc_msgSend(*(id *)(a2 + 56), sel_allObjects);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationsControllerObserver);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *a1 = v4;
  return swift_bridgeObjectRelease();
}

void protocol witness for NearbyInvitationServiceClientDelegate.didDisconnect(client:) in conformance NearbyInvitationsController()
{
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.client);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_257351000, oslog, v1, "NearbyInvitationsController didDisconnect", v2, 2u);
    MEMORY[0x25A2B6460](v2, -1, -1);
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Errors #1 in NearbyGroupTable.firstGroup()()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Errors #1 in NearbyGroupTable.firstGroup()()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Errors #1 in NearbyGroupTable.firstGroup()()
{
  return Hasher._finalize()();
}

uint64_t specialized closure #1 in NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(void *a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)MEMORY[0x263F8EED0];
    uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x88))();
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      uint64_t v8 = *(void *)(v5 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
      uint64_t v7 = *(void *)(v5 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8);
      swift_bridgeObjectRetain();

      uint64_t v9 = direct field offset for NearbyInvitation.invitationHostInfo;
      uint64_t v10 = (void *)(*(void *)(v3 + direct field offset for NearbyInvitation.invitationHostInfo)
                     + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
      if (v8 == *v10 && v7 == v10[1])
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0) {
          return swift_release();
        }
      }
      swift_weakInit();
      unint64_t v13 = *(void **)(v3 + v9);
      uint64_t v14 = *(void (**)(void *))((*v4 & *a1) + 0x90);
      uint64_t v15 = a1;
      swift_retain();
      id v16 = v13;
      v14(v13);

      v30[0] = v15;
      swift_weakAssign();
      swift_release();
      outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v30, (uint64_t)v32, &demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
      uint64_t v17 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v3 + 184))(v31);
      uint64_t v19 = v18;
      uint64_t v20 = *v18;
      Hasher.init(_seed:)();
      uint64_t v21 = (void *)v32[0];
      swift_bridgeObjectRetain();
      id v22 = v21;
      NSObject.hash(into:)();

      Swift::Int v23 = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v20 + 32);
      unint64_t v25 = v23 & ~v24;
      if ((*(void *)(v20 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25))
      {
        uint64_t v26 = ~v24;
        type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        while (1)
        {
          outlined init with copy of (UUID, Bool)(*(void *)(v20 + 48) + 16 * v25, (uint64_t)v30, &demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
          char v27 = static NSObject.== infix(_:_:)();
          outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v30, &demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
          if (v27) {
            break;
          }
          unint64_t v25 = (v25 + 1) & v26;
          if (((*(void *)(v20 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
            goto LABEL_14;
          }
        }
      }
      else
      {
LABEL_14:
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        outlined init with copy of (UUID, Bool)((uint64_t)v32, (uint64_t)v30, &demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
        uint64_t v29 = *v19;
        *uint64_t v19 = 0x8000000000000000;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v30, v25, isUniquelyReferenced_nonNull_native);
        *uint64_t v19 = v29;
      }
      swift_bridgeObjectRelease();
      outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v32, &demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
      v17(v31, 0);
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v44 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v44);
  uint64_t v45 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v41 = (char *)&v36 - v10;
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupTable.WeakNearbyGroup>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = result;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v39 = v42 + 32;
  uint64_t v40 = v42 + 16;
  uint64_t v15 = result + 64;
  uint64_t v38 = a4;
  uint64_t v16 = v44;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v43 = v14;
      unint64_t v18 = v17 | (v14 << 6);
    }
    else
    {
      uint64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v19 >= v37) {
        return v12;
      }
      unint64_t v20 = v36[v19];
      uint64_t v21 = v14 + 1;
      if (!v20)
      {
        uint64_t v21 = v14 + 2;
        if (v14 + 2 >= v37) {
          return v12;
        }
        unint64_t v20 = v36[v21];
        if (!v20)
        {
          uint64_t v21 = v14 + 3;
          if (v14 + 3 >= v37) {
            return v12;
          }
          unint64_t v20 = v36[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 4;
            if (v14 + 4 >= v37) {
              return v12;
            }
            unint64_t v20 = v36[v22];
            if (!v20)
            {
              while (1)
              {
                uint64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v21 >= v37) {
                  return v12;
                }
                unint64_t v20 = v36[v21];
                ++v22;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v21 = v14 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v20 - 1) & v20;
      uint64_t v43 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    uint64_t v24 = v41;
    uint64_t v23 = v42;
    uint64_t v25 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v41, *(void *)(a4 + 48) + v25 * v18, v16);
    outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v45, v24, v16);
    outlined init with take of NearbyGroupTable.WeakNearbyGroup();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    v26((char *)(*(void *)(v12 + 48) + v30 * v25), v45, v44);
    uint64_t result = outlined init with take of NearbyGroupTable.WeakNearbyGroup();
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v38;
    uint64_t v14 = v43;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v14;
    }
    uint64_t v12 = *(void *)(v11 + 48);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * v6, v13);
    outlined init with take of NearbyGroupTable.WeakNearbyGroup();
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *uint64_t v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x270FA5388](v4);
  char v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v34 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v35 = v13;
      unint64_t v32 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      BOOL v33 = v14;
      uint64_t v16 = v15;
      do
      {
        uint64_t v17 = v9;
        uint64_t v18 = v16;
        int64_t v19 = v11 * v16;
        v33(v8, *(void *)(a2 + 48) + v11 * v16, v4);
        _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v32)(v8, v4);
        unint64_t v21 = v20 & v12;
        if (a1 >= (uint64_t)v34)
        {
          if (v21 >= v34 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v16 = v18;
            if (a1 * v18 < v19
              || *(void *)(a2 + 48) + a1 * v18 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a1 * v18 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v24 = *(void *)(a2 + 56);
            unint64_t result = v24 + 8 * a1;
            uint64_t v9 = v17;
            if (a1 < (uint64_t)v11 || result >= v24 + 8 * v11 + 8)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
            }
            else
            {
              BOOL v25 = a1 == v11;
              a1 = v11;
              if (!v25)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v34 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v17;
        uint64_t v16 = v18;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    uint64_t v26 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v26 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << a1) - 1;
  }
  *uint64_t v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      unint64_t v14 = v22;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  return outlined assign with take of NearbyGroupTable.WeakNearbyGroup();
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  uint64_t v7 = *(void *)(a4 + 48);
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, a2, v8);
  uint64_t result = outlined init with take of NearbyGroupTable.WeakNearbyGroup();
  uint64_t v10 = *(void *)(a4 + 16);
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    *(void *)(a4 + 16) = v12;
  }
  return result;
}

void *specialized NearbyInvitationsController.init(dataSource:queue:provider:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  BOOL v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Lock();
  swift_allocObject();
  a4[6] = Lock.init()();
  a4[7] = objc_msgSend(self, sel_weakObjectsHashTable);
  uint64_t v17 = (char *)a4 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController__groups;
  uint64_t v29 = MEMORY[0x263F8EE80];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : NearbyGroupConnectionInfo]);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v16, v13);
  uint64_t v18 = OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_approvalRequests;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<IncomingInvitationJoinRequest, Never>);
  swift_allocObject();
  *(void *)((char *)a4 + v18) = PassthroughSubject.init()();
  uint64_t v19 = OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_groupTable;
  type metadata accessor for NearbyGroupTable(0);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v12, 1, 1, v21);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8F580], v6);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  uint64_t v22 = OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_contents;
  *(void *)(v20 + v22) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)((char *)a4 + v19) = v20;
  a4[2] = a1;
  a4[3] = &protocol witness table for NearbyInvitationServiceClient;
  uint64_t v23 = v28;
  a4[4] = v27;
  a4[5] = v23;
  uint64_t v24 = a1 + direct field offset for NearbyInvitationServiceClient.delegate;
  swift_beginAccess();
  *(void *)(v24 + 8) = &protocol witness table for NearbyInvitationsController;
  swift_unknownObjectWeakAssign();
  return a4;
}

uint64_t specialized NearbyInvitationsController.addObserver(_:)()
{
  return Lock.withLock<A>(_:)();
}

uint64_t specialized NearbyInvitationsController.notifyObservers(with:)()
{
  uint64_t result = Lock.withLock<A>(_:)();
  __break(1u);
  return result;
}

{
  uint64_t result;

  uint64_t result = Lock.withLock<A>(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a2;
  uint64_t v28 = a4;
  uint64_t v23 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v24 = 0;
  uint64_t v25 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v6 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v26) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v23, v22, v24, a3);
    }
    unint64_t v19 = *(void *)(v25 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v26) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v23, v22, v24, a3);
      }
      unint64_t v19 = *(void *)(v25 + 8 * v10);
      if (!v19)
      {
        int64_t v10 = v18 + 2;
        if (v18 + 2 >= v26) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v23, v22, v24, a3);
        }
        unint64_t v19 = *(void *)(v25 + 8 * v10);
        if (!v19) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, *(void *)(a3 + 48) + *(void *)(v6 + 72) * v16, v5);
    outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
    char v17 = closure #1 in closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)((uint64_t)v9, (uint64_t)v29, v28);
    outlined destroy of NearbyGroupTable.WeakNearbyGroup((uint64_t)v29);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if (v17)
    {
      *(unint64_t *)((char *)v23 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v23, v22, v24, a3);
      }
    }
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v26) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v23, v22, v24, a3);
  }
  unint64_t v19 = *(void *)(v25 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v26) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v23, v22, v24, a3);
    }
    unint64_t v19 = *(void *)(v25 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2)
{
  v13[1] = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x25A2B6460](v11, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(char *, char *))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupTable.WeakNearbyGroup));
  MEMORY[0x270FA5388](v4);
  unsigned int v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v22 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v23 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v23) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v22 + 8 * v18);
    ++v12;
    if (!v19)
    {
      int64_t v12 = v18 + 1;
      if (v18 + 1 >= v23) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v22 + 8 * v12);
      if (!v19)
      {
        int64_t v12 = v18 + 2;
        if (v18 + 2 >= v23) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v22 + 8 * v12);
        if (!v19)
        {
          int64_t v12 = v18 + 3;
          if (v18 + 3 >= v23) {
            return swift_release();
          }
          unint64_t v19 = *(void *)(v22 + 8 * v12);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v6, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v16);
    char v17 = &v6[*(int *)(v4 + 48)];
    outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
    a2(v6, v17);
    uint64_t result = outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v6, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupTable.WeakNearbyGroup));
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v23) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v22 + 8 * v20);
  if (v19)
  {
    int64_t v12 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v12 >= v23) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v22 + 8 * v12);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *specialized NearbyInvitationsController.__allocating_init(provider:)(uint64_t a1)
{
  uint64_t v22 = a1;
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v20 = *(void *)(v1 - 8);
  uint64_t v21 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  unint64_t v23 = 0;
  unint64_t v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  unint64_t v23 = 0xD000000000000026;
  unint64_t v24 = 0x80000002573C2F00;
  UUID.init()();
  uint64_t v10 = UUID.uuidString.getter();
  int64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  unint64_t v23 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v20 + 104))(v3, *MEMORY[0x263F8F130], v21);
  uint64_t v14 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v15 = (void *)static NearbyInvitationServiceClient.shared;
  type metadata accessor for NearbyInvitationsController(0);
  uint64_t v16 = (void *)swift_allocObject();
  id v17 = v15;
  return specialized NearbyInvitationsController.init(dataSource:queue:provider:)((uint64_t)v17, v14, v22, v16);
}

void *specialized NearbyInvitationsController.init(dataSource:queue:provider:)(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a3;
  uint64_t v35 = a5;
  BOOL v33 = a2;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v9 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  int64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Lock();
  swift_allocObject();
  a4[6] = Lock.init()();
  a4[7] = objc_msgSend(self, sel_weakObjectsHashTable);
  uint64_t v19 = (char *)a4 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController__groups;
  uint64_t v36 = MEMORY[0x263F8EE80];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : NearbyGroupConnectionInfo]);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v18, v15);
  uint64_t v20 = OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_approvalRequests;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<IncomingInvitationJoinRequest, Never>);
  swift_allocObject();
  *(void *)((char *)a4 + v20) = PassthroughSubject.init()();
  uint64_t v21 = OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_groupTable;
  type metadata accessor for NearbyGroupTable(0);
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v14, 1, 1, v23);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F8F580], v32);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  uint64_t v24 = OBJC_IVAR____TtC14NearbySessions16NearbyGroupTable_contents;
  *(void *)(v22 + v24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)((char *)a4 + v21) = v22;
  a4[2] = a1;
  a4[3] = a6;
  int64_t v26 = v33;
  uint64_t v25 = v34;
  a4[4] = v33;
  a4[5] = v25;
  uint64_t v27 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(a6 + 16);
  swift_unknownObjectRetain_n();
  id v28 = v26;
  uint64_t v29 = swift_retain();
  v27(v29, &protocol witness table for NearbyInvitationsController, v35, a6);
  swift_unknownObjectRelease();

  return a4;
}

void *specialized NearbyInvitationsController.__allocating_init(dataSource:queue:provider:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (void *)swift_allocObject();
  return specialized NearbyInvitationsController.init(dataSource:queue:provider:)(a1, a2, a3, v11, a5, a6);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.createGroup(with:)(uint64_t a1)
{
  return closure #1 in NearbyInvitationsController.createGroup(with:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t type metadata accessor for NearbyGroupConnectionInfo(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyGroupConnectionInfo);
}

id partial apply for closure #1 in NearbyInvitationsController.removeObserver(_:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.removeObserver(_:)((SEL *)&selRef_removeObject_);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.requestApproval(with:completion:)()
{
  return closure #1 in NearbyInvitationsController.requestApproval(with:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_2573771A0()
{
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)()
{
  return closure #1 in NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t specialized NearbyInvitationsController.denyConnectionRequest(_:localInvitation:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)(v1 + 32);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = v1;
  aBlock[4] = partial apply for closure #1 in NearbyInvitationsController.denyConnectionRequest(_:localInvitation:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_180;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_2573774B8()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)((uint64_t (*)(void, void, void, void, void))closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:));
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.reject(pendingMember:completion:)()
{
  return closure #1 in NearbyInvitationsController.reject(pendingMember:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_257377530()
{
  return objectdestroy_38Tm(40);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.generateNearbyInvitation(response:)()
{
  return closure #1 in NearbyInvitationsController.generateNearbyInvitation(response:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_257377544()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)((uint64_t (*)(void, void, void, void, void))closure #1 in NearbyInvitationsController.advertiseNearbyInvitation(_:response:));
}

uint64_t objectdestroy_48Tm()
{
  swift_release();

  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.advertiseNearbySessionEndpoint(params:response:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)((uint64_t (*)(void, void, void, void, void))closure #1 in NearbyInvitationsController.advertiseNearbySessionEndpoint(params:response:));
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.markInvitationUsed(_:response:)()
{
  return closure #1 in NearbyInvitationsController.markInvitationUsed(_:response:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_2573776F8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.assertAdvertisementPublic(_:rotations:response:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v2;
  uint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = (uint64_t *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  return closure #1 in NearbyInvitationsController.assertAdvertisementPublic(_:rotations:response:)(v5, v6, v7, v9, v10);
}

uint64_t sub_257377868()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v7 = v4 | 7;
  unint64_t v8 = (v4 + ((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v4;
  uint64_t v9 = v8 + v6;
  v3(v0 + v5, v1);
  swift_release();
  v3(v0 + v8, v1);
  return MEMORY[0x270FA0238](v0, v9, v7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + v4);
  return closure #1 in NearbyInvitationsController.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(v0 + v3, v5, v0 + ((v2 + v4 + 8) & ~v2));
}

uint64_t objectdestroy_17Tm()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.releaseInvitation(_:response:)()
{
  return closure #1 in NearbyInvitationsController.releaseInvitation(_:response:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_257377A34()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = *(void *)(v0 + v3 + 8);
  return closure #1 in NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:)(v4, v0 + v2, v5, v6);
}

uint64_t sub_257377BC8()
{
  return objectdestroy_38Tm(48);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.stopAdvertisingNearbySessionEndpoint(response:)()
{
  return closure #1 in NearbyInvitationsController.stopAdvertisingNearbySessionEndpoint(response:)(v0[2], v0[3], v0[4]);
}

uint64_t objectdestroy_4Tm()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.scanNearbyInvitations(scannerID:response:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + v2;
  uint64_t v5 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  return closure #1 in NearbyInvitationsController.scanNearbyInvitations(scannerID:response:)(v3, v4, v6, v7);
}

uint64_t sub_257377D60()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.scanNearbyEndpoints(params:scannerID:response:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = v0 + v2;
  unint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  return closure #1 in NearbyInvitationsController.scanNearbyEndpoints(params:scannerID:response:)(v3, v4, v5, v7, v8);
}

uint64_t sub_257377EE8()
{
  return objectdestroy_38Tm(40);
}

uint64_t objectdestroy_38Tm(uint64_t a1)
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v1, a1, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.stopScanningNearbyInvitations(response:)()
{
  return closure #1 in NearbyInvitationsController.stopScanningNearbyInvitations(response:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_257377F48()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.requestConnection(with:localInvitation:response:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.requestConnection(with:localInvitation:response:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)(closure #1 in NearbyInvitationsController.requestConnection(with:localInvitation:response:));
}

uint64_t objectdestroy_117Tm()
{
  swift_release();

  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.requestEndpointConnection(with:pseudonym:response:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)(closure #1 in NearbyInvitationsController.requestEndpointConnection(with:pseudonym:response:));
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.approve(pendingMember:response:completion:)(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationsController.Errors and conformance NearbyInvitationsController.Errors);
  }
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.didReceiveUpdatedGroups(_:)()
{
  return closure #1 in NearbyInvitationsController.didReceiveUpdatedGroups(_:)(*(char **)(v0 + 16), *(id **)(v0 + 24));
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.notifyObservers(with:)()
{
  return closure #1 in NearbyInvitationsController.notifyObservers(with:)(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_257378160(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))();
}

uint64_t sub_2573781A8@<X0>(uint64_t *a1@<X8>)
{
  outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t result = outlined destroy of NearbyGroupTable.WeakNearbyGroup((uint64_t)v4);
  *a1 = Strong;
  return result;
}

uint64_t sub_2573781F0()
{
  return swift_weakAssign();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.generateNearbyInvitation(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.advertiseNearbyInvitation(_:provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.scanNearbyEndpoints(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.stopScanningNearbyInvitations(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.approveConnectionRequest(_:localInvitation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.denyConnectionRequest(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.requestConnection(with:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of NearbyInvitationsControllerDataSource.requestEndpointConnection(with:pseudonym:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

uint64_t ObjC metadata update function for NearbyGroupCreationRequest()
{
  return type metadata accessor for NearbyGroupCreationRequest(0);
}

uint64_t type metadata accessor for NearbyGroupCreationRequest(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyGroupCreationRequest);
}

uint64_t type metadata completion function for NearbyGroupCreationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for NearbyGroupCreationRequest(a1, a2, a3, MEMORY[0x263F07508]);
}

uint64_t method lookup function for NearbyGroupCreationRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyGroupCreationRequest);
}

uint64_t dispatch thunk of NearbyGroupCreationRequest.__allocating_init(id:members:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of NearbyGroupCreationRequest.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t ObjC metadata update function for NearbyGroupConnectionInfo()
{
  return type metadata accessor for NearbyGroupConnectionInfo(0);
}

uint64_t type metadata completion function for NearbyGroupConnectionInfo()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for NearbyGroupConnectionInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyGroupConnectionInfo);
}

uint64_t dispatch thunk of NearbyGroupConnectionInfo.__allocating_init(id:endpoint:localMember:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NearbyGroupConnectionInfo.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t ObjC metadata update function for NearbyGroupTable()
{
  return type metadata accessor for NearbyGroupTable(0);
}

uint64_t type metadata accessor for NearbyGroupTable(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyGroupTable);
}

uint64_t type metadata completion function for NearbyGroupTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for NearbyGroupCreationRequest(a1, a2, a3, MEMORY[0x263F33FF8]);
}

uint64_t type metadata completion function for NearbyGroupCreationRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for NearbyGroupTable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyGroupTable);
}

uint64_t dispatch thunk of NearbyGroupTable.serialQueue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of NearbyGroupTable.serialQueue.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of NearbyGroupTable.serialQueue.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of NearbyGroupTable.cleanUpIfNotPresent(_:)(uint64_t a1)
{
  unint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 144) + **(int **)(*(void *)v1 + 144));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  return v6(a1);
}

uint64_t dispatch thunk of NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 152)
                                                          + **(int **)(*(void *)v3 + 152));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  void *v8 = v4;
  v8[1] = dispatch thunk of NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of NearbyGroupTable.firstGroup()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 160) + **(int **)(*(void *)v0 + 160));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = dispatch thunk of NearbyGroupTable.firstGroup();
  return v4();
}

uint64_t dispatch thunk of NearbyGroupTable.firstGroup()(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t dispatch thunk of NearbyGroupTable.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t initializeBufferWithCopyOfBuffer for NearbyGroupTable.WeakNearbyGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for NearbyGroupTable.WeakNearbyGroup(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NearbyGroupTable.WeakNearbyGroup(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroupTable.WeakNearbyGroup()
{
  return &type metadata for NearbyGroupTable.WeakNearbyGroup;
}

uint64_t ObjC metadata update function for NearbyInvitationsController()
{
  return type metadata accessor for NearbyInvitationsController(0);
}

uint64_t type metadata accessor for NearbyInvitationsController(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationsController);
}

void type metadata completion function for NearbyInvitationsController()
{
  type metadata accessor for Published<[UUID : NearbyGroupConnectionInfo]>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for NearbyInvitationsController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyInvitationsController);
}

uint64_t dispatch thunk of NearbyInvitationsController.__allocating_init(dataSource:queue:provider:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t getEnumTagSinglePayload for NearbyInvitationsController.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NearbyInvitationsController.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x257378D2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationsController.Errors()
{
  return &type metadata for NearbyInvitationsController.Errors;
}

uint64_t outlined init with copy of NearbyGroupTable.WeakNearbyGroup()
{
  return swift_weakCopyInit();
}

uint64_t outlined destroy of NearbyGroupTable.WeakNearbyGroup(uint64_t a1)
{
  return a1;
}

uint64_t specialized NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  unint64_t v36 = a6;
  uint64_t v37 = a8;
  uint64_t v34 = a3;
  uint64_t v35 = a5;
  id v32 = a4;
  uint64_t v33 = a2;
  uint64_t v38 = a1;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyInvitation<NearbyGroup>.PendingMember>>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v9 + *(void *)(*(void *)v9 + 144);
  uint64_t v18 = MEMORY[0x263F8EE88];
  uint64_t v40 = MEMORY[0x263F8EE88];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyInvitation<NearbyGroup>.PendingMember>);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v17, v16, v13);
  *(void *)(v9 + *(void *)(*(void *)v9 + 152)) = v18;
  *(void *)(v9 + direct field offset for NearbyInvitation.invitationHostInfo) = a4;
  *(void *)(v9 + direct field offset for NearbyInvitation.controller) = a7;
  uint64_t v19 = v9 + direct field offset for NearbyInvitation.id;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v19, a1, v20);
  uint64_t v22 = (void *)(v9 + direct field offset for NearbyInvitation.displayName);
  uint64_t v23 = v34;
  uint64_t v24 = v35;
  *uint64_t v22 = v33;
  v22[1] = v23;
  uint64_t v25 = (uint64_t *)(v9 + direct field offset for NearbyInvitation.userInfo);
  unint64_t v26 = v36;
  *uint64_t v25 = v24;
  v25[1] = v26;
  uint64_t v27 = (void *)(v9 + direct field offset for NearbyInvitation.sourceProvider);
  v27[3] = type metadata accessor for NearbyGroup();
  v27[4] = &protocol witness table for NearbyGroup;
  *uint64_t v27 = v37;
  id v28 = (uint64_t *)(a7 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_approvalRequests);
  swift_beginAccess();
  uint64_t v39 = *v28;
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  id v29 = v32;
  swift_retain();
  outlined copy of Data?(v24, v26);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<IncomingInvitationJoinRequest, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<IncomingInvitationJoinRequest, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<IncomingInvitationJoinRequest, Never>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v38, v20);
  return v9;
}

uint64_t sub_25737912C()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for specialized closure #1 in NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(void **a1)
{
  return specialized closure #1 in NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(*a1);
}

uint64_t sub_257379170()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitationsController.denyConnectionRequest(_:localInvitation:)()
{
  return closure #1 in NearbyInvitationsController.denyConnectionRequest(_:localInvitation:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

id partial apply for closure #1 in NearbyInvitationsController.addObserver(_:)()
{
  return partial apply for closure #1 in NearbyInvitationsController.removeObserver(_:)((SEL *)&selRef_addObject_);
}

id partial apply for closure #1 in NearbyInvitationsController.removeObserver(_:)(SEL *a1)
{
  return objc_msgSend(*(id *)(*(void *)(v1 + 16) + 56), *a1, *(void *)(v1 + 24));
}

uint64_t sub_257379210()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>)
                 - 8);
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:)(v2, v3, v4);
}

uint64_t sub_257379350()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

void *partial apply for closure #1 in closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:)(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyGroupConnectionInfo, Error>);
  return closure #1 in closure #1 in closure #1 in NearbyInvitationsController.createGroup(with:)(a1, a2);
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of NearbyGroupTable.WeakNearbyGroup()
{
  return swift_weakTakeInit();
}

unint64_t lazy protocol witness table accessor for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup()()
{
  unint64_t result = lazy protocol witness table cache variable for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup();
  if (!lazy protocol witness table cache variable for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup());
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup();
  if (!lazy protocol witness table cache variable for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Errors #1 in NearbyGroupTable.firstGroup() and conformance Errors #1 in NearbyGroupTable.firstGroup());
  }
  return result;
}

uint64_t outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void outlined consume of NearbyGroup.State(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

uint64_t outlined assign with take of NearbyGroupTable.WeakNearbyGroup()
{
  return swift_weakTakeAssign();
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #2 in closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in closure #1 in NearbyGroupTable.cleanUpIfNotPresent(_:)(a1, a2, v2);
}

uint64_t outlined init with copy of (UUID, Bool)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for Errors #1 in NearbyGroupTable.firstGroup()(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2573796ECLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Errors #1 in NearbyGroupTable.firstGroup()()
{
  return &unk_2706546A0;
}

uint64_t closure #1 in NearbyInvitationsController.notifyObservers(with:)partial apply()
{
  return partial apply for closure #1 in NearbyInvitationsController.notifyObservers(with:)();
}

uint64_t @objc NearbyInvitationAdvertiser.didDiscoverNearbySessionInvitation(id:invitation:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4 = a4;
  swift_retain();
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  outlined consume of Data._Representation(v5, v7);
  return swift_release();
}

BOOL static NearbyInvitationAdvertiser.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void NearbyInvitationAdvertiser.Errors.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int NearbyInvitationAdvertiser.Errors.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyInvitationAdvertiser<A>.Errors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static NearbyInvitationAdvertiser.Errors.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyInvitationAdvertiser<A>.Errors()
{
  return NearbyInvitationAdvertiser.Errors.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance NearbyInvitationAdvertiser<A>.Errors(uint64_t a1)
{
  NearbyInvitationAdvertiser.Errors.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationAdvertiser<A>.Errors()
{
  Hasher.init(_seed:)();
  NearbyInvitationAdvertiser.Errors.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t NearbyInvitationAdvertiser.didReceiveConnectionRequest(advertisement:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  swift_retain_n();
  id v5 = a1;
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    v24[0] = v23;
    *(_DWORD *)uint64_t v8 = 136315394;
    v25[0] = v2;
    uint64_t v9 = type metadata accessor for NearbyInvitationAdvertiser();
    uint64_t v10 = >> prefix<A>(_:)((uint64_t)v25, v9);
    v25[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v8 + 12) = 2112;
    v25[0] = v5;
    id v12 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v5;

    _os_log_impl(&dword_257351000, v6, v7, "%s did receive connection request for advertisement %@ about to insert pending invitation member", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v22, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v23, -1, -1);
    MEMORY[0x25A2B6460](v8, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v13 = (uint64_t *)(v2[3] + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  v24[4] = (uint64_t)v5;
  v24[5] = v14;
  v24[6] = v15;
  uint64_t v16 = *(uint64_t (**)(uint64_t *))(*v2 + 184);
  id v17 = v5;
  outlined copy of Data._Representation(v14, v15);
  uint64_t v18 = (uint64_t (*)(uint64_t *, void))v16(v24);
  type metadata accessor for NearbyInvitationAdvertiser.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  Set.insert(_:)();
  id v19 = v25[1];
  id v20 = v25[2];

  outlined consume of Data._Representation((uint64_t)v19, (unint64_t)v20);
  return v18(v24, 0);
}

uint64_t NearbyInvitationAdvertiser.PendingMember.init(advertisement:invitationData:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t type metadata accessor for NearbyInvitationAdvertiser.PendingMember()
{
  return __swift_instantiateGenericMetadata();
}

void @objc NearbyInvitationAdvertiser.didReceiveConnectionRequest(advertisement:)(uint64_t a1, uint64_t a2, void *a3)
{
}

void NearbyInvitationAdvertiser.didReceiveSessionJoinResponse(response:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  if (*(void *)(a1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo + 8) >> 60 == 15)
  {
    __break(1u);
    goto LABEL_9;
  }
  lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v30 = v39[0];
  unint64_t v31 = v39[1];
  uint64_t v7 = v39[4];
  uint64_t v32 = v39[3];
  uint64_t v8 = v39[5];
  UUID.init()();
  uint64_t v9 = (uint64_t *)(a1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier);
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier + 8);
  if (!v10)
  {
LABEL_9:
    __break(1u);
    return;
  }
  uint64_t v11 = *v9;
  id v12 = objc_allocWithZone((Class)type metadata accessor for NearbyAdvertisement(0));
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v29[1] = v8;
  id v13 = specialized NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)((uint64_t)v6, v11, v10, 1, v7, v8, v7, v8, v7, v8, 0, 0xF000000000000000, 0, 1, 0, 0, 0, 0);
  uint64_t v14 = (uint64_t *)(v2[3] + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  id v33 = v13;
  uint64_t v34 = v15;
  unint64_t v35 = v16;
  id v17 = *(uint64_t (**)(void *))(*v2 + 184);
  id v18 = v13;
  outlined copy of Data._Representation(v15, v16);
  id v19 = (void (*)(void *, void))v17(v39);
  type metadata accessor for NearbyInvitationAdvertiser.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  Set.insert(_:)();
  uint64_t v20 = v37;
  unint64_t v21 = v38;

  outlined consume of Data._Representation(v20, v21);
  v19(v39, 0);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Log.client);
  id v23 = v18;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    unint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v26 = 138412290;
    v39[0] = v23;
    id v28 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v23;

    _os_log_impl(&dword_257351000, v24, v25, "NearbyInvitationAdvertiser is sending pendingMember through %@", v26, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v27, -1, -1);
    MEMORY[0x25A2B6460](v26, -1, -1);
    swift_release();

    outlined consume of Data?(v30, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {

    swift_release();
    outlined consume of Data?(v30, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void @objc NearbyInvitationAdvertiser.didReceiveSessionJoinResponse(response:)(uint64_t a1, uint64_t a2, void *a3)
{
}

void @objc NearbyInvitationAdvertiser.didReceiveConnectionRequest(advertisement:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(id))
{
  id v5 = a3;
  swift_retain();
  a4(v5);
  swift_release();
}

uint64_t static NearbyInvitationAdvertiser.PendingMember.Errors.== infix(_:_:)()
{
  return 1;
}

void NearbyInvitationAdvertiser.PendingMember.Errors.hash(into:)()
{
}

Swift::Int NearbyInvitationAdvertiser.PendingMember.Errors.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t NearbyInvitationAdvertiser.PendingMember.contactID.getter(uint64_t a1)
{
  uint64_t v1 = specialized NearbyInvitationAdvertiser.PendingMember.displayName.getter(a1, &OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyInvitationAdvertiser.PendingMember.displayName.getter(uint64_t a1)
{
  uint64_t v1 = specialized NearbyInvitationAdvertiser.PendingMember.displayName.getter(a1, &OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyInvitationAdvertiser.PendingMember.identifier.getter()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyInvitationAdvertiser.PendingMember.userInfo.getter()
{
  uint64_t v1 = *v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo;
  uint64_t v2 = *(void *)v1;
  outlined copy of Data?(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

id NearbyInvitationAdvertiser.PendingMember.advertisement.getter()
{
  return *v0;
}

void NearbyInvitationAdvertiser.PendingMember.advertisement.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*NearbyInvitationAdvertiser.PendingMember.advertisement.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t NearbyInvitationAdvertiser.PendingMember.invitationData.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t NearbyInvitationAdvertiser.PendingMember.invitationData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 8), *(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*NearbyInvitationAdvertiser.PendingMember.invitationData.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

void NearbyInvitationAdvertiser.PendingMember.description.getter()
{
  uint64_t v1 = (char *)*v0;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 2108704;
  v3._object = (void *)0xE300000000000000;
  String.append(_:)(v3);
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName + 8];
  if (v4)
  {
    uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName];
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = v5;
    v6._object = v4;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._object = (void *)0x80000002573C2F30;
    v7._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v7);
    uint64_t v8 = v1;
    id v9 = objc_msgSend(v8, sel_description);
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v12 = v11;

    v13._countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);

    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0x6361746E6F63202CLL;
    v14._object = (void *)0xED0000203A444974;
    String.append(_:)(v14);
    uint64_t v15 = (uint64_t *)&v8[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID];
    unint64_t v16 = *(void **)&v8[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID + 8];
    if (v16)
    {
      uint64_t v17 = *v15;
      swift_bridgeObjectRetain();
      v18._countAndFlagsBits = v17;
      v18._object = v16;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 62;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void NearbyInvitationAdvertiser.PendingMember.hash(into:)()
{
  id v1 = *v0;
  NSObject.hash(into:)();
}

uint64_t static NearbyInvitationAdvertiser.PendingMember.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t NearbyInvitationAdvertiser.PendingMember.approve()()
{
  *(void *)(v1 + 16) = *(void *)v0;
  *(_OWORD *)(v1 + 24) = *(_OWORD *)(v0 + 8);
  return MEMORY[0x270FA2498](NearbyInvitationAdvertiser.PendingMember.approve(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  NearbyInvitationsController.approveConnectionRequest(_:localInvitation:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t NearbyInvitationAdvertiser.PendingMember.reject()()
{
  *(void *)(v1 + 16) = *v0;
  return MEMORY[0x270FA2498](NearbyInvitationAdvertiser.PendingMember.reject(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  specialized NearbyInvitationsController.denyConnectionRequest(_:localInvitation:)(*(void **)(v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Int NearbyInvitationAdvertiser.PendingMember.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t property wrapper backing initializer of NearbyInvitationAdvertiser.pendingMembers(uint64_t a1)
{
  uint64_t v3 = a1;
  type metadata accessor for NearbyInvitationAdvertiser.PendingMember();
  swift_getWitnessTable();
  uint64_t v1 = type metadata accessor for Set();
  return Published.init(wrappedValue:)((uint64_t)&v3, v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationAdvertiser<A>.PendingMember()
{
  return Hasher._finalize()();
}

uint64_t key path getter for NearbyInvitationAdvertiser.pendingMembers : <A>NearbyInvitationAdvertiser<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t key path setter for NearbyInvitationAdvertiser.pendingMembers : <A>NearbyInvitationAdvertiser<A>(uint64_t a1, uint64_t a2)
{
  id v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t NearbyInvitationAdvertiser.pendingMembers.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t NearbyInvitationAdvertiser.pendingMembers.setter()
{
  return static Published.subscript.setter();
}

void (*NearbyInvitationAdvertiser.pendingMembers.modify(void *a1))(void *a1)
{
  id v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return NearbyInvitationsController.groups.modify;
}

uint64_t key path setter for NearbyInvitationAdvertiser.$pendingMembers : <A>NearbyInvitationAdvertiser<A>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NearbyInvitationAdvertiser.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v4 = type metadata accessor for Published.Publisher();
  MEMORY[0x270FA5388](v4);
  Swift::String v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v9 - v5, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 200))(v6);
}

uint64_t NearbyInvitationAdvertiser.$pendingMembers.getter()
{
  return swift_endAccess();
}

uint64_t NearbyInvitationAdvertiser.$pendingMembers.setter(uint64_t a1)
{
  specialized NearbyInvitationAdvertiser.$pendingMembers.setter(a1);
  type metadata accessor for NearbyInvitationAdvertiser.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v2 = type metadata accessor for Published.Publisher();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

void (*NearbyInvitationAdvertiser.$pendingMembers.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  type metadata accessor for NearbyInvitationAdvertiser.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v4 = type metadata accessor for Published.Publisher();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  NearbyInvitationAdvertiser.$pendingMembers.getter();
  return NearbyInvitationAdvertiser.$pendingMembers.modify;
}

void NearbyInvitationAdvertiser.$pendingMembers.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    specialized NearbyInvitationAdvertiser.$pendingMembers.setter((uint64_t)v3);
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized NearbyInvitationAdvertiser.$pendingMembers.setter(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

void *NearbyInvitationAdvertiser.__allocating_init(invitation:provider:activityType:route:)(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return specialized NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:)(a1, a3, a4);
}

void *NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:)(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return specialized NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:)(a1, a3, a4);
}

void *NearbyInvitationAdvertiser.__allocating_init(invitation:provider:activityType:route:params:)(uint64_t a1, uint64_t a2, int a3, int a4, void *a5)
{
  return specialized NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:params:)(a1, a3, a4, a5);
}

void *NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:params:)(uint64_t a1, uint64_t a2, int a3, int a4, void *a5)
{
  return specialized NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:params:)(a1, a3, a4, a5);
}

char *NearbyInvitationAdvertiser.__allocating_init(remoteInvitationData:provider:activityType:route:params:)(uint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5, void *a6)
{
  return specialized NearbyInvitationAdvertiser.init(remoteInvitationData:provider:activityType:route:params:)(a1, a2, a4, a5, a6);
}

char *NearbyInvitationAdvertiser.init(remoteInvitationData:provider:activityType:route:params:)(uint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5, void *a6)
{
  return specialized NearbyInvitationAdvertiser.init(remoteInvitationData:provider:activityType:route:params:)(a1, a2, a4, a5, a6);
}

uint64_t NearbyInvitationAdvertiser.start()()
{
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 40) = *v0;
  return MEMORY[0x270FA2498](NearbyInvitationAdvertiser.start(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  uint64_t v15 = v0;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.client);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[4];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    Swift::String v14 = v6;
    v0[2] = v4;
    uint64_t v7 = type metadata accessor for NearbyInvitationAdvertiser();
    uint64_t v8 = >> prefix<A>(_:)((uint64_t)(v0 + 2), v7);
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v2, v3, "%s: client called start on NearbyInvitationsAdvertiser", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v6, -1, -1);
    MEMORY[0x25A2B6460](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v10 = (void *)swift_task_alloc();
  v0[6] = v10;
  void *v10 = v0;
  v10[1] = NearbyInvitationAdvertiser.start();
  uint64_t v11 = v0[4];
  id v12 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA2360](v10, 0, 0, 0x29287472617473, 0xE700000000000000, partial apply for closure #1 in NearbyInvitationAdvertiser.start(), v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = NearbyInvitationAdvertiser.start();
  }
  else {
    uint64_t v2 = NearbyInvitationAdvertiser.start();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t closure #1 in NearbyInvitationAdvertiser.start()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F34010]), sel_init);
  unsigned int v9 = objc_msgSend(v8, sel_wranglerHomePodBoopEnabled);

  if (v9 && (uint64_t v10 = (void *)a2[4]) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
    unint64_t v11 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v12 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v12 + v11, (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
    id v13 = v10;
    NearbyInvitationsController.advertiseNearbySessionEndpoint(params:response:)(v13, (uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.start(), v12);
  }
  else
  {
    Swift::String v14 = (void *)a2[3];
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
    unint64_t v15 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = *(void *)(v4 + 80);
    *(void *)(v16 + 24) = *(void *)(v4 + 88);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v16 + v15, (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
    *(void *)(v16 + ((v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
    swift_retain();
    NearbyInvitationsController.advertiseNearbyInvitation(_:response:)(v14, (uint64_t)partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.start(), v16);
  }
  return swift_release();
}

void closure #1 in closure #1 in NearbyInvitationAdvertiser.start()(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.client);
    id v4 = a1;
    id v5 = a1;
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      id v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      id v9 = a1;
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v8 = v15;

      _os_log_impl(&dword_257351000, oslog, v6, "Could not start advertising %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v8, -1, -1);
      MEMORY[0x25A2B6460](v7, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.client);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v13 = 0;
      _os_log_impl(&dword_257351000, v11, v12, "Started advertising request through NearbyInvitationLisntener", v13, 2u);
      MEMORY[0x25A2B6460](v13, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t NearbyInvitationAdvertiser.stop()()
{
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 40) = *v0;
  return MEMORY[0x270FA2498](NearbyInvitationAdvertiser.stop(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  uint64_t v15 = v0;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.client);
  swift_retain_n();
  id v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = v0[4];
    id v5 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v6 = swift_slowAlloc();
    *(_DWORD *)id v5 = 136315138;
    Swift::String v14 = v6;
    v0[2] = v4;
    uint64_t v7 = type metadata accessor for NearbyInvitationAdvertiser();
    id v8 = >> prefix<A>(_:)((uint64_t)(v0 + 2), v7);
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v2, v3, "%s: client called stop on NearbyInvitationsAdvertiser", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v6, -1, -1);
    MEMORY[0x25A2B6460](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v10 = (void *)swift_task_alloc();
  v0[6] = v10;
  void *v10 = v0;
  v10[1] = NearbyInvitationAdvertiser.stop();
  unint64_t v11 = v0[4];
  os_log_type_t v12 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA2360](v10, 0, 0, 0x2928706F7473, 0xE600000000000000, partial apply for closure #1 in NearbyInvitationAdvertiser.stop(), v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = NearbyInvitationAdvertiser.stop();
  }
  else {
    id v2 = NearbyInvitationAdvertiser.stop();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NearbyInvitationAdvertiser.stop()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v26 = a1;
  uint64_t v27 = v3;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F34010]), sel_init);
  unsigned int v12 = objc_msgSend(v11, sel_wranglerHomePodBoopEnabled);

  if (v12 && (id v13 = (void *)a2[4]) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v8);
    unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = v27;
    *(void *)(v15 + 16) = *(void *)(v27 + 80);
    *(void *)(v15 + 24) = *(void *)(v16 + 88);
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15 + v14, (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    *(void *)(v15 + ((v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
    id v17 = v13;
    swift_retain();
    NearbyInvitationsController.stopAdvertisingNearbySessionEndpoint(response:)((uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.stop(), v15);

    return swift_release();
  }
  else
  {
    uint64_t v19 = a2[3] + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier;
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v25 = v4;
    v20(v7, v19, v4);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v8);
    unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = v27;
    *(void *)(v22 + 16) = *(void *)(v27 + 80);
    *(void *)(v22 + 24) = *(void *)(v23 + 88);
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v22 + v21, (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    *(void *)(v22 + ((v10 + v21 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
    swift_retain();
    NearbyInvitationsController.stopAdvertisingNearbyInvitation(_:response:)((uint64_t)v7, (uint64_t)partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.stop(), v22);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v25);
  }
}

uint64_t closure #1 in closure #1 in NearbyInvitationAdvertiser.stop()(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    id v4 = a1;
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.client);
    id v6 = a1;
    id v7 = a1;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      id v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412290;
      id v12 = a1;
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v11 = v24;

      _os_log_impl(&dword_257351000, v8, v9, "Could not stop advertising %@", v10, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v11, -1, -1);
      MEMORY[0x25A2B6460](v10, -1, -1);
    }
    else
    {
    }
    uint64_t v24 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.client);
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)id v17 = 136315138;
      uint64_t v23 = a3;
      uint64_t v24 = v18;
      uint64_t v19 = type metadata accessor for NearbyInvitationAdvertiser();
      uint64_t v20 = >> prefix<A>(_:)((uint64_t)&v23, v19);
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_257351000, v15, v16, "%s: stopping advertising for NearbySessionEndpoint", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v18, -1, -1);
      MEMORY[0x25A2B6460](v17, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #2 in closure #1 in NearbyInvitationAdvertiser.start()(void *a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5)
{
  if (a1)
  {
    id v7 = a1;
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.client);
    id v9 = a1;
    id v10 = a1;
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)id v13 = 138412290;
      id v15 = a1;
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v32;

      _os_log_impl(&dword_257351000, v11, v12, a4, v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v14, -1, -1);
      MEMORY[0x25A2B6460](v13, -1, -1);
    }
    else
    {
    }
    uint64_t v32 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Log.client);
    swift_retain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = a3;
      uint64_t v32 = v30;
      *(_DWORD *)uint64_t v21 = 136315394;
      uint64_t v22 = type metadata accessor for NearbyInvitationAdvertiser();
      uint64_t v23 = >> prefix<A>(_:)((uint64_t)&v31, v22);
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v21 + 12) = 2080;
      id v25 = objc_msgSend(*(id *)(a3 + 24), sel_description);
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v28 = v27;

      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_257351000, v19, v20, a5, (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v30, -1, -1);
      MEMORY[0x25A2B6460](v21, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[9] = v4;
  v2[10] = *(void *)(v4 + 64);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](NearbyInvitationAdvertiser.assertPublic(rotations:), 0, 0);
}

uint64_t NearbyInvitationAdvertiser.assertPublic(rotations:)()
{
  uint64_t v19 = v0;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.client);
  swift_retain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v17 = v0[5];
    uint64_t v4 = v0[6];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v18 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    v0[2] = v4;
    uint64_t v7 = type metadata accessor for NearbyInvitationAdvertiser();
    uint64_t v8 = >> prefix<A>(_:)((uint64_t)(v0 + 2), v7);
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2048;
    v0[4] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_257351000, v2, v3, "%s: Client wants to assert for the advertisement to be public for %lu rotations", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v6, -1, -1);
    MEMORY[0x25A2B6460](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v11 = v0[5];
  uint64_t v10 = v0[6];
  uint64_t v12 = swift_task_alloc();
  v0[13] = v12;
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  id v13 = (void *)swift_task_alloc();
  v0[14] = v13;
  *id v13 = v0;
  v13[1] = NearbyInvitationAdvertiser.assertPublic(rotations:);
  uint64_t v14 = v0[12];
  uint64_t v15 = v0[8];
  return MEMORY[0x270FA2360](v14, 0, 0, 0xD000000000000018, 0x80000002573C2F50, partial apply for closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:), v12, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = NearbyInvitationAdvertiser.assertPublic(rotations:);
  }
  else
  {
    swift_task_dealloc();
    id v2 = NearbyInvitationAdvertiser.assertPublic(rotations:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v12;

  uint64_t v1 = v0[11];
  id v2 = v0[12];
  os_log_type_t v3 = v0[9];
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  uint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = (char *)swift_allocObject();
  *((void *)v8 + 2) = *(void *)(v5 + 80);
  *((void *)v8 + 3) = *(void *)(v5 + 88);
  *((void *)v8 + 4) = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(&v8[v7], v1, v4);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  unint64_t v9 = AnyCancellable.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
  return v10(v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v17 = *a2;
  uint64_t v18 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UUID, Error>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = a2[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2[3] + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v17;
  *(void *)(v13 + 16) = *(void *)(v17 + 80);
  *(void *)(v13 + 24) = *(void *)(v14 + 88);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  NearbyInvitationsController.assertAdvertisementPublic(_:rotations:response:)((uint64_t)v11, v18, (uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:), v13);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t closure #1 in closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v18 - v12;
  if (a2)
  {
    uint64_t v19 = (uint64_t)a2;
    id v14 = a2;
LABEL_5:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UUID, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  outlined init with copy of UUID?(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6);
    type metadata accessor for NearbyInvitationAdvertiser.Errors();
    swift_getWitnessTable();
    uint64_t v15 = swift_allocError();
    *os_log_type_t v16 = 1;
    uint64_t v19 = v15;
    goto LABEL_5;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UUID, Error>);
  CheckedContinuation.resume(returning:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t closure #2 in NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v27 - v8;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = result;
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.client);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v32(v9, a2, v3);
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    int v15 = v14;
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v31 = a2;
      uint64_t v17 = v16;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v34 = v30;
      *(_DWORD *)uint64_t v17 = 136315394;
      os_log_t v29 = v13;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      int v28 = v15;
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v34);
      v27[1] = &v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void (**)(char *, uint64_t))(v4 + 8);
      v20(v9, v3);
      *(_WORD *)(v17 + 12) = 2080;
      v32(v7, *(void *)(v11 + 24) + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier, v3);
      swift_release();
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v23 = v22;
      v20(v7, v3);
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      os_log_t v24 = v29;
      _os_log_impl(&dword_257351000, v29, (os_log_type_t)v28, "Releasing assertionIdentifier: %s for invitationID: %s", (uint8_t *)v17, 0x16u);
      uint64_t v25 = v30;
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v25, -1, -1);
      uint64_t v26 = v17;
      a2 = v31;
      MEMORY[0x25A2B6460](v26, -1, -1);
    }
    else
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

      swift_release();
    }
    NearbyInvitationsController.releaseAdvertisementPublicAssertion(_:assertionIdentifier:)(*(void *)(v11 + 24) + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier, a2);
    return swift_release();
  }
  return result;
}

id *NearbyInvitationAdvertiser.deinit()
{
  swift_release();

  uint64_t v1 = (char *)v0 + *((void *)*v0 + 15);
  type metadata accessor for NearbyInvitationAdvertiser.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v2 = type metadata accessor for Published();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t NearbyInvitationAdvertiser.__deallocating_deinit()
{
  NearbyInvitationAdvertiser.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t Published.init(wrappedValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  Published.init(initialValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t type metadata accessor for NearbyInvitationAdvertiser()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type InvitationRequestData and conformance InvitationRequestData()
{
  unint64_t result = lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData;
  if (!lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationRequestData and conformance InvitationRequestData);
  }
  return result;
}

uint64_t specialized NearbyInvitationAdvertiser.PendingMember.displayName.getter(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)(*v2 + *a2);
  if (v3[1]) {
    return *v3;
  }
  __break(1u);
  return result;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t sub_25737DDA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_25737DDF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_25737DE44()
{
  return 16;
}

__n128 sub_25737DE50(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t specialized NearbyInvitationAdvertiser.$pendingMembers.setter(uint64_t a1)
{
  type metadata accessor for NearbyInvitationAdvertiser.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v2 = type metadata accessor for Published.Publisher();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - v3, a1);
  swift_beginAccess();
  type metadata accessor for Published();
  Published.projectedValue.setter();
  return swift_endAccess();
}

void *specialized NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:)(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = v3;
  int v36 = a3;
  int v37 = a2;
  uint64_t v32 = a1;
  uint64_t v5 = (void *)*v3;
  uint64_t v34 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  unint64_t v38 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v5[10];
  uint64_t v9 = v5[11];
  type metadata accessor for NearbyInvitationAdvertiser.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v10 = type metadata accessor for Published();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v30 - v12;
  os_log_type_t v14 = (char *)v4 + v5[15];
  uint64_t v15 = Set.init()();
  uint64_t v35 = v8;
  uint64_t v33 = v9;
  property wrapper backing initializer of NearbyInvitationAdvertiser.pendingMembers(v15);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v13, v10);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  v4[2] = static NearbyInvitationsController.shared;
  uint64_t v16 = v32;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v18 = v34;
  v17(v38, v32 + direct field offset for NearbyInvitation.id, v34);
  unint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v16 + 160);
  uint64_t v20 = swift_retain();
  uint64_t v21 = v19(v20);
  uint64_t v31 = v22;
  unint64_t v23 = (objc_class *)type metadata accessor for NearbyAdvertisementRequest();
  os_log_t v24 = objc_allocWithZone(v23);
  uint64_t v25 = v38;
  v17(&v24[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier], (uint64_t)v38, v18);
  uint64_t v26 = (uint64_t *)&v24[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
  uint64_t v27 = v31;
  *uint64_t v26 = v21;
  v26[1] = v27;
  v24[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = v36;
  *(_DWORD *)&v24[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = v37;
  v39.receiver = v24;
  v39.super_class = v23;
  id v28 = objc_msgSendSuper2(&v39, sel_init);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v18);
  v4[3] = v28;
  void v4[4] = 0;
  type metadata accessor for NearbyInvitationAdvertiser();
  swift_retain();
  swift_retain();
  specialized NearbyInvitationsController.addObserver(_:)();
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

void *specialized NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:params:)(uint64_t a1, int a2, int a3, void *a4)
{
  uint64_t v5 = v4;
  v58 = a4;
  uint64_t v59 = a1;
  int v52 = a3;
  LODWORD(v53) = a2;
  v62[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = (void *)*v4;
  uint64_t v7 = (void *)type metadata accessor for UUID();
  uint64_t v54 = *(v7 - 1);
  id v55 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = &v51[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = v6[10];
  uint64_t v11 = v6[11];
  type metadata accessor for NearbyInvitationAdvertiser.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v12 = type metadata accessor for Published();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v51[-v14];
  uint64_t v16 = (char *)v5 + v6[15];
  uint64_t v17 = Set.init()();
  uint64_t v56 = v11;
  uint64_t v57 = v10;
  property wrapper backing initializer of NearbyInvitationAdvertiser.pendingMembers(v17);
  (*(void (**)(char *, unsigned char *, uint64_t))(v13 + 32))(v16, v15, v12);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  void v5[2] = static NearbyInvitationsController.shared;
  uint64_t v18 = v59;
  uint64_t v19 = v54;
  id v20 = v55;
  uint64_t v21 = *(void (**)(unsigned char *, uint64_t, id))(v54 + 16);
  v21(v9, v59 + direct field offset for NearbyInvitation.id, v55);
  uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v18 + 160);
  uint64_t v23 = swift_retain();
  uint64_t v24 = v22(v23);
  uint64_t v26 = v25;
  uint64_t v27 = (objc_class *)type metadata accessor for NearbyAdvertisementRequest();
  id v28 = objc_allocWithZone(v27);
  v21(&v28[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier], (uint64_t)v9, v20);
  os_log_t v29 = (uint64_t *)&v28[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
  *os_log_t v29 = v24;
  v29[1] = v26;
  v28[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = v52;
  *(_DWORD *)&v28[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = v53;
  v60.receiver = v28;
  v60.super_class = v27;
  id v30 = objc_msgSendSuper2(&v60, sel_init);
  (*(void (**)(unsigned char *, id))(v19 + 8))(v9, v20);
  v5[3] = v30;
  uint64_t v31 = v58;
  uint64_t v32 = v5;
  if (!v58) {
    goto LABEL_11;
  }
  id v33 = objc_allocWithZone(MEMORY[0x263F34010]);
  id v34 = v31;
  id v35 = objc_msgSend(v33, sel_init);
  unsigned int v36 = objc_msgSend(v35, sel_wranglerHomePodBoopEnabled);

  if (!v36)
  {

LABEL_11:
    v5[4] = 0;
    goto LABEL_12;
  }
  v5[4] = v31;
  uint64_t v37 = one-time initialization token for client;
  id v38 = v34;
  if (v37 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Log.client);
  swift_retain_n();
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    id v55 = v38;
    uint64_t v42 = swift_slowAlloc();
    uint64_t v53 = (void *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    uint64_t v61 = (uint64_t)v32;
    v62[0] = v54;
    *(_DWORD *)uint64_t v42 = 136315394;
    uint64_t v43 = type metadata accessor for NearbyInvitationAdvertiser();
    uint64_t v44 = >> prefix<A>(_:)((uint64_t)&v61, v43);
    uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v42 + 12) = 2112;
    unint64_t v46 = (void *)v32[4];
    if (v46)
    {
      uint64_t v61 = v32[4];
      id v47 = v46;
    }
    else
    {
      uint64_t v61 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v49 = v53;
    *uint64_t v53 = v46;
    swift_release_n();
    _os_log_impl(&dword_257351000, v40, v41, "%s: parameters = %@", (uint8_t *)v42, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v49, -1, -1);
    uint64_t v50 = v54;
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v50, -1, -1);
    MEMORY[0x25A2B6460](v42, -1, -1);

    uint64_t v31 = v58;
  }
  else
  {

    swift_release_n();
  }
LABEL_12:
  type metadata accessor for NearbyInvitationAdvertiser();
  swift_retain();
  swift_retain();
  specialized NearbyInvitationsController.addObserver(_:)();

  swift_release();
  swift_release();
  swift_release();
  return v32;
}

char *specialized NearbyInvitationAdvertiser.init(remoteInvitationData:provider:activityType:route:params:)(uint64_t a1, unint64_t a2, int a3, int a4, void *a5)
{
  uint64_t v6 = v5;
  id v73 = a5;
  uint64_t v74 = a1;
  int v65 = a4;
  int v66 = a3;
  unint64_t v75 = a2;
  v78[1] = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void **)v5;
  uint64_t v8 = (void *)type metadata accessor for UUID();
  uint64_t v67 = *(v8 - 1);
  id v68 = v8;
  MEMORY[0x270FA5388](v8);
  long long v64 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v7[10];
  uint64_t v11 = v7[11];
  type metadata accessor for NearbyInvitationAdvertiser.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v12 = type metadata accessor for Published();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v64 - v14;
  uint64_t v16 = &v6[v7[15]];
  uint64_t v17 = Set.init()();
  uint64_t v71 = v11;
  uint64_t v72 = v10;
  property wrapper backing initializer of NearbyInvitationAdvertiser.pendingMembers(v17);
  v69 = (char *)v13;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v15, v12);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *((void *)v6 + 2) = static NearbyInvitationsController.shared;
  uint64_t v18 = one-time initialization token for client;
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.client);
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_257351000, v20, v21, "Attempting to decode NearbyInvitationData from given payload", v22, 2u);
    MEMORY[0x25A2B6460](v22, -1, -1);
  }

  uint64_t v24 = v74;
  unint64_t v23 = v75;
  uint64_t v25 = v70;
  uint64_t v26 = specialized static NearbyInvitationData.create(from:)(v74, v75);
  if (!v25)
  {
    v70 = 0;
    v69 = v26;
    uint64_t v37 = v67;
    id v36 = v68;
    id v38 = *(void (**)(char *, char *, id))(v67 + 16);
    uint64_t v39 = v64;
    v38(v64, &v26[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID], v68);
    uint64_t v40 = (objc_class *)type metadata accessor for NearbyAdvertisementRequest();
    os_log_type_t v41 = objc_allocWithZone(v40);
    v38(&v41[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier], v39, v36);
    uint64_t v43 = v74;
    unint64_t v42 = v75;
    uint64_t v44 = &v41[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
    void *v44 = v74;
    v44[1] = v42;
    v41[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = v65;
    *(_DWORD *)&v41[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = v66;
    outlined copy of Data._Representation(v43, v42);
    v76.receiver = v41;
    v76.super_class = v40;
    id v45 = objc_msgSendSuper2(&v76, sel_init);
    (*(void (**)(char *, id))(v37 + 8))(v39, v36);
    *((void *)v6 + 3) = v45;
    id v46 = v73;
    if (v73)
    {
      id v47 = objc_allocWithZone(MEMORY[0x263F34010]);
      id v48 = v46;
      id v49 = objc_msgSend(v47, sel_init);
      unsigned __int8 v50 = objc_msgSend(v49, sel_wranglerHomePodBoopEnabled);

      if (v50)
      {
        *((void *)v6 + 4) = v46;
        swift_retain_n();
        id v51 = v48;
        int v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v52, v53))
        {
          id v68 = v51;
          uint64_t v54 = swift_slowAlloc();
          id v55 = (void *)swift_slowAlloc();
          uint64_t v67 = swift_slowAlloc();
          uint64_t v77 = (uint64_t)v6;
          v78[0] = v67;
          *(_DWORD *)uint64_t v54 = 136315394;
          uint64_t v56 = type metadata accessor for NearbyInvitationAdvertiser();
          uint64_t v57 = >> prefix<A>(_:)((uint64_t)&v77, v56);
          uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          *(_WORD *)(v54 + 12) = 2112;
          uint64_t v59 = (void *)*((void *)v6 + 4);
          if (v59)
          {
            uint64_t v77 = *((void *)v6 + 4);
            id v60 = v59;
          }
          else
          {
            uint64_t v77 = 0;
          }
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v43 = v74;
          void *v55 = v59;
          swift_release_n();
          _os_log_impl(&dword_257351000, v52, v53, "%s: parameters = %@", (uint8_t *)v54, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x25A2B6460](v55, -1, -1);
          uint64_t v63 = v67;
          swift_arrayDestroy();
          MEMORY[0x25A2B6460](v63, -1, -1);
          MEMORY[0x25A2B6460](v54, -1, -1);

          unint64_t v42 = v75;
          id v46 = v73;
        }
        else
        {

          swift_release_n();
        }
        goto LABEL_19;
      }
    }
    *((void *)v6 + 4) = 0;
LABEL_19:
    uint64_t v61 = v69;
    type metadata accessor for NearbyInvitationAdvertiser();
    swift_retain();
    specialized NearbyInvitationsController.addObserver(_:)();

    outlined consume of Data._Representation(v43, v42);
    swift_release();
    return v6;
  }
  id v27 = v25;
  id v28 = v25;
  os_log_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v70 = (void *)v12;
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v77 = (uint64_t)v25;
    v78[0] = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    id v33 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v34 = String.init<A>(reflecting:)();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v78);
    uint64_t v24 = v74;
    unint64_t v23 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v12 = (uint64_t)v70;
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v29, v30, "Failed to decode payload, error: %s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v32, -1, -1);
    MEMORY[0x25A2B6460](v31, -1, -1);
  }
  else
  {
  }
  swift_willThrow();

  outlined consume of Data._Representation(v24, v23);
  swift_release();
  (*((void (**)(char *, uint64_t))v69 + 1))(&v6[*(void *)(*(void *)v6 + 120)], v12);
  type metadata accessor for NearbyInvitationAdvertiser();
  swift_deallocPartialClassInstance();
  return v6;
}

uint64_t partial apply for closure #1 in NearbyInvitationAdvertiser.start()(uint64_t a1)
{
  return closure #1 in NearbyInvitationAdvertiser.start()(a1, v1);
}

uint64_t partial apply for closure #1 in NearbyInvitationAdvertiser.stop()(uint64_t a1)
{
  return closure #1 in NearbyInvitationAdvertiser.stop()(a1, v1);
}

uint64_t partial apply for closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1)
{
  return closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:)(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_25737F2C0()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25737F2F8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #2 in NearbyInvitationAdvertiser.assertPublic(rotations:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return closure #2 in NearbyInvitationAdvertiser.assertPublic(rotations:)(v2, v3);
}

uint64_t base witness table accessor for Equatable in NearbyInvitationAdvertiser<A>.Errors()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in NearbyInvitationAdvertiser<A>.PendingMember.Errors()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in NearbyInvitationAdvertiser<A>.PendingMember()
{
  return swift_getWitnessTable();
}

uint64_t sub_25737F498()
{
  return 16;
}

__n128 sub_25737F4A4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_25737F4B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 192))();
}

uint64_t sub_25737F4F8()
{
  return 16;
}

__n128 sub_25737F504(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata instantiation function for NearbyInvitationAdvertiser()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for NearbyInvitationAdvertiser()
{
  type metadata accessor for NearbyInvitationAdvertiser.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t result = type metadata accessor for Published();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for NearbyInvitationAdvertiser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyInvitationAdvertiser);
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.didDiscoverNearbySessionInvitation(id:invitation:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.didDiscoverNearbyAdvertisement(advertisement:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.didLoseNearbyAdvertisement(advertisement:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.didReceiveConnectionRequest(advertisement:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.didReceiveSessionJoinResponse(response:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.pendingMembers.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.pendingMembers.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.pendingMembers.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.$pendingMembers.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.$pendingMembers.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.$pendingMembers.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.__allocating_init(invitation:provider:activityType:route:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.__allocating_init(invitation:provider:activityType:route:params:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.__allocating_init(remoteInvitationData:provider:activityType:route:params:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.start()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 240) + **(int **)(*(void *)v0 + 240));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v4();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.stop()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 248) + **(int **)(*(void *)v0 + 248));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  return v4();
}

uint64_t dispatch thunk of NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 256) + **(int **)(*(void *)v1 + 256));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = dispatch thunk of NearbyGroupTable.firstGroup();
  return v6(a1);
}

uint64_t type metadata instantiation function for NearbyInvitationAdvertiser.Errors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t getEnumTagSinglePayload for NearbyInvitationAdvertiser.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NearbyInvitationAdvertiser.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25737FC58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for NearbyInvitationAdvertiser.Errors(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for NearbyInvitationAdvertiser.Errors()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for NearbyInvitationAdvertiser.PendingMember(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t destroy for NearbyInvitationAdvertiser.PendingMember(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  return outlined consume of Data._Representation(v2, v3);
}

void *initializeBufferWithCopyOfBuffer for NearbyInvitationAdvertiser.PendingMember(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 16);
  id v6 = v3;
  outlined copy of Data._Representation(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t assignWithCopy for NearbyInvitationAdvertiser.PendingMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v8 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  outlined copy of Data._Representation(v8, v7);
  uint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  outlined consume of Data._Representation(v9, v10);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for NearbyInvitationAdvertiser.PendingMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyInvitationAdvertiser.PendingMember(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyInvitationAdvertiser.PendingMember(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NearbyInvitationAdvertiser.PendingMember.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25737FF18);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for NearbyInvitationAdvertiser.PendingMember.Errors()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t sub_25737FFB0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UUID, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:)(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UUID, Error>);
  return closure #1 in closure #1 in NearbyInvitationAdvertiser.assertPublic(rotations:)(a1, a2);
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.stop()(void *a1)
{
  return partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.stop()(a1, "Could not stop advertising %@", "%s: stopping advertising for request %s");
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.stop()(void *a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in closure #1 in NearbyInvitationAdvertiser.stop()(a1, v1 + v4, v5);
}

uint64_t objectdestroy_34Tm_0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.start()(void *a1)
{
  return partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.stop()(a1, "Could not start advertising %@", "%s: started advertising for request %s");
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationAdvertiser.stop()(void *a1, const char *a2, const char *a3)
{
  uint64_t v7 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return closure #2 in closure #1 in NearbyInvitationAdvertiser.start()(a1, v3 + v8, *(void *)(v3 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8)), a2, a3);
}

uint64_t sub_25738036C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

void partial apply for closure #1 in closure #1 in NearbyInvitationAdvertiser.start()(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  closure #1 in closure #1 in NearbyInvitationAdvertiser.start()(a1);
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

BOOL NearbyInvitationSessionProvider.init(rawValue:)(uint64_t a1)
{
  return a1 == 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyInvitationSessionProvider(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyInvitationSessionProvider()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NearbyInvitationSessionProvider()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationSessionProvider()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance NearbyInvitationSessionProvider@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 1;
  *(void *)a2 = *result == 1;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NearbyInvitationSessionProvider(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t static NearbyInvitationServiceInterface.identity.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for XPCIdentity();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static NearbyInvitationServiceInterface.identity);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

id closure #1 in variable initialization expression of static NearbyInvitationServiceInterface.hostObjectInterface()
{
  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_270659B60);
  specialized getContiguousArrayStorageType<A>(for:)();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2573BFE00;
  *(void *)(inited + 32) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  *(void *)(inited + 40) = type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(void *)(inited + 48) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSData);
  *(void *)(inited + 56) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSNumber);
  *(void *)(inited + 64) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSArray);
  uint64_t v2 = type metadata accessor for NearbyAdvertisement(0);
  *(void *)(inited + 72) = v2;
  *(void *)(inited + 80) = type metadata accessor for NearbyInvitationJoinRequestMetadata();
  *(void *)(inited + 88) = v2;
  *(void *)(inited + 96) = type metadata accessor for IncomingInvitationJoinRequest(0);
  *(void *)(inited + 104) = type metadata accessor for InvitationJoinResponse();
  *(void *)(inited + 112) = type metadata accessor for InvitationApprovalRequest();
  *(void *)(inited + 120) = type metadata accessor for NearbyInvitationData(0);
  *(void *)(inited + 128) = type metadata accessor for NearbyGroupMember();
  *(void *)(inited + 136) = type metadata accessor for NearbyAdvertisementRequest();
  *(void *)(inited + 144) = type metadata accessor for NearbyInvitationParameters();
  *(void *)(inited + 152) = type metadata accessor for InvitationBlob();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  swift_setDeallocating();
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = v9;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject.Type);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Swift.AnyObject.Type);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      *(void *)(v2 + 16) = v6 + 1;
      *(void *)(v2 + 8 * v6 + 32) = v8;
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

id static NearbyInvitationServiceInterface.hostObjectInterface.getter()
{
  return static NearbyInvitationServiceInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (void **)&static NearbyInvitationServiceInterface.hostObjectInterface);
}

id one-time initialization function for clientObjectInterface()
{
  id result = closure #1 in variable initialization expression of static NearbyInvitationServiceInterface.clientObjectInterface();
  static NearbyInvitationServiceInterface.clientObjectInterface = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static NearbyInvitationServiceInterface.clientObjectInterface()
{
  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_270659BC0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_2573BF080;
  uint64_t v2 = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSArray);
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = type metadata accessor for NearbyGroupConnectionInfo(0);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized getContiguousArrayStorageType<A>(for:)();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2573BFE10;
  *(void *)(inited + 32) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  *(void *)(inited + 40) = type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(void *)(inited + 48) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSData);
  *(void *)(inited + 56) = type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSNumber);
  *(void *)(inited + 64) = v2;
  *(void *)(inited + 72) = type metadata accessor for NearbyAdvertisement(0);
  uint64_t v4 = type metadata accessor for NearbyInvitationJoinRequestMetadata();
  *(void *)(inited + 80) = v4;
  *(void *)(inited + 88) = type metadata accessor for InvitationJoinResponse();
  *(void *)(inited + 96) = type metadata accessor for IncomingInvitationJoinRequest(0);
  *(void *)(inited + 104) = v4;
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  specialized _arrayForceCast<A, B>(_:)(inited);
  swift_setDeallocating();
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  return v0;
}

id static NearbyInvitationServiceInterface.clientObjectInterface.getter()
{
  return static NearbyInvitationServiceInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (void **)&static NearbyInvitationServiceInterface.clientObjectInterface);
}

id static NearbyInvitationServiceInterface.hostObjectInterface.getter(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  return v3;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationSessionProvider and conformance NearbyInvitationSessionProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationSessionProvider and conformance NearbyInvitationSessionProvider;
  if (!lazy protocol witness table cache variable for type NearbyInvitationSessionProvider and conformance NearbyInvitationSessionProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationSessionProvider and conformance NearbyInvitationSessionProvider);
  }
  return result;
}

uint64_t protocol witness for static XPCInterface.identity.getter in conformance NearbyInvitationServiceInterface@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for XPCIdentity();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static NearbyInvitationServiceInterface.identity);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyInvitationServiceInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyInvitationServiceInterface(a1, a2, &one-time initialization token for hostObjectInterface, (void **)&static NearbyInvitationServiceInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance NearbyInvitationServiceInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyInvitationServiceInterface(a1, a2, &one-time initialization token for clientObjectInterface, (void **)&static NearbyInvitationServiceInterface.clientObjectInterface);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance NearbyInvitationServiceInterface(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  unint64_t v5 = *a4;
  return v5;
}

ValueMetadata *type metadata accessor for NearbyInvitationSessionProvider()
{
  return &type metadata for NearbyInvitationSessionProvider;
}

ValueMetadata *type metadata accessor for NearbyInvitationServiceInterface()
{
  return &type metadata for NearbyInvitationServiceInterface;
}

uint64_t specialized getContiguousArrayStorageType<A>(for:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject.Type);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>;
  }
  else {
    uint64_t v2 = (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<NSObject.Type>;
  }
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t NearbyInvitationScanner.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for NearbyInvitationScanner.uuid;
  uint64_t v4 = type metadata accessor for UUID();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t NearbyInvitationScanner.invitationDataBlobs.getter()
{
  return swift_retain();
}

BOOL static NearbyInvitationScanner.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void NearbyInvitationScanner.Errors.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int NearbyInvitationScanner.Errors.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyInvitationScanner<A>.Errors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static NearbyInvitationScanner.Errors.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyInvitationScanner<A>.Errors()
{
  return NearbyInvitationScanner.Errors.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance NearbyInvitationScanner<A>.Errors(uint64_t a1)
{
  NearbyInvitationScanner.Errors.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationScanner<A>.Errors()
{
  Hasher.init(_seed:)();
  NearbyInvitationScanner.Errors.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

void NearbyInvitationScanner.didDiscoverNearbyAdvertisement(advertisement:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  swift_retain_n();
  id v5 = a1;
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    v29[0] = v28;
    *(_DWORD *)uint64_t v8 = 136315394;
    id v30 = v1;
    uint64_t v10 = type metadata accessor for NearbyInvitationScanner();
    uint64_t v11 = >> prefix<A>(_:)((uint64_t)&v30, v10);
    id v30 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v8 + 12) = 2112;
    id v30 = v5;
    id v13 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl(&dword_257351000, v6, v7, "%s Did discover NearbyAdvertisement callback: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v28, -1, -1);
    MEMORY[0x25A2B6460](v8, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v14 = static UUID.== infix(_:_:)();
  if (v14)
  {
    MEMORY[0x270FA5388](v14);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    swift_getKeyPath();
    id v16 = v5;
    uint64_t v17 = (void (*)(uint64_t *, void))static Published.subscript.modify();
    specialized Set._Variant.insert(_:)(&v30, v16, (void (*)(void))type metadata accessor for NearbyAdvertisement, &demangling cache variable for type metadata for _SetStorage<NearbyAdvertisement>, (void (*)(void))type metadata accessor for NearbyAdvertisement);

    v17(v29, 0);
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain_n();
    id v18 = v5;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v29[0] = v23;
      *(_DWORD *)uint64_t v21 = 136315394;
      id v30 = v2;
      uint64_t v24 = type metadata accessor for NearbyInvitationScanner();
      uint64_t v25 = >> prefix<A>(_:)((uint64_t)&v30, v24);
      id v30 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v21 + 12) = 2112;
      id v30 = v18;
      id v27 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v18;

      _os_log_impl(&dword_257351000, v19, v20, "%s Ignored discovered advertisement: %@ since it's not for our scanner", (uint8_t *)v21, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v22, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v23, -1, -1);
      MEMORY[0x25A2B6460](v21, -1, -1);
    }
    else
    {
      swift_release_n();
    }
  }
}

void @objc NearbyInvitationScanner.didDiscoverNearbyAdvertisement(advertisement:)(uint64_t a1, uint64_t a2, void *a3)
{
}

void NearbyInvitationScanner.didLoseNearbyAdvertisement(advertisement:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.client);
  swift_retain_n();
  id v5 = a1;
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    v28[0] = v27;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v29 = v1;
    uint64_t v10 = type metadata accessor for NearbyInvitationScanner();
    uint64_t v11 = >> prefix<A>(_:)((uint64_t)&v29, v10);
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v8 + 12) = 2112;
    uint64_t v29 = (uint64_t)v5;
    id v13 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl(&dword_257351000, v6, v7, "%s Did lose NearbyAdvertisement callback: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v27, -1, -1);
    MEMORY[0x25A2B6460](v8, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v14 = static UUID.== infix(_:_:)();
  if (v14)
  {
    MEMORY[0x270FA5388](v14);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    swift_getKeyPath();
    id v16 = (void (*)(uint64_t *, void))static Published.subscript.modify();

    v16(v28, 0);
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain_n();
    id v17 = v5;
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v28[0] = v22;
      *(_DWORD *)uint64_t v20 = 136315394;
      uint64_t v29 = v2;
      uint64_t v23 = type metadata accessor for NearbyInvitationScanner();
      uint64_t v24 = >> prefix<A>(_:)((uint64_t)&v29, v23);
      uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v20 + 12) = 2112;
      uint64_t v29 = (uint64_t)v17;
      id v26 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v21 = v17;

      _os_log_impl(&dword_257351000, v18, v19, "%s Ignored lost advertisement: %@ since it's not for our scanner", (uint8_t *)v20, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v21, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v22, -1, -1);
      MEMORY[0x25A2B6460](v20, -1, -1);
    }
    else
    {
      swift_release_n();
    }
  }
}

void @objc NearbyInvitationScanner.didLoseNearbyAdvertisement(advertisement:)(uint64_t a1, uint64_t a2, void *a3)
{
}

void @objc NearbyInvitationScanner.didDiscoverNearbyAdvertisement(advertisement:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(id))
{
  id v5 = a3;
  swift_retain();
  a4(v5);
  swift_release();
}

uint64_t NearbyInvitationScanner.didDiscoverNearbySessionInvitation(id:invitation:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a3, a4);
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a3, a4);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t type = v12;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v23 = v5;
    v24[0] = v21;
    *(_DWORD *)uint64_t v13 = 136315650;
    uint64_t v14 = type metadata accessor for NearbyInvitationScanner();
    uint64_t v15 = >> prefix<A>(_:)((uint64_t)&v23, v14);
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 22) = 2080;
    outlined copy of Data._Representation(a3, a4);
    uint64_t v17 = Data.description.getter();
    unint64_t v19 = v18;
    outlined consume of Data._Representation(a3, a4);
    uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data._Representation(a3, a4);
    _os_log_impl(&dword_257351000, v11, type, "%s Did discover NearbySessionInvitation callback: [%s:%s]", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v21, -1, -1);
    MEMORY[0x25A2B6460](v13, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    outlined consume of Data._Representation(a3, a4);
    outlined consume of Data._Representation(a3, a4);
  }

  v24[0] = a1;
  v24[1] = a2;
  v24[2] = a3;
  void v24[3] = a4;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a3, a4);
  PassthroughSubject.send(_:)();
  swift_bridgeObjectRelease();
  return outlined consume of Data._Representation(a3, a4);
}

uint64_t @objc NearbyInvitationScanner.didDiscoverNearbySessionInvitation(id:invitation:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;
  id v8 = a4;
  swift_retain();
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  NearbyInvitationScanner.didDiscoverNearbySessionInvitation(id:invitation:)(v5, v7, v9, v11);
  outlined consume of Data._Representation(v9, v11);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t key path getter for NearbyInvitationScanner.advertisements : <A>NearbyInvitationScanner<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t key path setter for NearbyInvitationScanner.advertisements : <A>NearbyInvitationScanner<A>()
{
  return NearbyInvitationScanner.advertisements.setter();
}

uint64_t NearbyInvitationScanner.advertisements.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t NearbyInvitationScanner.advertisements.setter()
{
  return static Published.subscript.setter();
}

uint64_t key path setter for NearbyInvitationScanner.$advertisements : <A>NearbyInvitationScanner<A>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyAdvertisement>>.Publisher);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return NearbyInvitationScanner.$advertisements.setter((uint64_t)v4);
}

uint64_t NearbyInvitationScanner.$advertisements.getter()
{
  return swift_endAccess();
}

uint64_t NearbyInvitationScanner.$advertisements.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyAdvertisement>>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyAdvertisement>>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t NearbyInvitationScanner.__allocating_init(provider:)()
{
  return specialized NearbyInvitationScanner.init(provider:)();
}

uint64_t NearbyInvitationScanner.__allocating_init(provider:configuration:)(uint64_t a1, void *a2)
{
  return specialized NearbyInvitationScanner.init(provider:configuration:)(a2);
}

uint64_t NearbyInvitationScanner.init(provider:configuration:)(uint64_t a1, void *a2)
{
  return specialized NearbyInvitationScanner.init(provider:configuration:)(a2);
}

uint64_t NearbyInvitationScanner.start()()
{
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 40) = *v0;
  return MEMORY[0x270FA2498](NearbyInvitationScanner.start(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  uint64_t v15 = v0;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.client);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[4];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v14 = v6;
    v0[2] = v4;
    uint64_t v7 = type metadata accessor for NearbyInvitationScanner();
    id v8 = >> prefix<A>(_:)((uint64_t)(v0 + 2), v7);
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v2, v3, "%s: client called start on NearbyInvitationsScanner", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v6, -1, -1);
    MEMORY[0x25A2B6460](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  unint64_t v10 = (void *)swift_task_alloc();
  v0[6] = v10;
  uint8_t *v10 = v0;
  v10[1] = NearbyInvitationAdvertiser.start();
  unint64_t v11 = v0[4];
  os_log_type_t v12 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA2360](v10, 0, 0, 0x29287472617473, 0xE700000000000000, partial apply for closure #1 in NearbyInvitationScanner.start(), v11, v12);
}

uint64_t closure #1 in NearbyInvitationScanner.start()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F34010]), sel_init);
  unsigned int v10 = objc_msgSend(v9, sel_wranglerHomePodBoopEnabled);

  if (v10 && (unint64_t v11 = *(void **)((char *)a2 + direct field offset for NearbyInvitationScanner.setup)) != 0)
  {
    v20[1] = *(uint64_t *)((char *)a2 + direct field offset for NearbyInvitationScanner.controller);
    uint64_t v12 = (uint64_t)a2 + direct field offset for NearbyInvitationScanner.uuid;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
    unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = *(void *)(v4 + 80);
    *(void *)(v14 + 24) = *(void *)(v4 + 88);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v14 + v13, v8, v5);
    *(void *)(v14 + ((v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
    id v15 = v11;
    swift_retain();
    NearbyInvitationsController.scanNearbyEndpoints(params:scannerID:response:)(v15, v12, (uint64_t)partial apply for closure #2 in closure #1 in NearbyInvitationScanner.start(), v14);
  }
  else
  {
    uint64_t v16 = (uint64_t)a2 + direct field offset for NearbyInvitationScanner.uuid;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
    unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = *(void *)(v4 + 80);
    *(void *)(v18 + 24) = *(void *)(v4 + 88);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v18 + v17, v8, v5);
    *(void *)(v18 + ((v7 + v17 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
    swift_retain();
    NearbyInvitationsController.scanNearbyInvitations(scannerID:response:)(v16, (uint64_t)partial apply for closure #2 in closure #1 in NearbyInvitationScanner.start(), v18);
  }
  return swift_release();
}

uint64_t closure #1 in closure #1 in NearbyInvitationScanner.start()(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    id v4 = a1;
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.client);
    id v6 = a1;
    id v7 = a1;
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unsigned int v10 = (uint8_t *)swift_slowAlloc();
      unint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)unsigned int v10 = 138412290;
      id v12 = a1;
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v11 = v24;

      _os_log_impl(&dword_257351000, v8, v9, "NearbyInvitationScanner could not start scanning - Error: %@", v10, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v11, -1, -1);
      MEMORY[0x25A2B6460](v10, -1, -1);
    }
    else
    {
    }
    uint64_t v24 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.client);
    swift_retain_n();
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)unint64_t v17 = 136315138;
      uint64_t v23 = a3;
      uint64_t v24 = v18;
      uint64_t v19 = type metadata accessor for NearbyInvitationScanner();
      uint64_t v20 = >> prefix<A>(_:)((uint64_t)&v23, v19);
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_257351000, v15, v16, "%s NearbyInvitationScanner did start scanning", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v18, -1, -1);
      MEMORY[0x25A2B6460](v17, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t NearbyInvitationScanner.stop()()
{
  *(void *)(v1 + 32) = v0;
  *(void *)(v1 + 40) = *v0;
  return MEMORY[0x270FA2498](NearbyInvitationScanner.stop(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  id v15 = v0;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.client);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = v0[4];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    id v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v14 = v6;
    v0[2] = v4;
    id v7 = type metadata accessor for NearbyInvitationScanner();
    id v8 = >> prefix<A>(_:)((uint64_t)(v0 + 2), v7);
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v2, v3, "%s: client called stop on NearbyInvitationsScanner", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v6, -1, -1);
    MEMORY[0x25A2B6460](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  unsigned int v10 = (void *)swift_task_alloc();
  v0[6] = v10;
  uint8_t *v10 = v0;
  v10[1] = NearbyInvitationAdvertiser.stop();
  unint64_t v11 = v0[4];
  id v12 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA2360](v10, 0, 0, 0x2928706F7473, 0xE600000000000000, partial apply for closure #1 in NearbyInvitationScanner.stop(), v11, v12);
}

uint64_t closure #1 in NearbyInvitationScanner.stop()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, v7, v4);
  NearbyInvitationsController.stopScanningNearbyInvitations(response:)((uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitationScanner.stop(), v9);
  swift_release();
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.client);
  swift_retain_n();
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)unint64_t v13 = 136315138;
    uint64_t v19 = a2;
    uint64_t v20 = v14;
    uint64_t v15 = type metadata accessor for NearbyInvitationScanner();
    uint64_t v16 = >> prefix<A>(_:)((uint64_t)&v19, v15);
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_257351000, v11, v12, "%s NearbyInvitationScanner did stop scanning", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v14, -1, -1);
    MEMORY[0x25A2B6460](v13, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  return CheckedContinuation.resume(returning:)();
}

void *closure #1 in closure #1 in NearbyInvitationScanner.stop()(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    id v2 = result;
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.client);
    id v4 = v1;
    id v5 = v1;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 138412290;
      id v10 = v1;
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v11;

      _os_log_impl(&dword_257351000, v6, v7, "NearbyInvitationScanner could not stop scanning Nearby Invitation - Error: %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v9, -1, -1);
      MEMORY[0x25A2B6460](v8, -1, -1);
    }
    else
    {
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return (void *)CheckedContinuation.resume(throwing:)();
  }
  return result;
}

uint64_t NearbyInvitationScanner.deinit()
{
  uint64_t v1 = v0 + direct field offset for NearbyInvitationScanner.uuid;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();

  uint64_t v3 = v0 + direct field offset for NearbyInvitationScanner._advertisements;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyAdvertisement>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t NearbyInvitationScanner.__deallocating_deinit()
{
  NearbyInvitationScanner.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[57] = a6;
  v7[58] = v6;
  v7[55] = a4;
  v7[56] = a5;
  v7[53] = a2;
  v7[54] = a3;
  v7[52] = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(String, Data), Never>>);
  v7[59] = v8;
  v7[60] = *(void *)(v8 - 8);
  v7[61] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(String, Data), Never>>.Iterator);
  v7[62] = v9;
  v7[63] = *(void *)(v9 - 8);
  v7[64] = swift_task_alloc();
  return MEMORY[0x270FA2498](NearbyInvitationScanner<>.request(_:displayName:userInfo:), 0, 0);
}

uint64_t NearbyInvitationScanner<>.request(_:displayName:userInfo:)()
{
  uint64_t v20 = v0;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[53];
  uint64_t v2 = type metadata accessor for Logger();
  v0[65] = __swift_project_value_buffer(v2, (uint64_t)static Log.client);
  swift_retain_n();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[58];
  uint64_t v8 = (void *)v0[53];
  if (v6)
  {
    uint64_t v9 = swift_slowAlloc();
    unint64_t v17 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = v18;
    *(_DWORD *)uint64_t v9 = 136315394;
    v0[49] = v7;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
    uint64_t v10 = String.init<A>(reflecting:)();
    v0[50] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2112;
    v0[51] = v8;
    id v12 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v17 = v8;

    _os_log_impl(&dword_257351000, v4, v5, "%s: about to request to be let in to NearbyAdvertisement %@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v17, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v18, -1, -1);
    MEMORY[0x25A2B6460](v9, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  unint64_t v13 = (void *)swift_task_alloc();
  v0[66] = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationJoinRequestMetadata?);
  *unint64_t v13 = v0;
  v13[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  uint64_t v15 = v0[58];
  return MEMORY[0x270FA2360](v0 + 43, 0, 0, 0xD000000000000020, 0x80000002573C2FC0, partial apply for closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:), v15, v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 536) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  else {
    uint64_t v2 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  uint64_t (*v13)(void);
  id v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;

  uint64_t v31 = v0;
  uint64_t v1 = (void *)v0[43];
  v0[68] = v1;
  if (v1)
  {
    swift_retain_n();
    uint64_t v2 = v1;
    id v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    os_log_type_t v5 = os_log_type_enabled(v3, v4);
    BOOL v6 = v0[58];
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = v2;
      id v30 = swift_slowAlloc();
      uint64_t v8 = v30;
      *(_DWORD *)uint64_t v7 = 136315138;
      v0[47] = v6;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      uint64_t v9 = String.init<A>(reflecting:)();
      v0[48] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_257351000, v3, v4, "%s requesting for preLMI, and now going to await for datablobs", v7, 0xCu);
      swift_arrayDestroy();
      unint64_t v11 = v8;
      uint64_t v2 = v29;
      MEMORY[0x25A2B6460](v11, -1, -1);
      MEMORY[0x25A2B6460](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F34010]), sel_init);
    uint64_t v16 = objc_msgSend(v15, sel_wranglerHomePodBoopEnabled);

    if (v16)
    {
      unint64_t v17 = v0[58];
      uint64_t v18 = v0[53];
      uint64_t v19 = (void *)swift_task_alloc();
      v0[69] = v19;
      void v19[2] = v17;
      v19[3] = v18;
      v19[4] = v2;
      uint64_t v20 = (void *)swift_task_alloc();
      v0[70] = v20;
      void *v20 = v0;
      uint64_t v21 = MEMORY[0x263F8EE60];
      v20[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
      uint64_t v22 = v21 + 8;
      uint64_t v23 = partial apply for closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:);
      uint64_t v24 = v19;
    }
    else
    {
      unint64_t v25 = v0[58];
      id v26 = v0[53];
      uint64_t v27 = (void *)swift_task_alloc();
      v0[80] = v27;
      void v27[2] = v25;
      v27[3] = v26;
      v27[4] = v2;
      uint64_t v28 = (void *)swift_task_alloc();
      v0[81] = v28;
      uint64_t v22 = type metadata accessor for InvitationBlob();
      v0[82] = v22;
      *uint64_t v28 = v0;
      v28[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
      uint64_t v23 = partial apply for closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:);
      uint64_t v20 = v0 + 42;
      uint64_t v24 = v27;
    }
    return MEMORY[0x270FA2360](v20, 0, 0, 0xD000000000000020, 0x80000002573C2FC0, v23, v24, v22);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>.Errors);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type NearbyInvitationScanner<NearbyGroup>.Errors and conformance NearbyInvitationScanner<A>.Errors, &demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>.Errors);
    swift_allocError();
    *id v12 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 568) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  uint64_t v18 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = v0[58];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v5 = swift_slowAlloc();
    unint64_t v17 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[45] = v3;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
    BOOL v6 = String.init<A>(reflecting:)();
    v0[46] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_257351000, v1, v2, "%s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v5, -1, -1);
    MEMORY[0x25A2B6460](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v9 = v0[60];
  uint64_t v8 = v0[61];
  uint64_t v10 = v0[59];
  v0[36] = *(void *)(v0[58] + direct field offset for NearbyInvitationScanner.invitationDataBlobs);
  unint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(String, Data), Never>);
  id v12 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<(String, Data), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(String, Data), Never>);
  MEMORY[0x25A2B55C0](v11, v12);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  v0[72] = OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier;
  unint64_t v13 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<PassthroughSubject<(String, Data), Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(String, Data), Never>>.Iterator);
  uint64_t v14 = (void *)swift_task_alloc();
  v0[73] = v14;
  *uint64_t v14 = v0;
  v14[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  uint64_t v15 = v0[62];
  return MEMORY[0x270FA1E80](v0 + 2, v15, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 592) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  else {
    uint64_t v2 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  BOOL v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned char *v36;
  uint64_t (*v37)(void);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  id v48;
  NSObject *v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  NSObject *log;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  os_log_type_t typea;
  os_log_type_t typeb[8];
  void *type;
  uint64_t v65;
  uint64_t v66[2];
  void *v67;
  uint64_t v68;

  uint64_t v67 = v0;
  uint64_t v1 = v0[2];
  id v3 = v0[3];
  uint64_t v2 = v0[4];
  v0[75] = v2;
  uint64_t v4 = v0[5];
  v0[76] = v4;
  if (!v3)
  {
    (*(void (**)(void, void))(v0[63] + 8))(v0[64], v0[62]);
    swift_retain_n();
    uint64_t v16 = Logger.logObject.getter();
    unint64_t v17 = static os_log_type_t.default.getter();
    uint64_t v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = v0[58];
    if (v18)
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      v66[0] = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      v0[39] = v19;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      uint64_t v22 = String.init<A>(reflecting:)();
      v0[40] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_257351000, v16, v17, "%s scanner could not request for invitation request for NearbyGroups", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v21, -1, -1);
      MEMORY[0x25A2B6460](v20, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    unint64_t v35 = (void *)v0[68];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>.Errors);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type NearbyInvitationScanner<NearbyGroup>.Errors and conformance NearbyInvitationScanner<A>.Errors, &demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>.Errors);
    swift_allocError();
    *id v36 = 1;
    swift_willThrow();

    goto LABEL_14;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v2, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v2, v4);
  os_log_type_t v5 = Logger.logObject.getter();
  BOOL v6 = static os_log_type_t.default.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[58];
  if (v7)
  {
    typea = v6;
    uint64_t v9 = swift_slowAlloc();
    id v60 = swift_slowAlloc();
    v66[0] = v60;
    *(_DWORD *)uint64_t v9 = 136315650;
    v0[44] = v8;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
    uint64_t v10 = String.init<A>(reflecting:)();
    *(void *)(v9 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v66);
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v9 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v3, v66);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 22) = 2080;
    outlined copy of Data._Representation(v2, v4);
    id v12 = Data.description.getter();
    uint64_t v14 = v13;
    outlined consume of Data._Representation(v2, v4);
    *(void *)(v9 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v66);
    uint64_t v15 = v1;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v2, v4);
    outlined consume of Data._Representation(v2, v4);
    _os_log_impl(&dword_257351000, v5, typea, "%s Starting to request: [%s:%s]", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v60, -1, -1);
    MEMORY[0x25A2B6460](v9, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    outlined consume of Data._Representation(v2, v4);
    outlined consume of Data._Representation(v2, v4);

    uint64_t v15 = v1;
  }
  uint64_t v24 = (uint64_t *)(v0[53] + v0[72]);
  id v26 = *v24;
  unint64_t v25 = v24[1];
  if (v15 == *v24 && v3 == v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v27 = v0[74];
    uint64_t v29 = v0[56];
    uint64_t v28 = v0[57];
    swift_bridgeObjectRelease();
    outlined copy of Data._Representation(v2, v4);
    outlined copy of Data?(v29, v28);
    swift_bridgeObjectRetain();
    id v30 = specialized static NearbyInvitationData.create(from:)(v2, v4);
    if (v27)
    {
      uint64_t v31 = (void *)v0[68];
      id v33 = v0[63];
      uint64_t v32 = v0[64];
      uint64_t v34 = v0[62];
      outlined consume of Data?(v0[56], v0[57]);
      outlined consume of Data._Representation(v2, v4);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);

      outlined consume of Data._Representation(v2, v4);
LABEL_14:
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v37 = (uint64_t (*)(void))v0[1];
      return v37();
    }
    uint64_t v39 = v30;
    int v65 = v0[57];
    uint64_t v40 = v0[55];
    *(void *)typeb = v0[56];
    os_log_type_t v41 = v0[54];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>);
    unint64_t v42 = (void *)swift_allocObject();
    v0[77] = v42;
    v42[3] = 0;
    v42[4] = 0;
    v42[2] = 0;
    v42[5] = 0xF000000000000000;
    v42[6] = v39;
    swift_beginAccess();
    v42[2] = v41;
    v42[3] = v40;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v43 = v42[4];
    uint64_t v44 = v42[5];
    v42[4] = *(void *)typeb;
    v42[5] = v65;
    outlined consume of Data?(v43, v44);
    outlined consume of Data._Representation(v2, v4);
    id v45 = (void *)swift_task_alloc();
    v0[78] = v45;
    *id v45 = v0;
    v45[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
    id v46 = v0[52];
    return InvitationRequest<>.request()(v46);
  }
  else
  {
    id v47 = (void *)v0[53];
    swift_retain_n();
    id v48 = v47;
    swift_bridgeObjectRetain();
    id v49 = Logger.logObject.getter();
    uint64_t v61 = static os_log_type_t.error.getter();
    unsigned __int8 v50 = os_log_type_enabled(v49, v61);
    id v51 = v0[58];
    os_log_type_t type = (void *)v0[53];
    if (v50)
    {
      log = v49;
      int v52 = swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      v66[0] = v59;
      *(_DWORD *)int v52 = 136315650;
      v0[41] = v51;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      os_log_type_t v53 = String.init<A>(reflecting:)();
      *(void *)(v52 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v66);
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v52 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v52 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v3, v66);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v52 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v52 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, v66);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_257351000, log, v61, "%s: Datablob does not have valid id %s and advertisement = %s", (uint8_t *)v52, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v59, -1, -1);
      MEMORY[0x25A2B6460](v52, -1, -1);

      outlined consume of Data._Representation(v2, v4);
    }
    else
    {
      outlined consume of Data._Representation(v2, v4);
      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    id v55 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<PassthroughSubject<(String, Data), Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<PassthroughSubject<(String, Data), Never>>.Iterator);
    uint64_t v56 = (void *)swift_task_alloc();
    v0[73] = v56;
    uint64_t *v56 = v0;
    v56[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
    uint64_t v57 = v0[62];
    return MEMORY[0x270FA1E80](v0 + 2, v57, v55);
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 304) = *(void *)(v0 + 592);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;

  uint64_t v1 = v0[76];
  uint64_t v2 = v0[75];
  id v3 = (void *)v0[68];
  os_log_type_t v5 = v0[63];
  uint64_t v4 = v0[64];
  BOOL v6 = v0[62];
  swift_release();

  outlined consume of Data._Representation(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = v0[19];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 664) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  void *v43;
  id v44;
  id v45;
  NSObject *v46;
  BOOL v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned char *v53;
  uint64_t (*v54)(void);
  void *v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t type;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62[2];
  void *v63;
  uint64_t v64;

  uint64_t v63 = v0;
  uint64_t v1 = (void *)v0[42];
  v0[84] = v1;
  uint64_t v2 = v1;
  id v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.default.getter();
  id v60 = v2;
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    BOOL v6 = swift_slowAlloc();
    v62[0] = v6;
    *(_DWORD *)os_log_type_t v5 = 136315138;
    v0[34] = v60;
    uint64_t v7 = v60;
    uint64_t v8 = String.init<A>(reflecting:)();
    v0[35] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v3, v4, "Received connection Info %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v6, -1, -1);
    uint64_t v10 = v5;
    uint64_t v2 = v60;
    MEMORY[0x25A2B6460](v10, -1, -1);
  }
  else
  {
  }
  unint64_t v11 = v0[53];
  unint64_t v13 = *(void *)&v2[OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID];
  id v12 = *(void *)&v2[OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID + 8];
  uint64_t v14 = &v2[OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob];
  uint64_t v15 = *(void *)&v2[OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob];
  v0[85] = v15;
  uint64_t v16 = *((void *)v14 + 1);
  v0[86] = v16;
  unint64_t v17 = (uint64_t *)(v11 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  uint64_t v20 = v13 == *v17 && v12 == v18;
  if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v43 = (void *)v0[53];
    swift_retain_n();
    uint64_t v44 = v43;
    swift_bridgeObjectRetain();
    id v45 = v44;
    outlined copy of Data._Representation(v15, v16);
    swift_bridgeObjectRetain();
    id v46 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.default.getter();
    id v47 = os_log_type_enabled(v46, type);
    id v48 = v0[58];
    id v49 = (void *)v0[53];
    if (v47)
    {
      id v55 = (void *)v0[53];
      unsigned __int8 v50 = swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      v62[0] = v57;
      *(_DWORD *)unsigned __int8 v50 = 136315650;
      v0[37] = v48;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      id v51 = String.init<A>(reflecting:)();
      v0[26] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v50 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v50 + 22) = 2080;
      swift_bridgeObjectRetain();
      v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_257351000, v46, type, "%s: Datablob does not have valid id %s and advertisement = %s", (uint8_t *)v50, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v57, -1, -1);
      MEMORY[0x25A2B6460](v50, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    id v33 = (void *)v0[68];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>.Errors);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type NearbyInvitationScanner<NearbyGroup>.Errors and conformance NearbyInvitationScanner<A>.Errors, &demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>.Errors);
    swift_allocError();
    *os_log_type_t v53 = 0;
    swift_willThrow();
    goto LABEL_21;
  }
  outlined copy of Data._Representation(v15, v16);
  swift_retain();
  outlined copy of Data._Representation(v15, v16);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Data._Representation(v15, v16);
  swift_bridgeObjectRetain();
  uint64_t v21 = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.default.getter();
  uint64_t v23 = os_log_type_enabled(v21, v22);
  uint64_t v24 = v0[58];
  if (v23)
  {
    unint64_t v25 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    v62[0] = v56;
    *(_DWORD *)unint64_t v25 = 136315650;
    v0[30] = v24;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
    id v26 = String.init<A>(reflecting:)();
    v0[31] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v25 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 22) = 2080;
    outlined copy of Data._Representation(v15, v16);
    uint64_t v28 = Data.description.getter();
    id v30 = v29;
    outlined consume of Data._Representation(v15, v16);
    v0[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v15, v16);
    outlined consume of Data._Representation(v15, v16);
    _os_log_impl(&dword_257351000, v21, v22, "%s Starting to request: [%s:%s]", (uint8_t *)v25, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v56, -1, -1);
    MEMORY[0x25A2B6460](v25, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    outlined consume of Data._Representation(v15, v16);
    outlined consume of Data._Representation(v15, v16);
  }

  uint64_t v31 = v0[83];
  outlined copy of Data?(v0[56], v0[57]);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v15, v16);
  uint64_t v32 = specialized static NearbyInvitationData.create(from:)(v15, v16);
  if (v31)
  {
    id v33 = (void *)v0[68];
    outlined consume of Data?(v0[56], v0[57]);
    outlined consume of Data._Representation(v15, v16);
    swift_bridgeObjectRelease();
LABEL_21:
    outlined consume of Data._Representation(v15, v16);

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v54 = (uint64_t (*)(void))v0[1];
    return v54();
  }
  uint64_t v34 = v32;
  uint64_t v61 = v0[57];
  unint64_t v35 = v0[55];
  uint64_t v59 = v0[56];
  id v36 = v0[54];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>);
  uint64_t v37 = (void *)swift_allocObject();
  v0[87] = v37;
  v37[3] = 0;
  v37[4] = 0;
  v37[2] = 0;
  v37[5] = 0xF000000000000000;
  v37[6] = v34;
  swift_beginAccess();
  v37[2] = v36;
  v37[3] = v35;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  id v38 = v37[4];
  uint64_t v39 = v37[5];
  v37[4] = v59;
  v37[5] = v61;
  outlined consume of Data?(v38, v39);
  outlined consume of Data._Representation(v15, v16);
  uint64_t v40 = (void *)swift_task_alloc();
  v0[88] = v40;
  objc_class *v40 = v0;
  v40[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  os_log_type_t v41 = v0[52];
  return InvitationRequest<>.request()(v41);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[86];
  uint64_t v2 = v0[85];
  id v3 = (void *)v0[84];
  uint64_t v4 = (void *)v0[68];
  os_log_type_t v5 = v0[58];
  BOOL v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  swift_retain();
  uint64_t v7 = v4;
  NearbyInvitationsController.releaseInvitation(_:response:)(v7, (uint64_t)closure #1 in $defer #1 <A>() in NearbyInvitationScanner<>.request(_:displayName:userInfo:)partial apply, v6);
  swift_release();
  swift_release();
  outlined consume of Data._Representation(v2, v1);

  uint64_t v8 = v0[22];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
  return v9(v8);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 544);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[76];
  uint64_t v2 = v0[75];
  id v3 = (void *)v0[68];
  os_log_type_t v5 = v0[63];
  uint64_t v4 = v0[64];
  BOOL v6 = v0[62];
  swift_willThrow();

  swift_release();
  outlined consume of Data._Representation(v2, v1);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 544);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t (*v22)(void);
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  id v26 = v0;
  uint64_t v1 = (void *)v0[89];
  swift_retain();
  uint64_t v2 = v1;
  swift_retain();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    BOOL v6 = (void *)v0[89];
    uint64_t v7 = v0[58];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    unint64_t v25 = v24;
    *(_DWORD *)uint64_t v8 = 136315394;
    v0[27] = v7;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
    uint64_t v10 = String.init<A>(reflecting:)();
    v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v8 + 12) = 2112;
    id v12 = v6;
    unint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[29] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v13;

    _os_log_impl(&dword_257351000, v4, v5, "%s scanner could not request for invitation request for NearbyGroups %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v24, -1, -1);
    MEMORY[0x25A2B6460](v8, -1, -1);
  }
  else
  {
    uint64_t v14 = (void *)v0[89];
    swift_release_n();
  }
  uint64_t v15 = v0[86];
  uint64_t v16 = v0[85];
  unint64_t v17 = (void *)v0[84];
  uint64_t v18 = (void *)v0[68];
  uint64_t v19 = v0[58];
  swift_willThrow();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = v18;
  swift_retain();
  uint64_t v21 = v18;
  NearbyInvitationsController.releaseInvitation(_:response:)(v21, (uint64_t)partial apply for closure #1 in $defer #1 <A>() in NearbyInvitationScanner<>.request(_:displayName:userInfo:), v20);
  swift_release();
  swift_release();
  outlined consume of Data._Representation(v16, v15);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 48));
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1)
{
  id v3 = (void *)*v2;
  v3[18] = v2;
  v3[19] = a1;
  v3[20] = v1;
  v3[79] = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  else {
    uint64_t v4 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t (*v4)();
  uint64_t v6;

  id v3 = (void *)*v2;
  v3[21] = v2;
  v3[22] = a1;
  v3[23] = v1;
  v3[89] = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  else {
    uint64_t v4 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 40) = v1;
  swift_task_dealloc();
  if (v1)
  {
    os_log_type_t v5 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  else
  {
    v4[6] = a1;
    outlined consume of Data?(v4[2], v4[3]);
    os_log_type_t v5 = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata?, Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v9 = (v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v8, v7, v4);
  *(void *)(v10 + v9) = a2;
  swift_retain();
  NearbyInvitationsController.generateNearbyInvitation(response:)((uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:), v10);
  return swift_release();
}

uint64_t closure #1 in closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1, id a2)
{
  v17[1] = *MEMORY[0x263EF8340];
  if (a2)
  {
    v17[0] = (uint64_t)a2;
    id v2 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata?, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.client);
    id v6 = a1;
    swift_retain_n();
    id v7 = v6;
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      v17[0] = v16;
      *(_DWORD *)uint64_t v10 = 136315394;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      uint64_t v11 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2112;
      if (a1) {
        id v13 = v7;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = a1;

      _os_log_impl(&dword_257351000, v8, v9, "%s scanner is generating metadata %@", (uint8_t *)v10, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v15, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v16, -1, -1);
      MEMORY[0x25A2B6460](v10, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    v17[0] = (uint64_t)a1;
    id v14 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata?, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  id v13 = a3;
  swift_retain();
  NearbyInvitationsController.requestEndpointConnection(with:pseudonym:response:)(v13, a4, (uint64_t)partial apply for closure #1 in closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:), v12);
  return swift_release();
}

void closure #1 in closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1, void *a2)
{
  if (a1)
  {
    id v4 = a1;
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.client);
    id v6 = a2;
    id v7 = a1;
    id v8 = v6;
    id v9 = a1;
    oslog = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412546;
      id v13 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v12 = v8;

      *(_WORD *)(v11 + 12) = 2112;
      id v14 = a1;
      uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v12[1] = v26;

      _os_log_impl(&dword_257351000, oslog, v10, "We could not establish connection to our endpoint %@ with err: %@", (uint8_t *)v11, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v12, -1, -1);
      MEMORY[0x25A2B6460](v11, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.client);
    swift_retain_n();
    id v16 = a2;
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v26 = v21;
      *(_DWORD *)uint64_t v19 = 136315394;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      uint64_t v22 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2112;
      id v24 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v16;

      _os_log_impl(&dword_257351000, v17, v18, "%s scanner is requesting connection to our endpoint %@", (uint8_t *)v19, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v20, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v21, -1, -1);
      MEMORY[0x25A2B6460](v19, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v19 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationBlob, Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  os_log_type_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a2 + direct field offset for NearbyInvitationScanner.controller);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v12 = (v9 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15 + v11, v10, v7);
  *(void *)(v15 + v12) = a2;
  *(void *)(v15 + v13) = a3;
  id v16 = v19;
  *(void *)(v15 + v14) = v19;
  swift_retain();
  NearbyInvitationsController.requestConnection(with:localInvitation:response:)(a3, v16, (uint64_t)partial apply for closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:), v15);
  return swift_release();
}

uint64_t closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1, void *a2, uint64_t a3, uint64_t a4, NSObject *a5, void *a6)
{
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v36 = (uint64_t)a2;
    id v16 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationBlob, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (!a1)
    {
      id v33 = v15;
      uint64_t v34 = v13;
      if (one-time initialization token for client != -1) {
        goto LABEL_9;
      }
      while (1)
      {
        uint64_t v20 = v34;
        uint64_t v21 = __swift_project_value_buffer(v34, (uint64_t)static Log.client);
        (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v33, v21, v20);
        swift_retain_n();
        uint64_t v22 = a5;
        a5 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(a5, v23))
        {
          uint64_t v24 = swift_slowAlloc();
          unint64_t v25 = (void *)swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          uint64_t v35 = a4;
          uint64_t v36 = v32;
          *(_DWORD *)uint64_t v24 = 136315650;
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
          uint64_t v26 = String.init<A>(reflecting:)();
          uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v24 + 12) = 2112;
          uint64_t v35 = (uint64_t)v22;
          uint64_t v28 = v22;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v25 = v22;

          *(_WORD *)(v24 + 22) = 2080;
          uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7104878, 0xE300000000000000, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl(&dword_257351000, a5, v23, "%s: Failed to get InvitationData from requestConnection(with: %@, error: %s", (uint8_t *)v24, 0x20u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x25A2B6460](v25, -1, -1);
          a4 = v32;
          swift_arrayDestroy();
          MEMORY[0x25A2B6460](a4, -1, -1);
          MEMORY[0x25A2B6460](v24, -1, -1);

          uint64_t v29 = *(void (**)(char *, uint64_t))(v12 + 8);
          v12 += 8;
          v29(v33, v34);
          __break(1u);
        }

        swift_release_n();
        id v30 = *(void (**)(char *, uint64_t))(v12 + 8);
        v12 += 8;
        v30(v33, v34);
        __break(1u);
LABEL_9:
        swift_once();
      }
    }
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = a4;
    *(void *)(v18 + 24) = a6;
    swift_retain();
    id v19 = a1;
    NearbyInvitationsController.markInvitationUsed(_:response:)(a6, (uint64_t)partial apply for closure #1 in closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:), v18);
    swift_release();
    uint64_t v36 = (uint64_t)v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationBlob, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 32) = v11;
  *uint64_t v11 = v5;
  v11[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  return NearbyInvitationScanner<>.request(_:displayName:userInfo:)(v5 + 16, a1, a2, a3, a4, a5);
}

void closure #1 in closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1, uint64_t a2, void *a3, const char *a4, const char *a5)
{
  if (a1)
  {
    id v8 = a1;
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.client);
    swift_retain();
    id v10 = a3;
    id v11 = a1;
    swift_retain();
    id v12 = v10;
    id v13 = a1;
    oslog = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      id v16 = (void *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v35 = v31;
      *(_DWORD *)uint64_t v15 = 136315650;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      uint64_t v17 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2112;
      id v19 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v16 = v12;

      *(_WORD *)(v15 + 22) = 2112;
      id v20 = a1;
      uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v16[1] = v34;

      _os_log_impl(&dword_257351000, oslog, v14, a4, (uint8_t *)v15, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v16, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v31, -1, -1);
      MEMORY[0x25A2B6460](v15, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
  else
  {
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.client);
    swift_retain_n();
    id v23 = a3;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      unint64_t v27 = (void *)swift_slowAlloc();
      os_log_t osloga = (os_log_t)swift_slowAlloc();
      uint64_t v35 = (uint64_t)osloga;
      *(_DWORD *)uint64_t v26 = 136315394;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitationScanner<NearbyGroup>);
      uint64_t v28 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2112;
      id v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v27 = v23;

      _os_log_impl(&dword_257351000, v24, v25, a5, (uint8_t *)v26, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v27, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](osloga, -1, -1);
      MEMORY[0x25A2B6460](v26, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t type metadata accessor for NearbyInvitationScanner()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_257387D7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_257387DC8()
{
  return NearbyInvitationScanner.advertisements.setter();
}

uint64_t sub_257387DF4()
{
  return 16;
}

__n128 sub_257387E00(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  id v3 = v2;
  uint64_t v6 = type metadata accessor for AddressableMember();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v33 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    unint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v12;
    uint64_t v28 = v7;
    id v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    os_log_type_t v14 = v16;
    uint64_t v32 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v27[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v32 * v13;
      unint64_t v20 = *(void *)(v10 + 48) + v32 * v13;
      uint64_t v21 = v14;
      v14(v9, v20, v6);
      lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v23 = *v17;
      (*v17)(v9, v6);
      if (v22) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v31;
      os_log_type_t v14 = v21;
      uint64_t v10 = v18;
      if (((*(void *)(v33 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        id v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    os_log_type_t v25 = v34;
    v14(v9, v34, v6);
    uint64_t v35 = *v3;
    *id v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *id v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(void))type metadata accessor for NearbyGroupMember, &demangling cache variable for type metadata for _SetStorage<NearbyGroupMember>, (void (*)(void))type metadata accessor for NearbyGroupMember);
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2, void (*a3)(void), uint64_t *a4, void (*a5)(void))
{
  uint64_t v9 = v5;
  uint64_t v12 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v12 < 0) {
      uint64_t v13 = *v5;
    }
    else {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v14 = a2;
    uint64_t v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      swift_bridgeObjectRelease();

      a3(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v38;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v28 = specialized _NativeSet.init(_:capacity:)(v13, result + 1, a4, a5);
    uint64_t v39 = (void *)v28;
    unint64_t v29 = *(void *)(v28 + 16);
    if (*(void *)(v28 + 24) <= v29)
    {
      uint64_t v34 = v29 + 1;
      id v35 = v14;
      specialized _NativeSet.resize(capacity:)(v34, a4);
      uint64_t v30 = v39;
    }
    else
    {
      uint64_t v30 = (void *)v28;
      id v31 = v14;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v14, v30);
    *uint64_t v9 = (uint64_t)v30;
    swift_bridgeObjectRelease();
    *a1 = v14;
  }
  else
  {
    Swift::Int v17 = *(void *)(v12 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v18 = NSObject._rawHashValue(seed:)(v17);
    uint64_t v19 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v20 = v18 & ~v19;
    if ((*(void *)(v12 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20))
    {
      a3(0);
      id v21 = *(id *)(*(void *)(v12 + 48) + 8 * v20);
      char v22 = static NSObject.== infix(_:_:)();

      if (v22)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v26 = *(void **)(*(void *)(*v9 + 48) + 8 * v20);
        *a1 = v26;
        id v27 = v26;
        return 0;
      }
      uint64_t v23 = ~v19;
      while (1)
      {
        unint64_t v20 = (v20 + 1) & v23;
        if (((*(void *)(v12 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
          break;
        }
        id v24 = *(id *)(*(void *)(v12 + 48) + 8 * v20);
        char v25 = static NSObject.== infix(_:_:)();

        if (v25) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v40 = *v9;
    *uint64_t v9 = 0x8000000000000000;
    id v33 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v33, v20, isUniquelyReferenced_nonNull_native, a4, a5);
    *uint64_t v9 = v40;
    swift_bridgeObjectRelease();
    *a1 = v33;
  }
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3, Swift::Int a4, Swift::Int a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (a5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  unint64_t v15 = v13 & ~v14;
  uint64_t v16 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
  {
    uint64_t v30 = v5;
    id v31 = a1;
    uint64_t v17 = ~v14;
    uint64_t v18 = *(void *)(v12 + 48);
    while (1)
    {
      uint64_t v19 = (void *)(v18 + 32 * v15);
      uint64_t v21 = v19[2];
      uint64_t v20 = v19[3];
      BOOL v22 = *v19 == a2 && v19[1] == a3;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v20)
        {
          if (a5)
          {
            BOOL v23 = v21 == a4 && v20 == a5;
            if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_24:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v26 = (Swift::Int *)(*(void *)(*v30 + 48) + 32 * v15);
              Swift::Int v27 = v26[1];
              Swift::Int v29 = v26[2];
              Swift::Int v28 = v26[3];
              *id v31 = *v26;
              v31[1] = v27;
              v31[2] = v29;
              v31[3] = v28;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              return 0;
            }
          }
        }
        else if (!a5)
        {
          goto LABEL_24;
        }
      }
      unint64_t v15 = (v15 + 1) & v17;
      if (((*(void *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = v30;
        a1 = v31;
        goto LABEL_23;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_23:
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v32 = *v6;
  *uint64_t v6 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, a5, v15, isUniquelyReferenced_nonNull_native);
  *uint64_t v6 = v32;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  uint64_t result = 1;
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      a4(0);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          specialized _NativeSet.resize(capacity:)(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v6;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyInvitation<NearbyGroup>.PendingMember>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    Swift::Int v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_31;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_31;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v9)
            {
LABEL_31:
              swift_release();
              uint64_t v1 = v28;
              uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
              if (v27 > 63) {
                bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v6 = -1 << v27;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v17 = v6[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v12 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_37;
                }
                if (v12 >= v9) {
                  goto LABEL_31;
                }
                unint64_t v17 = v6[v12];
                ++v18;
                if (v17) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v12 = v18;
          }
        }
LABEL_21:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(*(void *)(v2 + 48) + 16 * v15, (uint64_t)v29);
      Hasher.init(_seed:)();
      id v19 = v29[0];
      NSObject.hash(into:)();

      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t result = outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v29, *(void *)(v4 + 48) + 16 * v13);
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  unint64_t v42 = type metadata accessor for AddressableMember();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  os_log_type_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    unint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      int64_t v9 = ~(-1 << v7);
    }
    else {
      int64_t v9 = -1;
    }
    uint64_t v10 = v9 & v8;
    id v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    unint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    unint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        int64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        id v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        uint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          uint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            uint64_t v20 = v37[v21];
            if (!v20)
            {
              unint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              uint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  uint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        int64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      char v23 = v4;
      unint64_t v24 = *(void *)(v4 + 48);
      BOOL v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      Swift::Int v28 = result & ~v27;
      Swift::Int v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        int64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        id v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            Swift::Int v29 = 0;
          }
          v30 |= v32;
          id v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        int64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyGroup.Member>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v32 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    id v31 = (unint64_t)(v5 + 63) >> 6;
    unint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        unint64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v15 >= v31) {
          goto LABEL_36;
        }
        int64_t v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          uint64_t v10 = v15 + 1;
          if (v15 + 1 >= v31) {
            goto LABEL_36;
          }
          int64_t v16 = v32[v10];
          if (!v16)
          {
            uint64_t v10 = v15 + 2;
            if (v15 + 2 >= v31) {
              goto LABEL_36;
            }
            int64_t v16 = v32[v10];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v32 = -1 << v30;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_42;
                  }
                  if (v10 >= v31) {
                    goto LABEL_36;
                  }
                  int64_t v16 = v32[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v10 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      int64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 32 * v14);
      id v19 = *v18;
      uint64_t v20 = v18[1];
      unint64_t v22 = v18[2];
      unint64_t v21 = v18[3];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v21)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      char v23 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v24 = result & ~v23;
      BOOL v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          Swift::Int v28 = v25 == v27;
          if (v25 == v27) {
            BOOL v25 = 0;
          }
          v26 |= v28;
          Swift::Int v29 = *(void *)(v8 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      int64_t v12 = (void *)(*(void *)(v4 + 48) + 32 * v11);
      *int64_t v12 = v19;
      v12[1] = v20;
      v12[2] = v22;
      uint64_t v12[3] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    unint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(id *a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  id v10 = *a1;
  NSObject.hash(into:)();

  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v11 & ~v12;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v13 = ~v12;
    type metadata accessor for NSObject();
    do
    {
      outlined init with copy of NearbyInvitation<NearbyGroup>.PendingMember(*(void *)(v9 + 48) + 16 * a2, (uint64_t)v20);
      char v14 = static NSObject.== infix(_:_:)();
      outlined destroy of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v20);
      if (v14) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v13;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v15 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)a1, *(void *)(v15 + 48) + 16 * a2);
  uint64_t v17 = *(void *)(v15 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (!v18)
  {
    *(void *)(v15 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_15:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for AddressableMember();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, void (*a5)(void))
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()(a4);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    a5(0);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, Swift::Int a3, Swift::Int a4, unint64_t a5, char a6)
{
  Swift::Int v11 = result;
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0) {
    goto LABEL_28;
  }
  if (a6)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v13 > v12)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_28;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v14 = *v6;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (a4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t result = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v14 + 32);
  a5 = result & ~v15;
  uint64_t v16 = v14 + 56;
  if ((*(void *)(v14 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a5))
  {
    uint64_t v17 = ~v15;
    uint64_t v18 = *(void *)(v14 + 48);
    do
    {
      char v19 = (Swift::Int *)(v18 + 32 * a5);
      uint64_t result = *v19;
      Swift::Int v21 = v19[2];
      Swift::Int v20 = v19[3];
      BOOL v22 = *v19 == v11 && v19[1] == a2;
      if (v22 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if (v20)
        {
          if (a4)
          {
            BOOL v23 = v21 == a3 && v20 == a4;
            if (v23 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
LABEL_27:
              uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              break;
            }
          }
        }
        else if (!a4)
        {
          goto LABEL_27;
        }
      }
      a5 = (a5 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a5) & 1) != 0);
  }
LABEL_28:
  uint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  uint64_t v25 = (Swift::Int *)(*(void *)(v24 + 48) + 32 * a5);
  *uint64_t v25 = v11;
  v25[1] = a2;
  void v25[2] = a3;
  id v25[3] = a4;
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v28;
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyInvitation<NearbyGroup>.PendingMember>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    outlined init with copy of NearbyInvitation<NearbyGroup>.PendingMember(*(void *)(v2 + 48) + 16 * v15, (uint64_t)v20);
    uint64_t result = (void *)outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v20, *(void *)(v4 + 48) + v16);
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AddressableMember();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  BOOL v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  BOOL v23 = v6 + 56;
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  uint64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    unint64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    int64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      uint64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      int64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        uint64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        int64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    uint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    int64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  Swift::Int v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  int64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    uint64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    int64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyGroup.Member>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    BOOL v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_28;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        BOOL v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = v17[1];
    Swift::Int v20 = v17[2];
    int64_t v19 = v17[3];
    Swift::Int v21 = (void *)(*(void *)(v4 + 48) + v16);
    *Swift::Int v21 = *v17;
    v21[1] = v18;
    void v21[2] = v20;
    v21[3] = v19;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyInvitation<NearbyGroup>.PendingMember>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_33:
    *uint64_t v1 = v4;
    return result;
  }
  BOOL v27 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_22;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v16 >= v9) {
      goto LABEL_31;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_31;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17) {
        break;
      }
    }
LABEL_21:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_22:
    outlined init with copy of NearbyInvitation<NearbyGroup>.PendingMember(*(void *)(v2 + 48) + 16 * v15, (uint64_t)v28);
    Hasher.init(_seed:)();
    id v19 = v28[0];
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t result = outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)v28, *(void *)(v4 + 48) + 16 * v13);
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 2;
  if (v18 >= v9)
  {
LABEL_31:
    uint64_t result = swift_release_n();
    uint64_t v1 = v27;
    goto LABEL_33;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_31;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_21;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AddressableMember();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  id v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  int64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      int64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      id v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    uint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v12 = (v21 - 1) & v21;
    id v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    char v23 = v6;
    unint64_t v24 = *(void *)(v6 + 48);
    BOOL v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    BOOL v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  unint64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NearbyGroup.Member>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v30 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  uint64_t v31 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v31) {
      goto LABEL_36;
    }
    int64_t v16 = *(void *)(v30 + 8 * v15);
    ++v10;
    if (!v16)
    {
      uint64_t v10 = v15 + 1;
      if (v15 + 1 >= v31) {
        goto LABEL_36;
      }
      int64_t v16 = *(void *)(v30 + 8 * v10);
      if (!v16)
      {
        uint64_t v10 = v15 + 2;
        if (v15 + 2 >= v31) {
          goto LABEL_36;
        }
        int64_t v16 = *(void *)(v30 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    int64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 32 * v14);
    id v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v22 = v18[2];
    unint64_t v21 = v18[3];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v21)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    char v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = result & ~v23;
    BOOL v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          BOOL v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v8 + 8 * v25);
      }
      while (v29 == -1);
      uint64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    int64_t v12 = (void *)(*(void *)(v4 + 48) + 32 * v11);
    *int64_t v12 = v19;
    v12[1] = v20;
    v12[2] = v22;
    uint64_t v12[3] = v21;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_38;
  }
  int64_t v16 = *(void *)(v30 + 8 * v17);
  if (v16)
  {
    uint64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_36;
    }
    int64_t v16 = *(void *)(v30 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  uint64_t v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v5 = a1;
    char v6 = __CocoaSet.contains(_:)();

    if (v6)
    {
      uint64_t v7 = specialized Set._Variant._migrateToNative(_:removing:)();
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v8 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v9 = NSObject._rawHashValue(seed:)(v8);
  uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    goto LABEL_12;
  }
  type metadata accessor for NearbyAdvertisement(0);
  id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    uint64_t v14 = ~v10;
    do
    {
      unint64_t v11 = (v11 + 1) & v14;
      if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_12;
      }
      id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
      char v16 = static NSObject.== infix(_:_:)();
    }
    while ((v16 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *v2;
  uint64_t v20 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<NearbyAdvertisement>);
    uint64_t v18 = v20;
  }
  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v11);
  specialized _NativeSet._delete(at:)(v11);
  *uint64_t v2 = v20;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  Swift::Int v4 = specialized _NativeSet.init(_:capacity:)(v3, v2, &demangling cache variable for type metadata for _SetStorage<NearbyAdvertisement>, (void (*)(void))type metadata accessor for NearbyAdvertisement);
  Swift::Int v16 = v4;
  Swift::Int v5 = *(void *)(v4 + 40);
  swift_retain();
  Swift::Int v6 = NSObject._rawHashValue(seed:)(v5);
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    type metadata accessor for NearbyAdvertisement(0);
    id v9 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
    char v10 = static NSObject.== infix(_:_:)();

    if (v10)
    {
LABEL_6:
      swift_release();
      uint64_t v14 = *(void *)(*(void *)(v4 + 48) + 8 * v8);
      specialized _NativeSet._delete(at:)(v8);
      if (static NSObject.== infix(_:_:)())
      {
        *uint64_t v1 = v16;
        return v14;
      }
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v7;
      while (1)
      {
        unint64_t v8 = (v8 + 1) & v11;
        if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
        char v13 = static NSObject.== infix(_:_:)();

        if (v13) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            unint64_t v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *unint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized NearbyInvitationScanner.init(provider:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyAdvertisement>>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v5 = direct field offset for NearbyInvitationScanner.invitationDataBlobs;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(String, Data), Never>);
  swift_allocObject();
  *(void *)(v0 + v5) = PassthroughSubject.init()();
  uint64_t v6 = v0 + direct field offset for NearbyInvitationScanner._advertisements;
  v8[1] = MEMORY[0x263F8EE88];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyAdvertisement>);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v6, v4, v1);
  *(void *)(v0 + direct field offset for NearbyInvitationScanner.setup) = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)(v0 + direct field offset for NearbyInvitationScanner.controller) = static NearbyInvitationsController.shared;
  type metadata accessor for NearbyInvitationScanner();
  swift_retain_n();
  swift_retain();
  specialized NearbyInvitationsController.addObserver(_:)();
  swift_release();
  swift_release();
  return v0;
}

uint64_t specialized NearbyInvitationScanner.init(provider:configuration:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyAdvertisement>>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v7 = direct field offset for NearbyInvitationScanner.invitationDataBlobs;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(String, Data), Never>);
  swift_allocObject();
  *(void *)(v1 + v7) = PassthroughSubject.init()();
  uint64_t v8 = v1 + direct field offset for NearbyInvitationScanner._advertisements;
  v15[1] = MEMORY[0x263F8EE88];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyAdvertisement>);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v8, v6, v3);
  if (a1)
  {
    id v9 = objc_allocWithZone(MEMORY[0x263F34010]);
    id v10 = a1;
    id v11 = objc_msgSend(v9, sel_init);
    unsigned __int8 v12 = objc_msgSend(v11, sel_wranglerHomePodBoopEnabled);

    Swift::Int v13 = a1;
    if (v12) {
      goto LABEL_5;
    }
  }
  Swift::Int v13 = 0;
LABEL_5:
  *(void *)(v1 + direct field offset for NearbyInvitationScanner.setup) = v13;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)(v1 + direct field offset for NearbyInvitationScanner.controller) = static NearbyInvitationsController.shared;
  type metadata accessor for NearbyInvitationScanner();
  swift_retain_n();
  swift_retain();
  specialized NearbyInvitationsController.addObserver(_:)();
  swift_release();
  swift_release();

  return v1;
}

uint64_t partial apply for closure #1 in NearbyInvitationScanner.start()(uint64_t a1)
{
  return closure #1 in NearbyInvitationScanner.start()(a1, v1);
}

uint64_t partial apply for closure #1 in NearbyInvitationScanner.stop()(uint64_t a1)
{
  return closure #1 in NearbyInvitationScanner.stop()(a1, v1);
}

uint64_t partial apply for closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1)
{
  return closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, v1);
}

uint64_t partial apply for closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1)
{
  return closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

void partial apply for closure #1 in $defer #1 <A>() in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1)
{
  closure #1 in closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), "%s: Failed to release invitation: %@, error: %@", "%s: Released invitation: %@");
}

uint64_t partial apply for closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(uint64_t a1)
{
  return closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t base witness table accessor for Equatable in NearbyInvitationScanner<A>.Errors()
{
  return swift_getWitnessTable();
}

uint64_t sub_25738BA94()
{
  return 16;
}

__n128 sub_25738BAA0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_25738BAAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 200))();
}

uint64_t sub_25738BAF4()
{
  return 16;
}

__n128 sub_25738BB00(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata completion function for NearbyInvitationScanner()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Set<NearbyAdvertisement>>();
    if (v1 <= 0x3F) {
      swift_initClassMetadata2();
    }
  }
}

uint64_t method lookup function for NearbyInvitationScanner(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyInvitationScanner);
}

uint64_t dispatch thunk of NearbyInvitationScanner.didReceiveConnectionRequest(advertisement:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.didReceiveSessionJoinResponse(response:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.didDiscoverNearbyAdvertisement(advertisement:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.didLoseNearbyAdvertisement(advertisement:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.didDiscoverNearbySessionInvitation(id:invitation:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.advertisements.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.$advertisements.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.__allocating_init(provider:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.__allocating_init(provider:configuration:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of NearbyInvitationScanner.start()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 240) + **(int **)(*(void *)v0 + 240));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v4();
}

uint64_t dispatch thunk of NearbyInvitationScanner.stop()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 248) + **(int **)(*(void *)v0 + 248));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  return v4();
}

void type metadata accessor for Published<Set<NearbyAdvertisement>>()
{
  if (!lazy cache variable for type metadata for Published<Set<NearbyAdvertisement>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<NearbyAdvertisement>);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Set<NearbyAdvertisement>>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for NearbyInvitationScanner.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25738C03CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for NearbyInvitationScanner.Errors()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AddressableMember();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25738C0C0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

void partial apply for closure #1 in closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v3 = *(void **)(v1 + 16);
  closure #1 in closure #2 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, v3);
}

uint64_t sub_25738C210()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationBlob, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v7 + 8, v5);
}

uint64_t partial apply for closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1, void *a2)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationBlob, Error>)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v2 + v7);
  id v10 = *(NSObject **)(v2 + v8);
  id v11 = *(void **)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, a2, v2 + v6, v9, v10, v11);
}

uint64_t objectdestroyTm_1()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1)
{
  closure #1 in closure #1 in closure #3 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), "%s: Failed to mark invitation used: %@, error: %@", "%s: Marked invitation as used: %@");
}

uint64_t sub_25738C418()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata?, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata?, Error>);
  return closure #1 in closure #1 in NearbyInvitationScanner<>.request(_:displayName:userInfo:)(a1, a2);
}

uint64_t sub_25738C570()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

void *partial apply for closure #1 in closure #1 in NearbyInvitationScanner.stop()(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #1 in closure #1 in NearbyInvitationScanner.stop()(a1);
}

uint64_t partial apply for closure #2 in closure #1 in NearbyInvitationScanner.start()(void *a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #1 in closure #1 in NearbyInvitationScanner.start()(a1, v1 + v4, *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of NearbyInvitation<NearbyGroup>.PendingMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NearbyInvitation<NearbyGroup>.PendingMember(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NearbyInvitation<NearbyGroup>.PendingMember);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t NearbyGroupSessionProvider.nearbyGroup.getter()
{
  return swift_retain();
}

uint64_t NearbyGroupSessionProvider.nearbyGroup.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*NearbyGroupSessionProvider.nearbyGroup.modify())()
{
  return static NearbyGroupInterface.hostObjectInterface.modify;
}

uint64_t NearbyGroupSessionProvider.members.getter()
{
  return swift_retain();
}

uint64_t NearbyGroupSessionProvider.members.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*NearbyGroupSessionProvider.members.modify())()
{
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyGroupSessionProvider.id.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyGroupSessionProvider.id.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyGroupSessionProvider.id.modify())()
{
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyGroupSessionProvider.state.getter()
{
  return swift_retain();
}

uint64_t NearbyGroupSessionProvider.state.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*NearbyGroupSessionProvider.state.modify())()
{
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyGroupSessionProvider.activity.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 128));
}

uint64_t NearbyGroupSessionProvider.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyGroupSessionProvider.cancellables.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 136));
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyGroupSessionProvider.cancellables.modify())()
{
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyGroupSessionProvider.localMember.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 144);
  swift_beginAccess();
  return outlined init with copy of Member?(v3, a1);
}

uint64_t outlined init with copy of Member?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t NearbyGroupSessionProvider.localMember.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 144);
  swift_beginAccess();
  outlined assign with take of Member?(a1, v3);
  return swift_endAccess();
}

uint64_t NearbyGroupSessionProvider.__allocating_init(nearbyGroup:activity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_allocObject();
  uint64_t v6 = specialized NearbyGroupSessionProvider.init(nearbyGroup:activity:)(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a2);
  return v6;
}

uint64_t NearbyGroupSessionProvider.init(nearbyGroup:activity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = specialized NearbyGroupSessionProvider.init(nearbyGroup:activity:)(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 80) - 8) + 8))(a2);
  return v5;
}

uint64_t closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a4;
  v5[15] = a5;
  uint64_t v6 = type metadata accessor for AddressableMember();
  v5[16] = v6;
  v5[17] = *(void *)(v6 - 8);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Set<NearbyGroup.Member>>.Publisher>);
  v5[21] = v7;
  v5[22] = *(void *)(v7 - 8);
  v5[23] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>.Publisher);
  v5[24] = v8;
  v5[25] = *(void *)(v8 - 8);
  v5[26] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Set<NearbyGroup.Member>>.Publisher>.Iterator);
  v5[27] = v9;
  v5[28] = *(void *)(v9 - 8);
  v5[29] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:), 0, 0);
}

uint64_t closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)()
{
  id v22 = v0;
  if (one-time initialization token for provider != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[30] = __swift_project_value_buffer(v1, (uint64_t)static Log.provider);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[14];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v21 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[12] = v5;
    type metadata accessor for NearbyGroup();
    swift_retain();
    uint64_t v8 = String.init<A>(reflecting:)();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_257351000, v2, v3, "Starting task to listen for NearbyGroup updates for members: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v7, -1, -1);
    MEMORY[0x25A2B6460](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v10 = v0[25];
  uint64_t v11 = v0[26];
  uint64_t v13 = v0[23];
  uint64_t v12 = v0[24];
  uint64_t v15 = v0[21];
  uint64_t v14 = v0[22];
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
  Published.projectedValue.getter();
  swift_endAccess();
  uint64_t v16 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<Set<NearbyGroup.Member>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>.Publisher);
  MEMORY[0x25A2B55C0](v12, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_beginAccess();
  uint64_t v17 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<Set<NearbyGroup.Member>>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Set<NearbyGroup.Member>>.Publisher>.Iterator);
  uint64_t v18 = (void *)swift_task_alloc();
  v0[31] = v18;
  *uint64_t v18 = v0;
  v18[1] = closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
  uint64_t v19 = v0[27];
  return MEMORY[0x270FA1E80](v0 + 8, v19, v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
  }
  else {
    uint64_t v2 = closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 264) = *(void *)(v0 + 64);
  return MEMORY[0x270FA2498](closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t (*v12)(void);
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t Strong;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;

  uint64_t v59 = v0;
  uint64_t v1 = v0[33];
  if (!v1)
  {
    (*(void (**)(void, void))(v0[28] + 8))(v0[29], v0[27]);
    unint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, (os_log_type_t)v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_257351000, v9, (os_log_type_t)v10, "Subscription ended on NearbySession", v11, 2u);
      MEMORY[0x25A2B6460](v11, -1, -1);
    }

    goto LABEL_9;
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    (*(void (**)(void, void))(v0[28] + 8))(v0[29], v0[27]);
    swift_bridgeObjectRelease();
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    BOOL v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    unint64_t v58 = v5;
    *(_DWORD *)BOOL v4 = 136315138;
    lazy protocol witness table accessor for type NearbyGroup.Member and conformance NearbyGroup.Member();
    swift_bridgeObjectRetain();
    uint64_t v6 = Set.description.getter();
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    *(void *)(v4 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_257351000, v2, v3, "Updating session provider with participants: %s", (uint8_t *)v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v5, -1, -1);
    MEMORY[0x25A2B6460](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(void))(*(void *)Strong + 176))();
  uint64_t v14 = *(void *)(v1 + 16);
  uint64_t v54 = v0;
  if (v14)
  {
    uint64_t v15 = v0 + 10;
    v0[10] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    uint64_t v16 = v0[10];
    uint64_t v17 = specialized Set.startIndex.getter(v1);
    BOOL v20 = v17;
    uint64_t v21 = v18;
    id v22 = v19 & 1;
    uint64_t v56 = v1 + 56;
    while ((v20 & 0x8000000000000000) == 0 && v20 < 1 << *(unsigned char *)(v1 + 32))
    {
      if (((*(void *)(v56 + (((unint64_t)v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
        goto LABEL_38;
      }
      if (*(_DWORD *)(v1 + 36) != v21) {
        goto LABEL_39;
      }
      uint64_t v23 = v1;
      swift_bridgeObjectRetain();
      uint64_t v0 = v54;
      AddressableMember.init(handle:)();
      v54[10] = v16;
      unint64_t v25 = *(void *)(v16 + 16);
      unint64_t v24 = *(void *)(v16 + 24);
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        uint64_t v16 = *v15;
      }
      char v26 = v54[20];
      unint64_t v27 = v54[16];
      BOOL v28 = v54[17];
      *(void *)(v16 + 16) = v25 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 32))(v16+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v25, v26, v27);
      uint64_t v17 = specialized _NativeSet.index(after:)(v20, v21, v22 & 1, v23);
      BOOL v20 = v17;
      uint64_t v21 = v18;
      id v22 = v19 & 1;
      --v14;
      uint64_t v1 = v23;
      if (!v14)
      {
        outlined consume of Set<NearbyGroup.Member>.Index._Variant(v17, v18, v19 & 1);
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = MEMORY[0x263F8EE78];
LABEL_24:
    lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
    uint64_t v57 = Set.init(minimumCapacity:)();
    id v51 = *(void *)(v16 + 16);
    if (v51)
    {
      uint64_t v29 = 0;
      uint64_t v30 = v0[17];
      unsigned __int8 v50 = v16 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
      os_log_type_t v53 = *(void *)(v30 + 72);
      id v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
      do
      {
        int v52 = v29;
        v55(v0[19], v50 + v29 * v53, v0[16]);
        swift_bridgeObjectRetain();
        uint64_t v36 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v37 = -1 << *(unsigned char *)(v57 + 32);
        uint64_t v38 = v36 & ~v37;
        if ((*(void *)(v57 + 56 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38))
        {
          uint64_t v39 = ~v37;
          while (1)
          {
            uint64_t v40 = v0[18];
            os_log_type_t v41 = v0[16];
            unint64_t v42 = v0[17];
            v55(v40, *(void *)(v57 + 48) + v38 * v53, v41);
            lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
            uint64_t v43 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
            v44(v40, v41);
            if (v43) {
              break;
            }
            uint64_t v38 = (v38 + 1) & v39;
            uint64_t v0 = v54;
            if (((*(void *)(v57 + 56 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38) & 1) == 0) {
              goto LABEL_26;
            }
          }
          uint64_t v0 = v54;
          id v45 = v54[19];
          id v46 = v54[16];
          swift_bridgeObjectRelease();
          v44(v45, v46);
        }
        else
        {
LABEL_26:
          uint64_t v31 = v0[18];
          uint64_t v32 = v0[19];
          uint64_t v34 = v0[16];
          id v33 = v0[17];
          swift_bridgeObjectRelease();
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v55(v31, v32, v34);
          unint64_t v58 = v57;
          specialized _NativeSet.insertNew(_:at:isUnique:)(v31, v38, isUniquelyReferenced_nonNull_native);
          uint64_t v57 = v58;
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
        }
        uint64_t v29 = v52 + 1;
      }
      while (v52 + 1 != v51);
    }
    swift_bridgeObjectRelease();
    v0[11] = v57;
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v47 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<Set<NearbyGroup.Member>>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Set<NearbyGroup.Member>>.Publisher>.Iterator);
    id v48 = (void *)swift_task_alloc();
    v0[31] = v48;
    void *v48 = v0;
    v48[1] = closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
    uint64_t v18 = v0[27];
    uint64_t v17 = (uint64_t)(v0 + 8);
    uint64_t v19 = v47;
  }
  return MEMORY[0x270FA1E80](v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 72) = *(void *)(v0 + 256);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of Invitation_HostConnectionInfo?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  uint64_t v8 = type metadata accessor for GroupSessionProviderState();
  v7[14] = v8;
  v7[15] = *(void *)(v8 - 8);
  v7[16] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroup.State>.Publisher>);
  v7[17] = v9;
  v7[18] = *(void *)(v9 - 8);
  v7[19] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroup.State>.Publisher);
  v7[20] = v10;
  v7[21] = *(void *)(v10 - 8);
  v7[22] = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroup.State>.Publisher>.Iterator);
  v7[23] = v11;
  v7[24] = *(void *)(v11 - 8);
  v7[25] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:), 0, 0);
}

uint64_t closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)()
{
  if (one-time initialization token for provider != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 208) = __swift_project_value_buffer(v1, (uint64_t)static Log.provider);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    BOOL v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl(&dword_257351000, v2, v3, "Starting task to listen for NearbyGroup state updates.", v4, 2u);
    MEMORY[0x25A2B6460](v4, -1, -1);
  }
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v15 = *(void *)(v0 + 136);

  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroup.State>);
  Published.projectedValue.getter();
  swift_endAccess();
  uint64_t v10 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<NearbyGroup.State>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<NearbyGroup.State>.Publisher);
  MEMORY[0x25A2B55C0](v8, v10);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v8);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v15);
  swift_beginAccess();
  *(_DWORD *)(v0 + 256) = *MEMORY[0x263F08EB0];
  uint64_t v11 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<NearbyGroup.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroup.State>.Publisher>.Iterator);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v12;
  *uint64_t v12 = v0;
  v12[1] = closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
  uint64_t v13 = *(void *)(v0 + 184);
  return MEMORY[0x270FA1E80](v0 + 64, v13, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
  }
  else {
    uint64_t v2 = closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t Strong;
  void *v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t (*v16)(void);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  uint64_t v1 = (void *)v0[8];
  v0[29] = v1;
  if ((unint64_t)v1 < 2)
  {
    outlined consume of NearbyGroup.State?(v1);
    uint64_t v2 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<NearbyGroup.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroup.State>.Publisher>.Iterator);
    os_log_type_t v3 = (void *)swift_task_alloc();
    v0[27] = v3;
    *os_log_type_t v3 = v0;
    v3[1] = closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
    BOOL v4 = v0[23];
    return MEMORY[0x270FA1E80](v0 + 8, v4, v2);
  }
  if (v1 == (void *)2)
  {
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
  }
  else
  {
    swift_retain_n();
    outlined copy of NearbyGroup.State?(v1);
    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v18 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_retain();
      uint64_t v9 = NearbyGroup.description.getter();
      uint64_t v11 = v10;
      swift_release();
      *(void *)(v7 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v18);
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_257351000, v5, v6, "NearbyGroup %s invalidated.", (uint8_t *)v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v8, -1, -1);
      MEMORY[0x25A2B6460](v7, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t Strong = swift_weakLoadStrong();
    v0[30] = Strong;
    if (Strong)
    {
      uint64_t v13 = (void *)swift_task_alloc();
      v0[31] = v13;
      uint64_t v14 = type metadata accessor for NearbyGroupSessionProvider();
      WitnessTable = swift_getWitnessTable();
      *uint64_t v13 = v0;
      v13[1] = closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
      return MEMORY[0x270EF2E60](v14, WitnessTable);
    }
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    outlined consume of NearbyGroup.State?(v1);
    outlined consume of NearbyGroup.State?(v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 72) = *(void *)(v0 + 224);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  void *v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0)
  {

    uint64_t v1 = closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
  }
  else
  {
    uint64_t v1 = closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = *(void **)(v0 + 232);
  uint64_t v2 = *(unsigned int *)(v0 + 256);
  BOOL v4 = *(void *)(v0 + 120);
  os_log_type_t v3 = *(void **)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 112);
  (*(void (**)(void))(**(void **)(v0 + 240) + 224))();
  *os_log_type_t v3 = v1;
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 104))(v3, v2, v5);
  outlined copy of NearbyGroup.State(v1);
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_release();
  outlined consume of NearbyGroup.State?(v1);
  outlined consume of NearbyGroup.State?(v1);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<NearbyGroup.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<NearbyGroup.State>.Publisher>.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:);
  uint64_t v8 = *(void *)(v0 + 184);
  return MEMORY[0x270FA1E80](v0 + 64, v8, v6);
}

uint64_t *NearbyGroupSessionProvider.deinit()
{
  uint64_t v1 = *v0;
  if (one-time initialization token for provider != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.provider);
  swift_retain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v10 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v7 = (*(uint64_t (**)(void))(*v0 + 304))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_257351000, v3, v4, "%s Deinit'd", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v6, -1, -1);
    MEMORY[0x25A2B6460](v5, -1, -1);
  }
  else
  {

    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 128));
  swift_bridgeObjectRelease();
  outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v0 + *(void *)(*v0 + 144), &demangling cache variable for type metadata for Member?);
  return v0;
}

uint64_t NearbyGroupSessionProvider.__deallocating_deinit()
{
  NearbyGroupSessionProvider.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t NearbyGroupSessionProvider.description.getter()
{
  _StringGuts.grow(_:)(48);
  v1._object = (void *)0x80000002573C3040;
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x203A666C6573283ELL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 0x203A6469202CLL;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v0 + 200))();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t protocol witness for static GroupSessionProvider.providerIdentifier.getter in conformance NearbyGroupSessionProvider<A1>()
{
  return MEMORY[0x270EF2E50]();
}

uint64_t protocol witness for GroupSessionProvider.state.getter in conformance NearbyGroupSessionProvider<A>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t protocol witness for GroupSessionProvider.members.getter in conformance NearbyGroupSessionProvider<A>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t protocol witness for GroupSessionProvider.localMember.getter in conformance NearbyGroupSessionProvider<A>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t protocol witness for GroupSessionProvider.isCrossAccount.getter in conformance NearbyGroupSessionProvider<A1>()
{
  return MEMORY[0x270EF2E48]();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyGroupSessionProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 304))();
}

uint64_t protocol witness for Identifiable.id.getter in conformance NearbyGroupSessionProvider<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 200))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  Swift::String v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AddressableMember>);
  uint64_t v10 = *(void *)(type metadata accessor for AddressableMember() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for AddressableMember() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized NearbyGroupSessionProvider.init(nearbyGroup:activity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v56 = a1;
  uint64_t v57 = *v2;
  uint64_t v58 = a2;
  uint64_t v53 = v57;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v54 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for AddressableMember();
  uint64_t v6 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  id v51 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GroupSessionProviderState();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *MEMORY[0x263F08EB8];
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v13(v11, v12, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<GroupSessionProviderState, Never>);
  swift_allocObject();
  v2[6] = CurrentValueSubject.init(_:)();
  size_t v14 = v2 + 6;
  *(void *)((char *)v2 + *(void *)(*v2 + 136)) = MEMORY[0x263F8EE88];
  uint64_t v15 = (char *)v3 + *(void *)(*v3 + 144);
  *(_OWORD *)uint64_t v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *((void *)v15 + 4) = 0;
  v2[4] = UUID.uuidString.getter();
  v2[5] = v16;
  v13(v11, v12, v8);
  swift_allocObject();
  uint64_t v17 = CurrentValueSubject.init(_:)();
  swift_beginAccess();
  *size_t v14 = v17;
  swift_release();
  uint64_t v18 = (char *)v3 + *(void *)(*v3 + 128);
  id v55 = v3;
  uint64_t v19 = *(void (**)(char *, uint64_t))(*(void *)(*(void *)(v57 + 80) - 8) + 16);
  uint64_t v52 = *(void *)(v57 + 80);
  v19(v18, v58);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v20 = v60;
  int64_t v21 = *(void *)(v60 + 16);
  if (v21)
  {
    *(void *)&long long v60 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    uint64_t v22 = v60;
    uint64_t result = specialized Set.startIndex.getter(v20);
    uint64_t v24 = result;
    uint64_t v26 = v25;
    char v28 = v27 & 1;
    uint64_t v57 = v6 + 32;
    uint64_t v58 = v20 + 56;
    uint64_t v29 = v51;
    while ((v24 & 0x8000000000000000) == 0 && v24 < 1 << *(unsigned char *)(v20 + 32))
    {
      if (((*(void *)(v58 + (((unint64_t)v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
        goto LABEL_17;
      }
      if (*(_DWORD *)(v20 + 36) != v26) {
        goto LABEL_18;
      }
      swift_bridgeObjectRetain();
      AddressableMember.init(handle:)();
      *(void *)&long long v60 = v22;
      unint64_t v31 = *(void *)(v22 + 16);
      unint64_t v30 = *(void *)(v22 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        uint64_t v22 = v60;
      }
      *(void *)(v22 + 16) = v31 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v22+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v31, v29, v59);
      uint64_t result = specialized _NativeSet.index(after:)(v24, v26, v28 & 1, v20);
      uint64_t v24 = result;
      uint64_t v26 = v32;
      char v28 = v33 & 1;
      if (!--v21)
      {
        outlined consume of Set<NearbyGroup.Member>.Index._Variant(result, v32, v33 & 1);
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = MEMORY[0x263F8EE78];
LABEL_12:
    uint64_t v34 = specialized Set.init<A>(_:)(v22);
    swift_bridgeObjectRelease();
    *(void *)&long long v60 = v34;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
    swift_allocObject();
    uint64_t v35 = CurrentValueSubject.init(_:)();
    uint64_t v36 = v55;
    uint64_t v37 = v56;
    v55[2] = v56;
    v36[3] = v35;
    uint64_t v38 = v37 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_localMemberHandle;
    swift_beginAccess();
    if (*(void *)(v38 + 8))
    {
      *((void *)&v61 + 1) = v59;
      uint64_t v62 = lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember);
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v60);
      swift_bridgeObjectRetain_n();
      swift_retain();
      AddressableMember.init(handle:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v62 = 0;
      long long v60 = 0u;
      long long v61 = 0u;
      swift_retain();
    }
    uint64_t v39 = v55;
    uint64_t v40 = (uint64_t)v55 + *(void *)(*v55 + 144);
    swift_beginAccess();
    outlined assign with take of Member?((uint64_t)&v60, v40);
    swift_endAccess();
    uint64_t v41 = type metadata accessor for TaskPriority();
    uint64_t v42 = *(void *)(v41 - 8);
    uint64_t v57 = *(void *)(v42 + 56);
    uint64_t v58 = v42 + 56;
    uint64_t v43 = (uint64_t)v54;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v57)(v54, 1, 1, v41);
    uint64_t v44 = swift_allocObject();
    swift_weakInit();
    id v45 = (void *)swift_allocObject();
    v45[2] = 0;
    v45[3] = 0;
    uint64_t v46 = v52;
    v45[4] = v52;
    uint64_t v47 = *(void *)(v53 + 88);
    v45[5] = v47;
    v45[6] = v37;
    v45[7] = v44;
    swift_retain();
    uint64_t v59 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v43, (uint64_t)&async function pointer to partial apply for closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:), (uint64_t)v45);
    type metadata accessor for AnyCancellable();
    swift_allocObject();
    swift_retain();
    AnyCancellable.init(_:)();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v57)(v43, 1, 1, v41);
    uint64_t v48 = swift_allocObject();
    swift_weakInit();
    id v49 = (void *)swift_allocObject();
    v49[2] = 0;
    v49[3] = 0;
    v49[4] = v46;
    v49[5] = v47;
    v49[6] = v37;
    v49[7] = v48;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v43, (uint64_t)&async function pointer to partial apply for closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:), (uint64_t)v49);
    swift_allocObject();
    swift_retain();
    AnyCancellable.init(_:)();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v39;
  }
  return result;
}

uint64_t base witness table accessor for Identifiable in NearbyGroupSessionProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for GroupSessionProvider.ActivityType : IdentifiableGroupActivity in NearbyGroupSessionProvider<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

uint64_t associated type witness table accessor for Identifiable.ID : Decodable in NearbyGroupSessionProvider<A>()
{
  return MEMORY[0x263F8D348];
}

uint64_t associated type witness table accessor for Identifiable.ID : Encodable in NearbyGroupSessionProvider<A>()
{
  return MEMORY[0x263F8D318];
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in NearbyGroupSessionProvider<A>()
{
  return MEMORY[0x263F8D320];
}

uint64_t sub_2573900A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_2573900F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 160);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_257390148()
{
  return 16;
}

__n128 sub_257390154(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_257390160@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_2573901AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_257390200()
{
  return 16;
}

__n128 sub_25739020C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_257390218@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_257390264(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 208);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2573902CC()
{
  return 16;
}

__n128 sub_2573902D8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2573902E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_257390330(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 232);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_257390384()
{
  return 16;
}

__n128 sub_257390390(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_25739039C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  *a2 = result;
  return result;
}

uint64_t sub_2573903E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 256);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_257390444()
{
  return 16;
}

__n128 sub_257390450(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_25739045C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 272))();
}

uint64_t sub_2573904A8(uint64_t a1)
{
  outlined init with copy of Member?(a1, (uint64_t)v2);
  return NearbyGroupSessionProvider.localMember.setter((uint64_t)v2);
}

uint64_t sub_2573904E4()
{
  return 16;
}

__n128 sub_2573904F0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for NearbyGroupSessionProvider()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for NearbyGroupSessionProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for NearbyGroupSessionProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyGroupSessionProvider);
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.members.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.members.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.id.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.id.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.state.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.state.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.cancellables.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.cancellables.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.cancellables.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.localMember.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.__allocating_init(nearbyGroup:activity:)()
{
  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of NearbyGroupSessionProvider.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t outlined assign with take of Member?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of Set<NearbyGroup.Member>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_257390908()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[6];
  uint64_t v6 = v1[7];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  return closure #2 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)(a1, v4, v5, v7, v6);
}

void partial apply for closure #3 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)()
{
}

uint64_t objectdestroy_26Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return closure #4 in NearbyGroupSessionProvider.init(nearbyGroup:activity:)(a1, v6, v7, v9, v8, v4, v5);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void outlined consume of NearbyGroup.State?(id a1)
{
  if (a1 != (id)2) {
    outlined consume of NearbyGroup.State(a1);
  }
}

id outlined copy of NearbyGroup.State?(id result)
{
  if (result != (id)2) {
    return outlined copy of NearbyGroup.State(result);
  }
  return result;
}

id outlined copy of NearbyGroup.State(id result)
{
  if ((unint64_t)result >= 2) {
    return result;
  }
  return result;
}

uint64_t sub_257390BF0()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

unint64_t lazy protocol witness table accessor for type NearbyGroup.Member and conformance NearbyGroup.Member()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroup.Member and conformance NearbyGroup.Member;
  if (!lazy protocol witness table cache variable for type NearbyGroup.Member and conformance NearbyGroup.Member)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup.Member and conformance NearbyGroup.Member);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyGroup.Member and conformance NearbyGroup.Member;
  if (!lazy protocol witness table cache variable for type NearbyGroup.Member and conformance NearbyGroup.Member)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup.Member and conformance NearbyGroup.Member);
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t NearbyGroup.state.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[UUID : NearbyGroupConnectionInfo]>.Publisher>.Iterator);
  uint64_t v4 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<[UUID : NearbyGroupConnectionInfo]>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<[UUID : NearbyGroupConnectionInfo]>.Publisher>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc();
  v2[6] = v5;
  *uint64_t v5 = v2;
  v5[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5TQ0_;
  return MEMORY[0x270FA1E80](v2 + 2, v3, v4);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5TQ0_()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    if (v2)
    {
      swift_getObjectType();
      uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v5 = v4;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5TY2_;
  }
  else
  {
    if (v2)
    {
      swift_getObjectType();
      uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v5 = v7;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = NearbyInvitationsController.createGroup(with:);
  }
  return MEMORY[0x270FA2498](v6, v3, v5);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5TY2_()
{
  v0[3] = v0[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  swift_willThrowTypedImpl();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t InvitationRequest<>.request()(uint64_t a1)
{
  v2[14] = a1;
  v2[15] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation.BufferingPolicy);
  v2[16] = v3;
  v2[17] = *(void *)(v3 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>);
  v2[19] = v4;
  v2[20] = *(void *)(v4 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Iterator);
  v2[22] = v5;
  v2[23] = *(void *)(v5 - 8);
  v2[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v2[27] = v6;
  v2[28] = *(void *)(v6 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v2[31] = v7;
  v2[32] = *(void *)(v7 - 8);
  v2[33] = swift_task_alloc();
  return MEMORY[0x270FA2498](InvitationRequest<>.request(), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 288) = a1;
  *(void *)(v3 + 296) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = InvitationRequest<>.request();
  }
  else {
    uint64_t v4 = InvitationRequest<>.request();
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t InvitationRequest<>.request()()
{
  uint64_t v13 = v0;
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  v0[34] = __swift_project_value_buffer(v0[31], (uint64_t)static Log.group);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = v0[15];
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[12] = v4;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>);
    uint64_t v7 = String.init<A>(reflecting:)();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_257351000, v1, v2, "Requesting to be let in with request: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v6, -1, -1);
    MEMORY[0x25A2B6460](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v11 = (uint64_t (*)(void))(*(void *)(*(void *)v0[15] + 200) + **(int **)(*(void *)v0[15] + 200));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[35] = v9;
  *uint64_t v9 = v0;
  v9[1] = InvitationRequest<>.request();
  return v11();
}

{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned char *v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t (*v38)(void);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];
  void *v58;
  uint64_t v59;

  uint64_t v58 = v0;
  uint64_t v1 = (void *)v0[36];
  (*(void (**)(void, void, void))(v0[32] + 16))(v0[33], v0[34], v0[31]);
  os_log_type_t v2 = v1;
  BOOL v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = (char *)v0[36];
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    unint64_t v8 = swift_slowAlloc();
    v57[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = *(void *)&v6[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier + 8];
    if (v9)
    {
      v0[2] = *(void *)&v6[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier];
      v0[3] = v9;
      swift_bridgeObjectRetain();
      uint64_t v10 = String.init<A>(reflecting:)();
      uint64_t v12 = v11;
    }
    else
    {
      uint64_t v12 = 0xE300000000000000;
      uint64_t v10 = 7104878;
    }
    uint64_t v16 = (void *)v0[36];
    uint64_t v17 = v0[32];
    uint64_t v56 = v0[33];
    uint64_t v18 = v0[31];
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v3, v4, "Waiting for group with ID: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v8, -1, -1);
    MEMORY[0x25A2B6460](v7, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v56, v18);
  }
  else
  {
    uint64_t v14 = v0[32];
    uint64_t v13 = v0[33];
    uint64_t v15 = v0[31];

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  uint64_t v19 = (char *)v0[36];
  if (!*(void *)&v19[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier + 8]) {
    goto LABEL_10;
  }
  uint64_t v20 = v0[27];
  int64_t v21 = v0[28];
  uint64_t v22 = v0[26];
  swift_bridgeObjectRetain();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v20) == 1)
  {
    outlined destroy of Invitation_HostConnectionInfo?(v0[26], (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v19 = (char *)v0[36];
LABEL_10:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>.Errors);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type InvitationRequest<NearbyGroup>.Errors and conformance InvitationRequest<A>.Errors, &demangling cache variable for type metadata for InvitationRequest<NearbyGroup>.Errors);
    uint64_t v23 = (void *)swift_allocError();
    *uint64_t v24 = 2;
    swift_willThrow();

    swift_retain();
    uint64_t v25 = v23;
    swift_retain();
    uint64_t v26 = v23;
    char v27 = Logger.logObject.getter();
    char v28 = static os_log_type_t.error.getter();
    uint64_t v29 = os_log_type_enabled(v27, v28);
    unint64_t v30 = v0[15];
    if (v29)
    {
      unint64_t v31 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      v57[0] = v32;
      *(_DWORD *)unint64_t v31 = 136315394;
      v0[11] = v30;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>);
      char v33 = String.init<A>(reflecting:)();
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v31 + 12) = 2080;
      v0[5] = v23;
      uint64_t v35 = v23;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v36 = String.init<A>(reflecting:)();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_257351000, v27, v28, "%s failed to request access, reason: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v32, -1, -1);
      MEMORY[0x25A2B6460](v31, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = (uint64_t (*)(void))v0[1];
    return v38();
  }
  uint64_t v40 = v0[30];
  uint64_t v41 = v0[27];
  uint64_t v42 = v0[28];
  uint64_t v43 = v0[25];
  (*(void (**)(uint64_t, void, uint64_t))(v42 + 32))(v40, v0[26], v41);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  v0[38] = v44;
  v0[39] = (v42 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v44(v43, v40, v41);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v43, 0, 1, v41);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  id v45 = v0[25];
  uint64_t v46 = v0[20];
  uint64_t v47 = v0[21];
  id v49 = v0[18];
  uint64_t v48 = v0[19];
  id v51 = v0[16];
  uint64_t v50 = v0[17];
  uint64_t v52 = static NearbyInvitationsController.shared;
  uint64_t v53 = swift_task_alloc();
  *(void *)(v53 + 16) = v52;
  *(void *)(v53 + 24) = v45;
  type metadata accessor for NearbyGroup();
  (*(void (**)(uint64_t, void, uint64_t))(v50 + 104))(v49, *MEMORY[0x263F8F580], v51);
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_task_dealloc();
  outlined destroy of Invitation_HostConnectionInfo?(v45, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
  uint64_t v54 = (void *)swift_task_alloc();
  v0[40] = v54;
  char *v54 = v0;
  v54[1] = InvitationRequest<>.request();
  id v55 = v0[22];
  return MEMORY[0x270FA1F68](v0 + 7, 0, 0, v55);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](InvitationRequest<>.request(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned char *v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t (*v40)(void);
  os_log_type_t type;
  uint64_t v42;
  os_log_type_t v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[2];
  uint64_t v47;
  uint64_t v48;

  uint64_t v47 = v0;
  uint64_t v1 = *(void *)(v0 + 56);
  if (v1)
  {
    (*(void (**)(void, void, void))(v0 + 304))(*(void *)(v0 + 232), *(void *)(v0 + 240), *(void *)(v0 + 216));
    swift_retain_n();
    os_log_type_t v2 = Logger.logObject.getter();
    BOOL v3 = static os_log_type_t.default.getter();
    uint64_t v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v9 = *(void *)(v0 + 184);
    unint64_t v8 = *(void *)(v0 + 192);
    *(void *)uint64_t v43 = *(void *)(v0 + 232);
    uint64_t v44 = *(void *)(v0 + 176);
    if (v4)
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      v46[0] = v42;
      *(_DWORD *)uint64_t v10 = 136315394;
      os_log_type_t type = v3;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v10 + 12) = 2080;
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v15(*(void *)v43, v7);
      _os_log_impl(&dword_257351000, v2, type, "Observed group: %s, waiting for %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v42, -1, -1);
      MEMORY[0x25A2B6460](v10, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v44);
    }
    else
    {

      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v15(*(void *)v43, v7);
      swift_release_n();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v44);
    }
    v15(v5, v7);
    uint64_t v34 = *(char **)(v0 + 288);
    uint64_t v35 = *(uint64_t **)(v0 + 112);
    uint64_t v36 = *(void *)&v34[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo];
    uint64_t v37 = *(void *)&v34[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo + 8];
    outlined copy of Data?(v36, v37);

    *uint64_t v35 = v36;
    v35[1] = v37;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v38(v1);
  }
  else
  {
    uint64_t v16 = *(void **)(v0 + 288);
    uint64_t v17 = *(void *)(v0 + 240);
    uint64_t v18 = *(void *)(v0 + 216);
    uint64_t v19 = *(void *)(v0 + 224);
    (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>.Errors);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type InvitationRequest<NearbyGroup>.Errors and conformance InvitationRequest<A>.Errors, &demangling cache variable for type metadata for InvitationRequest<NearbyGroup>.Errors);
    uint64_t v20 = (void *)swift_allocError();
    *int64_t v21 = 0;
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    swift_retain();
    uint64_t v22 = v20;
    swift_retain();
    uint64_t v23 = v20;
    uint64_t v24 = Logger.logObject.getter();
    uint64_t v25 = static os_log_type_t.error.getter();
    uint64_t v26 = os_log_type_enabled(v24, v25);
    char v27 = *(void *)(v0 + 120);
    if (v26)
    {
      char v28 = swift_slowAlloc();
      id v45 = swift_slowAlloc();
      v46[0] = v45;
      *(_DWORD *)char v28 = 136315394;
      *(void *)(v0 + 88) = v27;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>);
      uint64_t v29 = String.init<A>(reflecting:)();
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v28 + 12) = 2080;
      *(void *)(v0 + 40) = v20;
      unint64_t v31 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v32 = String.init<A>(reflecting:)();
      *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_257351000, v24, v25, "%s failed to request access, reason: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v45, -1, -1);
      MEMORY[0x25A2B6460](v28, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
    return v40();
  }
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16[2];
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  uint64_t v1 = (void *)v0[37];
  swift_retain();
  os_log_type_t v2 = v1;
  swift_retain();
  BOOL v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v0[15];
    uint64_t v7 = swift_slowAlloc();
    unint64_t v8 = swift_slowAlloc();
    v16[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    v0[11] = v6;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationRequest<NearbyGroup>);
    uint64_t v9 = String.init<A>(reflecting:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2080;
    v0[5] = v1;
    uint64_t v11 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v4, v5, "%s failed to request access, reason: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v8, -1, -1);
    MEMORY[0x25A2B6460](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = NearbyInvitationScanner<>.request(_:displayName:userInfo:);
  return InvitationRequest<>.request()(v0 + 16);
}

uint64_t NearbyGroup.members.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t NearbyGroup.$members.getter()
{
  return NearbyGroup.$members.getter((uint64_t)&OBJC_IVAR____TtC14NearbySessions11NearbyGroup__members, &demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
}

uint64_t NearbyGroup.$state.getter()
{
  return NearbyGroup.$members.getter((uint64_t)&OBJC_IVAR____TtC14NearbySessions11NearbyGroup__state, &demangling cache variable for type metadata for Published<NearbyGroup.State>);
}

uint64_t NearbyGroup.$members.getter(uint64_t a1, uint64_t *a2)
{
  return swift_endAccess();
}

uint64_t NearbyGroup.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

BOOL static NearbyGroup.Errors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void NearbyGroup.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int NearbyGroup.Errors.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t NearbyGroup.Member.handle.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyGroup.Member.handle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *os_log_type_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*NearbyGroup.Member.handle.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

uint64_t NearbyGroup.Member.tokenDestination.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyGroup.Member.tokenDestination.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*NearbyGroup.Member.tokenDestination.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

void NearbyGroup.Member.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int NearbyGroup.Member.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

NearbySessions::NearbyGroup::Member __swiftcall NearbyGroup.Member.init(handle:tokenDestination:)(Swift::String handle, Swift::String_optional tokenDestination)
{
  v2->value = handle;
  v2[1] = tokenDestination;
  result.tokenDestination = tokenDestination;
  result.handle = handle;
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance NearbyGroup.Member()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyGroup.Member()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t key path getter for NearbyGroup.members : NearbyGroup@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for NearbyGroup.members : NearbyGroup()
{
  return static Published.subscript.setter();
}

uint64_t key path getter for NearbyGroup.state : NearbyGroup@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for NearbyGroup.state : NearbyGroup(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  outlined copy of NearbyGroup.State(v1);
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t key path getter for NearbyGroup.$members : NearbyGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return swift_endAccess();
}

uint64_t key path setter for NearbyGroup.$members : NearbyGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v18 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16((char *)&v18 - v14, a1, v9);
  v16(v13, (uint64_t)v15, v9);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(a7);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

uint64_t NearbyGroup.localMemberHandle.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_localMemberHandle);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

id NearbyGroup.endpoint.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_endpoint);
}

id NearbyGroup.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_queue);
}

id NearbyGroup.connection.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_connection);
}

uint64_t NearbyGroup.__allocating_init(members:service:)(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  type metadata accessor for UUID();
  *(void *)(v1 + 40) = swift_task_alloc();
  return MEMORY[0x270FA2498](NearbyGroup.__allocating_init(members:service:), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](NearbyInvitationsController.createGroup(with:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t NearbyGroup.__allocating_init(members:service:)()
{
  char v27 = v0;
  uint64_t receiver = (uint64_t)v0[2].receiver;
  uint64_t v2 = *(void *)(receiver + 16);
  if (v2)
  {
    unint64_t v26 = MEMORY[0x263F8EE78];
    uint64_t v3 = &v26;
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v4 = specialized Set.startIndex.getter(receiver);
    int v6 = v5;
    char v8 = v7 & 1;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(receiver + 32))
    {
      if (((*(void *)(receiver + 56 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
        goto LABEL_15;
      }
      if (*(_DWORD *)(receiver + 36) != v6) {
        goto LABEL_16;
      }
      uint64_t v9 = (uint64_t)v0[2].receiver;
      uint64_t v10 = (uint64_t *)(*(void *)(receiver + 48) + 16 * v4);
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      uint64_t v13 = (objc_class *)type metadata accessor for NearbyGroupMember();
      uint64_t v14 = (char *)objc_allocWithZone(v13);
      uint64_t v15 = &v14[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle];
      *(void *)uint64_t v15 = v12;
      *((void *)v15 + 1) = v11;
      uint64_t v16 = &v14[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID];
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      v0[1].uint64_t receiver = v14;
      v0[1].uint64_t super_class = v13;
      swift_bridgeObjectRetain();
      objc_msgSendSuper2(v0 + 1, sel_init);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t v3 = &v26;
      specialized ContiguousArray._endMutation()();
      int64_t v17 = specialized _NativeSet.index(after:)(v4, v6, v8 & 1, v9);
      int64_t v4 = v17;
      int v6 = v18;
      char v8 = v19 & 1;
      if (!--v2)
      {
        outlined consume of Set<NearbyGroup.Member>.Index._Variant(v17, v18, v19 & 1);
        unint64_t v20 = v26;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  unint64_t v20 = MEMORY[0x263F8EE78];
LABEL_10:
  UUID.init()();
  uint64_t v3 = (unint64_t *)specialized Set.init<A>(_:)(v20);
  swift_bridgeObjectRelease();
  if (one-time initialization token for shared != -1) {
LABEL_17:
  }
    swift_once();
  uint64_t v21 = static NearbyInvitationsController.shared;
  uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroup.__allocating_init(id:members:controller:)
                                                          + async function pointer to specialized NearbyGroup.__allocating_init(id:members:controller:));
  swift_retain();
  uint64_t v22 = (void *)swift_task_alloc();
  v0[3].uint64_t receiver = v22;
  *uint64_t v22 = v0;
  v22[1] = NearbyGroup.__allocating_init(members:service:);
  uint64_t super_class = (uint64_t)v0[2].super_class;
  return v25(super_class, (uint64_t)v3, v21);
}

uint64_t NearbyGroup.__allocating_init(id:members:controller:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroup.__allocating_init(id:members:controller:)
                                                         + async function pointer to specialized NearbyGroup.__allocating_init(id:members:controller:));
  char v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *char v7 = v3;
  v7[1] = NearbyGroup.__allocating_init(id:members:controller:);
  return v9(a1, a2, a3);
}

uint64_t NearbyGroup.__allocating_init(id:members:controller:)(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  int v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t NearbyGroup.__allocating_init(connectionInfo:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](NearbyGroup.__allocating_init(connectionInfo:), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(*v2 + 56);
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();

  if (v1)
  {
    int v6 = NearbyGroup.__allocating_init(connectionInfo:);
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    int v6 = NearbyGroup.__allocating_init(connectionInfo:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t NearbyGroup.__allocating_init(connectionInfo:)()
{
  uint64_t v1 = v0[2];
  (*(void (**)(void, uint64_t, void))(v0[5] + 16))(v0[6], v1 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id, v0[4]);
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint);
  v0[7] = v2;
  swift_allocObject();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroup.init(id:endpoint:)
                                                + async function pointer to specialized NearbyGroup.init(id:endpoint:));
  id v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  *uint64_t v4 = v0;
  v4[1] = NearbyGroup.__allocating_init(connectionInfo:);
  uint64_t v5 = v0[6];
  return v7(v5, (uint64_t)v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 80);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in NearbyGroup.init(id:members:controller:)(uint64_t a1)
{
  id v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  swift_retain();
  return closure #1 in NearbyGroup.init(id:members:controller:)(v3, v1, a1);
}

uint64_t NearbyGroup.__allocating_init(id:endpoint:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  swift_allocObject();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroup.init(id:endpoint:)
                                                + async function pointer to specialized NearbyGroup.init(id:endpoint:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v5;
  *uint64_t v5 = v2;
  v5[1] = NearbyGroup.__allocating_init(id:endpoint:);
  return v7(a1, a2);
}

uint64_t NearbyGroup.__allocating_init(id:endpoint:)(uint64_t a1)
{
  uint64_t v4 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  int v6 = *(uint64_t (**)(uint64_t))(v8 + 8);
  if (!v1) {
    uint64_t v5 = a1;
  }
  return v6(v5);
}

uint64_t NearbyGroup.init(id:endpoint:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroup.init(id:endpoint:)
                                                + async function pointer to specialized NearbyGroup.init(id:endpoint:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v5;
  *uint64_t v5 = v2;
  v5[1] = NearbyGroup.init(id:endpoint:);
  return v7(a1, a2);
}

uint64_t closure #1 in NearbyGroup.init(id:endpoint:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    lazy protocol witness table accessor for type NearbyGroup.Errors and conformance NearbyGroup.Errors();
    uint64_t v1 = (void *)swift_allocError();
    *uint64_t v2 = 0;
    NearbyGroup.invalidate(reason:)(v1);

    return swift_release();
  }
  return result;
}

uint64_t NearbyGroup.invalidate(reason:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v36 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v34 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.group);
  swift_retain();
  id v9 = a1;
  swift_retain();
  id v10 = a1;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v33 = v4;
    uint64_t v14 = v13;
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v32 = v5;
    uint64_t v17 = v16;
    aBlock[0] = v16;
    *(_DWORD *)uint64_t v14 = 136315394;
    swift_retain();
    uint64_t v18 = NearbyGroup.description.getter();
    unint64_t v20 = v19;
    swift_release();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v14 + 12) = 2112;
    id v21 = a1;
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v38 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v22;

    _os_log_impl(&dword_257351000, v11, v12, "%s Invalidating for reason: %@", (uint8_t *)v14, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v15, -1, -1);
    swift_arrayDestroy();
    uint64_t v23 = v17;
    uint64_t v5 = v32;
    MEMORY[0x25A2B6460](v23, -1, -1);
    uint64_t v24 = v14;
    uint64_t v4 = v33;
    MEMORY[0x25A2B6460](v24, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v2;
  *(void *)(v25 + 24) = a1;
  aBlock[4] = (uint64_t)partial apply for closure #1 in NearbyGroup.invalidate(reason:);
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_1;
  unint64_t v26 = _Block_copy(aBlock);
  swift_retain();
  id v27 = a1;
  uint64_t v28 = v34;
  static DispatchQoS.unspecified.getter();
  uint64_t v38 = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v29 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x25A2B5970](0, v28, v29, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v29, v4);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v37);
  return swift_release();
}

uint64_t closure #2 in NearbyGroup.init(id:endpoint:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = result;
    v15[1] = *(void *)(result + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_queue);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a1;
    *(void *)(v12 + 24) = v11;
    aBlock[4] = partial apply for closure #1 in closure #2 in NearbyGroup.init(id:endpoint:);
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_137_0;
    uint64_t v13 = _Block_copy(aBlock);
    v15[0] = v6;
    uint64_t v14 = v13;
    swift_bridgeObjectRetain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    void v15[2] = MEMORY[0x263F8EE78];
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x25A2B5970](0, v9, v5, v14);
    _Block_release(v14);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, void))(v7 + 8))(v9, v15[0]);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in NearbyGroup.init(id:endpoint:)(uint64_t a1)
{
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
    uint64_t v7 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_257351000, v3, v4, "Received updated membership list %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v6, -1, -1);
    MEMORY[0x25A2B6460](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = specialized Sequence.compactMap<A>(_:)(a1);
  uint64_t v10 = specialized Set.init<A>(_:)(v9);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v12 = v10;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t closure #3 in NearbyGroup.init(id:endpoint:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.group);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v28 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v13 = swift_slowAlloc();
    aBlock[0] = v13;
    v26[2] = v6;
    *(_DWORD *)uint64_t v12 = 136315138;
    v26[1] = v12 + 4;
    swift_retain();
    uint64_t v14 = NearbyGroup.description.getter();
    uint64_t v27 = a1;
    uint64_t v15 = v4;
    unint64_t v17 = v16;
    swift_release();
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v4 = v15;
    a1 = v27;
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_257351000, v9, v10, "%s Attempting to join", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v13, -1, -1);
    uint64_t v18 = v12;
    uint64_t v7 = v28;
    MEMORY[0x25A2B6460](v18, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  unint64_t v19 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v21 + v20, v7, v4);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for closure #1 in closure #3 in NearbyGroup.init(id:endpoint:);
  *(void *)(v22 + 24) = v21;
  aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_122_0;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v19, v23);

  _Block_release(v23);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(&v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], a2, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v5 + 32))(v8 + v7, &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

void closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed String?, @guaranteed Set<NearbyGroupMember>?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_131_0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_joinWithNearbyGroupMembers_, v12);
  _Block_release(v12);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v66 = a1;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v11, (uint64_t)static Log.group);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v17 = a4;
  uint64_t v18 = Logger.logObject.getter();
  int v65 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v18, (os_log_type_t)v65))
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    if (!a4) {
      goto LABEL_20;
    }
LABEL_7:
    id v26 = a4;
    swift_retain();
    id v27 = a4;
    swift_retain();
    id v28 = a4;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      v68[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_retain();
      uint64_t v33 = NearbyGroup.description.getter();
      unint64_t v35 = v34;
      swift_release();
      v67[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v31 + 12) = 2080;
      v67[0] = (uint64_t)a4;
      id v36 = a4;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v37 = String.init<A>(reflecting:)();
      v67[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_257351000, v29, v30, "%s was told an error remotely when trying to join %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v32, -1, -1);
      MEMORY[0x25A2B6460](v31, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    v68[0] = (uint64_t)a4;
    goto LABEL_11;
  }
  uint64_t v59 = v12;
  os_log_t v61 = v18;
  uint64_t v62 = v15;
  uint64_t v63 = v11;
  uint64_t v64 = a6;
  uint64_t v19 = swift_slowAlloc();
  uint64_t v60 = swift_slowAlloc();
  v67[0] = v60;
  *(_DWORD *)uint64_t v19 = 136315906;
  swift_retain();
  uint64_t v20 = NearbyGroup.description.getter();
  unint64_t v22 = v21;
  swift_release();
  v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v67);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_WORD *)(v19 + 12) = 2080;
  if (a2)
  {
    v68[0] = v66;
    v68[1] = a2;
    swift_bridgeObjectRetain();
    uint64_t v23 = String.init<A>(reflecting:)();
    unint64_t v25 = v24;
  }
  else
  {
    unint64_t v25 = 0xE300000000000000;
    uint64_t v23 = 7104878;
  }
  v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v67);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v19 + 22) = 2080;
  if (a3)
  {
    v68[0] = a3;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroupMember>);
    uint64_t v40 = String.init<A>(reflecting:)();
    unint64_t v42 = v41;
  }
  else
  {
    unint64_t v42 = 0xE300000000000000;
    uint64_t v40 = 7104878;
  }
  uint64_t v43 = v59;
  v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, v67);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v19 + 32) = 2080;
  if (a4)
  {
    v68[0] = (uint64_t)a4;
    id v44 = a4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v45 = String.init<A>(reflecting:)();
    unint64_t v47 = v46;
  }
  else
  {
    unint64_t v47 = 0xE300000000000000;
    uint64_t v45 = 7104878;
  }
  v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, v67);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  os_log_t v48 = v61;
  _os_log_impl(&dword_257351000, v61, (os_log_type_t)v65, "%s received response: (localHandle: %s, members: %s, error: %s)", (uint8_t *)v19, 0x2Au);
  uint64_t v49 = v60;
  swift_arrayDestroy();
  MEMORY[0x25A2B6460](v49, -1, -1);
  MEMORY[0x25A2B6460](v19, -1, -1);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v63);
  if (a4) {
    goto LABEL_7;
  }
LABEL_20:
  if (!a3)
  {
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v53, v54))
    {
      id v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v55 = 0;
      _os_log_impl(&dword_257351000, v53, v54, "Received invalid callback where we didn't have an error, but also didn't have a membership list!", v55, 2u);
      MEMORY[0x25A2B6460](v55, -1, -1);
    }

    lazy protocol witness table accessor for type NearbyGroup.Errors and conformance NearbyGroup.Errors();
    uint64_t v56 = swift_allocError();
    *uint64_t v57 = 0;
    v68[0] = v56;
LABEL_11:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  uint64_t v50 = (uint64_t *)(a5 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_localMemberHandle);
  swift_beginAccess();
  uint64_t *v50 = v66;
  v50[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = specialized Sequence.compactMap<A>(_:)(a3);
  uint64_t v52 = specialized Set.init<A>(_:)(v51);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  v67[0] = v52;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  v67[0] = 1;
  swift_retain();
  static Published.subscript.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String?, @guaranteed Set<NearbyGroupMember>?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v7 = 0;
  uint64_t v9 = 0;
  if (a3)
  {
LABEL_3:
    type metadata accessor for NearbyGroupMember();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for NearbyGroupMember);
    uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
LABEL_4:
  swift_retain();
  id v10 = a4;
  v6(v7, v9, v5, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(void *a1)
{
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.group);
  swift_retain();
  id v3 = a1;
  swift_retain();
  id v4 = a1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v17 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_retain();
    uint64_t v9 = NearbyGroup.description.getter();
    unint64_t v11 = v10;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2080;
    id v12 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v5, v6, "%s Had errorHandler called when trying to join %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v8, -1, -1);
    MEMORY[0x25A2B6460](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v17 = (uint64_t)a1;
  id v15 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t closure #1 in NearbyGroup.invalidate(reason:)(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = a2;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t NearbyGroup.addMember(_:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  return MEMORY[0x270FA2498](NearbyGroup.addMember(_:), 0, 0);
}

uint64_t NearbyGroup.addMember(_:)()
{
  id v27 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v3 = v0[6];
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v3, v1, v2, (uint64_t)v24);
  swift_bridgeObjectRelease();
  uint64_t v4 = v24[0];
  uint64_t v5 = v24[1];
  v0[12] = v24[0];
  v0[13] = v5;
  uint64_t v6 = v25;
  uint64_t v7 = v26;
  v0[14] = v25;
  v0[15] = v7;
  if (v5)
  {
    v0[2] = v4;
    v0[3] = v5;
    v0[4] = v6;
    v0[5] = v7;
    uint64_t v8 = swift_task_alloc();
    v0[16] = v8;
    *(void *)uint64_t v8 = v0;
    *(void *)(v8 + 8) = NearbyGroup.addMember(_:);
    *(void *)(v8 + 96) = v0[11];
    *(void *)(v8 + 104) = v0[2];
    *(void *)(v8 + 112) = v0[3];
    *(_OWORD *)(v8 + 120) = *((_OWORD *)v0 + 2);
    return MEMORY[0x270FA2498](NearbyGroup.addMember(_:), 0, 0);
  }
  else
  {
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.group);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    unint64_t v13 = v0[10];
    if (v12)
    {
      uint64_t v22 = v0[9];
      uint64_t v14 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v24[0] = v23;
      *(_DWORD *)uint64_t v14 = 136315394;
      swift_retain();
      os_log_type_t type = v11;
      uint64_t v15 = NearbyGroup.description.getter();
      unint64_t v17 = v16;
      swift_release();
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v14 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v13, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_257351000, v10, type, "%s There is no member: %s in NearbyGroup.Member list", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v23, -1, -1);
      MEMORY[0x25A2B6460](v14, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
    }

    lazy protocol witness table accessor for type NearbyGroup.Errors and conformance NearbyGroup.Errors();
    swift_allocError();
    *uint64_t v18 = 1;
    swift_willThrow();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = (void *)*v1;
  v2[17] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](NearbyGroup.addMember(_:), 0, 0);
  }
  else
  {
    outlined consume of NearbyGroup.Member?(v2[12], v2[13]);
    uint64_t v3 = (uint64_t (*)(void))v2[1];
    return v3();
  }
}

{
  objc_super *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  Class v11;
  id v12;
  Class v13;
  id v14;
  objc_class *v15;
  char *v16;
  char *v17;
  char *v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  Class v24;
  objc_class *v25;
  Class super_class;
  objc_class *receiver;
  uint64_t v28;
  uint64_t v29;
  objc_super *v30;
  uint64_t v31;

  os_log_type_t v30 = v0;
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8].uint64_t super_class = (Class)__swift_project_value_buffer(v1, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t receiver = (objc_class *)v0[8].receiver;
    uint64_t v25 = (objc_class *)v0[7].receiver;
    uint64_t super_class = v0[7].super_class;
    unint64_t v24 = v0[6].super_class;
    uint64_t v4 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v29 = v28;
    *(_DWORD *)uint64_t v4 = 136315394;
    swift_retain();
    uint64_t v5 = NearbyGroup.description.getter();
    uint64_t v7 = v6;
    swift_release();
    v0[5].uint64_t receiver = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v4 + 12) = 2080;
    v0[1].uint64_t receiver = v24;
    v0[1].uint64_t super_class = v25;
    v0[2].uint64_t receiver = super_class;
    v0[2].uint64_t super_class = receiver;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = String.init<A>(reflecting:)();
    v0[5].uint64_t super_class = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_257351000, v2, v3, "%s received request to add member: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v28, -1, -1);
    MEMORY[0x25A2B6460](v4, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  os_log_type_t v11 = v0[7].super_class;
  unint64_t v10 = v0[8].receiver;
  unint64_t v13 = v0[6].super_class;
  BOOL v12 = v0[7].receiver;
  uint64_t v14 = v0[6].receiver;
  uint64_t v15 = (objc_class *)type metadata accessor for NearbyGroupMember();
  unint64_t v16 = (char *)objc_allocWithZone(v15);
  unint64_t v17 = &v16[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle];
  *(void *)unint64_t v17 = v13;
  *((void *)v17 + 1) = v12;
  uint64_t v18 = &v16[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID];
  *(void *)uint64_t v18 = v11;
  *((void *)v18 + 1) = v10;
  v0[3].uint64_t receiver = v16;
  v0[3].uint64_t super_class = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = objc_msgSendSuper2(v0 + 3, sel_init);
  v0[9].uint64_t receiver = v19;
  uint64_t v20 = swift_task_alloc();
  v0[9].uint64_t super_class = (Class)v20;
  *(void *)(v20 + 16) = v14;
  *(void *)(v20 + 24) = v19;
  unint64_t v21 = (void *)swift_task_alloc();
  v0[10].uint64_t receiver = v21;
  *unint64_t v21 = v0;
  v21[1] = NearbyGroup.addMember(_:);
  uint64_t v22 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA2360](v21, 0, 0, 0x65626D654D646461, 0xED0000293A5F2872, partial apply for closure #1 in NearbyGroup.addMember(_:), v20, v22);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NearbyGroup.addMember(_:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NearbyGroup.addMember(_:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t (*v15)(void);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v20 = v0;
  uint64_t v1 = (void *)v0[18];
  swift_retain_n();
  uint64_t v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (void *)v0[18];
    unint64_t v17 = v5;
    uint64_t v6 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = v18;
    *(_DWORD *)uint64_t v6 = 136315394;
    swift_retain();
    uint64_t v7 = NearbyGroup.description.getter();
    uint64_t v9 = v8;
    swift_release();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2080;
    unint64_t v10 = objc_msgSend(v5, sel_description);
    os_log_type_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v3, v4, "%s successfully added member: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v18, -1, -1);
    MEMORY[0x25A2B6460](v6, -1, -1);
  }
  else
  {
    uint64_t v14 = (void *)v0[18];

    swift_release_n();
  }
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 56);
  int64_t v25 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_21;
    }
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v14 >= v25) {
      goto LABEL_29;
    }
    unint64_t v15 = *(void *)(v24 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v25) {
        goto LABEL_29;
      }
      unint64_t v15 = *(void *)(v24 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v25) {
          goto LABEL_29;
        }
        unint64_t v15 = *(void *)(v24 + 8 * v11);
        if (!v15)
        {
          int64_t v11 = v14 + 3;
          if (v14 + 3 >= v25) {
            goto LABEL_29;
          }
          unint64_t v15 = *(void *)(v24 + 8 * v11);
          if (!v15)
          {
            int64_t v16 = v14 + 4;
            if (v16 >= v25)
            {
LABEL_29:
              swift_bridgeObjectRelease();
              uint64_t result = swift_release();
              *(_OWORD *)a4 = 0u;
              *(_OWORD *)(a4 + 16) = 0u;
              return result;
            }
            unint64_t v15 = *(void *)(v24 + 8 * v16);
            int64_t v11 = v16;
            if (!v15) {
              break;
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_21:
    unint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 32 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v21 = v17[2];
    uint64_t v20 = v17[3];
    if (*v17 == a2 && v19 == a3)
    {
      uint64_t v18 = a2;
      uint64_t v19 = a3;
LABEL_28:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      *(void *)a4 = v18;
      *(void *)(a4 + 8) = v19;
      *(void *)(a4 + 16) = v21;
      *(void *)(a4 + 24) = v20;
      return result;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_28;
    }
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_29;
    }
    unint64_t v15 = *(void *)(v24 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t NearbyGroup.addMember(_:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  *(void *)(v2 + 96) = v1;
  *(void *)(v2 + 104) = v3;
  *(void *)(v2 + 112) = v4;
  *(_OWORD *)(v2 + 120) = *((_OWORD *)a1 + 1);
  return MEMORY[0x270FA2498](NearbyGroup.addMember(_:), 0, 0);
}

uint64_t closure #1 in NearbyGroup.addMember(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #1 in closure #1 in NearbyGroup.addMember(_:);
  *(void *)(v12 + 24) = v11;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_97;
  unint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  id v14 = a3;
  swift_retain();
  swift_release();
  dispatch_sync(v9, v13);

  _Block_release(v13);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a3) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in NearbyGroup.addMember(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a1;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(&v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], a3, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v7 + 32))(v10 + v9, &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v6);
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

uint64_t NearbyGroup.kickMember(_:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  return MEMORY[0x270FA2498](NearbyGroup.kickMember(_:), 0, 0);
}

uint64_t NearbyGroup.kickMember(_:)()
{
  id v27 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v3 = v0[6];
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v3, v1, v2, (uint64_t)v24);
  swift_bridgeObjectRelease();
  uint64_t v4 = v24[0];
  uint64_t v5 = v24[1];
  v0[12] = v24[0];
  v0[13] = v5;
  uint64_t v6 = v25;
  uint64_t v7 = v26;
  v0[14] = v25;
  v0[15] = v7;
  if (v5)
  {
    v0[2] = v4;
    v0[3] = v5;
    v0[4] = v6;
    v0[5] = v7;
    uint64_t v8 = swift_task_alloc();
    v0[16] = v8;
    *(void *)uint64_t v8 = v0;
    *(void *)(v8 + 8) = NearbyGroup.kickMember(_:);
    *(void *)(v8 + 96) = v0[11];
    *(void *)(v8 + 104) = v0[2];
    *(void *)(v8 + 112) = v0[3];
    *(_OWORD *)(v8 + 120) = *((_OWORD *)v0 + 2);
    return MEMORY[0x270FA2498](NearbyGroup.kickMember(member:), 0, 0);
  }
  else
  {
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.group);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    unint64_t v13 = v0[10];
    if (v12)
    {
      uint64_t v22 = v0[9];
      uint64_t v14 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v24[0] = v23;
      *(_DWORD *)uint64_t v14 = 136315394;
      swift_retain();
      os_log_type_t type = v11;
      uint64_t v15 = NearbyGroup.description.getter();
      unint64_t v17 = v16;
      swift_release();
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v14 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v13, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_257351000, v10, type, "%s There is no member: %s in NearbyGroup.Member list", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v23, -1, -1);
      MEMORY[0x25A2B6460](v14, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
    }

    lazy protocol witness table accessor for type NearbyGroup.Errors and conformance NearbyGroup.Errors();
    swift_allocError();
    *uint64_t v18 = 1;
    swift_willThrow();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = (void *)*v1;
  v2[17] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](NearbyGroup.kickMember(_:), 0, 0);
  }
  else
  {
    outlined consume of NearbyGroup.Member?(v2[12], v2[13]);
    uint64_t v3 = (uint64_t (*)(void))v2[1];
    return v3();
  }
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of NearbyGroup.Member?(v0[12], v0[13]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t NearbyGroup.kickMember(member:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  *(void *)(v2 + 96) = v1;
  *(void *)(v2 + 104) = v3;
  *(void *)(v2 + 112) = v4;
  *(_OWORD *)(v2 + 120) = *((_OWORD *)a1 + 1);
  return MEMORY[0x270FA2498](NearbyGroup.kickMember(member:), 0, 0);
}

uint64_t NearbyGroup.kickMember(member:)()
{
  os_log_type_t v30 = v0;
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8].Class super_class = (Class)__swift_project_value_buffer(v1, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t receiver = (objc_class *)v0[8].receiver;
    uint64_t v25 = (objc_class *)v0[7].receiver;
    Class super_class = v0[7].super_class;
    Class v24 = v0[6].super_class;
    uint64_t v4 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v29 = v28;
    *(_DWORD *)uint64_t v4 = 136315394;
    swift_retain();
    uint64_t v5 = NearbyGroup.description.getter();
    unint64_t v7 = v6;
    swift_release();
    v0[5].uint64_t receiver = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v4 + 12) = 2080;
    v0[1].uint64_t receiver = v24;
    v0[1].Class super_class = v25;
    v0[2].uint64_t receiver = super_class;
    v0[2].Class super_class = receiver;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = String.init<A>(reflecting:)();
    v0[5].Class super_class = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_257351000, v2, v3, "%s received request to kick member: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v28, -1, -1);
    MEMORY[0x25A2B6460](v4, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  Class v11 = v0[7].super_class;
  id v10 = v0[8].receiver;
  Class v13 = v0[6].super_class;
  id v12 = v0[7].receiver;
  id v14 = v0[6].receiver;
  uint64_t v15 = (objc_class *)type metadata accessor for NearbyGroupMember();
  unint64_t v16 = (char *)objc_allocWithZone(v15);
  unint64_t v17 = &v16[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_handle];
  *(void *)unint64_t v17 = v13;
  *((void *)v17 + 1) = v12;
  uint64_t v18 = &v16[OBJC_IVAR____TtC14NearbySessions17NearbyGroupMember_tokenID];
  *(void *)uint64_t v18 = v11;
  *((void *)v18 + 1) = v10;
  v0[3].uint64_t receiver = v16;
  v0[3].Class super_class = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v19 = objc_msgSendSuper2(v0 + 3, sel_init);
  v0[9].uint64_t receiver = v19;
  uint64_t v20 = swift_task_alloc();
  v0[9].Class super_class = (Class)v20;
  *(void *)(v20 + 16) = v14;
  *(void *)(v20 + 24) = v19;
  uint64_t v21 = (void *)swift_task_alloc();
  v0[10].uint64_t receiver = v21;
  *uint64_t v21 = v0;
  uint64_t v22 = MEMORY[0x263F8EE60];
  v21[1] = NearbyGroup.kickMember(member:);
  return MEMORY[0x270FA2360](v21, 0, 0, 0xD000000000000013, 0x80000002573C30D0, partial apply for closure #1 in NearbyGroup.kickMember(member:), v20, v22 + 8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NearbyGroup.kickMember(member:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NearbyGroup.kickMember(member:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t (*v15)(void);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v20 = v0;
  uint64_t v1 = (void *)v0[18];
  swift_retain_n();
  uint64_t v2 = v1;
  os_log_type_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (void *)v0[18];
    unint64_t v17 = v5;
    unint64_t v6 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    id v19 = v18;
    *(_DWORD *)unint64_t v6 = 136315394;
    swift_retain();
    unint64_t v7 = NearbyGroup.description.getter();
    unint64_t v9 = v8;
    swift_release();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2080;
    id v10 = objc_msgSend(v5, sel_description);
    Class v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Class v13 = v12;

    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v3, v4, "%s successfully kicked member: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v18, -1, -1);
    MEMORY[0x25A2B6460](v6, -1, -1);
  }
  else
  {
    id v14 = (void *)v0[18];

    swift_release_n();
  }
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in NearbyGroup.kickMember(member:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #1 in closure #1 in NearbyGroup.kickMember(member:);
  *(void *)(v12 + 24) = v11;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_78;
  Class v13 = _Block_copy(aBlock);
  swift_retain();
  id v14 = a3;
  swift_retain();
  swift_release();
  dispatch_sync(v9, v13);

  _Block_release(v13);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a3) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in NearbyGroup.kickMember(member:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  id v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a1;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], a3, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v7 + 32))(v10 + v9, &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v6);
  swift_retain();
  id v11 = a2;
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

void closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, SEL *a8)
{
  uint64_t v26 = a7;
  id v27 = a8;
  uint64_t v23 = a2;
  uint64_t v24 = a6;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v11);
  id v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v15, v14, v11);
  *(void *)(v17 + v16) = a4;
  id v19 = v23;
  uint64_t v18 = v24;
  *(void *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8)) = v23;
  aBlock[4] = v18;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = v26;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = v19;
  swift_release();
  objc_msgSend(v25, *v27, v21, v20);
  _Block_release(v20);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(void *a1, uint64_t a2, uint64_t a3, void *a4, char *a5)
{
  if (a1)
  {
    id v8 = a1;
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.group);
    id v10 = a1;
    swift_retain();
    id v11 = a4;
    id v12 = a1;
    swift_retain();
    id v13 = v11;
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = v29;
      *(_DWORD *)uint64_t v16 = 136315650;
      format = a5;
      swift_retain();
      uint64_t v17 = NearbyGroup.description.getter();
      unint64_t v19 = v18;
      swift_release();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      id v20 = objc_msgSend(v13, sel_description);
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 22) = 2080;
      id v24 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v25 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_257351000, v14, v15, format, (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v29, -1, -1);
      MEMORY[0x25A2B6460](v16, -1, -1);
    }
    else
    {

      swift_release_n();
    }

    uint64_t v30 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #2 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(void *a1, uint64_t a2, void *a3)
{
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.group);
  swift_retain();
  id v6 = a3;
  id v7 = a1;
  swift_retain();
  id v8 = v6;
  id v9 = a1;
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = v25;
    *(_DWORD *)uint64_t v12 = 136315650;
    swift_retain();
    uint64_t v13 = NearbyGroup.description.getter();
    unint64_t v15 = v14;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    id v16 = objc_msgSend(v8, sel_description);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 22) = 2080;
    id v20 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v21 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v10, v11, "%s Had errorHandler called when trying to kick member: %s, error: %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v25, -1, -1);
    MEMORY[0x25A2B6460](v12, -1, -1);
  }
  else
  {

    swift_release_n();
  }

  uint64_t v26 = (uint64_t)a1;
  id v23 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t NearbyGroup.leave()()
{
  *(void *)(v1 + 32) = v0;
  return MEMORY[0x270FA2498](NearbyGroup.leave(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  unint64_t v14 = v0;
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[5] = __swift_project_value_buffer(v1, (uint64_t)static Log.group);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v13 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_retain();
    id v6 = NearbyGroup.description.getter();
    id v8 = v7;
    swift_release();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_257351000, v2, v3, "%s received request to leave", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v5, -1, -1);
    MEMORY[0x25A2B6460](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  id v9 = (void *)swift_task_alloc();
  v0[6] = v9;
  *id v9 = v0;
  v9[1] = NearbyGroup.leave();
  id v10 = v0[4];
  os_log_type_t v11 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA2360](v9, 0, 0, 0x2928657661656CLL, 0xE700000000000000, partial apply for closure #1 in NearbyGroup.leave(), v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = NearbyInvitationAdvertiser.stop();
  }
  else {
    uint64_t v2 = NearbyGroup.leave();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  os_log_type_t v11 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    id v10 = v4;
    *(_DWORD *)os_log_type_t v3 = 136315138;
    swift_retain();
    uint64_t v5 = NearbyGroup.description.getter();
    id v7 = v6;
    swift_release();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_257351000, v1, v2, "%s successfully left", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v4, -1, -1);
    MEMORY[0x25A2B6460](v3, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  id v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t closure #1 in NearbyGroup.leave()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  id v7 = XPCClient.queue.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in closure #1 in NearbyGroup.leave();
  *(void *)(v10 + 24) = v9;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_59;
  os_log_type_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v11);

  _Block_release(v11);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a2) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in NearbyGroup.leave()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v11 = a2;
  uint64_t v12 = a1;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(&v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], a2, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v5 + 32))(v8 + v7, &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  swift_retain();
  XPCClient.withSynchronousHost<A>(body:errorHandler:)();
  return swift_release();
}

void closure #1 in closure #1 in closure #1 in NearbyGroup.leave()(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(void *)(v11 + ((v8 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.leave();
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_68_0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_leaveWithCompletion_, v12);
  _Block_release(v12);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.leave()(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.group);
    id v4 = a1;
    swift_retain();
    id v5 = a1;
    swift_retain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v17 = v9;
      *(_DWORD *)uint64_t v8 = 136315394;
      swift_retain();
      uint64_t v10 = NearbyGroup.description.getter();
      unint64_t v12 = v11;
      swift_release();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      id v13 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v14 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_257351000, v6, v7, "%s was told an error remotely when trying to leave, error: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v9, -1, -1);
      MEMORY[0x25A2B6460](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    uint64_t v17 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #2 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.group);
  swift_retain();
  id v7 = a1;
  swift_retain();
  id v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v22 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_retain();
    uint64_t v13 = NearbyGroup.description.getter();
    uint64_t v14 = a4;
    unint64_t v16 = v15;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    id v17 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v18 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v9, v10, v14, (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v12, -1, -1);
    MEMORY[0x25A2B6460](v11, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v22 = (uint64_t)a1;
  id v20 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t NearbyGroup.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup__members;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup__state;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroup.State>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t NearbyGroup.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup__members;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup__state;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroup.State>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();

  uint64_t v7 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v8 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v7, v8);
}

uint64_t protocol witness for InvitationSourceProvider.id.getter in conformance NearbyGroup@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t protocol witness for InvitationSourceProvider.didApproveMember(member:) in conformance NearbyGroup(uint64_t *a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(void *)(v5 + 88) = v4;
  *(void *)(v5 + 96) = v6;
  *(void *)(v5 + 104) = v7;
  *(_OWORD *)(v5 + 112) = *((_OWORD *)a1 + 1);
  return MEMORY[0x270FA2498](NearbyGroup.didApproveMember(member:), 0, 0);
}

uint64_t NearbyGroup.didApproveMember(member:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  *(void *)(v2 + 88) = v1;
  *(void *)(v2 + 96) = v3;
  *(void *)(v2 + 104) = v4;
  *(_OWORD *)(v2 + 112) = *((_OWORD *)a1 + 1);
  return MEMORY[0x270FA2498](NearbyGroup.didApproveMember(member:), 0, 0);
}

uint64_t NearbyGroup.didApproveMember(member:)()
{
  uint64_t v18 = v0;
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.group);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 120);
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v17 = v8;
    *(void *)(v0 + 48) = v6;
    *(void *)(v0 + 56) = v5;
    *(void *)(v0 + 64) = v4;
    *(void *)(v0 + 72) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = String.init<A>(reflecting:)();
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_257351000, v2, v3, "Received approved member: %s attempting to add now", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v8, -1, -1);
    MEMORY[0x25A2B6460](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v11 = *(void *)(v0 + 104);
  *(void *)(v0 + 16) = *(void *)(v0 + 96);
  *(void *)(v0 + 24) = v11;
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 112);
  uint64_t v12 = swift_task_alloc();
  *(void *)(v0 + 128) = v12;
  *(void *)uint64_t v12 = v0;
  *(void *)(v12 + 8) = NearbyGroup.didApproveMember(member:);
  uint64_t v13 = *(void *)(v0 + 16);
  uint64_t v14 = *(void *)(v0 + 24);
  *(void *)(v12 + 96) = *(void *)(v0 + 88);
  *(void *)(v12 + 104) = v13;
  *(void *)(v12 + 112) = v14;
  *(_OWORD *)(v12 + 120) = *(_OWORD *)(v0 + 32);
  return MEMORY[0x270FA2498](NearbyGroup.addMember(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](NearbyGroup.didApproveMember(member:), 0, 0);
  }
  else
  {
    os_log_type_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NearbyGroup.description.getter()
{
  _StringGuts.grow(_:)(88);
  v1._object = (void *)0x80000002573C30F0;
  v1._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v1);
  uint64_t v21 = v0;
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x203A6469202CLL;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3A6574617473202CLL;
  v4._object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  _print_unlocked<A, B>(_:_:)();
  outlined consume of NearbyGroup.State(v0);
  v5._countAndFlagsBits = 0x696F70646E65202CLL;
  v5._object = (void *)0xEC000000203A746ELL;
  String.append(_:)(v5);
  id v6 = *(id *)&v0[OBJC_IVAR____TtC14NearbySessions11NearbyGroup_endpoint];
  id v7 = objc_msgSend(v6, sel_description);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();

  v12._countAndFlagsBits = 0x7265626D656D202CLL;
  v12._object = (void *)0xEB00000000203A73;
  String.append(_:)(v12);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type NearbyGroup.Member and conformance NearbyGroup.Member();
  v13._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0xD000000000000014;
  v14._object = (void *)0x80000002573C3110;
  String.append(_:)(v14);
  unint64_t v15 = &v21[OBJC_IVAR____TtC14NearbySessions11NearbyGroup_localMemberHandle];
  swift_beginAccess();
  if (*((void *)v15 + 1))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v16 = String.init<A>(reflecting:)();
    unint64_t v18 = v17;
  }
  else
  {
    unint64_t v18 = 0xE300000000000000;
    uint64_t v16 = 7104878;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyGroup()
{
  return NearbyGroup.description.getter();
}

uint64_t static NearbyGroup.groups(service:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation.BufferingPolicy);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  Swift::String v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v4 - 8);
  id v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  if (one-time initialization token for shared != -1) {
    uint64_t v8 = swift_once();
  }
  MEMORY[0x270FA5388](v8);
  *(&v11 - 2) = v9;
  *(&v11 - 1) = (uint64_t)v6;
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F8F580], v0);
  AsyncStream.init(_:bufferingPolicy:_:)();
  return outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t static NearbyGroup.groups(service:identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation.BufferingPolicy);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1) {
    uint64_t v5 = swift_once();
  }
  MEMORY[0x270FA5388](v5);
  *(&v10 - 2) = v8;
  *(&v10 - 1) = a2;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, *MEMORY[0x263F8F580], v3);
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

uint64_t closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a3;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v25 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v11 - 8);
  Swift::String v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  outlined init with copy of (UUID, Bool)(a3, (uint64_t)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v15 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 40) & ~v16;
  uint64_t v26 = v16 | 7;
  unint64_t v18 = (v10 + *(unsigned __int8 *)(v6 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = 0;
  *((void *)v19 + 3) = 0;
  *((void *)v19 + 4) = v29;
  outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v19[v17], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v19[v18], v25, v15);
  swift_retain();
  uint64_t v20 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:), (uint64_t)v19);
  outlined init with copy of (UUID, Bool)(v27, (uint64_t)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v21 = (v16 + 16) & ~v16;
  uint64_t v22 = swift_allocObject();
  outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember((uint64_t)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)(v22 + ((v10 + v21 + 7) & 0xFFFFFFFFFFFFFFF8)) = v20;
  return AsyncStream.Continuation.onTermination.setter();
}

uint64_t closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  v6[15] = v7;
  v6[16] = *(void *)(v7 - 8);
  v6[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo)?);
  v6[18] = swift_task_alloc();
  v6[19] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation.YieldResult);
  v6[20] = v8;
  v6[21] = *(void *)(v8 - 8);
  v6[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v6[23] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v6[24] = v9;
  v6[25] = *(void *)(v9 - 8);
  v6[26] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  v6[27] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[28] = v11;
  v6[29] = *(void *)(v11 + 64);
  v6[30] = swift_task_alloc();
  v6[31] = swift_task_alloc();
  v6[32] = swift_task_alloc();
  v6[33] = swift_task_alloc();
  v6[34] = swift_task_alloc();
  v6[35] = swift_task_alloc();
  v6[36] = swift_task_alloc();
  v6[37] = swift_task_alloc();
  v6[38] = swift_task_alloc();
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[UUID : NearbyGroupConnectionInfo]>.Publisher>);
  v6[41] = v12;
  v6[42] = *(void *)(v12 - 8);
  v6[43] = swift_task_alloc();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>.Publisher);
  v6[44] = v13;
  v6[45] = *(void *)(v13 - 8);
  v6[46] = swift_task_alloc();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<[UUID : NearbyGroupConnectionInfo]>.Publisher>.Iterator);
  v6[47] = v14;
  v6[48] = *(void *)(v14 - 8);
  v6[49] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:), 0, 0);
}

uint64_t closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)()
{
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  v0[50] = __swift_project_value_buffer(v0[15], (uint64_t)static Log.group);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_257351000, v1, v2, "Waiting for groups", v3, 2u);
    MEMORY[0x25A2B6460](v3, -1, -1);
  }
  uint64_t v4 = v0[45];
  uint64_t v5 = v0[46];
  uint64_t v6 = v0[43];
  uint64_t v7 = v0[44];
  uint64_t v8 = v0[41];
  uint64_t v9 = v0[42];

  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>);
  Published.projectedValue.getter();
  swift_endAccess();
  uint64_t v10 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[UUID : NearbyGroupConnectionInfo]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UUID : NearbyGroupConnectionInfo]>.Publisher);
  MEMORY[0x25A2B55C0](v7, v10);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v7);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6, v8);
  v0[51] = OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_groupTable;
  uint64_t v13 = (char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu
      + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[52] = (uint64_t)v11;
  *uint64_t v11 = v0;
  v11[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
  return ((uint64_t (*)(void, void, uint64_t *))v13)(0, 0, v0 + 5);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint8_t *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t (*v12)(void);
  uint64_t result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, unint64_t, uint64_t);
  void *v35;
  uint64_t v36;
  id v37;
  int isUniquelyReferenced_nonNull_native;
  char v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  int64_t v62;
  uint64_t (*v63)(void *);
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;

  uint64_t v67 = v0;
  uint64_t v1 = v0[53];
  if (v1)
  {
    swift_bridgeObjectRetain_n();
    os_log_type_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.default.getter();
    uint64_t v58 = v1;
    int v65 = v0;
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v66 = v5;
      *(_DWORD *)uint64_t v4 = 136315138;
      v0[10] = v58;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : NearbyGroupConnectionInfo]);
      uint64_t v6 = String.init<A>(reflecting:)();
      v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_257351000, v2, v3, "Heard about groups: %s", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v5, -1, -1);
      uint64_t v8 = v4;
      uint64_t v1 = v58;
      MEMORY[0x25A2B6460](v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v60 = v0 + 6;
    uint64_t v14 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v56 = v1 + 64;
    uint64_t v15 = -1;
    uint64_t v16 = -1 << *(unsigned char *)(v1 + 32);
    if (-v16 < 64) {
      uint64_t v15 = ~(-1 << -(char)v16);
    }
    uint64_t v17 = v15 & *(void *)(v1 + 64);
    uint64_t v57 = (unint64_t)(63 - v16) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    for (i = 0; ; i = v62)
    {
      v0[54] = v14;
      uint64_t v64 = v14;
      if (v17)
      {
        os_log_t v61 = (v17 - 1) & v17;
        uint64_t v62 = i;
        id v23 = __clz(__rbit64(v17)) | (i << 6);
      }
      else
      {
        uint64_t v24 = i + 1;
        if (__OFADD__(i, 1)) {
          goto LABEL_52;
        }
        if (v24 >= v57)
        {
LABEL_44:
          uint64_t v52 = v0[51];
          uint64_t v53 = v0[12];
          swift_release();
          os_log_type_t v54 = *(void *)(v53 + v52);
          v0[55] = v54;
          uint64_t v63 = (uint64_t (*)(void *))(*(void *)(*(void *)v54 + 144)
                                                 + **(int **)(*(void *)v54 + 144));
          id v55 = (void *)swift_task_alloc();
          v0[56] = v55;
          uint8_t *v55 = v0;
          v55[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
          return v63(v14);
        }
        uint64_t v25 = *(void *)(v56 + 8 * v24);
        uint64_t v26 = i + 1;
        if (!v25)
        {
          uint64_t v26 = i + 2;
          if (i + 2 >= v57) {
            goto LABEL_44;
          }
          uint64_t v25 = *(void *)(v56 + 8 * v26);
          if (!v25)
          {
            uint64_t v26 = i + 3;
            if (i + 3 >= v57) {
              goto LABEL_44;
            }
            uint64_t v25 = *(void *)(v56 + 8 * v26);
            if (!v25)
            {
              uint64_t v26 = i + 4;
              if (i + 4 >= v57) {
                goto LABEL_44;
              }
              uint64_t v25 = *(void *)(v56 + 8 * v26);
              if (!v25)
              {
                uint64_t v26 = i + 5;
                if (i + 5 >= v57) {
                  goto LABEL_44;
                }
                uint64_t v25 = *(void *)(v56 + 8 * v26);
                if (!v25)
                {
                  uint64_t v27 = i + 6;
                  if (i + 6 >= v57) {
                    goto LABEL_44;
                  }
                  uint64_t v25 = *(void *)(v56 + 8 * v27);
                  if (!v25)
                  {
                    while (1)
                    {
                      uint64_t v26 = v27 + 1;
                      if (__OFADD__(v27, 1)) {
                        goto LABEL_53;
                      }
                      if (v26 >= v57) {
                        goto LABEL_44;
                      }
                      uint64_t v25 = *(void *)(v56 + 8 * v26);
                      ++v27;
                      if (v25) {
                        goto LABEL_34;
                      }
                    }
                  }
                  uint64_t v26 = i + 6;
                }
              }
            }
          }
        }
LABEL_34:
        os_log_t v61 = (v25 - 1) & v25;
        uint64_t v62 = v26;
        id v23 = __clz(__rbit64(v25)) + (v26 << 6);
      }
      uint64_t v29 = v0[39];
      uint64_t v28 = v0[40];
      uint64_t v30 = v0[38];
      uint64_t v31 = v65[27];
      uint64_t v32 = v65[25];
      uint64_t v33 = v65[24];
      unint64_t v34 = *(void (**)(uint64_t, unint64_t, uint64_t))(v32 + 16);
      uint64_t v59 = *(void *)(v32 + 72);
      v34(v28, *(void *)(v1 + 48) + v59 * v23, v33);
      unint64_t v35 = *(void **)(*(void *)(v1 + 56) + 8 * v23);
      *(void *)(v28 + *(int *)(v31 + 48)) = v35;
      outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(v28, v29, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
      id v36 = *(int *)(v31 + 48);
      uint64_t v0 = v65;
      v34(v30, v29, v33);
      *(void *)(v30 + v36) = *(void *)(v29 + v36);
      uint64_t v37 = v35;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v65[6] = v64;
      uint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
      unint64_t v41 = v64[2];
      unint64_t v42 = (v39 & 1) == 0;
      uint64_t result = v41 + v42;
      if (__OFADD__(v41, v42))
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        return result;
      }
      uint64_t v43 = v39;
      if (v64[3] >= result)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        id v44 = v65[38];
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
        uint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v44);
        if ((v43 & 1) != (v46 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        uint64_t v40 = v45;
      }
      uint64_t v14 = (void *)*v60;
      if (v43)
      {
        *(unsigned char *)(v14[7] + v40) = 1;
      }
      else
      {
        unint64_t v47 = v65[38];
        os_log_t v48 = v65[24];
        v14[(v40 >> 6) + 8] |= 1 << v40;
        uint64_t result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v34)(v14[6] + v40 * v59, v47, v48);
        *(unsigned char *)(v14[7] + v40) = 1;
        uint64_t v49 = v14[2];
        uint64_t v50 = __OFADD__(v49, 1);
        uint64_t v51 = v49 + 1;
        if (v50) {
          goto LABEL_51;
        }
        v14[2] = v51;
      }
      uint64_t v20 = v65[38];
      unint64_t v19 = v65[39];
      uint64_t v22 = v65[24];
      uint64_t v21 = v65[25];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      uint64_t result = outlined destroy of Invitation_HostConnectionInfo?(v19, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
      uint64_t v1 = v58;
      uint64_t v17 = v61;
    }
  }
  (*(void (**)(void, void))(v0[48] + 8))(v0[49], v0[47]);
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_257351000, v9, v10, "No longer waiting for groups", v11, 2u);
    MEMORY[0x25A2B6460](v11, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation);
  AsyncStream.Continuation.finish()();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t, void);
  void (*v22)(uint64_t, uint64_t, uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, void);
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, void *, uint64_t);
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t v53;

  *(void *)(v0 + 72) = *(void *)(v0 + 512);
  os_log_type_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t result = outlined destroy of Invitation_HostConnectionInfo?(*(void *)(v0 + 288), &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  uint64_t v6 = *(void *)(v0 + 456);
  uint64_t v5 = *(void *)(v0 + 464);
  if (!v5) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v7 = __clz(__rbit64(v5));
  uint64_t v8 = (v5 - 1) & v5;
  uint64_t v9 = v7 | (v6 << 6);
  uint64_t v10 = *(void *)(v0 + 424);
  while (1)
  {
    unint64_t v46 = v8;
    unint64_t v47 = v6;
    *(void *)(v0 + 456) = v6;
    *(void *)(v0 + 464) = v8;
    uint64_t v16 = *(void *)(v0 + 296);
    uint64_t v17 = *(void *)(v0 + 216);
    unint64_t v19 = *(void *)(v0 + 192);
    unint64_t v18 = *(void *)(v0 + 200);
    uint64_t v51 = *(void *)(v0 + 184);
    os_log_t v48 = *(void *)(v0 + 288);
    uint64_t v49 = *(void *)(v0 + 104);
    uint64_t v20 = *(void *)(v10 + 48) + *(void *)(v18 + 72) * v9;
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, void))(v18 + 16);
    *(void *)(v0 + 472) = v21;
    *(void *)(v0 + 480) = (v18 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v45 = v21;
    v21(v16, v20, v19);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
    id v23 = *(void **)(*(void *)(v10 + 56) + 8 * v9);
    *(void *)(v16 + *(int *)(v17 + 48)) = v23;
    uint64_t v24 = *(int *)(v17 + 48);
    *(_DWORD *)(v0 + 520) = v24;
    v22(v48, v16, v19);
    id v44 = v24;
    *(void *)(v48 + v24) = v23;
    outlined init with copy of (UUID, Bool)(v49, v51, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v51, 1, v19) == 1) {
      break;
    }
    uint64_t v25 = *(void *)(v0 + 200);
    uint64_t v26 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 192);
    v22(v26, *(void *)(v0 + 184), v27);
    uint64_t v28 = v23;
    uint64_t v29 = static UUID.== infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
    if (v29) {
      goto LABEL_22;
    }
    uint64_t result = outlined destroy of Invitation_HostConnectionInfo?(*(void *)(v0 + 288), &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    uint64_t v5 = v46;
    uint64_t v6 = v47;
    if (v46) {
      goto LABEL_2;
    }
LABEL_3:
    uint64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    uint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v0 + 524)) + 63) >> 6;
    uint64_t v10 = *(void *)(v0 + 424);
    if (v11 >= v12) {
      goto LABEL_25;
    }
    uint64_t v13 = v10 + 64;
    uint64_t v14 = *(void *)(v10 + 64 + 8 * v11);
    ++v6;
    if (!v14)
    {
      uint64_t v6 = v11 + 1;
      if (v11 + 1 >= v12) {
        goto LABEL_25;
      }
      uint64_t v14 = *(void *)(v13 + 8 * v6);
      if (!v14)
      {
        uint64_t v6 = v11 + 2;
        if (v11 + 2 >= v12) {
          goto LABEL_25;
        }
        uint64_t v14 = *(void *)(v13 + 8 * v6);
        if (!v14)
        {
          uint64_t v15 = v11 + 3;
          if (v15 >= v12)
          {
LABEL_25:
            swift_release();
            uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu
                                                           + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu);
            uint64_t v43 = (void *)swift_task_alloc();
            *(void *)(v0 + 416) = v43;
            *uint64_t v43 = v0;
            v43[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
            return v52(0, 0);
          }
          uint64_t v14 = *(void *)(v13 + 8 * v15);
          if (!v14)
          {
            while (1)
            {
              uint64_t v6 = v15 + 1;
              if (__OFADD__(v15, 1)) {
                goto LABEL_29;
              }
              if (v6 >= v12) {
                goto LABEL_25;
              }
              uint64_t v14 = *(void *)(v13 + 8 * v6);
              ++v15;
              if (v14) {
                goto LABEL_16;
              }
            }
          }
          uint64_t v6 = v15;
        }
      }
    }
LABEL_16:
    uint64_t v8 = (v14 - 1) & v14;
    uint64_t v9 = __clz(__rbit64(v14)) + (v6 << 6);
  }
  uint64_t v30 = *(void *)(v0 + 184);
  uint64_t v31 = v23;
  outlined destroy of Invitation_HostConnectionInfo?(v30, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_22:
  uint64_t v32 = *(void *)(v0 + 440);
  unint64_t v34 = *(void *)(v0 + 280);
  uint64_t v33 = *(void *)(v0 + 288);
  unint64_t v35 = *(void *)(v0 + 224);
  id v36 = *(int *)(*(void *)(v0 + 216) + 48);
  v45(v34, v33, *(void *)(v0 + 192));
  uint64_t v37 = *(void **)(v33 + v44);
  *(void *)(v34 + v36) = v37;
  unint64_t v38 = (*(unsigned __int8 *)(v35 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  uint64_t v39 = swift_allocObject();
  *(void *)(v0 + 488) = v39;
  outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(v34, v39 + v38, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  uint64_t v50 = (uint64_t (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v32 + 152)
                                                         + **(int **)(*(void *)v32 + 152));
  uint64_t v40 = v37;
  unint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v41;
  *unint64_t v41 = v0;
  v41[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
  unint64_t v42 = *(void *)(v0 + 288);
  return v50(v42, &async function pointer to partial apply for closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:), v39);
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  void (*v59)(uint64_t, uint64_t, uint64_t);
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  char v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  unint64_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, void *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t);
  uint64_t v97;

  uint64_t v1 = *(void **)(v0 + 504);
  os_log_type_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 472);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 256);
  v89 = *(int *)(v0 + 520);
  v93 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v7 = *(void *)(v0 + 192);
  (*(void (**)(void, void, void))(*(void *)(v0 + 128) + 16))(*(void *)(v0 + 136), *(void *)(v0 + 400), *(void *)(v0 + 120));
  uint64_t v8 = *(int *)(v6 + 48);
  v2(v4, v3, v7);
  uint64_t v9 = *(void **)(v3 + v89);
  *(void *)(v4 + v8) = v9;
  outlined init with copy of (UUID, Bool)(v4, v5, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(v4, v93, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  uint64_t v10 = v1;
  uint64_t v11 = v1;
  uint64_t v12 = v9;
  uint64_t v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v90 = (uint64_t *)(v0 + 56);
    uint64_t v15 = *(void *)(v0 + 248);
    uint64_t v17 = *(void *)(v0 + 216);
    uint64_t v16 = *(void *)(v0 + 224);
    unint64_t v19 = *(void *)(v0 + 144);
    unint64_t v18 = *(void *)(v0 + 152);
    uint64_t v20 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(void *)(v0 + 56) = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    outlined init with copy of (UUID, Bool)(v15, v18, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v17);
    outlined init with copy of (UUID, Bool)(v18, v19, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo)?);
    v94 = v21;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v19, 1, v17) == 1)
    {
      uint64_t v22 = 0xE300000000000000;
      id v23 = 7104878;
    }
    else
    {
      uint64_t v30 = *(void *)(v0 + 264);
      uint64_t v31 = *(void *)(v0 + 272);
      outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(*(void *)(v0 + 144), v31, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
      outlined init with copy of (UUID, Bool)(v31, v30, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
      id v23 = String.init<A>(reflecting:)();
      uint64_t v22 = v32;
      outlined destroy of Invitation_HostConnectionInfo?(v31, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    }
    uint64_t v33 = *(void **)(v0 + 504);
    unint64_t v34 = *(void *)(v0 + 240);
    unint64_t v35 = *(void *)(v0 + 248);
    id v36 = *(void *)(v0 + 128);
    v84 = *(void *)(v0 + 120);
    v86 = *(void *)(v0 + 136);
    outlined destroy of Invitation_HostConnectionInfo?(*(void *)(v0 + 152), &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo)?);
    *(void *)(v20 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, v90);
    swift_bridgeObjectRelease();
    outlined destroy of Invitation_HostConnectionInfo?(v34, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    outlined destroy of Invitation_HostConnectionInfo?(v35, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    *(_WORD *)(v20 + 12) = 2080;
    *(void *)(v0 + 64) = v33;
    uint64_t v37 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    unint64_t v38 = String.init<A>(reflecting:)();
    *(void *)(v20 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v90);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v13, v14, "Failed to create new nearbyGroup %s, error: %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v94, -1, -1);
    MEMORY[0x25A2B6460](v20, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v86, v84);
  }
  else
  {
    uint64_t v24 = *(void **)(v0 + 504);
    uint64_t v26 = *(void *)(v0 + 240);
    uint64_t v25 = *(void *)(v0 + 248);
    uint64_t v28 = *(void *)(v0 + 128);
    uint64_t v27 = *(void *)(v0 + 136);
    uint64_t v29 = *(void *)(v0 + 120);

    outlined destroy of Invitation_HostConnectionInfo?(v26, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    outlined destroy of Invitation_HostConnectionInfo?(v25, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
  }
  uint64_t v40 = v0;
  uint64_t result = outlined destroy of Invitation_HostConnectionInfo?(*(void *)(v0 + 288), &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  uint64_t v43 = *(void *)(v0 + 456);
  unint64_t v42 = *(void *)(v0 + 464);
  if (!v42) {
    goto LABEL_9;
  }
LABEL_8:
  id v44 = __clz(__rbit64(v42));
  uint64_t v45 = (v42 - 1) & v42;
  unint64_t v46 = v44 | (v43 << 6);
  unint64_t v47 = *(void *)(v40 + 424);
  while (1)
  {
    v85 = v45;
    v87 = v43;
    *(void *)(v40 + 456) = v43;
    *(void *)(v40 + 464) = v45;
    uint64_t v53 = *(void *)(v40 + 296);
    os_log_type_t v54 = *(void *)(v40 + 216);
    uint64_t v56 = *(void *)(v40 + 192);
    id v55 = *(void *)(v40 + 200);
    v95 = *(void *)(v40 + 184);
    v88 = *(void *)(v40 + 288);
    v91 = *(void *)(v40 + 104);
    uint64_t v57 = *(void *)(v47 + 48) + *(void *)(v55 + 72) * v46;
    uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16);
    *(void *)(v40 + 472) = v58;
    *(void *)(v40 + 480) = (v55 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v83 = v58;
    v58(v53, v57, v56);
    uint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32);
    uint64_t v60 = *(void **)(*(void *)(v47 + 56) + 8 * v46);
    *(void *)(v53 + *(int *)(v54 + 48)) = v60;
    os_log_t v61 = *(int *)(v54 + 48);
    *(_DWORD *)(v40 + 520) = v61;
    v59(v88, v53, v56);
    *(void *)(v88 + v61) = v60;
    outlined init with copy of (UUID, Bool)(v91, v95, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v95, 1, v56) == 1) {
      break;
    }
    uint64_t v62 = *(void *)(v40 + 200);
    uint64_t v63 = *(void *)(v40 + 208);
    uint64_t v64 = *(void *)(v40 + 192);
    v59(v63, *(void *)(v40 + 184), v64);
    int v65 = v60;
    uint64_t v66 = static UUID.== infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v63, v64);
    if (v66) {
      goto LABEL_28;
    }
    uint64_t result = outlined destroy of Invitation_HostConnectionInfo?(*(void *)(v40 + 288), &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    unint64_t v42 = v85;
    uint64_t v43 = v87;
    if (v85) {
      goto LABEL_8;
    }
LABEL_9:
    os_log_t v48 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }
    uint64_t v49 = (unint64_t)((1 << *(unsigned char *)(v40 + 524)) + 63) >> 6;
    unint64_t v47 = *(void *)(v40 + 424);
    if (v48 >= v49) {
      goto LABEL_31;
    }
    uint64_t v50 = v47 + 64;
    uint64_t v51 = *(void *)(v47 + 64 + 8 * v48);
    ++v43;
    if (!v51)
    {
      uint64_t v43 = v48 + 1;
      if (v48 + 1 >= v49) {
        goto LABEL_31;
      }
      uint64_t v51 = *(void *)(v50 + 8 * v43);
      if (!v51)
      {
        uint64_t v43 = v48 + 2;
        if (v48 + 2 >= v49) {
          goto LABEL_31;
        }
        uint64_t v51 = *(void *)(v50 + 8 * v43);
        if (!v51)
        {
          uint64_t v52 = v48 + 3;
          if (v52 >= v49)
          {
LABEL_31:
            swift_release();
            v96 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu
                                                           + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu);
            v82 = (void *)swift_task_alloc();
            *(void *)(v40 + 416) = v82;
            *v82 = v40;
            v82[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
            return v96(0, 0);
          }
          uint64_t v51 = *(void *)(v50 + 8 * v52);
          if (!v51)
          {
            while (1)
            {
              uint64_t v43 = v52 + 1;
              if (__OFADD__(v52, 1)) {
                goto LABEL_35;
              }
              if (v43 >= v49) {
                goto LABEL_31;
              }
              uint64_t v51 = *(void *)(v50 + 8 * v43);
              ++v52;
              if (v51) {
                goto LABEL_22;
              }
            }
          }
          uint64_t v43 = v52;
        }
      }
    }
LABEL_22:
    uint64_t v45 = (v51 - 1) & v51;
    unint64_t v46 = __clz(__rbit64(v51)) + (v43 << 6);
  }
  uint64_t v67 = *(void *)(v40 + 184);
  id v68 = v60;
  outlined destroy of Invitation_HostConnectionInfo?(v67, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_28:
  v69 = *(void *)(v40 + 440);
  uint64_t v71 = *(void *)(v40 + 280);
  v70 = *(void *)(v40 + 288);
  uint64_t v72 = *(void *)(v40 + 224);
  id v73 = *(void *)(v40 + 192);
  uint64_t v74 = (void *)v40;
  unint64_t v75 = *(int *)(*(void *)(v40 + 216) + 48);
  v83(v71, v70, v73);
  objc_super v76 = *(void **)(v70 + v61);
  *(void *)(v71 + v75) = v76;
  uint64_t v77 = (*(unsigned __int8 *)(v72 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
  v78 = swift_allocObject();
  v74[61] = v78;
  outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(v71, v78 + v77, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  v92 = (uint64_t (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v69 + 152)
                                                         + **(int **)(*(void *)v69 + 152));
  v79 = v76;
  v80 = (void *)swift_task_alloc();
  v74[62] = v80;
  *v80 = v74;
  v80[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
  v81 = v74[36];
  return v92(v81, &async function pointer to partial apply for closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:), v78);
}

uint64_t closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 424) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 504) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    uint64_t v5 = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
  }
  else
  {
    *(void *)(v4 + 512) = a1;
    uint64_t v5 = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

void closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)()
{
  int64_t v1 = 0;
  uint64_t v2 = *(void *)(v0 + 424);
  char v3 = *(unsigned char *)(v2 + 32);
  *(unsigned char *)(v0 + 524) = v3;
  uint64_t v4 = 1 << v3;
  uint64_t v5 = *(void *)(v2 + 64);
  BOOL v6 = v4 < 64;
  uint64_t v7 = -1 << v4;
  if (v6) {
    uint64_t v8 = ~v7;
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & v5;
  if ((v8 & v5) == 0) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v10 = __clz(__rbit64(v9));
  uint64_t v11 = (v9 - 1) & v9;
  unint64_t v12 = v10 | (v1 << 6);
  uint64_t v13 = *(void *)(v0 + 424);
  while (1)
  {
    unint64_t v49 = v11;
    int64_t v50 = v1;
    *(void *)(v0 + 456) = v1;
    *(void *)(v0 + 464) = v11;
    uint64_t v19 = *(void *)(v0 + 296);
    uint64_t v20 = *(void *)(v0 + 216);
    uint64_t v22 = *(void *)(v0 + 192);
    uint64_t v21 = *(void *)(v0 + 200);
    uint64_t v54 = *(void *)(v0 + 184);
    uint64_t v51 = *(void *)(v0 + 288);
    uint64_t v52 = *(void *)(v0 + 104);
    unint64_t v23 = *(void *)(v13 + 48) + *(void *)(v21 + 72) * v12;
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, void))(v21 + 16);
    *(void *)(v0 + 472) = v24;
    *(void *)(v0 + 480) = (v21 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    os_log_t v48 = v24;
    v24(v19, v23, v22);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
    uint64_t v26 = *(void **)(*(void *)(v13 + 56) + 8 * v12);
    *(void *)(v19 + *(int *)(v20 + 48)) = v26;
    uint64_t v27 = *(int *)(v20 + 48);
    *(_DWORD *)(v0 + 520) = v27;
    v25(v51, v19, v22);
    uint64_t v47 = v27;
    *(void *)(v51 + v27) = v26;
    outlined init with copy of (UUID, Bool)(v52, v54, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v54, 1, v22) == 1) {
      break;
    }
    uint64_t v28 = *(void *)(v0 + 200);
    uint64_t v29 = *(void *)(v0 + 208);
    uint64_t v30 = *(void *)(v0 + 192);
    v25(v29, *(void *)(v0 + 184), v30);
    id v31 = v26;
    char v32 = static UUID.== infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v30);
    if (v32) {
      goto LABEL_25;
    }
    outlined destroy of Invitation_HostConnectionInfo?(*(void *)(v0 + 288), &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    unint64_t v9 = v49;
    int64_t v1 = v50;
    if (v49) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v14 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      return;
    }
    int64_t v15 = (unint64_t)((1 << *(unsigned char *)(v0 + 524)) + 63) >> 6;
    uint64_t v13 = *(void *)(v0 + 424);
    if (v14 >= v15) {
      goto LABEL_28;
    }
    uint64_t v16 = v13 + 64;
    unint64_t v17 = *(void *)(v13 + 64 + 8 * v14);
    ++v1;
    if (!v17)
    {
      int64_t v1 = v14 + 1;
      if (v14 + 1 >= v15) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v16 + 8 * v1);
      if (!v17)
      {
        int64_t v1 = v14 + 2;
        if (v14 + 2 >= v15) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v16 + 8 * v1);
        if (!v17)
        {
          int64_t v18 = v14 + 3;
          if (v18 >= v15)
          {
LABEL_28:
            swift_release();
            id v55 = (void (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu
                                                        + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF7Combine14AsyncPublisherV8IteratorVyAI9PublishedV0G0VySDy10Foundation4UUIDV14NearbySessions0L19GroupConnectionInfoCG_G_G_Tg5Tu);
            unint64_t v46 = (void *)swift_task_alloc();
            *(void *)(v0 + 416) = v46;
            void *v46 = v0;
            v46[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
            v55(0, 0);
            return;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              int64_t v1 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_32;
              }
              if (v1 >= v15) {
                goto LABEL_28;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v1);
              ++v18;
              if (v17) {
                goto LABEL_19;
              }
            }
          }
          int64_t v1 = v18;
        }
      }
    }
LABEL_19:
    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v1 << 6);
  }
  uint64_t v33 = *(void *)(v0 + 184);
  id v34 = v26;
  outlined destroy of Invitation_HostConnectionInfo?(v33, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_25:
  uint64_t v35 = *(void *)(v0 + 440);
  uint64_t v37 = *(void *)(v0 + 280);
  uint64_t v36 = *(void *)(v0 + 288);
  uint64_t v38 = *(void *)(v0 + 224);
  uint64_t v39 = *(int *)(*(void *)(v0 + 216) + 48);
  v48(v37, v36, *(void *)(v0 + 192));
  uint64_t v40 = *(void **)(v36 + v47);
  *(void *)(v37 + v39) = v40;
  unint64_t v41 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  uint64_t v42 = swift_allocObject();
  *(void *)(v0 + 488) = v42;
  outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(v37, v42 + v41, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  uint64_t v53 = (void (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v35 + 152)
                                                      + **(int **)(*(void *)v35 + 152));
  id v43 = v40;
  id v44 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v44;
  void *v44 = v0;
  v44[1] = closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
  uint64_t v45 = *(void *)(v0 + 288);
  v53(v45, &async function pointer to partial apply for closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:), v42);
}

uint64_t closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v2 = type metadata accessor for UUID();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  v1[10] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)();
  uint64_t v7;

  char v3 = *v2;
  uint64_t v4 = *(void **)(*v2 + 144);
  *(void *)(v3 + 168) = a1;
  *(void *)(v3 + 176) = v1;
  swift_task_dealloc();

  if (v1) {
    uint64_t v5 = closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
  }
  else {
    uint64_t v5 = closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)()
{
  os_log_t v48 = v0;
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v41 = v0[13];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v7 = type metadata accessor for Logger();
  v0[16] = __swift_project_value_buffer(v7, (uint64_t)static Log.group);
  uint64_t v8 = *(int *)(v4 + 48);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v44 = v4;
  v45(v3, v1, v5);
  uint64_t v9 = v1;
  unint64_t v10 = *(void **)(v1 + v8);
  uint64_t v43 = v8;
  *(void *)(v3 + v8) = v10;
  outlined init with copy of (UUID, Bool)(v3, v2, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  outlined init with take of NearbyInvitation<NearbyGroup>.PendingMember(v3, v41, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  id v11 = v10;
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = v0[14];
  if (v14)
  {
    uint64_t v37 = v0[13];
    uint64_t v42 = v1;
    uint64_t v16 = v0[12];
    os_log_type_t type = v13;
    uint64_t v17 = v0[9];
    log = v12;
    uint64_t v18 = v0[6];
    uint64_t v19 = v0[7];
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    uint64_t v47 = v38;
    *(_DWORD *)uint64_t v20 = 136315138;
    v45(v16, v15, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v17, v16, v18);
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v23 = v22;
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    uint64_t v24 = v21;
    uint64_t v9 = v42;
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Invitation_HostConnectionInfo?(v37, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    outlined destroy of Invitation_HostConnectionInfo?(v15, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    _os_log_impl(&dword_257351000, log, type, "Creating NearbyGroup: %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v38, -1, -1);
    MEMORY[0x25A2B6460](v20, -1, -1);
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?(v0[13], &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
    outlined destroy of Invitation_HostConnectionInfo?(v15, &demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo));
  }
  uint64_t v25 = v0[11];
  uint64_t v26 = v0[8];
  uint64_t v27 = v0[6];
  uint64_t v28 = *(int *)(v44 + 48);
  v45(v25, v0[5], v27);
  uint64_t v29 = *(char **)(v9 + v43);
  v0[17] = v29;
  *(void *)(v25 + v28) = v29;
  uint64_t v30 = &v29[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id];
  id v31 = v29;
  v45(v26, (uint64_t)v30, v27);
  char v32 = *(void **)&v31[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint];
  v0[18] = v32;
  v0[19] = type metadata accessor for NearbyGroup();
  swift_allocObject();
  unint64_t v46 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized NearbyGroup.init(id:endpoint:)
                                                 + async function pointer to specialized NearbyGroup.init(id:endpoint:));
  id v33 = v32;
  id v34 = (void *)swift_task_alloc();
  v0[20] = v34;
  void *v34 = v0;
  v34[1] = closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:);
  uint64_t v35 = v0[8];
  return v46(v35, (uint64_t)v33);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v15 = v0;
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    BOOL v14 = v8;
    *(void *)(v0 + 16) = v6;
    swift_retain();
    uint64_t v9 = String.init<A>(reflecting:)();
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_257351000, v4, v5, "Created NearbyGroup: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v8, -1, -1);
    MEMORY[0x25A2B6460](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v11 = *(uint64_t (**)(uint64_t))(v0 + 8);
  unint64_t v12 = *(void *)(v0 + 168);
  return v11(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t closure #2 in closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v36 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  os_log_type_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for group != -1) {
    swift_once();
  }
  uint64_t v20 = __swift_project_value_buffer(v16, (uint64_t)static Log.group);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v20, v16);
  outlined init with copy of (UUID, Bool)(a2, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v21 = Logger.logObject.getter();
  int v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, (os_log_type_t)v22))
  {
    int v34 = v22;
    uint64_t v35 = a3;
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v39 = v33;
    *(_DWORD *)unint64_t v23 = 136315138;
    outlined init with copy of (UUID, Bool)((uint64_t)v15, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v24 = v37;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v13, 1, v5) == 1)
    {
      unint64_t v25 = 0xE300000000000000;
      uint64_t v26 = 7104878;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v9, v13, v5);
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v36, v9, v5);
      uint64_t v27 = String.init<A>(reflecting:)();
      uint64_t v28 = v24;
      uint64_t v26 = v27;
      unint64_t v25 = v29;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v5);
    }
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    _os_log_impl(&dword_257351000, v21, (os_log_type_t)v34, "Group listener for id: %s cancelled.", v23, 0xCu);
    uint64_t v30 = v33;
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v30, -1, -1);
    MEMORY[0x25A2B6460](v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    a3 = v35;
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);

    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  return MEMORY[0x25A2B5850](a3, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
}

uint64_t InvitationRequest<>.Context.userInfo.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data?(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t InvitationRequest<>.Context.userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data?(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*InvitationRequest<>.Context.userInfo.modify())()
{
  return closure #1 in default argument 1 of XPCClient.withHost(body:errorHandler:);
}

double InvitationRequest<>.Context.init()@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_2573BF070;
  return result;
}

uint64_t InvitationRequest<>.Context.init(userInfo:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NearbyGroup.Member>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      os_log_type_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      os_log_type_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1)
{
  return closure #1 in static NearbyGroup.groups(service:identifier:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t type metadata accessor for NearbyGroup()
{
  uint64_t result = type metadata singleton initialization cache for NearbyGroup;
  if (!type metadata singleton initialization cache for NearbyGroup) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    os_log_type_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    int64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupTable.WeakNearbyGroup>);
  int v44 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v37 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v39 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v38 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v41 = v8;
    uint64_t v42 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v38) {
          goto LABEL_34;
        }
        unint64_t v22 = v39[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v22 = v39[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v44)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v22 = v39[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      uint64_t v27 = v42;
      uint64_t v28 = v43;
      if (v44)
      {
        (*v45)(v42, v26, v43);
        outlined init with take of NearbyGroupTable.WeakNearbyGroup();
      }
      else
      {
        (*v40)(v42, v26, v43);
        outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
      }
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v45)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = outlined init with take of NearbyGroupTable.WeakNearbyGroup();
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v41;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupConnectionInfo>);
  unint64_t v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  uint64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  int64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  unint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    uint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        uint64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v27;
      }
    }
LABEL_21:
    uint64_t v16 = (v26 - 1) & v26;
    int64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    uint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      unint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      unint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    char v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      int64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      int64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  void *v39;
  void (**v40)(char *, unint64_t, uint64_t);
  uint64_t i;
  int v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t v44;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Bool>);
  uint64_t v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    uint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      unint64_t v14 = ~(-1 << v12);
    }
    else {
      unint64_t v14 = -1;
    }
    uint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    unint64_t v18 = 0;
    int v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        int64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        unint64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        int64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          unint64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          int64_t v23 = v39[v18];
          if (!v23)
          {
            uint64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            int64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                unint64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                int64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v18 = v24;
          }
        }
LABEL_21:
        uint64_t v15 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      uint64_t v28 = *(unsigned char *)(*(void *)(v9 + 56) + v21);
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(unsigned char *)(*(void *)(v11 + 56) + v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupTable.WeakNearbyGroup>);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  unint64_t v22 = v1;
  uint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v23 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v25 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v18 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    outlined init with copy of NearbyGroupTable.WeakNearbyGroup();
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    uint64_t result = (void *)outlined init with take of NearbyGroupTable.WeakNearbyGroup();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v24)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_25;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Bool>);
  unint64_t v22 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *unint64_t v22 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  uint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v23 = v5 + 64;
  unint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  int64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  uint64_t v13 = v12 & *(void *)(v5 + 64);
  unint64_t v26 = v2 + 16;
  int64_t v24 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v25 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v10;
    if (!v19)
    {
      unint64_t v10 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_22:
    uint64_t v13 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    unint64_t v17 = *(unsigned char *)(*(void *)(v5 + 56) + v15);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(unsigned char *)(*(void *)(v7 + 56) + v15) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v24) {
    goto LABEL_23;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    unint64_t v10 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, NearbyGroupConnectionInfo>);
  uint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    *uint64_t v23 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    int64_t v18 = *(void **)(*(void *)(v5 + 56) + v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (id result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized static NearbyGroup.Member.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
    if (v3)
    {
      if (v4)
      {
        BOOL v9 = v2 == v5 && v3 == v4;
        if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          return 1;
        }
      }
    }
    else if (!v4)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AddressableMember();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  unint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, MEMORY[0x263F08F70]);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    unint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type NearbyGroup.Member and conformance NearbyGroup.Member();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v10 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 56);
    do
    {
      uint64_t v5 = *(v4 - 3);
      unint64_t v6 = *(v4 - 2);
      uint64_t v7 = *(v4 - 1);
      unint64_t v8 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v9, v5, v6, v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 4;
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NearbyGroupMember();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for NearbyGroupMember);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        unint64_t v6 = (void *)MEMORY[0x25A2B5B10](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        unint64_t v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized NearbyGroup.init(id:endpoint:)(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  v3[18] = *v2;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v3[19] = v4;
  v3[20] = *(void *)(v4 - 8);
  v3[21] = swift_task_alloc();
  v3[22] = type metadata accessor for OS_dispatch_queue.Attributes();
  v3[23] = swift_task_alloc();
  type metadata accessor for DispatchQoS();
  v3[24] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<NearbyGroup.State>);
  v3[25] = v5;
  v3[26] = *(void *)(v5 - 8);
  v3[27] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
  v3[28] = v6;
  v3[29] = *(void *)(v6 - 8);
  v3[30] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized NearbyGroup.init(id:endpoint:), 0, 0);
}

uint64_t specialized NearbyGroup.init(id:endpoint:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v5 = v0[27];
  uint64_t v4 = v0[28];
  uint64_t v6 = v0[26];
  uint64_t v34 = v0[20];
  uint64_t v35 = v0[21];
  uint64_t v36 = v0[19];
  uint64_t v7 = v0[17];
  char v32 = (void *)v0[16];
  uint64_t v30 = v0[25];
  uint64_t v31 = v0[15];
  uint64_t v8 = v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup__members;
  v0[11] = MEMORY[0x263F8EE88];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NearbyGroup.Member>);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v8, v3, v4);
  uint64_t v9 = v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup__state;
  v1[13] = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v5, v30);
  uint64_t v10 = (void *)(v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_localMemberHandle);
  void *v10 = 0;
  v10[1] = 0;
  uint64_t v11 = v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_id;
  uint64_t v12 = type metadata accessor for UUID();
  v1[31] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v1[32] = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v31, v12);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v8, v4);
  v1[14] = MEMORY[0x263F8EE88];
  Published.init(initialValue:)();
  swift_endAccess();
  *(void *)(v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_endpoint) = v32;
  id v33 = v32;
  _typeName(_:qualified:)();
  type metadata accessor for OS_dispatch_queue();
  v14._countAndFlagsBits = 45;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v1[12] = MEMORY[0x263F8EE78];
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v35, *MEMORY[0x263F8F130], v36);
  *(void *)(v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for NearbyGroupClientConnection();
  id v16 = v33;
  uint64_t v17 = XPCClient.__allocating_init(listenerEndpoint:)();
  *(void *)(v7 + OBJC_IVAR____TtC14NearbySessions11NearbyGroup_connection) = v17;
  uint64_t v18 = OBJC_IVAR____TtC14NearbySessions11NearbyGroup_connection;
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  unint64_t v20 = (uint64_t *)(v17 + direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  uint64_t v21 = *v20;
  uint64_t *v20 = (uint64_t)partial apply for closure #1 in NearbyGroup.init(id:endpoint:);
  v20[1] = v19;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v21);
  uint64_t v22 = *(void *)(v7 + v18);
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = (uint64_t *)(v22 + direct field offset for NearbyGroupClientConnection.setMembersCallback);
  swift_beginAccess();
  uint64_t v25 = *v24;
  *uint64_t v24 = (uint64_t)partial apply for closure #2 in NearbyGroup.init(id:endpoint:);
  v24[1] = v23;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v25);
  uint64_t v26 = (void *)swift_task_alloc();
  v1[33] = v26;
  *uint64_t v26 = v1;
  v26[1] = specialized NearbyGroup.init(id:endpoint:);
  uint64_t v27 = v1[17];
  uint64_t v28 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA2360](v26, 0, 0, 0xD000000000000012, 0x80000002573C31A0, partial apply for closure #3 in NearbyGroup.init(id:endpoint:), v27, v28);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    uint64_t v2 = specialized NearbyGroup.init(id:endpoint:);
  }
  else
  {
    uint64_t v2 = specialized NearbyGroup.init(id:endpoint:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(void, void))(v0[32] + 8))(v0[15], v0[31]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[17];
  return v1(v2);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[32] + 8))(v0[15], v0[31]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t specialized NearbyGroup.__allocating_init(id:members:controller:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized NearbyGroup.__allocating_init(id:members:controller:), 0, 0);
}

uint64_t specialized NearbyGroup.__allocating_init(id:members:controller:)()
{
  Class super_class = v0[6].super_class;
  id receiver = v0[5].receiver;
  Class v3 = v0[5].super_class;
  id v5 = v0[4].receiver;
  Class v4 = v0[4].super_class;
  Class v6 = v0[3].super_class;
  uint64_t v7 = (void (*)(void, void, void))*((void *)v3 + 2);
  v0[7].id receiver = v7;
  v0[7].Class super_class = (Class)(((unint64_t)v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
  v7(super_class, v6, receiver);
  uint64_t v8 = (objc_class *)type metadata accessor for NearbyGroupCreationRequest(0);
  uint64_t v9 = (char *)objc_allocWithZone(v8);
  v7(&v9[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_id], super_class, receiver);
  *(void *)&v9[OBJC_IVAR____TtC14NearbySessions26NearbyGroupCreationRequest_members] = v5;
  v0[1].id receiver = v9;
  v0[1].Class super_class = v8;
  id v10 = objc_msgSendSuper2(v0 + 1, sel_init);
  v0[8].id receiver = v10;
  uint64_t v11 = (objc_class *)*((void *)v3 + 1);
  v0[8].Class super_class = v11;
  v0[9].id receiver = (id)(((unint64_t)v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
  ((void (*)(Class, id))v11)(super_class, receiver);
  uint64_t v12 = swift_task_alloc();
  v0[9].Class super_class = (Class)v12;
  *(void *)(v12 + 16) = v4;
  *(void *)(v12 + 24) = v10;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[10].id receiver = v13;
  uint64_t v14 = type metadata accessor for NearbyGroupConnectionInfo(0);
  *uint64_t v13 = v0;
  v13[1] = specialized NearbyGroup.__allocating_init(id:members:controller:);
  return MEMORY[0x270FA2360](&v0[2], 0, 0, 0xD000000000000012, 0x80000002573C2D30, partial apply for closure #1 in NearbyInvitationsController.createGroup(with:), v12, v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = specialized NearbyGroup.__allocating_init(id:members:controller:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = specialized NearbyGroup.__allocating_init(id:members:controller:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, char *, uint64_t);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v12)(uint64_t, id);
  uint64_t v13;

  unint64_t v1 = *(void (**)(uint64_t, char *, uint64_t))(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 96);
  Class v3 = *(void *)(v0 + 80);

  Class v4 = *(char **)(v0 + 32);
  *(void *)(v0 + 176) = v4;
  id v5 = &v4[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_id];
  Class v6 = v4;
  v1(v2, v5, v3);
  uint64_t v7 = *(void **)&v6[OBJC_IVAR____TtC14NearbySessions25NearbyGroupConnectionInfo_endpoint];
  *(void *)(v0 + 184) = v7;
  *(void *)(v0 + 192) = type metadata accessor for NearbyGroup();
  swift_allocObject();
  uint64_t v12 = (uint64_t (*)(uint64_t, id))((char *)&async function pointer to specialized NearbyGroup.init(id:endpoint:)
                                            + async function pointer to specialized NearbyGroup.init(id:endpoint:));
  uint64_t v8 = v7;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v9;
  *uint64_t v9 = v0;
  v9[1] = specialized NearbyGroup.__allocating_init(id:members:controller:);
  id v10 = *(void *)(v0 + 96);
  return v12(v10, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, void *, uint64_t);
  uint64_t v8;

  unint64_t v1 = *(void *)(v0 + 72);

  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_groupTable);
  *(void *)(v0 + 224) = v2;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *, uint64_t))(*(void *)(*(void *)v2 + 152)
                                                        + **(int **)(*(void *)v2 + 152));
  swift_retain_n();
  swift_retain();
  Class v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v3;
  *Class v3 = v0;
  v3[1] = specialized NearbyGroup.__allocating_init(id:members:controller:);
  Class v4 = *(void *)(v0 + 208);
  id v5 = *(void *)(v0 + 56);
  return v7(v5, &async function pointer to partial apply for closure #1 in NearbyGroup.init(id:members:controller:), v4);
}

{
  void *v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  unint64_t v1 = (void *)v0[22];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[17];
  Class v3 = v0[10];
  Class v4 = v0[7];

  swift_release();
  v2(v4, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  id v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  unint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 80);
  Class v3 = *(void *)(v0 + 56);

  swift_task_dealloc();
  swift_release();
  v1(v3, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  Class v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  void *v18;
  unsigned char *v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = v0;
  unint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 208);
  swift_release();
  if (v1 == v2)
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
    uint64_t v13 = *(void *)(v0 + 80);
    uint64_t v14 = *(void *)(v0 + 56);

    swift_release();
    swift_release();
    v12(v14, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v15 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v16 = *(void *)(v0 + 208);
    return v15(v16);
  }
  else
  {
    if (one-time initialization token for group != -1) {
      swift_once();
    }
    Class v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.group);
    swift_retain_n();
    Class v4 = Logger.logObject.getter();
    id v5 = static os_log_type_t.default.getter();
    Class v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void *)(v0 + 240);
    if (v6)
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v21 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      *(void *)(v0 + 40) = v7;
      swift_retain();
      id v10 = String.init<A>(reflecting:)();
      *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_257351000, v4, v5, "Group already exists: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v9, -1, -1);
      MEMORY[0x25A2B6460](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v18 = *(void **)(v0 + 176);
    lazy protocol witness table accessor for type NearbyGroup.Errors and conformance NearbyGroup.Errors();
    swift_allocError();
    *uint64_t v19 = 2;
    swift_willThrow();
    swift_release();
    swift_release();

    (*(void (**)(void, void))(v0 + 136))(*(void *)(v0 + 56), *(void *)(v0 + 80));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  unint64_t v1 = *(void **)(v0 + 176);
  swift_release();

  (*(void (**)(void, void))(v0 + 136))(*(void *)(v0 + 56), *(void *)(v0 + 80));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t specialized NearbyGroup.__allocating_init(id:members:controller:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 208) = a1;
  *(void *)(v4 + 216) = v1;
  swift_task_dealloc();

  if (v1) {
    id v5 = specialized NearbyGroup.__allocating_init(id:members:controller:);
  }
  else {
    id v5 = specialized NearbyGroup.__allocating_init(id:members:controller:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 240) = a1;
  *(void *)(v3 + 248) = v1;
  swift_task_dealloc();
  swift_release();
  swift_release();
  if (v1)
  {
    swift_release();
    uint64_t v4 = specialized NearbyGroup.__allocating_init(id:members:controller:);
  }
  else
  {
    uint64_t v4 = specialized NearbyGroup.__allocating_init(id:members:controller:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t sub_2573A1C98()
{
  return objectdestroyTm_2(MEMORY[0x263F8EED8], MEMORY[0x263F8EEB0]);
}

uint64_t partial apply for closure #1 in NearbyGroup.invalidate(reason:)()
{
  return closure #1 in NearbyGroup.invalidate(reason:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type NearbyGroup.Errors and conformance NearbyGroup.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroup.Errors and conformance NearbyGroup.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroup.Errors and conformance NearbyGroup.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup.Errors and conformance NearbyGroup.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyGroup.Errors and conformance NearbyGroup.Errors;
  if (!lazy protocol witness table cache variable for type NearbyGroup.Errors and conformance NearbyGroup.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroup.Errors and conformance NearbyGroup.Errors);
  }
  return result;
}

uint64_t outlined consume of NearbyGroup.Member?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in NearbyGroup.addMember(_:)(uint64_t a1)
{
  return closure #1 in NearbyGroup.addMember(_:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in NearbyGroup.kickMember(member:)(uint64_t a1)
{
  return closure #1 in NearbyGroup.kickMember(member:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in NearbyGroup.leave()(uint64_t a1)
{
  return closure #1 in NearbyGroup.leave()(a1, v1);
}

uint64_t sub_2573A1E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for NearbyGroup.$members : NearbyGroup(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC14NearbySessions11NearbyGroup__members, &demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
}

uint64_t sub_2573A1E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyGroup.$members : NearbyGroup(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>.Publisher, (uint64_t)&OBJC_IVAR____TtC14NearbySessions11NearbyGroup__members, &demangling cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
}

uint64_t sub_2573A1E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for NearbyGroup.$members : NearbyGroup(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC14NearbySessions11NearbyGroup__state, &demangling cache variable for type metadata for Published<NearbyGroup.State>);
}

uint64_t sub_2573A1EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for NearbyGroup.$members : NearbyGroup(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<NearbyGroup.State>.Publisher, (uint64_t)&OBJC_IVAR____TtC14NearbySessions11NearbyGroup__state, &demangling cache variable for type metadata for Published<NearbyGroup.State>);
}

uint64_t ObjC metadata update function for NearbyGroup()
{
  return type metadata accessor for NearbyGroup();
}

void type metadata completion function for NearbyGroup()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Set<NearbyGroup.Member>>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<NearbyGroup.State>();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for NearbyGroup(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyGroup);
}

uint64_t dispatch thunk of NearbyGroup.__allocating_init(id:endpoint:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2 + 136) + **(int **)(v2 + 136));
  Class v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *Class v6 = v3;
  v6[1] = dispatch thunk of NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v8(a1, a2);
}

void type metadata accessor for Published<Set<NearbyGroup.Member>>()
{
  if (!lazy cache variable for type metadata for Published<Set<NearbyGroup.Member>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<NearbyGroup.Member>);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Set<NearbyGroup.Member>>);
    }
  }
}

void type metadata accessor for Published<NearbyGroup.State>()
{
  if (!lazy cache variable for type metadata for Published<NearbyGroup.State>)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<NearbyGroup.State>);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for NearbyGroup.State(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for NearbyGroup.State(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for NearbyGroup.State(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF) {
      id v7 = v4;
    }
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    id v5 = v4;
    Class v6 = *a1;
    *a1 = v4;
  }
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **assignWithTake for NearbyGroup.State(void **a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyGroup.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NearbyGroup.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for NearbyGroup.State(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for NearbyGroup.State(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroup.State()
{
  return &type metadata for NearbyGroup.State;
}

unsigned char *storeEnumTagSinglePayload for NearbyGroup.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2573A24ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroup.Errors()
{
  return &type metadata for NearbyGroup.Errors;
}

uint64_t destroy for NearbyGroup.Member()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for NearbyGroup.Member(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NearbyGroup.Member(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for NearbyGroup.Member(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyGroup.Member(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyGroup.Member(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyGroup.Member()
{
  return &type metadata for NearbyGroup.Member;
}

uint64_t type metadata instantiation function for InvitationRequest<>.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 8);
}

uint64_t *destroy for InvitationRequest<>.Context(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 >> 60 != 15) {
    return (uint64_t *)outlined consume of Data._Representation(*result, v1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for InvitationRequest<>.Context(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v4 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for InvitationRequest<>.Context(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *(void *)a2;
      outlined copy of Data._Representation(*(void *)a2, *(void *)(a2 + 8));
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      outlined consume of Data._Representation(v7, v8);
      return a1;
    }
    outlined destroy of Data((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  uint64_t v5 = *(void *)a2;
  outlined copy of Data._Representation(*(void *)a2, *(void *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for InvitationRequest<>.Context(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v6, v4);
      return a1;
    }
    outlined destroy of Data((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for InvitationRequest<>.Context(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InvitationRequest<>.Context(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)__n128 result = a2 - 12;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t type metadata accessor for InvitationRequest<>.Context()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in closure #1 in NearbyGroup.leave()()
{
  return partial apply for closure #1 in closure #1 in NearbyGroup.leave()(closure #1 in closure #1 in NearbyGroup.leave());
}

uint64_t sub_2573A2978()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void partial apply for closure #1 in closure #1 in closure #1 in NearbyGroup.leave()(void **a1)
{
  closure #1 in closure #1 in closure #1 in NearbyGroup.leave()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in NearbyGroup.leave()(void *a1)
{
  return partial apply for closure #2 in closure #1 in closure #1 in NearbyGroup.leave()(a1, "%s Had errorHandler called when trying to leave %s");
}

uint64_t sub_2573A29DC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.leave()(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.leave()(a1);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyGroup.kickMember(member:)()
{
  return partial apply for closure #1 in closure #1 in NearbyGroup.kickMember(member:)((uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in closure #1 in NearbyGroup.kickMember(member:));
}

uint64_t sub_2573A2B40()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(id *a1)
{
  closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t)&unk_2706551E8, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.kickMember(member:), (uint64_t)&block_descriptor_87, (SEL *)&selRef_kickMemberWithNearbyGroupMember_completion_);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void **)(v1 + 24);
  return closure #2 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(a1, v3, v4);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(void *a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(a1, "%s was told an error remotely when trying to kick member: %s, error: %s");
}

uint64_t objectdestroy_70Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyGroup.addMember(_:)()
{
  return partial apply for closure #1 in closure #1 in NearbyGroup.kickMember(member:)(closure #1 in closure #1 in NearbyGroup.addMember(_:));
}

uint64_t partial apply for closure #1 in closure #1 in NearbyGroup.kickMember(member:)(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  return a1(v3, v4, v5);
}

uint64_t sub_2573A2D98()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(id *a1)
{
  closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t)&unk_2706552D8, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:), (uint64_t)&block_descriptor_106_0, (SEL *)&selRef_addMemberWithNearbyGroupMember_completion_);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(void *a1)
{
  return partial apply for closure #2 in closure #1 in closure #1 in NearbyGroup.leave()(a1, "%s Had errorHandler called when trying to join %s");
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in NearbyGroup.leave()(void *a1, const char *a2)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  return closure #2 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(a1, *(void *)(v2 + 16), v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
}

uint64_t objectdestroy_83Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(void *a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(a1, "%s was told an error remotely when trying to add member: %s error: %s");
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.kickMember(member:)(void *a1, char *a2)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #1 in closure #1 in closure #1 in NearbyGroup.addMember(_:)(a1, v2 + v6, *(void *)(v2 + v7), *(void **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), a2);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t sub_2573A3040()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in NearbyGroup.init(id:endpoint:)()
{
  return closure #1 in NearbyGroup.init(id:endpoint:)();
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #2 in NearbyGroup.init(id:endpoint:)(uint64_t a1)
{
  return closure #2 in NearbyGroup.init(id:endpoint:)(a1);
}

uint64_t partial apply for closure #3 in NearbyGroup.init(id:endpoint:)(uint64_t a1)
{
  return closure #3 in NearbyGroup.init(id:endpoint:)(a1, v1);
}

uint64_t partial apply for closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)()
{
  return partial apply for closure #1 in closure #1 in NearbyGroup.leave()(closure #1 in closure #3 in NearbyGroup.init(id:endpoint:));
}

uint64_t partial apply for closure #1 in closure #1 in NearbyGroup.leave()(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  return a1(v3, v4);
}

uint64_t sub_2573A3138()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(void **a1)
{
  closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #2 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #2 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(a1);
}

uint64_t objectdestroy_52Tm_0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = v4 + ((*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return closure #1 in closure #1 in closure #1 in closure #3 in NearbyGroup.init(id:endpoint:)(a1, a2, a3, a4, v10, v11);
}

uint64_t outlined consume of Set<NearbyGroupMember>.Iterator._Variant()
{
  return swift_release();
}

uint64_t sub_2573A335C()
{
  return objectdestroyTm_2(MEMORY[0x263F8EEA0], MEMORY[0x263F8EED8]);
}

uint64_t objectdestroyTm_2(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 24));
  return MEMORY[0x270FA0238](v2, 32, 7);
}

uint64_t partial apply for closure #1 in closure #2 in NearbyGroup.init(id:endpoint:)()
{
  return closure #1 in closure #2 in NearbyGroup.init(id:endpoint:)(*(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in NearbyGroup.init(id:members:controller:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = dispatch thunk of NearbyGroupTable.firstGroup();
  uint64_t v2 = swift_retain();
  return dispatch thunk of NearbyGroupTable.firstGroup()(v2);
}

uint64_t closure #1 in NearbyGroup.init(id:members:controller:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_2573A3498()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v13 = *(void *)(v1 + 64);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v3, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v3, v8);
  }
  uint64_t v10 = (v3 + v13 + v6) & ~v6;
  uint64_t v11 = v10 + v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v10, v4);
  return MEMORY[0x270FA0238](v0, v11, v2 | v6 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<NearbyGroup>.Continuation)
                                      - 8)
                          + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + (v9 & ~v8);
  Swift::String v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *Swift::String v15 = v3;
  v15[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  return closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)(a1, v10, v11, v12, v13, v14);
}

uint64_t sub_2573A37D0()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_release();
  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t partial apply for closure #2 in closure #1 in static NearbyGroup.groups(service:identifier:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #2 in closure #1 in static NearbyGroup.groups(service:identifier:)(a1, v1 + v4, v5);
}

uint64_t sub_2573A39AC()
{
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo))
             - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: NearbyGroupConnectionInfo))
                 - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = dispatch thunk of NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return closure #2 in closure #1 in closure #1 in static NearbyGroup.groups(service:identifier:)(v3);
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t key path getter for NearbyGroupClientConnection.serverDisconnectedCallback : NearbyGroupClientConnection@<X0>(void *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t key path setter for NearbyGroupClientConnection.serverDisconnectedCallback : NearbyGroupClientConnection(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t NearbyGroupClientConnection.serverDisconnectedCallback.getter()
{
  return NearbyGroupClientConnection.serverDisconnectedCallback.getter(&direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback, (void (*)(void, void))outlined copy of (@escaping @callee_guaranteed () -> ())?);
}

uint64_t outlined copy of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t NearbyGroupClientConnection.serverDisconnectedCallback.setter(uint64_t a1, uint64_t a2)
{
  return NearbyGroupClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed () -> ())?);
}

uint64_t (*NearbyGroupClientConnection.serverDisconnectedCallback.modify())()
{
  return static NearbyGroupInterface.identity.modify;
}

uint64_t key path getter for NearbyGroupClientConnection.setMembersCallback : NearbyGroupClientConnection@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + direct field offset for NearbyGroupClientConnection.setMembersCallback);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<NearbyGroupMember>) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t key path setter for NearbyGroupClientConnection.setMembersCallback : NearbyGroupClientConnection(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<NearbyGroupMember>) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + direct field offset for NearbyGroupClientConnection.setMembersCallback);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t NearbyGroupClientConnection.setMembersCallback.getter()
{
  return NearbyGroupClientConnection.serverDisconnectedCallback.getter(&direct field offset for NearbyGroupClientConnection.setMembersCallback, (void (*)(void, void))outlined copy of (@escaping @callee_guaranteed (@guaranteed Set<NearbyGroupMember>) -> ())?);
}

uint64_t NearbyGroupClientConnection.serverDisconnectedCallback.getter(void *a1, void (*a2)(void, void))
{
  uint64_t v4 = (void *)(v2 + *a1);
  swift_beginAccess();
  uint64_t v5 = *v4;
  a2(*v4, v4[1]);
  return v5;
}

uint64_t NearbyGroupClientConnection.setMembersCallback.setter(uint64_t a1, uint64_t a2)
{
  return NearbyGroupClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for NearbyGroupClientConnection.setMembersCallback, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<NearbyGroupMember>) -> ())?);
}

uint64_t NearbyGroupClientConnection.serverDisconnectedCallback.setter(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = (uint64_t *)(v4 + *a3);
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t *v8 = a1;
  v8[1] = a2;
  return a4(v9, v10);
}

uint64_t (*NearbyGroupClientConnection.setMembersCallback.modify())()
{
  return static NearbyGroupInterface.hostObjectInterface.modify;
}

Swift::Void __swiftcall NearbyGroupClientConnection.handleServerDisconnect()()
{
  uint64_t v1 = (void (**)(uint64_t))(v0
                                     + direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = swift_retain();
    v2(v3);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v2);
  }
}

uint64_t NearbyGroupClientConnection.setMembers(_:)(uint64_t a1)
{
  uint64_t v3 = (void (**)(uint64_t))(v1 + direct field offset for NearbyGroupClientConnection.setMembersCallback);
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *v3;
  if (*v3)
  {
    swift_retain();
    v5(a1);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v5);
  }
  return result;
}

uint64_t @objc NearbyGroupClientConnection.setMembers(_:)(char *a1)
{
  type metadata accessor for NearbyGroupMember();
  lazy protocol witness table accessor for type NearbyGroupMember and conformance NSObject();
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = &a1[direct field offset for NearbyGroupClientConnection.setMembersCallback];
  swift_beginAccess();
  uint64_t v4 = *(void (**)(uint64_t))v3;
  if (*(void *)v3)
  {
    uint64_t v5 = a1;
    outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
    v4(v2);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
  }
  return swift_bridgeObjectRelease();
}

id NearbyGroupClientConnection.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id NearbyGroupClientConnection.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = &v0[direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v3 = &v0[direct field offset for NearbyGroupClientConnection.setMembersCallback];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  v5.id receiver = v0;
  v5.Class super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id @objc NearbyGroupClientConnection.init()(char *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = &a1[direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v4 = &a1[direct field offset for NearbyGroupClientConnection.setMembersCallback];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  v6.id receiver = a1;
  v6.Class super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t NearbyGroupClientConnection.__ivar_destroyer()
{
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0
                                                                         + direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback));
  uint64_t v1 = *(void *)(v0 + direct field offset for NearbyGroupClientConnection.setMembersCallback);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v1);
}

id NearbyGroupClientConnection.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for NearbyGroupClientConnection()
{
  uint64_t result = type metadata singleton initialization cache for NearbyGroupClientConnection;
  if (!type metadata singleton initialization cache for NearbyGroupClientConnection) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for NearbyGroupClientConnection()
{
  return swift_initClassMetadata2();
}

uint64_t @objc NearbyGroupClientConnection.__ivar_destroyer(uint64_t a1)
{
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(a1
                                                                         + direct field offset for NearbyGroupClientConnection.serverDisconnectedCallback));
  uint64_t v2 = *(void *)(a1 + direct field offset for NearbyGroupClientConnection.setMembersCallback);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v2);
}

uint64_t ObjC metadata update function for NearbyGroupClientConnection()
{
  return type metadata accessor for NearbyGroupClientConnection();
}

unint64_t lazy protocol witness table accessor for type NearbyGroupMember and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject)
  {
    type metadata accessor for NearbyGroupMember();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyGroupMember and conformance NSObject);
  }
  return result;
}

uint64_t sub_2573A457C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<NearbyGroupMember>) -> (@out ())(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<NearbyGroupMember>) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

id NearbyAdvertisementRequest.__allocating_init(identifier:invitation:route:activityType:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v11 = objc_allocWithZone(v5);
  uint64_t v12 = &v11[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier];
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a1, v13);
  Swift::String v15 = &v11[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
  *Swift::String v15 = a2;
  v15[1] = a3;
  v11[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = a4;
  *(_DWORD *)&v11[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = a5;
  v18.id receiver = v11;
  v18.Class super_class = v5;
  id v16 = objc_msgSendSuper2(&v18, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return v16;
}

uint64_t NearbyAdvertisementRequest.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier;
  uint64_t v4 = type metadata accessor for UUID();
  objc_super v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t NearbyAdvertisementRequest.invitation.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation);
  outlined copy of Data._Representation(v1, *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation + 8));
  return v1;
}

uint64_t NearbyAdvertisementRequest.route.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route);
}

uint64_t NearbyAdvertisementRequest.activityType.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType);
}

id NearbyAdvertisementRequest.init(identifier:invitation:route:activityType:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v11 = &v5[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v11, a1, v12);
  uint64_t v14 = &v5[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
  *uint64_t v14 = a2;
  v14[1] = a3;
  v5[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = a4;
  *(_DWORD *)&v5[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = a5;
  v17.id receiver = v5;
  v17.Class super_class = (Class)type metadata accessor for NearbyAdvertisementRequest();
  id v15 = objc_msgSendSuper2(&v17, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  return v15;
}

uint64_t type metadata accessor for NearbyAdvertisementRequest()
{
  uint64_t result = type metadata singleton initialization cache for NearbyAdvertisementRequest;
  if (!type metadata singleton initialization cache for NearbyAdvertisementRequest) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t static NearbyAdvertisementRequest.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyAdvertisementRequest.encode(with:)(NSCoder with)
{
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v3 = (void *)MEMORY[0x25A2B5660](0x696669746E656469, 0xEA00000000007265);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v3];

  Class v4 = Data._bridgeToObjectiveC()().super.isa;
  objc_super v5 = (void *)MEMORY[0x25A2B5660](0x6974617469766E69, 0xEA00000000006E6FLL);
  [(objc_class *)with.super.isa encodeObject:v4 forKey:v5];

  Class v6 = UInt8._bridgeToObjectiveC()().super.super.isa;
  uint64_t v7 = (void *)MEMORY[0x25A2B5660](0x6574756F72, 0xE500000000000000);
  [(objc_class *)with.super.isa encodeObject:v6 forKey:v7];

  Class v8 = UInt32._bridgeToObjectiveC()().super.super.isa;
  id v9 = (id)MEMORY[0x25A2B5660](0x7974697669746361, 0xEC00000065707954);
  [(objc_class *)with.super.isa encodeObject:v8 forKey:v9];
}

uint64_t NearbyAdvertisementRequest.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbyAdvertisementRequest.init(coder:)(a1);
}

uint64_t NearbyAdvertisementRequest.init(coder:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  Class v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  Class v8 = (char *)&v32 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  uint64_t v13 = v1;
  id v35 = a1;
  uint64_t v14 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_6;
  }
  id v15 = (void *)v14;
  uint64_t v34 = v12;
  id v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v16(v6, 1, 1, v9);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

  objc_super v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v17(v6, 1, v9) == 1)
  {
    v16(v8, 1, 1, v9);
LABEL_6:

    outlined destroy of UUID?((uint64_t)v8);
LABEL_7:
    type metadata accessor for NearbyAdvertisementRequest();
    swift_deallocPartialClassInstance();
    return 0;
  }
  objc_super v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v18(v8, v6, v9);
  v16(v8, 0, 1, v9);
  if (v17(v8, 1, v9) == 1) {
    goto LABEL_6;
  }
  uint64_t v21 = v34;
  v18(v34, v8, v9);
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSData);
  id v22 = v35;
  uint64_t v23 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v23
    || (uint64_t v24 = (void *)v23,
        long long v37 = xmmword_2573BF070,
        static Data._conditionallyBridgeFromObjectiveC(_:result:)(),
        v24,
        unint64_t v25 = *((void *)&v37 + 1),
        *((void *)&v37 + 1) >> 60 == 15))
  {

LABEL_12:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
    goto LABEL_7;
  }
  char v32 = v18;
  uint64_t v33 = v37;
  uint64_t v26 = (void *)MEMORY[0x25A2B5660](0x6574756F72, 0xE500000000000000);
  unint64_t v27 = (unint64_t)objc_msgSend(v22, sel_decodeIntegerForKey_, v26);

  if ((v27 & 0x8000000000000000) == 0 && v27 < 0x100)
  {
    uint64_t v28 = (void *)MEMORY[0x25A2B5660](0x7974697669746361, 0xEC00000065707954);
    unint64_t v29 = (unint64_t)objc_msgSend(v35, sel_decodeIntegerForKey_, v28);

    if ((v29 & 0x8000000000000000) == 0 && !HIDWORD(v29))
    {
      if (v29 < 2)
      {
        v32(&v13[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_identifier], v21, v9);
        uint64_t v30 = &v13[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation];
        *(void *)uint64_t v30 = v33;
        *((void *)v30 + 1) = v25;
        v13[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_route] = v27;
        *(_DWORD *)&v13[OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType] = v29;

        uint64_t v31 = (objc_class *)type metadata accessor for NearbyAdvertisementRequest();
        v36.id receiver = v13;
        v36.Class super_class = v31;
        id v19 = objc_msgSendSuper2(&v36, sel_init);

        return (uint64_t)v19;
      }
      outlined consume of Data?(v33, v25);

      goto LABEL_12;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t NearbyAdvertisementRequest.description.getter()
{
  swift_getObjectType();
  _StringGuts.grow(_:)(69);
  v1._countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 8250;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000002573C3350;
  v5._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v5);
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation);
  unint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_invitation + 8);
  outlined copy of Data._Representation(v6, v7);
  v8._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v6, v7);
  v9._countAndFlagsBits = 0x206574756F72202CLL;
  v9._object = (void *)0xEE00203A65707974;
  String.append(_:)(v9);
  type metadata accessor for CBNearbyInfoV2InvitationRouteType();
  _print_unlocked<A, B>(_:_:)();
  v10._countAndFlagsBits = 0xD000000000000015;
  v10._object = (void *)0x80000002573C3370;
  String.append(_:)(v10);
  uint64_t v13 = *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyAdvertisementRequest_activityType);
  _print_unlocked<A, B>(_:_:)();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return HIDWORD(v13);
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id NearbyAdvertisementRequest.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void NearbyAdvertisementRequest.init()()
{
}

id NearbyAdvertisementRequest.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for NearbyAdvertisementRequest();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for NearbyAdvertisementRequest()
{
  return type metadata accessor for NearbyAdvertisementRequest();
}

uint64_t type metadata completion function for NearbyAdvertisementRequest()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for NearbyAdvertisementRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyAdvertisementRequest);
}

uint64_t dispatch thunk of NearbyAdvertisementRequest.__allocating_init(identifier:invitation:route:activityType:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NearbyAdvertisementRequest.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of NearbyAdvertisementRequest.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

unint64_t NearbyInvitationActivityType.init(rawValue:)(unsigned int a1)
{
  uint64_t v1 = a1;
  if (a1 == 1)
  {
    unsigned __int8 v2 = 0;
  }
  else
  {
    uint64_t v1 = 0;
    unsigned __int8 v2 = 1;
  }
  if (!a1)
  {
    uint64_t v1 = 0;
    unsigned __int8 v2 = 0;
  }
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t *NearbyInvitation.__allocating_init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  swift_allocObject();
  id v16 = specialized NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a9 - 8) + 8))(a8, a9);
  swift_release();
  outlined consume of Data?(a5, a6);

  return v16;
}

char *static NearbyInvitationData.create(from:)(uint64_t a1, unint64_t a2)
{
  return specialized static NearbyInvitationData.create(from:)(a1, a2);
}

id NearbyAdvertisement.__allocating_init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, char a14, long long a15, uint64_t a16, uint64_t a17)
{
  id v19 = objc_allocWithZone(v17);
  id v20 = specialized NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14 & 1, a15, *((uint64_t *)&a15 + 1), a16, a17);
  outlined consume of Data?(a11, a12);
  return v20;
}

uint64_t InvitationRequest.__allocating_init(invitationData:displayName:userInfo:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v14 = specialized static NearbyInvitationData.create(from:)(a1, a2);
  if (v7)
  {
    outlined consume of Data?(a5, a6);
    outlined consume of Data._Representation(a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, unint64_t))(v6 + 192))(v14, a3, a4, a5, a6);
    outlined consume of Data._Representation(a1, a2);
  }
  return v6;
}

uint64_t specialized static InvitationSourceProvider.providerIdentifier.getter()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    v3._countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._countAndFlagsBits = 0x724779627261654ELL;
    v4._object = (void *)0xEB0000000070756FLL;
    String.append(_:)(v4);
    return v2;
  }
  else
  {
    _StringGuts.grow(_:)(148);
    v6._object = (void *)0x80000002573C3400;
    v6._countAndFlagsBits = 0xD000000000000091;
    String.append(_:)(v6);
    v7._countAndFlagsBits = 0x724779627261654ELL;
    v7._object = (void *)0xEB0000000070756FLL;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static InvitationSourceProvider.providerIdentifier.getter()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    v3._countAndFlagsBits = 46;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    return v2;
  }
  else
  {
    _StringGuts.grow(_:)(148);
    v6._object = (void *)0x80000002573C3400;
    v6._countAndFlagsBits = 0xD000000000000091;
    String.append(_:)(v6);
    v7._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  return static InvitationSourceProvider.providerIdentifier.getter();
}

Swift::String __swiftcall NearbyInvitationActivityType.description()()
{
  if (v0)
  {
    if (v0 == 1)
    {
      id v1 = (void *)0xEB00000000636973;
      uint64_t v2 = 0x754D20656C707041;
    }
    else
    {
      uint64_t v2 = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
    }
  }
  else
  {
    id v1 = (void *)0xE400000000000000;
    uint64_t v2 = 1701736302;
  }
  result._object = v1;
  result._countAndFlagsBits = v2;
  return result;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance NearbyInvitationActivityType@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 1 && *result != 0;
  *(_DWORD *)a2 = *result == 1;
  *(unsigned char *)(a2 + 4) = v2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NearbyInvitationActivityType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NearbyInvitationActivityType()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::String __swiftcall NearbyInvitationScopeType.description()()
{
  if (v0 >= 3)
  {
    uint64_t v2 = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    uint64_t v1 = 8 * (int)v0;
    uint64_t v2 = *(void *)&aEveryonefriend[v1];
    Swift::String v3 = *(void **)&aProximit[v1 + 8];
  }
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NearbyInvitationScopeType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NearbyInvitationScopeType()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::String __swiftcall NearbyInvitationRouteType.description()()
{
  if (v0 >= 3)
  {
    uint64_t v2 = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    uint64_t v1 = 8 * (int)v0;
    uint64_t v2 = *(void *)((char *)&unk_2573C17F8 + v1);
    Swift::String v3 = *(void **)((char *)&unk_2573C1810 + v1);
  }
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

unint64_t NearbyInvitationScopeType.init(rawValue:)(unsigned int a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = 2;
  if (a1 != 2) {
    uint64_t v2 = 0;
  }
  BOOL v3 = a1 != 2;
  if (a1 == 1) {
    BOOL v3 = 0;
  }
  else {
    uint64_t v1 = v2;
  }
  if (!a1)
  {
    uint64_t v1 = 0;
    BOOL v3 = 0;
  }
  return v1 | ((unint64_t)v3 << 32);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyInvitationRouteType(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NearbyInvitationActivityType()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NearbyInvitationRouteType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitationActivityType()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

int *protocol witness for RawRepresentable.init(rawValue:) in conformance NearbyInvitationRouteType@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *result;
  BOOL v3 = *result > 2;
  if (*result > 2) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NearbyInvitationRouteType(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NearbyInvitationRouteType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NearbyInvitationRouteType()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NearbyInvitationParameters.serviceName.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyInvitationParameters.browserType.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_browserType);
}

unint64_t NearbyInvitationParameters.routeType.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_routeType) | ((unint64_t)*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_routeType + 4) << 32);
}

id NearbyInvitationParameters.__allocating_init(serviceName:browserType:listner:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  Swift::String v9 = (char *)objc_allocWithZone(v4);
  Swift::String v10 = &v9[OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName];
  *(void *)Swift::String v10 = a1;
  *((void *)v10 + 1) = a2;
  *(_DWORD *)&v9[OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_browserType] = a3;
  Swift::String v11 = &v9[OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_routeType];
  *(_DWORD *)Swift::String v11 = a4;
  v11[4] = BYTE4(a4) & 1;
  v13.id receiver = v9;
  v13.Class super_class = v4;
  return objc_msgSendSuper2(&v13, sel_init);
}

id NearbyInvitationParameters.init(serviceName:browserType:listner:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  Swift::String v5 = &v4[OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName];
  *(void *)Swift::String v5 = a1;
  *((void *)v5 + 1) = a2;
  *(_DWORD *)&v4[OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_browserType] = a3;
  Swift::String v6 = &v4[OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_routeType];
  *(_DWORD *)Swift::String v6 = a4;
  v6[4] = BYTE4(a4) & 1;
  v8.id receiver = v4;
  v8.Class super_class = (Class)type metadata accessor for NearbyInvitationParameters();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t NearbyInvitationParameters.description.getter()
{
  swift_getObjectType();
  *(_DWORD *)&v14[8] = 0;
  _StringGuts.grow(_:)(55);
  v1._countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x6563697672657320;
  v3._object = (void *)0xEE00203A656D614ELL;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName);
  Swift::String v5 = *(void **)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName + 8);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x6573776F7262202CLL;
  v7._object = (void *)0xEF203A6570795472;
  String.append(_:)(v7);
  *(void *)uint64_t v14 = *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_browserType);
  _print_unlocked<A, B>(_:_:)();
  v8._object = (void *)0x80000002573C34D0;
  v8._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v8);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_routeType + 4))
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  else
  {
    uint64_t v10 = String.init<A>(reflecting:)();
    unint64_t v9 = v11;
  }
  unint64_t v12 = v9;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  return *(void *)&v14[4];
}

uint64_t static NearbyInvitationParameters.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyInvitationParameters.encode(with:)(NSCoder with)
{
  Swift::String v3 = (void *)MEMORY[0x25A2B5660](*(void *)(v1 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName), *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_serviceName + 8));
  uint64_t v4 = (void *)MEMORY[0x25A2B5660](0x4E65636976726573, 0xEB00000000656D61);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];

  Class isa = UInt32._bridgeToObjectiveC()().super.super.isa;
  Swift::String v6 = (void *)MEMORY[0x25A2B5660](0x54726573776F7262, 0xEB00000000657079);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v6];

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14NearbySessions26NearbyInvitationParameters_routeType + 4)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = _bridgeAnythingToObjectiveC<A>(_:)();
  }
  Swift::String v8 = (void *)MEMORY[0x25A2B5660](0x7079546574756F72, 0xE900000000000065);
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];
  swift_unknownObjectRelease();
}

uint64_t NearbyInvitationParameters.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbyInvitationParameters.init(coder:)(a1);
}

uint64_t NearbyInvitationParameters.init(coder:)(void *a1)
{
  type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  id v3 = v1;
  uint64_t v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v4)
  {
    Swift::String v5 = (void *)v4;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  type metadata accessor for NearbyInvitationParameters();
  swift_deallocPartialClassInstance();
  return 0;
}

void NearbyInvitationParameters.init()()
{
}

id NearbyInvitationParameters.__deallocating_deinit(uint64_t a1)
{
  return NearbyInvitationParameters.__deallocating_deinit(a1, type metadata accessor for NearbyInvitationParameters);
}

uint64_t InvitationJoinResponse.sessionIdentifier.getter()
{
  return InvitationJoinResponse.sessionIdentifier.getter(&OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier);
}

uint64_t InvitationJoinResponse.memberHandles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t InvitationJoinResponse.userInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo);
  outlined copy of Data?(v1, *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo + 8));
  return v1;
}

id one-time initialization function for denied()
{
  uint64_t v0 = (objc_class *)type metadata accessor for InvitationJoinResponse();
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  Swift::String v2 = &v1[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier];
  *(void *)Swift::String v2 = 0;
  *((void *)v2 + 1) = 0;
  *(void *)&v1[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_memberHandles] = 0;
  *(_OWORD *)&v1[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo] = xmmword_2573BF070;
  v4.id receiver = v1;
  v4.Class super_class = v0;
  id result = objc_msgSendSuper2(&v4, sel_init);
  static InvitationJoinResponse.denied = (uint64_t)result;
  return result;
}

id static InvitationJoinResponse.denied.getter()
{
  if (one-time initialization token for denied != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static InvitationJoinResponse.denied;
  return v0;
}

id static InvitationJoinResponse.approved(sessionIdentifier:memberHandles:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = (objc_class *)type metadata accessor for InvitationJoinResponse();
  unint64_t v11 = (char *)objc_allocWithZone(v10);
  unint64_t v12 = &v11[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier];
  *(void *)unint64_t v12 = a1;
  *((void *)v12 + 1) = a2;
  *(void *)&v11[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_memberHandles] = a3;
  objc_super v13 = (uint64_t *)&v11[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo];
  *objc_super v13 = a4;
  v13[1] = a5;
  outlined copy of Data?(a4, a5);
  v15.id receiver = v11;
  v15.Class super_class = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return objc_msgSendSuper2(&v15, sel_init);
}

uint64_t static InvitationJoinResponse.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall InvitationJoinResponse.encode(with:)(NSCoder with)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier + 8)) {
    uint64_t v3 = MEMORY[0x25A2B5660](*(void *)(v1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier));
  }
  else {
    uint64_t v3 = 0;
  }
  objc_super v4 = (void *)MEMORY[0x25A2B5660](0xD000000000000011, 0x80000002573C3540);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_memberHandles)) {
    v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else {
    v5.super.Class isa = 0;
  }
  Swift::String v6 = (void *)MEMORY[0x25A2B5660](0x61487265626D656DLL, 0xED000073656C646ELL);
  [(objc_class *)with.super.isa encodeObject:v5.super.isa forKey:v6];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo + 8) >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v8 = (id)MEMORY[0x25A2B5660](0x6F666E4972657375, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v8];
  swift_unknownObjectRelease();
}

uint64_t InvitationJoinResponse.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return InvitationJoinResponse.init(coder:)(a1);
}

uint64_t InvitationJoinResponse.init(coder:)(void *a1)
{
  Swift::String v2 = v1;
  type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  id v4 = v2;
  uint64_t v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v5)
  {
    Swift::String v6 = (void *)v5;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t InvitationJoinResponse.description.getter()
{
  uint64_t v1 = 7104878;
  swift_getObjectType();
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x6973736573202D20;
  v3._object = (void *)0xEE00203A44496E6FLL;
  String.append(_:)(v3);
  if (*(void *)(v0 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier + 8))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v4 = String.init<A>(reflecting:)();
    unint64_t v6 = v5;
  }
  else
  {
    unint64_t v6 = 0xE300000000000000;
    uint64_t v4 = 7104878;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x73656C646E616820;
  v8._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v8);
  if (*(void *)(v0 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_memberHandles))
  {
    swift_bridgeObjectRetain_n();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    uint64_t v9 = String.init<A>(reflecting:)();
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v11 = 0xE300000000000000;
    uint64_t v9 = 7104878;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x666E497265737520;
  v13._object = (void *)0xEB00000000203A6FLL;
  String.append(_:)(v13);
  uint64_t v15 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo);
  unint64_t v14 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo + 8);
  if (v14 >> 60 == 15)
  {
    id v16 = (void *)0xE300000000000000;
  }
  else
  {
    outlined copy of Data._Representation(v15, v14);
    outlined copy of Data._Representation(v15, v14);
    uint64_t v1 = String.init<A>(reflecting:)();
    id v16 = v17;
  }
  v18._countAndFlagsBits = v1;
  v18._object = v16;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  outlined consume of Data?(v15, v14);
  v19._countAndFlagsBits = 62;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return 60;
}

void InvitationJoinResponse.init()()
{
}

id InvitationJoinResponse.__deallocating_deinit(uint64_t a1)
{
  return NearbyInvitationParameters.__deallocating_deinit(a1, type metadata accessor for InvitationJoinResponse);
}

id NearbyInvitationParameters.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.id receiver = v2;
  v4.Class super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t InvitationBlob.invitationID.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvitationBlob.dataBlob.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob);
  outlined copy of Data._Representation(v1, *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob + 8));
  return v1;
}

id InvitationBlob.__allocating_init(invitationID:dataBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return InvitationBlob.__allocating_init(invitationID:dataBlob:)(a1, a2, a3, a4, &OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID, &OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob);
}

id InvitationBlob.init(invitationID:dataBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return InvitationBlob.init(invitationID:dataBlob:)(a1, a2, a3, a4, &OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID, &OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob, type metadata accessor for InvitationBlob);
}

uint64_t InvitationBlob.description.getter()
{
  _StringGuts.grow(_:)(56);
  v1._countAndFlagsBits = 0xD000000000000015;
  v1._object = (void *)0x80000002573C35A0;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x80000002573C35C0;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID);
  objc_super v4 = *(void **)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID + 8);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6C4261746164202CLL;
  v6._object = (void *)0xEC000000203A626FLL;
  String.append(_:)(v6);
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob);
  unint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob + 8);
  outlined copy of Data._Representation(v7, v8);
  v9._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v7, v8);
  v10._countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t static InvitationBlob.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall InvitationBlob.encode(with:)(NSCoder with)
{
  uint64_t v3 = (void *)MEMORY[0x25A2B5660](*(void *)(v1 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID), *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID + 8));
  objc_super v4 = (void *)MEMORY[0x25A2B5660](0x6974617469766E69, 0xEC00000044496E6FLL);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = (id)MEMORY[0x25A2B5660](0x626F6C4261746164, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v6];
}

uint64_t InvitationBlob.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return InvitationBlob.init(coder:)(a1);
}

uint64_t InvitationBlob.init(coder:)(void *a1)
{
  Swift::String v2 = v1;
  type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  id v4 = v2;
  uint64_t v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v5)
  {
    id v6 = (void *)v5;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  type metadata accessor for InvitationBlob();
  swift_deallocPartialClassInstance();
  return 0;
}

void InvitationBlob.init()()
{
}

uint64_t InvitationBlob.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x626F6C4261746164;
  }
  else {
    return 0x6974617469766E69;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InvitationBlob.CodingKeys()
{
  return InvitationBlob.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InvitationBlob.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized InvitationBlob.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InvitationBlob.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InvitationBlob.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InvitationBlob.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

id InvitationBlob.__deallocating_deinit(uint64_t a1)
{
  return NearbyInvitationParameters.__deallocating_deinit(a1, type metadata accessor for InvitationBlob);
}

uint64_t InvitationBlob.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InvitationBlob.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    long long v11 = *(_OWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob);
    v10[15] = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

id InvitationBlob.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return InvitationBlob.init(from:)(a1);
}

id InvitationBlob.init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InvitationBlob.CodingKeys>);
  uint64_t v17 = *(void *)(v4 - 8);
  uint64_t v18 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys();
  unint64_t v8 = v1;
  id v9 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);

    type metadata accessor for InvitationBlob();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v11 = v17;
    uint64_t v10 = v18;
    LOBYTE(v20) = 0;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    unint64_t v14 = (uint64_t *)&v8[OBJC_IVAR____TtC14NearbySessions14InvitationBlob_invitationID];
    *unint64_t v14 = v12;
    v14[1] = v15;
    char v21 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v8[OBJC_IVAR____TtC14NearbySessions14InvitationBlob_dataBlob] = v20;

    id v16 = (objc_class *)type metadata accessor for InvitationBlob();
    v19.id receiver = v8;
    v19.Class super_class = v16;
    id v9 = objc_msgSendSuper2(&v19, sel_init);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v6, v10);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v9;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InvitationBlob@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 128))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InvitationBlob()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0x78))();
}

uint64_t IncomingInvitationJoinRequest.invitationID.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_invitationID, a1);
}

uint64_t IncomingInvitationJoinRequest.remotePseudonym.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IncomingInvitationJoinRequest.remotePublicKey.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey);
  outlined copy of Data._Representation(v1, *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey + 8));
  return v1;
}

uint64_t IncomingInvitationJoinRequest.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IncomingInvitationJoinRequest.destinationToken.getter()
{
  return InvitationJoinResponse.sessionIdentifier.getter(&OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken);
}

uint64_t IncomingInvitationJoinRequest.userInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo);
  outlined copy of Data?(v1, *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo + 8));
  return v1;
}

void *IncomingInvitationJoinRequest.hostInfo.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void IncomingInvitationJoinRequest.hostInfo.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*IncomingInvitationJoinRequest.hostInfo.modify())()
{
  return static NearbyGroupInterface.identity.modify;
}

id IncomingInvitationJoinRequest.__allocating_init(invitationID:remotePseudonym:destinationToken:remotePublicKey:displayName:userInfo:hostInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, void *a12)
{
  id v16 = (char *)objc_allocWithZone(v12);
  uint64_t v17 = (void **)&v16[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo];
  *(void *)&v16[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo] = 0;
  uint64_t v18 = &v16[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_invitationID];
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v18, a1, v19);
  char v21 = &v16[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym];
  *(void *)char v21 = a2;
  *((void *)v21 + 1) = a3;
  id v22 = &v16[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken];
  *(void *)id v22 = a4;
  *((void *)v22 + 1) = a5;
  uint64_t v23 = (uint64_t *)&v16[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey];
  *uint64_t v23 = a6;
  v23[1] = a7;
  uint64_t v24 = &v16[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName];
  *(void *)uint64_t v24 = a8;
  *((void *)v24 + 1) = a9;
  unint64_t v25 = &v16[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo];
  *(void *)unint64_t v25 = a10;
  *((void *)v25 + 1) = a11;
  swift_beginAccess();
  uint64_t v26 = *v17;
  *uint64_t v17 = a12;
  outlined copy of Data._Representation(a6, a7);
  outlined copy of Data?(a10, a11);
  id v27 = a12;

  v37.id receiver = v16;
  v37.Class super_class = v34;
  id v28 = objc_msgSendSuper2(&v37, sel_init);

  outlined consume of Data?(a10, a11);
  outlined consume of Data._Representation(a6, a7);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, v19);
  return v28;
}

id IncomingInvitationJoinRequest.init(invitationID:remotePseudonym:destinationToken:remotePublicKey:displayName:userInfo:hostInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, void *a12)
{
  uint64_t v17 = (void **)&v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo];
  *(void *)&v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo] = 0;
  uint64_t v18 = &v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_invitationID];
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v18, a1, v19);
  char v21 = &v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym];
  *(void *)char v21 = a2;
  *((void *)v21 + 1) = a3;
  id v22 = &v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken];
  *(void *)id v22 = a4;
  *((void *)v22 + 1) = a5;
  uint64_t v23 = (uint64_t *)&v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey];
  *uint64_t v23 = a6;
  v23[1] = a7;
  uint64_t v24 = &v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName];
  *(void *)uint64_t v24 = a8;
  *((void *)v24 + 1) = a9;
  unint64_t v25 = (uint64_t *)&v12[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo];
  *unint64_t v25 = a10;
  v25[1] = a11;
  swift_beginAccess();
  uint64_t v26 = *v17;
  *uint64_t v17 = a12;
  outlined copy of Data._Representation(a6, a7);
  outlined copy of Data?(a10, a11);
  id v27 = a12;

  v35.id receiver = v12;
  v35.Class super_class = (Class)type metadata accessor for IncomingInvitationJoinRequest(0);
  id v28 = objc_msgSendSuper2(&v35, sel_init);

  outlined consume of Data?(a10, a11);
  outlined consume of Data._Representation(a6, a7);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, v19);
  return v28;
}

uint64_t IncomingInvitationJoinRequest.description.getter()
{
  uint64_t v1 = 7104878;
  swift_getObjectType();
  _StringGuts.grow(_:)(127);
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x74617469766E6920;
  v4._object = (void *)0xEF203A44496E6F69;
  String.append(_:)(v4);
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x80000002573C3610;
  v6._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v6);
  uint64_t v7 = *(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym);
  unint64_t v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym + 8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0xD000000000000014;
  v10._object = (void *)0x80000002573C3630;
  String.append(_:)(v10);
  if (*(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken + 8))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v11 = String.init<A>(reflecting:)();
    unint64_t v13 = v12;
  }
  else
  {
    unint64_t v13 = 0xE300000000000000;
    uint64_t v11 = 7104878;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0xD000000000000013;
  v15._object = (void *)0x80000002573C3650;
  String.append(_:)(v15);
  uint64_t v16 = *(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey);
  unint64_t v17 = *(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey + 8);
  outlined copy of Data._Representation(v16, v17);
  v18._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v16, v17);
  v19._countAndFlagsBits = 0x79616C7073696420;
  v19._object = (void *)0xEE00203A656D614ELL;
  String.append(_:)(v19);
  uint64_t v20 = *(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName);
  char v21 = *(void **)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName + 8);
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v20;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x6E4972657375202CLL;
  v23._object = (void *)0xEC000000203A6F66;
  String.append(_:)(v23);
  uint64_t v25 = *(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo);
  unint64_t v24 = *(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo + 8);
  if (v24 >> 60 == 15)
  {
    unint64_t v26 = 0xE300000000000000;
    uint64_t v27 = 7104878;
  }
  else
  {
    outlined copy of Data._Representation(v25, v24);
    outlined copy of Data._Representation(v25, v24);
    uint64_t v27 = String.init<A>(reflecting:)();
    unint64_t v26 = v28;
  }
  unint64_t v29 = v26;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease();
  outlined consume of Data?(v25, v24);
  v30._countAndFlagsBits = 0x666E4974736F6820;
  v30._object = (void *)0xEB00000000203A6FLL;
  String.append(_:)(v30);
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v0) + 0x88))(v31, v32);
  if (v33)
  {
    uint64_t v34 = (void *)v33;
    type metadata accessor for NearbyInvitationJoinRequestMetadata();
    id v35 = v34;
    uint64_t v1 = String.init<A>(reflecting:)();
    objc_super v37 = v36;
  }
  else
  {
    id v35 = 0;
    objc_super v37 = (void *)0xE300000000000000;
  }
  v38._countAndFlagsBits = v1;
  v38._object = v37;
  String.append(_:)(v38);

  swift_bridgeObjectRelease();
  v39._countAndFlagsBits = 62;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  return 0;
}

uint64_t static IncomingInvitationJoinRequest.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall IncomingInvitationJoinRequest.encode(with:)(NSCoder with)
{
  Swift::String v2 = v1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Swift::String v5 = (void *)MEMORY[0x25A2B5660](0x6974617469766E69, 0xEC00000044496E6FLL);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v5];

  Swift::String v6 = (void *)MEMORY[0x25A2B5660](*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym), *(void *)((char *)v2+ OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym+ 8));
  uint64_t v7 = (void *)MEMORY[0x25A2B5660](0x735065746F6D6572, 0xEF6D796E6F647565);
  [(objc_class *)with.super.isa encodeObject:v6 forKey:v7];

  if (*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken + 8)) {
    uint64_t v8 = MEMORY[0x25A2B5660](*(void *)((char *)v2
  }
                                       + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken));
  else {
    uint64_t v8 = 0;
  }
  Swift::String v9 = (void *)MEMORY[0x25A2B5660](0xD000000000000010, 0x80000002573C3680);
  [(objc_class *)with.super.isa encodeObject:v8 forKey:v9];
  swift_unknownObjectRelease();

  Class v10 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v11 = (void *)MEMORY[0x25A2B5660](0x755065746F6D6572, 0xEF79654B63696C62);
  [(objc_class *)with.super.isa encodeObject:v10 forKey:v11];

  unint64_t v12 = (void *)MEMORY[0x25A2B5660](*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName), *(void *)((char *)v2+ OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName+ 8));
  unint64_t v13 = (void *)MEMORY[0x25A2B5660](0x4E79616C70736964, 0xEB00000000656D61);
  [(objc_class *)with.super.isa encodeObject:v12 forKey:v13];

  if (*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo + 8) >> 60 == 15) {
    Class v14 = 0;
  }
  else {
    Class v14 = Data._bridgeToObjectiveC()().super.isa;
  }
  Swift::String v15 = (void *)MEMORY[0x25A2B5660](0x6F666E4972657375, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:v14 forKey:v15];
  swift_unknownObjectRelease();

  uint64_t v16 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0x88))();
  id v17 = (id)MEMORY[0x25A2B5660](0x6F666E4974736F68, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:v16 forKey:v17];
}

id IncomingInvitationJoinRequest.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return IncomingInvitationJoinRequest.init(coder:)(a1);
}

id IncomingInvitationJoinRequest.init(coder:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  Swift::String v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v58 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = (void **)&v1[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo];
  *(void *)&v1[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_hostInfo] = 0;
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  Class v14 = v1;
  uint64_t v15 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_6;
  }
  uint64_t v16 = (void *)v15;
  uint64_t v64 = a1;
  int v65 = v13;
  id v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v17(v6, 1, 1, v9);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
  dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

  Swift::String v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v18(v6, 1, v9) == 1)
  {
    v17(v8, 1, 1, v9);
    a1 = v64;
    unint64_t v13 = v65;
LABEL_6:

    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_7:
    char v21 = *v13;

    type metadata accessor for IncomingInvitationJoinRequest(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v62 = v10;
  uint64_t v63 = v12;
  Swift::String v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v19(v8, v6, v9);
  v17(v8, 0, 1, v9);
  unsigned int v20 = v18(v8, 1, v9);
  a1 = v64;
  unint64_t v13 = v65;
  if (v20 == 1) {
    goto LABEL_6;
  }
  v19(v63, v8, v9);
  type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  uint64_t v24 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v24
    || (uint64_t v25 = (void *)v24,
        long long v67 = 0uLL,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v25,
        (uint64_t v26 = *((void *)&v67 + 1)) == 0))
  {

    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v9);
    goto LABEL_7;
  }
  uint64_t v27 = v67;
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSData);
  uint64_t v28 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v28)
  {

    swift_bridgeObjectRelease();
    uint64_t v32 = v62;
    uint64_t v31 = v63;
    goto LABEL_16;
  }
  unint64_t v29 = (void *)v28;
  uint64_t v61 = v27;
  long long v67 = xmmword_2573BF070;
  static Data._conditionallyBridgeFromObjectiveC(_:result:)();

  unint64_t v30 = *((void *)&v67 + 1);
  uint64_t v31 = v63;
  if (*((void *)&v67 + 1) >> 60 == 15)
  {

    swift_bridgeObjectRelease();
    uint64_t v32 = v62;
LABEL_16:
    (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v9);
    goto LABEL_7;
  }
  uint64_t v60 = v67;
  uint64_t v33 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v33
    || (uint64_t v34 = (void *)v33,
        long long v67 = 0uLL,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v34,
        (uint64_t v35 = *((void *)&v67 + 1)) == 0))
  {

    swift_bridgeObjectRelease();
    outlined consume of Data?(v60, v30);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v31, v9);
    unint64_t v13 = v65;
    goto LABEL_7;
  }
  unint64_t v59 = v30;
  uint64_t v36 = v67;
  uint64_t v37 = NSCoder.decodeObject<A>(of:forKey:)();
  uint64_t v38 = v62;
  if (v37)
  {
    Swift::String v39 = (void *)v37;
    long long v67 = 0uLL;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

    long long v40 = v67;
  }
  else
  {
    long long v40 = 0uLL;
  }
  uint64_t v41 = v61;
  *(_OWORD *)&v14[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken] = v40;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(&v14[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_invitationID], v63, v9);
  uint64_t v42 = &v14[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym];
  *(void *)uint64_t v42 = v41;
  *((void *)v42 + 1) = v26;
  uint64_t v43 = &v14[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePublicKey];
  unint64_t v45 = v59;
  uint64_t v44 = v60;
  *(void *)uint64_t v43 = v60;
  *((void *)v43 + 1) = v45;
  unint64_t v46 = &v14[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName];
  *(void *)unint64_t v46 = v36;
  *((void *)v46 + 1) = v35;
  outlined copy of Data._Representation(v44, v45);
  uint64_t v47 = v64;
  uint64_t v48 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v48)
  {
    uint64_t v49 = (void *)v48;
    uint64_t v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v52 = v51;
  }
  else
  {
    uint64_t v50 = 0;
    unint64_t v52 = 0xF000000000000000;
  }
  uint64_t v53 = (uint64_t *)&v14[OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo];
  *uint64_t v53 = v50;
  v53[1] = v52;
  type metadata accessor for NearbyInvitationJoinRequestMetadata();
  uint64_t v54 = NSCoder.decodeObject<A>(of:forKey:)();
  outlined consume of Data?(v60, v59);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v63, v9);
  id v55 = v65;
  swift_beginAccess();
  uint64_t v56 = *v55;
  uint8_t *v55 = (void *)v54;

  uint64_t v57 = (objc_class *)type metadata accessor for IncomingInvitationJoinRequest(0);
  v66.id receiver = v14;
  v66.Class super_class = v57;
  id v22 = objc_msgSendSuper2(&v66, sel_init);

  return v22;
}

void IncomingInvitationJoinRequest.init()()
{
}

id IncomingInvitationJoinRequest.__deallocating_deinit()
{
  return NearbyInvitationParameters.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for IncomingInvitationJoinRequest);
}

BOOL static InvitationRequest.Errors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void InvitationRequest.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int InvitationRequest.Errors.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InvitationRequest<A>.Errors(char *a1, char *a2)
{
  return static InvitationRequest.Errors.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InvitationRequest<A>.Errors()
{
  return InvitationRequest.Errors.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance InvitationRequest<A>.Errors(uint64_t a1)
{
  InvitationRequest.Errors.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InvitationRequest<A>.Errors()
{
  Hasher.init(_seed:)();
  InvitationRequest.Errors.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t InvitationRequest.displayName.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvitationRequest.displayName.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*InvitationRequest.displayName.modify())()
{
  return static NearbyGroupInterface.identity.modify;
}

uint64_t InvitationRequest.userInfo.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of Data?(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t InvitationRequest.userInfo.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 32);
  unint64_t v6 = *(void *)(v2 + 40);
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return outlined consume of Data?(v5, v6);
}

uint64_t InvitationRequest.invitationDisplayName.getter()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 48) + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvitationRequest.invitationUserInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + 48) + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo;
  uint64_t v2 = *(void *)v1;
  outlined copy of Data?(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

id InvitationRequest.remoteInvitationData.getter()
{
  return *(id *)(v0 + 48);
}

uint64_t InvitationRequest.__allocating_init(remoteInvitationData:providerType:displayName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  InvitationRequest.init(remoteInvitationData:providerType:displayName:)(a1, v8, a3, a4);
  return v7;
}

void *InvitationRequest.init(remoteInvitationData:providerType:displayName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = 0;
  void v4[4] = 0;
  v4[2] = 0;
  v4[5] = 0xF000000000000000;
  v4[6] = a1;
  swift_beginAccess();
  v4[2] = a3;
  v4[3] = a4;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v7 = v4[4];
  unint64_t v8 = v4[5];
  *((_OWORD *)v4 + 2) = xmmword_2573BF070;
  outlined consume of Data?(v7, v8);
  return v4;
}

uint64_t InvitationRequest.__allocating_init(invitationData:providerType:displayName:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return InvitationRequest.__allocating_init(invitationData:displayName:userInfo:)(a1, a2, a4, a5, 0, 0xF000000000000000);
}

uint64_t InvitationRequest.__allocating_init(remoteInvitationData:displayName:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  InvitationRequest.init(remoteInvitationData:displayName:userInfo:)(a1, a2, a3, a4, a5);
  return v10;
}

void *InvitationRequest.init(remoteInvitationData:displayName:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = 0;
  v5[4] = 0;
  void v5[2] = 0;
  v5[5] = 0xF000000000000000;
  v5[6] = a1;
  swift_beginAccess();
  void v5[2] = a2;
  v5[3] = a3;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v10 = v5[4];
  unint64_t v11 = v5[5];
  v5[4] = a4;
  v5[5] = a5;
  outlined consume of Data?(v10, v11);
  return v5;
}

uint64_t InvitationRequest.requestApproval()()
{
  *(void *)(v1 + 24) = v0;
  return MEMORY[0x270FA2498](InvitationRequest.requestApproval(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v2 = static NearbyInvitationsController.shared;
  uint64_t v3 = swift_task_alloc();
  v0[4] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  uint64_t v5 = type metadata accessor for InvitationJoinResponse();
  *uint64_t v4 = v0;
  v4[1] = InvitationRequest.requestApproval();
  return MEMORY[0x270FA2360](v0 + 2, 0, 0, 0xD000000000000011, 0x80000002573C36F0, partial apply for closure #1 in InvitationRequest.requestApproval(), v3, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = InvitationRequest.requestApproval();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NearbyInvitationsController.createGroup(with:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in InvitationRequest.requestApproval()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationJoinResponse, Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(v6 + 120))(v10);
  if (v12)
  {
    uint64_t v13 = v11;
    uint64_t v14 = v12;
    uint64_t v15 = (void *)a2[6];
    uint64_t v16 = *a2;
    uint64_t v39 = a1;
    id v17 = *(uint64_t (**)(void))(v16 + 144);
    uint64_t v40 = a3;
    uint64_t v38 = v7;
    id v18 = v15;
    uint64_t v19 = v17();
    uint64_t v21 = v20;
    id v22 = (objc_class *)type metadata accessor for InvitationApprovalRequest();
    Swift::String v23 = (char *)objc_allocWithZone(v22);
    *(void *)&v23[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData] = v18;
    uint64_t v24 = &v23[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName];
    *(void *)uint64_t v24 = v13;
    *((void *)v24 + 1) = v14;
    uint64_t v25 = (uint64_t *)&v23[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo];
    *uint64_t v25 = v19;
    v25[1] = v21;
    v41.id receiver = v23;
    v41.Class super_class = v22;
    id v26 = objc_msgSendSuper2(&v41, sel_init);
    uint64_t v27 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v39, v38);
    unint64_t v28 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = *(void *)(v6 + 80);
    *(void *)(v29 + 24) = *(void *)(v6 + 88);
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v29 + v28, (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v27);
    NearbyInvitationsController.requestApproval(with:completion:)(v26, (uint64_t)partial apply for closure #1 in closure #1 in InvitationRequest.requestApproval(), v29);

    return swift_release();
  }
  else
  {
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Log.client);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 138412290;
      type metadata accessor for InvitationRequest.Errors();
      swift_getWitnessTable();
      swift_allocError();
      *uint64_t v36 = 1;
      uint64_t v42 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v35 = v42;
      _os_log_impl(&dword_257351000, v32, v33, "Passed an invalid displayName to the provider %@", v34, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v35, -1, -1);
      MEMORY[0x25A2B6460](v34, -1, -1);
    }
    else
    {

      type metadata accessor for InvitationRequest.Errors();
    }
    swift_getWitnessTable();
    swift_allocError();
    *uint64_t v37 = 1;
    return CheckedContinuation.resume(throwing:)();
  }
}

id InvitationApprovalRequest.__allocating_init(remoteInvitationData:displayName:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (char *)objc_allocWithZone(v5);
  *(void *)&v11[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData] = a1;
  uint64_t v12 = &v11[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName];
  *(void *)uint64_t v12 = a2;
  *((void *)v12 + 1) = a3;
  uint64_t v13 = &v11[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo];
  *(void *)uint64_t v13 = a4;
  *((void *)v13 + 1) = a5;
  v15.id receiver = v11;
  v15.Class super_class = v5;
  return objc_msgSendSuper2(&v15, sel_init);
}

uint64_t closure #1 in closure #1 in InvitationRequest.requestApproval()(void *a1, id a2)
{
  if (a2)
  {
    id v2 = a2;
LABEL_3:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationJoinResponse, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  if (!a1)
  {
    type metadata accessor for InvitationRequest.Errors();
    swift_getWitnessTable();
    swift_allocError();
    *uint64_t v5 = 2;
    goto LABEL_3;
  }
  id v4 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationJoinResponse, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t InvitationRequest.deinit()
{
  swift_bridgeObjectRelease();
  outlined consume of Data?(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return v0;
}

uint64_t InvitationRequest.__deallocating_deinit()
{
  InvitationRequest.deinit();
  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t Handle.handle.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Handle.tokenDestination.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

NearbySessions::Handle __swiftcall Handle.init(handle:tokenDestination:)(Swift::String handle, Swift::String_optional tokenDestination)
{
  v2->value = handle;
  v2[1] = tokenDestination;
  result.tokenDestination = tokenDestination;
  result.handle = handle;
  return result;
}

unint64_t Handle.description.getter()
{
  uint64_t v1 = *v0;
  id v2 = (void *)v0[1];
  uint64_t v3 = v0[3];
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v1;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000002573C3730;
  v5._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v5);
  if (v3)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v6 = String.init<A>(reflecting:)();
    unint64_t v8 = v7;
  }
  else
  {
    unint64_t v8 = 0xE300000000000000;
    uint64_t v6 = 7104878;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000016;
}

uint64_t NearbyInvitation.id.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&direct field offset for NearbyInvitation.id, a1);
}

uint64_t NearbyInvitation.controller.getter()
{
  return swift_retain();
}

uint64_t NearbyInvitation.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + direct field offset for NearbyInvitation.displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyInvitation.userInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + direct field offset for NearbyInvitation.userInfo);
  outlined copy of Data?(v1, *(void *)(v0 + direct field offset for NearbyInvitation.userInfo + 8));
  return v1;
}

id NearbyInvitation.invitationHostInfo.getter()
{
  return *(id *)(v0 + direct field offset for NearbyInvitation.invitationHostInfo);
}

uint64_t NearbyInvitation.invitationData.getter()
{
  uint64_t v1 = v0;
  id v2 = (objc_class *)type metadata accessor for NearbyInvitationData(0);
  swift_retain();
  id v3 = objc_allocWithZone(v2);
  Swift::String v4 = specialized NearbyInvitationData.init<A>(from:)(v1);
  uint64_t v5 = swift_release();
  uint64_t v6 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v4) + 0x80))(v5);

  return v6;
}

id NearbyInvitationData.__allocating_init<A>(from:)(uint64_t a1)
{
  id v1 = specialized NearbyInvitationData.__allocating_init<A>(from:)(a1);
  swift_release();
  return v1;
}

uint64_t NearbyInvitation.sourceProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of InvitationSourceProvider(v1 + direct field offset for NearbyInvitation.sourceProvider, a1);
}

uint64_t static NearbyInvitation.PendingMember.Errors.== infix(_:_:)()
{
  return 1;
}

void NearbyInvitation.PendingMember.Errors.hash(into:)()
{
}

Swift::Int NearbyInvitation.PendingMember.Errors.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t NearbyInvitation.PendingMember.displayName.getter()
{
  uint64_t v0 = specialized NearbyInvitation.PendingMember.displayName.getter();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t NearbyInvitation.PendingMember.joinRequestUserInfo.getter()
{
  uint64_t v1 = *v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_userInfo;
  uint64_t v2 = *(void *)v1;
  outlined copy of Data?(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t NearbyInvitation.PendingMember.invitationID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_invitationID;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

id NearbyInvitation.PendingMember.joinRequest.getter()
{
  return *v0;
}

uint64_t key path getter for NearbyInvitation.PendingMember.invitation : <A>NearbyInvitation<A>.PendingMember@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NearbyInvitation.PendingMember();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  *a2 = Strong;
  return result;
}

uint64_t NearbyInvitation.PendingMember.invitation.getter()
{
  return swift_weakLoadStrong();
}

uint64_t NearbyInvitation.PendingMember.invitation.setter()
{
  swift_weakAssign();
  return swift_release();
}

uint64_t (*NearbyInvitation.PendingMember.invitation.modify(uint64_t *a1))()
{
  a1[1] = v1;
  *a1 = swift_weakLoadStrong();
  return NearbyInvitation.PendingMember.invitation.modify;
}

uint64_t NearbyInvitation.PendingMember.invitation.modify()
{
  swift_weakAssign();
  return swift_release();
}

uint64_t NearbyInvitation.PendingMember.description.getter()
{
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 2108704;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  uint64_t v3 = *v0;
  uint64_t v4 = (uint64_t *)((char *)*v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName);
  uint64_t v5 = *v4;
  uint64_t v6 = (void *)v4[1];
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x80000002573C3750;
  v8._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v8);
  id v9 = v3;
  id v10 = objc_msgSend(v9, sel_description);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);

  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 62;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return 60;
}

uint64_t NearbyInvitation.PendingMember.init(joinRequest:invitation:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  swift_weakInit();
  uint64_t v6 = *(void **)(a2 + direct field offset for NearbyInvitation.invitationHostInfo);
  Swift::String v7 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & *a1) + 0x90);
  Swift::String v8 = a1;
  id v9 = v6;
  v7(v6);

  *a3 = v8;
  swift_weakAssign();
  return swift_release();
}

void NearbyInvitation.PendingMember.hash(into:)()
{
  id v1 = *v0;
  NSObject.hash(into:)();
}

uint64_t static NearbyInvitation.PendingMember.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t NearbyInvitation.PendingMember.approve()(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = v1;
  *(_OWORD *)(v4 + 16) = xmmword_2573BF070;
  return MEMORY[0x270FA2498](NearbyInvitation.PendingMember.approve(userInfo:), 0, 0);
}

uint64_t NearbyInvitation.PendingMember.approve(userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](NearbyInvitation.PendingMember.approve(userInfo:), 0, 0);
}

uint64_t NearbyInvitation.PendingMember.approve(userInfo:)()
{
  uint64_t Strong = swift_weakLoadStrong();
  v0[6] = Strong;
  if (Strong)
  {
    Swift::String v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)Strong + 264)
                                                           + **(int **)(*(void *)Strong + 264));
    uint64_t v2 = (void *)swift_task_alloc();
    v0[7] = v2;
    *uint64_t v2 = v0;
    v2[1] = NearbyInvitation.PendingMember.approve(userInfo:);
    uint64_t v3 = v0[5];
    uint64_t v4 = v0[2];
    uint64_t v5 = v0[3];
    return v8(v3, v4, v5);
  }
  else
  {
    type metadata accessor for NearbyInvitation.PendingMember.Errors();
    swift_getWitnessTable();
    swift_allocError();
    swift_willThrow();
    Swift::String v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = NearbyInvitation.PendingMember.approve(userInfo:);
  }
  else {
    uint64_t v2 = NearbyInvitation.PendingMember.approve(userInfo:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t NearbyInvitation.PendingMember.reject()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](NearbyInvitation.PendingMember.reject(), 0, 0);
}

uint64_t NearbyInvitation.PendingMember.reject()()
{
  uint64_t Strong = swift_weakLoadStrong();
  v0[4] = Strong;
  if (Strong)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)Strong + 272) + **(int **)(*(void *)Strong + 272));
    uint64_t v2 = (void *)swift_task_alloc();
    v0[5] = v2;
    *uint64_t v2 = v0;
    v2[1] = NearbyInvitation.PendingMember.reject();
    uint64_t v3 = v0[3];
    return v6(v3);
  }
  else
  {
    type metadata accessor for NearbyInvitation.PendingMember.Errors();
    swift_getWitnessTable();
    swift_allocError();
    swift_willThrow();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = NearbyInvitation.PendingMember.reject();
  }
  else {
    uint64_t v2 = NearbyInvitation.PendingMember.reject();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Int NearbyInvitation.PendingMember.hashValue.getter()
{
  Hasher.init(_seed:)();
  id v1 = *v0;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t property wrapper backing initializer of NearbyInvitation.pendingMembers(uint64_t a1)
{
  uint64_t v3 = a1;
  type metadata accessor for NearbyInvitation.PendingMember();
  swift_getWitnessTable();
  uint64_t v1 = type metadata accessor for Set();
  return Published.init(wrappedValue:)((uint64_t)&v3, v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NearbyInvitation<A>.PendingMember()
{
  return Hasher._finalize()();
}

uint64_t key path getter for NearbyInvitation.pendingMembers : <A>NearbyInvitation<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t key path setter for NearbyInvitation.pendingMembers : <A>NearbyInvitation<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t NearbyInvitation.pendingMembers.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t NearbyInvitation.pendingMembers.setter()
{
  return static Published.subscript.setter();
}

void (*NearbyInvitation.pendingMembers.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return NearbyInvitationsController.groups.modify;
}

uint64_t key path setter for NearbyInvitation.$pendingMembers : <A>NearbyInvitation<A>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NearbyInvitation.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v4 = type metadata accessor for Published.Publisher();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v9 - v5, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 200))(v6);
}

uint64_t NearbyInvitation.$pendingMembers.getter()
{
  return swift_endAccess();
}

uint64_t NearbyInvitation.$pendingMembers.setter(uint64_t a1)
{
  specialized NearbyInvitation.$pendingMembers.setter(a1);
  type metadata accessor for NearbyInvitation.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v2 = type metadata accessor for Published.Publisher();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

void (*NearbyInvitation.$pendingMembers.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  type metadata accessor for NearbyInvitation.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v4 = type metadata accessor for Published.Publisher();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  NearbyInvitation.$pendingMembers.getter();
  return NearbyInvitation.$pendingMembers.modify;
}

void NearbyInvitation.$pendingMembers.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    specialized NearbyInvitation.$pendingMembers.setter((uint64_t)v3);
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized NearbyInvitation.$pendingMembers.setter(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t NearbyInvitation.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NearbyInvitation.cancellables.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 152));
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyInvitation.cancellables.modify())()
{
  return static NearbyGroupInterface.hostObjectInterface.modify;
}

uint64_t NearbyInvitation.__allocating_init(displayName:service:userInfo:invitationSourceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[6] = a6;
  v7[7] = v6;
  void v7[4] = a4;
  v7[5] = a5;
  v7[2] = a1;
  v7[3] = a2;
  type metadata accessor for UUID();
  v7[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](NearbyInvitation.__allocating_init(displayName:service:userInfo:invitationSourceProvider:), 0, 0);
}

uint64_t NearbyInvitation.__allocating_init(displayName:service:userInfo:invitationSourceProvider:)()
{
  unint64_t v2 = v0[5];
  uint64_t v1 = (void *)v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = v1[3];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  UUID.init()();
  outlined copy of Data?(v3, v2);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static NearbyInvitationsController.shared;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = swift_task_alloc();
  v0[9] = v7;
  (*(void (**)(void))(v6 + 16))();
  swift_retain();
  Swift::String v8 = (void *)swift_task_alloc();
  v0[10] = v8;
  void *v8 = v0;
  v8[1] = NearbyInvitation.__allocating_init(displayName:service:userInfo:invitationSourceProvider:);
  uint64_t v9 = v0[8];
  uint64_t v10 = v0[4];
  uint64_t v11 = v0[5];
  uint64_t v12 = v0[2];
  uint64_t v13 = v0[3];
  return NearbyInvitation.__allocating_init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(v9, v12, v13, v10, v11, v5, v7, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = v0[6];
  outlined consume of Data?(v0[4], v0[5]);
  __swift_destroy_boxed_opaque_existential_0(v1);
  swift_task_dealloc();
  unint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v3 = v0[12];
  return v2(v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[6];
  outlined consume of Data?(v0[4], v0[5]);
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0(v1);
  swift_task_dealloc();
  unint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t NearbyInvitation.__allocating_init(displayName:service:userInfo:invitationSourceProvider:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = NearbyInvitation.__allocating_init(displayName:service:userInfo:invitationSourceProvider:);
  }
  else
  {
    *(void *)(v4 + 96) = a1;
    swift_task_dealloc();
    uint64_t v5 = NearbyInvitation.__allocating_init(displayName:service:userInfo:invitationSourceProvider:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t NearbyInvitation.__allocating_init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[11] = v13;
  v9[12] = v8;
  v9[9] = a7;
  v9[10] = a8;
  v9[7] = a5;
  v9[8] = a6;
  v9[5] = a3;
  v9[6] = a4;
  v9[3] = a1;
  v9[4] = a2;
  v9[13] = *(void *)(a8 - 8);
  v9[14] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v9[15] = v10;
  unsigned char v9[16] = *(void *)(v10 - 8);
  v9[17] = swift_task_alloc();
  return MEMORY[0x270FA2498](NearbyInvitation.__allocating_init<A>(id:displayName:userInfo:controller:invitationSourceProvider:), 0, 0);
}

uint64_t NearbyInvitation.__allocating_init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  uint64_t v2 = type metadata accessor for NearbyInvitationJoinRequestMetadata();
  *uint64_t v1 = v0;
  v1[1] = NearbyInvitation.__allocating_init<A>(id:displayName:userInfo:controller:invitationSourceProvider:);
  uint64_t v3 = *(void *)(v0 + 64);
  return MEMORY[0x270FA2360](v0 + 16, 0, 0, 0xD000000000000042, 0x80000002573C3770, partial apply for closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = NearbyInvitation.__allocating_init<A>(id:displayName:userInfo:controller:invitationSourceProvider:);
  }
  else
  {
    uint64_t v2 = NearbyInvitation.__allocating_init<A>(id:displayName:userInfo:controller:invitationSourceProvider:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0[17];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[9];
  uint64_t v24 = v0[8];
  uint64_t v25 = v0[19];
  Swift::String v23 = v0[7];
  uint64_t v7 = v0[5];
  uint64_t v21 = v0[11];
  id v22 = v0[6];
  uint64_t v8 = v0[4];
  uint64_t v9 = v0[2];
  (*(void (**)(uint64_t, void, void))(v0[16] + 16))(v1, v0[3], v0[15]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v6, v5);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 240))(v1, v8, v7, v9, v22, v23, v24, v2, v5, v21);
  if (v25)
  {
    uint64_t v11 = v0[15];
    uint64_t v12 = v0[16];
    uint64_t v13 = v0[3];
    (*(void (**)(void, void))(v0[13] + 8))(v0[9], v0[10]);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  else
  {
    uint64_t v16 = v10;
    id v17 = v0[16];
    id v18 = v0[15];
    uint64_t v19 = v0[3];
    (*(void (**)(void, void))(v0[13] + 8))(v0[9], v0[10]);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(uint64_t))v0[1];
    return v20(v16);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[13];
  uint64_t v5 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[3];
  swift_release();
  outlined consume of Data?(v7, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v8, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata, Error>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v6 + v5, (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  NearbyInvitationsController.generateNearbyInvitation(response:)((uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:), v6);
  return swift_release();
}

void *closure #1 in closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(void *result, id a2)
{
  if (result)
  {
    id v2 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata, Error>);
    return (void *)CheckedContinuation.resume(returning:)();
  }
  else if (a2)
  {
    id v3 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata, Error>);
    return (void *)CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  Swift::String v14 = specialized NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a9 - 8) + 8))(a8, a9);
  swift_release();
  outlined consume of Data?(a5, a6);

  return v14;
}

uint64_t closure #1 in NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(void **a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x88))();
    if (v4)
    {
      unint64_t v5 = (void *)v4;
      uint64_t v7 = *(void *)(v4 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
      uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8);
      swift_bridgeObjectRetain();

      uint64_t v8 = (void *)(*(void *)(v3 + direct field offset for NearbyInvitation.invitationHostInfo)
                    + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
      if (v7 == *v8 && v6 == v8[1])
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0) {
          return swift_release();
        }
      }
      uint64_t v11 = v1;
      swift_retain();
      NearbyInvitation.PendingMember.init(joinRequest:invitation:)(v11, v3, &v15);
      uint64_t v12 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v3 + 184))(v14);
      uint64_t v13 = type metadata accessor for NearbyInvitation.PendingMember();
      swift_getWitnessTable();
      type metadata accessor for Set();
      Set.insert(_:)();
      (*(void (**)(unsigned char *, uint64_t))(*(void *)(v13 - 8) + 8))(v16, v13);
      v12(v14, 0);
    }
    return swift_release();
  }
  return result;
}

void *NearbyInvitation.deinit()
{
  uint64_t v1 = v0;
  uint64_t v16 = *v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = direct field offset for NearbyInvitation.controller;
  uint64_t v15 = direct field offset for NearbyInvitation.invitationHostInfo;
  uint64_t v6 = *(void **)((char *)v0 + direct field offset for NearbyInvitation.invitationHostInfo);
  uint64_t v7 = (char *)v0 + direct field offset for NearbyInvitation.id;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, (uint64_t)v0 + direct field offset for NearbyInvitation.id, v2);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v9 = (v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v10 + v8, v5, v2);
  *(void *)(v10 + v9) = v6;
  NearbyInvitationsController.releaseInvitation(_:response:)(v6, (uint64_t)partial apply for closure #1 in NearbyInvitation.deinit, v10);
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data?(*(void *)((char *)v1 + direct field offset for NearbyInvitation.userInfo), *(void *)((char *)v1 + direct field offset for NearbyInvitation.userInfo + 8));

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v0 + direct field offset for NearbyInvitation.sourceProvider);
  uint64_t v11 = (char *)v1 + *(void *)(*v1 + 144);
  type metadata accessor for NearbyInvitation.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v12 = type metadata accessor for Published();
  (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  return v1;
}

void closure #1 in NearbyInvitation.deinit(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v41[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = &v41[-v11];
  if (a1)
  {
    id v13 = a1;
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.client);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
    id v15 = a3;
    id v16 = a1;
    id v17 = v15;
    id v18 = a1;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    int v21 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v22 = swift_slowAlloc();
      Swift::String v23 = (void *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v46 = v44;
      *(_DWORD *)uint64_t v22 = 136315650;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
      os_log_t v43 = v19;
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      int v42 = v21;
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
      *(_WORD *)(v22 + 12) = 2112;
      uint64_t v45 = (uint64_t)v17;
      id v26 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Swift::String v23 = v17;

      *(_WORD *)(v22 + 22) = 2112;
      id v27 = a1;
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v45 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v23[1] = v28;

      os_log_t v29 = v43;
      _os_log_impl(&dword_257351000, v43, (os_log_type_t)v42, "Failed to release invitation: %s - %@, reason: %@", (uint8_t *)v22, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v23, -1, -1);
      uint64_t v30 = v44;
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v30, -1, -1);
      MEMORY[0x25A2B6460](v22, -1, -1);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
    }
  }
  else
  {
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Log.client);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v12, a2, v6);
    id v32 = a3;
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      os_log_t v43 = (os_log_t)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v46 = v44;
      *(_DWORD *)uint64_t v35 = 136315394;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v12, v6);
      *(_WORD *)(v35 + 12) = 2112;
      uint64_t v45 = (uint64_t)v32;
      id v38 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v39 = v43;
      v43->Class isa = (Class)v32;

      _os_log_impl(&dword_257351000, v33, v34, "Successfully released invitation: %s - %@", (uint8_t *)v35, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v39, -1, -1);
      uint64_t v40 = v44;
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v40, -1, -1);
      MEMORY[0x25A2B6460](v35, -1, -1);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v12, v6);
    }
  }
}

uint64_t NearbyInvitation.__deallocating_deinit()
{
  NearbyInvitation.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t NearbyInvitation.description.getter()
{
  _StringGuts.grow(_:)(28);
  uint64_t v1 = _typeName(_:qualified:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = v1;
  v2._countAndFlagsBits = 1029990688;
  v2._object = (void *)0xE400000000000000;
  String.append(_:)(v2);
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3D656D616E20;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  uint64_t v5 = *(void *)(v0 + direct field offset for NearbyInvitation.displayName);
  uint64_t v6 = *(void **)(v0 + direct field offset for NearbyInvitation.displayName + 8);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x666E4974736F6820;
  v8._object = (void *)0xEA00000000003D6FLL;
  String.append(_:)(v8);
  id v9 = *(id *)(v0 + direct field offset for NearbyInvitation.invitationHostInfo);
  id v10 = objc_msgSend(v9, sel_description);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);

  swift_bridgeObjectRelease();
  return v16;
}

uint64_t NearbyInvitation.markUsed()()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](NearbyInvitation.markUsed(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t type;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  Swift::String v23 = v0;
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  Swift::String v3 = v0[5];
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Log.client);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.default.getter();
  Swift::String v7 = os_log_type_enabled(v5, v6);
  id v9 = v0[6];
  Swift::String v8 = v0[7];
  id v10 = v0[4];
  uint64_t v11 = v0[5];
  if (v7)
  {
    int v21 = v0[7];
    os_log_type_t type = v6;
    uint64_t v12 = swift_slowAlloc();
    os_log_type_t v20 = swift_slowAlloc();
    uint64_t v22 = v20;
    *(_DWORD *)uint64_t v12 = 136315394;
    id v13 = (*(uint64_t (**)(void))(*(void *)v10 + 248))();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v12 + 12) = 2080;
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646573556B72616DLL, 0xEA00000000002928, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_257351000, v5, type, "%s %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v20, -1, -1);
    MEMORY[0x25A2B6460](v12, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v21, v11);
  }
  else
  {
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v11);
  }
  id v15 = (void *)swift_task_alloc();
  v0[8] = v15;
  *id v15 = v0;
  v15[1] = NearbyInvitation.markUsed();
  uint64_t v16 = v0[4];
  id v17 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA2360](v15, 0, 0, 0x646573556B72616DLL, 0xEA00000000002928, partial apply for closure #1 in NearbyInvitation.markUsed(), v16, v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = NearbyInvitation.markUsed();
  }
  else {
    uint64_t v2 = NearbyInvitation.markUsed();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in NearbyInvitation.markUsed()(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v19 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(a2 + direct field offset for NearbyInvitation.controller);
  uint64_t v11 = *(void **)(a2 + direct field offset for NearbyInvitation.invitationHostInfo);
  uint64_t v12 = a2 + direct field offset for NearbyInvitation.id;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v20, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v12, v3);
  unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v14 = (v9 + *(unsigned __int8 *)(v4 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v15 = (v5 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v16 + v13, v10, v7);
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v16 + v14, v6, v19);
  *(void *)(v16 + v15) = v11;
  NearbyInvitationsController.markInvitationUsed(_:response:)(v11, (uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitation.markUsed(), v16);
  return swift_release();
}

uint64_t closure #1 in closure #1 in NearbyInvitation.markUsed()(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v27 = (uint64_t)a1;
    id v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (one-time initialization token for client != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.client);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
    id v14 = a4;
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v27 = v25;
      *(_DWORD *)uint64_t v17 = 136315394;
      v23[1] = v17 + 4;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      *(_WORD *)(v17 + 12) = 2112;
      uint64_t v26 = (uint64_t)v14;
      id v20 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v21 = v24;
      *uint64_t v24 = v14;

      _os_log_impl(&dword_257351000, v15, v16, "Successfully marked invitation: %s - %@ as used.", (uint8_t *)v17, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v21, -1, -1);
      uint64_t v22 = v25;
      swift_arrayDestroy();
      MEMORY[0x25A2B6460](v22, -1, -1);
      MEMORY[0x25A2B6460](v17, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t NearbyInvitation.approve(_:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  unsigned char v4[8] = a1;
  v4[9] = a2;
  return MEMORY[0x270FA2498](NearbyInvitation.approve(_:userInfo:), 0, 0);
}

uint64_t NearbyInvitation.approve(_:userInfo:)()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  long long v7 = *(_OWORD *)(v0 + 64);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 96) = v3;
  *(void *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v7;
  *(void *)(v3 + 40) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v4;
  *uint64_t v4 = v0;
  uint64_t v5 = MEMORY[0x263F8EE60];
  v4[1] = NearbyInvitation.approve(_:userInfo:);
  return MEMORY[0x270FA2360](v4, 0, 0, 0xD000000000000014, 0x80000002573C37C0, partial apply for closure #1 in NearbyInvitation.approve(_:userInfo:), v3, v5 + 8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NearbyInvitation.approve(_:userInfo:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NearbyInvitation.approve(_:userInfo:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  uint64_t v20;

  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[15] = __swift_project_value_buffer(v1, (uint64_t)static Log.client);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_257351000, v2, v3, "Successfully approved, now telling sourceProvider to add the member", v4, 2u);
    MEMORY[0x25A2B6460](v4, -1, -1);
  }
  uint64_t v5 = v0[11];
  uint64_t v6 = (uint64_t *)v0[8];

  long long v7 = *v6;
  uint64_t v8 = (uint64_t *)(*v6 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_remotePseudonym);
  id v10 = *v8;
  uint64_t v9 = v8[1];
  v0[16] = v9;
  id v11 = (uint64_t *)(v7 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_destinationToken);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  v0[17] = v12;
  id v14 = (void *)(v5 + direct field offset for NearbyInvitation.sourceProvider);
  unint64_t v15 = *(void *)(v5 + direct field offset for NearbyInvitation.sourceProvider + 24);
  os_log_type_t v16 = v14[4];
  __swift_project_boxed_opaque_existential_1(v14, v15);
  v0[2] = v10;
  v0[3] = v9;
  v0[4] = v13;
  v0[5] = v12;
  unint64_t v19 = (uint64_t (*)(void *, uint64_t, uint64_t))(*(void *)(v16 + 24) + **(int **)(v16 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = (void *)swift_task_alloc();
  v0[18] = v17;
  *uint64_t v17 = v0;
  v17[1] = NearbyInvitation.approve(_:userInfo:);
  return v19(v0 + 2, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NearbyInvitation.approve(_:userInfo:);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = NearbyInvitation.approve(_:userInfo:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_257351000, v1, v2, "SourceProvider successfully handled adding the approvedMember", v3, 2u);
    MEMORY[0x25A2B6460](v3, -1, -1);
  }

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  void *v16;
  uint64_t v17;

  os_log_type_t v16 = v0;
  uint64_t v1 = (void *)v0[19];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[19];
    long long v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)long long v7 = 136315138;
    unint64_t v15 = v8;
    v0[6] = v6;
    uint64_t v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    id v10 = String.init<A>(reflecting:)();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_257351000, v4, v5, "SourceProvider failed to handle adding the approvedMember, error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A2B6460](v8, -1, -1);
    MEMORY[0x25A2B6460](v7, -1, -1);
  }
  else
  {
    uint64_t v12 = (void *)v0[19];
  }
  swift_willThrow();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

void closure #1 in NearbyInvitation.approve(_:userInfo:)(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, unint64_t a5)
{
  unint64_t v33 = a5;
  uint64_t v31 = a4;
  uint64_t v35 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  id v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *(void *)(a2 + direct field offset for NearbyInvitation.controller);
  id v32 = *a3;
  unint64_t v15 = (void *)(a2 + direct field offset for NearbyInvitation.sourceProvider);
  uint64_t v17 = *(void *)(a2 + direct field offset for NearbyInvitation.sourceProvider + 24);
  uint64_t v16 = v15[4];
  __swift_project_boxed_opaque_existential_1(v15, v17);
  (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v17, v16);
  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v21 = (objc_class *)type metadata accessor for InvitationJoinResponse();
  uint64_t v22 = (char *)objc_allocWithZone(v21);
  Swift::String v23 = (uint64_t *)&v22[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_sessionIdentifier];
  *Swift::String v23 = v18;
  v23[1] = v20;
  *(void *)&v22[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_memberHandles] = MEMORY[0x263F8EE78];
  uint64_t v24 = (uint64_t *)&v22[OBJC_IVAR____TtC14NearbySessions22InvitationJoinResponse_userInfo];
  uint64_t v25 = v31;
  unint64_t v26 = v33;
  *uint64_t v24 = v31;
  v24[1] = v26;
  outlined copy of Data?(v25, v26);
  v36.id receiver = v22;
  v36.Class super_class = v21;
  id v27 = objc_msgSendSuper2(&v36, sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v35, v7);
  unint64_t v28 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v29 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v29 + v28, v10, v7);
  NearbyInvitationsController.approve(pendingMember:response:completion:)(v32, v27, (uint64_t)partial apply for closure #1 in closure #1 in NearbyInvitation.approve(_:userInfo:), v29);
  swift_release();
}

uint64_t closure #1 in closure #1 in NearbyInvitation.approve(_:userInfo:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t NearbyInvitation.reject(_:)()
{
  return NearbyInvitation.reject(_:)(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyInvitation<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

id InvitationApprovalRequest.remoteInvitationData.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData);
}

uint64_t InvitationApprovalRequest.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvitationApprovalRequest.userInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo);
  outlined copy of Data?(v1, *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo + 8));
  return v1;
}

id InvitationApprovalRequest.init(remoteInvitationData:displayName:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&v5[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData] = a1;
  uint64_t v6 = &v5[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName];
  *(void *)uint64_t v6 = a2;
  *((void *)v6 + 1) = a3;
  uint64_t v7 = &v5[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo];
  *(void *)uint64_t v7 = a4;
  *((void *)v7 + 1) = a5;
  v9.id receiver = v5;
  v9.Class super_class = (Class)type metadata accessor for InvitationApprovalRequest();
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t InvitationApprovalRequest.description.getter()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  _StringGuts.grow(_:)(60);
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x80000002573C37E0;
  v4._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v4);
  id v5 = *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData);
  id v6 = objc_msgSend(v5, sel_description);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  objc_super v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);

  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x616C70736964202CLL;
  v11._object = (void *)0xEF203A656D614E79;
  String.append(_:)(v11);
  uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName);
  uint64_t v13 = *(void **)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName + 8);
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x6E4972657375202CLL;
  v15._object = (void *)0xEC000000203A6F66;
  String.append(_:)(v15);
  uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo);
  unint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo + 8);
  if (v16 >> 60 == 15)
  {
    unint64_t v18 = 0xE300000000000000;
    uint64_t v19 = 7104878;
  }
  else
  {
    outlined copy of Data._Representation(v17, v16);
    outlined copy of Data._Representation(v17, v16);
    uint64_t v19 = String.init<A>(reflecting:)();
    unint64_t v18 = v20;
  }
  unint64_t v21 = v18;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  outlined consume of Data?(v17, v16);
  v22._countAndFlagsBits = 62;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return 0;
}

uint64_t static InvitationApprovalRequest.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall InvitationApprovalRequest.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData);
  Swift::String v4 = (void *)MEMORY[0x25A2B5660](0xD000000000000014, 0x80000002573C3800);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];

  id v5 = (void *)MEMORY[0x25A2B5660](*(void *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName), *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName + 8));
  id v6 = (void *)MEMORY[0x25A2B5660](0x4E79616C70736964, 0xEB00000000656D61);
  [(objc_class *)with.super.isa encodeObject:v5 forKey:v6];

  if (*(void *)(v1 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo + 8) >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v8 = (id)MEMORY[0x25A2B5660](0x6F666E4972657375, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v8];
  swift_unknownObjectRelease();
}

uint64_t InvitationApprovalRequest.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return InvitationApprovalRequest.init(coder:)(a1);
}

uint64_t InvitationApprovalRequest.init(coder:)(void *a1)
{
  Swift::String v2 = v1;
  type metadata accessor for NearbyInvitationData(0);
  id v4 = v2;
  uint64_t v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v5)
  {
    id v6 = (void *)v5;
    type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
    uint64_t v7 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v7)
    {
      id v8 = (void *)v7;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();
    }
    a1 = v4;
  }
  else
  {
    id v6 = v4;
  }

  type metadata accessor for InvitationApprovalRequest();
  swift_deallocPartialClassInstance();
  return 0;
}

void InvitationApprovalRequest.init()()
{
}

uint64_t InvitationApprovalRequest.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0xD000000000000014;
  }
  if (a1 == 1) {
    return 0x4E79616C70736964;
  }
  return 0x6F666E4972657375;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InvitationApprovalRequest.CodingKeys()
{
  return InvitationApprovalRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InvitationApprovalRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized InvitationApprovalRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance InvitationApprovalRequest.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InvitationApprovalRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InvitationApprovalRequest.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

id InvitationApprovalRequest.__deallocating_deinit(uint64_t a1)
{
  return NearbyInvitationParameters.__deallocating_deinit(a1, type metadata accessor for InvitationApprovalRequest);
}

uint64_t InvitationApprovalRequest.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InvitationApprovalRequest.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)&long long v10 = *(void *)(v3 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData);
  char v11 = 0;
  type metadata accessor for NearbyInvitationData(0);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type NearbyInvitationData and conformance NearbyInvitationData, 255, (void (*)(uint64_t))type metadata accessor for NearbyInvitationData);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v10) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo);
    char v11 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id InvitationApprovalRequest.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return InvitationApprovalRequest.init(from:)(a1);
}

id InvitationApprovalRequest.init(from:)(void *a1)
{
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InvitationApprovalRequest.CodingKeys>);
  uint64_t v4 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys();
  uint64_t v19 = v1;
  id v8 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    char v11 = v19;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);

    type metadata accessor for InvitationApprovalRequest();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v9 = v4;
    type metadata accessor for NearbyInvitationData(0);
    char v22 = 0;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type NearbyInvitationData and conformance NearbyInvitationData, 255, (void (*)(uint64_t))type metadata accessor for NearbyInvitationData);
    uint64_t v10 = v18;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v13 = v19;
    *(void *)&v19[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_remoteInvitationData] = v21;
    LOBYTE(v21) = 1;
    uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
    Swift::String v15 = (uint64_t *)&v13[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_displayName];
    *Swift::String v15 = v14;
    v15[1] = v16;
    char v22 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v13[OBJC_IVAR____TtC14NearbySessions25InvitationApprovalRequest_userInfo] = v21;

    uint64_t v17 = (objc_class *)type metadata accessor for InvitationApprovalRequest();
    v20.id receiver = v13;
    v20.Class super_class = v17;
    id v8 = objc_msgSendSuper2(&v20, sel_init);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v10);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v8;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InvitationApprovalRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 136))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InvitationApprovalRequest()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0x80))();
}

uint64_t NearbyInvitationData.invitationID.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID, a1);
}

uint64_t NearbyInvitationData.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyInvitationData.userInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo);
  outlined copy of Data?(v1, *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo + 8));
  return v1;
}

id NearbyInvitationData.hostConnectionInfo.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo);
}

uint64_t NearbyInvitationData.sourceProviderID.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID, a1);
}

uint64_t NearbyInvitationData.sourceProviderName.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static NearbyInvitationData.Errors.== infix(_:_:)()
{
  return 1;
}

void NearbyInvitationData.Errors.hash(into:)()
{
}

Swift::Int NearbyInvitationData.Errors.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t NearbyInvitationData.encodedData.getter()
{
  uint64_t v1 = type metadata accessor for Invitation_InvitationData(0);
  MEMORY[0x270FA5388](v1);
  id v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = v0;
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, 255, (void (*)(uint64_t))type metadata accessor for Invitation_InvitationData);
  static Message.with(_:)();
  uint64_t v4 = Message.serializedData(partial:)();
  outlined destroy of Invitation_InvitationData((uint64_t)v3, type metadata accessor for Invitation_InvitationData);
  return v4;
}

uint64_t closure #1 in NearbyInvitationData.encodedData.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = UUID.data.getter();
  uint64_t v10 = v9;
  outlined consume of Data._Representation(*a1, a1[1]);
  *a1 = v8;
  a1[1] = v10;
  uint64_t v12 = *(void *)(a2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName);
  uint64_t v11 = *(void *)(a2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName + 8);
  swift_bridgeObjectRetain();
  uint64_t v13 = swift_bridgeObjectRelease();
  a1[2] = v12;
  a1[3] = v11;
  unint64_t v14 = *(void *)(a2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo + 8);
  if (v14 >> 60 != 15)
  {
    uint64_t v15 = *(void *)(a2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo);
    uint64_t v16 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 28));
    uint64_t v26 = v4;
    uint64_t v17 = v5;
    uint64_t v25 = v7;
    uint64_t v18 = *v16;
    unint64_t v19 = v16[1];
    outlined copy of Data._Representation(v15, v14);
    uint64_t v20 = v18;
    uint64_t v5 = v17;
    uint64_t v4 = v26;
    unint64_t v21 = v19;
    uint64_t v7 = v25;
    uint64_t v13 = outlined consume of Data?(v20, v21);
    *uint64_t v16 = v15;
    v16[1] = v14;
  }
  MEMORY[0x270FA5388](v13);
  *(&v24 - 2) = a2;
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type Invitation_HostConnectionInfo and conformance Invitation_HostConnectionInfo, 255, (void (*)(uint64_t))type metadata accessor for Invitation_HostConnectionInfo);
  static Message.with(_:)();
  uint64_t v22 = (uint64_t)a1 + *(int *)(type metadata accessor for Invitation_InvitationData(0) + 32);
  outlined destroy of Invitation_HostConnectionInfo?(v22, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  outlined init with take of Invitation_HostConnectionInfo((uint64_t)v7, v22);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, v4);
}

uint64_t closure #1 in closure #1 in NearbyInvitationData.encodedData.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo);
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey);
  unint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey + 8);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  outlined copy of Data._Representation(v4, v5);
  outlined consume of Data._Representation(v6, v7);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v9 = *(void *)(v3 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
  uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  a1[2] = v9;
  a1[3] = v8;
  return result;
}

id NearbyInvitationJoinRequestMetadata.__allocating_init(publicKey:pseudonym:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return InvitationBlob.__allocating_init(invitationID:dataBlob:)(a1, a2, a3, a4, &OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey, &OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
}

id InvitationBlob.__allocating_init(invitationID:dataBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v13 = (char *)objc_allocWithZone(v6);
  unint64_t v14 = &v13[*a5];
  *(void *)unint64_t v14 = a1;
  *((void *)v14 + 1) = a2;
  uint64_t v15 = &v13[*a6];
  *(void *)uint64_t v15 = a3;
  *((void *)v15 + 1) = a4;
  v17.id receiver = v13;
  v17.Class super_class = v6;
  return objc_msgSendSuper2(&v17, sel_init);
}

id NearbyInvitationData.__allocating_init(invitationID:displayName:userInfo:hostConnectionInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  id v13 = objc_allocWithZone(v6);
  id v14 = specialized NearbyInvitationData.init(invitationID:displayName:userInfo:hostConnectionInfo:)(a1, a2, a3, a4, a5, a6);

  outlined consume of Data?(a4, a5);
  return v14;
}

id NearbyInvitationData.init<A>(from:)(uint64_t a1)
{
  id v1 = specialized NearbyInvitationData.init<A>(from:)(a1);
  swift_release();
  return v1;
}

id NearbyInvitationData.__allocating_init(invitationID:displayName:userInfo:hostConnectionInfo:sourceProviderID:sourceProviderName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  id v14 = (char *)objc_allocWithZone(v9);
  uint64_t v15 = &v14[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID];
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v15, a1, v16);
  unint64_t v19 = &v14[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
  *(void *)unint64_t v19 = a2;
  *((void *)v19 + 1) = a3;
  uint64_t v20 = &v14[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo];
  *(void *)uint64_t v20 = a4;
  *((void *)v20 + 1) = a5;
  *(void *)&v14[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo] = a6;
  v18(&v14[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID], a7, v16);
  unint64_t v21 = &v14[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
  *(void *)unint64_t v21 = a8;
  *((void *)v21 + 1) = a9;
  v30.id receiver = v14;
  v30.Class super_class = v10;
  id v22 = objc_msgSendSuper2(&v30, sel_init);
  Swift::String v23 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v23(a7, v16);
  v23(a1, v16);
  return v22;
}

id NearbyInvitationData.init(invitationID:displayName:userInfo:hostConnectionInfo:sourceProviderID:sourceProviderName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v14 = &v9[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID];
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17(v14, a1, v15);
  uint64_t v18 = &v9[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
  *(void *)uint64_t v18 = a2;
  *((void *)v18 + 1) = a3;
  unint64_t v19 = &v9[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo];
  *(void *)unint64_t v19 = a4;
  *((void *)v19 + 1) = a5;
  *(void *)&v9[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo] = a6;
  v17(&v9[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID], a7, v15);
  uint64_t v20 = &v9[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
  *(void *)uint64_t v20 = a8;
  *((void *)v20 + 1) = a9;
  v28.id receiver = v9;
  v28.Class super_class = (Class)type metadata accessor for NearbyInvitationData(0);
  id v21 = objc_msgSendSuper2(&v28, sel_init);
  id v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v22(a7, v15);
  v22(a1, v15);
  return v21;
}

id NearbyInvitationData.init(invitationID:displayName:userInfo:hostConnectionInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  id v9 = specialized NearbyInvitationData.init(invitationID:displayName:userInfo:hostConnectionInfo:)(a1, a2, a3, a4, a5, a6);

  outlined consume of Data?(a4, a5);
  return v9;
}

uint64_t NearbyInvitationData.description.getter()
{
  swift_getObjectType();
  _StringGuts.grow(_:)(75);
  v1._countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x74617469766E6920;
  v3._object = (void *)0xEF203A44496E6F69;
  String.append(_:)(v3);
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x79616C7073696420;
  v5._object = (void *)0xEE00203A656D614ELL;
  String.append(_:)(v5);
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName);
  unint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName + 8);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x6E4972657375202CLL;
  v9._object = (void *)0xEC000000203A6F66;
  String.append(_:)(v9);
  uint64_t v11 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo);
  unint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo + 8);
  if (v10 >> 60 == 15)
  {
    unint64_t v12 = 0xE300000000000000;
    uint64_t v13 = 7104878;
  }
  else
  {
    outlined copy of Data._Representation(v11, v10);
    outlined copy of Data._Representation(v11, v10);
    uint64_t v13 = String.init<A>(reflecting:)();
    unint64_t v12 = v14;
  }
  unint64_t v15 = v12;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  outlined consume of Data?(v11, v10);
  v16._object = (void *)0x80000002573C3850;
  v16._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v16);
  id v17 = *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo);
  id v18 = objc_msgSend(v17, sel_description);
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v21 = v20;

  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);

  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 62;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  return 0;
}

uint64_t static NearbyInvitationData.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyInvitationData.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Swift::String v5 = (void *)MEMORY[0x25A2B5660](0x6974617469766E69, 0xEC00000044496E6FLL);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v5];

  uint64_t v6 = (void *)MEMORY[0x25A2B5660](*(void *)(v2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName), *(void *)(v2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName + 8));
  unint64_t v7 = (void *)MEMORY[0x25A2B5660](0x4E79616C70736964, 0xEB00000000656D61);
  [(objc_class *)with.super.isa encodeObject:v6 forKey:v7];

  if (*(void *)(v2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo + 8) >> 60 == 15) {
    Class v8 = 0;
  }
  else {
    Class v8 = Data._bridgeToObjectiveC()().super.isa;
  }
  Swift::String v9 = (void *)MEMORY[0x25A2B5660](0x6F666E4972657375, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:v8 forKey:v9];
  swift_unknownObjectRelease();

  uint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo);
  id v11 = (id)MEMORY[0x25A2B5660](0xD000000000000012, 0x80000002573C2A80);
  [(objc_class *)with.super.isa encodeObject:v10 forKey:v11];
}

id NearbyInvitationData.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbyInvitationData.init(coder:)(a1);
}

id NearbyInvitationData.init(coder:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSUUID);
  Class v8 = v2;
  uint64_t v9 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v9) {
    goto LABEL_8;
  }
  uint64_t v10 = (void *)v9;
  type metadata accessor for NSSet(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  uint64_t v11 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v11
    || (unint64_t v12 = (void *)v11,
        long long v31 = 0uLL,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v12,
        (uint64_t v13 = *((void *)&v31 + 1)) == 0))
  {

LABEL_8:
LABEL_9:
    type metadata accessor for NearbyInvitationData(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v14 = v31;
  type metadata accessor for NearbyInvitationJoinRequestMetadata();
  uint64_t v15 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v15)
  {

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  Swift::String v16 = (void *)v15;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v17 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v17(&v8[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID], v7, v4);
  id v18 = &v8[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
  *(void *)id v18 = v14;
  *((void *)v18 + 1) = v13;
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSData);
  uint64_t v19 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v19)
  {
    uint64_t v20 = (void *)v19;
    long long v31 = xmmword_2573BF070;
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();

    long long v21 = v31;
  }
  else
  {
    long long v21 = xmmword_2573BF070;
  }
  *(_OWORD *)&v8[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo] = v21;
  *(void *)&v8[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo] = v16;
  id v24 = v16;
  UUID.init()();
  v17(&v8[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID], v7, v4);
  uint64_t v25 = specialized static InvitationSourceProvider.providerIdentifier.getter();
  uint64_t v27 = v26;

  objc_super v28 = (uint64_t *)&v8[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
  *objc_super v28 = v25;
  v28[1] = v27;

  uint64_t v29 = (objc_class *)type metadata accessor for NearbyInvitationData(0);
  v30.id receiver = v8;
  v30.Class super_class = v29;
  id v22 = objc_msgSendSuper2(&v30, sel_init);

  return v22;
}

void NearbyInvitationData.init()()
{
}

unint64_t NearbyInvitationData.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4E79616C70736964;
      break;
    case 2:
      unint64_t result = 0x6F666E4972657375;
      break;
    case 3:
    case 5:
      return result;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      unint64_t result = 0x6974617469766E69;
      break;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance NearbyInvitationData.CodingKeys()
{
  return NearbyInvitationData.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NearbyInvitationData.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NearbyInvitationData.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NearbyInvitationData.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyInvitationData.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyInvitationData.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

id NearbyInvitationData.__deallocating_deinit()
{
  return NearbyInvitationParameters.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for NearbyInvitationData);
}

uint64_t NearbyInvitationData.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NearbyInvitationData.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Class v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo);
    char v12 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v13 = *(void *)(v3 + OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo);
    char v12 = 3;
    type metadata accessor for NearbyInvitationJoinRequestMetadata();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata and conformance NearbyInvitationJoinRequestMetadata, v9, (void (*)(uint64_t))type metadata accessor for NearbyInvitationJoinRequestMetadata);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

char *NearbyInvitationData.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbyInvitationData.init(from:)(a1);
}

char *NearbyInvitationData.init(from:)(void *a1)
{
  id v3 = v1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  Class v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v33 = (char *)v30 - v9;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<NearbyInvitationData.CodingKeys>);
  uint64_t v10 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  char v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  objc_super v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys();
  uint64_t v14 = v3;
  uint64_t v34 = v12;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);

    type metadata accessor for NearbyInvitationData(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v15 = v8;
    uint64_t v16 = v10;
    uint64_t v17 = v31;
    LOBYTE(v38) = 0;
    uint64_t v18 = _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
    uint64_t v19 = v32;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v30[1] = v18;
    long long v21 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v21(&v14[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID], v33, v19);
    LOBYTE(v38) = 1;
    uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
    Swift::String v23 = (uint64_t *)&v14[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
    *Swift::String v23 = v22;
    v23[1] = v24;
    char v39 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    unint64_t v33 = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v14[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo] = v38;
    type metadata accessor for NearbyInvitationJoinRequestMetadata();
    char v39 = 3;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata and conformance NearbyInvitationJoinRequestMetadata, v25, (void (*)(uint64_t))type metadata accessor for NearbyInvitationJoinRequestMetadata);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v14[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo] = v38;
    LOBYTE(v38) = 4;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21(&v14[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID], v15, v19);
    LOBYTE(v38) = 5;
    uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v27 = (uint64_t *)&v14[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
    *uint64_t v27 = v26;
    v27[1] = v28;

    uint64_t v29 = (objc_class *)type metadata accessor for NearbyInvitationData(0);
    v37.id receiver = v14;
    v37.Class super_class = v29;
    uint64_t v14 = (char *)objc_msgSendSuper2(&v37, sel_init);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v34, v35);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
  }
  return v14;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NearbyInvitationData@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 184))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NearbyInvitationData()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0xB0))();
}

unint64_t static NearbyAdvertisement.meContactID.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t NearbyAdvertisement.scannerID.getter@<X0>(uint64_t a1@<X8>)
{
  return NearbyGroupCreationRequest.id.getter(&OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_scannerID, a1);
}

uint64_t NearbyAdvertisement.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NearbyAdvertisement.activityType.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType);
}

uint64_t NearbyAdvertisement.contactID.getter()
{
  return InvitationJoinResponse.sessionIdentifier.getter(&OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID);
}

uint64_t NearbyAdvertisement.handle.getter()
{
  return InvitationJoinResponse.sessionIdentifier.getter(&OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle);
}

uint64_t NearbyAdvertisement.displayName.getter()
{
  return InvitationJoinResponse.sessionIdentifier.getter(&OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName);
}

uint64_t InvitationJoinResponse.sessionIdentifier.getter(void *a1)
{
  uint64_t v2 = *(void *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t NearbyAdvertisement.deviceColor.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceColor;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t NearbyAdvertisement.deviceColor.setter(uint64_t a1, char a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceColor;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = a2 & 1;
  return result;
}

uint64_t (*NearbyAdvertisement.deviceColor.modify())()
{
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyAdvertisement.deviceModel.getter()
{
  return NearbyAdvertisement.deviceModel.getter(&OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceModel);
}

uint64_t NearbyAdvertisement.deviceModel.setter(uint64_t a1, uint64_t a2)
{
  return NearbyAdvertisement.deviceModel.setter(a1, a2, &OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceModel);
}

uint64_t (*NearbyAdvertisement.deviceModel.modify())()
{
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyAdvertisement.deviceID.getter()
{
  return NearbyAdvertisement.deviceModel.getter(&OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceID);
}

uint64_t NearbyAdvertisement.deviceModel.getter(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t NearbyAdvertisement.deviceID.setter(uint64_t a1, uint64_t a2)
{
  return NearbyAdvertisement.deviceModel.setter(a1, a2, &OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceID);
}

uint64_t NearbyAdvertisement.deviceModel.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)(v3 + *a3);
  swift_beginAccess();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*NearbyAdvertisement.deviceID.modify())()
{
  return static NearbyGroupInterface.identity.modify;
}

uint64_t NearbyAdvertisement.userInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo);
  outlined copy of Data?(v1, *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8));
  return v1;
}

id NearbyAdvertisement.dataSource.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource);
  if (*(void *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource))
  {
    id v2 = *(id *)(v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource);
  }
  else
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v3 = (void *)static NearbyInvitationServiceClient.shared;
    *uint64_t v1 = static NearbyInvitationServiceClient.shared;
    v1[1] = &protocol witness table for NearbyInvitationServiceClient;
    id v2 = v3;
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v2;
}

uint64_t NearbyAdvertisement.dataSource.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*NearbyAdvertisement.dataSource.modify(id *a1))(uint64_t a1)
{
  a1[2] = v1;
  *a1 = NearbyAdvertisement.dataSource.getter();
  a1[1] = v3;
  return NearbyAdvertisement.dataSource.modify;
}

uint64_t NearbyAdvertisement.dataSource.modify(uint64_t a1)
{
  *(_OWORD *)(*(void *)(a1 + 16) + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource) = *(_OWORD *)a1;
  return swift_unknownObjectRelease();
}

id NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  id v18 = specialized NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14 & 1, a15, a16, a17, a18);
  outlined consume of Data?(a11, a12);
  return v18;
}

uint64_t NearbyAdvertisement.approve(with:)(void *a1)
{
  uint64_t v3 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0xF0))();
  uint64_t v5 = v4;
  uint64_t v6 = (*(uint64_t (**)(void))((*v3 & *a1) + 0x80))();
  unint64_t v8 = v7;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(v5 + 176))(v1, v6, v8, ObjectType, v5);
  outlined consume of Data._Representation(v6, v8);
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall NearbyAdvertisement.reject()()
{
  (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *, uint64_t, uint64_t))(v2 + 184))(v0, ObjectType, v2);
  swift_unknownObjectRelease();
}

uint64_t static NearbyAdvertisement.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyAdvertisement.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v5 = (void *)MEMORY[0x25A2B5660](0x4972656E6E616373, 0xE900000000000044);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v5];

  uint64_t v6 = (void *)MEMORY[0x25A2B5660](*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier), *(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier + 8));
  unint64_t v7 = (void *)MEMORY[0x25A2B5660](0x696669746E656469, 0xEA00000000007265);
  [(objc_class *)with.super.isa encodeObject:v6 forKey:v7];

  Class v8 = UInt32._bridgeToObjectiveC()().super.super.isa;
  uint64_t v9 = (void *)MEMORY[0x25A2B5660](0x7974697669746361, 0xEC00000065707954);
  [(objc_class *)with.super.isa encodeObject:v8 forKey:v9];

  if (*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID + 8)) {
    uint64_t v10 = MEMORY[0x25A2B5660](*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID));
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (void *)MEMORY[0x25A2B5660](0x49746361746E6F63, 0xE900000000000044);
  [(objc_class *)with.super.isa encodeObject:v10 forKey:v11];
  swift_unknownObjectRelease();

  if (*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8) >> 60 == 15) {
    Class v12 = 0;
  }
  else {
    Class v12 = Data._bridgeToObjectiveC()().super.isa;
  }
  uint64_t v13 = (void *)MEMORY[0x25A2B5660](0x6F666E4972657375, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:v12 forKey:v13];
  swift_unknownObjectRelease();

  if (*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle + 8)) {
    uint64_t v14 = MEMORY[0x25A2B5660](*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle));
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = (void *)MEMORY[0x25A2B5660](0x656C646E6168, 0xE600000000000000);
  [(objc_class *)with.super.isa encodeObject:v14 forKey:v15];
  swift_unknownObjectRelease();

  if (*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName + 8)) {
    uint64_t v16 = MEMORY[0x25A2B5660](*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName));
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = (void *)MEMORY[0x25A2B5660](0x4E79616C70736964, 0xEB00000000656D61);
  [(objc_class *)with.super.isa encodeObject:v16 forKey:v17];
  swift_unknownObjectRelease();

  id v18 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0xA8))();
  if (v19) {
    v20.super.super.Class isa = 0;
  }
  else {
    v20.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  }
  long long v21 = (void *)MEMORY[0x25A2B5660](0x6F43656369766564, 0xEB00000000726F6CLL);
  [(objc_class *)with.super.isa encodeObject:v20.super.super.isa forKey:v21];
  swift_unknownObjectRelease();

  uint64_t v22 = (*(uint64_t (**)(void))((*v18 & *v2) + 0xC0))();
  if (v23)
  {
    uint64_t v24 = MEMORY[0x25A2B5660](v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t v25 = (void *)MEMORY[0x25A2B5660](0x6F4D656369766564, 0xEB000000006C6564);
  [(objc_class *)with.super.isa encodeObject:v24 forKey:v25];
  swift_unknownObjectRelease();

  uint64_t v26 = (*(uint64_t (**)(void))((*v18 & *v2) + 0xD8))();
  if (v27)
  {
    uint64_t v28 = MEMORY[0x25A2B5660](v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = 0;
  }
  id v29 = (id)MEMORY[0x25A2B5660](0x4449656369766564, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:v28 forKey:v29];
  swift_unknownObjectRelease();
}

id NearbyAdvertisement.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbyAdvertisement.init(coder:)(a1);
}

id NearbyAdvertisement.init(coder:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v73 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceColor];
  *(void *)uint64_t v9 = 0;
  uint64_t v72 = v9;
  v9[8] = 1;
  uint64_t v10 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceModel];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  uint64_t v11 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceID];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  uint64_t v74 = v11;
  Class v12 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource];
  *(void *)Class v12 = 0;
  *((void *)v12 + 1) = 0;
  uint64_t v13 = v1;
  uint64_t v14 = (void *)MEMORY[0x25A2B5660](0x4972656E6E616373, 0xE900000000000044);
  id v15 = objc_msgSend(a1, sel_decodeObjectForKey_, v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v82 = 0u;
    long long v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (!v85)
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    goto LABEL_9;
  }
  int v16 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, v16 ^ 1u, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
LABEL_9:

    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    type metadata accessor for NearbyAdvertisement(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v73, v5, v6);
  uint64_t v17 = (void *)MEMORY[0x25A2B5660](0x696669746E656469, 0xEA00000000007265);
  id v18 = objc_msgSend(a1, sel_decodeObjectForKey_, v17);

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v82 = 0u;
    long long v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (!v85)
  {

    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
LABEL_17:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v73, v6);
    goto LABEL_18;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_17;
  }
  uint64_t v70 = v80;
  unint64_t v71 = v81;
  char v19 = (void *)MEMORY[0x25A2B5660](0x7974697669746361, 0xEC00000065707954);
  id v20 = objc_msgSend(a1, sel_decodeObjectForKey_, v19);

  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v82 = 0u;
    long long v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (!v85)
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    goto LABEL_26;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_26:
    int v23 = 0;
    goto LABEL_27;
  }
  int v23 = v80;
  if (v80 >= 2)
  {

    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
LABEL_27:
  uint64_t v24 = (void *)MEMORY[0x25A2B5660](0x49746361746E6F63, 0xE900000000000044);
  id v25 = objc_msgSend(a1, sel_decodeObjectForKey_, v24);

  if (v25)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v82 = 0u;
    long long v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  uint64_t v26 = a1;
  if (v85)
  {
    int v27 = swift_dynamicCast();
    if (v27) {
      uint64_t v28 = v80;
    }
    else {
      uint64_t v28 = 0;
    }
    if (v27) {
      unint64_t v29 = v81;
    }
    else {
      unint64_t v29 = 0;
    }
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    uint64_t v28 = 0;
    unint64_t v29 = 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_scannerID], v73, v6);
  objc_super v30 = &v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier];
  unint64_t v31 = v71;
  *(void *)objc_super v30 = v70;
  *((void *)v30 + 1) = v31;
  *(_DWORD *)&v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType] = v23;
  uint64_t v32 = &v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID];
  *(void *)uint64_t v32 = v28;
  *((void *)v32 + 1) = v29;
  unint64_t v33 = (void *)MEMORY[0x25A2B5660](0x6F666E4972657375, 0xE800000000000000);
  id v34 = objc_msgSend(a1, sel_decodeObjectForKey_, v33);

  if (v34)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v82 = 0u;
    long long v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (v85)
  {
    int v35 = swift_dynamicCast();
    uint64_t v36 = v80;
    unint64_t v37 = v81;
    if (!v35)
    {
      uint64_t v36 = 0;
      unint64_t v37 = 0xF000000000000000;
    }
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    uint64_t v36 = 0;
    unint64_t v37 = 0xF000000000000000;
  }
  long long v38 = &v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo];
  *(void *)long long v38 = v36;
  *((void *)v38 + 1) = v37;
  char v39 = (void *)MEMORY[0x25A2B5660](0x656C646E6168, 0xE600000000000000);
  id v40 = objc_msgSend(a1, sel_decodeObjectForKey_, v39);

  if (v40)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v82 = 0u;
    long long v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (v85)
  {
    int v41 = swift_dynamicCast();
    uint64_t v42 = v80;
    unint64_t v43 = v81;
    if (!v41)
    {
      uint64_t v42 = 0;
      unint64_t v43 = 0;
    }
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    uint64_t v42 = 0;
    unint64_t v43 = 0;
  }
  uint64_t v44 = &v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle];
  *(void *)uint64_t v44 = v42;
  *((void *)v44 + 1) = v43;
  uint64_t v45 = (void *)MEMORY[0x25A2B5660](0x4E79616C70736964, 0xEB00000000656D61);
  id v46 = objc_msgSend(a1, sel_decodeObjectForKey_, v45);

  if (v46)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v82 = 0u;
    long long v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (v85)
  {
    int v47 = swift_dynamicCast();
    uint64_t v48 = v80;
    unint64_t v49 = v81;
    if (!v47)
    {
      uint64_t v48 = 0;
      unint64_t v49 = 0;
    }
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    uint64_t v48 = 0;
    unint64_t v49 = 0;
  }
  uint64_t v50 = &v13[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName];
  *(void *)uint64_t v50 = v48;
  *((void *)v50 + 1) = v49;
  unint64_t v51 = (void *)MEMORY[0x25A2B5660](0x6F43656369766564, 0xEB00000000726F6CLL);
  id v52 = objc_msgSend(a1, sel_decodeObjectForKey_, v51);

  if (v52)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v82 = 0u;
    long long v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (v85)
  {
    int v53 = swift_dynamicCast();
    if (v53) {
      uint64_t v54 = v80;
    }
    else {
      uint64_t v54 = 0;
    }
    char v55 = v53 ^ 1;
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    uint64_t v54 = 0;
    char v55 = 1;
  }
  uint64_t v56 = v72;
  swift_beginAccess();
  *(void *)uint64_t v56 = v54;
  v56[8] = v55;
  uint64_t v57 = (void *)MEMORY[0x25A2B5660](0x6F4D656369766564, 0xEB000000006C6564);
  id v58 = objc_msgSend(a1, sel_decodeObjectForKey_, v57);

  if (v58)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v82 = 0u;
    long long v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (v85)
  {
    int v59 = swift_dynamicCast();
    if (v59) {
      uint64_t v60 = v78;
    }
    else {
      uint64_t v60 = 0;
    }
    if (v59) {
      uint64_t v61 = v79;
    }
    else {
      uint64_t v61 = 0;
    }
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    uint64_t v60 = 0;
    uint64_t v61 = 0;
  }
  swift_beginAccess();
  *(void *)uint64_t v10 = v60;
  *((void *)v10 + 1) = v61;
  swift_bridgeObjectRelease();
  uint64_t v62 = (void *)MEMORY[0x25A2B5660](0x4449656369766564, 0xE800000000000000);
  id v63 = objc_msgSend(a1, sel_decodeObjectForKey_, v62);

  if (v63)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v73, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v73, v6);
    long long v82 = 0u;
    long long v83 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v82, (uint64_t)v84);
  if (v85)
  {
    int v64 = swift_dynamicCast();
    if (v64) {
      uint64_t v65 = v75;
    }
    else {
      uint64_t v65 = 0;
    }
    if (v64) {
      uint64_t v66 = v76;
    }
    else {
      uint64_t v66 = 0;
    }
  }
  else
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v84, &demangling cache variable for type metadata for Any?);
    uint64_t v65 = 0;
    uint64_t v66 = 0;
  }
  long long v67 = v74;
  swift_beginAccess();
  *(void *)long long v67 = v65;
  *((void *)v67 + 1) = v66;

  swift_bridgeObjectRelease();
  id v68 = (objc_class *)type metadata accessor for NearbyAdvertisement(0);
  v77.id receiver = v13;
  v77.Class super_class = v68;
  id v21 = objc_msgSendSuper2(&v77, sel_init);

  return v21;
}

uint64_t NearbyAdvertisement.description.getter()
{
  uint64_t v1 = 7104878;
  swift_getObjectType();
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  uint64_t v39 = 60;
  unint64_t v40 = 0xE100000000000000;
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 8250;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier);
  uint64_t v5 = *(void **)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier + 8);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x61746E6F63202D20;
  v7._object = (void *)0xEC000000203A7463;
  String.append(_:)(v7);
  uint64_t v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID + 8);
  if (v8)
  {
    v38._countAndFlagsBits = *(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID);
    v38._object = v8;
    swift_bridgeObjectRetain_n();
    uint64_t v9 = String.init<A>(reflecting:)();
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v11 = 0xE300000000000000;
    uint64_t v9 = 7104878;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x3A656C646E616820;
  v13._object = (void *)0xE900000000000020;
  String.append(_:)(v13);
  uint64_t v14 = *(void **)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle + 8);
  if (v14)
  {
    v38._countAndFlagsBits = *(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle);
    v38._object = v14;
    swift_bridgeObjectRetain_n();
    uint64_t v15 = String.init<A>(reflecting:)();
    unint64_t v17 = v16;
  }
  else
  {
    unint64_t v17 = 0xE300000000000000;
    uint64_t v15 = 7104878;
  }
  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x79616C7073696420;
  v19._object = (void *)0xEE00203A656D614ELL;
  String.append(_:)(v19);
  id v20 = *(void **)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName + 8);
  if (v20)
  {
    v38._countAndFlagsBits = *(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName);
    v38._object = v20;
    swift_bridgeObjectRetain_n();
    uint64_t v1 = String.init<A>(reflecting:)();
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v22 = (void *)0xE300000000000000;
  }
  v23._countAndFlagsBits = v1;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  uint64_t v24 = swift_bridgeObjectRelease();
  id v25 = (void *)MEMORY[0x263F8EED0];
  uint64_t v26 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))(v24);
  if (v27)
  {
    uint64_t v28 = v26;
    unint64_t v29 = v27;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v38, " deviceModel: ");
    HIBYTE(v38._object) = -18;
    v30._countAndFlagsBits = v28;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    String.append(_:)(v38);
    uint64_t v26 = swift_bridgeObjectRelease();
  }
  uint64_t v31 = (*(uint64_t (**)(uint64_t))((*v25 & *v0) + 0xA8))(v26);
  if ((v32 & 1) == 0)
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v38, " deviceColor: ");
    HIBYTE(v38._object) = -18;
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    String.append(_:)(v38);
    uint64_t v31 = swift_bridgeObjectRelease();
  }
  uint64_t v34 = (*(uint64_t (**)(uint64_t))((*v25 & *v0) + 0xD8))(v31);
  if (v35)
  {
    strcpy((char *)&v38, "deviceID: ");
    BYTE3(v38._object) = 0;
    HIDWORD(v38._object) = -369098752;
    String.append(_:)(*(Swift::String *)&v34);
    swift_bridgeObjectRelease();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
  }
  v36._countAndFlagsBits = 62;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  return v39;
}

Swift::Int NearbyAdvertisement.hash.getter()
{
  Hasher.init()();
  Swift::UInt v1 = UUID.hashValue.getter();
  Hasher._combine(_:)(v1);
  Swift::UInt v2 = String.hashValue.getter();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(*(_DWORD *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType));
  if (*(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID + 8))
  {
    Swift::UInt v3 = String.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v4 = Data.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  if (*(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle + 8))
  {
    Swift::UInt v5 = String.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(void *)((char *)v0 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName + 8))
  {
    Swift::UInt v6 = String.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::String v7 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
  if (v8)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v9 = Int.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
  }
  (*(void (**)(void))((*v7 & *v0) + 0xC0))();
  if (v10)
  {
    Swift::UInt v11 = String.hashValue.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  (*(void (**)(void))((*v7 & *v0) + 0xD8))();
  if (v12)
  {
    Swift::UInt v13 = String.hashValue.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher.finalize()();
}

uint64_t NearbyAdvertisement.isEqual(_:)(uint64_t a1)
{
  Swift::UInt v2 = v1;
  outlined init with copy of (UUID, Bool)(a1, (uint64_t)v36, &demangling cache variable for type metadata for Any?);
  if (!v37)
  {
    outlined destroy of Invitation_HostConnectionInfo?((uint64_t)v36, &demangling cache variable for type metadata for Any?);
    goto LABEL_24;
  }
  type metadata accessor for NearbyAdvertisement(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_24:
    char v10 = 0;
    return v10 & 1;
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    goto LABEL_23;
  }
  BOOL v3 = *(void *)((char *)v1 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier) == *(void *)((char *)v35 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier)
    && *(void *)((char *)v1 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier + 8) == *(void *)((char *)v35 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier + 8);
  if (!v3 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *(_DWORD *)((char *)v1 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType) != *(_DWORD *)((char *)v35 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType))
  {
    goto LABEL_23;
  }
  uint64_t v4 = *(void *)((char *)v1 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID + 8);
  uint64_t v5 = *(void *)((char *)v35 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID + 8);
  if (v4)
  {
    if (!v5
      || (*(void *)((char *)v1 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID) != *(void *)((char *)v35 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID)
       || v4 != v5)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_23;
    }
  }
  else if (v5)
  {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)((char *)v1 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo);
  unint64_t v7 = *(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8);
  uint64_t v8 = *(void *)((char *)v35 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo);
  unint64_t v9 = *(void *)((char *)v35 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8);
  if (v7 >> 60 == 15)
  {
    if (v9 >> 60 == 15) {
      goto LABEL_27;
    }
LABEL_22:
    outlined copy of Data?(*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo), *(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8));
    outlined copy of Data?(v8, v9);
    outlined consume of Data?(v6, v7);
    outlined consume of Data?(v8, v9);
    goto LABEL_23;
  }
  if (v9 >> 60 == 15) {
    goto LABEL_22;
  }
  outlined copy of Data?(*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo), *(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo + 8));
  outlined copy of Data?(v8, v9);
  char v12 = specialized static Data.== infix(_:_:)(v6, v7, v8, v9);
  outlined consume of Data?(v8, v9);
  outlined consume of Data?(v6, v7);
  if ((v12 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_27:
  uint64_t v13 = *(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle + 8);
  uint64_t v14 = *(void *)((char *)v35 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle + 8);
  if (v13)
  {
    if (!v14
      || (*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle) != *(void *)((char *)v35 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle)
       || v13 != v14)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_23;
    }
  }
  else if (v14)
  {
    goto LABEL_23;
  }
  uint64_t v15 = *(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName + 8);
  uint64_t v16 = *(void *)((char *)v35 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName + 8);
  if (v15)
  {
    if (!v16
      || (*(void *)((char *)v2 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName) != *(void *)((char *)v35 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName)
       || v15 != v16)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_23;
    }
  }
  else if (v16)
  {
    goto LABEL_23;
  }
  unint64_t v17 = (void *)MEMORY[0x263F8EED0];
  uint64_t v18 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v2) + 0xA8))();
  char v20 = v19;
  uint64_t v21 = (*(uint64_t (**)(void))((*v17 & *v35) + 0xA8))();
  if (v20)
  {
    if ((v22 & 1) == 0) {
      goto LABEL_23;
    }
  }
  else if ((v22 & 1) != 0 || v18 != v21)
  {
    goto LABEL_23;
  }
  uint64_t v23 = (*(uint64_t (**)(void))((*v17 & *v2) + 0xC0))();
  uint64_t v25 = v24;
  uint64_t v26 = (*(uint64_t (**)(void))((*v17 & *v35) + 0xC0))();
  char v10 = v27;
  if (!v25)
  {
    if (v27)
    {
LABEL_52:

      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    goto LABEL_55;
  }
  if (!v27)
  {

    swift_bridgeObjectRelease();
    return v10 & 1;
  }
  if (v23 == v26 && v25 == v27)
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v26 = swift_bridgeObjectRelease();
  if ((v28 & 1) == 0)
  {
LABEL_23:

    goto LABEL_24;
  }
LABEL_55:
  uint64_t v29 = (*(uint64_t (**)(uint64_t))((*v17 & *v2) + 0xD8))(v26);
  uint64_t v31 = v30;
  uint64_t v32 = (*(uint64_t (**)(void))((*v17 & *v35) + 0xD8))();
  uint64_t v34 = v33;
  if (!v31)
  {

    if (!v34)
    {
      char v10 = 1;
      return v10 & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  if (!v33) {
    goto LABEL_52;
  }
  if (v29 == v32 && v31 == v33) {
    char v10 = 1;
  }
  else {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v10 & 1;
}

id NearbyAdvertisement.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void NearbyAdvertisement.init()()
{
}

uint64_t NearbyAdvertisement.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aScanneriidenti[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NearbyAdvertisement.CodingKeys()
{
  return NearbyAdvertisement.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NearbyAdvertisement.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NearbyAdvertisement.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance NearbyAdvertisement.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyAdvertisement.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyAdvertisement.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

id NearbyAdvertisement.__deallocating_deinit()
{
  return NearbyInvitationParameters.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for NearbyAdvertisement);
}

uint64_t NearbyAdvertisement.encode(to:)(void *a1)
{
  BOOL v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NearbyAdvertisement.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LODWORD(v14) = *(_DWORD *)((char *)v3 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType);
    char v15 = 2;
    lazy protocol witness table accessor for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 5;
    uint64_t v9 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v10 = (void *)MEMORY[0x263F8EED0];
    (*(void (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v3) + 0xA8))(v9);
    LOBYTE(v14) = 6;
    uint64_t v11 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xC0))(v11);
    LOBYTE(v14) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v13 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xD8))(v13);
    LOBYTE(v14) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    swift_bridgeObjectRelease();
    long long v14 = *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo);
    char v15 = 9;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id NearbyAdvertisement.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbyAdvertisement.init(from:)(a1);
}

id NearbyAdvertisement.init(from:)(void *a1)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v50 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v47 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<NearbyAdvertisement.CodingKeys>);
  uint64_t v46 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceColor];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  uint64_t v9 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceModel];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  uint64_t v54 = (uint64_t *)v9;
  char v10 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceID];
  *(void *)char v10 = 0;
  *((void *)v10 + 1) = 0;
  id v52 = a1;
  int v53 = (uint64_t *)v10;
  uint64_t v11 = &v1[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  unint64_t v51 = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys();
  char v55 = v1;
  unint64_t v49 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    id v16 = v55;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    type metadata accessor for NearbyAdvertisement(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v45 = v8;
    uint64_t v12 = v46;
    LOBYTE(v60) = 0;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
    uint64_t v13 = v47;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v14 = v54;
    uint64_t v15 = v4;
    uint64_t v18 = v55;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(&v55[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_scannerID], v13, v15);
    LOBYTE(v60) = 1;
    uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
    char v20 = (uint64_t *)&v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier];
    uint64_t *v20 = v19;
    v20[1] = v21;
    char v59 = 2;
    lazy protocol witness table accessor for type NearbyInvitationActivityType and conformance NearbyInvitationActivityType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_DWORD *)&v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType] = v60;
    LOBYTE(v60) = 3;
    uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v23 = (uint64_t *)&v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID];
    *uint64_t v23 = v22;
    v23[1] = v24;
    LOBYTE(v60) = 4;
    uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v26 = (uint64_t *)&v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle];
    *uint64_t v26 = v25;
    v26[1] = v27;
    LOBYTE(v60) = 5;
    uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v29 = (uint64_t *)&v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName];
    *uint64_t v29 = v28;
    v29[1] = v30;
    LOBYTE(v60) = 6;
    uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v33 = v32;
    uint64_t v34 = v45;
    int v47 = (char *)v31;
    swift_beginAccess();
    *(void *)uint64_t v34 = v47;
    v34[8] = v33 & 1;
    char v59 = 7;
    uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v37 = v36;
    swift_beginAccess();
    *long long v14 = v35;
    v14[1] = v37;
    swift_bridgeObjectRelease();
    char v58 = 8;
    uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v40 = v39;
    int v41 = v53;
    swift_beginAccess();
    *int v41 = v38;
    v41[1] = v40;
    swift_bridgeObjectRelease();
    char v61 = 9;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v42 = v55;
    *(_OWORD *)&v55[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo] = v57;

    unint64_t v43 = (objc_class *)type metadata accessor for NearbyAdvertisement(0);
    v56.id receiver = v42;
    v56.Class super_class = v43;
    id v16 = objc_msgSendSuper2(&v56, sel_init);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v49, v48);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v52);
  }
  return v16;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NearbyAdvertisement@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 312))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NearbyAdvertisement()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0x130))();
}

uint64_t NearbyInvitationJoinRequestMetadata.publicKey.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey);
  outlined copy of Data._Representation(v1, *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey + 8));
  return v1;
}

uint64_t NearbyInvitationJoinRequestMetadata.pseudonym.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
  swift_bridgeObjectRetain();
  return v1;
}

id NearbyInvitationJoinRequestMetadata.init(publicKey:pseudonym:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return InvitationBlob.init(invitationID:dataBlob:)(a1, a2, a3, a4, &OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey, &OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym, type metadata accessor for NearbyInvitationJoinRequestMetadata);
}

id InvitationBlob.init(invitationID:dataBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t (*a7)(void))
{
  uint64_t v8 = &v7[*a5];
  *(void *)uint64_t v8 = a1;
  *((void *)v8 + 1) = a2;
  uint64_t v9 = &v7[*a6];
  *(void *)uint64_t v9 = a3;
  *((void *)v9 + 1) = a4;
  v11.id receiver = v7;
  v11.Class super_class = (Class)a7();
  return objc_msgSendSuper2(&v11, sel_init);
}

id @objc NearbyInvitationParameters.description.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  uint64_t v8 = (void *)MEMORY[0x25A2B5660](v5, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t NearbyInvitationJoinRequestMetadata.description.getter()
{
  swift_getObjectType();
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x4B63696C62757020;
  v2._object = (void *)0xEC000000203A7965;
  String.append(_:)(v2);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey);
  unint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey + 8);
  outlined copy of Data._Representation(v3, v4);
  v5._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v3, v4);
  v6._countAndFlagsBits = 0x6F6475657370202CLL;
  v6._object = (void *)0xED0000203A6D796ELL;
  String.append(_:)(v6);
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym);
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 60;
}

uint64_t static NearbyInvitationJoinRequestMetadata.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall NearbyInvitationJoinRequestMetadata.encode(with:)(NSCoder with)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v4 = (void *)MEMORY[0x25A2B5660](0x654B63696C627570, 0xE900000000000079);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v4];

  Swift::String v5 = (void *)MEMORY[0x25A2B5660](*(void *)(v1 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym), *(void *)(v1 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym + 8));
  id v6 = (id)MEMORY[0x25A2B5660](0x796E6F6475657370, 0xE90000000000006DLL);
  [(objc_class *)with.super.isa encodeObject:v5 forKey:v6];
}

uint64_t NearbyInvitationJoinRequestMetadata.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbyInvitationJoinRequestMetadata.init(coder:)(a1);
}

uint64_t NearbyInvitationJoinRequestMetadata.init(coder:)(void *a1)
{
  Swift::String v2 = v1;
  type metadata accessor for NSSet(0, &lazy cache variable for type metadata for NSData);
  id v4 = v2;
  uint64_t v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v5)
  {
    id v6 = (void *)v5;
    long long v8 = xmmword_2573BF070;
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  type metadata accessor for NearbyInvitationJoinRequestMetadata();
  swift_deallocPartialClassInstance();
  return 0;
}

void NearbyInvitationJoinRequestMetadata.init()()
{
}

uint64_t NearbyInvitationJoinRequestMetadata.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x796E6F6475657370;
  }
  else {
    return 0x654B63696C627570;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NearbyInvitationJoinRequestMetadata.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NearbyInvitationJoinRequestMetadata.CodingKeys()
{
  return NearbyInvitationJoinRequestMetadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NearbyInvitationJoinRequestMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NearbyInvitationJoinRequestMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NearbyInvitationJoinRequestMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NearbyInvitationJoinRequestMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

id NearbyInvitationJoinRequestMetadata.__deallocating_deinit(uint64_t a1)
{
  return NearbyInvitationParameters.__deallocating_deinit(a1, type metadata accessor for NearbyInvitationJoinRequestMetadata);
}

uint64_t NearbyInvitationJoinRequestMetadata.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NearbyInvitationJoinRequestMetadata.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *(_OWORD *)(v3 + OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey);
  v10[15] = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

id NearbyInvitationJoinRequestMetadata.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return NearbyInvitationJoinRequestMetadata.init(from:)(a1);
}

id NearbyInvitationJoinRequestMetadata.init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NearbyInvitationJoinRequestMetadata.CodingKeys>);
  uint64_t v17 = *(void *)(v4 - 8);
  uint64_t v18 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys();
  long long v8 = v1;
  id v9 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);

    type metadata accessor for NearbyInvitationJoinRequestMetadata();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v10 = v17;
    char v21 = 0;
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v11 = v18;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v8[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey] = v20;
    LOBYTE(v20) = 1;
    uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
    long long v14 = (uint64_t *)&v8[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym];
    *long long v14 = v13;
    v14[1] = v15;

    id v16 = (objc_class *)type metadata accessor for NearbyInvitationJoinRequestMetadata();
    v19.id receiver = v8;
    v19.Class super_class = v16;
    id v9 = objc_msgSendSuper2(&v19, sel_init);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v11);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v9;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NearbyInvitationJoinRequestMetadata@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 128))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NearbyInvitationJoinRequestMetadata()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0x78))();
}

uint64_t InvitationRequestData.invitationData.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data?(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t InvitationRequestData.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvitationRequestData.pseudonym.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvitationRequestData.init(invitationData:id:pseudo:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t InvitationRequestData.description.getter()
{
  uint64_t v1 = 7104878;
  uint64_t v3 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v5 = v0[2];
  uint64_t v4 = (void *)v0[3];
  uint64_t v6 = v0[5];
  _StringGuts.grow(_:)(60);
  v7._object = (void *)0x80000002573C3990;
  v7._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v7);
  if (v2 >> 60 == 15)
  {
    unint64_t v8 = 0xE300000000000000;
    uint64_t v9 = 7104878;
  }
  else
  {
    outlined copy of Data._Representation(v3, v2);
    outlined copy of Data._Representation(v3, v2);
    uint64_t v9 = String.init<A>(reflecting:)();
    unint64_t v8 = v10;
  }
  unint64_t v11 = v8;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  outlined consume of Data?(v3, v2);
  v12._countAndFlagsBits = 0x203A6469202CLL;
  v12._object = (void *)0xE600000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v5;
  v13._object = v4;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x6F6475657370202CLL;
  v14._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v14);
  if (v6)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v1 = String.init<A>(reflecting:)();
    id v16 = v15;
  }
  else
  {
    id v16 = (void *)0xE300000000000000;
  }
  v17._countAndFlagsBits = v1;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t InvitationRequestData.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aInvitatiid[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InvitationRequestData.CodingKeys()
{
  return InvitationRequestData.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InvitationRequestData.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized InvitationRequestData.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InvitationRequestData.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InvitationRequestData.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t InvitationRequestData.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InvitationRequestData.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v7 = v1[1];
  uint64_t v9 = v1[2];
  v13[3] = v1[3];
  v13[4] = v9;
  uint64_t v10 = v1[4];
  v13[1] = v1[5];
  void v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  char v16 = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  uint64_t v11 = v13[5];
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v11)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t InvitationRequestData.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InvitationRequestData.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  char v27 = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v10 = v25;
  unint64_t v9 = v26;
  LOBYTE(v25) = 1;
  outlined copy of Data?(v10, v26);
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  uint64_t v22 = v11;
  unint64_t v24 = v9;
  LOBYTE(v25) = 2;
  swift_bridgeObjectRetain();
  uint64_t v14 = v13;
  uint64_t v23 = 0;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v23 = v15;
  v18(v8, v5);
  unint64_t v19 = v24;
  outlined copy of Data?(v10, v24);
  swift_bridgeObjectRetain();
  outlined consume of Data?(v10, v19);
  *a2 = v10;
  a2[1] = v19;
  a2[2] = v22;
  a2[3] = v14;
  a2[4] = v23;
  a2[5] = v17;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  outlined consume of Data?(v10, v19);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance InvitationRequestData@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return InvitationRequestData.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InvitationRequestData(void *a1)
{
  return InvitationRequestData.encode(to:)(a1);
}

uint64_t closure #1 in static Data.== infix(_:_:)@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      outlined copy of Data._Representation(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x2573B6DCCLL);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = outlined consume of Data._Representation(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  closure #1 in static Data.== infix(_:_:)(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t specialized static Data.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x2573B71D4);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  outlined copy of Data._Representation(a3, a4);
                  outlined copy of Data._Representation(a1, a2);
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  outlined copy of Data._Representation(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v21, v22, v20, a3, a4);
                  outlined consume of Data._Representation(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  outlined copy of Data._Representation(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = specialized Data.InlineData.withUnsafeBytes<A>(_:)(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              outlined consume of Data._Representation(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t specialized NearbyInvitation.PendingMember.displayName.getter()
{
  return *(void *)(*v0 + OBJC_IVAR____TtC14NearbySessions29IncomingInvitationJoinRequest_displayName);
}

id specialized NearbyInvitationData.init(invitationID:displayName:userInfo:hostConnectionInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(&v6[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID], a1, v13);
  char v17 = &v6[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
  *(void *)char v17 = a2;
  *((void *)v17 + 1) = a3;
  uint64_t v18 = (uint64_t *)&v6[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo];
  *uint64_t v18 = a4;
  v18[1] = a5;
  *(void *)&v6[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo] = a6;
  unint64_t v19 = v6;
  outlined copy of Data?(a4, a5);
  id v20 = a6;
  UUID.init()();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v19[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID], v16, v13);
  uint64_t v21 = specialized static InvitationSourceProvider.providerIdentifier.getter();
  uint64_t v22 = (uint64_t *)&v19[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
  *uint64_t v22 = v21;
  v22[1] = v23;

  char v24 = (objc_class *)type metadata accessor for NearbyInvitationData(0);
  v27.id receiver = v19;
  v27.Class super_class = v24;
  id v25 = objc_msgSendSuper2(&v27, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return v25;
}

char *specialized static NearbyInvitationData.create(from:)(uint64_t a1, unint64_t a2)
{
  unint64_t v76 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v71 = (uint64_t)v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v72 = (uint64_t)v65 - v6;
  uint64_t v69 = type metadata accessor for Invitation_HostConnectionInfo(0);
  uint64_t v74 = *(void *)(v69 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v69);
  uint64_t v70 = (_OWORD *)((char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  id v68 = (void *)((char *)v65 - v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v73 = (uint64_t)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v75 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  char v17 = (uint8_t *)v65 - v16;
  uint64_t v18 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v18 - 8);
  id v20 = (char *)v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Invitation_InvitationData(0);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  char v24 = (char *)v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  __int16 v26 = (void *)((char *)v65 - v25);
  uint64_t v80 = 0;
  memset(v79, 0, sizeof(v79));
  outlined copy of Data._Representation(a1, v76);
  BinaryDecodingOptions.init()();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type Invitation_InvitationData and conformance Invitation_InvitationData, 255, (void (*)(uint64_t))type metadata accessor for Invitation_InvitationData);
  objc_super v27 = v77;
  Message.init(serializedData:extensions:partial:options:)();
  if (!v27)
  {
    v65[1] = 0;
    uint64_t v66 = v24;
    unint64_t v76 = (unint64_t)v15;
    objc_super v77 = v17;
    id v20 = (char *)*v26;
    outlined copy of Data._Representation(*v26, v26[1]);
    uint64_t v28 = v73;
    UUID.init(data:)();
    uint64_t v29 = v75;
    int v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v28, 1, v12);
    long long v67 = v26;
    if (v30 == 1)
    {
      outlined destroy of Invitation_HostConnectionInfo?(v28, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (one-time initialization token for client != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Log.client);
      uint64_t v32 = (uint64_t)v66;
      outlined init with copy of Invitation_InvitationData((uint64_t)v26, (uint64_t)v66);
      char v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(void *)&v79[0] = v36;
        *(_DWORD *)uint64_t v35 = 136315138;
        id v20 = (char *)(v35 + 12);
        objc_super v77 = v35 + 4;
        uint64_t v37 = Message.debugDescription.getter();
        uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of Invitation_InvitationData(v32, type metadata accessor for Invitation_InvitationData);
        _os_log_impl(&dword_257351000, v33, v34, "Invalid payload passed in: %s", v35, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x25A2B6460](v36, -1, -1);
        MEMORY[0x25A2B6460](v35, -1, -1);
      }
      else
      {
        outlined destroy of Invitation_InvitationData(v32, type metadata accessor for Invitation_InvitationData);
      }

      lazy protocol witness table accessor for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors();
      swift_allocError();
      swift_willThrow();
      outlined destroy of Invitation_InvitationData((uint64_t)v67, type metadata accessor for Invitation_InvitationData);
    }
    else
    {
      uint64_t v39 = v77;
      (*(void (**)(uint8_t *, uint64_t, uint64_t))(v29 + 32))(v77, v28, v12);
      (*(void (**)(unint64_t, uint8_t *, uint64_t))(v29 + 16))(v76, v39, v12);
      uint64_t v66 = (char *)v26[2];
      uint64_t v73 = v26[3];
      uint64_t v40 = (uint64_t *)((char *)v26 + *(int *)(v21 + 28));
      uint64_t v42 = *v40;
      unint64_t v41 = v40[1];
      if (v41 >> 60 == 15) {
        uint64_t v43 = 0;
      }
      else {
        uint64_t v43 = *v40;
      }
      if (v41 >> 60 == 15) {
        unint64_t v44 = 0xC000000000000000;
      }
      else {
        unint64_t v44 = v40[1];
      }
      uint64_t v45 = (uint64_t)v26 + *(int *)(v21 + 32);
      uint64_t v46 = v72;
      outlined init with copy of (UUID, Bool)(v45, v72, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      int v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
      uint64_t v48 = v69;
      v74 += 48;
      if (v47(v46, 1, v69) == 1)
      {
        unint64_t v49 = v68;
        *(_OWORD *)id v68 = xmmword_2573BF060;
        v49[2] = 0;
        v49[3] = 0xE000000000000000;
        v65[0] = v45;
        swift_bridgeObjectRetain();
        outlined copy of Data?(v42, v41);
        uint64_t v45 = v65[0];
        UnknownStorage.init()();
        outlined destroy of Invitation_HostConnectionInfo?(v72, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      }
      else
      {
        uint64_t v51 = v46;
        unint64_t v49 = v68;
        outlined init with take of Invitation_HostConnectionInfo(v51, (uint64_t)v68);
        swift_bridgeObjectRetain();
        outlined copy of Data?(v42, v41);
      }
      uint64_t v52 = (uint64_t)v49;
      uint64_t v53 = *v49;
      unint64_t v54 = v49[1];
      outlined copy of Data._Representation(v53, v54);
      outlined destroy of Invitation_InvitationData(v52, type metadata accessor for Invitation_HostConnectionInfo);
      uint64_t v55 = v71;
      outlined init with copy of (UUID, Bool)(v45, v71, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      if (v47(v55, 1, v48) == 1)
      {
        objc_super v56 = v70;
        _OWORD *v70 = xmmword_2573BF060;
        *((void *)v56 + 2) = 0;
        *((void *)v56 + 3) = 0xE000000000000000;
        UnknownStorage.init()();
        outlined destroy of Invitation_HostConnectionInfo?(v55, (uint64_t *)&demangling cache variable for type metadata for Invitation_HostConnectionInfo?);
      }
      else
      {
        objc_super v56 = v70;
        outlined init with take of Invitation_HostConnectionInfo(v55, (uint64_t)v70);
      }
      uint64_t v58 = *((void *)v56 + 2);
      uint64_t v57 = *((void *)v56 + 3);
      swift_bridgeObjectRetain();
      outlined destroy of Invitation_InvitationData((uint64_t)v56, type metadata accessor for Invitation_HostConnectionInfo);
      char v59 = (objc_class *)type metadata accessor for NearbyInvitationJoinRequestMetadata();
      int v60 = (char *)objc_allocWithZone(v59);
      char v61 = (uint64_t *)&v60[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_publicKey];
      *char v61 = v53;
      v61[1] = v54;
      uint64_t v62 = &v60[OBJC_IVAR____TtC14NearbySessions35NearbyInvitationJoinRequestMetadata_pseudonym];
      *(void *)uint64_t v62 = v58;
      *((void *)v62 + 1) = v57;
      v78.id receiver = v60;
      v78.Class super_class = v59;
      id v63 = objc_msgSendSuper2(&v78, sel_init);
      id v64 = objc_allocWithZone((Class)type metadata accessor for NearbyInvitationData(0));
      id v20 = (char *)specialized NearbyInvitationData.init(invitationID:displayName:userInfo:hostConnectionInfo:)(v76, (uint64_t)v66, v73, v43, v44, v63);

      outlined consume of Data._Representation(v43, v44);
      (*(void (**)(uint8_t *, uint64_t))(v75 + 8))(v77, v12);
      outlined destroy of Invitation_InvitationData((uint64_t)v67, type metadata accessor for Invitation_InvitationData);
    }
  }
  return v20;
}

id specialized NearbyInvitationData.init<A>(from:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(&v1[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_invitationID], a1 + direct field offset for NearbyInvitation.id, v3);
  uint64_t v7 = *(void *)(a1 + direct field offset for NearbyInvitation.displayName + 8);
  uint64_t v8 = &v1[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_displayName];
  *(void *)uint64_t v8 = *(void *)(a1 + direct field offset for NearbyInvitation.displayName);
  *((void *)v8 + 1) = v7;
  uint64_t v9 = *(void *)(a1 + direct field offset for NearbyInvitation.userInfo);
  unint64_t v10 = *(void *)(a1 + direct field offset for NearbyInvitation.userInfo + 8);
  uint64_t v11 = (uint64_t *)&v1[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_userInfo];
  *uint64_t v11 = v9;
  v11[1] = v10;
  uint64_t v12 = *(void **)(a1 + direct field offset for NearbyInvitation.invitationHostInfo);
  *(void *)&v1[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_hostConnectionInfo] = v12;
  uint64_t v13 = v1;
  swift_bridgeObjectRetain();
  outlined copy of Data?(v9, v10);
  id v14 = v12;
  UUID.init()();
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v13[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderID], v6, v3);
  uint64_t v15 = specialized static InvitationSourceProvider.providerIdentifier.getter();
  uint64_t v16 = (uint64_t *)&v13[OBJC_IVAR____TtC14NearbySessions20NearbyInvitationData_sourceProviderName];
  *uint64_t v16 = v15;
  v16[1] = v17;

  uint64_t v18 = (objc_class *)type metadata accessor for NearbyInvitationData(0);
  v20.id receiver = v13;
  v20.Class super_class = v18;
  return objc_msgSendSuper2(&v20, sel_init);
}

id specialized NearbyInvitationData.__allocating_init<A>(from:)(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for NearbyInvitationData(0));
  return specialized NearbyInvitationData.init<A>(from:)(a1);
}

uint64_t *specialized NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v52 = a4;
  uint64_t v11 = v10;
  unint64_t v48 = a6;
  uint64_t v49 = a8;
  uint64_t v40 = a7;
  uint64_t v41 = a2;
  uint64_t v47 = a5;
  uint64_t v45 = a3;
  uint64_t v54 = a1;
  uint64_t v12 = *v10;
  uint64_t v13 = *(void *)(*v10 + 80);
  uint64_t v14 = *(void *)(*v10 + 88);
  uint64_t v46 = a10;
  uint64_t v42 = v13;
  uint64_t v43 = a9;
  uint64_t v44 = v14;
  type metadata accessor for NearbyInvitation.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v15 = type metadata accessor for Published();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = (uint64_t)v10 + *(void *)(v12 + 144);
  uint64_t v20 = Set.init()();
  property wrapper backing initializer of NearbyInvitation.pendingMembers(v20);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v19, v18, v15);
  *(uint64_t *)((char *)v10 + *(void *)(*v10 + 152)) = MEMORY[0x263F8EE88];
  *(uint64_t *)((char *)v10 + direct field offset for NearbyInvitation.invitationHostInfo) = (uint64_t)v52;
  uint64_t v21 = v40;
  *(uint64_t *)((char *)v10 + direct field offset for NearbyInvitation.controller) = v40;
  uint64_t v22 = (uint64_t)v10 + direct field offset for NearbyInvitation.id;
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v50 = v23;
  uint64_t v51 = v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, v54, v23);
  uint64_t v25 = (uint64_t *)((char *)v11 + direct field offset for NearbyInvitation.displayName);
  uint64_t v26 = v45;
  uint64_t v27 = v46;
  *uint64_t v25 = v41;
  v25[1] = v26;
  uint64_t v28 = (uint64_t *)((char *)v11 + direct field offset for NearbyInvitation.userInfo);
  uint64_t v30 = v47;
  unint64_t v29 = v48;
  *uint64_t v28 = v47;
  v28[1] = v29;
  uint64_t v31 = (uint64_t *)((char *)v11 + direct field offset for NearbyInvitation.sourceProvider);
  uint64_t v32 = v43;
  v31[3] = v43;
  v31[4] = v27;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(boxed_opaque_existential_1, v49, v32);
  os_log_type_t v34 = (uint64_t *)(v21 + OBJC_IVAR____TtC14NearbySessions27NearbyInvitationsController_approvalRequests);
  swift_beginAccess();
  uint64_t v53 = *v34;
  uint64_t v35 = swift_allocObject();
  swift_weakInit();
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v42;
  v36[3] = v32;
  v36[4] = v44;
  v36[5] = v27;
  v36[6] = v35;
  id v37 = v52;
  swift_retain();
  outlined copy of Data?(v30, v29);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<IncomingInvitationJoinRequest, Never>);
  lazy protocol witness table accessor for type PassthroughSubject<IncomingInvitationJoinRequest, Never> and conformance PassthroughSubject<A, B>();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v54, v50);
  return v11;
}

id specialized NearbyAdvertisement.init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v22 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceColor];
  *(void *)uint64_t v22 = 0;
  v22[8] = 1;
  uint64_t v23 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceModel];
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  uint64_t v24 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_deviceID];
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  uint64_t v25 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement____lazy_storage___dataSource];
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = 0;
  uint64_t v26 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_scannerID];
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v26, a1, v27);
  unint64_t v29 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_identifier];
  *(void *)unint64_t v29 = a2;
  *((void *)v29 + 1) = a3;
  *(_DWORD *)&v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_activityType] = a4;
  uint64_t v30 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_contactID];
  *(void *)uint64_t v30 = a5;
  *((void *)v30 + 1) = a6;
  uint64_t v31 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_handle];
  *(void *)uint64_t v31 = a7;
  *((void *)v31 + 1) = a8;
  uint64_t v32 = &v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_displayName];
  *(void *)uint64_t v32 = a9;
  *((void *)v32 + 1) = a10;
  char v33 = (uint64_t *)&v18[OBJC_IVAR____TtC14NearbySessions19NearbyAdvertisement_userInfo];
  *char v33 = a11;
  v33[1] = a12;
  swift_beginAccess();
  *(void *)uint64_t v22 = a13;
  v22[8] = a14 & 1;
  swift_beginAccess();
  *(void *)uint64_t v23 = a15;
  *((void *)v23 + 1) = a16;
  os_log_type_t v34 = v18;
  outlined copy of Data?(a11, a12);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)uint64_t v24 = a17;
  *((void *)v24 + 1) = a18;

  swift_bridgeObjectRelease();
  v42.id receiver = v34;
  v42.Class super_class = (Class)type metadata accessor for NearbyAdvertisement(0);
  id v35 = objc_msgSendSuper2(&v42, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a1, v27);
  return v35;
}

uint64_t type metadata accessor for NearbyInvitationParameters()
{
  return self;
}

uint64_t type metadata accessor for InvitationJoinResponse()
{
  return self;
}

uint64_t type metadata accessor for InvitationBlob()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationBlob.CodingKeys and conformance InvitationBlob.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for IncomingInvitationJoinRequest(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for IncomingInvitationJoinRequest);
}

uint64_t type metadata accessor for NearbyInvitationJoinRequestMetadata()
{
  return self;
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in InvitationRequest.requestApproval()(uint64_t a1)
{
  return closure #1 in InvitationRequest.requestApproval()(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t type metadata accessor for NearbyInvitationData(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyInvitationData);
}

uint64_t outlined init with copy of InvitationSourceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for NearbyInvitation.PendingMember.Errors()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_2573B875C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_2573B87A8(uint64_t a1, uint64_t a2)
{
  id v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2573B87FC()
{
  return 16;
}

__n128 sub_2573B8808(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata accessor for NearbyInvitation.PendingMember()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized InvitationBlob.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6974617469766E69 && a2 == 0xEC00000044496E6FLL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x626F6C4261746164 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized NearbyInvitation.$pendingMembers.setter(uint64_t a1)
{
  type metadata accessor for NearbyInvitation.PendingMember();
  swift_getWitnessTable();
  type metadata accessor for Set();
  uint64_t v2 = type metadata accessor for Published.Publisher();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - v3, a1);
  swift_beginAccess();
  type metadata accessor for Published();
  Published.projectedValue.setter();
  return swift_endAccess();
}

uint64_t partial apply for closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(uint64_t a1)
{
  return closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(a1);
}

uint64_t sub_2573B8AA4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

void partial apply for closure #1 in NearbyInvitation.deinit(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  closure #1 in NearbyInvitation.deinit(a1, v1 + v4, v5);
}

uint64_t partial apply for closure #1 in NearbyInvitation.markUsed()(uint64_t a1)
{
  return closure #1 in NearbyInvitation.markUsed()(a1, v1);
}

void partial apply for closure #1 in NearbyInvitation.approve(_:userInfo:)(uint64_t a1)
{
  closure #1 in NearbyInvitation.approve(_:userInfo:)(a1, *(void *)(v1 + 16), *(void ***)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t NearbyInvitation.reject(_:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t type metadata accessor for InvitationApprovalRequest()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationApprovalRequest.CodingKeys and conformance InvitationApprovalRequest.CodingKeys);
  }
  return result;
}

uint64_t partial apply for closure #1 in NearbyInvitationData.encodedData.getter(uint64_t *a1)
{
  return closure #1 in NearbyInvitationData.encodedData.getter(a1, *(void *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationData.CodingKeys and conformance NearbyInvitationData.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for NearbyAdvertisement(uint64_t a1)
{
  return type metadata accessor for Invitation_HostConnectionInfo(a1, (uint64_t *)&type metadata singleton initialization cache for NearbyAdvertisement);
}

unint64_t lazy protocol witness table accessor for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyAdvertisement.CodingKeys and conformance NearbyAdvertisement.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationJoinRequestMetadata.CodingKeys and conformance NearbyInvitationJoinRequestMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvitationRequestData.CodingKeys and conformance InvitationRequestData.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationScopeType and conformance NearbyInvitationScopeType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType;
  if (!lazy protocol witness table cache variable for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationRouteType and conformance NearbyInvitationRouteType);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in InvitationRequest<A>.Errors()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in NearbyInvitation<A>.PendingMember.Errors()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in NearbyInvitation<A>.PendingMember()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors;
  if (!lazy protocol witness table cache variable for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NearbyInvitationData.Errors and conformance NearbyInvitationData.Errors);
  }
  return result;
}

uint64_t sub_2573B8FBC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x88))();
  *a2 = result;
  return result;
}

uint64_t sub_2573B9018(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x263F8EED0] & **a2) + 0x90);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_2573B9080@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2573B90CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 128);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2573B9134()
{
  return 16;
}

__n128 sub_2573B9140(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2573B914C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2573B9198(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(void **)a2 + 152);
  outlined copy of Data?(*a1, v3);
  return v4(v2, v3);
}

uint64_t sub_2573B9204()
{
  return 16;
}

__n128 sub_2573B9210(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2573B9220()
{
  return swift_weakAssign();
}

uint64_t sub_2573B9230()
{
  return 16;
}

__n128 sub_2573B923C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2573B9248()
{
  return 16;
}

__n128 sub_2573B9254(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2573B9260(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 192))();
}

uint64_t sub_2573B92A8()
{
  return 16;
}

__n128 sub_2573B92B4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2573B92C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 216))();
  *a2 = result;
  return result;
}

uint64_t sub_2573B930C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 224);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2573B9360()
{
  return 16;
}

__n128 sub_2573B936C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2573B9378@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0xA8))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_2573B93DC(uint64_t a1, void **a2)
{
  return (*(uint64_t (**)(void, void))((*MEMORY[0x263F8EED0] & **a2) + 0xB0))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_2573B9440@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0xC0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2573B949C(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & **a2) + 0xC8);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2573B9514@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0xD8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2573B9570(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & **a2) + 0xE0);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2573B95E8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0xF0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2573B9644(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & **a2) + 0xF8);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t dispatch thunk of NearbyInvitationsProvider.generateNearbyInvitation(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of NearbyInvitationsProvider.advertiseNearbyInvitation(_:provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of NearbyInvitationsProvider.stopAdvertisingNearbyInvitation(_:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of NearbyInvitationsProvider.scanNearbyInvitations(scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of NearbyInvitationsProvider.scanNearbyEndpoints(params:scannerID:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of NearbyInvitationsProvider.stopScanningNearbyInvitations(provider:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of NearbyInvitationsProvider.requestConnection(with:localInvitation:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

ValueMetadata *type metadata accessor for NearbyInvitationActivityType()
{
  return &type metadata for NearbyInvitationActivityType;
}

ValueMetadata *type metadata accessor for NearbyInvitationScopeType()
{
  return &type metadata for NearbyInvitationScopeType;
}

ValueMetadata *type metadata accessor for NearbyInvitationRouteType()
{
  return &type metadata for NearbyInvitationRouteType;
}

uint64_t method lookup function for NearbyInvitationParameters(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyInvitationParameters);
}

uint64_t dispatch thunk of NearbyInvitationParameters.__allocating_init(serviceName:browserType:listner:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v4 + 104))(a1, a2, a3, a4 | ((HIDWORD(a4) & 1) << 32));
}

uint64_t dispatch thunk of NearbyInvitationParameters.__allocating_init(serviceName:browserType:route:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v4 + 112))(a1, a2, a3, a4 | ((HIDWORD(a4) & 1) << 32));
}

uint64_t dispatch thunk of NearbyInvitationParameters.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of NearbyInvitationParameters.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t method lookup function for InvitationJoinResponse(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for InvitationJoinResponse);
}

uint64_t dispatch thunk of InvitationJoinResponse.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of InvitationJoinResponse.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t method lookup function for InvitationBlob(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for InvitationBlob);
}

uint64_t dispatch thunk of InvitationBlob.__allocating_init(invitationID:dataBlob:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of InvitationBlob.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of InvitationBlob.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of InvitationBlob.encode(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of InvitationBlob.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t ObjC metadata update function for IncomingInvitationJoinRequest()
{
  return type metadata accessor for IncomingInvitationJoinRequest(0);
}

uint64_t type metadata completion function for IncomingInvitationJoinRequest()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for IncomingInvitationJoinRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for IncomingInvitationJoinRequest);
}

uint64_t dispatch thunk of IncomingInvitationJoinRequest.hostInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of IncomingInvitationJoinRequest.hostInfo.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of IncomingInvitationJoinRequest.hostInfo.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of IncomingInvitationJoinRequest.__allocating_init(invitationID:remotePseudonym:destinationToken:remotePublicKey:displayName:userInfo:hostInfo:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of IncomingInvitationJoinRequest.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of IncomingInvitationJoinRequest.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t type metadata completion function for InvitationRequest()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for InvitationRequest()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for InvitationRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for InvitationRequest);
}

uint64_t dispatch thunk of InvitationRequest.displayName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of InvitationRequest.displayName.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of InvitationRequest.displayName.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of InvitationRequest.userInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of InvitationRequest.userInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of InvitationRequest.userInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of InvitationRequest.invitationDisplayName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of InvitationRequest.invitationUserInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of InvitationRequest.__allocating_init(remoteInvitationData:providerType:displayName:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of InvitationRequest.__allocating_init(remoteInvitationData:displayName:userInfo:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of InvitationRequest.requestApproval()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 200) + **(int **)(*(void *)v0 + 200));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = dispatch thunk of NearbyGroupTable.firstGroup();
  return v4();
}

uint64_t type metadata accessor for InvitationRequest.Errors()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of static InvitationSourceProvider.providerIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of InvitationSourceProvider.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of InvitationSourceProvider.didApproveMember(member:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 24) + **(int **)(a3 + 24));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v9(a1, a2, a3);
}

ValueMetadata *type metadata accessor for Handle()
{
  return &type metadata for Handle;
}

uint64_t type metadata completion function for NearbyInvitation()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    type metadata accessor for NearbyInvitation.PendingMember();
    swift_getWitnessTable();
    type metadata accessor for Set();
    uint64_t result = type metadata accessor for Published();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t type metadata accessor for NearbyInvitation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for NearbyInvitation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyInvitation);
}

uint64_t dispatch thunk of NearbyInvitation.invitationData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of NearbyInvitation.pendingMembers.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of NearbyInvitation.pendingMembers.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of NearbyInvitation.pendingMembers.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of NearbyInvitation.$pendingMembers.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of NearbyInvitation.$pendingMembers.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of NearbyInvitation.$pendingMembers.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of NearbyInvitation.cancellables.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of NearbyInvitation.cancellables.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of NearbyInvitation.cancellables.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of NearbyInvitation.__allocating_init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 240))(a1, a2);
}

uint64_t dispatch thunk of NearbyInvitation.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of NearbyInvitation.markUsed()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 256) + **(int **)(*(void *)v0 + 256));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v4();
}

uint64_t dispatch thunk of NearbyInvitation.approve(_:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 264)
                                                          + **(int **)(*(void *)v3 + 264));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  void *v8 = v4;
  v8[1] = partial apply for closure #1 in NearbyGroupTable.registerIfNotPresent(identifier:generationBlock:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of NearbyInvitation.reject(_:)(uint64_t a1)
{
  unint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 272) + **(int **)(*(void *)v1 + 272));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #1 in NearbyGroupTable.firstGroup();
  return v6(a1);
}

uint64_t destroy for NearbyInvitation.PendingMember(id *a1)
{
  return swift_weakDestroy();
}

void **initializeWithCopy for NearbyInvitation.PendingMember(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  swift_weakCopyInit();
  return a1;
}

void **assignWithCopy for NearbyInvitation.PendingMember(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  swift_weakCopyAssign();
  return a1;
}

void *initializeWithTake for NearbyInvitation.PendingMember(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

void **assignWithTake for NearbyInvitation.PendingMember(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbyInvitation.PendingMember(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbyInvitation.PendingMember(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t method lookup function for InvitationApprovalRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for InvitationApprovalRequest);
}

uint64_t dispatch thunk of InvitationApprovalRequest.__allocating_init(remoteInvitationData:displayName:userInfo:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of InvitationApprovalRequest.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of InvitationApprovalRequest.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of InvitationApprovalRequest.encode(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of InvitationApprovalRequest.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t ObjC metadata update function for NearbyInvitationData()
{
  return type metadata accessor for NearbyInvitationData(0);
}

uint64_t type metadata completion function for NearbyInvitationData()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for NearbyInvitationData(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyInvitationData);
}

uint64_t dispatch thunk of NearbyInvitationData.encodedData.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of NearbyInvitationData.__allocating_init<A>(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of NearbyInvitationData.__allocating_init(invitationID:displayName:userInfo:hostConnectionInfo:sourceProviderID:sourceProviderName:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of NearbyInvitationData.__allocating_init(invitationID:displayName:userInfo:hostConnectionInfo:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of NearbyInvitationData.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of NearbyInvitationData.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of NearbyInvitationData.encode(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of NearbyInvitationData.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

unsigned char *storeEnumTagSinglePayload for NearbyInvitation.PendingMember.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2573BAB94);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbyInvitationData.Errors()
{
  return &type metadata for NearbyInvitationData.Errors;
}

uint64_t ObjC metadata update function for NearbyAdvertisement()
{
  return type metadata accessor for NearbyAdvertisement(0);
}

uint64_t type metadata completion function for NearbyAdvertisement()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for NearbyAdvertisement(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyAdvertisement);
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceColor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceColor.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x263F8EED0] & *v2) + 0xB0))(a1, a2 & 1);
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceColor.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceModel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceModel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceModel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceID.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceID.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of NearbyAdvertisement.deviceID.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of NearbyAdvertisement.dataSource.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of NearbyAdvertisement.dataSource.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of NearbyAdvertisement.dataSource.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of NearbyAdvertisement.__allocating_init(scannerID:identifier:activityType:contactID:handle:displayName:userInfo:deviceColor:deviceModel:deviceID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 264))(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of NearbyAdvertisement.approve(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of NearbyAdvertisement.reject()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of NearbyAdvertisement.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of NearbyAdvertisement.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of NearbyAdvertisement.encode(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of NearbyAdvertisement.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t method lookup function for NearbyInvitationJoinRequestMetadata(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NearbyInvitationJoinRequestMetadata);
}

uint64_t dispatch thunk of NearbyInvitationJoinRequestMetadata.__allocating_init(publicKey:pseudonym:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of NearbyInvitationJoinRequestMetadata.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of NearbyInvitationJoinRequestMetadata.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NearbyInvitationJoinRequestMetadata.encode(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of NearbyInvitationJoinRequestMetadata.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t destroy for InvitationRequestData(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  if (v1 >> 60 != 15) {
    outlined consume of Data._Representation(*a1, v1);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InvitationRequestData(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  uint64_t v6 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for InvitationRequestData(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *a2;
      outlined copy of Data._Representation(*a2, a2[1]);
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      outlined consume of Data._Representation(v7, v8);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v5 = *a2;
  outlined copy of Data._Representation(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for InvitationRequestData(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v6, v4);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InvitationRequestData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InvitationRequestData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InvitationRequestData()
{
  return &type metadata for InvitationRequestData;
}

void *type metadata accessor for InvitationRequestData.CodingKeys()
{
  return &unk_270655AE0;
}

void *type metadata accessor for NearbyInvitationJoinRequestMetadata.CodingKeys()
{
  return &unk_270655B70;
}

uint64_t getEnumTagSinglePayload for NearbyAdvertisement.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NearbyAdvertisement.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *__n128 result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2573BB648);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 9;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NearbyAdvertisement.CodingKeys()
{
  return &unk_270655C00;
}

uint64_t getEnumTagSinglePayload for NearbyInvitationData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NearbyInvitationData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2573BB7DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NearbyInvitationData.CodingKeys()
{
  return &unk_270655C90;
}

unsigned char *storeEnumTagSinglePayload for InvitationRequest.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2573BB8E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for InvitationApprovalRequest.CodingKeys()
{
  return &unk_270655D20;
}

unsigned char *storeEnumTagSinglePayload for NearbyInvitationJoinRequestMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2573BB9E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for InvitationBlob.CodingKeys()
{
  return &unk_270655DB0;
}

uint64_t specialized InvitationApprovalRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x80000002573C3800
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized NearbyInvitationData.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6974617469766E69 && a2 == 0xEC00000044496E6FLL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002573C2A80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002573C2C10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002573C2C30)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t specialized NearbyAdvertisement.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x4972656E6E616373 && a2 == 0xE900000000000044;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7974697669746361 && a2 == 0xEC00000065707954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x49746361746E6F63 && a2 == 0xE900000000000044 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C646E6168 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6F43656369766564 && a2 == 0xEB00000000726F6CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6F4D656369766564 && a2 == 0xEB000000006C6564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x4449656369766564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t specialized NearbyInvitationJoinRequestMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x654B63696C627570 && a2 == 0xE900000000000079
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x796E6F6475657370 && a2 == 0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized InvitationRequestData.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6974617469766E69 && a2 == 0xEE00617461446E6FLL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x796E6F6475657370 && a2 == 0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitationData.encodedData.getter(uint64_t *a1)
{
  return closure #1 in closure #1 in NearbyInvitationData.encodedData.getter(a1, *(void *)(v1 + 16));
}

uint64_t sub_2573BCB9C()
{
  return objectdestroy_157Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitation.approve(_:userInfo:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #1 in closure #1 in NearbyInvitation.approve(_:userInfo:)(a1);
}

uint64_t sub_2573BCC1C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return MEMORY[0x270FA0238](v0, v11 + 8, v10);
}

uint64_t partial apply for closure #1 in closure #1 in NearbyInvitation.markUsed()(void *a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void **)(v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in closure #1 in NearbyInvitation.markUsed()(a1, v1 + v4, v1 + v7, v8);
}

uint64_t sub_2573BCE88()
{
  return objectdestroy_157Tm(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata, Error>);
}

uint64_t objectdestroy_157Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return MEMORY[0x270FA0238](v1, v6, v7);
}

void *partial apply for closure #1 in closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NearbyInvitationJoinRequestMetadata, Error>);
  return closure #1 in closure #1 in NearbyInvitation.init<A>(id:displayName:userInfo:controller:invitationSourceProvider:)(a1, a2);
}

uint64_t sub_2573BCFA4()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationJoinResponse, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in InvitationRequest.requestApproval()(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<InvitationJoinResponse, Error>);
  return closure #1 in closure #1 in InvitationRequest.requestApproval()(a1, a2);
}

uint64_t outlined init with copy of Invitation_InvitationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Invitation_InvitationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Invitation_InvitationData(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2573BD1E8()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2573BD220()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(void **a1)
{
  return closure #1 in NearbyInvitation.init<A>(id:displayName:hostInfo:userInfo:controller:invitationSourceProvider:)(a1);
}

unint64_t lazy protocol witness table accessor for type PassthroughSubject<IncomingInvitationJoinRequest, Never> and conformance PassthroughSubject<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type PassthroughSubject<IncomingInvitationJoinRequest, Never> and conformance PassthroughSubject<A, B>;
  if (!lazy protocol witness table cache variable for type PassthroughSubject<IncomingInvitationJoinRequest, Never> and conformance PassthroughSubject<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PassthroughSubject<IncomingInvitationJoinRequest, Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<IncomingInvitationJoinRequest, Never> and conformance PassthroughSubject<A, B>);
  }
  return result;
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x270EEDDD0]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x270EEDE10]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x270EEDE18]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x270EEE638]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x270EEE658]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x270EEE670]();
}

uint64_t Data.description.getter()
{
  return MEMORY[0x270EF0020]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x270EF0120]();
}

uint64_t static Data._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF0168]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0178]();
}

uint64_t Data.hashValue.getter()
{
  return MEMORY[0x270EF0278]();
}

uint64_t UUID.init(uuidString:)()
{
  return MEMORY[0x270EF0C58]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x270EF0C68]();
}

uint64_t UUID.data.getter()
{
  return MEMORY[0x270F18900]();
}

uint64_t UUID.init(data:)()
{
  return MEMORY[0x270F18908]();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)MEMORY[0x270EF0C88]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x270EF0CB0]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0CB8]();
}

uint64_t UUID.hashValue.getter()
{
  return MEMORY[0x270EF0CF8]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t type metadata accessor for XPCIdentity()
{
  return MEMORY[0x270F18920]();
}

uint64_t MachServiceName.rawValue.getter()
{
  return MEMORY[0x270F18930]();
}

uint64_t type metadata accessor for MachServiceName()
{
  return MEMORY[0x270F18938]();
}

uint64_t AsyncSerialQueue.init(priority:bufferingPolicy:)()
{
  return MEMORY[0x270F18950]();
}

uint64_t type metadata accessor for AsyncSerialQueue()
{
  return MEMORY[0x270F18958]();
}

uint64_t Lock.withLock<A>(_:)()
{
  return MEMORY[0x270F189B8]();
}

uint64_t Lock.init()()
{
  return MEMORY[0x270F189D8]();
}

uint64_t type metadata accessor for Lock()
{
  return MEMORY[0x270F189E0]();
}

uint64_t XPCClient.__allocating_init(listenerEndpoint:)()
{
  return MEMORY[0x270F189F0]();
}

uint64_t dispatch thunk of XPCClient.connectionClosure.setter()
{
  return MEMORY[0x270F189F8]();
}

uint64_t XPCClient.withSynchronousHost<A>(body:errorHandler:)()
{
  return MEMORY[0x270F18A00]();
}

uint64_t XPCClient.queue.getter()
{
  return MEMORY[0x270F18A08]();
}

uint64_t XPCClient.withHost(body:errorHandler:)()
{
  return MEMORY[0x270F18A10]();
}

uint64_t type metadata accessor for GroupSessionProviderState()
{
  return MEMORY[0x270EF2F20]();
}

uint64_t AddressableMember.init(handle:)()
{
  return MEMORY[0x270EF3058]();
}

uint64_t type metadata accessor for AddressableMember()
{
  return MEMORY[0x270EF3060]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x270F44A18]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x270F44A20]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x270F44A28]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x270F44AA8]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x270F44AB0]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x270F44B10]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return MEMORY[0x270F44B78]();
}

{
  return MEMORY[0x270F44B80]();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return MEMORY[0x270F44BF8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x270F44C38]();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return MEMORY[0x270F44CA0]();
}

uint64_t Message.serializedData(partial:)()
{
  return MEMORY[0x270F44CA8]();
}

uint64_t Message.debugDescription.getter()
{
  return MEMORY[0x270F44CC0]();
}

uint64_t static Message.with(_:)()
{
  return MEMORY[0x270F44CE0]();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return MEMORY[0x270F44D88]();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return MEMORY[0x270F44DD8]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44E00]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x270F44E10]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x270F44E18]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x270F44E28]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t AnyCancellable.store(in:)()
{
  return MEMORY[0x270EE3B98]();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x270EE3BB0]();
}

uint64_t AnyCancellable.init(_:)()
{
  return MEMORY[0x270EE3BC8]();
}

uint64_t AsyncPublisher.makeAsyncIterator()()
{
  return MEMORY[0x270EE3BD0]();
}

uint64_t PassthroughSubject.send(_:)()
{
  return MEMORY[0x270EE3C50]();
}

uint64_t PassthroughSubject.init()()
{
  return MEMORY[0x270EE3C70]();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return MEMORY[0x270EE3C88]();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return MEMORY[0x270EE3CB8]();
}

uint64_t Published.init(initialValue:)()
{
  return MEMORY[0x270EE3DA8]();
}

uint64_t Published.projectedValue.getter()
{
  return MEMORY[0x270EE3DB0]();
}

uint64_t Published.projectedValue.setter()
{
  return MEMORY[0x270EE3DB8]();
}

uint64_t static Published.subscript.modify()
{
  return MEMORY[0x270EE3DD0]();
}

uint64_t static Published.subscript.getter()
{
  return MEMORY[0x270EE3DD8]();
}

uint64_t static Published.subscript.setter()
{
  return MEMORY[0x270EE3DE0]();
}

uint64_t type metadata accessor for Published.Publisher()
{
  return MEMORY[0x270EE3DE8]();
}

uint64_t type metadata accessor for Published()
{
  return MEMORY[0x270EE3DF0]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x270EE4008]();
}

uint64_t Publisher<>.values.getter()
{
  return MEMORY[0x270EE4020]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return MEMORY[0x270FA0BA8]();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return MEMORY[0x270FA0BF0]();
}

uint64_t Set.init()()
{
  return MEMORY[0x270F9CFC8]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x270F9D318]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x270F9D320]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x270F9D600]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t String.hashValue.getter()
{
  return MEMORY[0x270F9D888]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x270F9DA70]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x270F9DAD8]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x270F9DB58]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9DBA0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x270EF1B88]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x270FA1E18]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t AsyncStream.Continuation.onTermination.setter()
{
  return MEMORY[0x270FA1F30]();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return MEMORY[0x270FA1F48]();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return MEMORY[0x270FA1F60]();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return MEMORY[0x270FA1F90]();
}

Swift::Void __swiftcall Task.cancel()()
{
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x270EF1C98]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1CC0]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x270F9DEB0]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t Set.insert(_:)()
{
  return MEMORY[0x270F9DF58]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x270F9DF80]();
}

uint64_t type metadata accessor for Set()
{
  return MEMORY[0x270F9DFD0]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1CE0]();
}

uint64_t Int.hashValue.getter()
{
  return MEMORY[0x270F9E010]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x270FA2E70]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)()
{
  return MEMORY[0x270F18A20]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x270FA0C50]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x270FA0DB8]();
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  return MEMORY[0x270EF20F8]();
}

uint64_t NSCoder.decodeObject(of:forKey:)()
{
  return MEMORY[0x270EF2100]();
}

uint64_t NSCoder.decodeArrayOfObjects<A>(ofClass:forKey:)()
{
  return MEMORY[0x270EF2128]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270FA1170](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x270FA1190]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t StringProtocol.hash.getter()
{
  return MEMORY[0x270EF2550]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x270F9E670]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x270F9E800]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x270F9E818]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x270F9E848]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x270F9E858]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x270F9E870]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x270F9E878]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x270F9E958]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9E960]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x270F9E968]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

{
  return MEMORY[0x270F9EFF0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x270F9F098]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270F9F210]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F270]();
}

{
  return MEMORY[0x270F9F290]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F2E8]();
}

{
  return MEMORY[0x270F9F2F0]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F318]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F3B0]();
}

{
  return MEMORY[0x270F9F3D0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F428]();
}

{
  return MEMORY[0x270F9F430]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F458]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return MEMORY[0x270F9FA68]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

NSNumber __swiftcall UInt8._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF2720]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return MEMORY[0x270F9FC88]();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t Hasher.init()()
{
  return MEMORY[0x270F9FC98]();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF2760]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x270FA0128]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x270FA0250]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x270FA0490]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x270FA0498]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x270FA05D0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x270FA0630]();
}

uint64_t swift_weakCopyAssign()
{
  return MEMORY[0x270FA0638]();
}

uint64_t swift_weakCopyInit()
{
  return MEMORY[0x270FA0640]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_weakTakeAssign()
{
  return MEMORY[0x270FA0660]();
}

uint64_t swift_weakTakeInit()
{
  return MEMORY[0x270FA0668]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}